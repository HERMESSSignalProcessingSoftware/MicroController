
STM32F302Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08002dbc  08002dbc  00012dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002f84  08002f84  00012f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002f88  08002f88  00012f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08002f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000010e4  20000010  08002f9c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200010f4  08002f9c  000210f4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00019b34  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000032b8  00000000  00000000  00039b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b9cd  00000000  00000000  0003ce2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000fb8  00000000  00000000  00048800  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001408  00000000  00000000  000497b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00009cb4  00000000  00000000  0004abc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005e24  00000000  00000000  00054874  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005a698  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003000  00000000  00000000  0005a714  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002da4 	.word	0x08002da4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08002da4 	.word	0x08002da4

080001d0 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <HAL_Init+0x20>)
{
 80001d2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001d4:	6813      	ldr	r3, [r2, #0]
 80001d6:	f043 0310 	orr.w	r3, r3, #16
 80001da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001dc:	2003      	movs	r0, #3
 80001de:	f000 f81b 	bl	8000218 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001e2:	2000      	movs	r0, #0
 80001e4:	f002 fd2c 	bl	8002c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e8:	f002 fc9e 	bl	8002b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80001ec:	2000      	movs	r0, #0
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001f4:	4a03      	ldr	r2, [pc, #12]	; (8000204 <HAL_IncTick+0x10>)
 80001f6:	4b04      	ldr	r3, [pc, #16]	; (8000208 <HAL_IncTick+0x14>)
 80001f8:	6811      	ldr	r1, [r2, #0]
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	440b      	add	r3, r1
 80001fe:	6013      	str	r3, [r2, #0]
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	20000fc8 	.word	0x20000fc8
 8000208:	20000000 	.word	0x20000000

0800020c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800020c:	4b01      	ldr	r3, [pc, #4]	; (8000214 <HAL_GetTick+0x8>)
 800020e:	6818      	ldr	r0, [r3, #0]
}
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	20000fc8 	.word	0x20000fc8

08000218 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000218:	1ec3      	subs	r3, r0, #3
 800021a:	2b04      	cmp	r3, #4
{
 800021c:	b510      	push	{r4, lr}
 800021e:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000220:	d903      	bls.n	800022a <HAL_NVIC_SetPriorityGrouping+0x12>
 8000222:	21ac      	movs	r1, #172	; 0xac
 8000224:	4809      	ldr	r0, [pc, #36]	; (800024c <HAL_NVIC_SetPriorityGrouping+0x34>)
 8000226:	f002 fc7d 	bl	8002b24 <assert_failed>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800022a:	4a09      	ldr	r2, [pc, #36]	; (8000250 <HAL_NVIC_SetPriorityGrouping+0x38>)
 800022c:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800022e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000232:	041b      	lsls	r3, r3, #16
 8000234:	0c1b      	lsrs	r3, r3, #16
 8000236:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800023a:	0224      	lsls	r4, r4, #8
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000244:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8000246:	60d4      	str	r4, [r2, #12]
 8000248:	bd10      	pop	{r4, pc}
 800024a:	bf00      	nop
 800024c:	08002de0 	.word	0x08002de0
 8000250:	e000ed00 	.word	0xe000ed00

08000254 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000254:	2a0f      	cmp	r2, #15
{
 8000256:	b570      	push	{r4, r5, r6, lr}
 8000258:	4604      	mov	r4, r0
 800025a:	460e      	mov	r6, r1
 800025c:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800025e:	d903      	bls.n	8000268 <HAL_NVIC_SetPriority+0x14>
 8000260:	21c4      	movs	r1, #196	; 0xc4
 8000262:	481a      	ldr	r0, [pc, #104]	; (80002cc <HAL_NVIC_SetPriority+0x78>)
 8000264:	f002 fc5e 	bl	8002b24 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000268:	2e0f      	cmp	r6, #15
 800026a:	d903      	bls.n	8000274 <HAL_NVIC_SetPriority+0x20>
 800026c:	21c5      	movs	r1, #197	; 0xc5
 800026e:	4817      	ldr	r0, [pc, #92]	; (80002cc <HAL_NVIC_SetPriority+0x78>)
 8000270:	f002 fc58 	bl	8002b24 <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000274:	4b16      	ldr	r3, [pc, #88]	; (80002d0 <HAL_NVIC_SetPriority+0x7c>)
 8000276:	68d9      	ldr	r1, [r3, #12]
 8000278:	f3c1 2102 	ubfx	r1, r1, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800027c:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000280:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000282:	2b04      	cmp	r3, #4
 8000284:	bf28      	it	cs
 8000286:	2304      	movcs	r3, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000288:	2001      	movs	r0, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800028a:	2a06      	cmp	r2, #6
 800028c:	bf8c      	ite	hi
 800028e:	3903      	subhi	r1, #3
 8000290:	2100      	movls	r1, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000292:	fa00 f203 	lsl.w	r2, r0, r3
 8000296:	3a01      	subs	r2, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000298:	4088      	lsls	r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800029a:	4032      	ands	r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800029c:	3801      	subs	r0, #1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800029e:	408a      	lsls	r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002a0:	4005      	ands	r5, r0
  if ((int32_t)(IRQn) >= 0)
 80002a2:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a4:	ea42 0205 	orr.w	r2, r2, r5
 80002a8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	bfad      	iteet	ge
 80002ae:	f104 4460 	addge.w	r4, r4, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b2:	f004 040f 	andlt.w	r4, r4, #15
 80002b6:	4b07      	ldrlt	r3, [pc, #28]	; (80002d4 <HAL_NVIC_SetPriority+0x80>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b8:	f504 4461 	addge.w	r4, r4, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002bc:	bfb5      	itete	lt
 80002be:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c2:	551a      	strblt	r2, [r3, r4]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	f884 2300 	strbge.w	r2, [r4, #768]	; 0x300
 80002c8:	bd70      	pop	{r4, r5, r6, pc}
 80002ca:	bf00      	nop
 80002cc:	08002de0 	.word	0x08002de0
 80002d0:	e000ed00 	.word	0xe000ed00
 80002d4:	e000ed14 	.word	0xe000ed14

080002d8 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80002d8:	2800      	cmp	r0, #0
 80002da:	da03      	bge.n	80002e4 <HAL_NVIC_EnableIRQ+0xc>
 80002dc:	21d8      	movs	r1, #216	; 0xd8
 80002de:	4806      	ldr	r0, [pc, #24]	; (80002f8 <HAL_NVIC_EnableIRQ+0x20>)
 80002e0:	f002 bc20 	b.w	8002b24 <assert_failed>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002e4:	0942      	lsrs	r2, r0, #5
 80002e6:	2301      	movs	r3, #1
 80002e8:	f000 001f 	and.w	r0, r0, #31
 80002ec:	fa03 f000 	lsl.w	r0, r3, r0
 80002f0:	4b02      	ldr	r3, [pc, #8]	; (80002fc <HAL_NVIC_EnableIRQ+0x24>)
 80002f2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002f6:	4770      	bx	lr
 80002f8:	08002de0 	.word	0x08002de0
 80002fc:	e000e100 	.word	0xe000e100

08000300 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000300:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8000304:	2a02      	cmp	r2, #2
{  
 8000306:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000308:	d003      	beq.n	8000312 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800030a:	2204      	movs	r2, #4
 800030c:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800030e:	2001      	movs	r0, #1
 8000310:	bd10      	pop	{r4, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000312:	6802      	ldr	r2, [r0, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000314:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000316:	6811      	ldr	r1, [r2, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000318:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800031a:	f021 010e 	bic.w	r1, r1, #14
 800031e:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000320:	6811      	ldr	r1, [r2, #0]
 8000322:	f021 0101 	bic.w	r1, r1, #1
 8000326:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000328:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800032a:	2101      	movs	r1, #1
 800032c:	fa01 f202 	lsl.w	r2, r1, r2
 8000330:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000332:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000334:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000338:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800033c:	b113      	cbz	r3, 8000344 <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 800033e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000340:	4620      	mov	r0, r4
 8000342:	bd10      	pop	{r4, pc}
 8000344:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000346:	bd10      	pop	{r4, pc}

08000348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800034c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
{
 8000350:	b085      	sub	sp, #20
 8000352:	4604      	mov	r4, r0
 8000354:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000356:	d012      	beq.n	800037e <HAL_GPIO_Init+0x36>
 8000358:	4b8f      	ldr	r3, [pc, #572]	; (8000598 <HAL_GPIO_Init+0x250>)
 800035a:	4298      	cmp	r0, r3
 800035c:	d00f      	beq.n	800037e <HAL_GPIO_Init+0x36>
 800035e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000362:	4298      	cmp	r0, r3
 8000364:	d00b      	beq.n	800037e <HAL_GPIO_Init+0x36>
 8000366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800036a:	4298      	cmp	r0, r3
 800036c:	d007      	beq.n	800037e <HAL_GPIO_Init+0x36>
 800036e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000372:	4298      	cmp	r0, r3
 8000374:	d003      	beq.n	800037e <HAL_GPIO_Init+0x36>
 8000376:	21ba      	movs	r1, #186	; 0xba
 8000378:	4888      	ldr	r0, [pc, #544]	; (800059c <HAL_GPIO_Init+0x254>)
 800037a:	f002 fbd3 	bl	8002b24 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800037e:	682b      	ldr	r3, [r5, #0]
 8000380:	b29a      	uxth	r2, r3
 8000382:	b112      	cbz	r2, 800038a <HAL_GPIO_Init+0x42>
 8000384:	0c1b      	lsrs	r3, r3, #16
 8000386:	041b      	lsls	r3, r3, #16
 8000388:	b11b      	cbz	r3, 8000392 <HAL_GPIO_Init+0x4a>
 800038a:	21bb      	movs	r1, #187	; 0xbb
 800038c:	4883      	ldr	r0, [pc, #524]	; (800059c <HAL_GPIO_Init+0x254>)
 800038e:	f002 fbc9 	bl	8002b24 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000392:	686b      	ldr	r3, [r5, #4]
 8000394:	2b03      	cmp	r3, #3
 8000396:	d917      	bls.n	80003c8 <HAL_GPIO_Init+0x80>
 8000398:	f1a3 0211 	sub.w	r2, r3, #17
 800039c:	2a01      	cmp	r2, #1
 800039e:	d913      	bls.n	80003c8 <HAL_GPIO_Init+0x80>
 80003a0:	497f      	ldr	r1, [pc, #508]	; (80005a0 <HAL_GPIO_Init+0x258>)
 80003a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80003a6:	428a      	cmp	r2, r1
 80003a8:	d00e      	beq.n	80003c8 <HAL_GPIO_Init+0x80>
 80003aa:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d00a      	beq.n	80003c8 <HAL_GPIO_Init+0x80>
 80003b2:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 80003b6:	428a      	cmp	r2, r1
 80003b8:	d006      	beq.n	80003c8 <HAL_GPIO_Init+0x80>
 80003ba:	4a7a      	ldr	r2, [pc, #488]	; (80005a4 <HAL_GPIO_Init+0x25c>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d003      	beq.n	80003c8 <HAL_GPIO_Init+0x80>
 80003c0:	21bc      	movs	r1, #188	; 0xbc
 80003c2:	4876      	ldr	r0, [pc, #472]	; (800059c <HAL_GPIO_Init+0x254>)
 80003c4:	f002 fbae 	bl	8002b24 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80003c8:	68ab      	ldr	r3, [r5, #8]
 80003ca:	2b02      	cmp	r3, #2
 80003cc:	d903      	bls.n	80003d6 <HAL_GPIO_Init+0x8e>
 80003ce:	21bd      	movs	r1, #189	; 0xbd
 80003d0:	4872      	ldr	r0, [pc, #456]	; (800059c <HAL_GPIO_Init+0x254>)
 80003d2:	f002 fba7 	bl	8002b24 <assert_failed>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003d6:	4f74      	ldr	r7, [pc, #464]	; (80005a8 <HAL_GPIO_Init+0x260>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80003d8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80005ac <HAL_GPIO_Init+0x264>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80003dc:	2600      	movs	r6, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80003de:	682b      	ldr	r3, [r5, #0]
 80003e0:	fa33 f206 	lsrs.w	r2, r3, r6
 80003e4:	d102      	bne.n	80003ec <HAL_GPIO_Init+0xa4>
      }
    }

    position++;
  }
}
 80003e6:	b005      	add	sp, #20
 80003e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80003ec:	f04f 0a01 	mov.w	sl, #1
 80003f0:	fa0a fa06 	lsl.w	sl, sl, r6
    if (iocurrent != 0x00u)
 80003f4:	ea13 080a 	ands.w	r8, r3, sl
 80003f8:	f000 80c5 	beq.w	8000586 <HAL_GPIO_Init+0x23e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003fc:	686b      	ldr	r3, [r5, #4]
 80003fe:	f023 0310 	bic.w	r3, r3, #16
 8000402:	2b02      	cmp	r3, #2
 8000404:	d12d      	bne.n	8000462 <HAL_GPIO_Init+0x11a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000406:	f1b4 4f90 	cmp.w	r4, #1207959552	; 0x48000000
 800040a:	d012      	beq.n	8000432 <HAL_GPIO_Init+0xea>
 800040c:	4b62      	ldr	r3, [pc, #392]	; (8000598 <HAL_GPIO_Init+0x250>)
 800040e:	429c      	cmp	r4, r3
 8000410:	d00f      	beq.n	8000432 <HAL_GPIO_Init+0xea>
 8000412:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000416:	429c      	cmp	r4, r3
 8000418:	d00b      	beq.n	8000432 <HAL_GPIO_Init+0xea>
 800041a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800041e:	429c      	cmp	r4, r3
 8000420:	d007      	beq.n	8000432 <HAL_GPIO_Init+0xea>
 8000422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000426:	429c      	cmp	r4, r3
 8000428:	d003      	beq.n	8000432 <HAL_GPIO_Init+0xea>
 800042a:	21cc      	movs	r1, #204	; 0xcc
 800042c:	485b      	ldr	r0, [pc, #364]	; (800059c <HAL_GPIO_Init+0x254>)
 800042e:	f002 fb79 	bl	8002b24 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000432:	692b      	ldr	r3, [r5, #16]
 8000434:	2b0c      	cmp	r3, #12
 8000436:	d905      	bls.n	8000444 <HAL_GPIO_Init+0xfc>
 8000438:	2b0f      	cmp	r3, #15
 800043a:	d003      	beq.n	8000444 <HAL_GPIO_Init+0xfc>
 800043c:	21cd      	movs	r1, #205	; 0xcd
 800043e:	4857      	ldr	r0, [pc, #348]	; (800059c <HAL_GPIO_Init+0x254>)
 8000440:	f002 fb70 	bl	8002b24 <assert_failed>
        temp = GPIOx->AFR[position >> 3u];
 8000444:	08f2      	lsrs	r2, r6, #3
 8000446:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800044a:	f006 0307 	and.w	r3, r6, #7
 800044e:	0099      	lsls	r1, r3, #2
        temp = GPIOx->AFR[position >> 3u];
 8000450:	6a10      	ldr	r0, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000452:	230f      	movs	r3, #15
 8000454:	408b      	lsls	r3, r1
 8000456:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800045a:	692b      	ldr	r3, [r5, #16]
 800045c:	408b      	lsls	r3, r1
 800045e:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3u] = temp;
 8000460:	6213      	str	r3, [r2, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000462:	686b      	ldr	r3, [r5, #4]
      temp = GPIOx->MODER;
 8000464:	6820      	ldr	r0, [r4, #0]
 8000466:	0072      	lsls	r2, r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000468:	f04f 0b03 	mov.w	fp, #3
 800046c:	fa0b fb02 	lsl.w	fp, fp, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000470:	f003 0103 	and.w	r1, r3, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000474:	ea6f 0b0b 	mvn.w	fp, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000478:	f023 0310 	bic.w	r3, r3, #16
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800047c:	ea00 000b 	and.w	r0, r0, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000480:	4091      	lsls	r1, r2
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000482:	3b01      	subs	r3, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000484:	4301      	orrs	r1, r0
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000486:	2b01      	cmp	r3, #1
      GPIOx->MODER = temp;
 8000488:	6021      	str	r1, [r4, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800048a:	d81b      	bhi.n	80004c4 <HAL_GPIO_Init+0x17c>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800048c:	68eb      	ldr	r3, [r5, #12]
 800048e:	2b01      	cmp	r3, #1
 8000490:	d907      	bls.n	80004a2 <HAL_GPIO_Init+0x15a>
 8000492:	2b03      	cmp	r3, #3
 8000494:	d005      	beq.n	80004a2 <HAL_GPIO_Init+0x15a>
 8000496:	21e1      	movs	r1, #225	; 0xe1
 8000498:	4840      	ldr	r0, [pc, #256]	; (800059c <HAL_GPIO_Init+0x254>)
 800049a:	9201      	str	r2, [sp, #4]
 800049c:	f002 fb42 	bl	8002b24 <assert_failed>
 80004a0:	9a01      	ldr	r2, [sp, #4]
        temp = GPIOx->OSPEEDR;
 80004a2:	68a1      	ldr	r1, [r4, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80004a4:	68eb      	ldr	r3, [r5, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80004a6:	ea0b 0101 	and.w	r1, fp, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 80004aa:	4093      	lsls	r3, r2
 80004ac:	430b      	orrs	r3, r1
        GPIOx->OSPEEDR = temp;
 80004ae:	60a3      	str	r3, [r4, #8]
        temp = GPIOx->OTYPER;
 80004b0:	6863      	ldr	r3, [r4, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80004b2:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80004b6:	686b      	ldr	r3, [r5, #4]
 80004b8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80004bc:	40b3      	lsls	r3, r6
 80004be:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OTYPER = temp;
 80004c2:	6063      	str	r3, [r4, #4]
      temp = GPIOx->PUPDR;
 80004c4:	68e3      	ldr	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80004c6:	6868      	ldr	r0, [r5, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80004c8:	ea0b 0b03 	and.w	fp, fp, r3
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80004cc:	68ab      	ldr	r3, [r5, #8]
 80004ce:	fa03 f202 	lsl.w	r2, r3, r2
 80004d2:	ea42 020b 	orr.w	r2, r2, fp
      GPIOx->PUPDR = temp;
 80004d6:	60e2      	str	r2, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80004d8:	00c2      	lsls	r2, r0, #3
 80004da:	d554      	bpl.n	8000586 <HAL_GPIO_Init+0x23e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004dc:	69bb      	ldr	r3, [r7, #24]
 80004de:	f043 0301 	orr.w	r3, r3, #1
 80004e2:	61bb      	str	r3, [r7, #24]
 80004e4:	69bb      	ldr	r3, [r7, #24]
 80004e6:	f026 0103 	bic.w	r1, r6, #3
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80004f2:	9303      	str	r3, [sp, #12]
 80004f4:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 80004f8:	9b03      	ldr	r3, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80004fa:	688a      	ldr	r2, [r1, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80004fc:	f006 0303 	and.w	r3, r6, #3
 8000500:	f04f 0c0f 	mov.w	ip, #15
 8000504:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8000508:	fa0c f30e 	lsl.w	r3, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800050c:	f1b4 4f90 	cmp.w	r4, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000510:	ea22 0c03 	bic.w	ip, r2, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000514:	d039      	beq.n	800058a <HAL_GPIO_Init+0x242>
 8000516:	4b20      	ldr	r3, [pc, #128]	; (8000598 <HAL_GPIO_Init+0x250>)
 8000518:	429c      	cmp	r4, r3
 800051a:	d038      	beq.n	800058e <HAL_GPIO_Init+0x246>
 800051c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000520:	429c      	cmp	r4, r3
 8000522:	d036      	beq.n	8000592 <HAL_GPIO_Init+0x24a>
 8000524:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000528:	429c      	cmp	r4, r3
 800052a:	bf14      	ite	ne
 800052c:	2305      	movne	r3, #5
 800052e:	2303      	moveq	r3, #3
 8000530:	fa03 f30e 	lsl.w	r3, r3, lr
 8000534:	ea43 030c 	orr.w	r3, r3, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000538:	608b      	str	r3, [r1, #8]
        temp = EXTI->IMR;
 800053a:	f8d9 2000 	ldr.w	r2, [r9]
        temp &= ~(iocurrent);
 800053e:	ea6f 0108 	mvn.w	r1, r8
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000542:	03c3      	lsls	r3, r0, #15
        temp &= ~(iocurrent);
 8000544:	bf54      	ite	pl
 8000546:	400a      	andpl	r2, r1
          temp |= iocurrent;
 8000548:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR = temp;
 800054c:	f8c9 2000 	str.w	r2, [r9]
        temp = EXTI->EMR;
 8000550:	f8d9 2004 	ldr.w	r2, [r9, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000554:	0383      	lsls	r3, r0, #14
        temp &= ~(iocurrent);
 8000556:	bf54      	ite	pl
 8000558:	400a      	andpl	r2, r1
          temp |= iocurrent;
 800055a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 800055e:	f8c9 2004 	str.w	r2, [r9, #4]
        temp = EXTI->RTSR;
 8000562:	f8d9 2008 	ldr.w	r2, [r9, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000566:	02c3      	lsls	r3, r0, #11
        temp &= ~(iocurrent);
 8000568:	bf54      	ite	pl
 800056a:	400a      	andpl	r2, r1
          temp |= iocurrent;
 800056c:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 8000570:	f8c9 2008 	str.w	r2, [r9, #8]
        temp = EXTI->FTSR;
 8000574:	f8d9 300c 	ldr.w	r3, [r9, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000578:	0282      	lsls	r2, r0, #10
        temp &= ~(iocurrent);
 800057a:	bf54      	ite	pl
 800057c:	400b      	andpl	r3, r1
          temp |= iocurrent;
 800057e:	ea48 0303 	orrmi.w	r3, r8, r3
        EXTI->FTSR = temp;
 8000582:	f8c9 300c 	str.w	r3, [r9, #12]
    position++;
 8000586:	3601      	adds	r6, #1
 8000588:	e729      	b.n	80003de <HAL_GPIO_Init+0x96>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800058a:	2300      	movs	r3, #0
 800058c:	e7d0      	b.n	8000530 <HAL_GPIO_Init+0x1e8>
 800058e:	2301      	movs	r3, #1
 8000590:	e7ce      	b.n	8000530 <HAL_GPIO_Init+0x1e8>
 8000592:	2302      	movs	r3, #2
 8000594:	e7cc      	b.n	8000530 <HAL_GPIO_Init+0x1e8>
 8000596:	bf00      	nop
 8000598:	48000400 	.word	0x48000400
 800059c:	08002e1b 	.word	0x08002e1b
 80005a0:	10110000 	.word	0x10110000
 80005a4:	10220000 	.word	0x10220000
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40010400 	.word	0x40010400

080005b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	4605      	mov	r5, r0
 80005b4:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80005b6:	460c      	mov	r4, r1
 80005b8:	b921      	cbnz	r1, 80005c4 <HAL_GPIO_WritePin+0x14>
 80005ba:	f240 11a7 	movw	r1, #423	; 0x1a7
 80005be:	4808      	ldr	r0, [pc, #32]	; (80005e0 <HAL_GPIO_WritePin+0x30>)
 80005c0:	f002 fab0 	bl	8002b24 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80005c4:	2e01      	cmp	r6, #1
 80005c6:	d906      	bls.n	80005d6 <HAL_GPIO_WritePin+0x26>
 80005c8:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 80005cc:	4804      	ldr	r0, [pc, #16]	; (80005e0 <HAL_GPIO_WritePin+0x30>)
 80005ce:	f002 faa9 	bl	8002b24 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80005d2:	61ac      	str	r4, [r5, #24]
 80005d4:	bd70      	pop	{r4, r5, r6, pc}
  if(PinState != GPIO_PIN_RESET)
 80005d6:	2e00      	cmp	r6, #0
 80005d8:	d1fb      	bne.n	80005d2 <HAL_GPIO_WritePin+0x22>
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80005da:	62ac      	str	r4, [r5, #40]	; 0x28
 80005dc:	bd70      	pop	{r4, r5, r6, pc}
 80005de:	bf00      	nop
 80005e0:	08002e1b 	.word	0x08002e1b

080005e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005e4:	b538      	push	{r3, r4, r5, lr}
 80005e6:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80005e8:	460c      	mov	r4, r1
 80005ea:	b921      	cbnz	r1, 80005f6 <HAL_GPIO_TogglePin+0x12>
 80005ec:	f240 11bd 	movw	r1, #445	; 0x1bd
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <HAL_GPIO_TogglePin+0x20>)
 80005f2:	f002 fa97 	bl	8002b24 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80005f6:	696b      	ldr	r3, [r5, #20]
 80005f8:	4223      	tst	r3, r4
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80005fa:	bf18      	it	ne
 80005fc:	0424      	lslne	r4, r4, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80005fe:	61ac      	str	r4, [r5, #24]
 8000600:	bd38      	pop	{r3, r4, r5, pc}
 8000602:	bf00      	nop
 8000604:	08002e1b 	.word	0x08002e1b

08000608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000608:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800060c:	4604      	mov	r4, r0
 800060e:	b908      	cbnz	r0, 8000614 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000610:	2001      	movs	r0, #1
 8000612:	e07c      	b.n	800070e <HAL_RCC_OscConfig+0x106>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000614:	6803      	ldr	r3, [r0, #0]
 8000616:	b133      	cbz	r3, 8000626 <HAL_RCC_OscConfig+0x1e>
 8000618:	0719      	lsls	r1, r3, #28
 800061a:	d104      	bne.n	8000626 <HAL_RCC_OscConfig+0x1e>
 800061c:	f240 114b 	movw	r1, #331	; 0x14b
 8000620:	48bf      	ldr	r0, [pc, #764]	; (8000920 <HAL_RCC_OscConfig+0x318>)
 8000622:	f002 fa7f 	bl	8002b24 <assert_failed>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000626:	6823      	ldr	r3, [r4, #0]
 8000628:	07da      	lsls	r2, r3, #31
 800062a:	d419      	bmi.n	8000660 <HAL_RCC_OscConfig+0x58>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800062c:	6823      	ldr	r3, [r4, #0]
 800062e:	079b      	lsls	r3, r3, #30
 8000630:	f100 809b 	bmi.w	800076a <HAL_RCC_OscConfig+0x162>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000634:	6823      	ldr	r3, [r4, #0]
 8000636:	071d      	lsls	r5, r3, #28
 8000638:	f100 811c 	bmi.w	8000874 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800063c:	6823      	ldr	r3, [r4, #0]
 800063e:	0758      	lsls	r0, r3, #29
 8000640:	f100 8174 	bmi.w	800092c <HAL_RCC_OscConfig+0x324>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8000644:	69e3      	ldr	r3, [r4, #28]
 8000646:	2b02      	cmp	r3, #2
 8000648:	d904      	bls.n	8000654 <HAL_RCC_OscConfig+0x4c>
 800064a:	f240 213a 	movw	r1, #570	; 0x23a
 800064e:	48b4      	ldr	r0, [pc, #720]	; (8000920 <HAL_RCC_OscConfig+0x318>)
 8000650:	f002 fa68 	bl	8002b24 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000654:	69e0      	ldr	r0, [r4, #28]
 8000656:	2800      	cmp	r0, #0
 8000658:	f040 8206 	bne.w	8000a68 <HAL_RCC_OscConfig+0x460>
        }
      }
    }
  }

  return HAL_OK;
 800065c:	2000      	movs	r0, #0
 800065e:	e056      	b.n	800070e <HAL_RCC_OscConfig+0x106>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000660:	6863      	ldr	r3, [r4, #4]
 8000662:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8000666:	d007      	beq.n	8000678 <HAL_RCC_OscConfig+0x70>
 8000668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800066c:	d004      	beq.n	8000678 <HAL_RCC_OscConfig+0x70>
 800066e:	f240 1151 	movw	r1, #337	; 0x151
 8000672:	48ab      	ldr	r0, [pc, #684]	; (8000920 <HAL_RCC_OscConfig+0x318>)
 8000674:	f002 fa56 	bl	8002b24 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000678:	4daa      	ldr	r5, [pc, #680]	; (8000924 <HAL_RCC_OscConfig+0x31c>)
 800067a:	686b      	ldr	r3, [r5, #4]
 800067c:	f003 030c 	and.w	r3, r3, #12
 8000680:	2b04      	cmp	r3, #4
 8000682:	d007      	beq.n	8000694 <HAL_RCC_OscConfig+0x8c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000684:	686b      	ldr	r3, [r5, #4]
 8000686:	f003 030c 	and.w	r3, r3, #12
 800068a:	2b08      	cmp	r3, #8
 800068c:	d116      	bne.n	80006bc <HAL_RCC_OscConfig+0xb4>
 800068e:	686b      	ldr	r3, [r5, #4]
 8000690:	03df      	lsls	r7, r3, #15
 8000692:	d513      	bpl.n	80006bc <HAL_RCC_OscConfig+0xb4>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000694:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000698:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800069c:	6829      	ldr	r1, [r5, #0]
 800069e:	fa93 f3a3 	rbit	r3, r3
 80006a2:	fab3 f383 	clz	r3, r3
 80006a6:	f003 031f 	and.w	r3, r3, #31
 80006aa:	2201      	movs	r2, #1
 80006ac:	fa02 f303 	lsl.w	r3, r2, r3
 80006b0:	420b      	tst	r3, r1
 80006b2:	d0bb      	beq.n	800062c <HAL_RCC_OscConfig+0x24>
 80006b4:	6863      	ldr	r3, [r4, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d1b8      	bne.n	800062c <HAL_RCC_OscConfig+0x24>
 80006ba:	e7a9      	b.n	8000610 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006bc:	6862      	ldr	r2, [r4, #4]
 80006be:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80006c2:	d127      	bne.n	8000714 <HAL_RCC_OscConfig+0x10c>
 80006c4:	682b      	ldr	r3, [r5, #0]
 80006c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006ca:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80006cc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80006ce:	68a1      	ldr	r1, [r4, #8]
 80006d0:	f023 030f 	bic.w	r3, r3, #15
 80006d4:	430b      	orrs	r3, r1
 80006d6:	62eb      	str	r3, [r5, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80006d8:	b362      	cbz	r2, 8000734 <HAL_RCC_OscConfig+0x12c>
        tickstart = HAL_GetTick();
 80006da:	f7ff fd97 	bl	800020c <HAL_GetTick>
 80006de:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80006e2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006e4:	2701      	movs	r7, #1
 80006e6:	fa96 f3a6 	rbit	r3, r6
 80006ea:	682a      	ldr	r2, [r5, #0]
 80006ec:	fa96 f3a6 	rbit	r3, r6
 80006f0:	fab3 f383 	clz	r3, r3
 80006f4:	f003 031f 	and.w	r3, r3, #31
 80006f8:	fa07 f303 	lsl.w	r3, r7, r3
 80006fc:	4213      	tst	r3, r2
 80006fe:	d195      	bne.n	800062c <HAL_RCC_OscConfig+0x24>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000700:	f7ff fd84 	bl	800020c <HAL_GetTick>
 8000704:	eba0 0008 	sub.w	r0, r0, r8
 8000708:	2864      	cmp	r0, #100	; 0x64
 800070a:	d9ec      	bls.n	80006e6 <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 800070c:	2003      	movs	r0, #3
}
 800070e:	b002      	add	sp, #8
 8000710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000714:	682b      	ldr	r3, [r5, #0]
 8000716:	b932      	cbnz	r2, 8000726 <HAL_RCC_OscConfig+0x11e>
 8000718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800071c:	602b      	str	r3, [r5, #0]
 800071e:	682b      	ldr	r3, [r5, #0]
 8000720:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000724:	e7d1      	b.n	80006ca <HAL_RCC_OscConfig+0xc2>
 8000726:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800072a:	d1f5      	bne.n	8000718 <HAL_RCC_OscConfig+0x110>
 800072c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000730:	602b      	str	r3, [r5, #0]
 8000732:	e7c7      	b.n	80006c4 <HAL_RCC_OscConfig+0xbc>
        tickstart = HAL_GetTick();
 8000734:	f7ff fd6a 	bl	800020c <HAL_GetTick>
 8000738:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800073c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800073e:	2701      	movs	r7, #1
 8000740:	fa96 f3a6 	rbit	r3, r6
 8000744:	682a      	ldr	r2, [r5, #0]
 8000746:	fa96 f3a6 	rbit	r3, r6
 800074a:	fab3 f383 	clz	r3, r3
 800074e:	f003 031f 	and.w	r3, r3, #31
 8000752:	fa07 f303 	lsl.w	r3, r7, r3
 8000756:	4213      	tst	r3, r2
 8000758:	f43f af68 	beq.w	800062c <HAL_RCC_OscConfig+0x24>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800075c:	f7ff fd56 	bl	800020c <HAL_GetTick>
 8000760:	eba0 0008 	sub.w	r0, r0, r8
 8000764:	2864      	cmp	r0, #100	; 0x64
 8000766:	d9eb      	bls.n	8000740 <HAL_RCC_OscConfig+0x138>
 8000768:	e7d0      	b.n	800070c <HAL_RCC_OscConfig+0x104>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800076a:	6923      	ldr	r3, [r4, #16]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d904      	bls.n	800077a <HAL_RCC_OscConfig+0x172>
 8000770:	f240 1189 	movw	r1, #393	; 0x189
 8000774:	486a      	ldr	r0, [pc, #424]	; (8000920 <HAL_RCC_OscConfig+0x318>)
 8000776:	f002 f9d5 	bl	8002b24 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800077a:	6963      	ldr	r3, [r4, #20]
 800077c:	2b1f      	cmp	r3, #31
 800077e:	d904      	bls.n	800078a <HAL_RCC_OscConfig+0x182>
 8000780:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8000784:	4866      	ldr	r0, [pc, #408]	; (8000920 <HAL_RCC_OscConfig+0x318>)
 8000786:	f002 f9cd 	bl	8002b24 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800078a:	4d66      	ldr	r5, [pc, #408]	; (8000924 <HAL_RCC_OscConfig+0x31c>)
 800078c:	686b      	ldr	r3, [r5, #4]
 800078e:	f013 0f0c 	tst.w	r3, #12
 8000792:	d007      	beq.n	80007a4 <HAL_RCC_OscConfig+0x19c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000794:	686b      	ldr	r3, [r5, #4]
 8000796:	f003 030c 	and.w	r3, r3, #12
 800079a:	2b08      	cmp	r3, #8
 800079c:	d122      	bne.n	80007e4 <HAL_RCC_OscConfig+0x1dc>
 800079e:	686b      	ldr	r3, [r5, #4]
 80007a0:	03de      	lsls	r6, r3, #15
 80007a2:	d41f      	bmi.n	80007e4 <HAL_RCC_OscConfig+0x1dc>
 80007a4:	2302      	movs	r3, #2
 80007a6:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007aa:	6829      	ldr	r1, [r5, #0]
 80007ac:	fa93 f3a3 	rbit	r3, r3
 80007b0:	fab3 f383 	clz	r3, r3
 80007b4:	f003 031f 	and.w	r3, r3, #31
 80007b8:	2201      	movs	r2, #1
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	420b      	tst	r3, r1
 80007c0:	d003      	beq.n	80007ca <HAL_RCC_OscConfig+0x1c2>
 80007c2:	6923      	ldr	r3, [r4, #16]
 80007c4:	4293      	cmp	r3, r2
 80007c6:	f47f af23 	bne.w	8000610 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007ca:	6829      	ldr	r1, [r5, #0]
 80007cc:	23f8      	movs	r3, #248	; 0xf8
 80007ce:	fa93 f3a3 	rbit	r3, r3
 80007d2:	fab3 f283 	clz	r2, r3
 80007d6:	6963      	ldr	r3, [r4, #20]
 80007d8:	4093      	lsls	r3, r2
 80007da:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80007de:	4313      	orrs	r3, r2
 80007e0:	602b      	str	r3, [r5, #0]
 80007e2:	e727      	b.n	8000634 <HAL_RCC_OscConfig+0x2c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80007e4:	6922      	ldr	r2, [r4, #16]
 80007e6:	2601      	movs	r6, #1
 80007e8:	b30a      	cbz	r2, 800082e <HAL_RCC_OscConfig+0x226>
 80007ea:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80007ee:	fab3 f383 	clz	r3, r3
 80007f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80007f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	2702      	movs	r7, #2
 80007fe:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000800:	f7ff fd04 	bl	800020c <HAL_GetTick>
 8000804:	4680      	mov	r8, r0
 8000806:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800080a:	682a      	ldr	r2, [r5, #0]
 800080c:	fa97 f3a7 	rbit	r3, r7
 8000810:	fab3 f383 	clz	r3, r3
 8000814:	f003 031f 	and.w	r3, r3, #31
 8000818:	fa06 f303 	lsl.w	r3, r6, r3
 800081c:	4213      	tst	r3, r2
 800081e:	d1d4      	bne.n	80007ca <HAL_RCC_OscConfig+0x1c2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000820:	f7ff fcf4 	bl	800020c <HAL_GetTick>
 8000824:	eba0 0008 	sub.w	r0, r0, r8
 8000828:	2802      	cmp	r0, #2
 800082a:	d9ec      	bls.n	8000806 <HAL_RCC_OscConfig+0x1fe>
 800082c:	e76e      	b.n	800070c <HAL_RCC_OscConfig+0x104>
 800082e:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000832:	fab3 f383 	clz	r3, r3
 8000836:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800083a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	2702      	movs	r7, #2
 8000842:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000844:	f7ff fce2 	bl	800020c <HAL_GetTick>
 8000848:	4680      	mov	r8, r0
 800084a:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800084e:	682a      	ldr	r2, [r5, #0]
 8000850:	fa97 f3a7 	rbit	r3, r7
 8000854:	fab3 f383 	clz	r3, r3
 8000858:	f003 031f 	and.w	r3, r3, #31
 800085c:	fa06 f303 	lsl.w	r3, r6, r3
 8000860:	4213      	tst	r3, r2
 8000862:	f43f aee7 	beq.w	8000634 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000866:	f7ff fcd1 	bl	800020c <HAL_GetTick>
 800086a:	eba0 0008 	sub.w	r0, r0, r8
 800086e:	2802      	cmp	r0, #2
 8000870:	d9eb      	bls.n	800084a <HAL_RCC_OscConfig+0x242>
 8000872:	e74b      	b.n	800070c <HAL_RCC_OscConfig+0x104>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8000874:	69a3      	ldr	r3, [r4, #24]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d904      	bls.n	8000884 <HAL_RCC_OscConfig+0x27c>
 800087a:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 800087e:	4828      	ldr	r0, [pc, #160]	; (8000920 <HAL_RCC_OscConfig+0x318>)
 8000880:	f002 f950 	bl	8002b24 <assert_failed>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000884:	69a2      	ldr	r2, [r4, #24]
 8000886:	4e27      	ldr	r6, [pc, #156]	; (8000924 <HAL_RCC_OscConfig+0x31c>)
 8000888:	4927      	ldr	r1, [pc, #156]	; (8000928 <HAL_RCC_OscConfig+0x320>)
 800088a:	2501      	movs	r5, #1
 800088c:	b31a      	cbz	r2, 80008d6 <HAL_RCC_OscConfig+0x2ce>
 800088e:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 8000892:	fab3 f383 	clz	r3, r3
 8000896:	440b      	add	r3, r1
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	2702      	movs	r7, #2
 800089c:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 800089e:	f7ff fcb5 	bl	800020c <HAL_GetTick>
 80008a2:	4680      	mov	r8, r0
 80008a4:	fa97 f3a7 	rbit	r3, r7
 80008a8:	fa97 f3a7 	rbit	r3, r7
 80008ac:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008b0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80008b2:	fa97 f3a7 	rbit	r3, r7
 80008b6:	fab3 f383 	clz	r3, r3
 80008ba:	f003 031f 	and.w	r3, r3, #31
 80008be:	fa05 f303 	lsl.w	r3, r5, r3
 80008c2:	4213      	tst	r3, r2
 80008c4:	f47f aeba 	bne.w	800063c <HAL_RCC_OscConfig+0x34>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008c8:	f7ff fca0 	bl	800020c <HAL_GetTick>
 80008cc:	eba0 0008 	sub.w	r0, r0, r8
 80008d0:	2802      	cmp	r0, #2
 80008d2:	d9e7      	bls.n	80008a4 <HAL_RCC_OscConfig+0x29c>
 80008d4:	e71a      	b.n	800070c <HAL_RCC_OscConfig+0x104>
 80008d6:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 80008da:	fab3 f383 	clz	r3, r3
 80008de:	440b      	add	r3, r1
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	2702      	movs	r7, #2
 80008e4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80008e6:	f7ff fc91 	bl	800020c <HAL_GetTick>
 80008ea:	4680      	mov	r8, r0
 80008ec:	fa97 f3a7 	rbit	r3, r7
 80008f0:	fa97 f3a7 	rbit	r3, r7
 80008f4:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008f8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80008fa:	fa97 f3a7 	rbit	r3, r7
 80008fe:	fab3 f383 	clz	r3, r3
 8000902:	f003 031f 	and.w	r3, r3, #31
 8000906:	fa05 f303 	lsl.w	r3, r5, r3
 800090a:	4213      	tst	r3, r2
 800090c:	f43f ae96 	beq.w	800063c <HAL_RCC_OscConfig+0x34>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000910:	f7ff fc7c 	bl	800020c <HAL_GetTick>
 8000914:	eba0 0008 	sub.w	r0, r0, r8
 8000918:	2802      	cmp	r0, #2
 800091a:	d9e7      	bls.n	80008ec <HAL_RCC_OscConfig+0x2e4>
 800091c:	e6f6      	b.n	800070c <HAL_RCC_OscConfig+0x104>
 800091e:	bf00      	nop
 8000920:	08002e54 	.word	0x08002e54
 8000924:	40021000 	.word	0x40021000
 8000928:	10908120 	.word	0x10908120
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800092c:	68e3      	ldr	r3, [r4, #12]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d906      	bls.n	8000940 <HAL_RCC_OscConfig+0x338>
 8000932:	2b05      	cmp	r3, #5
 8000934:	d004      	beq.n	8000940 <HAL_RCC_OscConfig+0x338>
 8000936:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 800093a:	48a7      	ldr	r0, [pc, #668]	; (8000bd8 <HAL_RCC_OscConfig+0x5d0>)
 800093c:	f002 f8f2 	bl	8002b24 <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000940:	4da6      	ldr	r5, [pc, #664]	; (8000bdc <HAL_RCC_OscConfig+0x5d4>)
 8000942:	69eb      	ldr	r3, [r5, #28]
 8000944:	00d9      	lsls	r1, r3, #3
 8000946:	d434      	bmi.n	80009b2 <HAL_RCC_OscConfig+0x3aa>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000948:	69eb      	ldr	r3, [r5, #28]
 800094a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094e:	61eb      	str	r3, [r5, #28]
 8000950:	69eb      	ldr	r3, [r5, #28]
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	9301      	str	r3, [sp, #4]
 8000958:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800095a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800095c:	4fa0      	ldr	r7, [pc, #640]	; (8000be0 <HAL_RCC_OscConfig+0x5d8>)
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	05da      	lsls	r2, r3, #23
 8000962:	d528      	bpl.n	80009b6 <HAL_RCC_OscConfig+0x3ae>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000964:	68e3      	ldr	r3, [r4, #12]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d136      	bne.n	80009d8 <HAL_RCC_OscConfig+0x3d0>
 800096a:	6a2b      	ldr	r3, [r5, #32]
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000972:	f7ff fc4b 	bl	800020c <HAL_GetTick>
 8000976:	2702      	movs	r7, #2
 8000978:	4682      	mov	sl, r0
 800097a:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800097c:	f04f 0801 	mov.w	r8, #1
 8000980:	fa97 f3a7 	rbit	r3, r7
 8000984:	fa97 f3a7 	rbit	r3, r7
 8000988:	2b00      	cmp	r3, #0
 800098a:	d065      	beq.n	8000a58 <HAL_RCC_OscConfig+0x450>
 800098c:	6a2a      	ldr	r2, [r5, #32]
 800098e:	fa99 f3a9 	rbit	r3, r9
 8000992:	fab3 f383 	clz	r3, r3
 8000996:	f003 031f 	and.w	r3, r3, #31
 800099a:	fa08 f303 	lsl.w	r3, r8, r3
 800099e:	4213      	tst	r3, r2
 80009a0:	d051      	beq.n	8000a46 <HAL_RCC_OscConfig+0x43e>
    if(pwrclkchanged == SET)
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	f43f ae4e 	beq.w	8000644 <HAL_RCC_OscConfig+0x3c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009a8:	69eb      	ldr	r3, [r5, #28]
 80009aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009ae:	61eb      	str	r3, [r5, #28]
 80009b0:	e648      	b.n	8000644 <HAL_RCC_OscConfig+0x3c>
    FlagStatus       pwrclkchanged = RESET;
 80009b2:	2600      	movs	r6, #0
 80009b4:	e7d2      	b.n	800095c <HAL_RCC_OscConfig+0x354>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009bc:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80009be:	f7ff fc25 	bl	800020c <HAL_GetTick>
 80009c2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	05db      	lsls	r3, r3, #23
 80009c8:	d4cc      	bmi.n	8000964 <HAL_RCC_OscConfig+0x35c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009ca:	f7ff fc1f 	bl	800020c <HAL_GetTick>
 80009ce:	eba0 0008 	sub.w	r0, r0, r8
 80009d2:	2864      	cmp	r0, #100	; 0x64
 80009d4:	d9f6      	bls.n	80009c4 <HAL_RCC_OscConfig+0x3bc>
 80009d6:	e699      	b.n	800070c <HAL_RCC_OscConfig+0x104>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009d8:	bb3b      	cbnz	r3, 8000a2a <HAL_RCC_OscConfig+0x422>
 80009da:	6a2b      	ldr	r3, [r5, #32]
 80009dc:	f023 0301 	bic.w	r3, r3, #1
 80009e0:	622b      	str	r3, [r5, #32]
 80009e2:	6a2b      	ldr	r3, [r5, #32]
 80009e4:	f023 0304 	bic.w	r3, r3, #4
 80009e8:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80009ea:	f7ff fc0f 	bl	800020c <HAL_GetTick>
 80009ee:	2702      	movs	r7, #2
 80009f0:	4682      	mov	sl, r0
 80009f2:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009f4:	f04f 0801 	mov.w	r8, #1
 80009f8:	fa97 f3a7 	rbit	r3, r7
 80009fc:	fa97 f3a7 	rbit	r3, r7
 8000a00:	b373      	cbz	r3, 8000a60 <HAL_RCC_OscConfig+0x458>
 8000a02:	6a2a      	ldr	r2, [r5, #32]
 8000a04:	fa99 f3a9 	rbit	r3, r9
 8000a08:	fab3 f383 	clz	r3, r3
 8000a0c:	f003 031f 	and.w	r3, r3, #31
 8000a10:	fa08 f303 	lsl.w	r3, r8, r3
 8000a14:	4213      	tst	r3, r2
 8000a16:	d0c4      	beq.n	80009a2 <HAL_RCC_OscConfig+0x39a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a18:	f7ff fbf8 	bl	800020c <HAL_GetTick>
 8000a1c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a20:	eba0 000a 	sub.w	r0, r0, sl
 8000a24:	4298      	cmp	r0, r3
 8000a26:	d9e7      	bls.n	80009f8 <HAL_RCC_OscConfig+0x3f0>
 8000a28:	e670      	b.n	800070c <HAL_RCC_OscConfig+0x104>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a2a:	2b05      	cmp	r3, #5
 8000a2c:	6a2b      	ldr	r3, [r5, #32]
 8000a2e:	d103      	bne.n	8000a38 <HAL_RCC_OscConfig+0x430>
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	622b      	str	r3, [r5, #32]
 8000a36:	e798      	b.n	800096a <HAL_RCC_OscConfig+0x362>
 8000a38:	f023 0301 	bic.w	r3, r3, #1
 8000a3c:	622b      	str	r3, [r5, #32]
 8000a3e:	6a2b      	ldr	r3, [r5, #32]
 8000a40:	f023 0304 	bic.w	r3, r3, #4
 8000a44:	e794      	b.n	8000970 <HAL_RCC_OscConfig+0x368>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a46:	f7ff fbe1 	bl	800020c <HAL_GetTick>
 8000a4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a4e:	eba0 000a 	sub.w	r0, r0, sl
 8000a52:	4298      	cmp	r0, r3
 8000a54:	d994      	bls.n	8000980 <HAL_RCC_OscConfig+0x378>
 8000a56:	e659      	b.n	800070c <HAL_RCC_OscConfig+0x104>
 8000a58:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a5c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000a5e:	e796      	b.n	800098e <HAL_RCC_OscConfig+0x386>
 8000a60:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a64:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000a66:	e7cd      	b.n	8000a04 <HAL_RCC_OscConfig+0x3fc>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a68:	4b5c      	ldr	r3, [pc, #368]	; (8000bdc <HAL_RCC_OscConfig+0x5d4>)
 8000a6a:	685a      	ldr	r2, [r3, #4]
 8000a6c:	f002 020c 	and.w	r2, r2, #12
 8000a70:	2a08      	cmp	r2, #8
 8000a72:	461d      	mov	r5, r3
 8000a74:	f000 809e 	beq.w	8000bb4 <HAL_RCC_OscConfig+0x5ac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a78:	2802      	cmp	r0, #2
 8000a7a:	d174      	bne.n	8000b66 <HAL_RCC_OscConfig+0x55e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8000a7c:	6a23      	ldr	r3, [r4, #32]
 8000a7e:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8000a82:	d004      	beq.n	8000a8e <HAL_RCC_OscConfig+0x486>
 8000a84:	f240 2143 	movw	r1, #579	; 0x243
 8000a88:	4853      	ldr	r0, [pc, #332]	; (8000bd8 <HAL_RCC_OscConfig+0x5d0>)
 8000a8a:	f002 f84b 	bl	8002b24 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8000a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a90:	f433 2240 	bics.w	r2, r3, #786432	; 0xc0000
 8000a94:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8000a98:	d010      	beq.n	8000abc <HAL_RCC_OscConfig+0x4b4>
 8000a9a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8000a9e:	d00d      	beq.n	8000abc <HAL_RCC_OscConfig+0x4b4>
 8000aa0:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8000aa4:	d00a      	beq.n	8000abc <HAL_RCC_OscConfig+0x4b4>
 8000aa6:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8000aaa:	d007      	beq.n	8000abc <HAL_RCC_OscConfig+0x4b4>
 8000aac:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8000ab0:	d004      	beq.n	8000abc <HAL_RCC_OscConfig+0x4b4>
 8000ab2:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000ab6:	4848      	ldr	r0, [pc, #288]	; (8000bd8 <HAL_RCC_OscConfig+0x5d0>)
 8000ab8:	f002 f834 	bl	8002b24 <assert_failed>
 8000abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ac0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000ac4:	fab3 f383 	clz	r3, r3
 8000ac8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000acc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ad6:	f7ff fb99 	bl	800020c <HAL_GetTick>
 8000ada:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000ade:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ae0:	2601      	movs	r6, #1
 8000ae2:	fa97 f3a7 	rbit	r3, r7
 8000ae6:	682a      	ldr	r2, [r5, #0]
 8000ae8:	fa97 f3a7 	rbit	r3, r7
 8000aec:	fab3 f383 	clz	r3, r3
 8000af0:	f003 031f 	and.w	r3, r3, #31
 8000af4:	fa06 f303 	lsl.w	r3, r6, r3
 8000af8:	4213      	tst	r3, r2
 8000afa:	d12d      	bne.n	8000b58 <HAL_RCC_OscConfig+0x550>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000afc:	686a      	ldr	r2, [r5, #4]
 8000afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b00:	6a21      	ldr	r1, [r4, #32]
 8000b02:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000b06:	430b      	orrs	r3, r1
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	606b      	str	r3, [r5, #4]
 8000b0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b10:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000b14:	fab3 f383 	clz	r3, r3
 8000b18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000b26:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000b28:	f7ff fb70 	bl	800020c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b2c:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000b2e:	4607      	mov	r7, r0
 8000b30:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b34:	682a      	ldr	r2, [r5, #0]
 8000b36:	fa94 f3a4 	rbit	r3, r4
 8000b3a:	fab3 f383 	clz	r3, r3
 8000b3e:	f003 031f 	and.w	r3, r3, #31
 8000b42:	fa06 f303 	lsl.w	r3, r6, r3
 8000b46:	4213      	tst	r3, r2
 8000b48:	f47f ad88 	bne.w	800065c <HAL_RCC_OscConfig+0x54>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b4c:	f7ff fb5e 	bl	800020c <HAL_GetTick>
 8000b50:	1bc0      	subs	r0, r0, r7
 8000b52:	2802      	cmp	r0, #2
 8000b54:	d9ec      	bls.n	8000b30 <HAL_RCC_OscConfig+0x528>
 8000b56:	e5d9      	b.n	800070c <HAL_RCC_OscConfig+0x104>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b58:	f7ff fb58 	bl	800020c <HAL_GetTick>
 8000b5c:	eba0 0008 	sub.w	r0, r0, r8
 8000b60:	2802      	cmp	r0, #2
 8000b62:	d9be      	bls.n	8000ae2 <HAL_RCC_OscConfig+0x4da>
 8000b64:	e5d2      	b.n	800070c <HAL_RCC_OscConfig+0x104>
 8000b66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b6a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000b6e:	fab3 f383 	clz	r3, r3
 8000b72:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b76:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b80:	f7ff fb44 	bl	800020c <HAL_GetTick>
 8000b84:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000b88:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b8a:	2601      	movs	r6, #1
 8000b8c:	fa94 f3a4 	rbit	r3, r4
 8000b90:	682a      	ldr	r2, [r5, #0]
 8000b92:	fa94 f3a4 	rbit	r3, r4
 8000b96:	fab3 f383 	clz	r3, r3
 8000b9a:	f003 031f 	and.w	r3, r3, #31
 8000b9e:	fa06 f303 	lsl.w	r3, r6, r3
 8000ba2:	4213      	tst	r3, r2
 8000ba4:	f43f ad5a 	beq.w	800065c <HAL_RCC_OscConfig+0x54>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ba8:	f7ff fb30 	bl	800020c <HAL_GetTick>
 8000bac:	1bc0      	subs	r0, r0, r7
 8000bae:	2802      	cmp	r0, #2
 8000bb0:	d9ec      	bls.n	8000b8c <HAL_RCC_OscConfig+0x584>
 8000bb2:	e5ab      	b.n	800070c <HAL_RCC_OscConfig+0x104>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000bb4:	2801      	cmp	r0, #1
 8000bb6:	f43f adaa 	beq.w	800070e <HAL_RCC_OscConfig+0x106>
        pll_config = RCC->CFGR;
 8000bba:	6858      	ldr	r0, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8000bbc:	6a23      	ldr	r3, [r4, #32]
 8000bbe:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f47f ad24 	bne.w	8000610 <HAL_RCC_OscConfig+0x8>
 8000bc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8000bca:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000bce:	1ac0      	subs	r0, r0, r3
 8000bd0:	bf18      	it	ne
 8000bd2:	2001      	movne	r0, #1
 8000bd4:	e59b      	b.n	800070e <HAL_RCC_OscConfig+0x106>
 8000bd6:	bf00      	nop
 8000bd8:	08002e54 	.word	0x08002e54
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40007000 	.word	0x40007000

08000be4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000be4:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000be6:	4c13      	ldr	r4, [pc, #76]	; (8000c34 <HAL_RCC_GetSysClockFreq+0x50>)
 8000be8:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000bea:	f001 030c 	and.w	r3, r1, #12
 8000bee:	2b08      	cmp	r3, #8
 8000bf0:	d11e      	bne.n	8000c30 <HAL_RCC_GetSysClockFreq+0x4c>
 8000bf2:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000bf6:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000bfa:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8000bfe:	fab3 f383 	clz	r3, r3
 8000c02:	fa22 f303 	lsr.w	r3, r2, r3
 8000c06:	4a0c      	ldr	r2, [pc, #48]	; (8000c38 <HAL_RCC_GetSysClockFreq+0x54>)
 8000c08:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000c0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c0c:	220f      	movs	r2, #15
 8000c0e:	fa92 f2a2 	rbit	r2, r2
 8000c12:	fab2 f282 	clz	r2, r2
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	40d3      	lsrs	r3, r2
 8000c1c:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <HAL_RCC_GetSysClockFreq+0x58>)
 8000c1e:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000c20:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000c22:	bf4a      	itet	mi
 8000c24:	4b06      	ldrmi	r3, [pc, #24]	; (8000c40 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000c26:	4b07      	ldrpl	r3, [pc, #28]	; (8000c44 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000c28:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000c2c:	4358      	muls	r0, r3
 8000c2e:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000c30:	4803      	ldr	r0, [pc, #12]	; (8000c40 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c32:	bd10      	pop	{r4, pc}
 8000c34:	40021000 	.word	0x40021000
 8000c38:	08002e8c 	.word	0x08002e8c
 8000c3c:	08002e9c 	.word	0x08002e9c
 8000c40:	007a1200 	.word	0x007a1200
 8000c44:	003d0900 	.word	0x003d0900

08000c48 <HAL_RCC_ClockConfig>:
{
 8000c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c4c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c4e:	4604      	mov	r4, r0
 8000c50:	b910      	cbnz	r0, 8000c58 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c52:	2001      	movs	r0, #1
 8000c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8000c58:	6803      	ldr	r3, [r0, #0]
 8000c5a:	0718      	lsls	r0, r3, #28
 8000c5c:	d104      	bne.n	8000c68 <HAL_RCC_ClockConfig+0x20>
 8000c5e:	f240 21c3 	movw	r1, #707	; 0x2c3
 8000c62:	4876      	ldr	r0, [pc, #472]	; (8000e3c <HAL_RCC_ClockConfig+0x1f4>)
 8000c64:	f001 ff5e 	bl	8002b24 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8000c68:	2d02      	cmp	r5, #2
 8000c6a:	d904      	bls.n	8000c76 <HAL_RCC_ClockConfig+0x2e>
 8000c6c:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 8000c70:	4872      	ldr	r0, [pc, #456]	; (8000e3c <HAL_RCC_ClockConfig+0x1f4>)
 8000c72:	f001 ff57 	bl	8002b24 <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c76:	4a72      	ldr	r2, [pc, #456]	; (8000e40 <HAL_RCC_ClockConfig+0x1f8>)
 8000c78:	6813      	ldr	r3, [r2, #0]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	429d      	cmp	r5, r3
 8000c80:	d844      	bhi.n	8000d0c <HAL_RCC_ClockConfig+0xc4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c82:	6823      	ldr	r3, [r4, #0]
 8000c84:	0799      	lsls	r1, r3, #30
 8000c86:	d44c      	bmi.n	8000d22 <HAL_RCC_ClockConfig+0xda>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c88:	6823      	ldr	r3, [r4, #0]
 8000c8a:	07da      	lsls	r2, r3, #31
 8000c8c:	d468      	bmi.n	8000d60 <HAL_RCC_ClockConfig+0x118>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c8e:	4a6c      	ldr	r2, [pc, #432]	; (8000e40 <HAL_RCC_ClockConfig+0x1f8>)
 8000c90:	6813      	ldr	r3, [r2, #0]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	429d      	cmp	r5, r3
 8000c98:	f0c0 80ab 	bcc.w	8000df2 <HAL_RCC_ClockConfig+0x1aa>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c9c:	6823      	ldr	r3, [r4, #0]
 8000c9e:	4d69      	ldr	r5, [pc, #420]	; (8000e44 <HAL_RCC_ClockConfig+0x1fc>)
 8000ca0:	f013 0f04 	tst.w	r3, #4
 8000ca4:	f040 80b1 	bne.w	8000e0a <HAL_RCC_ClockConfig+0x1c2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ca8:	6823      	ldr	r3, [r4, #0]
 8000caa:	071b      	lsls	r3, r3, #28
 8000cac:	d517      	bpl.n	8000cde <HAL_RCC_ClockConfig+0x96>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8000cae:	6923      	ldr	r3, [r4, #16]
 8000cb0:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8000cb4:	d00c      	beq.n	8000cd0 <HAL_RCC_ClockConfig+0x88>
 8000cb6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000cba:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8000cbe:	d007      	beq.n	8000cd0 <HAL_RCC_ClockConfig+0x88>
 8000cc0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000cc4:	d004      	beq.n	8000cd0 <HAL_RCC_ClockConfig+0x88>
 8000cc6:	f240 3125 	movw	r1, #805	; 0x325
 8000cca:	485c      	ldr	r0, [pc, #368]	; (8000e3c <HAL_RCC_ClockConfig+0x1f4>)
 8000ccc:	f001 ff2a 	bl	8002b24 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000cd0:	686b      	ldr	r3, [r5, #4]
 8000cd2:	6922      	ldr	r2, [r4, #16]
 8000cd4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000cd8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000cdc:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000cde:	f7ff ff81 	bl	8000be4 <HAL_RCC_GetSysClockFreq>
 8000ce2:	686b      	ldr	r3, [r5, #4]
 8000ce4:	22f0      	movs	r2, #240	; 0xf0
 8000ce6:	fa92 f2a2 	rbit	r2, r2
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cf2:	40d3      	lsrs	r3, r2
 8000cf4:	4a54      	ldr	r2, [pc, #336]	; (8000e48 <HAL_RCC_ClockConfig+0x200>)
 8000cf6:	5cd3      	ldrb	r3, [r2, r3]
 8000cf8:	40d8      	lsrs	r0, r3
 8000cfa:	4b54      	ldr	r3, [pc, #336]	; (8000e4c <HAL_RCC_ClockConfig+0x204>)
 8000cfc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000cfe:	4b54      	ldr	r3, [pc, #336]	; (8000e50 <HAL_RCC_ClockConfig+0x208>)
 8000d00:	6818      	ldr	r0, [r3, #0]
 8000d02:	f001 ff9d 	bl	8002c40 <HAL_InitTick>
  return HAL_OK;
 8000d06:	2000      	movs	r0, #0
 8000d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d0c:	6813      	ldr	r3, [r2, #0]
 8000d0e:	f023 0307 	bic.w	r3, r3, #7
 8000d12:	432b      	orrs	r3, r5
 8000d14:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d16:	6813      	ldr	r3, [r2, #0]
 8000d18:	f003 0307 	and.w	r3, r3, #7
 8000d1c:	429d      	cmp	r5, r3
 8000d1e:	d198      	bne.n	8000c52 <HAL_RCC_ClockConfig+0xa>
 8000d20:	e7af      	b.n	8000c82 <HAL_RCC_ClockConfig+0x3a>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8000d22:	68a3      	ldr	r3, [r4, #8]
 8000d24:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8000d28:	d012      	beq.n	8000d50 <HAL_RCC_ClockConfig+0x108>
 8000d2a:	f023 0220 	bic.w	r2, r3, #32
 8000d2e:	2a90      	cmp	r2, #144	; 0x90
 8000d30:	d00e      	beq.n	8000d50 <HAL_RCC_ClockConfig+0x108>
 8000d32:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000d36:	2aa0      	cmp	r2, #160	; 0xa0
 8000d38:	d00a      	beq.n	8000d50 <HAL_RCC_ClockConfig+0x108>
 8000d3a:	f023 0210 	bic.w	r2, r3, #16
 8000d3e:	2ac0      	cmp	r2, #192	; 0xc0
 8000d40:	d006      	beq.n	8000d50 <HAL_RCC_ClockConfig+0x108>
 8000d42:	2bf0      	cmp	r3, #240	; 0xf0
 8000d44:	d004      	beq.n	8000d50 <HAL_RCC_ClockConfig+0x108>
 8000d46:	f240 21db 	movw	r1, #731	; 0x2db
 8000d4a:	483c      	ldr	r0, [pc, #240]	; (8000e3c <HAL_RCC_ClockConfig+0x1f4>)
 8000d4c:	f001 feea 	bl	8002b24 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d50:	4a3c      	ldr	r2, [pc, #240]	; (8000e44 <HAL_RCC_ClockConfig+0x1fc>)
 8000d52:	68a1      	ldr	r1, [r4, #8]
 8000d54:	6853      	ldr	r3, [r2, #4]
 8000d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d5a:	430b      	orrs	r3, r1
 8000d5c:	6053      	str	r3, [r2, #4]
 8000d5e:	e793      	b.n	8000c88 <HAL_RCC_ClockConfig+0x40>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8000d60:	6863      	ldr	r3, [r4, #4]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d904      	bls.n	8000d70 <HAL_RCC_ClockConfig+0x128>
 8000d66:	f240 21e2 	movw	r1, #738	; 0x2e2
 8000d6a:	4834      	ldr	r0, [pc, #208]	; (8000e3c <HAL_RCC_ClockConfig+0x1f4>)
 8000d6c:	f001 feda 	bl	8002b24 <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d70:	6862      	ldr	r2, [r4, #4]
 8000d72:	4e34      	ldr	r6, [pc, #208]	; (8000e44 <HAL_RCC_ClockConfig+0x1fc>)
 8000d74:	2a01      	cmp	r2, #1
 8000d76:	d129      	bne.n	8000dcc <HAL_RCC_ClockConfig+0x184>
 8000d78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d7c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d80:	6831      	ldr	r1, [r6, #0]
 8000d82:	fa93 f3a3 	rbit	r3, r3
 8000d86:	fab3 f383 	clz	r3, r3
 8000d8a:	f003 031f 	and.w	r3, r3, #31
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d94:	f43f af5d 	beq.w	8000c52 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d98:	6873      	ldr	r3, [r6, #4]
 8000d9a:	f023 0303 	bic.w	r3, r3, #3
 8000d9e:	431a      	orrs	r2, r3
 8000da0:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8000da2:	f7ff fa33 	bl	800020c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000da6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000daa:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dac:	6873      	ldr	r3, [r6, #4]
 8000dae:	6862      	ldr	r2, [r4, #4]
 8000db0:	f003 030c 	and.w	r3, r3, #12
 8000db4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000db8:	f43f af69 	beq.w	8000c8e <HAL_RCC_ClockConfig+0x46>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dbc:	f7ff fa26 	bl	800020c <HAL_GetTick>
 8000dc0:	1bc0      	subs	r0, r0, r7
 8000dc2:	4540      	cmp	r0, r8
 8000dc4:	d9f2      	bls.n	8000dac <HAL_RCC_ClockConfig+0x164>
        return HAL_TIMEOUT;
 8000dc6:	2003      	movs	r0, #3
}
 8000dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dcc:	2a02      	cmp	r2, #2
 8000dce:	bf0c      	ite	eq
 8000dd0:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000dd4:	2302      	movne	r3, #2
 8000dd6:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dda:	6830      	ldr	r0, [r6, #0]
 8000ddc:	fa93 f3a3 	rbit	r3, r3
 8000de0:	fab3 f383 	clz	r3, r3
 8000de4:	f003 031f 	and.w	r3, r3, #31
 8000de8:	2101      	movs	r1, #1
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	4203      	tst	r3, r0
 8000df0:	e7d0      	b.n	8000d94 <HAL_RCC_ClockConfig+0x14c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000df2:	6813      	ldr	r3, [r2, #0]
 8000df4:	f023 0307 	bic.w	r3, r3, #7
 8000df8:	432b      	orrs	r3, r5
 8000dfa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dfc:	6813      	ldr	r3, [r2, #0]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	429d      	cmp	r5, r3
 8000e04:	f47f af25 	bne.w	8000c52 <HAL_RCC_ClockConfig+0xa>
 8000e08:	e748      	b.n	8000c9c <HAL_RCC_ClockConfig+0x54>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8000e0a:	68e3      	ldr	r3, [r4, #12]
 8000e0c:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8000e10:	d00c      	beq.n	8000e2c <HAL_RCC_ClockConfig+0x1e4>
 8000e12:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000e16:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8000e1a:	d007      	beq.n	8000e2c <HAL_RCC_ClockConfig+0x1e4>
 8000e1c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000e20:	d004      	beq.n	8000e2c <HAL_RCC_ClockConfig+0x1e4>
 8000e22:	f240 311e 	movw	r1, #798	; 0x31e
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <HAL_RCC_ClockConfig+0x1f4>)
 8000e28:	f001 fe7c 	bl	8002b24 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e2c:	686b      	ldr	r3, [r5, #4]
 8000e2e:	68e2      	ldr	r2, [r4, #12]
 8000e30:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e34:	4313      	orrs	r3, r2
 8000e36:	606b      	str	r3, [r5, #4]
 8000e38:	e736      	b.n	8000ca8 <HAL_RCC_ClockConfig+0x60>
 8000e3a:	bf00      	nop
 8000e3c:	08002e54 	.word	0x08002e54
 8000e40:	40022000 	.word	0x40022000
 8000e44:	40021000 	.word	0x40021000
 8000e48:	08002f6a 	.word	0x08002f6a
 8000e4c:	2000000c 	.word	0x2000000c
 8000e50:	20000004 	.word	0x20000004

08000e54 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000e56:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	fa92 f2a2 	rbit	r2, r2
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000e68:	40d3      	lsrs	r3, r2
 8000e6a:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8000e6c:	5cd3      	ldrb	r3, [r2, r3]
 8000e6e:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000e70:	6810      	ldr	r0, [r2, #0]
}    
 8000e72:	40d8      	lsrs	r0, r3
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	08002f7a 	.word	0x08002f7a
 8000e80:	2000000c 	.word	0x2000000c

08000e84 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e86:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	fa92 f2a2 	rbit	r2, r2
 8000e90:	fab2 f282 	clz	r2, r2
 8000e94:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000e98:	40d3      	lsrs	r3, r2
 8000e9a:	4a04      	ldr	r2, [pc, #16]	; (8000eac <HAL_RCC_GetPCLK2Freq+0x28>)
 8000e9c:	5cd3      	ldrb	r3, [r2, r3]
 8000e9e:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000ea0:	6810      	ldr	r0, [r2, #0]
} 
 8000ea2:	40d8      	lsrs	r0, r3
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	08002f7a 	.word	0x08002f7a
 8000eb0:	2000000c 	.word	0x2000000c

08000eb4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000eb4:	b538      	push	{r3, r4, r5, lr}
 8000eb6:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 8000eb8:	4604      	mov	r4, r0
 8000eba:	b920      	cbnz	r0, 8000ec6 <HAL_RCC_GetClockConfig+0x12>
 8000ebc:	f240 4184 	movw	r1, #1156	; 0x484
 8000ec0:	4811      	ldr	r0, [pc, #68]	; (8000f08 <HAL_RCC_GetClockConfig+0x54>)
 8000ec2:	f001 fe2f 	bl	8002b24 <assert_failed>
  assert_param(pFLatency != NULL);
 8000ec6:	b925      	cbnz	r5, 8000ed2 <HAL_RCC_GetClockConfig+0x1e>
 8000ec8:	f240 4185 	movw	r1, #1157	; 0x485
 8000ecc:	480e      	ldr	r0, [pc, #56]	; (8000f08 <HAL_RCC_GetClockConfig+0x54>)
 8000ece:	f001 fe29 	bl	8002b24 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000ed2:	230f      	movs	r3, #15
 8000ed4:	6023      	str	r3, [r4, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_RCC_GetClockConfig+0x58>)
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	f002 0203 	and.w	r2, r2, #3
 8000ede:	6062      	str	r2, [r4, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000ee6:	60a2      	str	r2, [r4, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000eee:	60e2      	str	r2, [r4, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	08db      	lsrs	r3, r3, #3
 8000ef4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000ef8:	6123      	str	r3, [r4, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_RCC_GetClockConfig+0x5c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	602b      	str	r3, [r5, #0]
 8000f04:	bd38      	pop	{r3, r4, r5, pc}
 8000f06:	bf00      	nop
 8000f08:	08002e54 	.word	0x08002e54
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40022000 	.word	0x40022000

08000f14 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000f14:	6803      	ldr	r3, [r0, #0]
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000f1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f1e:	6842      	ldr	r2, [r0, #4]
 8000f20:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000f24:	d10a      	bne.n	8000f3c <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8000f26:	6882      	ldr	r2, [r0, #8]
 8000f28:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000f2c:	d002      	beq.n	8000f34 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000f2e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000f32:	d103      	bne.n	8000f3c <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000f3c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000f3e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000f42:	d107      	bne.n	8000f54 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f52:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8000f54:	2301      	movs	r3, #1
 8000f56:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8000f60:	2003      	movs	r0, #3
 8000f62:	4770      	bx	lr

08000f64 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000f64:	b570      	push	{r4, r5, r6, lr}
 8000f66:	4604      	mov	r4, r0
 8000f68:	460d      	mov	r5, r1
 8000f6a:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	6898      	ldr	r0, [r3, #8]
 8000f70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000f74:	d100      	bne.n	8000f78 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x14>
}
 8000f76:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000f78:	1c6a      	adds	r2, r5, #1
 8000f7a:	d0f8      	beq.n	8000f6e <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000f7c:	f7ff f946 	bl	800020c <HAL_GetTick>
 8000f80:	1b80      	subs	r0, r0, r6
 8000f82:	4285      	cmp	r5, r0
 8000f84:	d8f2      	bhi.n	8000f6c <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8000f86:	4620      	mov	r0, r4
}
 8000f88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000f8c:	f7ff bfc2 	b.w	8000f14 <SPI_WaitFifoStateUntilTimeout.part.1>

08000f90 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8000f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f92:	4605      	mov	r5, r0
 8000f94:	460c      	mov	r4, r1
 8000f96:	4616      	mov	r6, r2
 8000f98:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8000f9a:	6829      	ldr	r1, [r5, #0]
 8000f9c:	6888      	ldr	r0, [r1, #8]
 8000f9e:	4020      	ands	r0, r4
 8000fa0:	d100      	bne.n	8000fa4 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x14>
}
 8000fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8000fa4:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8000fa8:	bf08      	it	eq
 8000faa:	7b0b      	ldrbeq	r3, [r1, #12]
    if (Timeout != HAL_MAX_DELAY)
 8000fac:	1c73      	adds	r3, r6, #1
 8000fae:	d0f5      	beq.n	8000f9c <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000fb0:	f7ff f92c 	bl	800020c <HAL_GetTick>
 8000fb4:	1bc0      	subs	r0, r0, r7
 8000fb6:	4286      	cmp	r6, r0
 8000fb8:	d8ef      	bhi.n	8000f9a <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8000fba:	4628      	mov	r0, r5
}
 8000fbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000fc0:	f7ff bfa8 	b.w	8000f14 <SPI_WaitFifoStateUntilTimeout.part.1>

08000fc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000fc4:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000fc6:	4613      	mov	r3, r2
{
 8000fc8:	460d      	mov	r5, r1
 8000fca:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000fcc:	460a      	mov	r2, r1
 8000fce:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8000fd2:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000fd4:	f7ff ffdc 	bl	8000f90 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8000fd8:	b128      	cbz	r0, 8000fe6 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000fda:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000fdc:	f043 0320 	orr.w	r3, r3, #32
 8000fe0:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8000fe2:	2003      	movs	r0, #3
 8000fe4:	e00f      	b.n	8001006 <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000fe6:	4632      	mov	r2, r6
 8000fe8:	4629      	mov	r1, r5
 8000fea:	4620      	mov	r0, r4
 8000fec:	f7ff ffba 	bl	8000f64 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	d1f2      	bne.n	8000fda <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000ff4:	4633      	mov	r3, r6
 8000ff6:	462a      	mov	r2, r5
 8000ff8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	f7ff ffc7 	bl	8000f90 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001002:	2800      	cmp	r0, #0
 8001004:	d1e9      	bne.n	8000fda <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8001006:	bd70      	pop	{r4, r5, r6, pc}

08001008 <HAL_SPI_Init>:
{
 8001008:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 800100a:	4604      	mov	r4, r0
 800100c:	2800      	cmp	r0, #0
 800100e:	f000 80d5 	beq.w	80011bc <HAL_SPI_Init+0x1b4>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8001012:	6803      	ldr	r3, [r0, #0]
 8001014:	4a6a      	ldr	r2, [pc, #424]	; (80011c0 <HAL_SPI_Init+0x1b8>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d008      	beq.n	800102c <HAL_SPI_Init+0x24>
 800101a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800101e:	4293      	cmp	r3, r2
 8001020:	d004      	beq.n	800102c <HAL_SPI_Init+0x24>
 8001022:	f240 1147 	movw	r1, #327	; 0x147
 8001026:	4867      	ldr	r0, [pc, #412]	; (80011c4 <HAL_SPI_Init+0x1bc>)
 8001028:	f001 fd7c 	bl	8002b24 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800102c:	6863      	ldr	r3, [r4, #4]
 800102e:	b13b      	cbz	r3, 8001040 <HAL_SPI_Init+0x38>
 8001030:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001034:	d004      	beq.n	8001040 <HAL_SPI_Init+0x38>
 8001036:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800103a:	4862      	ldr	r0, [pc, #392]	; (80011c4 <HAL_SPI_Init+0x1bc>)
 800103c:	f001 fd72 	bl	8002b24 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8001040:	68a3      	ldr	r3, [r4, #8]
 8001042:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8001046:	d007      	beq.n	8001058 <HAL_SPI_Init+0x50>
 8001048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800104c:	d004      	beq.n	8001058 <HAL_SPI_Init+0x50>
 800104e:	f240 1149 	movw	r1, #329	; 0x149
 8001052:	485c      	ldr	r0, [pc, #368]	; (80011c4 <HAL_SPI_Init+0x1bc>)
 8001054:	f001 fd66 	bl	8002b24 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8001058:	68e3      	ldr	r3, [r4, #12]
 800105a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800105e:	d018      	beq.n	8001092 <HAL_SPI_Init+0x8a>
 8001060:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001064:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001068:	d013      	beq.n	8001092 <HAL_SPI_Init+0x8a>
 800106a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800106e:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 8001072:	d00e      	beq.n	8001092 <HAL_SPI_Init+0x8a>
 8001074:	f423 6210 	bic.w	r2, r3, #2304	; 0x900
 8001078:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800107c:	d009      	beq.n	8001092 <HAL_SPI_Init+0x8a>
 800107e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001082:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001086:	d004      	beq.n	8001092 <HAL_SPI_Init+0x8a>
 8001088:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800108c:	484d      	ldr	r0, [pc, #308]	; (80011c4 <HAL_SPI_Init+0x1bc>)
 800108e:	f001 fd49 	bl	8002b24 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8001092:	69a3      	ldr	r3, [r4, #24]
 8001094:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 8001098:	d007      	beq.n	80010aa <HAL_SPI_Init+0xa2>
 800109a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800109e:	d004      	beq.n	80010aa <HAL_SPI_Init+0xa2>
 80010a0:	f240 114b 	movw	r1, #331	; 0x14b
 80010a4:	4847      	ldr	r0, [pc, #284]	; (80011c4 <HAL_SPI_Init+0x1bc>)
 80010a6:	f001 fd3d 	bl	8002b24 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 80010aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80010ac:	f033 0308 	bics.w	r3, r3, #8
 80010b0:	d004      	beq.n	80010bc <HAL_SPI_Init+0xb4>
 80010b2:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80010b6:	4843      	ldr	r0, [pc, #268]	; (80011c4 <HAL_SPI_Init+0x1bc>)
 80010b8:	f001 fd34 	bl	8002b24 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80010bc:	69e3      	ldr	r3, [r4, #28]
 80010be:	f033 0318 	bics.w	r3, r3, #24
 80010c2:	d006      	beq.n	80010d2 <HAL_SPI_Init+0xca>
 80010c4:	2b20      	cmp	r3, #32
 80010c6:	d004      	beq.n	80010d2 <HAL_SPI_Init+0xca>
 80010c8:	f240 114d 	movw	r1, #333	; 0x14d
 80010cc:	483d      	ldr	r0, [pc, #244]	; (80011c4 <HAL_SPI_Init+0x1bc>)
 80010ce:	f001 fd29 	bl	8002b24 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80010d2:	6a23      	ldr	r3, [r4, #32]
 80010d4:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80010d8:	d004      	beq.n	80010e4 <HAL_SPI_Init+0xdc>
 80010da:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 80010de:	4839      	ldr	r0, [pc, #228]	; (80011c4 <HAL_SPI_Init+0x1bc>)
 80010e0:	f001 fd20 	bl	8002b24 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80010e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010e6:	f033 0310 	bics.w	r3, r3, #16
 80010ea:	d004      	beq.n	80010f6 <HAL_SPI_Init+0xee>
 80010ec:	f240 114f 	movw	r1, #335	; 0x14f
 80010f0:	4834      	ldr	r0, [pc, #208]	; (80011c4 <HAL_SPI_Init+0x1bc>)
 80010f2:	f001 fd17 	bl	8002b24 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80010f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010f8:	b983      	cbnz	r3, 800111c <HAL_SPI_Init+0x114>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80010fa:	6923      	ldr	r3, [r4, #16]
 80010fc:	f033 0302 	bics.w	r3, r3, #2
 8001100:	d004      	beq.n	800110c <HAL_SPI_Init+0x104>
 8001102:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8001106:	482f      	ldr	r0, [pc, #188]	; (80011c4 <HAL_SPI_Init+0x1bc>)
 8001108:	f001 fd0c 	bl	8002b24 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800110c:	6963      	ldr	r3, [r4, #20]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d904      	bls.n	800111c <HAL_SPI_Init+0x114>
 8001112:	f240 1153 	movw	r1, #339	; 0x153
 8001116:	482b      	ldr	r0, [pc, #172]	; (80011c4 <HAL_SPI_Init+0x1bc>)
 8001118:	f001 fd04 	bl	8002b24 <assert_failed>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800111c:	2300      	movs	r3, #0
 800111e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001120:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8001124:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001128:	b923      	cbnz	r3, 8001134 <HAL_SPI_Init+0x12c>
    hspi->Lock = HAL_UNLOCKED;
 800112a:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800112e:	4620      	mov	r0, r4
 8001130:	f001 fd1a 	bl	8002b68 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001134:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001136:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001138:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800113c:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800113e:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8001140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001144:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8001148:	600b      	str	r3, [r1, #0]
 800114a:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800114e:	d932      	bls.n	80011b6 <HAL_SPI_Init+0x1ae>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001150:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001152:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001156:	bf18      	it	ne
 8001158:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800115a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800115c:	b92b      	cbnz	r3, 800116a <HAL_SPI_Init+0x162>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800115e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001162:	bf8c      	ite	hi
 8001164:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001166:	2301      	movls	r3, #1
 8001168:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800116a:	68a6      	ldr	r6, [r4, #8]
 800116c:	6863      	ldr	r3, [r4, #4]
 800116e:	69a5      	ldr	r5, [r4, #24]
 8001170:	4333      	orrs	r3, r6
 8001172:	6926      	ldr	r6, [r4, #16]
 8001174:	4333      	orrs	r3, r6
 8001176:	6966      	ldr	r6, [r4, #20]
 8001178:	4333      	orrs	r3, r6
 800117a:	69e6      	ldr	r6, [r4, #28]
 800117c:	4333      	orrs	r3, r6
 800117e:	6a26      	ldr	r6, [r4, #32]
 8001180:	4333      	orrs	r3, r6
 8001182:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001184:	4333      	orrs	r3, r6
 8001186:	f405 7600 	and.w	r6, r5, #512	; 0x200
 800118a:	4333      	orrs	r3, r6
 800118c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800118e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001190:	431a      	orrs	r2, r3
 8001192:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001194:	0c2d      	lsrs	r5, r5, #16
 8001196:	431a      	orrs	r2, r3
 8001198:	f005 0504 	and.w	r5, r5, #4
 800119c:	432a      	orrs	r2, r5
 800119e:	4302      	orrs	r2, r0
 80011a0:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80011a2:	69cb      	ldr	r3, [r1, #28]
 80011a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80011a8:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80011aa:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80011ac:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80011ae:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80011b0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 80011b4:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80011b6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80011ba:	e7cc      	b.n	8001156 <HAL_SPI_Init+0x14e>
    return HAL_ERROR;
 80011bc:	2001      	movs	r0, #1
}
 80011be:	bd70      	pop	{r4, r5, r6, pc}
 80011c0:	40003800 	.word	0x40003800
 80011c4:	08002eac 	.word	0x08002eac

080011c8 <HAL_SPI_Transmit_IT>:
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 80011c8:	6883      	ldr	r3, [r0, #8]
 80011ca:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
{
 80011ce:	b570      	push	{r4, r5, r6, lr}
 80011d0:	4604      	mov	r4, r0
 80011d2:	460e      	mov	r6, r1
 80011d4:	4615      	mov	r5, r2
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 80011d6:	d004      	beq.n	80011e2 <HAL_SPI_Transmit_IT+0x1a>
 80011d8:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 80011dc:	4822      	ldr	r0, [pc, #136]	; (8001268 <HAL_SPI_Transmit_IT+0xa0>)
 80011de:	f001 fca1 	bl	8002b24 <assert_failed>
  __HAL_LOCK(hspi);
 80011e2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d03c      	beq.n	8001264 <HAL_SPI_Transmit_IT+0x9c>
 80011ea:	2001      	movs	r0, #1
 80011ec:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  if ((pData == NULL) || (Size == 0U))
 80011f0:	2e00      	cmp	r6, #0
 80011f2:	d02f      	beq.n	8001254 <HAL_SPI_Transmit_IT+0x8c>
 80011f4:	2d00      	cmp	r5, #0
 80011f6:	d02d      	beq.n	8001254 <HAL_SPI_Transmit_IT+0x8c>
  if (hspi->State != HAL_SPI_STATE_READY)
 80011f8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80011fc:	4283      	cmp	r3, r0
 80011fe:	d12d      	bne.n	800125c <HAL_SPI_Transmit_IT+0x94>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001200:	2303      	movs	r3, #3
 8001202:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001206:	2300      	movs	r3, #0
 8001208:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800120a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 800120c:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 800120e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001212:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 8001216:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001218:	68e3      	ldr	r3, [r4, #12]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800121a:	63a6      	str	r6, [r4, #56]	; 0x38
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800121c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    hspi->TxISR = SPI_TxISR_16BIT;
 8001220:	bf8c      	ite	hi
 8001222:	4b12      	ldrhi	r3, [pc, #72]	; (800126c <HAL_SPI_Transmit_IT+0xa4>)
    hspi->TxISR = SPI_TxISR_8BIT;
 8001224:	4b12      	ldrls	r3, [pc, #72]	; (8001270 <HAL_SPI_Transmit_IT+0xa8>)
 8001226:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001228:	68a3      	ldr	r3, [r4, #8]
  hspi->TxXferSize  = Size;
 800122a:	87a5      	strh	r5, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800122c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001230:	6823      	ldr	r3, [r4, #0]
    SPI_1LINE_TX(hspi);
 8001232:	bf02      	ittt	eq
 8001234:	681a      	ldreq	r2, [r3, #0]
 8001236:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 800123a:	601a      	streq	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8001242:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800124a:	d109      	bne.n	8001260 <HAL_SPI_Transmit_IT+0x98>
    __HAL_SPI_ENABLE(hspi);
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001252:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8001254:	2300      	movs	r3, #0
 8001256:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 800125a:	bd70      	pop	{r4, r5, r6, pc}
    errorcode = HAL_BUSY;
 800125c:	2002      	movs	r0, #2
 800125e:	e7f9      	b.n	8001254 <HAL_SPI_Transmit_IT+0x8c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001260:	2000      	movs	r0, #0
 8001262:	e7f7      	b.n	8001254 <HAL_SPI_Transmit_IT+0x8c>
  __HAL_LOCK(hspi);
 8001264:	2002      	movs	r0, #2
}
 8001266:	bd70      	pop	{r4, r5, r6, pc}
 8001268:	08002eac 	.word	0x08002eac
 800126c:	080012ed 	.word	0x080012ed
 8001270:	080012cb 	.word	0x080012cb

08001274 <HAL_SPI_TxCpltCallback>:
 8001274:	4770      	bx	lr

08001276 <HAL_SPI_ErrorCallback>:
 8001276:	4770      	bx	lr

08001278 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8001278:	b513      	push	{r0, r1, r4, lr}
 800127a:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800127c:	f7fe ffc6 	bl	800020c <HAL_GetTick>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8001280:	6822      	ldr	r2, [r4, #0]
 8001282:	6853      	ldr	r3, [r2, #4]
 8001284:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001288:	6053      	str	r3, [r2, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800128a:	2164      	movs	r1, #100	; 0x64
 800128c:	4602      	mov	r2, r0
 800128e:	4620      	mov	r0, r4
 8001290:	f7ff fe98 	bl	8000fc4 <SPI_EndRxTxTransaction>
 8001294:	b118      	cbz	r0, 800129e <SPI_CloseTx_ISR+0x26>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001296:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001298:	f043 0320 	orr.w	r3, r3, #32
 800129c:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800129e:	68a3      	ldr	r3, [r4, #8]
 80012a0:	b933      	cbnz	r3, 80012b0 <SPI_CloseTx_ISR+0x38>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	6823      	ldr	r3, [r4, #0]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	9201      	str	r2, [sp, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	9b01      	ldr	r3, [sp, #4]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80012b0:	2301      	movs	r3, #1
 80012b2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80012b6:	6e23      	ldr	r3, [r4, #96]	; 0x60
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80012b8:	4620      	mov	r0, r4
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80012ba:	b11b      	cbz	r3, 80012c4 <SPI_CloseTx_ISR+0x4c>
    HAL_SPI_ErrorCallback(hspi);
 80012bc:	f7ff ffdb 	bl	8001276 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80012c0:	b002      	add	sp, #8
 80012c2:	bd10      	pop	{r4, pc}
    HAL_SPI_TxCpltCallback(hspi);
 80012c4:	f7ff ffd6 	bl	8001274 <HAL_SPI_TxCpltCallback>
}
 80012c8:	e7fa      	b.n	80012c0 <SPI_CloseTx_ISR+0x48>

080012ca <SPI_TxISR_8BIT>:
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80012ca:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80012cc:	6802      	ldr	r2, [r0, #0]
 80012ce:	7809      	ldrb	r1, [r1, #0]
 80012d0:	7311      	strb	r1, [r2, #12]
  hspi->pTxBuffPtr++;
 80012d2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80012d4:	3201      	adds	r2, #1
 80012d6:	6382      	str	r2, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 80012d8:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 80012da:	3a01      	subs	r2, #1
 80012dc:	b292      	uxth	r2, r2
 80012de:	87c2      	strh	r2, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 80012e0:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	b90b      	cbnz	r3, 80012ea <SPI_TxISR_8BIT+0x20>
    SPI_CloseTx_ISR(hspi);
 80012e6:	f7ff bfc7 	b.w	8001278 <SPI_CloseTx_ISR>
 80012ea:	4770      	bx	lr

080012ec <SPI_TxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80012ec:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80012ee:	6801      	ldr	r1, [r0, #0]
{
 80012f0:	b410      	push	{r4}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80012f2:	f832 4b02 	ldrh.w	r4, [r2], #2
 80012f6:	60cc      	str	r4, [r1, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80012f8:	6382      	str	r2, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 80012fa:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 80012fc:	3a01      	subs	r2, #1
 80012fe:	b292      	uxth	r2, r2
 8001300:	87c2      	strh	r2, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8001302:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8001304:	b29b      	uxth	r3, r3
 8001306:	b91b      	cbnz	r3, 8001310 <SPI_TxISR_16BIT+0x24>
}
 8001308:	f85d 4b04 	ldr.w	r4, [sp], #4
    SPI_CloseTx_ISR(hspi);
 800130c:	f7ff bfb4 	b.w	8001278 <SPI_CloseTx_ISR>
}
 8001310:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8001318:	6803      	ldr	r3, [r0, #0]
{
 800131a:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 800131c:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800131e:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001320:	f002 0541 	and.w	r5, r2, #65	; 0x41
 8001324:	2d01      	cmp	r5, #1
{
 8001326:	b085      	sub	sp, #20
 8001328:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800132a:	d105      	bne.n	8001338 <HAL_SPI_IRQHandler+0x20>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800132c:	064d      	lsls	r5, r1, #25
 800132e:	d503      	bpl.n	8001338 <HAL_SPI_IRQHandler+0x20>
    hspi->RxISR(hspi);
 8001330:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    hspi->TxISR(hspi);
 8001332:	4798      	blx	r3
}
 8001334:	b005      	add	sp, #20
 8001336:	bd30      	pop	{r4, r5, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001338:	0795      	lsls	r5, r2, #30
 800133a:	d504      	bpl.n	8001346 <HAL_SPI_IRQHandler+0x2e>
 800133c:	0608      	lsls	r0, r1, #24
 800133e:	d502      	bpl.n	8001346 <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 8001340:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001342:	4620      	mov	r0, r4
 8001344:	e7f5      	b.n	8001332 <HAL_SPI_IRQHandler+0x1a>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001346:	f412 7fb0 	tst.w	r2, #352	; 0x160
 800134a:	d0f3      	beq.n	8001334 <HAL_SPI_IRQHandler+0x1c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800134c:	068d      	lsls	r5, r1, #26
 800134e:	d5f1      	bpl.n	8001334 <HAL_SPI_IRQHandler+0x1c>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001350:	0650      	lsls	r0, r2, #25
 8001352:	d50f      	bpl.n	8001374 <HAL_SPI_IRQHandler+0x5c>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001354:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8001358:	2803      	cmp	r0, #3
 800135a:	f04f 0500 	mov.w	r5, #0
 800135e:	d04c      	beq.n	80013fa <HAL_SPI_IRQHandler+0xe2>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001360:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001362:	f040 0004 	orr.w	r0, r0, #4
 8001366:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001368:	9500      	str	r5, [sp, #0]
 800136a:	68d8      	ldr	r0, [r3, #12]
 800136c:	9000      	str	r0, [sp, #0]
 800136e:	6898      	ldr	r0, [r3, #8]
 8001370:	9000      	str	r0, [sp, #0]
 8001372:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001374:	0695      	lsls	r5, r2, #26
 8001376:	d50c      	bpl.n	8001392 <HAL_SPI_IRQHandler+0x7a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001378:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800137a:	f040 0001 	orr.w	r0, r0, #1
 800137e:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001380:	2000      	movs	r0, #0
 8001382:	9002      	str	r0, [sp, #8]
 8001384:	6898      	ldr	r0, [r3, #8]
 8001386:	9002      	str	r0, [sp, #8]
 8001388:	6818      	ldr	r0, [r3, #0]
 800138a:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800138e:	6018      	str	r0, [r3, #0]
 8001390:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001392:	05d0      	lsls	r0, r2, #23
 8001394:	d508      	bpl.n	80013a8 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001396:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001398:	f042 0208 	orr.w	r2, r2, #8
 800139c:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800139e:	2200      	movs	r2, #0
 80013a0:	9203      	str	r2, [sp, #12]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	9203      	str	r2, [sp, #12]
 80013a6:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80013a8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80013aa:	2a00      	cmp	r2, #0
 80013ac:	d0c2      	beq.n	8001334 <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80013b4:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80013b6:	2201      	movs	r2, #1
 80013b8:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80013bc:	078a      	lsls	r2, r1, #30
 80013be:	d023      	beq.n	8001408 <HAL_SPI_IRQHandler+0xf0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80013c0:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 80013c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80013c4:	f022 0203 	bic.w	r2, r2, #3
 80013c8:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 80013ca:	b140      	cbz	r0, 80013de <HAL_SPI_IRQHandler+0xc6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80013cc:	4b10      	ldr	r3, [pc, #64]	; (8001410 <HAL_SPI_IRQHandler+0xf8>)
 80013ce:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80013d0:	f7fe ff96 	bl	8000300 <HAL_DMA_Abort_IT>
 80013d4:	b118      	cbz	r0, 80013de <HAL_SPI_IRQHandler+0xc6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80013d6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80013d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013dc:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80013de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80013e0:	2800      	cmp	r0, #0
 80013e2:	d0a7      	beq.n	8001334 <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_SPI_IRQHandler+0xf8>)
 80013e6:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80013e8:	f7fe ff8a 	bl	8000300 <HAL_DMA_Abort_IT>
 80013ec:	2800      	cmp	r0, #0
 80013ee:	d0a1      	beq.n	8001334 <HAL_SPI_IRQHandler+0x1c>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80013f0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80013f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013f6:	6623      	str	r3, [r4, #96]	; 0x60
 80013f8:	e79c      	b.n	8001334 <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80013fa:	9501      	str	r5, [sp, #4]
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	9201      	str	r2, [sp, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	9b01      	ldr	r3, [sp, #4]
        return;
 8001406:	e795      	b.n	8001334 <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 8001408:	4620      	mov	r0, r4
 800140a:	f7ff ff34 	bl	8001276 <HAL_SPI_ErrorCallback>
 800140e:	e791      	b.n	8001334 <HAL_SPI_IRQHandler+0x1c>
 8001410:	08001415 	.word	0x08001415

08001414 <SPI_DMAAbortOnError>:
{
 8001414:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001416:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8001418:	2300      	movs	r3, #0
 800141a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800141e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8001420:	f7ff ff29 	bl	8001276 <HAL_SPI_ErrorCallback>
 8001424:	bd08      	pop	{r3, pc}

08001426 <HAL_TIM_Base_MspInit>:
 8001426:	4770      	bx	lr

08001428 <HAL_TIM_Base_Start_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001428:	6803      	ldr	r3, [r0, #0]
 800142a:	4a18      	ldr	r2, [pc, #96]	; (800148c <HAL_TIM_Base_Start_IT+0x64>)
 800142c:	4293      	cmp	r3, r2
{
 800142e:	b510      	push	{r4, lr}
 8001430:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001432:	d017      	beq.n	8001464 <HAL_TIM_Base_Start_IT+0x3c>
 8001434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001438:	d014      	beq.n	8001464 <HAL_TIM_Base_Start_IT+0x3c>
 800143a:	f5a2 328e 	sub.w	r2, r2, #72704	; 0x11c00
 800143e:	4293      	cmp	r3, r2
 8001440:	d010      	beq.n	8001464 <HAL_TIM_Base_Start_IT+0x3c>
 8001442:	f502 3298 	add.w	r2, r2, #77824	; 0x13000
 8001446:	4293      	cmp	r3, r2
 8001448:	d00c      	beq.n	8001464 <HAL_TIM_Base_Start_IT+0x3c>
 800144a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800144e:	4293      	cmp	r3, r2
 8001450:	d008      	beq.n	8001464 <HAL_TIM_Base_Start_IT+0x3c>
 8001452:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001456:	4293      	cmp	r3, r2
 8001458:	d004      	beq.n	8001464 <HAL_TIM_Base_Start_IT+0x3c>
 800145a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800145e:	480c      	ldr	r0, [pc, #48]	; (8001490 <HAL_TIM_Base_Start_IT+0x68>)
 8001460:	f001 fb60 	bl	8002b24 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001464:	6823      	ldr	r3, [r4, #0]
 8001466:	68da      	ldr	r2, [r3, #12]
 8001468:	f042 0201 	orr.w	r2, r2, #1
 800146c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800146e:	6899      	ldr	r1, [r3, #8]
 8001470:	4a08      	ldr	r2, [pc, #32]	; (8001494 <HAL_TIM_Base_Start_IT+0x6c>)
 8001472:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001474:	2a06      	cmp	r2, #6
 8001476:	d006      	beq.n	8001486 <HAL_TIM_Base_Start_IT+0x5e>
 8001478:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 800147c:	bf1e      	ittt	ne
 800147e:	681a      	ldrne	r2, [r3, #0]
 8001480:	f042 0201 	orrne.w	r2, r2, #1
 8001484:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8001486:	2000      	movs	r0, #0
 8001488:	bd10      	pop	{r4, pc}
 800148a:	bf00      	nop
 800148c:	40012c00 	.word	0x40012c00
 8001490:	08002ee4 	.word	0x08002ee4
 8001494:	00010007 	.word	0x00010007

08001498 <HAL_TIM_OC_DelayElapsedCallback>:
 8001498:	4770      	bx	lr

0800149a <HAL_TIM_IC_CaptureCallback>:
 800149a:	4770      	bx	lr

0800149c <HAL_TIM_PWM_PulseFinishedCallback>:
 800149c:	4770      	bx	lr

0800149e <HAL_TIM_TriggerCallback>:
 800149e:	4770      	bx	lr

080014a0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014a0:	6803      	ldr	r3, [r0, #0]
 80014a2:	691a      	ldr	r2, [r3, #16]
 80014a4:	0791      	lsls	r1, r2, #30
{
 80014a6:	b510      	push	{r4, lr}
 80014a8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014aa:	d50f      	bpl.n	80014cc <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	0792      	lsls	r2, r2, #30
 80014b0:	d50c      	bpl.n	80014cc <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014b2:	f06f 0202 	mvn.w	r2, #2
 80014b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014b8:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014ba:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014bc:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014be:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014c0:	f000 8085 	beq.w	80015ce <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80014c4:	f7ff ffe9 	bl	800149a <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014c8:	2300      	movs	r3, #0
 80014ca:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80014cc:	6823      	ldr	r3, [r4, #0]
 80014ce:	691a      	ldr	r2, [r3, #16]
 80014d0:	0752      	lsls	r2, r2, #29
 80014d2:	d510      	bpl.n	80014f6 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80014d4:	68da      	ldr	r2, [r3, #12]
 80014d6:	0750      	lsls	r0, r2, #29
 80014d8:	d50d      	bpl.n	80014f6 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80014da:	f06f 0204 	mvn.w	r2, #4
 80014de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014e0:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014e2:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014e4:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014e8:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014ea:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014ec:	d075      	beq.n	80015da <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80014ee:	f7ff ffd4 	bl	800149a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014f2:	2300      	movs	r3, #0
 80014f4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80014f6:	6823      	ldr	r3, [r4, #0]
 80014f8:	691a      	ldr	r2, [r3, #16]
 80014fa:	0711      	lsls	r1, r2, #28
 80014fc:	d50f      	bpl.n	800151e <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80014fe:	68da      	ldr	r2, [r3, #12]
 8001500:	0712      	lsls	r2, r2, #28
 8001502:	d50c      	bpl.n	800151e <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001504:	f06f 0208 	mvn.w	r2, #8
 8001508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800150a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800150c:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800150e:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001510:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001512:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001514:	d067      	beq.n	80015e6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001516:	f7ff ffc0 	bl	800149a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800151a:	2300      	movs	r3, #0
 800151c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800151e:	6823      	ldr	r3, [r4, #0]
 8001520:	691a      	ldr	r2, [r3, #16]
 8001522:	06d0      	lsls	r0, r2, #27
 8001524:	d510      	bpl.n	8001548 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	06d1      	lsls	r1, r2, #27
 800152a:	d50d      	bpl.n	8001548 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800152c:	f06f 0210 	mvn.w	r2, #16
 8001530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001532:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001534:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001536:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800153a:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800153c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800153e:	d058      	beq.n	80015f2 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001540:	f7ff ffab 	bl	800149a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001544:	2300      	movs	r3, #0
 8001546:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001548:	6823      	ldr	r3, [r4, #0]
 800154a:	691a      	ldr	r2, [r3, #16]
 800154c:	07d2      	lsls	r2, r2, #31
 800154e:	d508      	bpl.n	8001562 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001550:	68da      	ldr	r2, [r3, #12]
 8001552:	07d0      	lsls	r0, r2, #31
 8001554:	d505      	bpl.n	8001562 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001556:	f06f 0201 	mvn.w	r2, #1
 800155a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800155c:	4620      	mov	r0, r4
 800155e:	f001 fad7 	bl	8002b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001562:	6823      	ldr	r3, [r4, #0]
 8001564:	691a      	ldr	r2, [r3, #16]
 8001566:	0611      	lsls	r1, r2, #24
 8001568:	d508      	bpl.n	800157c <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800156a:	68da      	ldr	r2, [r3, #12]
 800156c:	0612      	lsls	r2, r2, #24
 800156e:	d505      	bpl.n	800157c <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001570:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001576:	4620      	mov	r0, r4
 8001578:	f000 f8e5 	bl	8001746 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800157c:	6823      	ldr	r3, [r4, #0]
 800157e:	691a      	ldr	r2, [r3, #16]
 8001580:	05d0      	lsls	r0, r2, #23
 8001582:	d508      	bpl.n	8001596 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	0611      	lsls	r1, r2, #24
 8001588:	d505      	bpl.n	8001596 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800158a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800158e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001590:	4620      	mov	r0, r4
 8001592:	f000 f8d9 	bl	8001748 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001596:	6823      	ldr	r3, [r4, #0]
 8001598:	691a      	ldr	r2, [r3, #16]
 800159a:	0652      	lsls	r2, r2, #25
 800159c:	d508      	bpl.n	80015b0 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800159e:	68da      	ldr	r2, [r3, #12]
 80015a0:	0650      	lsls	r0, r2, #25
 80015a2:	d505      	bpl.n	80015b0 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80015a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80015a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80015aa:	4620      	mov	r0, r4
 80015ac:	f7ff ff77 	bl	800149e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80015b0:	6823      	ldr	r3, [r4, #0]
 80015b2:	691a      	ldr	r2, [r3, #16]
 80015b4:	0691      	lsls	r1, r2, #26
 80015b6:	d522      	bpl.n	80015fe <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	0692      	lsls	r2, r2, #26
 80015bc:	d51f      	bpl.n	80015fe <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80015be:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80015c2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80015c4:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80015c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80015ca:	f000 b8bb 	b.w	8001744 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ce:	f7ff ff63 	bl	8001498 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015d2:	4620      	mov	r0, r4
 80015d4:	f7ff ff62 	bl	800149c <HAL_TIM_PWM_PulseFinishedCallback>
 80015d8:	e776      	b.n	80014c8 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015da:	f7ff ff5d 	bl	8001498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015de:	4620      	mov	r0, r4
 80015e0:	f7ff ff5c 	bl	800149c <HAL_TIM_PWM_PulseFinishedCallback>
 80015e4:	e785      	b.n	80014f2 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015e6:	f7ff ff57 	bl	8001498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015ea:	4620      	mov	r0, r4
 80015ec:	f7ff ff56 	bl	800149c <HAL_TIM_PWM_PulseFinishedCallback>
 80015f0:	e793      	b.n	800151a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015f2:	f7ff ff51 	bl	8001498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015f6:	4620      	mov	r0, r4
 80015f8:	f7ff ff50 	bl	800149c <HAL_TIM_PWM_PulseFinishedCallback>
 80015fc:	e7a2      	b.n	8001544 <HAL_TIM_IRQHandler+0xa4>
 80015fe:	bd10      	pop	{r4, pc}

08001600 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001600:	4a1e      	ldr	r2, [pc, #120]	; (800167c <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 8001602:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001604:	4290      	cmp	r0, r2
{
 8001606:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001608:	d002      	beq.n	8001610 <TIM_Base_SetConfig+0x10>
 800160a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800160e:	d109      	bne.n	8001624 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001610:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001616:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8001618:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800161c:	d00d      	beq.n	800163a <TIM_Base_SetConfig+0x3a>
 800161e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001622:	d00a      	beq.n	800163a <TIM_Base_SetConfig+0x3a>
 8001624:	4a16      	ldr	r2, [pc, #88]	; (8001680 <TIM_Base_SetConfig+0x80>)
 8001626:	4290      	cmp	r0, r2
 8001628:	d007      	beq.n	800163a <TIM_Base_SetConfig+0x3a>
 800162a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800162e:	4290      	cmp	r0, r2
 8001630:	d003      	beq.n	800163a <TIM_Base_SetConfig+0x3a>
 8001632:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001636:	4290      	cmp	r0, r2
 8001638:	d103      	bne.n	8001642 <TIM_Base_SetConfig+0x42>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800163a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800163c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001640:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001642:	694a      	ldr	r2, [r1, #20]
 8001644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001648:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800164a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800164c:	688b      	ldr	r3, [r1, #8]
 800164e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001650:	680b      	ldr	r3, [r1, #0]
 8001652:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <TIM_Base_SetConfig+0x7c>)
 8001656:	4298      	cmp	r0, r3
 8001658:	d00b      	beq.n	8001672 <TIM_Base_SetConfig+0x72>
 800165a:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800165e:	4298      	cmp	r0, r3
 8001660:	d007      	beq.n	8001672 <TIM_Base_SetConfig+0x72>
 8001662:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001666:	4298      	cmp	r0, r3
 8001668:	d003      	beq.n	8001672 <TIM_Base_SetConfig+0x72>
 800166a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800166e:	4298      	cmp	r0, r3
 8001670:	d101      	bne.n	8001676 <TIM_Base_SetConfig+0x76>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001672:	690b      	ldr	r3, [r1, #16]
 8001674:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001676:	2301      	movs	r3, #1
 8001678:	6143      	str	r3, [r0, #20]
 800167a:	bd10      	pop	{r4, pc}
 800167c:	40012c00 	.word	0x40012c00
 8001680:	40014000 	.word	0x40014000

08001684 <HAL_TIM_Base_Init>:
{
 8001684:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001686:	4604      	mov	r4, r0
 8001688:	2800      	cmp	r0, #0
 800168a:	d055      	beq.n	8001738 <HAL_TIM_Base_Init+0xb4>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800168c:	6803      	ldr	r3, [r0, #0]
 800168e:	4a2b      	ldr	r2, [pc, #172]	; (800173c <HAL_TIM_Base_Init+0xb8>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d017      	beq.n	80016c4 <HAL_TIM_Base_Init+0x40>
 8001694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001698:	d014      	beq.n	80016c4 <HAL_TIM_Base_Init+0x40>
 800169a:	f5a2 328e 	sub.w	r2, r2, #72704	; 0x11c00
 800169e:	4293      	cmp	r3, r2
 80016a0:	d010      	beq.n	80016c4 <HAL_TIM_Base_Init+0x40>
 80016a2:	f502 3298 	add.w	r2, r2, #77824	; 0x13000
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d00c      	beq.n	80016c4 <HAL_TIM_Base_Init+0x40>
 80016aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d008      	beq.n	80016c4 <HAL_TIM_Base_Init+0x40>
 80016b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d004      	beq.n	80016c4 <HAL_TIM_Base_Init+0x40>
 80016ba:	f240 1119 	movw	r1, #281	; 0x119
 80016be:	4820      	ldr	r0, [pc, #128]	; (8001740 <HAL_TIM_Base_Init+0xbc>)
 80016c0:	f001 fa30 	bl	8002b24 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80016c4:	68a3      	ldr	r3, [r4, #8]
 80016c6:	f033 0210 	bics.w	r2, r3, #16
 80016ca:	d00a      	beq.n	80016e2 <HAL_TIM_Base_Init+0x5e>
 80016cc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80016d0:	2a20      	cmp	r2, #32
 80016d2:	d006      	beq.n	80016e2 <HAL_TIM_Base_Init+0x5e>
 80016d4:	2b40      	cmp	r3, #64	; 0x40
 80016d6:	d004      	beq.n	80016e2 <HAL_TIM_Base_Init+0x5e>
 80016d8:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80016dc:	4818      	ldr	r0, [pc, #96]	; (8001740 <HAL_TIM_Base_Init+0xbc>)
 80016de:	f001 fa21 	bl	8002b24 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80016e2:	6923      	ldr	r3, [r4, #16]
 80016e4:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80016e8:	d007      	beq.n	80016fa <HAL_TIM_Base_Init+0x76>
 80016ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ee:	d004      	beq.n	80016fa <HAL_TIM_Base_Init+0x76>
 80016f0:	f240 111b 	movw	r1, #283	; 0x11b
 80016f4:	4812      	ldr	r0, [pc, #72]	; (8001740 <HAL_TIM_Base_Init+0xbc>)
 80016f6:	f001 fa15 	bl	8002b24 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80016fa:	69a3      	ldr	r3, [r4, #24]
 80016fc:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8001700:	d004      	beq.n	800170c <HAL_TIM_Base_Init+0x88>
 8001702:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8001706:	480e      	ldr	r0, [pc, #56]	; (8001740 <HAL_TIM_Base_Init+0xbc>)
 8001708:	f001 fa0c 	bl	8002b24 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800170c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001710:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001714:	b923      	cbnz	r3, 8001720 <HAL_TIM_Base_Init+0x9c>
    htim->Lock = HAL_UNLOCKED;
 8001716:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800171a:	4620      	mov	r0, r4
 800171c:	f7ff fe83 	bl	8001426 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001720:	2302      	movs	r3, #2
 8001722:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001726:	6820      	ldr	r0, [r4, #0]
 8001728:	1d21      	adds	r1, r4, #4
 800172a:	f7ff ff69 	bl	8001600 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800172e:	2301      	movs	r3, #1
 8001730:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001734:	2000      	movs	r0, #0
 8001736:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001738:	2001      	movs	r0, #1
}
 800173a:	bd10      	pop	{r4, pc}
 800173c:	40012c00 	.word	0x40012c00
 8001740:	08002ee4 	.word	0x08002ee4

08001744 <HAL_TIMEx_CommutCallback>:
 8001744:	4770      	bx	lr

08001746 <HAL_TIMEx_BreakCallback>:
 8001746:	4770      	bx	lr

08001748 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001748:	4770      	bx	lr
	...

0800174c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800174c:	b538      	push	{r3, r4, r5, lr}
  uint32_t usartdiv                   = 0x00000000U;
  HAL_StatusTypeDef ret               = HAL_OK;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800174e:	6842      	ldr	r2, [r0, #4]
 8001750:	4b7f      	ldr	r3, [pc, #508]	; (8001950 <UART_SetConfig+0x204>)
 8001752:	429a      	cmp	r2, r3
{
 8001754:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8001756:	d904      	bls.n	8001762 <UART_SetConfig+0x16>
 8001758:	f640 21a2 	movw	r1, #2722	; 0xaa2
 800175c:	487d      	ldr	r0, [pc, #500]	; (8001954 <UART_SetConfig+0x208>)
 800175e:	f001 f9e1 	bl	8002b24 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8001762:	68a3      	ldr	r3, [r4, #8]
 8001764:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001768:	d007      	beq.n	800177a <UART_SetConfig+0x2e>
 800176a:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800176e:	d004      	beq.n	800177a <UART_SetConfig+0x2e>
 8001770:	f640 21a3 	movw	r1, #2723	; 0xaa3
 8001774:	4877      	ldr	r0, [pc, #476]	; (8001954 <UART_SetConfig+0x208>)
 8001776:	f001 f9d5 	bl	8002b24 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800177a:	68e3      	ldr	r3, [r4, #12]
 800177c:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8001780:	d004      	beq.n	800178c <UART_SetConfig+0x40>
 8001782:	f640 21a4 	movw	r1, #2724	; 0xaa4
 8001786:	4873      	ldr	r0, [pc, #460]	; (8001954 <UART_SetConfig+0x208>)
 8001788:	f001 f9cc 	bl	8002b24 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800178c:	6a23      	ldr	r3, [r4, #32]
 800178e:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8001792:	d004      	beq.n	800179e <UART_SetConfig+0x52>
 8001794:	f640 21a5 	movw	r1, #2725	; 0xaa5
 8001798:	486e      	ldr	r0, [pc, #440]	; (8001954 <UART_SetConfig+0x208>)
 800179a:	f001 f9c3 	bl	8002b24 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800179e:	6923      	ldr	r3, [r4, #16]
 80017a0:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80017a4:	d007      	beq.n	80017b6 <UART_SetConfig+0x6a>
 80017a6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80017aa:	d004      	beq.n	80017b6 <UART_SetConfig+0x6a>
 80017ac:	f640 21a7 	movw	r1, #2727	; 0xaa7
 80017b0:	4868      	ldr	r0, [pc, #416]	; (8001954 <UART_SetConfig+0x208>)
 80017b2:	f001 f9b7 	bl	8002b24 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80017b6:	6963      	ldr	r3, [r4, #20]
 80017b8:	f033 020c 	bics.w	r2, r3, #12
 80017bc:	d100      	bne.n	80017c0 <UART_SetConfig+0x74>
 80017be:	b923      	cbnz	r3, 80017ca <UART_SetConfig+0x7e>
 80017c0:	f640 21a8 	movw	r1, #2728	; 0xaa8
 80017c4:	4863      	ldr	r0, [pc, #396]	; (8001954 <UART_SetConfig+0x208>)
 80017c6:	f001 f9ad 	bl	8002b24 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80017ca:	69a3      	ldr	r3, [r4, #24]
 80017cc:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 80017d0:	d004      	beq.n	80017dc <UART_SetConfig+0x90>
 80017d2:	f640 21a9 	movw	r1, #2729	; 0xaa9
 80017d6:	485f      	ldr	r0, [pc, #380]	; (8001954 <UART_SetConfig+0x208>)
 80017d8:	f001 f9a4 	bl	8002b24 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80017dc:	69e3      	ldr	r3, [r4, #28]
 80017de:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 80017e2:	d004      	beq.n	80017ee <UART_SetConfig+0xa2>
 80017e4:	f640 21aa 	movw	r1, #2730	; 0xaaa
 80017e8:	485a      	ldr	r0, [pc, #360]	; (8001954 <UART_SetConfig+0x208>)
 80017ea:	f001 f99b 	bl	8002b24 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017ee:	6920      	ldr	r0, [r4, #16]
 80017f0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80017f2:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017f4:	69e1      	ldr	r1, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80017f6:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017f8:	4302      	orrs	r2, r0
 80017fa:	6960      	ldr	r0, [r4, #20]
 80017fc:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80017fe:	4856      	ldr	r0, [pc, #344]	; (8001958 <UART_SetConfig+0x20c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001800:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001802:	4028      	ands	r0, r5
 8001804:	4302      	orrs	r2, r0
 8001806:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	68e0      	ldr	r0, [r4, #12]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 800180c:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800180e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001812:	4302      	orrs	r2, r0
 8001814:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001816:	6898      	ldr	r0, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001818:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800181a:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 800181e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001820:	4302      	orrs	r2, r0
 8001822:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001824:	4a4d      	ldr	r2, [pc, #308]	; (800195c <UART_SetConfig+0x210>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d111      	bne.n	800184e <UART_SetConfig+0x102>
 800182a:	4b4d      	ldr	r3, [pc, #308]	; (8001960 <UART_SetConfig+0x214>)
 800182c:	4a4d      	ldr	r2, [pc, #308]	; (8001964 <UART_SetConfig+0x218>)
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001830:	f003 0303 	and.w	r3, r3, #3

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001834:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001838:	5cd3      	ldrb	r3, [r2, r3]
 800183a:	d024      	beq.n	8001886 <UART_SetConfig+0x13a>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 800183c:	2b08      	cmp	r3, #8
 800183e:	d820      	bhi.n	8001882 <UART_SetConfig+0x136>
 8001840:	e8df f003 	tbb	[pc, r3]
 8001844:	1f6f6c5a 	.word	0x1f6f6c5a
 8001848:	1f1f1f78 	.word	0x1f1f1f78
 800184c:	7b          	.byte	0x7b
 800184d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800184e:	4a46      	ldr	r2, [pc, #280]	; (8001968 <UART_SetConfig+0x21c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d003      	beq.n	800185c <UART_SetConfig+0x110>
 8001854:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001858:	4293      	cmp	r3, r2
 800185a:	d173      	bne.n	8001944 <UART_SetConfig+0x1f8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800185c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001860:	d14a      	bne.n	80018f8 <UART_SetConfig+0x1ac>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001862:	f7ff faf7 	bl	8000e54 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001866:	6861      	ldr	r1, [r4, #4]
 8001868:	084a      	lsrs	r2, r1, #1
 800186a:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800186e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001872:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001874:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001876:	f1a3 0110 	sub.w	r1, r3, #16
 800187a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800187e:	4291      	cmp	r1, r2
 8001880:	d92f      	bls.n	80018e2 <UART_SetConfig+0x196>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 8001882:	2001      	movs	r0, #1
 8001884:	e034      	b.n	80018f0 <UART_SetConfig+0x1a4>
    switch (clocksource)
 8001886:	2b08      	cmp	r3, #8
 8001888:	d828      	bhi.n	80018dc <UART_SetConfig+0x190>
 800188a:	a201      	add	r2, pc, #4	; (adr r2, 8001890 <UART_SetConfig+0x144>)
 800188c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001890:	08001863 	.word	0x08001863
 8001894:	080018b5 	.word	0x080018b5
 8001898:	080018bb 	.word	0x080018bb
 800189c:	080018dd 	.word	0x080018dd
 80018a0:	080018cd 	.word	0x080018cd
 80018a4:	080018dd 	.word	0x080018dd
 80018a8:	080018dd 	.word	0x080018dd
 80018ac:	080018dd 	.word	0x080018dd
 80018b0:	080018d3 	.word	0x080018d3
        pclk = HAL_RCC_GetPCLK2Freq();
 80018b4:	f7ff fae6 	bl	8000e84 <HAL_RCC_GetPCLK2Freq>
 80018b8:	e7d5      	b.n	8001866 <UART_SetConfig+0x11a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80018ba:	6860      	ldr	r0, [r4, #4]
 80018bc:	0843      	lsrs	r3, r0, #1
 80018be:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80018c2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80018c6:	fbb3 f3f0 	udiv	r3, r3, r0
 80018ca:	e7d2      	b.n	8001872 <UART_SetConfig+0x126>
        pclk = HAL_RCC_GetSysClockFreq();
 80018cc:	f7ff f98a 	bl	8000be4 <HAL_RCC_GetSysClockFreq>
 80018d0:	e7c9      	b.n	8001866 <UART_SetConfig+0x11a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80018d2:	6860      	ldr	r0, [r4, #4]
 80018d4:	0843      	lsrs	r3, r0, #1
 80018d6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80018da:	e7f4      	b.n	80018c6 <UART_SetConfig+0x17a>
        ret = HAL_ERROR;
 80018dc:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80018de:	2300      	movs	r3, #0
 80018e0:	e7c9      	b.n	8001876 <UART_SetConfig+0x12a>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80018e2:	f023 020f 	bic.w	r2, r3, #15
      huart->Instance->BRR = brrtemp;
 80018e6:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80018e8:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 80018ec:	4313      	orrs	r3, r2
 80018ee:	60cb      	str	r3, [r1, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80018f4:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80018f6:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 80018f8:	f7ff faac 	bl	8000e54 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80018fc:	6862      	ldr	r2, [r4, #4]
 80018fe:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001902:	fbb3 f3f2 	udiv	r3, r3, r2
 8001906:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001908:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800190a:	f1a3 0110 	sub.w	r1, r3, #16
 800190e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001912:	4291      	cmp	r1, r2
 8001914:	d8b5      	bhi.n	8001882 <UART_SetConfig+0x136>
      huart->Instance->BRR = usartdiv;
 8001916:	6822      	ldr	r2, [r4, #0]
 8001918:	60d3      	str	r3, [r2, #12]
 800191a:	e7e9      	b.n	80018f0 <UART_SetConfig+0x1a4>
        pclk = HAL_RCC_GetPCLK2Freq();
 800191c:	f7ff fab2 	bl	8000e84 <HAL_RCC_GetPCLK2Freq>
 8001920:	e7ec      	b.n	80018fc <UART_SetConfig+0x1b0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001922:	6860      	ldr	r0, [r4, #4]
 8001924:	0843      	lsrs	r3, r0, #1
 8001926:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800192a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800192e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001932:	e7e8      	b.n	8001906 <UART_SetConfig+0x1ba>
        pclk = HAL_RCC_GetSysClockFreq();
 8001934:	f7ff f956 	bl	8000be4 <HAL_RCC_GetSysClockFreq>
 8001938:	e7e0      	b.n	80018fc <UART_SetConfig+0x1b0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800193a:	6860      	ldr	r0, [r4, #4]
 800193c:	0843      	lsrs	r3, r0, #1
 800193e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001942:	e7f4      	b.n	800192e <UART_SetConfig+0x1e2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001944:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001948:	d0c8      	beq.n	80018dc <UART_SetConfig+0x190>
        ret = HAL_ERROR;
 800194a:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800194c:	2300      	movs	r3, #0
 800194e:	e7dc      	b.n	800190a <UART_SetConfig+0x1be>
 8001950:	00895440 	.word	0x00895440
 8001954:	08002f20 	.word	0x08002f20
 8001958:	efff69f3 	.word	0xefff69f3
 800195c:	40013800 	.word	0x40013800
 8001960:	40021000 	.word	0x40021000
 8001964:	08002f1c 	.word	0x08002f1c
 8001968:	40004400 	.word	0x40004400

0800196c <UART_AdvFeatureConfig>:
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800196c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800196e:	2bff      	cmp	r3, #255	; 0xff
{
 8001970:	b510      	push	{r4, lr}
 8001972:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8001974:	d904      	bls.n	8001980 <UART_AdvFeatureConfig+0x14>
 8001976:	f640 3127 	movw	r1, #2855	; 0xb27
 800197a:	485c      	ldr	r0, [pc, #368]	; (8001aec <UART_AdvFeatureConfig+0x180>)
 800197c:	f001 f8d2 	bl	8002b24 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001982:	07d8      	lsls	r0, r3, #31
 8001984:	d50f      	bpl.n	80019a6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8001986:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001988:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800198c:	d004      	beq.n	8001998 <UART_AdvFeatureConfig+0x2c>
 800198e:	f640 312c 	movw	r1, #2860	; 0xb2c
 8001992:	4856      	ldr	r0, [pc, #344]	; (8001aec <UART_AdvFeatureConfig+0x180>)
 8001994:	f001 f8c6 	bl	8002b24 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001998:	6822      	ldr	r2, [r4, #0]
 800199a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800199c:	6853      	ldr	r3, [r2, #4]
 800199e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80019a2:	430b      	orrs	r3, r1
 80019a4:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80019a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019a8:	0799      	lsls	r1, r3, #30
 80019aa:	d50f      	bpl.n	80019cc <UART_AdvFeatureConfig+0x60>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80019ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019ae:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 80019b2:	d004      	beq.n	80019be <UART_AdvFeatureConfig+0x52>
 80019b4:	f640 3133 	movw	r1, #2867	; 0xb33
 80019b8:	484c      	ldr	r0, [pc, #304]	; (8001aec <UART_AdvFeatureConfig+0x180>)
 80019ba:	f001 f8b3 	bl	8002b24 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80019be:	6822      	ldr	r2, [r4, #0]
 80019c0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80019c2:	6853      	ldr	r3, [r2, #4]
 80019c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c8:	430b      	orrs	r3, r1
 80019ca:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80019cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019ce:	075a      	lsls	r2, r3, #29
 80019d0:	d50f      	bpl.n	80019f2 <UART_AdvFeatureConfig+0x86>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80019d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019d4:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 80019d8:	d004      	beq.n	80019e4 <UART_AdvFeatureConfig+0x78>
 80019da:	f640 313a 	movw	r1, #2874	; 0xb3a
 80019de:	4843      	ldr	r0, [pc, #268]	; (8001aec <UART_AdvFeatureConfig+0x180>)
 80019e0:	f001 f8a0 	bl	8002b24 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80019e4:	6822      	ldr	r2, [r4, #0]
 80019e6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80019e8:	6853      	ldr	r3, [r2, #4]
 80019ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ee:	430b      	orrs	r3, r1
 80019f0:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80019f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019f4:	071b      	lsls	r3, r3, #28
 80019f6:	d50f      	bpl.n	8001a18 <UART_AdvFeatureConfig+0xac>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80019f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80019fa:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 80019fe:	d004      	beq.n	8001a0a <UART_AdvFeatureConfig+0x9e>
 8001a00:	f640 3141 	movw	r1, #2881	; 0xb41
 8001a04:	4839      	ldr	r0, [pc, #228]	; (8001aec <UART_AdvFeatureConfig+0x180>)
 8001a06:	f001 f88d 	bl	8002b24 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001a0a:	6822      	ldr	r2, [r4, #0]
 8001a0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a0e:	6853      	ldr	r3, [r2, #4]
 8001a10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001a14:	430b      	orrs	r3, r1
 8001a16:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001a18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a1a:	06d8      	lsls	r0, r3, #27
 8001a1c:	d50f      	bpl.n	8001a3e <UART_AdvFeatureConfig+0xd2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8001a1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a20:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8001a24:	d004      	beq.n	8001a30 <UART_AdvFeatureConfig+0xc4>
 8001a26:	f640 3148 	movw	r1, #2888	; 0xb48
 8001a2a:	4830      	ldr	r0, [pc, #192]	; (8001aec <UART_AdvFeatureConfig+0x180>)
 8001a2c:	f001 f87a 	bl	8002b24 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001a30:	6822      	ldr	r2, [r4, #0]
 8001a32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001a34:	6893      	ldr	r3, [r2, #8]
 8001a36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a3a:	430b      	orrs	r3, r1
 8001a3c:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001a3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a40:	0699      	lsls	r1, r3, #26
 8001a42:	d50f      	bpl.n	8001a64 <UART_AdvFeatureConfig+0xf8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8001a44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a46:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8001a4a:	d004      	beq.n	8001a56 <UART_AdvFeatureConfig+0xea>
 8001a4c:	f640 314f 	movw	r1, #2895	; 0xb4f
 8001a50:	4826      	ldr	r0, [pc, #152]	; (8001aec <UART_AdvFeatureConfig+0x180>)
 8001a52:	f001 f867 	bl	8002b24 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001a56:	6822      	ldr	r2, [r4, #0]
 8001a58:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001a5a:	6893      	ldr	r3, [r2, #8]
 8001a5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a60:	430b      	orrs	r3, r1
 8001a62:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001a64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a66:	065a      	lsls	r2, r3, #25
 8001a68:	d52b      	bpl.n	8001ac2 <UART_AdvFeatureConfig+0x156>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8001a6a:	6822      	ldr	r2, [r4, #0]
 8001a6c:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <UART_AdvFeatureConfig+0x184>)
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d004      	beq.n	8001a7c <UART_AdvFeatureConfig+0x110>
 8001a72:	f640 3156 	movw	r1, #2902	; 0xb56
 8001a76:	481d      	ldr	r0, [pc, #116]	; (8001aec <UART_AdvFeatureConfig+0x180>)
 8001a78:	f001 f854 	bl	8002b24 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8001a7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a7e:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 8001a82:	d004      	beq.n	8001a8e <UART_AdvFeatureConfig+0x122>
 8001a84:	f640 3157 	movw	r1, #2903	; 0xb57
 8001a88:	4818      	ldr	r0, [pc, #96]	; (8001aec <UART_AdvFeatureConfig+0x180>)
 8001a8a:	f001 f84b 	bl	8002b24 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001a8e:	6821      	ldr	r1, [r4, #0]
 8001a90:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a92:	684b      	ldr	r3, [r1, #4]
 8001a94:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a98:	4313      	orrs	r3, r2
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001a9a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001a9e:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001aa0:	d10f      	bne.n	8001ac2 <UART_AdvFeatureConfig+0x156>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8001aa2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001aa4:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8001aa8:	d004      	beq.n	8001ab4 <UART_AdvFeatureConfig+0x148>
 8001aaa:	f640 315c 	movw	r1, #2908	; 0xb5c
 8001aae:	480f      	ldr	r0, [pc, #60]	; (8001aec <UART_AdvFeatureConfig+0x180>)
 8001ab0:	f001 f838 	bl	8002b24 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001ab4:	6822      	ldr	r2, [r4, #0]
 8001ab6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001ab8:	6853      	ldr	r3, [r2, #4]
 8001aba:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001abe:	430b      	orrs	r3, r1
 8001ac0:	6053      	str	r3, [r2, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001ac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ac4:	061b      	lsls	r3, r3, #24
 8001ac6:	d50f      	bpl.n	8001ae8 <UART_AdvFeatureConfig+0x17c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8001ac8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001aca:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8001ace:	d004      	beq.n	8001ada <UART_AdvFeatureConfig+0x16e>
 8001ad0:	f640 3164 	movw	r1, #2916	; 0xb64
 8001ad4:	4805      	ldr	r0, [pc, #20]	; (8001aec <UART_AdvFeatureConfig+0x180>)
 8001ad6:	f001 f825 	bl	8002b24 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001ada:	6822      	ldr	r2, [r4, #0]
 8001adc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001ade:	6853      	ldr	r3, [r2, #4]
 8001ae0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	6053      	str	r3, [r2, #4]
 8001ae8:	bd10      	pop	{r4, pc}
 8001aea:	bf00      	nop
 8001aec:	08002f20 	.word	0x08002f20
 8001af0:	40013800 	.word	0x40013800

08001af4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001af8:	9d06      	ldr	r5, [sp, #24]
 8001afa:	4604      	mov	r4, r0
 8001afc:	460f      	mov	r7, r1
 8001afe:	4616      	mov	r6, r2
 8001b00:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b02:	6821      	ldr	r1, [r4, #0]
 8001b04:	69ca      	ldr	r2, [r1, #28]
 8001b06:	ea37 0302 	bics.w	r3, r7, r2
 8001b0a:	bf0c      	ite	eq
 8001b0c:	2201      	moveq	r2, #1
 8001b0e:	2200      	movne	r2, #0
 8001b10:	42b2      	cmp	r2, r6
 8001b12:	d002      	beq.n	8001b1a <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8001b14:	2000      	movs	r0, #0
}
 8001b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001b1a:	1c68      	adds	r0, r5, #1
 8001b1c:	d0f2      	beq.n	8001b04 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b1e:	f7fe fb75 	bl	800020c <HAL_GetTick>
 8001b22:	eba0 0008 	sub.w	r0, r0, r8
 8001b26:	4285      	cmp	r5, r0
 8001b28:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b2a:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b2c:	d300      	bcc.n	8001b30 <UART_WaitOnFlagUntilTimeout+0x3c>
 8001b2e:	b97d      	cbnz	r5, 8001b50 <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001b34:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b36:	6883      	ldr	r3, [r0, #8]
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001b3e:	2320      	movs	r3, #32
 8001b40:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001b42:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8001b44:	2300      	movs	r3, #0
 8001b46:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 8001b4a:	2003      	movs	r0, #3
 8001b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001b50:	075a      	lsls	r2, r3, #29
 8001b52:	d5d6      	bpl.n	8001b02 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001b54:	69c3      	ldr	r3, [r0, #28]
 8001b56:	051b      	lsls	r3, r3, #20
 8001b58:	d5d3      	bpl.n	8001b02 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b5e:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b60:	6803      	ldr	r3, [r0, #0]
 8001b62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001b66:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b68:	6883      	ldr	r3, [r0, #8]
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8001b70:	2320      	movs	r3, #32
 8001b72:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001b74:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001b76:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001b78:	e7e4      	b.n	8001b44 <UART_WaitOnFlagUntilTimeout+0x50>

08001b7a <UART_CheckIdleState>:
{
 8001b7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b7c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b7e:	2600      	movs	r6, #0
 8001b80:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001b82:	f7fe fb43 	bl	800020c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001b86:	6823      	ldr	r3, [r4, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001b8c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001b8e:	d415      	bmi.n	8001bbc <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	075b      	lsls	r3, r3, #29
 8001b96:	d50a      	bpl.n	8001bae <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	462b      	mov	r3, r5
 8001ba2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	f7ff ffa4 	bl	8001af4 <UART_WaitOnFlagUntilTimeout>
 8001bac:	b990      	cbnz	r0, 8001bd4 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8001bae:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001bb0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001bb2:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8001bb4:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001bb8:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8001bba:	e00c      	b.n	8001bd6 <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001bbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	4632      	mov	r2, r6
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001bca:	4620      	mov	r0, r4
 8001bcc:	f7ff ff92 	bl	8001af4 <UART_WaitOnFlagUntilTimeout>
 8001bd0:	2800      	cmp	r0, #0
 8001bd2:	d0dd      	beq.n	8001b90 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001bd4:	2003      	movs	r0, #3
}
 8001bd6:	b002      	add	sp, #8
 8001bd8:	bd70      	pop	{r4, r5, r6, pc}
	...

08001bdc <HAL_UART_Init>:
{
 8001bdc:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001bde:	4604      	mov	r4, r0
 8001be0:	2800      	cmp	r0, #0
 8001be2:	d049      	beq.n	8001c78 <HAL_UART_Init+0x9c>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8001be4:	6981      	ldr	r1, [r0, #24]
 8001be6:	6803      	ldr	r3, [r0, #0]
 8001be8:	4a24      	ldr	r2, [pc, #144]	; (8001c7c <HAL_UART_Init+0xa0>)
 8001bea:	2900      	cmp	r1, #0
 8001bec:	d038      	beq.n	8001c60 <HAL_UART_Init+0x84>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00c      	beq.n	8001c0c <HAL_UART_Init+0x30>
 8001bf2:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d008      	beq.n	8001c0c <HAL_UART_Init+0x30>
 8001bfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d004      	beq.n	8001c0c <HAL_UART_Init+0x30>
 8001c02:	f44f 7195 	mov.w	r1, #298	; 0x12a
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8001c06:	481e      	ldr	r0, [pc, #120]	; (8001c80 <HAL_UART_Init+0xa4>)
 8001c08:	f000 ff8c 	bl	8002b24 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001c0c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001c0e:	b923      	cbnz	r3, 8001c1a <HAL_UART_Init+0x3e>
    huart->Lock = HAL_UNLOCKED;
 8001c10:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001c14:	4620      	mov	r0, r4
 8001c16:	f000 ffe3 	bl	8002be0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001c1a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001c1c:	2324      	movs	r3, #36	; 0x24
 8001c1e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001c20:	6813      	ldr	r3, [r2, #0]
 8001c22:	f023 0301 	bic.w	r3, r3, #1
 8001c26:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f7ff fd8f 	bl	800174c <UART_SetConfig>
 8001c2e:	2801      	cmp	r0, #1
 8001c30:	d022      	beq.n	8001c78 <HAL_UART_Init+0x9c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c34:	b113      	cbz	r3, 8001c3c <HAL_UART_Init+0x60>
    UART_AdvFeatureConfig(huart);
 8001c36:	4620      	mov	r0, r4
 8001c38:	f7ff fe98 	bl	800196c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c3c:	6823      	ldr	r3, [r4, #0]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c4c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001c54:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001c56:	601a      	str	r2, [r3, #0]
}
 8001c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001c5c:	f7ff bf8d 	b.w	8001b7a <UART_CheckIdleState>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d0d3      	beq.n	8001c0c <HAL_UART_Init+0x30>
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <HAL_UART_Init+0xa8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d0d0      	beq.n	8001c0c <HAL_UART_Init+0x30>
 8001c6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d0cc      	beq.n	8001c0c <HAL_UART_Init+0x30>
 8001c72:	f240 112f 	movw	r1, #303	; 0x12f
 8001c76:	e7c6      	b.n	8001c06 <HAL_UART_Init+0x2a>
}
 8001c78:	2001      	movs	r0, #1
 8001c7a:	bd10      	pop	{r4, pc}
 8001c7c:	40013800 	.word	0x40013800
 8001c80:	08002f20 	.word	0x08002f20
 8001c84:	40004400 	.word	0x40004400

08001c88 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001c88:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001c8a:	f000 fca9 	bl	80025e0 <vTaskStartScheduler>
  
  return osOK;
}
 8001c8e:	2000      	movs	r0, #0
 8001c90:	bd08      	pop	{r3, pc}

08001c92 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001c92:	b570      	push	{r4, r5, r6, lr}
 8001c94:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001c96:	6946      	ldr	r6, [r0, #20]
 8001c98:	692a      	ldr	r2, [r5, #16]
 8001c9a:	6840      	ldr	r0, [r0, #4]
 8001c9c:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001ca6:	b176      	cbz	r6, 8001cc6 <osThreadCreate+0x34>
 8001ca8:	69ad      	ldr	r5, [r5, #24]
 8001caa:	b165      	cbz	r5, 8001cc6 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8001cac:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001cae:	bf14      	ite	ne
 8001cb0:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001cb2:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001cb4:	9502      	str	r5, [sp, #8]
 8001cb6:	e88d 0050 	stmia.w	sp, {r4, r6}
 8001cba:	f000 fc2d 	bl	8002518 <xTaskCreateStatic>
 8001cbe:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001cc0:	9805      	ldr	r0, [sp, #20]
}
 8001cc2:	b006      	add	sp, #24
 8001cc4:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8001cc6:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001cc8:	bf14      	ite	ne
 8001cca:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001ccc:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001cce:	ad05      	add	r5, sp, #20
 8001cd0:	b292      	uxth	r2, r2
 8001cd2:	e88d 0030 	stmia.w	sp, {r4, r5}
 8001cd6:	f000 fc56 	bl	8002586 <xTaskCreate>
 8001cda:	2801      	cmp	r0, #1
 8001cdc:	d0f0      	beq.n	8001cc0 <osThreadCreate+0x2e>
      return NULL;
 8001cde:	2000      	movs	r0, #0
 8001ce0:	e7ef      	b.n	8001cc2 <osThreadCreate+0x30>

08001ce2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001ce2:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001ce4:	2800      	cmp	r0, #0
 8001ce6:	bf08      	it	eq
 8001ce8:	2001      	moveq	r0, #1
 8001cea:	f000 fdc1 	bl	8002870 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001cee:	2000      	movs	r0, #0
 8001cf0:	bd08      	pop	{r3, pc}

08001cf2 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cf2:	f100 0308 	add.w	r3, r0, #8
 8001cf6:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001cf8:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cfc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cfe:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d00:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d02:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d04:	6003      	str	r3, [r0, #0]
 8001d06:	4770      	bx	lr

08001d08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	6103      	str	r3, [r0, #16]
 8001d0c:	4770      	bx	lr

08001d0e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001d0e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001d10:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001d1a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001d1c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d1e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001d20:	3301      	adds	r3, #1
 8001d22:	6003      	str	r3, [r0, #0]
 8001d24:	4770      	bx	lr

08001d26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d26:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001d28:	1c53      	adds	r3, r2, #1
{
 8001d2a:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001d2c:	d10a      	bne.n	8001d44 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001d2e:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d34:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d36:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d38:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001d3a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d3c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001d3e:	3301      	adds	r3, #1
 8001d40:	6003      	str	r3, [r0, #0]
 8001d42:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d44:	f100 0308 	add.w	r3, r0, #8
 8001d48:	685c      	ldr	r4, [r3, #4]
 8001d4a:	6825      	ldr	r5, [r4, #0]
 8001d4c:	42aa      	cmp	r2, r5
 8001d4e:	d3ef      	bcc.n	8001d30 <vListInsert+0xa>
 8001d50:	4623      	mov	r3, r4
 8001d52:	e7f9      	b.n	8001d48 <vListInsert+0x22>

08001d54 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d54:	6841      	ldr	r1, [r0, #4]
 8001d56:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001d58:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d5a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d5c:	6882      	ldr	r2, [r0, #8]
 8001d5e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d60:	6859      	ldr	r1, [r3, #4]
 8001d62:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d64:	bf08      	it	eq
 8001d66:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001d68:	2200      	movs	r2, #0
 8001d6a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	3a01      	subs	r2, #1
 8001d70:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d72:	6818      	ldr	r0, [r3, #0]
}
 8001d74:	4770      	bx	lr
	...

08001d78 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001d78:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <prvTaskExitError+0x3c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	3301      	adds	r3, #1
 8001d84:	d008      	beq.n	8001d98 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d8a:	f383 8811 	msr	BASEPRI, r3
 8001d8e:	f3bf 8f6f 	isb	sy
 8001d92:	f3bf 8f4f 	dsb	sy
 8001d96:	e7fe      	b.n	8001d96 <prvTaskExitError+0x1e>
 8001d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d9c:	f383 8811 	msr	BASEPRI, r3
 8001da0:	f3bf 8f6f 	isb	sy
 8001da4:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001da8:	9b01      	ldr	r3, [sp, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0fc      	beq.n	8001da8 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001dae:	b002      	add	sp, #8
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	20000008 	.word	0x20000008

08001db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001db8:	4808      	ldr	r0, [pc, #32]	; (8001ddc <prvPortStartFirstTask+0x24>)
 8001dba:	6800      	ldr	r0, [r0, #0]
 8001dbc:	6800      	ldr	r0, [r0, #0]
 8001dbe:	f380 8808 	msr	MSP, r0
 8001dc2:	f04f 0000 	mov.w	r0, #0
 8001dc6:	f380 8814 	msr	CONTROL, r0
 8001dca:	b662      	cpsie	i
 8001dcc:	b661      	cpsie	f
 8001dce:	f3bf 8f4f 	dsb	sy
 8001dd2:	f3bf 8f6f 	isb	sy
 8001dd6:	df00      	svc	0
 8001dd8:	bf00      	nop
 8001dda:	0000      	.short	0x0000
 8001ddc:	e000ed08 	.word	0xe000ed08

08001de0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001de0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001df0 <vPortEnableVFP+0x10>
 8001de4:	6801      	ldr	r1, [r0, #0]
 8001de6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001dea:	6001      	str	r1, [r0, #0]
 8001dec:	4770      	bx	lr
 8001dee:	0000      	.short	0x0000
 8001df0:	e000ed88 	.word	0xe000ed88

08001df4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001df4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001df8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001dfc:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <pxPortInitialiseStack+0x28>)
 8001dfe:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001e02:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001e06:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001e0a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001e0e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001e12:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001e16:	3844      	subs	r0, #68	; 0x44
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	08001d79 	.word	0x08001d79

08001e20 <SVC_Handler>:
	__asm volatile (
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <pxCurrentTCBConst2>)
 8001e22:	6819      	ldr	r1, [r3, #0]
 8001e24:	6808      	ldr	r0, [r1, #0]
 8001e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e2a:	f380 8809 	msr	PSP, r0
 8001e2e:	f3bf 8f6f 	isb	sy
 8001e32:	f04f 0000 	mov.w	r0, #0
 8001e36:	f380 8811 	msr	BASEPRI, r0
 8001e3a:	4770      	bx	lr
 8001e3c:	f3af 8000 	nop.w

08001e40 <pxCurrentTCBConst2>:
 8001e40:	20000c4c 	.word	0x20000c4c

08001e44 <vPortEnterCritical>:
 8001e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e48:	f383 8811 	msr	BASEPRI, r3
 8001e4c:	f3bf 8f6f 	isb	sy
 8001e50:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001e54:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <vPortEnterCritical+0x3c>)
 8001e56:	6813      	ldr	r3, [r2, #0]
 8001e58:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8001e5a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8001e5c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8001e5e:	d10d      	bne.n	8001e7c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001e60:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <vPortEnterCritical+0x40>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001e68:	d008      	beq.n	8001e7c <vPortEnterCritical+0x38>
 8001e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e6e:	f383 8811 	msr	BASEPRI, r3
 8001e72:	f3bf 8f6f 	isb	sy
 8001e76:	f3bf 8f4f 	dsb	sy
 8001e7a:	e7fe      	b.n	8001e7a <vPortEnterCritical+0x36>
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20000008 	.word	0x20000008
 8001e84:	e000ed04 	.word	0xe000ed04

08001e88 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001e88:	4a08      	ldr	r2, [pc, #32]	; (8001eac <vPortExitCritical+0x24>)
 8001e8a:	6813      	ldr	r3, [r2, #0]
 8001e8c:	b943      	cbnz	r3, 8001ea0 <vPortExitCritical+0x18>
 8001e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e92:	f383 8811 	msr	BASEPRI, r3
 8001e96:	f3bf 8f6f 	isb	sy
 8001e9a:	f3bf 8f4f 	dsb	sy
 8001e9e:	e7fe      	b.n	8001e9e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001ea4:	b90b      	cbnz	r3, 8001eaa <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001ea6:	f383 8811 	msr	BASEPRI, r3
 8001eaa:	4770      	bx	lr
 8001eac:	20000008 	.word	0x20000008

08001eb0 <PendSV_Handler>:
	__asm volatile
 8001eb0:	f3ef 8009 	mrs	r0, PSP
 8001eb4:	f3bf 8f6f 	isb	sy
 8001eb8:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <pxCurrentTCBConst>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	f01e 0f10 	tst.w	lr, #16
 8001ec0:	bf08      	it	eq
 8001ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eca:	6010      	str	r0, [r2, #0]
 8001ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001ed0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001ed4:	f380 8811 	msr	BASEPRI, r0
 8001ed8:	f3bf 8f4f 	dsb	sy
 8001edc:	f3bf 8f6f 	isb	sy
 8001ee0:	f000 fcea 	bl	80028b8 <vTaskSwitchContext>
 8001ee4:	f04f 0000 	mov.w	r0, #0
 8001ee8:	f380 8811 	msr	BASEPRI, r0
 8001eec:	bc09      	pop	{r0, r3}
 8001eee:	6819      	ldr	r1, [r3, #0]
 8001ef0:	6808      	ldr	r0, [r1, #0]
 8001ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ef6:	f01e 0f10 	tst.w	lr, #16
 8001efa:	bf08      	it	eq
 8001efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001f00:	f380 8809 	msr	PSP, r0
 8001f04:	f3bf 8f6f 	isb	sy
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	f3af 8000 	nop.w

08001f10 <pxCurrentTCBConst>:
 8001f10:	20000c4c 	.word	0x20000c4c

08001f14 <SysTick_Handler>:
{
 8001f14:	b508      	push	{r3, lr}
	__asm volatile
 8001f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f1a:	f383 8811 	msr	BASEPRI, r3
 8001f1e:	f3bf 8f6f 	isb	sy
 8001f22:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001f26:	f000 fb99 	bl	800265c <xTaskIncrementTick>
 8001f2a:	b118      	cbz	r0, 8001f34 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001f2c:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <SysTick_Handler+0x28>)
 8001f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f32:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001f34:	2300      	movs	r3, #0
 8001f36:	f383 8811 	msr	BASEPRI, r3
 8001f3a:	bd08      	pop	{r3, pc}
 8001f3c:	e000ed04 	.word	0xe000ed04

08001f40 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001f40:	4a08      	ldr	r2, [pc, #32]	; (8001f64 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001f42:	4909      	ldr	r1, [pc, #36]	; (8001f68 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001f48:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <vPortSetupTimerInterrupt+0x2c>)
 8001f4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f56:	4906      	ldr	r1, [pc, #24]	; (8001f70 <vPortSetupTimerInterrupt+0x30>)
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001f5c:	2307      	movs	r3, #7
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000e010 	.word	0xe000e010
 8001f68:	e000e018 	.word	0xe000e018
 8001f6c:	2000000c 	.word	0x2000000c
 8001f70:	e000e014 	.word	0xe000e014

08001f74 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001f74:	4b39      	ldr	r3, [pc, #228]	; (800205c <xPortStartScheduler+0xe8>)
 8001f76:	4a3a      	ldr	r2, [pc, #232]	; (8002060 <xPortStartScheduler+0xec>)
{
 8001f78:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001f7a:	6819      	ldr	r1, [r3, #0]
 8001f7c:	4291      	cmp	r1, r2
 8001f7e:	d108      	bne.n	8001f92 <xPortStartScheduler+0x1e>
	__asm volatile
 8001f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f84:	f383 8811 	msr	BASEPRI, r3
 8001f88:	f3bf 8f6f 	isb	sy
 8001f8c:	f3bf 8f4f 	dsb	sy
 8001f90:	e7fe      	b.n	8001f90 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b33      	ldr	r3, [pc, #204]	; (8002064 <xPortStartScheduler+0xf0>)
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d108      	bne.n	8001fac <xPortStartScheduler+0x38>
 8001f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f9e:	f383 8811 	msr	BASEPRI, r3
 8001fa2:	f3bf 8f6f 	isb	sy
 8001fa6:	f3bf 8f4f 	dsb	sy
 8001faa:	e7fe      	b.n	8001faa <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001fac:	4b2e      	ldr	r3, [pc, #184]	; (8002068 <xPortStartScheduler+0xf4>)
 8001fae:	781a      	ldrb	r2, [r3, #0]
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001fb4:	22ff      	movs	r2, #255	; 0xff
 8001fb6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001fb8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001fba:	4a2c      	ldr	r2, [pc, #176]	; (800206c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001fc2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001fc6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001fca:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001fcc:	4b28      	ldr	r3, [pc, #160]	; (8002070 <xPortStartScheduler+0xfc>)
 8001fce:	2207      	movs	r2, #7
 8001fd0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001fd8:	0600      	lsls	r0, r0, #24
 8001fda:	f102 34ff 	add.w	r4, r2, #4294967295
 8001fde:	d40d      	bmi.n	8001ffc <xPortStartScheduler+0x88>
 8001fe0:	b101      	cbz	r1, 8001fe4 <xPortStartScheduler+0x70>
 8001fe2:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	2a03      	cmp	r2, #3
 8001fe8:	d011      	beq.n	800200e <xPortStartScheduler+0x9a>
 8001fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fee:	f383 8811 	msr	BASEPRI, r3
 8001ff2:	f3bf 8f6f 	isb	sy
 8001ff6:	f3bf 8f4f 	dsb	sy
 8001ffa:	e7fe      	b.n	8001ffa <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001ffc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002000:	0052      	lsls	r2, r2, #1
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	f88d 2003 	strb.w	r2, [sp, #3]
 8002008:	2101      	movs	r1, #1
 800200a:	4622      	mov	r2, r4
 800200c:	e7e2      	b.n	8001fd4 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800200e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002010:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002014:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002016:	9b01      	ldr	r3, [sp, #4]
 8002018:	4a13      	ldr	r2, [pc, #76]	; (8002068 <xPortStartScheduler+0xf4>)
 800201a:	b2db      	uxtb	r3, r3
 800201c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <xPortStartScheduler+0x100>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002026:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800202e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002030:	f7ff ff86 	bl	8001f40 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002034:	4b10      	ldr	r3, [pc, #64]	; (8002078 <xPortStartScheduler+0x104>)
 8002036:	2400      	movs	r4, #0
 8002038:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800203a:	f7ff fed1 	bl	8001de0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800203e:	4a0f      	ldr	r2, [pc, #60]	; (800207c <xPortStartScheduler+0x108>)
 8002040:	6813      	ldr	r3, [r2, #0]
 8002042:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002046:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002048:	f7ff feb6 	bl	8001db8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800204c:	f000 fc34 	bl	80028b8 <vTaskSwitchContext>
	prvTaskExitError();
 8002050:	f7ff fe92 	bl	8001d78 <prvTaskExitError>
}
 8002054:	4620      	mov	r0, r4
 8002056:	b002      	add	sp, #8
 8002058:	bd10      	pop	{r4, pc}
 800205a:	bf00      	nop
 800205c:	e000ed00 	.word	0xe000ed00
 8002060:	410fc271 	.word	0x410fc271
 8002064:	410fc270 	.word	0x410fc270
 8002068:	e000e400 	.word	0xe000e400
 800206c:	2000002c 	.word	0x2000002c
 8002070:	20000030 	.word	0x20000030
 8002074:	e000ed20 	.word	0xe000ed20
 8002078:	20000008 	.word	0x20000008
 800207c:	e000ef34 	.word	0xe000ef34

08002080 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002080:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002082:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <prvInsertBlockIntoFreeList+0x40>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	4282      	cmp	r2, r0
 8002088:	d318      	bcc.n	80020bc <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800208a:	685c      	ldr	r4, [r3, #4]
 800208c:	1919      	adds	r1, r3, r4
 800208e:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002090:	bf01      	itttt	eq
 8002092:	6841      	ldreq	r1, [r0, #4]
 8002094:	4618      	moveq	r0, r3
 8002096:	1909      	addeq	r1, r1, r4
 8002098:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800209a:	6844      	ldr	r4, [r0, #4]
 800209c:	1901      	adds	r1, r0, r4
 800209e:	428a      	cmp	r2, r1
 80020a0:	d107      	bne.n	80020b2 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80020a2:	4908      	ldr	r1, [pc, #32]	; (80020c4 <prvInsertBlockIntoFreeList+0x44>)
 80020a4:	6809      	ldr	r1, [r1, #0]
 80020a6:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80020a8:	bf1f      	itttt	ne
 80020aa:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80020ac:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80020ae:	1909      	addne	r1, r1, r4
 80020b0:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80020b2:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80020b4:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80020b6:	bf18      	it	ne
 80020b8:	6018      	strne	r0, [r3, #0]
 80020ba:	bd10      	pop	{r4, pc}
 80020bc:	4613      	mov	r3, r2
 80020be:	e7e1      	b.n	8002084 <prvInsertBlockIntoFreeList+0x4>
 80020c0:	20000c44 	.word	0x20000c44
 80020c4:	20000034 	.word	0x20000034

080020c8 <pvPortMalloc>:
{
 80020c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020cc:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80020ce:	f000 fabd 	bl	800264c <vTaskSuspendAll>
		if( pxEnd == NULL )
 80020d2:	493e      	ldr	r1, [pc, #248]	; (80021cc <pvPortMalloc+0x104>)
 80020d4:	4d3e      	ldr	r5, [pc, #248]	; (80021d0 <pvPortMalloc+0x108>)
 80020d6:	680b      	ldr	r3, [r1, #0]
 80020d8:	bb0b      	cbnz	r3, 800211e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80020da:	4a3e      	ldr	r2, [pc, #248]	; (80021d4 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80020dc:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80020de:	bf1f      	itttt	ne
 80020e0:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80020e2:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80020e6:	f502 6340 	addne.w	r3, r2, #3072	; 0xc00
 80020ea:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80020ec:	bf14      	ite	ne
 80020ee:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80020f0:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80020f4:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80020f6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80020f8:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80020fc:	4e36      	ldr	r6, [pc, #216]	; (80021d8 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 80020fe:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002100:	2000      	movs	r0, #0
 8002102:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002104:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8002106:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002108:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800210a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800210c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800210e:	4b33      	ldr	r3, [pc, #204]	; (80021dc <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002110:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002112:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002114:	4b32      	ldr	r3, [pc, #200]	; (80021e0 <pvPortMalloc+0x118>)
 8002116:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002118:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800211c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800211e:	682f      	ldr	r7, [r5, #0]
 8002120:	4227      	tst	r7, r4
 8002122:	d116      	bne.n	8002152 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8002124:	2c00      	cmp	r4, #0
 8002126:	d041      	beq.n	80021ac <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8002128:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800212c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800212e:	bf1c      	itt	ne
 8002130:	f023 0307 	bicne.w	r3, r3, #7
 8002134:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002136:	b163      	cbz	r3, 8002152 <pvPortMalloc+0x8a>
 8002138:	4a29      	ldr	r2, [pc, #164]	; (80021e0 <pvPortMalloc+0x118>)
 800213a:	6816      	ldr	r6, [r2, #0]
 800213c:	42b3      	cmp	r3, r6
 800213e:	4690      	mov	r8, r2
 8002140:	d807      	bhi.n	8002152 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8002142:	4a25      	ldr	r2, [pc, #148]	; (80021d8 <pvPortMalloc+0x110>)
 8002144:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002146:	6868      	ldr	r0, [r5, #4]
 8002148:	4283      	cmp	r3, r0
 800214a:	d804      	bhi.n	8002156 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 800214c:	6809      	ldr	r1, [r1, #0]
 800214e:	428d      	cmp	r5, r1
 8002150:	d107      	bne.n	8002162 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8002152:	2400      	movs	r4, #0
 8002154:	e02a      	b.n	80021ac <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002156:	682c      	ldr	r4, [r5, #0]
 8002158:	2c00      	cmp	r4, #0
 800215a:	d0f7      	beq.n	800214c <pvPortMalloc+0x84>
 800215c:	462a      	mov	r2, r5
 800215e:	4625      	mov	r5, r4
 8002160:	e7f1      	b.n	8002146 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002162:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002164:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002166:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002168:	1ac2      	subs	r2, r0, r3
 800216a:	2a10      	cmp	r2, #16
 800216c:	d90f      	bls.n	800218e <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800216e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002170:	0741      	lsls	r1, r0, #29
 8002172:	d008      	beq.n	8002186 <pvPortMalloc+0xbe>
 8002174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002178:	f383 8811 	msr	BASEPRI, r3
 800217c:	f3bf 8f6f 	isb	sy
 8002180:	f3bf 8f4f 	dsb	sy
 8002184:	e7fe      	b.n	8002184 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002186:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002188:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800218a:	f7ff ff79 	bl	8002080 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800218e:	4913      	ldr	r1, [pc, #76]	; (80021dc <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002190:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002192:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002194:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002196:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002198:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800219a:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800219e:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80021a2:	bf38      	it	cc
 80021a4:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80021a6:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80021a8:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80021aa:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80021ac:	f000 fae8 	bl	8002780 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80021b0:	0763      	lsls	r3, r4, #29
 80021b2:	d008      	beq.n	80021c6 <pvPortMalloc+0xfe>
 80021b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b8:	f383 8811 	msr	BASEPRI, r3
 80021bc:	f3bf 8f6f 	isb	sy
 80021c0:	f3bf 8f4f 	dsb	sy
 80021c4:	e7fe      	b.n	80021c4 <pvPortMalloc+0xfc>
}
 80021c6:	4620      	mov	r0, r4
 80021c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021cc:	20000034 	.word	0x20000034
 80021d0:	20000c38 	.word	0x20000c38
 80021d4:	20000038 	.word	0x20000038
 80021d8:	20000c44 	.word	0x20000c44
 80021dc:	20000c40 	.word	0x20000c40
 80021e0:	20000c3c 	.word	0x20000c3c

080021e4 <vPortFree>:
{
 80021e4:	b510      	push	{r4, lr}
	if( pv != NULL )
 80021e6:	4604      	mov	r4, r0
 80021e8:	b370      	cbz	r0, 8002248 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80021ea:	4a18      	ldr	r2, [pc, #96]	; (800224c <vPortFree+0x68>)
 80021ec:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	4213      	tst	r3, r2
 80021f4:	d108      	bne.n	8002208 <vPortFree+0x24>
 80021f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021fa:	f383 8811 	msr	BASEPRI, r3
 80021fe:	f3bf 8f6f 	isb	sy
 8002202:	f3bf 8f4f 	dsb	sy
 8002206:	e7fe      	b.n	8002206 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002208:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800220c:	b141      	cbz	r1, 8002220 <vPortFree+0x3c>
 800220e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002212:	f383 8811 	msr	BASEPRI, r3
 8002216:	f3bf 8f6f 	isb	sy
 800221a:	f3bf 8f4f 	dsb	sy
 800221e:	e7fe      	b.n	800221e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002220:	ea23 0302 	bic.w	r3, r3, r2
 8002224:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002228:	f000 fa10 	bl	800264c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800222c:	4a08      	ldr	r2, [pc, #32]	; (8002250 <vPortFree+0x6c>)
 800222e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002232:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002234:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002238:	440b      	add	r3, r1
 800223a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800223c:	f7ff ff20 	bl	8002080 <prvInsertBlockIntoFreeList>
}
 8002240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002244:	f000 ba9c 	b.w	8002780 <xTaskResumeAll>
 8002248:	bd10      	pop	{r4, pc}
 800224a:	bf00      	nop
 800224c:	20000c38 	.word	0x20000c38
 8002250:	20000c3c 	.word	0x20000c3c

08002254 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002258:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800225a:	f7ff fdf3 	bl	8001e44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800225e:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8002260:	4c2d      	ldr	r4, [pc, #180]	; (8002318 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4f2d      	ldr	r7, [pc, #180]	; (800231c <prvAddNewTaskToReadyList+0xc8>)
 8002266:	3201      	adds	r2, #1
 8002268:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800226a:	6825      	ldr	r5, [r4, #0]
 800226c:	2d00      	cmp	r5, #0
 800226e:	d145      	bne.n	80022fc <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002270:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d11c      	bne.n	80022b2 <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002278:	1978      	adds	r0, r7, r5
 800227a:	3514      	adds	r5, #20
 800227c:	f7ff fd39 	bl	8001cf2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002280:	2d8c      	cmp	r5, #140	; 0x8c
 8002282:	d1f9      	bne.n	8002278 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002284:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8002348 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8002288:	4d25      	ldr	r5, [pc, #148]	; (8002320 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 800228a:	4640      	mov	r0, r8
 800228c:	f7ff fd31 	bl	8001cf2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002290:	4628      	mov	r0, r5
 8002292:	f7ff fd2e 	bl	8001cf2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002296:	4823      	ldr	r0, [pc, #140]	; (8002324 <prvAddNewTaskToReadyList+0xd0>)
 8002298:	f7ff fd2b 	bl	8001cf2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800229c:	4822      	ldr	r0, [pc, #136]	; (8002328 <prvAddNewTaskToReadyList+0xd4>)
 800229e:	f7ff fd28 	bl	8001cf2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80022a2:	4822      	ldr	r0, [pc, #136]	; (800232c <prvAddNewTaskToReadyList+0xd8>)
 80022a4:	f7ff fd25 	bl	8001cf2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80022a8:	4b21      	ldr	r3, [pc, #132]	; (8002330 <prvAddNewTaskToReadyList+0xdc>)
 80022aa:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80022ae:	4b21      	ldr	r3, [pc, #132]	; (8002334 <prvAddNewTaskToReadyList+0xe0>)
 80022b0:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80022b2:	4a21      	ldr	r2, [pc, #132]	; (8002338 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 80022b4:	4921      	ldr	r1, [pc, #132]	; (800233c <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 80022b6:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80022b8:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80022ba:	3301      	adds	r3, #1
 80022bc:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80022be:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80022c0:	2301      	movs	r3, #1
 80022c2:	4093      	lsls	r3, r2
 80022c4:	4303      	orrs	r3, r0
 80022c6:	2014      	movs	r0, #20
 80022c8:	600b      	str	r3, [r1, #0]
 80022ca:	fb00 7002 	mla	r0, r0, r2, r7
 80022ce:	1d31      	adds	r1, r6, #4
 80022d0:	f7ff fd1d 	bl	8001d0e <vListInsertEnd>
	taskEXIT_CRITICAL();
 80022d4:	f7ff fdd8 	bl	8001e88 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80022d8:	4b19      	ldr	r3, [pc, #100]	; (8002340 <prvAddNewTaskToReadyList+0xec>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	b163      	cbz	r3, 80022f8 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80022de:	6823      	ldr	r3, [r4, #0]
 80022e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d207      	bcs.n	80022f8 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 80022e8:	4b16      	ldr	r3, [pc, #88]	; (8002344 <prvAddNewTaskToReadyList+0xf0>)
 80022ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	f3bf 8f4f 	dsb	sy
 80022f4:	f3bf 8f6f 	isb	sy
 80022f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80022fc:	4b10      	ldr	r3, [pc, #64]	; (8002340 <prvAddNewTaskToReadyList+0xec>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1d6      	bne.n	80022b2 <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002308:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800230a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800230c:	bf98      	it	ls
 800230e:	6026      	strls	r6, [r4, #0]
 8002310:	e7cf      	b.n	80022b2 <prvAddNewTaskToReadyList+0x5e>
 8002312:	bf00      	nop
 8002314:	20000ce4 	.word	0x20000ce4
 8002318:	20000c4c 	.word	0x20000c4c
 800231c:	20000c58 	.word	0x20000c58
 8002320:	20000d10 	.word	0x20000d10
 8002324:	20000d2c 	.word	0x20000d2c
 8002328:	20000d58 	.word	0x20000d58
 800232c:	20000d44 	.word	0x20000d44
 8002330:	20000c50 	.word	0x20000c50
 8002334:	20000c54 	.word	0x20000c54
 8002338:	20000cf4 	.word	0x20000cf4
 800233c:	20000cf8 	.word	0x20000cf8
 8002340:	20000d40 	.word	0x20000d40
 8002344:	e000ed04 	.word	0xe000ed04
 8002348:	20000cfc 	.word	0x20000cfc

0800234c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800234c:	4a06      	ldr	r2, [pc, #24]	; (8002368 <prvResetNextTaskUnblockTime+0x1c>)
 800234e:	6813      	ldr	r3, [r2, #0]
 8002350:	6819      	ldr	r1, [r3, #0]
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <prvResetNextTaskUnblockTime+0x20>)
 8002354:	b919      	cbnz	r1, 800235e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002356:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002362:	68d2      	ldr	r2, [r2, #12]
 8002364:	6852      	ldr	r2, [r2, #4]
 8002366:	e7f8      	b.n	800235a <prvResetNextTaskUnblockTime+0xe>
 8002368:	20000c50 	.word	0x20000c50
 800236c:	20000d24 	.word	0x20000d24

08002370 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002374:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002376:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800237a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800237c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002380:	3a01      	subs	r2, #1
 8002382:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002386:	469a      	mov	sl, r3
 8002388:	4681      	mov	r9, r0
 800238a:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800238c:	f026 0607 	bic.w	r6, r6, #7
 8002390:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8002394:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002396:	7858      	ldrb	r0, [r3, #1]
 8002398:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 800239c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80023a0:	b108      	cbz	r0, 80023a6 <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023a2:	428b      	cmp	r3, r1
 80023a4:	d1f7      	bne.n	8002396 <prvInitialiseNewTask.isra.2+0x26>
 80023a6:	9d08      	ldr	r5, [sp, #32]
 80023a8:	2d06      	cmp	r5, #6
 80023aa:	bf28      	it	cs
 80023ac:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80023ae:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 80023b0:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80023b2:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80023b4:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80023b6:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80023ba:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80023bc:	f7ff fca4 	bl	8001d08 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023c0:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80023c4:	f104 0018 	add.w	r0, r4, #24
 80023c8:	f7ff fc9e 	bl	8001d08 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80023cc:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80023ce:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023d0:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80023d2:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80023d4:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80023d8:	4652      	mov	r2, sl
 80023da:	4649      	mov	r1, r9
 80023dc:	4630      	mov	r0, r6
 80023de:	f7ff fd09 	bl	8001df4 <pxPortInitialiseStack>
 80023e2:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80023e4:	f1b8 0f00 	cmp.w	r8, #0
 80023e8:	d001      	beq.n	80023ee <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80023ea:	f8c8 4000 	str.w	r4, [r8]
 80023ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080023f2 <prvDeleteTCB>:
	{
 80023f2:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80023f4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 80023f8:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80023fa:	b93b      	cbnz	r3, 800240c <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 80023fc:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80023fe:	f7ff fef1 	bl	80021e4 <vPortFree>
				vPortFree( pxTCB );
 8002402:	4620      	mov	r0, r4
	}
 8002404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8002408:	f7ff beec 	b.w	80021e4 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800240c:	2b01      	cmp	r3, #1
 800240e:	d0f9      	beq.n	8002404 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002410:	2b02      	cmp	r3, #2
 8002412:	d008      	beq.n	8002426 <prvDeleteTCB+0x34>
 8002414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002418:	f383 8811 	msr	BASEPRI, r3
 800241c:	f3bf 8f6f 	isb	sy
 8002420:	f3bf 8f4f 	dsb	sy
 8002424:	e7fe      	b.n	8002424 <prvDeleteTCB+0x32>
 8002426:	bd10      	pop	{r4, pc}

08002428 <prvIdleTask>:
{
 8002428:	b580      	push	{r7, lr}
				taskYIELD();
 800242a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8002488 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800242e:	4f12      	ldr	r7, [pc, #72]	; (8002478 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002430:	4c12      	ldr	r4, [pc, #72]	; (800247c <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8002432:	4d13      	ldr	r5, [pc, #76]	; (8002480 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002434:	6823      	ldr	r3, [r4, #0]
 8002436:	b963      	cbnz	r3, 8002452 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <prvIdleTask+0x5c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d9f8      	bls.n	8002432 <prvIdleTask+0xa>
				taskYIELD();
 8002440:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002444:	f8c8 3000 	str.w	r3, [r8]
 8002448:	f3bf 8f4f 	dsb	sy
 800244c:	f3bf 8f6f 	isb	sy
 8002450:	e7ee      	b.n	8002430 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8002452:	f7ff fcf7 	bl	8001e44 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800245a:	1d30      	adds	r0, r6, #4
 800245c:	f7ff fc7a 	bl	8001d54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002460:	682b      	ldr	r3, [r5, #0]
 8002462:	3b01      	subs	r3, #1
 8002464:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002466:	6823      	ldr	r3, [r4, #0]
 8002468:	3b01      	subs	r3, #1
 800246a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800246c:	f7ff fd0c 	bl	8001e88 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8002470:	4630      	mov	r0, r6
 8002472:	f7ff ffbe 	bl	80023f2 <prvDeleteTCB>
 8002476:	e7dd      	b.n	8002434 <prvIdleTask+0xc>
 8002478:	20000d58 	.word	0x20000d58
 800247c:	20000ce8 	.word	0x20000ce8
 8002480:	20000ce4 	.word	0x20000ce4
 8002484:	20000c58 	.word	0x20000c58
 8002488:	e000ed04 	.word	0xe000ed04

0800248c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800248c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800248e:	4b1b      	ldr	r3, [pc, #108]	; (80024fc <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002490:	4e1b      	ldr	r6, [pc, #108]	; (8002500 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002492:	681d      	ldr	r5, [r3, #0]
{
 8002494:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002496:	6830      	ldr	r0, [r6, #0]
 8002498:	3004      	adds	r0, #4
{
 800249a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800249c:	f7ff fc5a 	bl	8001d54 <uxListRemove>
 80024a0:	4633      	mov	r3, r6
 80024a2:	b940      	cbnz	r0, 80024b6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80024a4:	6831      	ldr	r1, [r6, #0]
 80024a6:	4e17      	ldr	r6, [pc, #92]	; (8002504 <prvAddCurrentTaskToDelayedList+0x78>)
 80024a8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80024aa:	6832      	ldr	r2, [r6, #0]
 80024ac:	2001      	movs	r0, #1
 80024ae:	4088      	lsls	r0, r1
 80024b0:	ea22 0200 	bic.w	r2, r2, r0
 80024b4:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80024b6:	1c62      	adds	r2, r4, #1
 80024b8:	d107      	bne.n	80024ca <prvAddCurrentTaskToDelayedList+0x3e>
 80024ba:	b137      	cbz	r7, 80024ca <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024bc:	6819      	ldr	r1, [r3, #0]
 80024be:	4812      	ldr	r0, [pc, #72]	; (8002508 <prvAddCurrentTaskToDelayedList+0x7c>)
 80024c0:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80024c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024c6:	f7ff bc22 	b.w	8001d0e <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80024ca:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80024cc:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80024ce:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80024d0:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80024d2:	d907      	bls.n	80024e4 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024d4:	4a0d      	ldr	r2, [pc, #52]	; (800250c <prvAddCurrentTaskToDelayedList+0x80>)
 80024d6:	6810      	ldr	r0, [r2, #0]
 80024d8:	6819      	ldr	r1, [r3, #0]
}
 80024da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024de:	3104      	adds	r1, #4
 80024e0:	f7ff bc21 	b.w	8001d26 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024e4:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <prvAddCurrentTaskToDelayedList+0x84>)
 80024e6:	6810      	ldr	r0, [r2, #0]
 80024e8:	6819      	ldr	r1, [r3, #0]
 80024ea:	3104      	adds	r1, #4
 80024ec:	f7ff fc1b 	bl	8001d26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <prvAddCurrentTaskToDelayedList+0x88>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80024f6:	bf38      	it	cc
 80024f8:	601c      	strcc	r4, [r3, #0]
 80024fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024fc:	20000d6c 	.word	0x20000d6c
 8002500:	20000c4c 	.word	0x20000c4c
 8002504:	20000cf8 	.word	0x20000cf8
 8002508:	20000d44 	.word	0x20000d44
 800250c:	20000c54 	.word	0x20000c54
 8002510:	20000c50 	.word	0x20000c50
 8002514:	20000d24 	.word	0x20000d24

08002518 <xTaskCreateStatic>:
	{
 8002518:	b570      	push	{r4, r5, r6, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800251e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8002520:	b945      	cbnz	r5, 8002534 <xTaskCreateStatic+0x1c>
 8002522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002526:	f383 8811 	msr	BASEPRI, r3
 800252a:	f3bf 8f6f 	isb	sy
 800252e:	f3bf 8f4f 	dsb	sy
 8002532:	e7fe      	b.n	8002532 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8002534:	b944      	cbnz	r4, 8002548 <xTaskCreateStatic+0x30>
 8002536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253a:	f383 8811 	msr	BASEPRI, r3
 800253e:	f3bf 8f6f 	isb	sy
 8002542:	f3bf 8f4f 	dsb	sy
 8002546:	e7fe      	b.n	8002546 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002548:	2654      	movs	r6, #84	; 0x54
 800254a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800254c:	9e04      	ldr	r6, [sp, #16]
 800254e:	2e54      	cmp	r6, #84	; 0x54
 8002550:	d008      	beq.n	8002564 <xTaskCreateStatic+0x4c>
 8002552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002556:	f383 8811 	msr	BASEPRI, r3
 800255a:	f3bf 8f6f 	isb	sy
 800255e:	f3bf 8f4f 	dsb	sy
 8002562:	e7fe      	b.n	8002562 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002564:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002566:	2502      	movs	r5, #2
 8002568:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800256c:	ad05      	add	r5, sp, #20
 800256e:	9501      	str	r5, [sp, #4]
 8002570:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002572:	9402      	str	r4, [sp, #8]
 8002574:	9500      	str	r5, [sp, #0]
 8002576:	f7ff fefb 	bl	8002370 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800257a:	4620      	mov	r0, r4
 800257c:	f7ff fe6a 	bl	8002254 <prvAddNewTaskToReadyList>
	}
 8002580:	9805      	ldr	r0, [sp, #20]
 8002582:	b006      	add	sp, #24
 8002584:	bd70      	pop	{r4, r5, r6, pc}

08002586 <xTaskCreate>:
	{
 8002586:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800258a:	4607      	mov	r7, r0
 800258c:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800258e:	0090      	lsls	r0, r2, #2
	{
 8002590:	4688      	mov	r8, r1
 8002592:	4616      	mov	r6, r2
 8002594:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002596:	f7ff fd97 	bl	80020c8 <pvPortMalloc>
			if( pxStack != NULL )
 800259a:	4605      	mov	r5, r0
 800259c:	b1e8      	cbz	r0, 80025da <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800259e:	2054      	movs	r0, #84	; 0x54
 80025a0:	f7ff fd92 	bl	80020c8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80025a4:	4604      	mov	r4, r0
 80025a6:	b1a8      	cbz	r0, 80025d4 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80025a8:	2300      	movs	r3, #0
 80025aa:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80025ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 80025b0:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80025b2:	9301      	str	r3, [sp, #4]
 80025b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80025b6:	9002      	str	r0, [sp, #8]
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	4632      	mov	r2, r6
 80025bc:	464b      	mov	r3, r9
 80025be:	4641      	mov	r1, r8
 80025c0:	4638      	mov	r0, r7
 80025c2:	f7ff fed5 	bl	8002370 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80025c6:	4620      	mov	r0, r4
 80025c8:	f7ff fe44 	bl	8002254 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80025cc:	2001      	movs	r0, #1
	}
 80025ce:	b005      	add	sp, #20
 80025d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80025d4:	4628      	mov	r0, r5
 80025d6:	f7ff fe05 	bl	80021e4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80025da:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80025de:	e7f6      	b.n	80025ce <xTaskCreate+0x48>

080025e0 <vTaskStartScheduler>:
{
 80025e0:	b510      	push	{r4, lr}
 80025e2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80025e4:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80025e6:	aa07      	add	r2, sp, #28
 80025e8:	a906      	add	r1, sp, #24
 80025ea:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80025ec:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80025ee:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80025f0:	f000 f99c 	bl	800292c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80025f4:	9b05      	ldr	r3, [sp, #20]
 80025f6:	9302      	str	r3, [sp, #8]
 80025f8:	9b06      	ldr	r3, [sp, #24]
 80025fa:	9301      	str	r3, [sp, #4]
 80025fc:	9400      	str	r4, [sp, #0]
 80025fe:	4623      	mov	r3, r4
 8002600:	9a07      	ldr	r2, [sp, #28]
 8002602:	490d      	ldr	r1, [pc, #52]	; (8002638 <vTaskStartScheduler+0x58>)
 8002604:	480d      	ldr	r0, [pc, #52]	; (800263c <vTaskStartScheduler+0x5c>)
 8002606:	f7ff ff87 	bl	8002518 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800260a:	b190      	cbz	r0, 8002632 <vTaskStartScheduler+0x52>
 800260c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002610:	f383 8811 	msr	BASEPRI, r3
 8002614:	f3bf 8f6f 	isb	sy
 8002618:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <vTaskStartScheduler+0x60>)
 800261e:	f04f 32ff 	mov.w	r2, #4294967295
 8002622:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002624:	4b07      	ldr	r3, [pc, #28]	; (8002644 <vTaskStartScheduler+0x64>)
 8002626:	2201      	movs	r2, #1
 8002628:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800262a:	4b07      	ldr	r3, [pc, #28]	; (8002648 <vTaskStartScheduler+0x68>)
 800262c:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800262e:	f7ff fca1 	bl	8001f74 <xPortStartScheduler>
}
 8002632:	b008      	add	sp, #32
 8002634:	bd10      	pop	{r4, pc}
 8002636:	bf00      	nop
 8002638:	08002f59 	.word	0x08002f59
 800263c:	08002429 	.word	0x08002429
 8002640:	20000d24 	.word	0x20000d24
 8002644:	20000d40 	.word	0x20000d40
 8002648:	20000d6c 	.word	0x20000d6c

0800264c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800264c:	4a02      	ldr	r2, [pc, #8]	; (8002658 <vTaskSuspendAll+0xc>)
 800264e:	6813      	ldr	r3, [r2, #0]
 8002650:	3301      	adds	r3, #1
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	20000cf0 	.word	0x20000cf0

0800265c <xTaskIncrementTick>:
{
 800265c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002660:	4b3c      	ldr	r3, [pc, #240]	; (8002754 <xTaskIncrementTick+0xf8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d153      	bne.n	8002710 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002668:	4b3b      	ldr	r3, [pc, #236]	; (8002758 <xTaskIncrementTick+0xfc>)
 800266a:	681c      	ldr	r4, [r3, #0]
 800266c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800266e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002670:	b9bc      	cbnz	r4, 80026a2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002672:	4b3a      	ldr	r3, [pc, #232]	; (800275c <xTaskIncrementTick+0x100>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	b142      	cbz	r2, 800268c <xTaskIncrementTick+0x30>
 800267a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267e:	f383 8811 	msr	BASEPRI, r3
 8002682:	f3bf 8f6f 	isb	sy
 8002686:	f3bf 8f4f 	dsb	sy
 800268a:	e7fe      	b.n	800268a <xTaskIncrementTick+0x2e>
 800268c:	4a34      	ldr	r2, [pc, #208]	; (8002760 <xTaskIncrementTick+0x104>)
 800268e:	6819      	ldr	r1, [r3, #0]
 8002690:	6810      	ldr	r0, [r2, #0]
 8002692:	6018      	str	r0, [r3, #0]
 8002694:	6011      	str	r1, [r2, #0]
 8002696:	4a33      	ldr	r2, [pc, #204]	; (8002764 <xTaskIncrementTick+0x108>)
 8002698:	6813      	ldr	r3, [r2, #0]
 800269a:	3301      	adds	r3, #1
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	f7ff fe55 	bl	800234c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80026a2:	4d31      	ldr	r5, [pc, #196]	; (8002768 <xTaskIncrementTick+0x10c>)
 80026a4:	4f31      	ldr	r7, [pc, #196]	; (800276c <xTaskIncrementTick+0x110>)
 80026a6:	682b      	ldr	r3, [r5, #0]
 80026a8:	429c      	cmp	r4, r3
 80026aa:	f04f 0b00 	mov.w	fp, #0
 80026ae:	d33e      	bcc.n	800272e <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026b0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800275c <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80026b4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800277c <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026b8:	f8d8 2000 	ldr.w	r2, [r8]
 80026bc:	6812      	ldr	r2, [r2, #0]
 80026be:	bb72      	cbnz	r2, 800271e <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026c0:	f04f 32ff 	mov.w	r2, #4294967295
 80026c4:	602a      	str	r2, [r5, #0]
					break;
 80026c6:	e032      	b.n	800272e <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026c8:	f106 0a04 	add.w	sl, r6, #4
 80026cc:	4650      	mov	r0, sl
 80026ce:	f7ff fb41 	bl	8001d54 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80026d2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80026d4:	b119      	cbz	r1, 80026de <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026d6:	f106 0018 	add.w	r0, r6, #24
 80026da:	f7ff fb3b 	bl	8001d54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80026de:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80026e0:	f8d9 3000 	ldr.w	r3, [r9]
 80026e4:	2201      	movs	r2, #1
 80026e6:	fa02 f100 	lsl.w	r1, r2, r0
 80026ea:	4319      	orrs	r1, r3
 80026ec:	4b20      	ldr	r3, [pc, #128]	; (8002770 <xTaskIncrementTick+0x114>)
 80026ee:	f8c9 1000 	str.w	r1, [r9]
 80026f2:	f04f 0e14 	mov.w	lr, #20
 80026f6:	4651      	mov	r1, sl
 80026f8:	fb0e 3000 	mla	r0, lr, r0, r3
 80026fc:	f7ff fb07 	bl	8001d0e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002700:	6838      	ldr	r0, [r7, #0]
 8002702:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002704:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8002706:	4291      	cmp	r1, r2
 8002708:	bf28      	it	cs
 800270a:	f04f 0b01 	movcs.w	fp, #1
 800270e:	e7d3      	b.n	80026b8 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002710:	4a18      	ldr	r2, [pc, #96]	; (8002774 <xTaskIncrementTick+0x118>)
 8002712:	6813      	ldr	r3, [r2, #0]
 8002714:	3301      	adds	r3, #1
 8002716:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002718:	f04f 0b00 	mov.w	fp, #0
 800271c:	e011      	b.n	8002742 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800271e:	f8d8 2000 	ldr.w	r2, [r8]
 8002722:	68d2      	ldr	r2, [r2, #12]
 8002724:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002726:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002728:	428c      	cmp	r4, r1
 800272a:	d2cd      	bcs.n	80026c8 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 800272c:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <xTaskIncrementTick+0x114>)
 8002732:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002734:	2214      	movs	r2, #20
 8002736:	434a      	muls	r2, r1
 8002738:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800273a:	2a02      	cmp	r2, #2
 800273c:	bf28      	it	cs
 800273e:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002742:	4a0d      	ldr	r2, [pc, #52]	; (8002778 <xTaskIncrementTick+0x11c>)
 8002744:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8002746:	2a00      	cmp	r2, #0
 8002748:	bf18      	it	ne
 800274a:	f04f 0b01 	movne.w	fp, #1
}
 800274e:	4658      	mov	r0, fp
 8002750:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002754:	20000cf0 	.word	0x20000cf0
 8002758:	20000d6c 	.word	0x20000d6c
 800275c:	20000c50 	.word	0x20000c50
 8002760:	20000c54 	.word	0x20000c54
 8002764:	20000d28 	.word	0x20000d28
 8002768:	20000d24 	.word	0x20000d24
 800276c:	20000c4c 	.word	0x20000c4c
 8002770:	20000c58 	.word	0x20000c58
 8002774:	20000cec 	.word	0x20000cec
 8002778:	20000d70 	.word	0x20000d70
 800277c:	20000cf8 	.word	0x20000cf8

08002780 <xTaskResumeAll>:
{
 8002780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002784:	4c31      	ldr	r4, [pc, #196]	; (800284c <xTaskResumeAll+0xcc>)
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	b943      	cbnz	r3, 800279c <xTaskResumeAll+0x1c>
 800278a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278e:	f383 8811 	msr	BASEPRI, r3
 8002792:	f3bf 8f6f 	isb	sy
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	e7fe      	b.n	800279a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800279c:	f7ff fb52 	bl	8001e44 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027a6:	6824      	ldr	r4, [r4, #0]
 80027a8:	b12c      	cbz	r4, 80027b6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80027aa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80027ac:	f7ff fb6c 	bl	8001e88 <vPortExitCritical>
}
 80027b0:	4620      	mov	r0, r4
 80027b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80027b6:	4b26      	ldr	r3, [pc, #152]	; (8002850 <xTaskResumeAll+0xd0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f5      	beq.n	80027aa <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027be:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002868 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 80027c2:	4f24      	ldr	r7, [pc, #144]	; (8002854 <xTaskResumeAll+0xd4>)
 80027c4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800286c <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027c8:	f8d9 3000 	ldr.w	r3, [r9]
 80027cc:	b9e3      	cbnz	r3, 8002808 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80027ce:	b10c      	cbz	r4, 80027d4 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80027d0:	f7ff fdbc 	bl	800234c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80027d4:	4d20      	ldr	r5, [pc, #128]	; (8002858 <xTaskResumeAll+0xd8>)
 80027d6:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80027d8:	b144      	cbz	r4, 80027ec <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80027da:	4e20      	ldr	r6, [pc, #128]	; (800285c <xTaskResumeAll+0xdc>)
 80027dc:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80027de:	f7ff ff3d 	bl	800265c <xTaskIncrementTick>
 80027e2:	b100      	cbz	r0, 80027e6 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80027e4:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80027e6:	3c01      	subs	r4, #1
 80027e8:	d1f9      	bne.n	80027de <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80027ea:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80027ec:	4b1b      	ldr	r3, [pc, #108]	; (800285c <xTaskResumeAll+0xdc>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0da      	beq.n	80027aa <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80027f4:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <xTaskResumeAll+0xe0>)
 80027f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	f3bf 8f4f 	dsb	sy
 8002800:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002804:	2401      	movs	r4, #1
 8002806:	e7d1      	b.n	80027ac <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002808:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800280c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800280e:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002810:	f104 0018 	add.w	r0, r4, #24
 8002814:	f7ff fa9e 	bl	8001d54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002818:	4630      	mov	r0, r6
 800281a:	f7ff fa9b 	bl	8001d54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800281e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002820:	6839      	ldr	r1, [r7, #0]
 8002822:	2501      	movs	r5, #1
 8002824:	fa05 f302 	lsl.w	r3, r5, r2
 8002828:	2014      	movs	r0, #20
 800282a:	430b      	orrs	r3, r1
 800282c:	fb00 8002 	mla	r0, r0, r2, r8
 8002830:	4631      	mov	r1, r6
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	f7ff fa6b 	bl	8001d0e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002838:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <xTaskResumeAll+0xe4>)
 800283a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8002842:	bf24      	itt	cs
 8002844:	4b05      	ldrcs	r3, [pc, #20]	; (800285c <xTaskResumeAll+0xdc>)
 8002846:	601d      	strcs	r5, [r3, #0]
 8002848:	e7be      	b.n	80027c8 <xTaskResumeAll+0x48>
 800284a:	bf00      	nop
 800284c:	20000cf0 	.word	0x20000cf0
 8002850:	20000ce4 	.word	0x20000ce4
 8002854:	20000cf8 	.word	0x20000cf8
 8002858:	20000cec 	.word	0x20000cec
 800285c:	20000d70 	.word	0x20000d70
 8002860:	e000ed04 	.word	0xe000ed04
 8002864:	20000c4c 	.word	0x20000c4c
 8002868:	20000d2c 	.word	0x20000d2c
 800286c:	20000c58 	.word	0x20000c58

08002870 <vTaskDelay>:
	{
 8002870:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002872:	b940      	cbnz	r0, 8002886 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002874:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <vTaskDelay+0x40>)
 8002876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	f3bf 8f6f 	isb	sy
 8002884:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002886:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <vTaskDelay+0x44>)
 8002888:	6819      	ldr	r1, [r3, #0]
 800288a:	b141      	cbz	r1, 800289e <vTaskDelay+0x2e>
 800288c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002890:	f383 8811 	msr	BASEPRI, r3
 8002894:	f3bf 8f6f 	isb	sy
 8002898:	f3bf 8f4f 	dsb	sy
 800289c:	e7fe      	b.n	800289c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800289e:	f7ff fed5 	bl	800264c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80028a2:	f7ff fdf3 	bl	800248c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80028a6:	f7ff ff6b 	bl	8002780 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80028aa:	2800      	cmp	r0, #0
 80028ac:	d0e2      	beq.n	8002874 <vTaskDelay+0x4>
 80028ae:	bd08      	pop	{r3, pc}
 80028b0:	e000ed04 	.word	0xe000ed04
 80028b4:	20000cf0 	.word	0x20000cf0

080028b8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80028b8:	4b17      	ldr	r3, [pc, #92]	; (8002918 <vTaskSwitchContext+0x60>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4b17      	ldr	r3, [pc, #92]	; (800291c <vTaskSwitchContext+0x64>)
{
 80028be:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80028c0:	b112      	cbz	r2, 80028c8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80028c2:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80028c8:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80028ca:	4b15      	ldr	r3, [pc, #84]	; (8002920 <vTaskSwitchContext+0x68>)
 80028cc:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f1c3 031f 	rsb	r3, r3, #31
 80028d8:	2214      	movs	r2, #20
 80028da:	4912      	ldr	r1, [pc, #72]	; (8002924 <vTaskSwitchContext+0x6c>)
 80028dc:	435a      	muls	r2, r3
 80028de:	1888      	adds	r0, r1, r2
 80028e0:	588c      	ldr	r4, [r1, r2]
 80028e2:	b944      	cbnz	r4, 80028f6 <vTaskSwitchContext+0x3e>
	__asm volatile
 80028e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e8:	f383 8811 	msr	BASEPRI, r3
 80028ec:	f3bf 8f6f 	isb	sy
 80028f0:	f3bf 8f4f 	dsb	sy
 80028f4:	e7fe      	b.n	80028f4 <vTaskSwitchContext+0x3c>
 80028f6:	6844      	ldr	r4, [r0, #4]
 80028f8:	3208      	adds	r2, #8
 80028fa:	6864      	ldr	r4, [r4, #4]
 80028fc:	6044      	str	r4, [r0, #4]
 80028fe:	440a      	add	r2, r1
 8002900:	4294      	cmp	r4, r2
 8002902:	bf04      	itt	eq
 8002904:	6862      	ldreq	r2, [r4, #4]
 8002906:	6042      	streq	r2, [r0, #4]
 8002908:	2214      	movs	r2, #20
 800290a:	fb02 1303 	mla	r3, r2, r3, r1
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <vTaskSwitchContext+0x70>)
 8002914:	e7d6      	b.n	80028c4 <vTaskSwitchContext+0xc>
 8002916:	bf00      	nop
 8002918:	20000cf0 	.word	0x20000cf0
 800291c:	20000d70 	.word	0x20000d70
 8002920:	20000cf8 	.word	0x20000cf8
 8002924:	20000c58 	.word	0x20000c58
 8002928:	20000c4c 	.word	0x20000c4c

0800292c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800292c:	4b03      	ldr	r3, [pc, #12]	; (800293c <vApplicationGetIdleTaskMemory+0x10>)
 800292e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002930:	4b03      	ldr	r3, [pc, #12]	; (8002940 <vApplicationGetIdleTaskMemory+0x14>)
 8002932:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002934:	2380      	movs	r3, #128	; 0x80
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	20000f74 	.word	0x20000f74
 8002940:	20000d74 	.word	0x20000d74

08002944 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002944:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002946:	4e0b      	ldr	r6, [pc, #44]	; (8002974 <StartDefaultTask+0x30>)
	  uint8_t buf[] = {0x90, 0x00, 0x00, 0x01};
	  uint8_t b[] = "\x090\x000\x000\x001";
 8002948:	4c0b      	ldr	r4, [pc, #44]	; (8002978 <StartDefaultTask+0x34>)
 	  HAL_SPI_Transmit_IT(&hspi3, b, 11);
 800294a:	4d0c      	ldr	r5, [pc, #48]	; (800297c <StartDefaultTask+0x38>)
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800294c:	4630      	mov	r0, r6
 800294e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002952:	f7fd fe47 	bl	80005e4 <HAL_GPIO_TogglePin>
	  uint8_t b[] = "\x090\x000\x000\x001";
 8002956:	6820      	ldr	r0, [r4, #0]
 8002958:	9000      	str	r0, [sp, #0]
 800295a:	7923      	ldrb	r3, [r4, #4]
 800295c:	f88d 3004 	strb.w	r3, [sp, #4]
 	  HAL_SPI_Transmit_IT(&hspi3, b, 11);
 8002960:	220b      	movs	r2, #11
 8002962:	4669      	mov	r1, sp
 8002964:	4628      	mov	r0, r5
 8002966:	f7fe fc2f 	bl	80011c8 <HAL_SPI_Transmit_IT>
    osDelay(200);
 800296a:	20c8      	movs	r0, #200	; 0xc8
 800296c:	f7ff f9b9 	bl	8001ce2 <osDelay>
 8002970:	e7ec      	b.n	800294c <StartDefaultTask+0x8>
 8002972:	bf00      	nop
 8002974:	48000400 	.word	0x48000400
 8002978:	08002dbc 	.word	0x08002dbc
 800297c:	20000fd0 	.word	0x20000fd0

08002980 <SystemClock_Config>:
{
 8002980:	b510      	push	{r4, lr}
 8002982:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002984:	2228      	movs	r2, #40	; 0x28
 8002986:	2100      	movs	r1, #0
 8002988:	a806      	add	r0, sp, #24
 800298a:	f000 fa03 	bl	8002d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800298e:	2100      	movs	r1, #0
 8002990:	2214      	movs	r2, #20
 8002992:	a801      	add	r0, sp, #4
 8002994:	f000 f9fe 	bl	8002d94 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002998:	2301      	movs	r3, #1
 800299a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800299c:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800299e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029a2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80029a4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029a8:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029aa:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80029ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80029b0:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80029b2:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029b4:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029b6:	f7fd fe27 	bl	8000608 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ba:	230f      	movs	r3, #15
 80029bc:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029be:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029c2:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029c4:	4621      	mov	r1, r4
 80029c6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029c8:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029ca:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029cc:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029ce:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029d0:	f7fe f93a 	bl	8000c48 <HAL_RCC_ClockConfig>
}
 80029d4:	b010      	add	sp, #64	; 0x40
 80029d6:	bd10      	pop	{r4, pc}

080029d8 <main>:
{
 80029d8:	b500      	push	{lr}
 80029da:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 80029dc:	f7fd fbf8 	bl	80001d0 <HAL_Init>
  SystemClock_Config();
 80029e0:	f7ff ffce 	bl	8002980 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e4:	2214      	movs	r2, #20
 80029e6:	2100      	movs	r1, #0
 80029e8:	eb0d 0002 	add.w	r0, sp, r2
 80029ec:	f000 f9d2 	bl	8002d94 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f0:	4b3d      	ldr	r3, [pc, #244]	; (8002ae8 <main+0x110>)
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80029f2:	483e      	ldr	r0, [pc, #248]	; (8002aec <main+0x114>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f4:	695a      	ldr	r2, [r3, #20]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 80029f6:	4e3e      	ldr	r6, [pc, #248]	; (8002af0 <main+0x118>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80029fc:	615a      	str	r2, [r3, #20]
 80029fe:	695a      	ldr	r2, [r3, #20]
 8002a00:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002a04:	9201      	str	r2, [sp, #4]
 8002a06:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a08:	695a      	ldr	r2, [r3, #20]
 8002a0a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002a0e:	615a      	str	r2, [r3, #20]
 8002a10:	695a      	ldr	r2, [r3, #20]
 8002a12:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002a16:	9202      	str	r2, [sp, #8]
 8002a18:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1a:	695a      	ldr	r2, [r3, #20]
 8002a1c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002a20:	615a      	str	r2, [r3, #20]
 8002a22:	695a      	ldr	r2, [r3, #20]
 8002a24:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002a28:	9203      	str	r2, [sp, #12]
 8002a2a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002a32:	615a      	str	r2, [r3, #20]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002a3a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002a3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8002a44:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a48:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002a4a:	f7fd fdb1 	bl	80005b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a4e:	4b29      	ldr	r3, [pc, #164]	; (8002af4 <main+0x11c>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a50:	4829      	ldr	r0, [pc, #164]	; (8002af8 <main+0x120>)
  GPIO_InitStruct.Pin = B1_Pin;
 8002a52:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a54:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a56:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a5a:	f7fd fc75 	bl	8000348 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a5e:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002a60:	a905      	add	r1, sp, #20
 8002a62:	4822      	ldr	r0, [pc, #136]	; (8002aec <main+0x114>)
  GPIO_InitStruct.Pin = LD2_Pin;
 8002a64:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a66:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002a6c:	f7fd fc6c 	bl	8000348 <HAL_GPIO_Init>
  hspi3.Instance = SPI3;
 8002a70:	4822      	ldr	r0, [pc, #136]	; (8002afc <main+0x124>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002a72:	4a23      	ldr	r2, [pc, #140]	; (8002b00 <main+0x128>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002a74:	6084      	str	r4, [r0, #8]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002a76:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002a7a:	e880 000c 	stmia.w	r0, {r2, r3}
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a7e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002a82:	60c3      	str	r3, [r0, #12]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002a84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a88:	6183      	str	r3, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002a8a:	2310      	movs	r3, #16
 8002a8c:	61c3      	str	r3, [r0, #28]
  hspi3.Init.CRCPolynomial = 7;
 8002a8e:	2307      	movs	r3, #7
 8002a90:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a92:	2308      	movs	r3, #8
 8002a94:	6343      	str	r3, [r0, #52]	; 0x34
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a96:	6104      	str	r4, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a98:	6144      	str	r4, [r0, #20]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a9a:	6204      	str	r4, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a9c:	6244      	str	r4, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a9e:	6284      	str	r4, [r0, #40]	; 0x28
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002aa0:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002aa2:	f7fe fab1 	bl	8001008 <HAL_SPI_Init>
  huart2.Instance = USART2;
 8002aa6:	4817      	ldr	r0, [pc, #92]	; (8002b04 <main+0x12c>)
  huart2.Init.BaudRate = 38400;
 8002aa8:	4917      	ldr	r1, [pc, #92]	; (8002b08 <main+0x130>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002aaa:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 38400;
 8002aac:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8002ab0:	e880 000a 	stmia.w	r0, {r1, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ab4:	230c      	movs	r3, #12
 8002ab6:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ab8:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002aba:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002abc:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002abe:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ac0:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ac2:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ac4:	f7ff f88a 	bl	8001bdc <HAL_UART_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8002ac8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002aca:	ad05      	add	r5, sp, #20
 8002acc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ace:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8002ad2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	a805      	add	r0, sp, #20
 8002ada:	f7ff f8da 	bl	8001c92 <osThreadCreate>
 8002ade:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <main+0x134>)
 8002ae0:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002ae2:	f7ff f8d1 	bl	8001c88 <osKernelStart>
 8002ae6:	e7fe      	b.n	8002ae6 <main+0x10e>
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	48000400 	.word	0x48000400
 8002af0:	08002dc4 	.word	0x08002dc4
 8002af4:	10210000 	.word	0x10210000
 8002af8:	48000800 	.word	0x48000800
 8002afc:	20000fd0 	.word	0x20000fd0
 8002b00:	40003c00 	.word	0x40003c00
 8002b04:	20001034 	.word	0x20001034
 8002b08:	40004400 	.word	0x40004400
 8002b0c:	20000fcc 	.word	0x20000fcc

08002b10 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002b10:	6802      	ldr	r2, [r0, #0]
 8002b12:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d101      	bne.n	8002b1c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002b18:	f7fd bb6c 	b.w	80001f4 <HAL_IncTick>
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40012c00 	.word	0x40012c00

08002b24 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8002b24:	4770      	bx	lr
	...

08002b28 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b28:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <HAL_MspInit+0x3c>)
{
 8002b2a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2c:	699a      	ldr	r2, [r3, #24]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	619a      	str	r2, [r3, #24]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	f002 0201 	and.w	r2, r2, #1
 8002b3a:	9200      	str	r2, [sp, #0]
 8002b3c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b3e:	69da      	ldr	r2, [r3, #28]
 8002b40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b44:	61da      	str	r2, [r3, #28]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	210f      	movs	r1, #15
 8002b52:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b56:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b58:	f7fd fb7c 	bl	8000254 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b5c:	b003      	add	sp, #12
 8002b5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000

08002b68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b68:	b510      	push	{r4, lr}
 8002b6a:	4604      	mov	r4, r0
 8002b6c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6e:	2214      	movs	r2, #20
 8002b70:	2100      	movs	r1, #0
 8002b72:	a803      	add	r0, sp, #12
 8002b74:	f000 f90e 	bl	8002d94 <memset>
  if(hspi->Instance==SPI3)
 8002b78:	6822      	ldr	r2, [r4, #0]
 8002b7a:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <HAL_SPI_MspInit+0x70>)
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d128      	bne.n	8002bd2 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002b80:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b84:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002b86:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b88:	4814      	ldr	r0, [pc, #80]	; (8002bdc <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002b8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b8e:	61da      	str	r2, [r3, #28]
 8002b90:	69da      	ldr	r2, [r3, #28]
 8002b92:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002b96:	9201      	str	r2, [sp, #4]
 8002b98:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002ba0:	615a      	str	r2, [r3, #20]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ba8:	9302      	str	r3, [sp, #8]
 8002baa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002bac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002bb0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002bba:	2306      	movs	r3, #6
 8002bbc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bbe:	f7fd fbc3 	bl	8000348 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8002bc2:	2033      	movs	r0, #51	; 0x33
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2105      	movs	r1, #5
 8002bc8:	f7fd fb44 	bl	8000254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002bcc:	2033      	movs	r0, #51	; 0x33
 8002bce:	f7fd fb83 	bl	80002d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002bd2:	b008      	add	sp, #32
 8002bd4:	bd10      	pop	{r4, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40003c00 	.word	0x40003c00
 8002bdc:	48000800 	.word	0x48000800

08002be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002be0:	b510      	push	{r4, lr}
 8002be2:	4604      	mov	r4, r0
 8002be4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be6:	2214      	movs	r2, #20
 8002be8:	2100      	movs	r1, #0
 8002bea:	a803      	add	r0, sp, #12
 8002bec:	f000 f8d2 	bl	8002d94 <memset>
  if(huart->Instance==USART2)
 8002bf0:	6822      	ldr	r2, [r4, #0]
 8002bf2:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <HAL_UART_MspInit+0x5c>)
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d11e      	bne.n	8002c36 <HAL_UART_MspInit+0x56>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bf8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfc:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bfe:	69da      	ldr	r2, [r3, #28]
 8002c00:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002c04:	61da      	str	r2, [r3, #28]
 8002c06:	69da      	ldr	r2, [r3, #28]
 8002c08:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002c0c:	9201      	str	r2, [sp, #4]
 8002c0e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c10:	695a      	ldr	r2, [r3, #20]
 8002c12:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002c16:	615a      	str	r2, [r3, #20]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c22:	230c      	movs	r3, #12
 8002c24:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c2e:	2307      	movs	r3, #7
 8002c30:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c32:	f7fd fb89 	bl	8000348 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c36:	b008      	add	sp, #32
 8002c38:	bd10      	pop	{r4, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40004400 	.word	0x40004400

08002c40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c40:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8002c42:	4601      	mov	r1, r0
{
 8002c44:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8002c46:	2200      	movs	r2, #0
 8002c48:	2019      	movs	r0, #25
 8002c4a:	f7fd fb03 	bl	8000254 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8002c4e:	2019      	movs	r0, #25
 8002c50:	f7fd fb42 	bl	80002d8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002c54:	4b14      	ldr	r3, [pc, #80]	; (8002ca8 <HAL_InitTick+0x68>)
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002c56:	4c15      	ldr	r4, [pc, #84]	; (8002cac <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c5e:	619a      	str	r2, [r3, #24]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c66:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c68:	a901      	add	r1, sp, #4
 8002c6a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002c6c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c6e:	f7fe f921 	bl	8000eb4 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002c72:	f7fe f907 	bl	8000e84 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8002c76:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <HAL_InitTick+0x70>)
 8002c78:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002c7a:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002c7e:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <HAL_InitTick+0x74>)
 8002c82:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c86:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8002c88:	2300      	movs	r3, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 8002c8a:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002c8c:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8002c8e:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c90:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002c92:	f7fe fcf7 	bl	8001684 <HAL_TIM_Base_Init>
 8002c96:	b920      	cbnz	r0, 8002ca2 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002c98:	4620      	mov	r0, r4
 8002c9a:	f7fe fbc5 	bl	8001428 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002c9e:	b008      	add	sp, #32
 8002ca0:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	e7fb      	b.n	8002c9e <HAL_InitTick+0x5e>
 8002ca6:	bf00      	nop
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	200010b4 	.word	0x200010b4
 8002cb0:	40012c00 	.word	0x40012c00
 8002cb4:	000f4240 	.word	0x000f4240

08002cb8 <NMI_Handler>:
 8002cb8:	4770      	bx	lr

08002cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cba:	e7fe      	b.n	8002cba <HardFault_Handler>

08002cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cbc:	e7fe      	b.n	8002cbc <MemManage_Handler>

08002cbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cbe:	e7fe      	b.n	8002cbe <BusFault_Handler>

08002cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cc0:	e7fe      	b.n	8002cc0 <UsageFault_Handler>

08002cc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cc2:	4770      	bx	lr

08002cc4 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cc4:	4801      	ldr	r0, [pc, #4]	; (8002ccc <TIM1_UP_TIM16_IRQHandler+0x8>)
 8002cc6:	f7fe bbeb 	b.w	80014a0 <HAL_TIM_IRQHandler>
 8002cca:	bf00      	nop
 8002ccc:	200010b4 	.word	0x200010b4

08002cd0 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002cd0:	4801      	ldr	r0, [pc, #4]	; (8002cd8 <SPI3_IRQHandler+0x8>)
 8002cd2:	f7fe bb21 	b.w	8001318 <HAL_SPI_IRQHandler>
 8002cd6:	bf00      	nop
 8002cd8:	20000fd0 	.word	0x20000fd0

08002cdc <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cdc:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <SystemInit+0x18>)
 8002cde:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002ce2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002ce6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d30 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002cfc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002cfe:	e003      	b.n	8002d08 <LoopCopyDataInit>

08002d00 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002d00:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002d02:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002d04:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002d06:	3104      	adds	r1, #4

08002d08 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002d08:	480b      	ldr	r0, [pc, #44]	; (8002d38 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002d0a:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002d0c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002d0e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002d10:	d3f6      	bcc.n	8002d00 <CopyDataInit>
	ldr	r2, =_sbss
 8002d12:	4a0b      	ldr	r2, [pc, #44]	; (8002d40 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002d14:	e002      	b.n	8002d1c <LoopFillZerobss>

08002d16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002d16:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002d18:	f842 3b04 	str.w	r3, [r2], #4

08002d1c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002d1c:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <LoopForever+0x16>)
	cmp	r2, r3
 8002d1e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002d20:	d3f9      	bcc.n	8002d16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d22:	f7ff ffdb 	bl	8002cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d26:	f000 f811 	bl	8002d4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d2a:	f7ff fe55 	bl	80029d8 <main>

08002d2e <LoopForever>:

LoopForever:
    b LoopForever
 8002d2e:	e7fe      	b.n	8002d2e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d30:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8002d34:	08002f8c 	.word	0x08002f8c
	ldr	r0, =_sdata
 8002d38:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002d3c:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8002d40:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8002d44:	200010f4 	.word	0x200010f4

08002d48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d48:	e7fe      	b.n	8002d48 <ADC1_IRQHandler>
	...

08002d4c <__libc_init_array>:
 8002d4c:	b570      	push	{r4, r5, r6, lr}
 8002d4e:	4e0d      	ldr	r6, [pc, #52]	; (8002d84 <__libc_init_array+0x38>)
 8002d50:	4c0d      	ldr	r4, [pc, #52]	; (8002d88 <__libc_init_array+0x3c>)
 8002d52:	1ba4      	subs	r4, r4, r6
 8002d54:	10a4      	asrs	r4, r4, #2
 8002d56:	2500      	movs	r5, #0
 8002d58:	42a5      	cmp	r5, r4
 8002d5a:	d109      	bne.n	8002d70 <__libc_init_array+0x24>
 8002d5c:	4e0b      	ldr	r6, [pc, #44]	; (8002d8c <__libc_init_array+0x40>)
 8002d5e:	4c0c      	ldr	r4, [pc, #48]	; (8002d90 <__libc_init_array+0x44>)
 8002d60:	f000 f820 	bl	8002da4 <_init>
 8002d64:	1ba4      	subs	r4, r4, r6
 8002d66:	10a4      	asrs	r4, r4, #2
 8002d68:	2500      	movs	r5, #0
 8002d6a:	42a5      	cmp	r5, r4
 8002d6c:	d105      	bne.n	8002d7a <__libc_init_array+0x2e>
 8002d6e:	bd70      	pop	{r4, r5, r6, pc}
 8002d70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d74:	4798      	blx	r3
 8002d76:	3501      	adds	r5, #1
 8002d78:	e7ee      	b.n	8002d58 <__libc_init_array+0xc>
 8002d7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d7e:	4798      	blx	r3
 8002d80:	3501      	adds	r5, #1
 8002d82:	e7f2      	b.n	8002d6a <__libc_init_array+0x1e>
 8002d84:	08002f84 	.word	0x08002f84
 8002d88:	08002f84 	.word	0x08002f84
 8002d8c:	08002f84 	.word	0x08002f84
 8002d90:	08002f88 	.word	0x08002f88

08002d94 <memset>:
 8002d94:	4402      	add	r2, r0
 8002d96:	4603      	mov	r3, r0
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d100      	bne.n	8002d9e <memset+0xa>
 8002d9c:	4770      	bx	lr
 8002d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002da2:	e7f9      	b.n	8002d98 <memset+0x4>

08002da4 <_init>:
 8002da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da6:	bf00      	nop
 8002da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002daa:	bc08      	pop	{r3}
 8002dac:	469e      	mov	lr, r3
 8002dae:	4770      	bx	lr

08002db0 <_fini>:
 8002db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db2:	bf00      	nop
 8002db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db6:	bc08      	pop	{r3}
 8002db8:	469e      	mov	lr, r3
 8002dba:	4770      	bx	lr
