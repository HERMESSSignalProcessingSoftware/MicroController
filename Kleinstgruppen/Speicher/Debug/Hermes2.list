
Hermes2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009248  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08009448  08009448  00019448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009548  08009548  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009548  08009548  00019548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009550  08009550  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009550  08009550  00019550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009554  08009554  00019554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ef0  20000074  080095cc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004f64  080095cc  00024f64  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024b76  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000044b4  00000000  00000000  00044c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001bb0  00000000  00000000  000490d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019a8  00000000  00000000  0004ac80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d682  00000000  00000000  0004c628  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017897  00000000  00000000  00079caa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00112b73  00000000  00000000  00091541  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a40b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b70  00000000  00000000  001a4130  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08009430 	.word	0x08009430

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08009430 	.word	0x08009430

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <testMemory>:
extern SPI_HandleTypeDef hspi5;


#define PAGE_COUNT 125000

uint32_t testMemory(void){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 80005e6:	af02      	add	r7, sp, #8
	SPI_Values DUT;
	DUT.CS_Pin = GPIO_PIN_3;
 80005e8:	2308      	movs	r3, #8
 80005ea:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204
	DUT.CS_Port = GPIOE;
 80005ee:	4b49      	ldr	r3, [pc, #292]	; (8000714 <testMemory+0x134>)
 80005f0:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	DUT.spihandle = &hspi5;
 80005f4:	4b48      	ldr	r3, [pc, #288]	; (8000718 <testMemory+0x138>)
 80005f6:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

	uint8_t writeBuffer[256];
	uint8_t readBuffer[256] = {0};
 80005fa:	463b      	mov	r3, r7
 80005fc:	4618      	mov	r0, r3
 80005fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000602:	461a      	mov	r2, r3
 8000604:	2100      	movs	r1, #0
 8000606:	f008 f826 	bl	8008656 <memset>
	uint32_t adresse = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

	//Testdaten initialisieren
	for(int i = 0; i<256;i++){
 8000610:	2300      	movs	r3, #0
 8000612:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000616:	e00e      	b.n	8000636 <testMemory+0x56>
		writeBuffer[i] = i;
 8000618:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800061c:	b2d9      	uxtb	r1, r3
 800061e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000622:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000626:	4413      	add	r3, r2
 8000628:	460a      	mov	r2, r1
 800062a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<256;i++){
 800062c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000630:	3301      	adds	r3, #1
 8000632:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000636:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800063a:	2bff      	cmp	r3, #255	; 0xff
 800063c:	ddec      	ble.n	8000618 <testMemory+0x38>
		}

	//CHIP löschen
	chipErase(DUT);
 800063e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000642:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000646:	f000 fc4b 	bl	8000ee0 <chipErase>
	//evtl Zusätzliche Schleife für die verschiedenen Chips und CS pins
	for(int i = 0; i < PAGE_COUNT; i++){
 800064a:	2300      	movs	r3, #0
 800064c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000650:	e055      	b.n	80006fe <testMemory+0x11e>
		adresse = i * 0x1000;
 8000652:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000656:	031b      	lsls	r3, r3, #12
 8000658:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
		//Daten für eine Page schicken
		writePage(writeBuffer, adresse, DUT);
 800065c:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8000660:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800066a:	cb0c      	ldmia	r3, {r2, r3}
 800066c:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8000670:	f000 fb5e 	bl	8000d30 <writePage>
		//Warten bis fertig geschrieben wurde
		writeReady(DUT);
 8000674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000678:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800067c:	f000 fc4f 	bl	8000f1e <writeReady>
		//Selbe page auslesen
		readPage(readBuffer, adresse, DUT);
 8000680:	4638      	mov	r0, r7
 8000682:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800068c:	cb0c      	ldmia	r3, {r2, r3}
 800068e:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8000692:	f000 fbbf 	bl	8000e14 <readPage>
		//Inhalt vergleichen
		for(int y = 0;y < 256;y++){
 8000696:	2300      	movs	r3, #0
 8000698:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800069c:	e013      	b.n	80006c6 <testMemory+0xe6>
			//Wenn inhalt nicht gleich
			if(writeBuffer[y] != readBuffer[y])
 800069e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80006a2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80006a6:	4413      	add	r3, r2
 80006a8:	781a      	ldrb	r2, [r3, #0]
 80006aa:	4639      	mov	r1, r7
 80006ac:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80006b0:	440b      	add	r3, r1
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d001      	beq.n	80006bc <testMemory+0xdc>
				return 1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	e026      	b.n	800070a <testMemory+0x12a>
		for(int y = 0;y < 256;y++){
 80006bc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80006c0:	3301      	adds	r3, #1
 80006c2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80006c6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80006ca:	2bff      	cmp	r3, #255	; 0xff
 80006cc:	dde7      	ble.n	800069e <testMemory+0xbe>
		}
		//readBuffer auf null initialisieren
		for(int z = 0; z<256;z++){
 80006ce:	2300      	movs	r3, #0
 80006d0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80006d4:	e00a      	b.n	80006ec <testMemory+0x10c>
			readBuffer[z] = 0;
 80006d6:	463a      	mov	r2, r7
 80006d8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80006dc:	4413      	add	r3, r2
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
		for(int z = 0; z<256;z++){
 80006e2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80006e6:	3301      	adds	r3, #1
 80006e8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80006ec:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80006f0:	2bff      	cmp	r3, #255	; 0xff
 80006f2:	ddf0      	ble.n	80006d6 <testMemory+0xf6>
	for(int i = 0; i < PAGE_COUNT; i++){
 80006f4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80006f8:	3301      	adds	r3, #1
 80006fa:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80006fe:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000702:	4a06      	ldr	r2, [pc, #24]	; (800071c <testMemory+0x13c>)
 8000704:	4293      	cmp	r3, r2
 8000706:	dda4      	ble.n	8000652 <testMemory+0x72>
			}
	}
	return 0;
 8000708:	2300      	movs	r3, #0
}
 800070a:	4618      	mov	r0, r3
 800070c:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000
 8000718:	200049a8 	.word	0x200049a8
 800071c:	0001e847 	.word	0x0001e847

08000720 <__io_putchar>:
  .priority = (osPriority_t) osPriorityNormal,
  .stack_size = 128 * 4
};
/* USER CODE BEGIN PV */
PUTCHAR_PROTOTYPE
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,(uint8_t *)&ch, 1,0xFFFF);
 8000728:	1d39      	adds	r1, r7, #4
 800072a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800072e:	2201      	movs	r2, #1
 8000730:	4803      	ldr	r0, [pc, #12]	; (8000740 <__io_putchar+0x20>)
 8000732:	f004 fa81 	bl	8004c38 <HAL_UART_Transmit>
	return ch;
 8000736:	687b      	ldr	r3, [r7, #4]
}
 8000738:	4618      	mov	r0, r3
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20004a0c 	.word	0x20004a0c

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000748:	f000 ff63 	bl	8001612 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074c:	f000 f824 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000750:	f000 f98e 	bl	8000a70 <MX_GPIO_Init>
  MX_ETH_Init();
 8000754:	f000 f8b0 	bl	80008b8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000758:	f000 f92c 	bl	80009b4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800075c:	f000 f95a 	bl	8000a14 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI5_Init();
 8000760:	f000 f8ea 	bl	8000938 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000764:	f005 f9be 	bl	8005ae4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000768:	4a07      	ldr	r2, [pc, #28]	; (8000788 <main+0x44>)
 800076a:	2100      	movs	r1, #0
 800076c:	4807      	ldr	r0, [pc, #28]	; (800078c <main+0x48>)
 800076e:	f005 fa23 	bl	8005bb8 <osThreadNew>
 8000772:	4602      	mov	r2, r0
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <main+0x4c>)
 8000776:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadNew(myMain,NULL,NULL);
 8000778:	2200      	movs	r2, #0
 800077a:	2100      	movs	r1, #0
 800077c:	4805      	ldr	r0, [pc, #20]	; (8000794 <main+0x50>)
 800077e:	f005 fa1b 	bl	8005bb8 <osThreadNew>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000782:	f005 f9e3 	bl	8005b4c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000786:	e7fe      	b.n	8000786 <main+0x42>
 8000788:	08009474 	.word	0x08009474
 800078c:	08000c11 	.word	0x08000c11
 8000790:	200049a4 	.word	0x200049a4
 8000794:	08000c55 	.word	0x08000c55

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b0b8      	sub	sp, #224	; 0xe0
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007a2:	2234      	movs	r2, #52	; 0x34
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f007 ff55 	bl	8008656 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	2290      	movs	r2, #144	; 0x90
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f007 ff46 	bl	8008656 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80007ca:	f001 ffcb 	bl	8002764 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	4b37      	ldr	r3, [pc, #220]	; (80008ac <SystemClock_Config+0x114>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	4a36      	ldr	r2, [pc, #216]	; (80008ac <SystemClock_Config+0x114>)
 80007d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d8:	6413      	str	r3, [r2, #64]	; 0x40
 80007da:	4b34      	ldr	r3, [pc, #208]	; (80008ac <SystemClock_Config+0x114>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007e6:	4b32      	ldr	r3, [pc, #200]	; (80008b0 <SystemClock_Config+0x118>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007ee:	4a30      	ldr	r2, [pc, #192]	; (80008b0 <SystemClock_Config+0x118>)
 80007f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f4:	6013      	str	r3, [r2, #0]
 80007f6:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <SystemClock_Config+0x118>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000802:	2301      	movs	r3, #1
 8000804:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000808:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800080c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000810:	2302      	movs	r3, #2
 8000812:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000816:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800081a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800081e:	2304      	movs	r3, #4
 8000820:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000824:	2390      	movs	r3, #144	; 0x90
 8000826:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082a:	2302      	movs	r3, #2
 800082c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000830:	2306      	movs	r3, #6
 8000832:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800083a:	4618      	mov	r0, r3
 800083c:	f001 ffa2 	bl	8002784 <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000846:	f000 f9fd 	bl	8000c44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000850:	2302      	movs	r3, #2
 8000852:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000856:	2380      	movs	r3, #128	; 0x80
 8000858:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000860:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000868:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800086c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000870:	2102      	movs	r1, #2
 8000872:	4618      	mov	r0, r3
 8000874:	f002 fa34 	bl	8002ce0 <HAL_RCC_ClockConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800087e:	f000 f9e1 	bl	8000c44 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <SystemClock_Config+0x11c>)
 8000884:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000886:	2300      	movs	r3, #0
 8000888:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800088a:	2300      	movs	r3, #0
 800088c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000890:	f107 0308 	add.w	r3, r7, #8
 8000894:	4618      	mov	r0, r3
 8000896:	f002 fc4d 	bl	8003134 <HAL_RCCEx_PeriphCLKConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80008a0:	f000 f9d0 	bl	8000c44 <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	37e0      	adds	r7, #224	; 0xe0
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40007000 	.word	0x40007000
 80008b4:	00200100 	.word	0x00200100

080008b8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_ETH_Init+0x78>)
 80008be:	4a1d      	ldr	r2, [pc, #116]	; (8000934 <MX_ETH_Init+0x7c>)
 80008c0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_ETH_Init+0x78>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_ETH_Init+0x78>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_ETH_Init+0x78>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <MX_ETH_Init+0x78>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	3301      	adds	r3, #1
 80008dc:	2280      	movs	r2, #128	; 0x80
 80008de:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80008e0:	4b13      	ldr	r3, [pc, #76]	; (8000930 <MX_ETH_Init+0x78>)
 80008e2:	695b      	ldr	r3, [r3, #20]
 80008e4:	3302      	adds	r3, #2
 80008e6:	22e1      	movs	r2, #225	; 0xe1
 80008e8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_ETH_Init+0x78>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	3303      	adds	r3, #3
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_ETH_Init+0x78>)
 80008f6:	695b      	ldr	r3, [r3, #20]
 80008f8:	3304      	adds	r3, #4
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_ETH_Init+0x78>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	3305      	adds	r3, #5
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_ETH_Init+0x78>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_ETH_Init+0x78>)
 8000910:	2200      	movs	r2, #0
 8000912:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_ETH_Init+0x78>)
 8000916:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800091a:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_ETH_Init+0x78>)
 800091e:	f000 ffa9 	bl	8001874 <HAL_ETH_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000928:	f000 f98c 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20004e90 	.word	0x20004e90
 8000934:	40028000 	.word	0x40028000

08000938 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800093c:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <MX_SPI5_Init+0x74>)
 800093e:	4a1c      	ldr	r2, [pc, #112]	; (80009b0 <MX_SPI5_Init+0x78>)
 8000940:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000942:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <MX_SPI5_Init+0x74>)
 8000944:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000948:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800094a:	4b18      	ldr	r3, [pc, #96]	; (80009ac <MX_SPI5_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000950:	4b16      	ldr	r3, [pc, #88]	; (80009ac <MX_SPI5_Init+0x74>)
 8000952:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000956:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <MX_SPI5_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800095e:	4b13      	ldr	r3, [pc, #76]	; (80009ac <MX_SPI5_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_SPI5_Init+0x74>)
 8000966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800096a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_SPI5_Init+0x74>)
 800096e:	2210      	movs	r2, #16
 8000970:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_SPI5_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_SPI5_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <MX_SPI5_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_SPI5_Init+0x74>)
 8000986:	2207      	movs	r2, #7
 8000988:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <MX_SPI5_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_SPI5_Init+0x74>)
 8000992:	2208      	movs	r2, #8
 8000994:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_SPI5_Init+0x74>)
 8000998:	f002 fff2 	bl	8003980 <HAL_SPI_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 80009a2:	f000 f94f 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200049a8 	.word	0x200049a8
 80009b0:	40015000 	.word	0x40015000

080009b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_USART3_UART_Init+0x58>)
 80009ba:	4a15      	ldr	r2, [pc, #84]	; (8000a10 <MX_USART3_UART_Init+0x5c>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MX_USART3_UART_Init+0x58>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <MX_USART3_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <MX_USART3_UART_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <MX_USART3_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_USART3_UART_Init+0x58>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <MX_USART3_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_USART3_UART_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <MX_USART3_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_USART3_UART_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_USART3_UART_Init+0x58>)
 80009f8:	f004 f8d0 	bl	8004b9c <HAL_UART_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a02:	f000 f91f 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20004a0c 	.word	0x20004a0c
 8000a10:	40004800 	.word	0x40004800

08000a14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a22:	2206      	movs	r2, #6
 8000a24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a28:	2202      	movs	r2, #2
 8000a2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a34:	2202      	movs	r2, #2
 8000a36:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a58:	f001 fd3b 	bl	80024d2 <HAL_PCD_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a62:	f000 f8ef 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20004a8c 	.word	0x20004a8c

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08e      	sub	sp, #56	; 0x38
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a86:	4b5c      	ldr	r3, [pc, #368]	; (8000bf8 <MX_GPIO_Init+0x188>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a5b      	ldr	r2, [pc, #364]	; (8000bf8 <MX_GPIO_Init+0x188>)
 8000a8c:	f043 0310 	orr.w	r3, r3, #16
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b59      	ldr	r3, [pc, #356]	; (8000bf8 <MX_GPIO_Init+0x188>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0310 	and.w	r3, r3, #16
 8000a9a:	623b      	str	r3, [r7, #32]
 8000a9c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9e:	4b56      	ldr	r3, [pc, #344]	; (8000bf8 <MX_GPIO_Init+0x188>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a55      	ldr	r2, [pc, #340]	; (8000bf8 <MX_GPIO_Init+0x188>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b53      	ldr	r3, [pc, #332]	; (8000bf8 <MX_GPIO_Init+0x188>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	61fb      	str	r3, [r7, #28]
 8000ab4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ab6:	4b50      	ldr	r3, [pc, #320]	; (8000bf8 <MX_GPIO_Init+0x188>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a4f      	ldr	r2, [pc, #316]	; (8000bf8 <MX_GPIO_Init+0x188>)
 8000abc:	f043 0320 	orr.w	r3, r3, #32
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b4d      	ldr	r3, [pc, #308]	; (8000bf8 <MX_GPIO_Init+0x188>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0320 	and.w	r3, r3, #32
 8000aca:	61bb      	str	r3, [r7, #24]
 8000acc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ace:	4b4a      	ldr	r3, [pc, #296]	; (8000bf8 <MX_GPIO_Init+0x188>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a49      	ldr	r2, [pc, #292]	; (8000bf8 <MX_GPIO_Init+0x188>)
 8000ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b47      	ldr	r3, [pc, #284]	; (8000bf8 <MX_GPIO_Init+0x188>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b44      	ldr	r3, [pc, #272]	; (8000bf8 <MX_GPIO_Init+0x188>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a43      	ldr	r2, [pc, #268]	; (8000bf8 <MX_GPIO_Init+0x188>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b41      	ldr	r3, [pc, #260]	; (8000bf8 <MX_GPIO_Init+0x188>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	4b3e      	ldr	r3, [pc, #248]	; (8000bf8 <MX_GPIO_Init+0x188>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a3d      	ldr	r2, [pc, #244]	; (8000bf8 <MX_GPIO_Init+0x188>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b3b      	ldr	r3, [pc, #236]	; (8000bf8 <MX_GPIO_Init+0x188>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b16:	4b38      	ldr	r3, [pc, #224]	; (8000bf8 <MX_GPIO_Init+0x188>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a37      	ldr	r2, [pc, #220]	; (8000bf8 <MX_GPIO_Init+0x188>)
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b35      	ldr	r3, [pc, #212]	; (8000bf8 <MX_GPIO_Init+0x188>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0308 	and.w	r3, r3, #8
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b2e:	4b32      	ldr	r3, [pc, #200]	; (8000bf8 <MX_GPIO_Init+0x188>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a31      	ldr	r2, [pc, #196]	; (8000bf8 <MX_GPIO_Init+0x188>)
 8000b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b2f      	ldr	r3, [pc, #188]	; (8000bf8 <MX_GPIO_Init+0x188>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_6, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2148      	movs	r1, #72	; 0x48
 8000b4a:	482c      	ldr	r0, [pc, #176]	; (8000bfc <MX_GPIO_Init+0x18c>)
 8000b4c:	f001 fca8 	bl	80024a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b56:	482a      	ldr	r0, [pc, #168]	; (8000c00 <MX_GPIO_Init+0x190>)
 8000b58:	f001 fca2 	bl	80024a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2140      	movs	r1, #64	; 0x40
 8000b60:	4828      	ldr	r0, [pc, #160]	; (8000c04 <MX_GPIO_Init+0x194>)
 8000b62:	f001 fc9d 	bl	80024a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000b66:	2348      	movs	r3, #72	; 0x48
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	481f      	ldr	r0, [pc, #124]	; (8000bfc <MX_GPIO_Init+0x18c>)
 8000b7e:	f001 fae5 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b88:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <MX_GPIO_Init+0x198>)
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b94:	4619      	mov	r1, r3
 8000b96:	481d      	ldr	r0, [pc, #116]	; (8000c0c <MX_GPIO_Init+0x19c>)
 8000b98:	f001 fad8 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b9c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4812      	ldr	r0, [pc, #72]	; (8000c00 <MX_GPIO_Init+0x190>)
 8000bb6:	f001 fac9 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bba:	2340      	movs	r3, #64	; 0x40
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480c      	ldr	r0, [pc, #48]	; (8000c04 <MX_GPIO_Init+0x194>)
 8000bd2:	f001 fabb 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bd6:	2380      	movs	r3, #128	; 0x80
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be6:	4619      	mov	r1, r3
 8000be8:	4806      	ldr	r0, [pc, #24]	; (8000c04 <MX_GPIO_Init+0x194>)
 8000bea:	f001 faaf 	bl	800214c <HAL_GPIO_Init>

}
 8000bee:	bf00      	nop
 8000bf0:	3738      	adds	r7, #56	; 0x38
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40020400 	.word	0x40020400
 8000c04:	40021800 	.word	0x40021800
 8000c08:	10110000 	.word	0x10110000
 8000c0c:	40020800 	.word	0x40020800

08000c10 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f005 f873 	bl	8005d04 <osDelay>
 8000c1e:	e7fb      	b.n	8000c18 <StartDefaultTask+0x8>

08000c20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d101      	bne.n	8000c36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c32:	f000 fcfb 	bl	800162c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40002000 	.word	0x40002000

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <myMain>:

//SPI Daten
//uint8_t writeBuffer[256];
//uint8_t readBuffer[256];

void myMain(void * args){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
//	test.CS_Port = GPIOE;
//	test.spihandle = &hspi5;
	//////////////////////////////////////////////////////////////////////////////////

	//CS 1+2 auf HIGH
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2108      	movs	r1, #8
 8000c60:	480b      	ldr	r0, [pc, #44]	; (8000c90 <myMain+0x3c>)
 8000c62:	f001 fc1d 	bl	80024a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	2140      	movs	r1, #64	; 0x40
 8000c6a:	4809      	ldr	r0, [pc, #36]	; (8000c90 <myMain+0x3c>)
 8000c6c:	f001 fc18 	bl	80024a0 <HAL_GPIO_WritePin>

	osThreadNew(myStillAlive,NULL,NULL);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2100      	movs	r1, #0
 8000c74:	4807      	ldr	r0, [pc, #28]	; (8000c94 <myMain+0x40>)
 8000c76:	f004 ff9f 	bl	8005bb8 <osThreadNew>


	printf("%ld ", testMemory());
 8000c7a:	f7ff fcb1 	bl	80005e0 <testMemory>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	4619      	mov	r1, r3
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <myMain+0x44>)
 8000c84:	f007 fcf0 	bl	8008668 <iprintf>
	while(1){
		osDelay(1);
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f005 f83b 	bl	8005d04 <osDelay>
 8000c8e:	e7fb      	b.n	8000c88 <myMain+0x34>
 8000c90:	40021000 	.word	0x40021000
 8000c94:	08001545 	.word	0x08001545
 8000c98:	08009454 	.word	0x08009454

08000c9c <readStatus>:
#include <stdbool.h>

uint8_t tmp_add;

uint8_t readStatus(SPI_Values SPI_val)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t	data;
	uint8_t command = 0x05;
 8000ca8:	2305      	movs	r3, #5
 8000caa:	75bb      	strb	r3, [r7, #22]
	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	8939      	ldrh	r1, [r7, #8]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f001 fbf4 	bl	80024a0 <HAL_GPIO_WritePin>
	//send command
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f107 0116 	add.w	r1, r7, #22
 8000cbe:	230a      	movs	r3, #10
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f002 feef 	bl	8003aa4 <HAL_SPI_Transmit>
	//read data from status register
	HAL_SPI_Receive(SPI_val.spihandle, &data, 1, 10);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f107 0117 	add.w	r1, r7, #23
 8000ccc:	230a      	movs	r3, #10
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f003 f84e 	bl	8003d70 <HAL_SPI_Receive>
	//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	8939      	ldrh	r1, [r7, #8]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f001 fbe0 	bl	80024a0 <HAL_GPIO_WritePin>
	return data;
 8000ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <writeByte>:

//send one Byte to spi
int writeByte(uint8_t data,SPI_Values SPI_val)
{
 8000cea:	b590      	push	{r4, r7, lr}
 8000cec:	b087      	sub	sp, #28
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4604      	mov	r4, r0
 8000cf2:	4638      	mov	r0, r7
 8000cf4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000cf8:	4623      	mov	r3, r4
 8000cfa:	73fb      	strb	r3, [r7, #15]
	uint8_t command = data;
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	75fb      	strb	r3, [r7, #23]
	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	88b9      	ldrh	r1, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 fbca 	bl	80024a0 <HAL_GPIO_WritePin>
	//Ausgabe lesen
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 8000d0c:	6838      	ldr	r0, [r7, #0]
 8000d0e:	f107 0117 	add.w	r1, r7, #23
 8000d12:	230a      	movs	r3, #10
 8000d14:	2201      	movs	r2, #1
 8000d16:	f002 fec5 	bl	8003aa4 <HAL_SPI_Transmit>
	//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	88b9      	ldrh	r1, [r7, #4]
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4618      	mov	r0, r3
 8000d22:	f001 fbbd 	bl	80024a0 <HAL_GPIO_WritePin>
	return 0;
 8000d26:	2300      	movs	r3, #0
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	371c      	adds	r7, #28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd90      	pop	{r4, r7, pc}

08000d30 <writePage>:



int writePage(uint8_t *data, uint32_t address, SPI_Values SPI_val){
 8000d30:	b082      	sub	sp, #8
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b084      	sub	sp, #16
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	6039      	str	r1, [r7, #0]
 8000d3c:	f107 0118 	add.w	r1, r7, #24
 8000d40:	e881 000c 	stmia.w	r1, {r2, r3}

	uint8_t command = c_WRITEPAGE;
 8000d44:	2312      	movs	r3, #18
 8000d46:	72fb      	strb	r3, [r7, #11]
	uint8_t tmp_add;

	//Write enable
	writeByte(c_WREN, SPI_val);
 8000d48:	f107 0318 	add.w	r3, r7, #24
 8000d4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d4e:	2006      	movs	r0, #6
 8000d50:	f7ff ffcb 	bl	8000cea <writeByte>

	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 8000d54:	6a3b      	ldr	r3, [r7, #32]
 8000d56:	8bb9      	ldrh	r1, [r7, #28]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f001 fba0 	bl	80024a0 <HAL_GPIO_WritePin>

	//commando schicken
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 8000d60:	69b8      	ldr	r0, [r7, #24]
 8000d62:	f107 010b 	add.w	r1, r7, #11
 8000d66:	230a      	movs	r3, #10
 8000d68:	2201      	movs	r2, #1
 8000d6a:	f002 fe9b 	bl	8003aa4 <HAL_SPI_Transmit>
	osDelay(10);
 8000d6e:	200a      	movs	r0, #10
 8000d70:	f004 ffc8 	bl	8005d04 <osDelay>
	//Addressse schicken MSB to LSB
	tmp_add = (uint8_t)((address >> 24) & 0x000000FF);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	0e1b      	lsrs	r3, r3, #24
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000d7c:	69b8      	ldr	r0, [r7, #24]
 8000d7e:	f107 010a 	add.w	r1, r7, #10
 8000d82:	230a      	movs	r3, #10
 8000d84:	2201      	movs	r2, #1
 8000d86:	f002 fe8d 	bl	8003aa4 <HAL_SPI_Transmit>
	tmp_add = (uint8_t)((address >> 16) & 0x000000FF);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	0c1b      	lsrs	r3, r3, #16
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000d92:	69b8      	ldr	r0, [r7, #24]
 8000d94:	f107 010a 	add.w	r1, r7, #10
 8000d98:	230a      	movs	r3, #10
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f002 fe82 	bl	8003aa4 <HAL_SPI_Transmit>
	tmp_add = (uint8_t)((address >> 8)  & 0x000000FF);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	0a1b      	lsrs	r3, r3, #8
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000da8:	69b8      	ldr	r0, [r7, #24]
 8000daa:	f107 010a 	add.w	r1, r7, #10
 8000dae:	230a      	movs	r3, #10
 8000db0:	2201      	movs	r2, #1
 8000db2:	f002 fe77 	bl	8003aa4 <HAL_SPI_Transmit>
	tmp_add = (uint8_t)( address        & 0x000000FF);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000dbc:	69b8      	ldr	r0, [r7, #24]
 8000dbe:	f107 010a 	add.w	r1, r7, #10
 8000dc2:	230a      	movs	r3, #10
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f002 fe6d 	bl	8003aa4 <HAL_SPI_Transmit>

	//Daten schicken
	for (int i = 0; i < 256; i++)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	e00a      	b.n	8000de6 <writePage+0xb6>
	{
		HAL_SPI_Transmit(SPI_val.spihandle, &data[i], 1, 10);
 8000dd0:	69b8      	ldr	r0, [r7, #24]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	18d1      	adds	r1, r2, r3
 8000dd8:	230a      	movs	r3, #10
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f002 fe62 	bl	8003aa4 <HAL_SPI_Transmit>
	for (int i = 0; i < 256; i++)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	3301      	adds	r3, #1
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2bff      	cmp	r3, #255	; 0xff
 8000dea:	ddf1      	ble.n	8000dd0 <writePage+0xa0>
	}

	//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 8000dec:	6a3b      	ldr	r3, [r7, #32]
 8000dee:	8bb9      	ldrh	r1, [r7, #28]
 8000df0:	2201      	movs	r2, #1
 8000df2:	4618      	mov	r0, r3
 8000df4:	f001 fb54 	bl	80024a0 <HAL_GPIO_WritePin>

	//Write disable
	writeByte(c_WRDI, SPI_val);
 8000df8:	f107 0318 	add.w	r3, r7, #24
 8000dfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dfe:	2004      	movs	r0, #4
 8000e00:	f7ff ff73 	bl	8000cea <writeByte>
	return 0;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e10:	b002      	add	sp, #8
 8000e12:	4770      	bx	lr

08000e14 <readPage>:

int readPage(uint8_t *data, uint32_t address,  SPI_Values SPI_val){
 8000e14:	b082      	sub	sp, #8
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b084      	sub	sp, #16
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	6039      	str	r1, [r7, #0]
 8000e20:	f107 0118 	add.w	r1, r7, #24
 8000e24:	e881 000c 	stmia.w	r1, {r2, r3}

	uint8_t command = c_READ;
 8000e28:	2313      	movs	r3, #19
 8000e2a:	72fb      	strb	r3, [r7, #11]

	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 8000e2c:	6a3b      	ldr	r3, [r7, #32]
 8000e2e:	8bb9      	ldrh	r1, [r7, #28]
 8000e30:	2200      	movs	r2, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 fb34 	bl	80024a0 <HAL_GPIO_WritePin>

	//commando schicken
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 8000e38:	69b8      	ldr	r0, [r7, #24]
 8000e3a:	f107 010b 	add.w	r1, r7, #11
 8000e3e:	230a      	movs	r3, #10
 8000e40:	2201      	movs	r2, #1
 8000e42:	f002 fe2f 	bl	8003aa4 <HAL_SPI_Transmit>

	//4 Byte Addressse schicken MSB to LSB
	tmp_add = (uint8_t)((address >> 24) & 0x000000FF);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	0e1b      	lsrs	r3, r3, #24
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	4b23      	ldr	r3, [pc, #140]	; (8000edc <readPage+0xc8>)
 8000e4e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000e50:	69b8      	ldr	r0, [r7, #24]
 8000e52:	230a      	movs	r3, #10
 8000e54:	2201      	movs	r2, #1
 8000e56:	4921      	ldr	r1, [pc, #132]	; (8000edc <readPage+0xc8>)
 8000e58:	f002 fe24 	bl	8003aa4 <HAL_SPI_Transmit>
	tmp_add = (uint8_t)((address >> 16) & 0x000000FF);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	0c1b      	lsrs	r3, r3, #16
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <readPage+0xc8>)
 8000e64:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000e66:	69b8      	ldr	r0, [r7, #24]
 8000e68:	230a      	movs	r3, #10
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	491b      	ldr	r1, [pc, #108]	; (8000edc <readPage+0xc8>)
 8000e6e:	f002 fe19 	bl	8003aa4 <HAL_SPI_Transmit>
	tmp_add = (uint8_t)((address >> 8)  & 0x000000FF);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	4b18      	ldr	r3, [pc, #96]	; (8000edc <readPage+0xc8>)
 8000e7a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000e7c:	69b8      	ldr	r0, [r7, #24]
 8000e7e:	230a      	movs	r3, #10
 8000e80:	2201      	movs	r2, #1
 8000e82:	4916      	ldr	r1, [pc, #88]	; (8000edc <readPage+0xc8>)
 8000e84:	f002 fe0e 	bl	8003aa4 <HAL_SPI_Transmit>
	tmp_add = (uint8_t)( address        & 0x000000FF);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	4b13      	ldr	r3, [pc, #76]	; (8000edc <readPage+0xc8>)
 8000e8e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000e90:	69b8      	ldr	r0, [r7, #24]
 8000e92:	230a      	movs	r3, #10
 8000e94:	2201      	movs	r2, #1
 8000e96:	4911      	ldr	r1, [pc, #68]	; (8000edc <readPage+0xc8>)
 8000e98:	f002 fe04 	bl	8003aa4 <HAL_SPI_Transmit>

	//Daten lesen
	for (int i = 0; i < 256; i++)
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	e00a      	b.n	8000eb8 <readPage+0xa4>
	{
		HAL_SPI_Receive(SPI_val.spihandle, &data[i], 1, 10);
 8000ea2:	69b8      	ldr	r0, [r7, #24]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	18d1      	adds	r1, r2, r3
 8000eaa:	230a      	movs	r3, #10
 8000eac:	2201      	movs	r2, #1
 8000eae:	f002 ff5f 	bl	8003d70 <HAL_SPI_Receive>
	for (int i = 0; i < 256; i++)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2bff      	cmp	r3, #255	; 0xff
 8000ebc:	ddf1      	ble.n	8000ea2 <readPage+0x8e>
	}

	//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 8000ebe:	6a3b      	ldr	r3, [r7, #32]
 8000ec0:	8bb9      	ldrh	r1, [r7, #28]
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f001 faeb 	bl	80024a0 <HAL_GPIO_WritePin>

	return 0;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ed6:	b002      	add	sp, #8
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20004ed8 	.word	0x20004ed8

08000ee0 <chipErase>:

int chipErase(SPI_Values SPI_val){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Write enable
	writeByte(c_WREN,SPI_val);
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ef0:	2006      	movs	r0, #6
 8000ef2:	f7ff fefa 	bl	8000cea <writeByte>
	//erase chip
	writeByte(c_CE,SPI_val);
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000efa:	20c7      	movs	r0, #199	; 0xc7
 8000efc:	f7ff fef5 	bl	8000cea <writeByte>
	//Write Disable
	writeByte(c_WRDI,SPI_val);
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f04:	2004      	movs	r0, #4
 8000f06:	f7ff fef0 	bl	8000cea <writeByte>
	//warte bis Schreiben beendet ist
	writeReady(SPI_val);
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f10:	f000 f805 	bl	8000f1e <writeReady>

	return 0;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <writeReady>:
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);

	return 0;
}

void writeReady(SPI_Values SPI_val){
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	bool status = false;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	75fb      	strb	r3, [r7, #23]
	uint8_t SR1 = 0xF;
 8000f2e:	230f      	movs	r3, #15
 8000f30:	75bb      	strb	r3, [r7, #22]
	while(status == false)
 8000f32:	e00d      	b.n	8000f50 <writeReady+0x32>
	{
		SR1 = readStatus(SPI_val);
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f3a:	f7ff feaf 	bl	8000c9c <readStatus>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	75bb      	strb	r3, [r7, #22]
		if((SR1 & 0x1) == 0)
 8000f42:	7dbb      	ldrb	r3, [r7, #22]
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <writeReady+0x32>
			status = true;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	75fb      	strb	r3, [r7, #23]
	while(status == false)
 8000f50:	7dfb      	ldrb	r3, [r7, #23]
 8000f52:	f083 0301 	eor.w	r3, r3, #1
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1eb      	bne.n	8000f34 <writeReady+0x16>
	}
}
 8000f5c:	bf00      	nop
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a10      	ldr	r2, [pc, #64]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <HAL_MspInit+0x4c>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	210f      	movs	r1, #15
 8000f9e:	f06f 0001 	mvn.w	r0, #1
 8000fa2:	f000 fc3d 	bl	8001820 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800

08000fb4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08e      	sub	sp, #56	; 0x38
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a4e      	ldr	r2, [pc, #312]	; (800110c <HAL_ETH_MspInit+0x158>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	f040 8096 	bne.w	8001104 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000fd8:	4b4d      	ldr	r3, [pc, #308]	; (8001110 <HAL_ETH_MspInit+0x15c>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	4a4c      	ldr	r2, [pc, #304]	; (8001110 <HAL_ETH_MspInit+0x15c>)
 8000fde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe4:	4b4a      	ldr	r3, [pc, #296]	; (8001110 <HAL_ETH_MspInit+0x15c>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fec:	623b      	str	r3, [r7, #32]
 8000fee:	6a3b      	ldr	r3, [r7, #32]
 8000ff0:	4b47      	ldr	r3, [pc, #284]	; (8001110 <HAL_ETH_MspInit+0x15c>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	4a46      	ldr	r2, [pc, #280]	; (8001110 <HAL_ETH_MspInit+0x15c>)
 8000ff6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ffa:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffc:	4b44      	ldr	r3, [pc, #272]	; (8001110 <HAL_ETH_MspInit+0x15c>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001004:	61fb      	str	r3, [r7, #28]
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	4b41      	ldr	r3, [pc, #260]	; (8001110 <HAL_ETH_MspInit+0x15c>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	4a40      	ldr	r2, [pc, #256]	; (8001110 <HAL_ETH_MspInit+0x15c>)
 800100e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001012:	6313      	str	r3, [r2, #48]	; 0x30
 8001014:	4b3e      	ldr	r3, [pc, #248]	; (8001110 <HAL_ETH_MspInit+0x15c>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800101c:	61bb      	str	r3, [r7, #24]
 800101e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001020:	4b3b      	ldr	r3, [pc, #236]	; (8001110 <HAL_ETH_MspInit+0x15c>)
 8001022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001024:	4a3a      	ldr	r2, [pc, #232]	; (8001110 <HAL_ETH_MspInit+0x15c>)
 8001026:	f043 0304 	orr.w	r3, r3, #4
 800102a:	6313      	str	r3, [r2, #48]	; 0x30
 800102c:	4b38      	ldr	r3, [pc, #224]	; (8001110 <HAL_ETH_MspInit+0x15c>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	f003 0304 	and.w	r3, r3, #4
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001038:	4b35      	ldr	r3, [pc, #212]	; (8001110 <HAL_ETH_MspInit+0x15c>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	4a34      	ldr	r2, [pc, #208]	; (8001110 <HAL_ETH_MspInit+0x15c>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	6313      	str	r3, [r2, #48]	; 0x30
 8001044:	4b32      	ldr	r3, [pc, #200]	; (8001110 <HAL_ETH_MspInit+0x15c>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001050:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <HAL_ETH_MspInit+0x15c>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	4a2e      	ldr	r2, [pc, #184]	; (8001110 <HAL_ETH_MspInit+0x15c>)
 8001056:	f043 0302 	orr.w	r3, r3, #2
 800105a:	6313      	str	r3, [r2, #48]	; 0x30
 800105c:	4b2c      	ldr	r3, [pc, #176]	; (8001110 <HAL_ETH_MspInit+0x15c>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001068:	4b29      	ldr	r3, [pc, #164]	; (8001110 <HAL_ETH_MspInit+0x15c>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106c:	4a28      	ldr	r2, [pc, #160]	; (8001110 <HAL_ETH_MspInit+0x15c>)
 800106e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001072:	6313      	str	r3, [r2, #48]	; 0x30
 8001074:	4b26      	ldr	r3, [pc, #152]	; (8001110 <HAL_ETH_MspInit+0x15c>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001080:	2332      	movs	r3, #50	; 0x32
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108c:	2303      	movs	r3, #3
 800108e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001090:	230b      	movs	r3, #11
 8001092:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001098:	4619      	mov	r1, r3
 800109a:	481e      	ldr	r0, [pc, #120]	; (8001114 <HAL_ETH_MspInit+0x160>)
 800109c:	f001 f856 	bl	800214c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80010a0:	2386      	movs	r3, #134	; 0x86
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010b0:	230b      	movs	r3, #11
 80010b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b8:	4619      	mov	r1, r3
 80010ba:	4817      	ldr	r0, [pc, #92]	; (8001118 <HAL_ETH_MspInit+0x164>)
 80010bc:	f001 f846 	bl	800214c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80010c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ce:	2303      	movs	r3, #3
 80010d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010d2:	230b      	movs	r3, #11
 80010d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010da:	4619      	mov	r1, r3
 80010dc:	480f      	ldr	r0, [pc, #60]	; (800111c <HAL_ETH_MspInit+0x168>)
 80010de:	f001 f835 	bl	800214c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010e2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f0:	2303      	movs	r3, #3
 80010f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010f4:	230b      	movs	r3, #11
 80010f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fc:	4619      	mov	r1, r3
 80010fe:	4808      	ldr	r0, [pc, #32]	; (8001120 <HAL_ETH_MspInit+0x16c>)
 8001100:	f001 f824 	bl	800214c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001104:	bf00      	nop
 8001106:	3738      	adds	r7, #56	; 0x38
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40028000 	.word	0x40028000
 8001110:	40023800 	.word	0x40023800
 8001114:	40020800 	.word	0x40020800
 8001118:	40020000 	.word	0x40020000
 800111c:	40020400 	.word	0x40020400
 8001120:	40021800 	.word	0x40021800

08001124 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a17      	ldr	r2, [pc, #92]	; (80011a0 <HAL_SPI_MspInit+0x7c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d128      	bne.n	8001198 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <HAL_SPI_MspInit+0x80>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a16      	ldr	r2, [pc, #88]	; (80011a4 <HAL_SPI_MspInit+0x80>)
 800114c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <HAL_SPI_MspInit+0x80>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <HAL_SPI_MspInit+0x80>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a10      	ldr	r2, [pc, #64]	; (80011a4 <HAL_SPI_MspInit+0x80>)
 8001164:	f043 0320 	orr.w	r3, r3, #32
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <HAL_SPI_MspInit+0x80>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0320 	and.w	r3, r3, #32
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001176:	f44f 7360 	mov.w	r3, #896	; 0x380
 800117a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001188:	2305      	movs	r3, #5
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <HAL_SPI_MspInit+0x84>)
 8001194:	f000 ffda 	bl	800214c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	; 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40015000 	.word	0x40015000
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40021400 	.word	0x40021400

080011ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a17      	ldr	r2, [pc, #92]	; (8001228 <HAL_UART_MspInit+0x7c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d128      	bne.n	8001220 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <HAL_UART_MspInit+0x80>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a16      	ldr	r2, [pc, #88]	; (800122c <HAL_UART_MspInit+0x80>)
 80011d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_UART_MspInit+0x80>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <HAL_UART_MspInit+0x80>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a10      	ldr	r2, [pc, #64]	; (800122c <HAL_UART_MspInit+0x80>)
 80011ec:	f043 0308 	orr.w	r3, r3, #8
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <HAL_UART_MspInit+0x80>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120c:	2303      	movs	r3, #3
 800120e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001210:	2307      	movs	r3, #7
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4619      	mov	r1, r3
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <HAL_UART_MspInit+0x84>)
 800121c:	f000 ff96 	bl	800214c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001220:	bf00      	nop
 8001222:	3728      	adds	r7, #40	; 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40004800 	.word	0x40004800
 800122c:	40023800 	.word	0x40023800
 8001230:	40020c00 	.word	0x40020c00

08001234 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001254:	d141      	bne.n	80012da <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <HAL_PCD_MspInit+0xb0>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a22      	ldr	r2, [pc, #136]	; (80012e4 <HAL_PCD_MspInit+0xb0>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <HAL_PCD_MspInit+0xb0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800126e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001280:	230a      	movs	r3, #10
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4619      	mov	r1, r3
 800128a:	4817      	ldr	r0, [pc, #92]	; (80012e8 <HAL_PCD_MspInit+0xb4>)
 800128c:	f000 ff5e 	bl	800214c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	4810      	ldr	r0, [pc, #64]	; (80012e8 <HAL_PCD_MspInit+0xb4>)
 80012a6:	f000 ff51 	bl	800214c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <HAL_PCD_MspInit+0xb0>)
 80012ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ae:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <HAL_PCD_MspInit+0xb0>)
 80012b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b4:	6353      	str	r3, [r2, #52]	; 0x34
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_PCD_MspInit+0xb0>)
 80012b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HAL_PCD_MspInit+0xb0>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <HAL_PCD_MspInit+0xb0>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_PCD_MspInit+0xb0>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012da:	bf00      	nop
 80012dc:	3728      	adds	r7, #40	; 0x28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40020000 	.word	0x40020000

080012ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08c      	sub	sp, #48	; 0x30
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 80012fc:	2200      	movs	r2, #0
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	202d      	movs	r0, #45	; 0x2d
 8001302:	f000 fa8d 	bl	8001820 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 8001306:	202d      	movs	r0, #45	; 0x2d
 8001308:	f000 faa6 	bl	8001858 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800130c:	4b1f      	ldr	r3, [pc, #124]	; (800138c <HAL_InitTick+0xa0>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	4a1e      	ldr	r2, [pc, #120]	; (800138c <HAL_InitTick+0xa0>)
 8001312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001316:	6413      	str	r3, [r2, #64]	; 0x40
 8001318:	4b1c      	ldr	r3, [pc, #112]	; (800138c <HAL_InitTick+0xa0>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001324:	f107 0210 	add.w	r2, r7, #16
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4611      	mov	r1, r2
 800132e:	4618      	mov	r0, r3
 8001330:	f001 fece 	bl	80030d0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001334:	f001 fea4 	bl	8003080 <HAL_RCC_GetPCLK1Freq>
 8001338:	4603      	mov	r3, r0
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001340:	4a13      	ldr	r2, [pc, #76]	; (8001390 <HAL_InitTick+0xa4>)
 8001342:	fba2 2303 	umull	r2, r3, r2, r3
 8001346:	0c9b      	lsrs	r3, r3, #18
 8001348:	3b01      	subs	r3, #1
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <HAL_InitTick+0xa8>)
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <HAL_InitTick+0xac>)
 8001350:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <HAL_InitTick+0xa8>)
 8001354:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001358:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <HAL_InitTick+0xa8>)
 800135c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135e:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <HAL_InitTick+0xa8>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <HAL_InitTick+0xa8>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 800136c:	4809      	ldr	r0, [pc, #36]	; (8001394 <HAL_InitTick+0xa8>)
 800136e:	f003 f9af 	bl	80046d0 <HAL_TIM_Base_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d104      	bne.n	8001382 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001378:	4806      	ldr	r0, [pc, #24]	; (8001394 <HAL_InitTick+0xa8>)
 800137a:	f003 f9df 	bl	800473c <HAL_TIM_Base_Start_IT>
 800137e:	4603      	mov	r3, r0
 8001380:	e000      	b.n	8001384 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	3730      	adds	r7, #48	; 0x30
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40023800 	.word	0x40023800
 8001390:	431bde83 	.word	0x431bde83
 8001394:	20004edc 	.word	0x20004edc
 8001398:	40002000 	.word	0x40002000

0800139c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <HardFault_Handler+0x4>

080013b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <MemManage_Handler+0x4>

080013b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <BusFault_Handler+0x4>

080013bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <UsageFault_Handler+0x4>

080013c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80013d4:	4802      	ldr	r0, [pc, #8]	; (80013e0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80013d6:	f003 f9db 	bl	8004790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20004edc 	.word	0x20004edc

080013e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	e00a      	b.n	800140c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013f6:	f3af 8000 	nop.w
 80013fa:	4601      	mov	r1, r0
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	60ba      	str	r2, [r7, #8]
 8001402:	b2ca      	uxtb	r2, r1
 8001404:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3301      	adds	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	429a      	cmp	r2, r3
 8001412:	dbf0      	blt.n	80013f6 <_read+0x12>
	}

return len;
 8001414:	687b      	ldr	r3, [r7, #4]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	e009      	b.n	8001444 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	60ba      	str	r2, [r7, #8]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f971 	bl	8000720 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	3301      	adds	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	429a      	cmp	r2, r3
 800144a:	dbf1      	blt.n	8001430 <_write+0x12>
	}
	return len;
 800144c:	687b      	ldr	r3, [r7, #4]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <_close>:

int _close(int file)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
	return -1;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800147e:	605a      	str	r2, [r3, #4]
	return 0;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <_isatty>:

int _isatty(int file)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
	return 1;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
	return 0;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <_sbrk+0x50>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <_sbrk+0x16>
		heap_end = &end;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <_sbrk+0x50>)
 80014d2:	4a10      	ldr	r2, [pc, #64]	; (8001514 <_sbrk+0x54>)
 80014d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <_sbrk+0x50>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <_sbrk+0x50>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4413      	add	r3, r2
 80014e4:	466a      	mov	r2, sp
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d907      	bls.n	80014fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80014ea:	f007 f87f 	bl	80085ec <__errno>
 80014ee:	4602      	mov	r2, r0
 80014f0:	230c      	movs	r3, #12
 80014f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80014f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014f8:	e006      	b.n	8001508 <_sbrk+0x48>
	}

	heap_end += incr;
 80014fa:	4b05      	ldr	r3, [pc, #20]	; (8001510 <_sbrk+0x50>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	4a03      	ldr	r2, [pc, #12]	; (8001510 <_sbrk+0x50>)
 8001504:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001506:	68fb      	ldr	r3, [r7, #12]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000090 	.word	0x20000090
 8001514:	20004f68 	.word	0x20004f68

08001518 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <SystemInit+0x28>)
 800151e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001522:	4a07      	ldr	r2, [pc, #28]	; (8001540 <SystemInit+0x28>)
 8001524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <SystemInit+0x28>)
 800152e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001532:	609a      	str	r2, [r3, #8]
#endif
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <myStillAlive>:
 *      Author: tobias
 */
#include "main.h"
#include "cmsis_os.h"

void myStillAlive(void * argument){
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800154c:	2201      	movs	r2, #1
 800154e:	2101      	movs	r1, #1
 8001550:	481a      	ldr	r0, [pc, #104]	; (80015bc <myStillAlive+0x78>)
 8001552:	f000 ffa5 	bl	80024a0 <HAL_GPIO_WritePin>
		osDelay(200);
 8001556:	20c8      	movs	r0, #200	; 0xc8
 8001558:	f004 fbd4 	bl	8005d04 <osDelay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800155c:	2200      	movs	r2, #0
 800155e:	2101      	movs	r1, #1
 8001560:	4816      	ldr	r0, [pc, #88]	; (80015bc <myStillAlive+0x78>)
 8001562:	f000 ff9d 	bl	80024a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001566:	2201      	movs	r2, #1
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	4814      	ldr	r0, [pc, #80]	; (80015bc <myStillAlive+0x78>)
 800156c:	f000 ff98 	bl	80024a0 <HAL_GPIO_WritePin>
		osDelay(200);
 8001570:	20c8      	movs	r0, #200	; 0xc8
 8001572:	f004 fbc7 	bl	8005d04 <osDelay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	2180      	movs	r1, #128	; 0x80
 800157a:	4810      	ldr	r0, [pc, #64]	; (80015bc <myStillAlive+0x78>)
 800157c:	f000 ff90 	bl	80024a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001580:	2201      	movs	r2, #1
 8001582:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001586:	480d      	ldr	r0, [pc, #52]	; (80015bc <myStillAlive+0x78>)
 8001588:	f000 ff8a 	bl	80024a0 <HAL_GPIO_WritePin>
		osDelay(200);
 800158c:	20c8      	movs	r0, #200	; 0xc8
 800158e:	f004 fbb9 	bl	8005d04 <osDelay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001598:	4808      	ldr	r0, [pc, #32]	; (80015bc <myStillAlive+0x78>)
 800159a:	f000 ff81 	bl	80024a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800159e:	2201      	movs	r2, #1
 80015a0:	2180      	movs	r1, #128	; 0x80
 80015a2:	4806      	ldr	r0, [pc, #24]	; (80015bc <myStillAlive+0x78>)
 80015a4:	f000 ff7c 	bl	80024a0 <HAL_GPIO_WritePin>
		osDelay(200);
 80015a8:	20c8      	movs	r0, #200	; 0xc8
 80015aa:	f004 fbab 	bl	8005d04 <osDelay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2180      	movs	r1, #128	; 0x80
 80015b2:	4802      	ldr	r0, [pc, #8]	; (80015bc <myStillAlive+0x78>)
 80015b4:	f000 ff74 	bl	80024a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80015b8:	e7c8      	b.n	800154c <myStillAlive+0x8>
 80015ba:	bf00      	nop
 80015bc:	40020400 	.word	0x40020400

080015c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015c6:	e003      	b.n	80015d0 <LoopCopyDataInit>

080015c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015ce:	3104      	adds	r1, #4

080015d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015d0:	480b      	ldr	r0, [pc, #44]	; (8001600 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015d2:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015d8:	d3f6      	bcc.n	80015c8 <CopyDataInit>
  ldr  r2, =_sbss
 80015da:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015dc:	e002      	b.n	80015e4 <LoopFillZerobss>

080015de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015e0:	f842 3b04 	str.w	r3, [r2], #4

080015e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015e8:	d3f9      	bcc.n	80015de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015ea:	f7ff ff95 	bl	8001518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ee:	f007 f803 	bl	80085f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f2:	f7ff f8a7 	bl	8000744 <main>
  bx  lr    
 80015f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015f8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80015fc:	08009558 	.word	0x08009558
  ldr  r0, =_sdata
 8001600:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001604:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001608:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800160c:	20004f64 	.word	0x20004f64

08001610 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001610:	e7fe      	b.n	8001610 <ADC_IRQHandler>

08001612 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001616:	2003      	movs	r0, #3
 8001618:	f000 f8f7 	bl	800180a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800161c:	2000      	movs	r0, #0
 800161e:	f7ff fe65 	bl	80012ec <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001622:	f7ff fc9f 	bl	8000f64 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_IncTick+0x20>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_IncTick+0x24>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4413      	add	r3, r2
 800163c:	4a04      	ldr	r2, [pc, #16]	; (8001650 <HAL_IncTick+0x24>)
 800163e:	6013      	str	r3, [r2, #0]
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000008 	.word	0x20000008
 8001650:	20004f1c 	.word	0x20004f1c

08001654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return uwTick;
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <HAL_GetTick+0x14>)
 800165a:	681b      	ldr	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20004f1c 	.word	0x20004f1c

0800166c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001674:	f7ff ffee 	bl	8001654 <HAL_GetTick>
 8001678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001684:	d005      	beq.n	8001692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_Delay+0x40>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001692:	bf00      	nop
 8001694:	f7ff ffde 	bl	8001654 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d8f7      	bhi.n	8001694 <HAL_Delay+0x28>
  {
  }
}
 80016a4:	bf00      	nop
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000008 	.word	0x20000008

080016b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <__NVIC_SetPriorityGrouping+0x40>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016cc:	4013      	ands	r3, r2
 80016ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016de:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <__NVIC_SetPriorityGrouping+0x40>)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	60d3      	str	r3, [r2, #12]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000ed00 	.word	0xe000ed00
 80016f4:	05fa0000 	.word	0x05fa0000

080016f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <__NVIC_GetPriorityGrouping+0x18>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	0a1b      	lsrs	r3, r3, #8
 8001702:	f003 0307 	and.w	r3, r3, #7
}
 8001706:	4618      	mov	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	2b00      	cmp	r3, #0
 8001724:	db0b      	blt.n	800173e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	f003 021f 	and.w	r2, r3, #31
 800172c:	4907      	ldr	r1, [pc, #28]	; (800174c <__NVIC_EnableIRQ+0x38>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	2001      	movs	r0, #1
 8001736:	fa00 f202 	lsl.w	r2, r0, r2
 800173a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000e100 	.word	0xe000e100

08001750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	6039      	str	r1, [r7, #0]
 800175a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001760:	2b00      	cmp	r3, #0
 8001762:	db0a      	blt.n	800177a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	b2da      	uxtb	r2, r3
 8001768:	490c      	ldr	r1, [pc, #48]	; (800179c <__NVIC_SetPriority+0x4c>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	0112      	lsls	r2, r2, #4
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	440b      	add	r3, r1
 8001774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001778:	e00a      	b.n	8001790 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4908      	ldr	r1, [pc, #32]	; (80017a0 <__NVIC_SetPriority+0x50>)
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	3b04      	subs	r3, #4
 8001788:	0112      	lsls	r2, r2, #4
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	440b      	add	r3, r1
 800178e:	761a      	strb	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000e100 	.word	0xe000e100
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b089      	sub	sp, #36	; 0x24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f1c3 0307 	rsb	r3, r3, #7
 80017be:	2b04      	cmp	r3, #4
 80017c0:	bf28      	it	cs
 80017c2:	2304      	movcs	r3, #4
 80017c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3304      	adds	r3, #4
 80017ca:	2b06      	cmp	r3, #6
 80017cc:	d902      	bls.n	80017d4 <NVIC_EncodePriority+0x30>
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3b03      	subs	r3, #3
 80017d2:	e000      	b.n	80017d6 <NVIC_EncodePriority+0x32>
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43da      	mvns	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	401a      	ands	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	43d9      	mvns	r1, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	4313      	orrs	r3, r2
         );
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3724      	adds	r7, #36	; 0x24
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff ff4c 	bl	80016b0 <__NVIC_SetPriorityGrouping>
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001832:	f7ff ff61 	bl	80016f8 <__NVIC_GetPriorityGrouping>
 8001836:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	68b9      	ldr	r1, [r7, #8]
 800183c:	6978      	ldr	r0, [r7, #20]
 800183e:	f7ff ffb1 	bl	80017a4 <NVIC_EncodePriority>
 8001842:	4602      	mov	r2, r0
 8001844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001848:	4611      	mov	r1, r2
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ff80 	bl	8001750 <__NVIC_SetPriority>
}
 8001850:	bf00      	nop
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ff54 	bl	8001714 <__NVIC_EnableIRQ>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001884:	4ba9      	ldr	r3, [pc, #676]	; (8001b2c <HAL_ETH_Init+0x2b8>)
 8001886:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800188c:	2300      	movs	r3, #0
 800188e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e183      	b.n	8001ba2 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d106      	bne.n	80018b4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff fb80 	bl	8000fb4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b4:	4b9e      	ldr	r3, [pc, #632]	; (8001b30 <HAL_ETH_Init+0x2bc>)
 80018b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b8:	4a9d      	ldr	r2, [pc, #628]	; (8001b30 <HAL_ETH_Init+0x2bc>)
 80018ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018be:	6453      	str	r3, [r2, #68]	; 0x44
 80018c0:	4b9b      	ldr	r3, [pc, #620]	; (8001b30 <HAL_ETH_Init+0x2bc>)
 80018c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80018cc:	4b99      	ldr	r3, [pc, #612]	; (8001b34 <HAL_ETH_Init+0x2c0>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	4a98      	ldr	r2, [pc, #608]	; (8001b34 <HAL_ETH_Init+0x2c0>)
 80018d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80018d6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80018d8:	4b96      	ldr	r3, [pc, #600]	; (8001b34 <HAL_ETH_Init+0x2c0>)
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	4994      	ldr	r1, [pc, #592]	; (8001b34 <HAL_ETH_Init+0x2c0>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f042 0201 	orr.w	r2, r2, #1
 80018f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018fc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80018fe:	f7ff fea9 	bl	8001654 <HAL_GetTick>
 8001902:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001904:	e011      	b.n	800192a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001906:	f7ff fea5 	bl	8001654 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001914:	d909      	bls.n	800192a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2203      	movs	r2, #3
 800191a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e13b      	b.n	8001ba2 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1e4      	bne.n	8001906 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f023 031c 	bic.w	r3, r3, #28
 800194a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800194c:	f001 fb8c 	bl	8003068 <HAL_RCC_GetHCLKFreq>
 8001950:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	4a78      	ldr	r2, [pc, #480]	; (8001b38 <HAL_ETH_Init+0x2c4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d908      	bls.n	800196c <HAL_ETH_Init+0xf8>
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	4a77      	ldr	r2, [pc, #476]	; (8001b3c <HAL_ETH_Init+0x2c8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d804      	bhi.n	800196c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f043 0308 	orr.w	r3, r3, #8
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	e027      	b.n	80019bc <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	4a73      	ldr	r2, [pc, #460]	; (8001b3c <HAL_ETH_Init+0x2c8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d908      	bls.n	8001986 <HAL_ETH_Init+0x112>
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	4a72      	ldr	r2, [pc, #456]	; (8001b40 <HAL_ETH_Init+0x2cc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d804      	bhi.n	8001986 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f043 030c 	orr.w	r3, r3, #12
 8001982:	61fb      	str	r3, [r7, #28]
 8001984:	e01a      	b.n	80019bc <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	4a6d      	ldr	r2, [pc, #436]	; (8001b40 <HAL_ETH_Init+0x2cc>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d903      	bls.n	8001996 <HAL_ETH_Init+0x122>
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	4a6c      	ldr	r2, [pc, #432]	; (8001b44 <HAL_ETH_Init+0x2d0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d911      	bls.n	80019ba <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	4a6a      	ldr	r2, [pc, #424]	; (8001b44 <HAL_ETH_Init+0x2d0>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d908      	bls.n	80019b0 <HAL_ETH_Init+0x13c>
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	4a69      	ldr	r2, [pc, #420]	; (8001b48 <HAL_ETH_Init+0x2d4>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d804      	bhi.n	80019b0 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	61fb      	str	r3, [r7, #28]
 80019ae:	e005      	b.n	80019bc <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f043 0310 	orr.w	r3, r3, #16
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	e000      	b.n	80019bc <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80019ba:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80019c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019c8:	2100      	movs	r1, #0
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f956 	bl	8001c7c <HAL_ETH_WritePHYRegister>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00b      	beq.n	80019ee <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80019da:	6939      	ldr	r1, [r7, #16]
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f9b3 	bl	8001d48 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e0d9      	b.n	8001ba2 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80019ee:	20ff      	movs	r0, #255	; 0xff
 80019f0:	f7ff fe3c 	bl	800166c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 80a7 	beq.w	8001b4c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80019fe:	f7ff fe29 	bl	8001654 <HAL_GetTick>
 8001a02:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	461a      	mov	r2, r3
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 f8cd 	bl	8001bac <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001a12:	f7ff fe1f 	bl	8001654 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d90f      	bls.n	8001a44 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001a28:	6939      	ldr	r1, [r7, #16]
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f98c 	bl	8001d48 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e0ae      	b.n	8001ba2 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0da      	beq.n	8001a04 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001a4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a52:	2100      	movs	r1, #0
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f911 	bl	8001c7c <HAL_ETH_WritePHYRegister>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00b      	beq.n	8001a78 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001a64:	6939      	ldr	r1, [r7, #16]
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f96e 	bl	8001d48 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001a74:	2301      	movs	r3, #1
 8001a76:	e094      	b.n	8001ba2 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001a78:	f7ff fdec 	bl	8001654 <HAL_GetTick>
 8001a7c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	461a      	mov	r2, r3
 8001a84:	2101      	movs	r1, #1
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f890 	bl	8001bac <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001a8c:	f7ff fde2 	bl	8001654 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d90f      	bls.n	8001abe <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001aa2:	6939      	ldr	r1, [r7, #16]
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f94f 	bl	8001d48 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e071      	b.n	8001ba2 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f003 0320 	and.w	r3, r3, #32
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0da      	beq.n	8001a7e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	461a      	mov	r2, r3
 8001ace:	211f      	movs	r1, #31
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f86b 	bl	8001bac <HAL_ETH_ReadPHYRegister>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00b      	beq.n	8001af4 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001ae0:	6939      	ldr	r1, [r7, #16]
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f930 	bl	8001d48 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001af0:	2301      	movs	r3, #1
 8001af2:	e056      	b.n	8001ba2 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d004      	beq.n	8001b08 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	e002      	b.n	8001b0e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	e037      	b.n	8001b90 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	e032      	b.n	8001b90 <HAL_ETH_Init+0x31c>
 8001b2a:	bf00      	nop
 8001b2c:	03938700 	.word	0x03938700
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40013800 	.word	0x40013800
 8001b38:	01312cff 	.word	0x01312cff
 8001b3c:	02160ebf 	.word	0x02160ebf
 8001b40:	039386ff 	.word	0x039386ff
 8001b44:	05f5e0ff 	.word	0x05f5e0ff
 8001b48:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	08db      	lsrs	r3, r3, #3
 8001b52:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	085b      	lsrs	r3, r3, #1
 8001b5a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	461a      	mov	r2, r3
 8001b62:	2100      	movs	r1, #0
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f889 	bl	8001c7c <HAL_ETH_WritePHYRegister>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00b      	beq.n	8001b88 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001b74:	6939      	ldr	r1, [r7, #16]
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f8e6 	bl	8001d48 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e00c      	b.n	8001ba2 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001b88:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001b8c:	f7ff fd6e 	bl	800166c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001b90:	6939      	ldr	r1, [r7, #16]
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f8d8 	bl	8001d48 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3720      	adds	r7, #32
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop

08001bac <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b82      	cmp	r3, #130	; 0x82
 8001bcc:	d101      	bne.n	8001bd2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e050      	b.n	8001c74 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2282      	movs	r2, #130	; 0x82
 8001bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f003 031c 	and.w	r3, r3, #28
 8001be8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8a1b      	ldrh	r3, [r3, #16]
 8001bee:	02db      	lsls	r3, r3, #11
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001bf8:	897b      	ldrh	r3, [r7, #10]
 8001bfa:	019b      	lsls	r3, r3, #6
 8001bfc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f023 0302 	bic.w	r3, r3, #2
 8001c0c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c1e:	f7ff fd19 	bl	8001654 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c24:	e015      	b.n	8001c52 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001c26:	f7ff fd15 	bl	8001654 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c34:	d309      	bcc.n	8001c4a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e014      	b.n	8001c74 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1e4      	bne.n	8001c26 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	461a      	mov	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	460b      	mov	r3, r1
 8001c86:	607a      	str	r2, [r7, #4]
 8001c88:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b42      	cmp	r3, #66	; 0x42
 8001c9c:	d101      	bne.n	8001ca2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e04e      	b.n	8001d40 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2242      	movs	r2, #66	; 0x42
 8001ca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f003 031c 	and.w	r3, r3, #28
 8001cb8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8a1b      	ldrh	r3, [r3, #16]
 8001cbe:	02db      	lsls	r3, r3, #11
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001cc8:	897b      	ldrh	r3, [r7, #10]
 8001cca:	019b      	lsls	r3, r3, #6
 8001ccc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f043 0302 	orr.w	r3, r3, #2
 8001cdc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001cf8:	f7ff fcac 	bl	8001654 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cfe:	e015      	b.n	8001d2c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001d00:	f7ff fca8 	bl	8001654 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d0e:	d309      	bcc.n	8001d24 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e00d      	b.n	8001d40 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1e4      	bne.n	8001d00 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b0b0      	sub	sp, #192	; 0xc0
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d007      	beq.n	8001d6e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d64:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001d76:	2300      	movs	r3, #0
 8001d78:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d103      	bne.n	8001d96 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d92:	663b      	str	r3, [r7, #96]	; 0x60
 8001d94:	e001      	b.n	8001d9a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001d9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d9e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001da4:	2300      	movs	r3, #0
 8001da6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001db4:	2340      	movs	r3, #64	; 0x40
 8001db6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001e00:	2300      	movs	r3, #0
 8001e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001e06:	2300      	movs	r3, #0
 8001e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001e1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e20:	4bab      	ldr	r3, [pc, #684]	; (80020d0 <ETH_MACDMAConfig+0x388>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001e28:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001e2c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001e30:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001e34:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001e3a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001e3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001e3e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001e40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001e42:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001e48:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001e4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001e4c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001e4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001e50:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001e52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001e54:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001e58:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001e5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001e5c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001e5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e62:	4313      	orrs	r3, r2
 8001e64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e70:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	f7ff fbf5 	bl	800166c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e8a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e8c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001e8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e90:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001e92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001e94:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001e9a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001e9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001ea0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001ea2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001ea6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001ea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001eac:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001eb0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001eb8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001eba:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	f7ff fbd0 	bl	800166c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ed4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ede:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001ee8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001ef4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ef8:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001efc:	4013      	ands	r3, r2
 8001efe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001f02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f06:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001f08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001f0c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001f0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001f12:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001f14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001f18:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001f1e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001f20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001f24:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001f26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f38:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f44:	2001      	movs	r0, #1
 8001f46:	f7ff fb91 	bl	800166c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f52:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001f54:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001f58:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f6e:	2001      	movs	r0, #1
 8001f70:	f7ff fb7c 	bl	800166c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f7c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001f82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f86:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001f8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f90:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001fa2:	2304      	movs	r3, #4
 8001fa4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001fa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001fac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fb0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fb6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fbc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	f241 0318 	movw	r3, #4120	; 0x1018
 8001fd2:	4413      	add	r3, r2
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001fda:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fde:	4b3d      	ldr	r3, [pc, #244]	; (80020d4 <ETH_MACDMAConfig+0x38c>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001fe6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001fe8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001fea:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001fec:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001fee:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001ff0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001ff2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001ff4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001ff6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001ff8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001ffa:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001ffe:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002002:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002004:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002006:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002008:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800200c:	4313      	orrs	r3, r2
 800200e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	f241 0318 	movw	r3, #4120	; 0x1018
 800201a:	4413      	add	r3, r2
 800201c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002020:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	f241 0318 	movw	r3, #4120	; 0x1018
 800202a:	4413      	add	r3, r2
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002032:	2001      	movs	r0, #1
 8002034:	f7ff fb1a 	bl	800166c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002040:	4413      	add	r3, r2
 8002042:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002046:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800204a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800204c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800204e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002050:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002054:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002058:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800205a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800205c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800205e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002062:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800206c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002070:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002080:	2001      	movs	r0, #1
 8002082:	f7ff faf3 	bl	800166c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800208e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002092:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d10d      	bne.n	80020b8 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	f241 031c 	movw	r3, #4124	; 0x101c
 80020a4:	4413      	add	r3, r2
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6811      	ldr	r1, [r2, #0]
 80020ac:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <ETH_MACDMAConfig+0x390>)
 80020ae:	431a      	orrs	r2, r3
 80020b0:	f241 031c 	movw	r3, #4124	; 0x101c
 80020b4:	440b      	add	r3, r1
 80020b6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	461a      	mov	r2, r3
 80020be:	2100      	movs	r1, #0
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f80b 	bl	80020dc <ETH_MACAddressConfig>
}
 80020c6:	bf00      	nop
 80020c8:	37c0      	adds	r7, #192	; 0xc0
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	ff20810f 	.word	0xff20810f
 80020d4:	f8de3f23 	.word	0xf8de3f23
 80020d8:	00010040 	.word	0x00010040

080020dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3305      	adds	r3, #5
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	3204      	adds	r2, #4
 80020f4:	7812      	ldrb	r2, [r2, #0]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <ETH_MACAddressConfig+0x68>)
 80020fe:	4413      	add	r3, r2
 8002100:	461a      	mov	r2, r3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3303      	adds	r3, #3
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	061a      	lsls	r2, r3, #24
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3302      	adds	r3, #2
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	041b      	lsls	r3, r3, #16
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3301      	adds	r3, #1
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	4313      	orrs	r3, r2
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	7812      	ldrb	r2, [r2, #0]
 8002126:	4313      	orrs	r3, r2
 8002128:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <ETH_MACAddressConfig+0x6c>)
 800212e:	4413      	add	r3, r2
 8002130:	461a      	mov	r2, r3
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	6013      	str	r3, [r2, #0]
}
 8002136:	bf00      	nop
 8002138:	371c      	adds	r7, #28
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40028040 	.word	0x40028040
 8002148:	40028044 	.word	0x40028044

0800214c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800214c:	b480      	push	{r7}
 800214e:	b089      	sub	sp, #36	; 0x24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002162:	2300      	movs	r3, #0
 8002164:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
 800216a:	e175      	b.n	8002458 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800216c:	2201      	movs	r2, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	429a      	cmp	r2, r3
 8002186:	f040 8164 	bne.w	8002452 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d00b      	beq.n	80021aa <HAL_GPIO_Init+0x5e>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d007      	beq.n	80021aa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800219e:	2b11      	cmp	r3, #17
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b12      	cmp	r3, #18
 80021a8:	d130      	bne.n	800220c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	2203      	movs	r2, #3
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021e0:	2201      	movs	r2, #1
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	f003 0201 	and.w	r2, r3, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	2203      	movs	r2, #3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x100>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b12      	cmp	r3, #18
 800224a:	d123      	bne.n	8002294 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	08da      	lsrs	r2, r3, #3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3208      	adds	r2, #8
 8002254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	220f      	movs	r2, #15
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	08da      	lsrs	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3208      	adds	r2, #8
 800228e:	69b9      	ldr	r1, [r7, #24]
 8002290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0203 	and.w	r2, r3, #3
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 80be 	beq.w	8002452 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d6:	4b65      	ldr	r3, [pc, #404]	; (800246c <HAL_GPIO_Init+0x320>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	4a64      	ldr	r2, [pc, #400]	; (800246c <HAL_GPIO_Init+0x320>)
 80022dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e0:	6453      	str	r3, [r2, #68]	; 0x44
 80022e2:	4b62      	ldr	r3, [pc, #392]	; (800246c <HAL_GPIO_Init+0x320>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80022ee:	4a60      	ldr	r2, [pc, #384]	; (8002470 <HAL_GPIO_Init+0x324>)
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	089b      	lsrs	r3, r3, #2
 80022f4:	3302      	adds	r3, #2
 80022f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	220f      	movs	r2, #15
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a57      	ldr	r2, [pc, #348]	; (8002474 <HAL_GPIO_Init+0x328>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d037      	beq.n	800238a <HAL_GPIO_Init+0x23e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a56      	ldr	r2, [pc, #344]	; (8002478 <HAL_GPIO_Init+0x32c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d031      	beq.n	8002386 <HAL_GPIO_Init+0x23a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a55      	ldr	r2, [pc, #340]	; (800247c <HAL_GPIO_Init+0x330>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d02b      	beq.n	8002382 <HAL_GPIO_Init+0x236>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a54      	ldr	r2, [pc, #336]	; (8002480 <HAL_GPIO_Init+0x334>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d025      	beq.n	800237e <HAL_GPIO_Init+0x232>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a53      	ldr	r2, [pc, #332]	; (8002484 <HAL_GPIO_Init+0x338>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d01f      	beq.n	800237a <HAL_GPIO_Init+0x22e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a52      	ldr	r2, [pc, #328]	; (8002488 <HAL_GPIO_Init+0x33c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d019      	beq.n	8002376 <HAL_GPIO_Init+0x22a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a51      	ldr	r2, [pc, #324]	; (800248c <HAL_GPIO_Init+0x340>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d013      	beq.n	8002372 <HAL_GPIO_Init+0x226>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a50      	ldr	r2, [pc, #320]	; (8002490 <HAL_GPIO_Init+0x344>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d00d      	beq.n	800236e <HAL_GPIO_Init+0x222>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4f      	ldr	r2, [pc, #316]	; (8002494 <HAL_GPIO_Init+0x348>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d007      	beq.n	800236a <HAL_GPIO_Init+0x21e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a4e      	ldr	r2, [pc, #312]	; (8002498 <HAL_GPIO_Init+0x34c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d101      	bne.n	8002366 <HAL_GPIO_Init+0x21a>
 8002362:	2309      	movs	r3, #9
 8002364:	e012      	b.n	800238c <HAL_GPIO_Init+0x240>
 8002366:	230a      	movs	r3, #10
 8002368:	e010      	b.n	800238c <HAL_GPIO_Init+0x240>
 800236a:	2308      	movs	r3, #8
 800236c:	e00e      	b.n	800238c <HAL_GPIO_Init+0x240>
 800236e:	2307      	movs	r3, #7
 8002370:	e00c      	b.n	800238c <HAL_GPIO_Init+0x240>
 8002372:	2306      	movs	r3, #6
 8002374:	e00a      	b.n	800238c <HAL_GPIO_Init+0x240>
 8002376:	2305      	movs	r3, #5
 8002378:	e008      	b.n	800238c <HAL_GPIO_Init+0x240>
 800237a:	2304      	movs	r3, #4
 800237c:	e006      	b.n	800238c <HAL_GPIO_Init+0x240>
 800237e:	2303      	movs	r3, #3
 8002380:	e004      	b.n	800238c <HAL_GPIO_Init+0x240>
 8002382:	2302      	movs	r3, #2
 8002384:	e002      	b.n	800238c <HAL_GPIO_Init+0x240>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <HAL_GPIO_Init+0x240>
 800238a:	2300      	movs	r3, #0
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	f002 0203 	and.w	r2, r2, #3
 8002392:	0092      	lsls	r2, r2, #2
 8002394:	4093      	lsls	r3, r2
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800239c:	4934      	ldr	r1, [pc, #208]	; (8002470 <HAL_GPIO_Init+0x324>)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	3302      	adds	r3, #2
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023aa:	4b3c      	ldr	r3, [pc, #240]	; (800249c <HAL_GPIO_Init+0x350>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023ce:	4a33      	ldr	r2, [pc, #204]	; (800249c <HAL_GPIO_Init+0x350>)
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023d4:	4b31      	ldr	r3, [pc, #196]	; (800249c <HAL_GPIO_Init+0x350>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023f8:	4a28      	ldr	r2, [pc, #160]	; (800249c <HAL_GPIO_Init+0x350>)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023fe:	4b27      	ldr	r3, [pc, #156]	; (800249c <HAL_GPIO_Init+0x350>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002422:	4a1e      	ldr	r2, [pc, #120]	; (800249c <HAL_GPIO_Init+0x350>)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002428:	4b1c      	ldr	r3, [pc, #112]	; (800249c <HAL_GPIO_Init+0x350>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800244c:	4a13      	ldr	r2, [pc, #76]	; (800249c <HAL_GPIO_Init+0x350>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3301      	adds	r3, #1
 8002456:	61fb      	str	r3, [r7, #28]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	2b0f      	cmp	r3, #15
 800245c:	f67f ae86 	bls.w	800216c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002460:	bf00      	nop
 8002462:	3724      	adds	r7, #36	; 0x24
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	40023800 	.word	0x40023800
 8002470:	40013800 	.word	0x40013800
 8002474:	40020000 	.word	0x40020000
 8002478:	40020400 	.word	0x40020400
 800247c:	40020800 	.word	0x40020800
 8002480:	40020c00 	.word	0x40020c00
 8002484:	40021000 	.word	0x40021000
 8002488:	40021400 	.word	0x40021400
 800248c:	40021800 	.word	0x40021800
 8002490:	40021c00 	.word	0x40021c00
 8002494:	40022000 	.word	0x40022000
 8002498:	40022400 	.word	0x40022400
 800249c:	40013c00 	.word	0x40013c00

080024a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	807b      	strh	r3, [r7, #2]
 80024ac:	4613      	mov	r3, r2
 80024ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b0:	787b      	ldrb	r3, [r7, #1]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024b6:	887a      	ldrh	r2, [r7, #2]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80024bc:	e003      	b.n	80024c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80024be:	887b      	ldrh	r3, [r7, #2]
 80024c0:	041a      	lsls	r2, r3, #16
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	619a      	str	r2, [r3, #24]
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024d4:	b08f      	sub	sp, #60	; 0x3c
 80024d6:	af0a      	add	r7, sp, #40	; 0x28
 80024d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e116      	b.n	8002712 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7fe fe98 	bl	8001234 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2203      	movs	r2, #3
 8002508:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002514:	2b00      	cmp	r3, #0
 8002516:	d102      	bne.n	800251e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f003 f87e 	bl	8005624 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	603b      	str	r3, [r7, #0]
 800252e:	687e      	ldr	r6, [r7, #4]
 8002530:	466d      	mov	r5, sp
 8002532:	f106 0410 	add.w	r4, r6, #16
 8002536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800253a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800253c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800253e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002542:	e885 0003 	stmia.w	r5, {r0, r1}
 8002546:	1d33      	adds	r3, r6, #4
 8002548:	cb0e      	ldmia	r3, {r1, r2, r3}
 800254a:	6838      	ldr	r0, [r7, #0]
 800254c:	f003 f812 	bl	8005574 <USB_CoreInit>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d005      	beq.n	8002562 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2202      	movs	r2, #2
 800255a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e0d7      	b.n	8002712 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2100      	movs	r1, #0
 8002568:	4618      	mov	r0, r3
 800256a:	f003 f86c 	bl	8005646 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800256e:	2300      	movs	r3, #0
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	e04a      	b.n	800260a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002574:	7bfa      	ldrb	r2, [r7, #15]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	333d      	adds	r3, #61	; 0x3d
 8002584:	2201      	movs	r2, #1
 8002586:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	333c      	adds	r3, #60	; 0x3c
 8002598:	7bfa      	ldrb	r2, [r7, #15]
 800259a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800259c:	7bfa      	ldrb	r2, [r7, #15]
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	b298      	uxth	r0, r3
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	3342      	adds	r3, #66	; 0x42
 80025b0:	4602      	mov	r2, r0
 80025b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025b4:	7bfa      	ldrb	r2, [r7, #15]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	333f      	adds	r3, #63	; 0x3f
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025c8:	7bfa      	ldrb	r2, [r7, #15]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	3344      	adds	r3, #68	; 0x44
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025dc:	7bfa      	ldrb	r2, [r7, #15]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	3348      	adds	r3, #72	; 0x48
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025f0:	7bfa      	ldrb	r2, [r7, #15]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	3350      	adds	r3, #80	; 0x50
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	3301      	adds	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
 800260a:	7bfa      	ldrb	r2, [r7, #15]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	429a      	cmp	r2, r3
 8002612:	d3af      	bcc.n	8002574 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002614:	2300      	movs	r3, #0
 8002616:	73fb      	strb	r3, [r7, #15]
 8002618:	e044      	b.n	80026a4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800261a:	7bfa      	ldrb	r2, [r7, #15]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800262c:	2200      	movs	r2, #0
 800262e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002630:	7bfa      	ldrb	r2, [r7, #15]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002642:	7bfa      	ldrb	r2, [r7, #15]
 8002644:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002646:	7bfa      	ldrb	r2, [r7, #15]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800265c:	7bfa      	ldrb	r2, [r7, #15]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002672:	7bfa      	ldrb	r2, [r7, #15]
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	1a9b      	subs	r3, r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002688:	7bfa      	ldrb	r2, [r7, #15]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	3301      	adds	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
 80026a4:	7bfa      	ldrb	r2, [r7, #15]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d3b5      	bcc.n	800261a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	687e      	ldr	r6, [r7, #4]
 80026b6:	466d      	mov	r5, sp
 80026b8:	f106 0410 	add.w	r4, r6, #16
 80026bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80026cc:	1d33      	adds	r3, r6, #4
 80026ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026d0:	6838      	ldr	r0, [r7, #0]
 80026d2:	f002 ffe3 	bl	800569c <USB_DevInit>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e014      	b.n	8002712 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d102      	bne.n	8002706 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f80b 	bl	800271c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f003 f995 	bl	8005a3a <USB_DevDisconnect>

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800271c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800274a:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_PCDEx_ActivateLPM+0x44>)
 800274c:	4313      	orrs	r3, r2
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	10000003 	.word	0x10000003

08002764 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a04      	ldr	r2, [pc, #16]	; (8002780 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800276e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002772:	6013      	str	r3, [r2, #0]
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	40007000 	.word	0x40007000

08002784 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800278c:	2300      	movs	r3, #0
 800278e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e29b      	b.n	8002cd2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 8087 	beq.w	80028b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027a8:	4b96      	ldr	r3, [pc, #600]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 030c 	and.w	r3, r3, #12
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d00c      	beq.n	80027ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027b4:	4b93      	ldr	r3, [pc, #588]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 030c 	and.w	r3, r3, #12
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d112      	bne.n	80027e6 <HAL_RCC_OscConfig+0x62>
 80027c0:	4b90      	ldr	r3, [pc, #576]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027cc:	d10b      	bne.n	80027e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ce:	4b8d      	ldr	r3, [pc, #564]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d06c      	beq.n	80028b4 <HAL_RCC_OscConfig+0x130>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d168      	bne.n	80028b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e275      	b.n	8002cd2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ee:	d106      	bne.n	80027fe <HAL_RCC_OscConfig+0x7a>
 80027f0:	4b84      	ldr	r3, [pc, #528]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a83      	ldr	r2, [pc, #524]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 80027f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fa:	6013      	str	r3, [r2, #0]
 80027fc:	e02e      	b.n	800285c <HAL_RCC_OscConfig+0xd8>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10c      	bne.n	8002820 <HAL_RCC_OscConfig+0x9c>
 8002806:	4b7f      	ldr	r3, [pc, #508]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a7e      	ldr	r2, [pc, #504]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 800280c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	4b7c      	ldr	r3, [pc, #496]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a7b      	ldr	r2, [pc, #492]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002818:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	e01d      	b.n	800285c <HAL_RCC_OscConfig+0xd8>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002828:	d10c      	bne.n	8002844 <HAL_RCC_OscConfig+0xc0>
 800282a:	4b76      	ldr	r3, [pc, #472]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a75      	ldr	r2, [pc, #468]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	4b73      	ldr	r3, [pc, #460]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a72      	ldr	r2, [pc, #456]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 800283c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	e00b      	b.n	800285c <HAL_RCC_OscConfig+0xd8>
 8002844:	4b6f      	ldr	r3, [pc, #444]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a6e      	ldr	r2, [pc, #440]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 800284a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	4b6c      	ldr	r3, [pc, #432]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a6b      	ldr	r2, [pc, #428]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800285a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d013      	beq.n	800288c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7fe fef6 	bl	8001654 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800286c:	f7fe fef2 	bl	8001654 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b64      	cmp	r3, #100	; 0x64
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e229      	b.n	8002cd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287e:	4b61      	ldr	r3, [pc, #388]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0xe8>
 800288a:	e014      	b.n	80028b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7fe fee2 	bl	8001654 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002894:	f7fe fede 	bl	8001654 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	; 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e215      	b.n	8002cd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a6:	4b57      	ldr	r3, [pc, #348]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x110>
 80028b2:	e000      	b.n	80028b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d069      	beq.n	8002996 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028c2:	4b50      	ldr	r3, [pc, #320]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00b      	beq.n	80028e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ce:	4b4d      	ldr	r3, [pc, #308]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	d11c      	bne.n	8002914 <HAL_RCC_OscConfig+0x190>
 80028da:	4b4a      	ldr	r3, [pc, #296]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d116      	bne.n	8002914 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e6:	4b47      	ldr	r3, [pc, #284]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d005      	beq.n	80028fe <HAL_RCC_OscConfig+0x17a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d001      	beq.n	80028fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e1e9      	b.n	8002cd2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fe:	4b41      	ldr	r3, [pc, #260]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	493d      	ldr	r1, [pc, #244]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 800290e:	4313      	orrs	r3, r2
 8002910:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002912:	e040      	b.n	8002996 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d023      	beq.n	8002964 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800291c:	4b39      	ldr	r3, [pc, #228]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a38      	ldr	r2, [pc, #224]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002928:	f7fe fe94 	bl	8001654 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002930:	f7fe fe90 	bl	8001654 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e1c7      	b.n	8002cd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002942:	4b30      	ldr	r3, [pc, #192]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f0      	beq.n	8002930 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294e:	4b2d      	ldr	r3, [pc, #180]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4929      	ldr	r1, [pc, #164]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 800295e:	4313      	orrs	r3, r2
 8002960:	600b      	str	r3, [r1, #0]
 8002962:	e018      	b.n	8002996 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002964:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a26      	ldr	r2, [pc, #152]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 800296a:	f023 0301 	bic.w	r3, r3, #1
 800296e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7fe fe70 	bl	8001654 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002978:	f7fe fe6c 	bl	8001654 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e1a3      	b.n	8002cd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298a:	4b1e      	ldr	r3, [pc, #120]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d038      	beq.n	8002a14 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d019      	beq.n	80029de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029aa:	4b16      	ldr	r3, [pc, #88]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 80029ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ae:	4a15      	ldr	r2, [pc, #84]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b6:	f7fe fe4d 	bl	8001654 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029be:	f7fe fe49 	bl	8001654 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e180      	b.n	8002cd2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 80029d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x23a>
 80029dc:	e01a      	b.n	8002a14 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029de:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 80029e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e2:	4a08      	ldr	r2, [pc, #32]	; (8002a04 <HAL_RCC_OscConfig+0x280>)
 80029e4:	f023 0301 	bic.w	r3, r3, #1
 80029e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ea:	f7fe fe33 	bl	8001654 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f0:	e00a      	b.n	8002a08 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f2:	f7fe fe2f 	bl	8001654 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d903      	bls.n	8002a08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e166      	b.n	8002cd2 <HAL_RCC_OscConfig+0x54e>
 8002a04:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a08:	4b92      	ldr	r3, [pc, #584]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1ee      	bne.n	80029f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80a4 	beq.w	8002b6a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a22:	4b8c      	ldr	r3, [pc, #560]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10d      	bne.n	8002a4a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2e:	4b89      	ldr	r3, [pc, #548]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	4a88      	ldr	r2, [pc, #544]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a38:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3a:	4b86      	ldr	r3, [pc, #536]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a46:	2301      	movs	r3, #1
 8002a48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a4a:	4b83      	ldr	r3, [pc, #524]	; (8002c58 <HAL_RCC_OscConfig+0x4d4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d118      	bne.n	8002a88 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a56:	4b80      	ldr	r3, [pc, #512]	; (8002c58 <HAL_RCC_OscConfig+0x4d4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a7f      	ldr	r2, [pc, #508]	; (8002c58 <HAL_RCC_OscConfig+0x4d4>)
 8002a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a62:	f7fe fdf7 	bl	8001654 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6a:	f7fe fdf3 	bl	8001654 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b64      	cmp	r3, #100	; 0x64
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e12a      	b.n	8002cd2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7c:	4b76      	ldr	r3, [pc, #472]	; (8002c58 <HAL_RCC_OscConfig+0x4d4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d106      	bne.n	8002a9e <HAL_RCC_OscConfig+0x31a>
 8002a90:	4b70      	ldr	r3, [pc, #448]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a94:	4a6f      	ldr	r2, [pc, #444]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9c:	e02d      	b.n	8002afa <HAL_RCC_OscConfig+0x376>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x33c>
 8002aa6:	4b6b      	ldr	r3, [pc, #428]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aaa:	4a6a      	ldr	r2, [pc, #424]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002aac:	f023 0301 	bic.w	r3, r3, #1
 8002ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab2:	4b68      	ldr	r3, [pc, #416]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	4a67      	ldr	r2, [pc, #412]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002ab8:	f023 0304 	bic.w	r3, r3, #4
 8002abc:	6713      	str	r3, [r2, #112]	; 0x70
 8002abe:	e01c      	b.n	8002afa <HAL_RCC_OscConfig+0x376>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b05      	cmp	r3, #5
 8002ac6:	d10c      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x35e>
 8002ac8:	4b62      	ldr	r3, [pc, #392]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	4a61      	ldr	r2, [pc, #388]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002ace:	f043 0304 	orr.w	r3, r3, #4
 8002ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad4:	4b5f      	ldr	r3, [pc, #380]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad8:	4a5e      	ldr	r2, [pc, #376]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae0:	e00b      	b.n	8002afa <HAL_RCC_OscConfig+0x376>
 8002ae2:	4b5c      	ldr	r3, [pc, #368]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae6:	4a5b      	ldr	r2, [pc, #364]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002ae8:	f023 0301 	bic.w	r3, r3, #1
 8002aec:	6713      	str	r3, [r2, #112]	; 0x70
 8002aee:	4b59      	ldr	r3, [pc, #356]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af2:	4a58      	ldr	r2, [pc, #352]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002af4:	f023 0304 	bic.w	r3, r3, #4
 8002af8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d015      	beq.n	8002b2e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b02:	f7fe fda7 	bl	8001654 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b08:	e00a      	b.n	8002b20 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0a:	f7fe fda3 	bl	8001654 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e0d8      	b.n	8002cd2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b20:	4b4c      	ldr	r3, [pc, #304]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0ee      	beq.n	8002b0a <HAL_RCC_OscConfig+0x386>
 8002b2c:	e014      	b.n	8002b58 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2e:	f7fe fd91 	bl	8001654 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b34:	e00a      	b.n	8002b4c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b36:	f7fe fd8d 	bl	8001654 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e0c2      	b.n	8002cd2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b4c:	4b41      	ldr	r3, [pc, #260]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1ee      	bne.n	8002b36 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b58:	7dfb      	ldrb	r3, [r7, #23]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d105      	bne.n	8002b6a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b5e:	4b3d      	ldr	r3, [pc, #244]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	4a3c      	ldr	r2, [pc, #240]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 80ae 	beq.w	8002cd0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b74:	4b37      	ldr	r3, [pc, #220]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 030c 	and.w	r3, r3, #12
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d06d      	beq.n	8002c5c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d14b      	bne.n	8002c20 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b88:	4b32      	ldr	r3, [pc, #200]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a31      	ldr	r2, [pc, #196]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7fe fd5e 	bl	8001654 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9c:	f7fe fd5a 	bl	8001654 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e091      	b.n	8002cd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bae:	4b29      	ldr	r3, [pc, #164]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69da      	ldr	r2, [r3, #28]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	019b      	lsls	r3, r3, #6
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd0:	085b      	lsrs	r3, r3, #1
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	041b      	lsls	r3, r3, #16
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	061b      	lsls	r3, r3, #24
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	071b      	lsls	r3, r3, #28
 8002be6:	491b      	ldr	r1, [pc, #108]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bec:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a18      	ldr	r2, [pc, #96]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fd2c 	bl	8001654 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c00:	f7fe fd28 	bl	8001654 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e05f      	b.n	8002cd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c12:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0x47c>
 8002c1e:	e057      	b.n	8002cd0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a0b      	ldr	r2, [pc, #44]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002c26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fd12 	bl	8001654 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c34:	f7fe fd0e 	bl	8001654 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e045      	b.n	8002cd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c46:	4b03      	ldr	r3, [pc, #12]	; (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x4b0>
 8002c52:	e03d      	b.n	8002cd0 <HAL_RCC_OscConfig+0x54c>
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c5c:	4b1f      	ldr	r3, [pc, #124]	; (8002cdc <HAL_RCC_OscConfig+0x558>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d030      	beq.n	8002ccc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d129      	bne.n	8002ccc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d122      	bne.n	8002ccc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c92:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d119      	bne.n	8002ccc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	085b      	lsrs	r3, r3, #1
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d10f      	bne.n	8002ccc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d107      	bne.n	8002ccc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023800 	.word	0x40023800

08002ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e0d0      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf8:	4b6a      	ldr	r3, [pc, #424]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d910      	bls.n	8002d28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d06:	4b67      	ldr	r3, [pc, #412]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 020f 	bic.w	r2, r3, #15
 8002d0e:	4965      	ldr	r1, [pc, #404]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d16:	4b63      	ldr	r3, [pc, #396]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0b8      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d020      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d40:	4b59      	ldr	r3, [pc, #356]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	4a58      	ldr	r2, [pc, #352]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d58:	4b53      	ldr	r3, [pc, #332]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	4a52      	ldr	r2, [pc, #328]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d64:	4b50      	ldr	r3, [pc, #320]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	494d      	ldr	r1, [pc, #308]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d040      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d107      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8a:	4b47      	ldr	r3, [pc, #284]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d115      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e07f      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da2:	4b41      	ldr	r3, [pc, #260]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d109      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e073      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db2:	4b3d      	ldr	r3, [pc, #244]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e06b      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dc2:	4b39      	ldr	r3, [pc, #228]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f023 0203 	bic.w	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	4936      	ldr	r1, [pc, #216]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dd4:	f7fe fc3e 	bl	8001654 <HAL_GetTick>
 8002dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dda:	e00a      	b.n	8002df2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ddc:	f7fe fc3a 	bl	8001654 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e053      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df2:	4b2d      	ldr	r3, [pc, #180]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 020c 	and.w	r2, r3, #12
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d1eb      	bne.n	8002ddc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e04:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 030f 	and.w	r3, r3, #15
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d210      	bcs.n	8002e34 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e12:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 020f 	bic.w	r2, r3, #15
 8002e1a:	4922      	ldr	r1, [pc, #136]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e22:	4b20      	ldr	r3, [pc, #128]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e032      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e40:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4916      	ldr	r1, [pc, #88]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d009      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e5e:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	490e      	ldr	r1, [pc, #56]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e72:	f000 f821 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8002e76:	4601      	mov	r1, r0
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	091b      	lsrs	r3, r3, #4
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <HAL_RCC_ClockConfig+0x1cc>)
 8002e84:	5cd3      	ldrb	r3, [r2, r3]
 8002e86:	fa21 f303 	lsr.w	r3, r1, r3
 8002e8a:	4a09      	ldr	r2, [pc, #36]	; (8002eb0 <HAL_RCC_ClockConfig+0x1d0>)
 8002e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e8e:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <HAL_RCC_ClockConfig+0x1d4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fe fa2a 	bl	80012ec <HAL_InitTick>

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40023c00 	.word	0x40023c00
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	08009498 	.word	0x08009498
 8002eb0:	20000000 	.word	0x20000000
 8002eb4:	20000004 	.word	0x20000004

08002eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	607b      	str	r3, [r7, #4]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ece:	4b63      	ldr	r3, [pc, #396]	; (800305c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d007      	beq.n	8002eea <HAL_RCC_GetSysClockFreq+0x32>
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d008      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x38>
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f040 80b4 	bne.w	800304c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ee4:	4b5e      	ldr	r3, [pc, #376]	; (8003060 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ee6:	60bb      	str	r3, [r7, #8]
      break;
 8002ee8:	e0b3      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eea:	4b5e      	ldr	r3, [pc, #376]	; (8003064 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002eec:	60bb      	str	r3, [r7, #8]
      break;
 8002eee:	e0b0      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ef0:	4b5a      	ldr	r3, [pc, #360]	; (800305c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ef8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002efa:	4b58      	ldr	r3, [pc, #352]	; (800305c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d04a      	beq.n	8002f9c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f06:	4b55      	ldr	r3, [pc, #340]	; (800305c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	099b      	lsrs	r3, r3, #6
 8002f0c:	f04f 0400 	mov.w	r4, #0
 8002f10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	ea03 0501 	and.w	r5, r3, r1
 8002f1c:	ea04 0602 	and.w	r6, r4, r2
 8002f20:	4629      	mov	r1, r5
 8002f22:	4632      	mov	r2, r6
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	f04f 0400 	mov.w	r4, #0
 8002f2c:	0154      	lsls	r4, r2, #5
 8002f2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f32:	014b      	lsls	r3, r1, #5
 8002f34:	4619      	mov	r1, r3
 8002f36:	4622      	mov	r2, r4
 8002f38:	1b49      	subs	r1, r1, r5
 8002f3a:	eb62 0206 	sbc.w	r2, r2, r6
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	f04f 0400 	mov.w	r4, #0
 8002f46:	0194      	lsls	r4, r2, #6
 8002f48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f4c:	018b      	lsls	r3, r1, #6
 8002f4e:	1a5b      	subs	r3, r3, r1
 8002f50:	eb64 0402 	sbc.w	r4, r4, r2
 8002f54:	f04f 0100 	mov.w	r1, #0
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	00e2      	lsls	r2, r4, #3
 8002f5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f62:	00d9      	lsls	r1, r3, #3
 8002f64:	460b      	mov	r3, r1
 8002f66:	4614      	mov	r4, r2
 8002f68:	195b      	adds	r3, r3, r5
 8002f6a:	eb44 0406 	adc.w	r4, r4, r6
 8002f6e:	f04f 0100 	mov.w	r1, #0
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	0262      	lsls	r2, r4, #9
 8002f78:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002f7c:	0259      	lsls	r1, r3, #9
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4614      	mov	r4, r2
 8002f82:	4618      	mov	r0, r3
 8002f84:	4621      	mov	r1, r4
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f04f 0400 	mov.w	r4, #0
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4623      	mov	r3, r4
 8002f90:	f7fd f9a6 	bl	80002e0 <__aeabi_uldivmod>
 8002f94:	4603      	mov	r3, r0
 8002f96:	460c      	mov	r4, r1
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	e049      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f9c:	4b2f      	ldr	r3, [pc, #188]	; (800305c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	099b      	lsrs	r3, r3, #6
 8002fa2:	f04f 0400 	mov.w	r4, #0
 8002fa6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	ea03 0501 	and.w	r5, r3, r1
 8002fb2:	ea04 0602 	and.w	r6, r4, r2
 8002fb6:	4629      	mov	r1, r5
 8002fb8:	4632      	mov	r2, r6
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	f04f 0400 	mov.w	r4, #0
 8002fc2:	0154      	lsls	r4, r2, #5
 8002fc4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002fc8:	014b      	lsls	r3, r1, #5
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4622      	mov	r2, r4
 8002fce:	1b49      	subs	r1, r1, r5
 8002fd0:	eb62 0206 	sbc.w	r2, r2, r6
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	f04f 0400 	mov.w	r4, #0
 8002fdc:	0194      	lsls	r4, r2, #6
 8002fde:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fe2:	018b      	lsls	r3, r1, #6
 8002fe4:	1a5b      	subs	r3, r3, r1
 8002fe6:	eb64 0402 	sbc.w	r4, r4, r2
 8002fea:	f04f 0100 	mov.w	r1, #0
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	00e2      	lsls	r2, r4, #3
 8002ff4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ff8:	00d9      	lsls	r1, r3, #3
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4614      	mov	r4, r2
 8002ffe:	195b      	adds	r3, r3, r5
 8003000:	eb44 0406 	adc.w	r4, r4, r6
 8003004:	f04f 0100 	mov.w	r1, #0
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	02a2      	lsls	r2, r4, #10
 800300e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003012:	0299      	lsls	r1, r3, #10
 8003014:	460b      	mov	r3, r1
 8003016:	4614      	mov	r4, r2
 8003018:	4618      	mov	r0, r3
 800301a:	4621      	mov	r1, r4
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f04f 0400 	mov.w	r4, #0
 8003022:	461a      	mov	r2, r3
 8003024:	4623      	mov	r3, r4
 8003026:	f7fd f95b 	bl	80002e0 <__aeabi_uldivmod>
 800302a:	4603      	mov	r3, r0
 800302c:	460c      	mov	r4, r1
 800302e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003030:	4b0a      	ldr	r3, [pc, #40]	; (800305c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	0c1b      	lsrs	r3, r3, #16
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	3301      	adds	r3, #1
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	fbb2 f3f3 	udiv	r3, r2, r3
 8003048:	60bb      	str	r3, [r7, #8]
      break;
 800304a:	e002      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800304c:	4b04      	ldr	r3, [pc, #16]	; (8003060 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800304e:	60bb      	str	r3, [r7, #8]
      break;
 8003050:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003052:	68bb      	ldr	r3, [r7, #8]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800305c:	40023800 	.word	0x40023800
 8003060:	00f42400 	.word	0x00f42400
 8003064:	007a1200 	.word	0x007a1200

08003068 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800306c:	4b03      	ldr	r3, [pc, #12]	; (800307c <HAL_RCC_GetHCLKFreq+0x14>)
 800306e:	681b      	ldr	r3, [r3, #0]
}
 8003070:	4618      	mov	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	20000000 	.word	0x20000000

08003080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003084:	f7ff fff0 	bl	8003068 <HAL_RCC_GetHCLKFreq>
 8003088:	4601      	mov	r1, r0
 800308a:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	0a9b      	lsrs	r3, r3, #10
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	4a03      	ldr	r2, [pc, #12]	; (80030a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003096:	5cd3      	ldrb	r3, [r2, r3]
 8003098:	fa21 f303 	lsr.w	r3, r1, r3
}
 800309c:	4618      	mov	r0, r3
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40023800 	.word	0x40023800
 80030a4:	080094a8 	.word	0x080094a8

080030a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030ac:	f7ff ffdc 	bl	8003068 <HAL_RCC_GetHCLKFreq>
 80030b0:	4601      	mov	r1, r0
 80030b2:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	0b5b      	lsrs	r3, r3, #13
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	4a03      	ldr	r2, [pc, #12]	; (80030cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030be:	5cd3      	ldrb	r3, [r2, r3]
 80030c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40023800 	.word	0x40023800
 80030cc:	080094a8 	.word	0x080094a8

080030d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	220f      	movs	r2, #15
 80030de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030e0:	4b12      	ldr	r3, [pc, #72]	; (800312c <HAL_RCC_GetClockConfig+0x5c>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 0203 	and.w	r2, r3, #3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030ec:	4b0f      	ldr	r3, [pc, #60]	; (800312c <HAL_RCC_GetClockConfig+0x5c>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030f8:	4b0c      	ldr	r3, [pc, #48]	; (800312c <HAL_RCC_GetClockConfig+0x5c>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003104:	4b09      	ldr	r3, [pc, #36]	; (800312c <HAL_RCC_GetClockConfig+0x5c>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	08db      	lsrs	r3, r3, #3
 800310a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003112:	4b07      	ldr	r3, [pc, #28]	; (8003130 <HAL_RCC_GetClockConfig+0x60>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 020f 	and.w	r2, r3, #15
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	601a      	str	r2, [r3, #0]
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40023800 	.word	0x40023800
 8003130:	40023c00 	.word	0x40023c00

08003134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003144:	2300      	movs	r3, #0
 8003146:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d012      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800315c:	4b69      	ldr	r3, [pc, #420]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	4a68      	ldr	r2, [pc, #416]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003162:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003166:	6093      	str	r3, [r2, #8]
 8003168:	4b66      	ldr	r3, [pc, #408]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003170:	4964      	ldr	r1, [pc, #400]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003172:	4313      	orrs	r3, r2
 8003174:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800317e:	2301      	movs	r3, #1
 8003180:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d017      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800318e:	4b5d      	ldr	r3, [pc, #372]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003194:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319c:	4959      	ldr	r1, [pc, #356]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ac:	d101      	bne.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80031ae:	2301      	movs	r3, #1
 80031b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80031ba:	2301      	movs	r3, #1
 80031bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d017      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031ca:	4b4e      	ldr	r3, [pc, #312]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	494a      	ldr	r1, [pc, #296]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031e8:	d101      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80031ea:	2301      	movs	r3, #1
 80031ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80031f6:	2301      	movs	r3, #1
 80031f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003206:	2301      	movs	r3, #1
 8003208:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 808b 	beq.w	800332e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003218:	4b3a      	ldr	r3, [pc, #232]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	4a39      	ldr	r2, [pc, #228]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800321e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003222:	6413      	str	r3, [r2, #64]	; 0x40
 8003224:	4b37      	ldr	r3, [pc, #220]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003230:	4b35      	ldr	r3, [pc, #212]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a34      	ldr	r2, [pc, #208]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800323c:	f7fe fa0a 	bl	8001654 <HAL_GetTick>
 8003240:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003244:	f7fe fa06 	bl	8001654 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	; 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e38d      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003256:	4b2c      	ldr	r3, [pc, #176]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003262:	4b28      	ldr	r3, [pc, #160]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800326a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d035      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	429a      	cmp	r2, r3
 800327e:	d02e      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003280:	4b20      	ldr	r3, [pc, #128]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003288:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800328a:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	4a1d      	ldr	r2, [pc, #116]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003294:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003296:	4b1b      	ldr	r3, [pc, #108]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329a:	4a1a      	ldr	r2, [pc, #104]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800329c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80032a2:	4a18      	ldr	r2, [pc, #96]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032a8:	4b16      	ldr	r3, [pc, #88]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d114      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b4:	f7fe f9ce 	bl	8001654 <HAL_GetTick>
 80032b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ba:	e00a      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032bc:	f7fe f9ca 	bl	8001654 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e34f      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d2:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0ee      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032ea:	d111      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80032ec:	4b05      	ldr	r3, [pc, #20]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032f8:	4b04      	ldr	r3, [pc, #16]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032fa:	400b      	ands	r3, r1
 80032fc:	4901      	ldr	r1, [pc, #4]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
 8003302:	e00b      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003304:	40023800 	.word	0x40023800
 8003308:	40007000 	.word	0x40007000
 800330c:	0ffffcff 	.word	0x0ffffcff
 8003310:	4bb3      	ldr	r3, [pc, #716]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	4ab2      	ldr	r2, [pc, #712]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003316:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800331a:	6093      	str	r3, [r2, #8]
 800331c:	4bb0      	ldr	r3, [pc, #704]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800331e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003328:	49ad      	ldr	r1, [pc, #692]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800332a:	4313      	orrs	r3, r2
 800332c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	2b00      	cmp	r3, #0
 8003338:	d010      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800333a:	4ba9      	ldr	r3, [pc, #676]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800333c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003340:	4aa7      	ldr	r2, [pc, #668]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003346:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800334a:	4ba5      	ldr	r3, [pc, #660]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800334c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003354:	49a2      	ldr	r1, [pc, #648]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00a      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003368:	4b9d      	ldr	r3, [pc, #628]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800336a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003376:	499a      	ldr	r1, [pc, #616]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800338a:	4b95      	ldr	r3, [pc, #596]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800338c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003390:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003398:	4991      	ldr	r1, [pc, #580]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033ac:	4b8c      	ldr	r3, [pc, #560]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ba:	4989      	ldr	r1, [pc, #548]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033ce:	4b84      	ldr	r3, [pc, #528]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033dc:	4980      	ldr	r1, [pc, #512]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033f0:	4b7b      	ldr	r3, [pc, #492]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f6:	f023 0203 	bic.w	r2, r3, #3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fe:	4978      	ldr	r1, [pc, #480]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003412:	4b73      	ldr	r3, [pc, #460]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003418:	f023 020c 	bic.w	r2, r3, #12
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003420:	496f      	ldr	r1, [pc, #444]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003434:	4b6a      	ldr	r3, [pc, #424]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003442:	4967      	ldr	r1, [pc, #412]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003456:	4b62      	ldr	r3, [pc, #392]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003464:	495e      	ldr	r1, [pc, #376]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003478:	4b59      	ldr	r3, [pc, #356]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800347a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003486:	4956      	ldr	r1, [pc, #344]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800349a:	4b51      	ldr	r3, [pc, #324]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800349c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a8:	494d      	ldr	r1, [pc, #308]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80034bc:	4b48      	ldr	r3, [pc, #288]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ca:	4945      	ldr	r1, [pc, #276]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80034de:	4b40      	ldr	r3, [pc, #256]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ec:	493c      	ldr	r1, [pc, #240]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003500:	4b37      	ldr	r3, [pc, #220]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003506:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800350e:	4934      	ldr	r1, [pc, #208]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d011      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003522:	4b2f      	ldr	r3, [pc, #188]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003528:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003530:	492b      	ldr	r1, [pc, #172]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800353c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003540:	d101      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003542:	2301      	movs	r3, #1
 8003544:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003552:	2301      	movs	r3, #1
 8003554:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003562:	4b1f      	ldr	r3, [pc, #124]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003568:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003570:	491b      	ldr	r1, [pc, #108]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00b      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003584:	4b16      	ldr	r3, [pc, #88]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003594:	4912      	ldr	r1, [pc, #72]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00b      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80035a8:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035b8:	4909      	ldr	r1, [pc, #36]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00f      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035cc:	4b04      	ldr	r3, [pc, #16]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035dc:	e002      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800
 80035e4:	4985      	ldr	r1, [pc, #532]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00b      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80035f8:	4b80      	ldr	r3, [pc, #512]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003608:	497c      	ldr	r1, [pc, #496]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d005      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800361e:	f040 80d6 	bne.w	80037ce <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003622:	4b76      	ldr	r3, [pc, #472]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a75      	ldr	r2, [pc, #468]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003628:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800362c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800362e:	f7fe f811 	bl	8001654 <HAL_GetTick>
 8003632:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003634:	e008      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003636:	f7fe f80d 	bl	8001654 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b64      	cmp	r3, #100	; 0x64
 8003642:	d901      	bls.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e194      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003648:	4b6c      	ldr	r3, [pc, #432]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1f0      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d021      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003664:	2b00      	cmp	r3, #0
 8003666:	d11d      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003668:	4b64      	ldr	r3, [pc, #400]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800366a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800366e:	0c1b      	lsrs	r3, r3, #16
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003676:	4b61      	ldr	r3, [pc, #388]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800367c:	0e1b      	lsrs	r3, r3, #24
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	019a      	lsls	r2, r3, #6
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	041b      	lsls	r3, r3, #16
 800368e:	431a      	orrs	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	061b      	lsls	r3, r3, #24
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	071b      	lsls	r3, r3, #28
 800369c:	4957      	ldr	r1, [pc, #348]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d004      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x586>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036b8:	d00a      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d02e      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ce:	d129      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036d0:	4b4a      	ldr	r3, [pc, #296]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d6:	0c1b      	lsrs	r3, r3, #16
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036de:	4b47      	ldr	r3, [pc, #284]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036e4:	0f1b      	lsrs	r3, r3, #28
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	019a      	lsls	r2, r3, #6
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	041b      	lsls	r3, r3, #16
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	061b      	lsls	r3, r3, #24
 80036fe:	431a      	orrs	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	071b      	lsls	r3, r3, #28
 8003704:	493d      	ldr	r1, [pc, #244]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800370c:	4b3b      	ldr	r3, [pc, #236]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800370e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003712:	f023 021f 	bic.w	r2, r3, #31
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	3b01      	subs	r3, #1
 800371c:	4937      	ldr	r1, [pc, #220]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01d      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003730:	4b32      	ldr	r3, [pc, #200]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003736:	0e1b      	lsrs	r3, r3, #24
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800373e:	4b2f      	ldr	r3, [pc, #188]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003744:	0f1b      	lsrs	r3, r3, #28
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	019a      	lsls	r2, r3, #6
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	041b      	lsls	r3, r3, #16
 8003758:	431a      	orrs	r2, r3
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	061b      	lsls	r3, r3, #24
 800375e:	431a      	orrs	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	071b      	lsls	r3, r3, #28
 8003764:	4925      	ldr	r1, [pc, #148]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d011      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	019a      	lsls	r2, r3, #6
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	041b      	lsls	r3, r3, #16
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	061b      	lsls	r3, r3, #24
 800378c:	431a      	orrs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	071b      	lsls	r3, r3, #28
 8003794:	4919      	ldr	r1, [pc, #100]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800379c:	4b17      	ldr	r3, [pc, #92]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a16      	ldr	r2, [pc, #88]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a8:	f7fd ff54 	bl	8001654 <HAL_GetTick>
 80037ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037b0:	f7fd ff50 	bl	8001654 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	; 0x64
 80037bc:	d901      	bls.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e0d7      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037c2:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	f040 80cd 	bne.w	8003970 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80037d6:	4b09      	ldr	r3, [pc, #36]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a08      	ldr	r2, [pc, #32]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e2:	f7fd ff37 	bl	8001654 <HAL_GetTick>
 80037e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037e8:	e00a      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037ea:	f7fd ff33 	bl	8001654 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b64      	cmp	r3, #100	; 0x64
 80037f6:	d903      	bls.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e0ba      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80037fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003800:	4b5e      	ldr	r3, [pc, #376]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800380c:	d0ed      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381e:	2b00      	cmp	r3, #0
 8003820:	d009      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800382a:	2b00      	cmp	r3, #0
 800382c:	d02e      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	2b00      	cmp	r3, #0
 8003834:	d12a      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003836:	4b51      	ldr	r3, [pc, #324]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383c:	0c1b      	lsrs	r3, r3, #16
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003844:	4b4d      	ldr	r3, [pc, #308]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384a:	0f1b      	lsrs	r3, r3, #28
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	019a      	lsls	r2, r3, #6
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	041b      	lsls	r3, r3, #16
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	061b      	lsls	r3, r3, #24
 8003864:	431a      	orrs	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	071b      	lsls	r3, r3, #28
 800386a:	4944      	ldr	r1, [pc, #272]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003872:	4b42      	ldr	r3, [pc, #264]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003878:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	3b01      	subs	r3, #1
 8003882:	021b      	lsls	r3, r3, #8
 8003884:	493d      	ldr	r1, [pc, #244]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d022      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800389c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038a0:	d11d      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038a2:	4b36      	ldr	r3, [pc, #216]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a8:	0e1b      	lsrs	r3, r3, #24
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038b0:	4b32      	ldr	r3, [pc, #200]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b6:	0f1b      	lsrs	r3, r3, #28
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	019a      	lsls	r2, r3, #6
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	041b      	lsls	r3, r3, #16
 80038ca:	431a      	orrs	r2, r3
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	061b      	lsls	r3, r3, #24
 80038d0:	431a      	orrs	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	071b      	lsls	r3, r3, #28
 80038d6:	4929      	ldr	r1, [pc, #164]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d028      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038ea:	4b24      	ldr	r3, [pc, #144]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f0:	0e1b      	lsrs	r3, r3, #24
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038f8:	4b20      	ldr	r3, [pc, #128]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fe:	0c1b      	lsrs	r3, r3, #16
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	019a      	lsls	r2, r3, #6
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	041b      	lsls	r3, r3, #16
 8003910:	431a      	orrs	r2, r3
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	061b      	lsls	r3, r3, #24
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	071b      	lsls	r3, r3, #28
 800391e:	4917      	ldr	r1, [pc, #92]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003926:	4b15      	ldr	r3, [pc, #84]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800392c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	4911      	ldr	r1, [pc, #68]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800393c:	4b0f      	ldr	r3, [pc, #60]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a0e      	ldr	r2, [pc, #56]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003946:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003948:	f7fd fe84 	bl	8001654 <HAL_GetTick>
 800394c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003950:	f7fd fe80 	bl	8001654 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b64      	cmp	r3, #100	; 0x64
 800395c:	d901      	bls.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e007      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003962:	4b06      	ldr	r3, [pc, #24]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800396a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800396e:	d1ef      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3720      	adds	r7, #32
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40023800 	.word	0x40023800

08003980 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e084      	b.n	8003a9c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d106      	bne.n	80039b2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7fd fbb9 	bl	8001124 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2202      	movs	r2, #2
 80039b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039c8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039d2:	d902      	bls.n	80039da <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039d4:	2300      	movs	r3, #0
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	e002      	b.n	80039e0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80039da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80039e8:	d007      	beq.n	80039fa <HAL_SPI_Init+0x7a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039f2:	d002      	beq.n	80039fa <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10b      	bne.n	8003a1a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a0a:	d903      	bls.n	8003a14 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	631a      	str	r2, [r3, #48]	; 0x30
 8003a12:	e002      	b.n	8003a1a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	ea42 0103 	orr.w	r1, r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	0c1b      	lsrs	r3, r3, #16
 8003a5a:	f003 0204 	and.w	r2, r3, #4
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	ea42 0103 	orr.w	r1, r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	69da      	ldr	r2, [r3, #28]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	603b      	str	r3, [r7, #0]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d101      	bne.n	8003ac6 <HAL_SPI_Transmit+0x22>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e150      	b.n	8003d68 <HAL_SPI_Transmit+0x2c4>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ace:	f7fd fdc1 	bl	8001654 <HAL_GetTick>
 8003ad2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ad4:	88fb      	ldrh	r3, [r7, #6]
 8003ad6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d002      	beq.n	8003aea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ae8:	e135      	b.n	8003d56 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <HAL_SPI_Transmit+0x52>
 8003af0:	88fb      	ldrh	r3, [r7, #6]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d102      	bne.n	8003afc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003afa:	e12c      	b.n	8003d56 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2203      	movs	r2, #3
 8003b00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	88fa      	ldrh	r2, [r7, #6]
 8003b14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	88fa      	ldrh	r2, [r7, #6]
 8003b1a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b46:	d107      	bne.n	8003b58 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b56:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b62:	2b40      	cmp	r3, #64	; 0x40
 8003b64:	d007      	beq.n	8003b76 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b7e:	d94b      	bls.n	8003c18 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <HAL_SPI_Transmit+0xea>
 8003b88:	8afb      	ldrh	r3, [r7, #22]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d13e      	bne.n	8003c0c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	881a      	ldrh	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	1c9a      	adds	r2, r3, #2
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bb2:	e02b      	b.n	8003c0c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d112      	bne.n	8003be8 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc6:	881a      	ldrh	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd2:	1c9a      	adds	r2, r3, #2
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003be6:	e011      	b.n	8003c0c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003be8:	f7fd fd34 	bl	8001654 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d803      	bhi.n	8003c00 <HAL_SPI_Transmit+0x15c>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bfe:	d102      	bne.n	8003c06 <HAL_SPI_Transmit+0x162>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d102      	bne.n	8003c0c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c0a:	e0a4      	b.n	8003d56 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1ce      	bne.n	8003bb4 <HAL_SPI_Transmit+0x110>
 8003c16:	e07c      	b.n	8003d12 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d002      	beq.n	8003c26 <HAL_SPI_Transmit+0x182>
 8003c20:	8afb      	ldrh	r3, [r7, #22]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d170      	bne.n	8003d08 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d912      	bls.n	8003c56 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	881a      	ldrh	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	1c9a      	adds	r2, r3, #2
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b02      	subs	r3, #2
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c54:	e058      	b.n	8003d08 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	330c      	adds	r3, #12
 8003c60:	7812      	ldrb	r2, [r2, #0]
 8003c62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003c7c:	e044      	b.n	8003d08 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d12b      	bne.n	8003ce4 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d912      	bls.n	8003cbc <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	881a      	ldrh	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca6:	1c9a      	adds	r2, r3, #2
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	3b02      	subs	r3, #2
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cba:	e025      	b.n	8003d08 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	330c      	adds	r3, #12
 8003cc6:	7812      	ldrb	r2, [r2, #0]
 8003cc8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ce2:	e011      	b.n	8003d08 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ce4:	f7fd fcb6 	bl	8001654 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d803      	bhi.n	8003cfc <HAL_SPI_Transmit+0x258>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cfa:	d102      	bne.n	8003d02 <HAL_SPI_Transmit+0x25e>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d102      	bne.n	8003d08 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d06:	e026      	b.n	8003d56 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1b5      	bne.n	8003c7e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	6839      	ldr	r1, [r7, #0]
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 fc94 	bl	8004644 <SPI_EndRxTxTransaction>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2220      	movs	r2, #32
 8003d26:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10a      	bne.n	8003d46 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d30:	2300      	movs	r3, #0
 8003d32:	613b      	str	r3, [r7, #16]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	77fb      	strb	r3, [r7, #31]
 8003d52:	e000      	b.n	8003d56 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003d54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003d66:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3720      	adds	r7, #32
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b088      	sub	sp, #32
 8003d74:	af02      	add	r7, sp, #8
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d8c:	d112      	bne.n	8003db4 <HAL_SPI_Receive+0x44>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10e      	bne.n	8003db4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2204      	movs	r2, #4
 8003d9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d9e:	88fa      	ldrh	r2, [r7, #6]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	4613      	mov	r3, r2
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 f908 	bl	8003fc0 <HAL_SPI_TransmitReceive>
 8003db0:	4603      	mov	r3, r0
 8003db2:	e101      	b.n	8003fb8 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_SPI_Receive+0x52>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e0fa      	b.n	8003fb8 <HAL_SPI_Receive+0x248>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dca:	f7fd fc43 	bl	8001654 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d002      	beq.n	8003de2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003ddc:	2302      	movs	r3, #2
 8003dde:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003de0:	e0e1      	b.n	8003fa6 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <HAL_SPI_Receive+0x7e>
 8003de8:	88fb      	ldrh	r3, [r7, #6]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d102      	bne.n	8003df4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003df2:	e0d8      	b.n	8003fa6 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2204      	movs	r2, #4
 8003df8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	88fa      	ldrh	r2, [r7, #6]
 8003e0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	88fa      	ldrh	r2, [r7, #6]
 8003e14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e3e:	d908      	bls.n	8003e52 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e4e:	605a      	str	r2, [r3, #4]
 8003e50:	e007      	b.n	8003e62 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e60:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e6a:	d107      	bne.n	8003e7c <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e7a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e86:	2b40      	cmp	r3, #64	; 0x40
 8003e88:	d007      	beq.n	8003e9a <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e98:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ea2:	d867      	bhi.n	8003f74 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ea4:	e030      	b.n	8003f08 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d117      	bne.n	8003ee4 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f103 020c 	add.w	r2, r3, #12
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	7812      	ldrb	r2, [r2, #0]
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003ee2:	e011      	b.n	8003f08 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ee4:	f7fd fbb6 	bl	8001654 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d803      	bhi.n	8003efc <HAL_SPI_Receive+0x18c>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003efa:	d102      	bne.n	8003f02 <HAL_SPI_Receive+0x192>
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d102      	bne.n	8003f08 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f06:	e04e      	b.n	8003fa6 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1c8      	bne.n	8003ea6 <HAL_SPI_Receive+0x136>
 8003f14:	e034      	b.n	8003f80 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d115      	bne.n	8003f50 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	b292      	uxth	r2, r2
 8003f30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	1c9a      	adds	r2, r3, #2
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003f4e:	e011      	b.n	8003f74 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f50:	f7fd fb80 	bl	8001654 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d803      	bhi.n	8003f68 <HAL_SPI_Receive+0x1f8>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f66:	d102      	bne.n	8003f6e <HAL_SPI_Receive+0x1fe>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d102      	bne.n	8003f74 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f72:	e018      	b.n	8003fa6 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1ca      	bne.n	8003f16 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	6839      	ldr	r1, [r7, #0]
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 fb05 	bl	8004594 <SPI_EndRxTransaction>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d002      	beq.n	8003f96 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2220      	movs	r2, #32
 8003f94:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	75fb      	strb	r3, [r7, #23]
 8003fa2:	e000      	b.n	8003fa6 <HAL_SPI_Receive+0x236>
  }

error :
 8003fa4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08a      	sub	sp, #40	; 0x28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_SPI_TransmitReceive+0x26>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e1fb      	b.n	80043de <HAL_SPI_TransmitReceive+0x41e>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fee:	f7fd fb31 	bl	8001654 <HAL_GetTick>
 8003ff2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ffa:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004002:	887b      	ldrh	r3, [r7, #2]
 8004004:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004006:	887b      	ldrh	r3, [r7, #2]
 8004008:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800400a:	7efb      	ldrb	r3, [r7, #27]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d00e      	beq.n	800402e <HAL_SPI_TransmitReceive+0x6e>
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004016:	d106      	bne.n	8004026 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d102      	bne.n	8004026 <HAL_SPI_TransmitReceive+0x66>
 8004020:	7efb      	ldrb	r3, [r7, #27]
 8004022:	2b04      	cmp	r3, #4
 8004024:	d003      	beq.n	800402e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004026:	2302      	movs	r3, #2
 8004028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800402c:	e1cd      	b.n	80043ca <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_SPI_TransmitReceive+0x80>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d002      	beq.n	8004040 <HAL_SPI_TransmitReceive+0x80>
 800403a:	887b      	ldrh	r3, [r7, #2]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d103      	bne.n	8004048 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004046:	e1c0      	b.n	80043ca <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b04      	cmp	r3, #4
 8004052:	d003      	beq.n	800405c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2205      	movs	r2, #5
 8004058:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	887a      	ldrh	r2, [r7, #2]
 800406c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	887a      	ldrh	r2, [r7, #2]
 8004074:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	887a      	ldrh	r2, [r7, #2]
 8004082:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	887a      	ldrh	r2, [r7, #2]
 8004088:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800409e:	d802      	bhi.n	80040a6 <HAL_SPI_TransmitReceive+0xe6>
 80040a0:	8a3b      	ldrh	r3, [r7, #16]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d908      	bls.n	80040b8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040b4:	605a      	str	r2, [r3, #4]
 80040b6:	e007      	b.n	80040c8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040c6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d2:	2b40      	cmp	r3, #64	; 0x40
 80040d4:	d007      	beq.n	80040e6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040ee:	d97c      	bls.n	80041ea <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <HAL_SPI_TransmitReceive+0x13e>
 80040f8:	8a7b      	ldrh	r3, [r7, #18]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d169      	bne.n	80041d2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	881a      	ldrh	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410e:	1c9a      	adds	r2, r3, #2
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004122:	e056      	b.n	80041d2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b02      	cmp	r3, #2
 8004130:	d11b      	bne.n	800416a <HAL_SPI_TransmitReceive+0x1aa>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d016      	beq.n	800416a <HAL_SPI_TransmitReceive+0x1aa>
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	2b01      	cmp	r3, #1
 8004140:	d113      	bne.n	800416a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004146:	881a      	ldrh	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	1c9a      	adds	r2, r3, #2
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b01      	cmp	r3, #1
 8004176:	d11c      	bne.n	80041b2 <HAL_SPI_TransmitReceive+0x1f2>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800417e:	b29b      	uxth	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d016      	beq.n	80041b2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	b292      	uxth	r2, r2
 8004190:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	1c9a      	adds	r2, r3, #2
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041ae:	2301      	movs	r3, #1
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041b2:	f7fd fa4f 	bl	8001654 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041be:	429a      	cmp	r2, r3
 80041c0:	d807      	bhi.n	80041d2 <HAL_SPI_TransmitReceive+0x212>
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041c8:	d003      	beq.n	80041d2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80041d0:	e0fb      	b.n	80043ca <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1a3      	bne.n	8004124 <HAL_SPI_TransmitReceive+0x164>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d19d      	bne.n	8004124 <HAL_SPI_TransmitReceive+0x164>
 80041e8:	e0df      	b.n	80043aa <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_SPI_TransmitReceive+0x23a>
 80041f2:	8a7b      	ldrh	r3, [r7, #18]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	f040 80cb 	bne.w	8004390 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2b01      	cmp	r3, #1
 8004202:	d912      	bls.n	800422a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	881a      	ldrh	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	1c9a      	adds	r2, r3, #2
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b02      	subs	r3, #2
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004228:	e0b2      	b.n	8004390 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	330c      	adds	r3, #12
 8004234:	7812      	ldrb	r2, [r2, #0]
 8004236:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004250:	e09e      	b.n	8004390 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b02      	cmp	r3, #2
 800425e:	d134      	bne.n	80042ca <HAL_SPI_TransmitReceive+0x30a>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d02f      	beq.n	80042ca <HAL_SPI_TransmitReceive+0x30a>
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	2b01      	cmp	r3, #1
 800426e:	d12c      	bne.n	80042ca <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b01      	cmp	r3, #1
 8004278:	d912      	bls.n	80042a0 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	881a      	ldrh	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428a:	1c9a      	adds	r2, r3, #2
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b02      	subs	r3, #2
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800429e:	e012      	b.n	80042c6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	330c      	adds	r3, #12
 80042aa:	7812      	ldrb	r2, [r2, #0]
 80042ac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042bc:	b29b      	uxth	r3, r3
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d148      	bne.n	800436a <HAL_SPI_TransmitReceive+0x3aa>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042de:	b29b      	uxth	r3, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d042      	beq.n	800436a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d923      	bls.n	8004338 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	b292      	uxth	r2, r2
 80042fc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	1c9a      	adds	r2, r3, #2
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b02      	subs	r3, #2
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b01      	cmp	r3, #1
 8004324:	d81f      	bhi.n	8004366 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004334:	605a      	str	r2, [r3, #4]
 8004336:	e016      	b.n	8004366 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f103 020c 	add.w	r2, r3, #12
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	7812      	ldrb	r2, [r2, #0]
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800435a:	b29b      	uxth	r3, r3
 800435c:	3b01      	subs	r3, #1
 800435e:	b29a      	uxth	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004366:	2301      	movs	r3, #1
 8004368:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800436a:	f7fd f973 	bl	8001654 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004376:	429a      	cmp	r2, r3
 8004378:	d803      	bhi.n	8004382 <HAL_SPI_TransmitReceive+0x3c2>
 800437a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004380:	d102      	bne.n	8004388 <HAL_SPI_TransmitReceive+0x3c8>
 8004382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004384:	2b00      	cmp	r3, #0
 8004386:	d103      	bne.n	8004390 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800438e:	e01c      	b.n	80043ca <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	f47f af5b 	bne.w	8004252 <HAL_SPI_TransmitReceive+0x292>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f47f af54 	bne.w	8004252 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043aa:	69fa      	ldr	r2, [r7, #28]
 80043ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 f948 	bl	8004644 <SPI_EndRxTxTransaction>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d006      	beq.n	80043c8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	661a      	str	r2, [r3, #96]	; 0x60
 80043c6:	e000      	b.n	80043ca <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80043c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80043da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3728      	adds	r7, #40	; 0x28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b084      	sub	sp, #16
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	603b      	str	r3, [r7, #0]
 80043f2:	4613      	mov	r3, r2
 80043f4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043f6:	e04c      	b.n	8004492 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043fe:	d048      	beq.n	8004492 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004400:	f7fd f928 	bl	8001654 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d902      	bls.n	8004416 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d13d      	bne.n	8004492 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004424:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800442e:	d111      	bne.n	8004454 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004438:	d004      	beq.n	8004444 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004442:	d107      	bne.n	8004454 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004452:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800445c:	d10f      	bne.n	800447e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800447c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e00f      	b.n	80044b2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4013      	ands	r3, r2
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	429a      	cmp	r2, r3
 80044a0:	bf0c      	ite	eq
 80044a2:	2301      	moveq	r3, #1
 80044a4:	2300      	movne	r3, #0
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	461a      	mov	r2, r3
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d1a3      	bne.n	80043f8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	607a      	str	r2, [r7, #4]
 80044c6:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80044c8:	e057      	b.n	800457a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80044d0:	d106      	bne.n	80044e0 <SPI_WaitFifoStateUntilTimeout+0x26>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d103      	bne.n	80044e0 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	330c      	adds	r3, #12
 80044de:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044e6:	d048      	beq.n	800457a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80044e8:	f7fd f8b4 	bl	8001654 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d902      	bls.n	80044fe <SPI_WaitFifoStateUntilTimeout+0x44>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d13d      	bne.n	800457a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800450c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004516:	d111      	bne.n	800453c <SPI_WaitFifoStateUntilTimeout+0x82>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004520:	d004      	beq.n	800452c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800452a:	d107      	bne.n	800453c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800453a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004544:	d10f      	bne.n	8004566 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004564:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e008      	b.n	800458c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	4013      	ands	r3, r2
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	429a      	cmp	r2, r3
 8004588:	d19f      	bne.n	80044ca <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af02      	add	r7, sp, #8
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045a8:	d111      	bne.n	80045ce <SPI_EndRxTransaction+0x3a>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b2:	d004      	beq.n	80045be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045bc:	d107      	bne.n	80045ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045cc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2200      	movs	r2, #0
 80045d6:	2180      	movs	r1, #128	; 0x80
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f7ff ff04 	bl	80043e6 <SPI_WaitFlagStateUntilTimeout>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d007      	beq.n	80045f4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e8:	f043 0220 	orr.w	r2, r3, #32
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e023      	b.n	800463c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045fc:	d11d      	bne.n	800463a <SPI_EndRxTransaction+0xa6>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004606:	d004      	beq.n	8004612 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004610:	d113      	bne.n	800463a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2200      	movs	r2, #0
 800461a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f7ff ff4b 	bl	80044ba <SPI_WaitFifoStateUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d007      	beq.n	800463a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800462e:	f043 0220 	orr.w	r2, r3, #32
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e000      	b.n	800463c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af02      	add	r7, sp, #8
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	2200      	movs	r2, #0
 8004658:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f7ff ff2c 	bl	80044ba <SPI_WaitFifoStateUntilTimeout>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d007      	beq.n	8004678 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800466c:	f043 0220 	orr.w	r2, r3, #32
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e027      	b.n	80046c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2200      	movs	r2, #0
 8004680:	2180      	movs	r1, #128	; 0x80
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f7ff feaf 	bl	80043e6 <SPI_WaitFlagStateUntilTimeout>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d007      	beq.n	800469e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004692:	f043 0220 	orr.w	r2, r3, #32
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e014      	b.n	80046c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f7ff ff05 	bl	80044ba <SPI_WaitFifoStateUntilTimeout>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d007      	beq.n	80046c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ba:	f043 0220 	orr.w	r2, r3, #32
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e000      	b.n	80046c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e01d      	b.n	800471e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f815 	bl	8004726 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3304      	adds	r3, #4
 800470c:	4619      	mov	r1, r3
 800470e:	4610      	mov	r0, r2
 8004710:	f000 f986 	bl	8004a20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
	...

0800473c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	4b0c      	ldr	r3, [pc, #48]	; (800478c <HAL_TIM_Base_Start_IT+0x50>)
 800475c:	4013      	ands	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b06      	cmp	r3, #6
 8004764:	d00b      	beq.n	800477e <HAL_TIM_Base_Start_IT+0x42>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476c:	d007      	beq.n	800477e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 0201 	orr.w	r2, r2, #1
 800477c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	00010007 	.word	0x00010007

08004790 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d122      	bne.n	80047ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d11b      	bne.n	80047ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f06f 0202 	mvn.w	r2, #2
 80047bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f905 	bl	80049e2 <HAL_TIM_IC_CaptureCallback>
 80047d8:	e005      	b.n	80047e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f8f7 	bl	80049ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f908 	bl	80049f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f003 0304 	and.w	r3, r3, #4
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d122      	bne.n	8004840 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b04      	cmp	r3, #4
 8004806:	d11b      	bne.n	8004840 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f06f 0204 	mvn.w	r2, #4
 8004810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2202      	movs	r2, #2
 8004816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f8db 	bl	80049e2 <HAL_TIM_IC_CaptureCallback>
 800482c:	e005      	b.n	800483a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f8cd 	bl	80049ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f8de 	bl	80049f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f003 0308 	and.w	r3, r3, #8
 800484a:	2b08      	cmp	r3, #8
 800484c:	d122      	bne.n	8004894 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f003 0308 	and.w	r3, r3, #8
 8004858:	2b08      	cmp	r3, #8
 800485a:	d11b      	bne.n	8004894 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f06f 0208 	mvn.w	r2, #8
 8004864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2204      	movs	r2, #4
 800486a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f8b1 	bl	80049e2 <HAL_TIM_IC_CaptureCallback>
 8004880:	e005      	b.n	800488e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f8a3 	bl	80049ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f8b4 	bl	80049f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	f003 0310 	and.w	r3, r3, #16
 800489e:	2b10      	cmp	r3, #16
 80048a0:	d122      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0310 	and.w	r3, r3, #16
 80048ac:	2b10      	cmp	r3, #16
 80048ae:	d11b      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f06f 0210 	mvn.w	r2, #16
 80048b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2208      	movs	r2, #8
 80048be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f887 	bl	80049e2 <HAL_TIM_IC_CaptureCallback>
 80048d4:	e005      	b.n	80048e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f879 	bl	80049ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f88a 	bl	80049f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d10e      	bne.n	8004914 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b01      	cmp	r3, #1
 8004902:	d107      	bne.n	8004914 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0201 	mvn.w	r2, #1
 800490c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fc f986 	bl	8000c20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491e:	2b80      	cmp	r3, #128	; 0x80
 8004920:	d10e      	bne.n	8004940 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492c:	2b80      	cmp	r3, #128	; 0x80
 800492e:	d107      	bne.n	8004940 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f91a 	bl	8004b74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800494e:	d10e      	bne.n	800496e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495a:	2b80      	cmp	r3, #128	; 0x80
 800495c:	d107      	bne.n	800496e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f90d 	bl	8004b88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004978:	2b40      	cmp	r3, #64	; 0x40
 800497a:	d10e      	bne.n	800499a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004986:	2b40      	cmp	r3, #64	; 0x40
 8004988:	d107      	bne.n	800499a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f838 	bl	8004a0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	f003 0320 	and.w	r3, r3, #32
 80049a4:	2b20      	cmp	r3, #32
 80049a6:	d10e      	bne.n	80049c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d107      	bne.n	80049c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f06f 0220 	mvn.w	r2, #32
 80049be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f8cd 	bl	8004b60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049c6:	bf00      	nop
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
	...

08004a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a40      	ldr	r2, [pc, #256]	; (8004b34 <TIM_Base_SetConfig+0x114>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d013      	beq.n	8004a60 <TIM_Base_SetConfig+0x40>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a3e:	d00f      	beq.n	8004a60 <TIM_Base_SetConfig+0x40>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a3d      	ldr	r2, [pc, #244]	; (8004b38 <TIM_Base_SetConfig+0x118>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d00b      	beq.n	8004a60 <TIM_Base_SetConfig+0x40>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a3c      	ldr	r2, [pc, #240]	; (8004b3c <TIM_Base_SetConfig+0x11c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d007      	beq.n	8004a60 <TIM_Base_SetConfig+0x40>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a3b      	ldr	r2, [pc, #236]	; (8004b40 <TIM_Base_SetConfig+0x120>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d003      	beq.n	8004a60 <TIM_Base_SetConfig+0x40>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a3a      	ldr	r2, [pc, #232]	; (8004b44 <TIM_Base_SetConfig+0x124>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d108      	bne.n	8004a72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a2f      	ldr	r2, [pc, #188]	; (8004b34 <TIM_Base_SetConfig+0x114>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d02b      	beq.n	8004ad2 <TIM_Base_SetConfig+0xb2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a80:	d027      	beq.n	8004ad2 <TIM_Base_SetConfig+0xb2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a2c      	ldr	r2, [pc, #176]	; (8004b38 <TIM_Base_SetConfig+0x118>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d023      	beq.n	8004ad2 <TIM_Base_SetConfig+0xb2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a2b      	ldr	r2, [pc, #172]	; (8004b3c <TIM_Base_SetConfig+0x11c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d01f      	beq.n	8004ad2 <TIM_Base_SetConfig+0xb2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a2a      	ldr	r2, [pc, #168]	; (8004b40 <TIM_Base_SetConfig+0x120>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d01b      	beq.n	8004ad2 <TIM_Base_SetConfig+0xb2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a29      	ldr	r2, [pc, #164]	; (8004b44 <TIM_Base_SetConfig+0x124>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d017      	beq.n	8004ad2 <TIM_Base_SetConfig+0xb2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a28      	ldr	r2, [pc, #160]	; (8004b48 <TIM_Base_SetConfig+0x128>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d013      	beq.n	8004ad2 <TIM_Base_SetConfig+0xb2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a27      	ldr	r2, [pc, #156]	; (8004b4c <TIM_Base_SetConfig+0x12c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00f      	beq.n	8004ad2 <TIM_Base_SetConfig+0xb2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a26      	ldr	r2, [pc, #152]	; (8004b50 <TIM_Base_SetConfig+0x130>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00b      	beq.n	8004ad2 <TIM_Base_SetConfig+0xb2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a25      	ldr	r2, [pc, #148]	; (8004b54 <TIM_Base_SetConfig+0x134>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d007      	beq.n	8004ad2 <TIM_Base_SetConfig+0xb2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a24      	ldr	r2, [pc, #144]	; (8004b58 <TIM_Base_SetConfig+0x138>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d003      	beq.n	8004ad2 <TIM_Base_SetConfig+0xb2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a23      	ldr	r2, [pc, #140]	; (8004b5c <TIM_Base_SetConfig+0x13c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d108      	bne.n	8004ae4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a0a      	ldr	r2, [pc, #40]	; (8004b34 <TIM_Base_SetConfig+0x114>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d003      	beq.n	8004b18 <TIM_Base_SetConfig+0xf8>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a0c      	ldr	r2, [pc, #48]	; (8004b44 <TIM_Base_SetConfig+0x124>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d103      	bne.n	8004b20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	691a      	ldr	r2, [r3, #16]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	615a      	str	r2, [r3, #20]
}
 8004b26:	bf00      	nop
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	40010000 	.word	0x40010000
 8004b38:	40000400 	.word	0x40000400
 8004b3c:	40000800 	.word	0x40000800
 8004b40:	40000c00 	.word	0x40000c00
 8004b44:	40010400 	.word	0x40010400
 8004b48:	40014000 	.word	0x40014000
 8004b4c:	40014400 	.word	0x40014400
 8004b50:	40014800 	.word	0x40014800
 8004b54:	40001800 	.word	0x40001800
 8004b58:	40001c00 	.word	0x40001c00
 8004b5c:	40002000 	.word	0x40002000

08004b60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e040      	b.n	8004c30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7fc faf4 	bl	80011ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2224      	movs	r2, #36	; 0x24
 8004bc8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0201 	bic.w	r2, r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f8be 	bl	8004d5c <UART_SetConfig>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d101      	bne.n	8004bea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e022      	b.n	8004c30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 fb5c 	bl	80052b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fbe3 	bl	80053f4 <UART_CheckIdleState>
 8004c2e:	4603      	mov	r3, r0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08a      	sub	sp, #40	; 0x28
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	603b      	str	r3, [r7, #0]
 8004c44:	4613      	mov	r3, r2
 8004c46:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c4c:	2b20      	cmp	r3, #32
 8004c4e:	d17f      	bne.n	8004d50 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <HAL_UART_Transmit+0x24>
 8004c56:	88fb      	ldrh	r3, [r7, #6]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e078      	b.n	8004d52 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d101      	bne.n	8004c6e <HAL_UART_Transmit+0x36>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	e071      	b.n	8004d52 <HAL_UART_Transmit+0x11a>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2221      	movs	r2, #33	; 0x21
 8004c80:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004c82:	f7fc fce7 	bl	8001654 <HAL_GetTick>
 8004c86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	88fa      	ldrh	r2, [r7, #6]
 8004c8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	88fa      	ldrh	r2, [r7, #6]
 8004c94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca0:	d108      	bne.n	8004cb4 <HAL_UART_Transmit+0x7c>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d104      	bne.n	8004cb4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	61bb      	str	r3, [r7, #24]
 8004cb2:	e003      	b.n	8004cbc <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004cc4:	e02c      	b.n	8004d20 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2180      	movs	r1, #128	; 0x80
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 fbd4 	bl	800547e <UART_WaitOnFlagUntilTimeout>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e038      	b.n	8004d52 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10b      	bne.n	8004cfe <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	461a      	mov	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cf4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	3302      	adds	r3, #2
 8004cfa:	61bb      	str	r3, [r7, #24]
 8004cfc:	e007      	b.n	8004d0e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	781a      	ldrb	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	3b01      	subs	r3, #1
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1cc      	bne.n	8004cc6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	2200      	movs	r2, #0
 8004d34:	2140      	movs	r1, #64	; 0x40
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 fba1 	bl	800547e <UART_WaitOnFlagUntilTimeout>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e005      	b.n	8004d52 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	e000      	b.n	8004d52 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004d50:	2302      	movs	r3, #2
  }
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3720      	adds	r7, #32
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	431a      	orrs	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	4bb1      	ldr	r3, [pc, #708]	; (8005050 <UART_SetConfig+0x2f4>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6812      	ldr	r2, [r2, #0]
 8004d92:	6939      	ldr	r1, [r7, #16]
 8004d94:	430b      	orrs	r3, r1
 8004d96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a9f      	ldr	r2, [pc, #636]	; (8005054 <UART_SetConfig+0x2f8>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d121      	bne.n	8004e20 <UART_SetConfig+0xc4>
 8004ddc:	4b9e      	ldr	r3, [pc, #632]	; (8005058 <UART_SetConfig+0x2fc>)
 8004dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d816      	bhi.n	8004e18 <UART_SetConfig+0xbc>
 8004dea:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <UART_SetConfig+0x94>)
 8004dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df0:	08004e01 	.word	0x08004e01
 8004df4:	08004e0d 	.word	0x08004e0d
 8004df8:	08004e07 	.word	0x08004e07
 8004dfc:	08004e13 	.word	0x08004e13
 8004e00:	2301      	movs	r3, #1
 8004e02:	77fb      	strb	r3, [r7, #31]
 8004e04:	e151      	b.n	80050aa <UART_SetConfig+0x34e>
 8004e06:	2302      	movs	r3, #2
 8004e08:	77fb      	strb	r3, [r7, #31]
 8004e0a:	e14e      	b.n	80050aa <UART_SetConfig+0x34e>
 8004e0c:	2304      	movs	r3, #4
 8004e0e:	77fb      	strb	r3, [r7, #31]
 8004e10:	e14b      	b.n	80050aa <UART_SetConfig+0x34e>
 8004e12:	2308      	movs	r3, #8
 8004e14:	77fb      	strb	r3, [r7, #31]
 8004e16:	e148      	b.n	80050aa <UART_SetConfig+0x34e>
 8004e18:	2310      	movs	r3, #16
 8004e1a:	77fb      	strb	r3, [r7, #31]
 8004e1c:	bf00      	nop
 8004e1e:	e144      	b.n	80050aa <UART_SetConfig+0x34e>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a8d      	ldr	r2, [pc, #564]	; (800505c <UART_SetConfig+0x300>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d134      	bne.n	8004e94 <UART_SetConfig+0x138>
 8004e2a:	4b8b      	ldr	r3, [pc, #556]	; (8005058 <UART_SetConfig+0x2fc>)
 8004e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e30:	f003 030c 	and.w	r3, r3, #12
 8004e34:	2b0c      	cmp	r3, #12
 8004e36:	d829      	bhi.n	8004e8c <UART_SetConfig+0x130>
 8004e38:	a201      	add	r2, pc, #4	; (adr r2, 8004e40 <UART_SetConfig+0xe4>)
 8004e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3e:	bf00      	nop
 8004e40:	08004e75 	.word	0x08004e75
 8004e44:	08004e8d 	.word	0x08004e8d
 8004e48:	08004e8d 	.word	0x08004e8d
 8004e4c:	08004e8d 	.word	0x08004e8d
 8004e50:	08004e81 	.word	0x08004e81
 8004e54:	08004e8d 	.word	0x08004e8d
 8004e58:	08004e8d 	.word	0x08004e8d
 8004e5c:	08004e8d 	.word	0x08004e8d
 8004e60:	08004e7b 	.word	0x08004e7b
 8004e64:	08004e8d 	.word	0x08004e8d
 8004e68:	08004e8d 	.word	0x08004e8d
 8004e6c:	08004e8d 	.word	0x08004e8d
 8004e70:	08004e87 	.word	0x08004e87
 8004e74:	2300      	movs	r3, #0
 8004e76:	77fb      	strb	r3, [r7, #31]
 8004e78:	e117      	b.n	80050aa <UART_SetConfig+0x34e>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	77fb      	strb	r3, [r7, #31]
 8004e7e:	e114      	b.n	80050aa <UART_SetConfig+0x34e>
 8004e80:	2304      	movs	r3, #4
 8004e82:	77fb      	strb	r3, [r7, #31]
 8004e84:	e111      	b.n	80050aa <UART_SetConfig+0x34e>
 8004e86:	2308      	movs	r3, #8
 8004e88:	77fb      	strb	r3, [r7, #31]
 8004e8a:	e10e      	b.n	80050aa <UART_SetConfig+0x34e>
 8004e8c:	2310      	movs	r3, #16
 8004e8e:	77fb      	strb	r3, [r7, #31]
 8004e90:	bf00      	nop
 8004e92:	e10a      	b.n	80050aa <UART_SetConfig+0x34e>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a71      	ldr	r2, [pc, #452]	; (8005060 <UART_SetConfig+0x304>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d120      	bne.n	8004ee0 <UART_SetConfig+0x184>
 8004e9e:	4b6e      	ldr	r3, [pc, #440]	; (8005058 <UART_SetConfig+0x2fc>)
 8004ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ea8:	2b10      	cmp	r3, #16
 8004eaa:	d00f      	beq.n	8004ecc <UART_SetConfig+0x170>
 8004eac:	2b10      	cmp	r3, #16
 8004eae:	d802      	bhi.n	8004eb6 <UART_SetConfig+0x15a>
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <UART_SetConfig+0x164>
 8004eb4:	e010      	b.n	8004ed8 <UART_SetConfig+0x17c>
 8004eb6:	2b20      	cmp	r3, #32
 8004eb8:	d005      	beq.n	8004ec6 <UART_SetConfig+0x16a>
 8004eba:	2b30      	cmp	r3, #48	; 0x30
 8004ebc:	d009      	beq.n	8004ed2 <UART_SetConfig+0x176>
 8004ebe:	e00b      	b.n	8004ed8 <UART_SetConfig+0x17c>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	77fb      	strb	r3, [r7, #31]
 8004ec4:	e0f1      	b.n	80050aa <UART_SetConfig+0x34e>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	77fb      	strb	r3, [r7, #31]
 8004eca:	e0ee      	b.n	80050aa <UART_SetConfig+0x34e>
 8004ecc:	2304      	movs	r3, #4
 8004ece:	77fb      	strb	r3, [r7, #31]
 8004ed0:	e0eb      	b.n	80050aa <UART_SetConfig+0x34e>
 8004ed2:	2308      	movs	r3, #8
 8004ed4:	77fb      	strb	r3, [r7, #31]
 8004ed6:	e0e8      	b.n	80050aa <UART_SetConfig+0x34e>
 8004ed8:	2310      	movs	r3, #16
 8004eda:	77fb      	strb	r3, [r7, #31]
 8004edc:	bf00      	nop
 8004ede:	e0e4      	b.n	80050aa <UART_SetConfig+0x34e>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a5f      	ldr	r2, [pc, #380]	; (8005064 <UART_SetConfig+0x308>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d120      	bne.n	8004f2c <UART_SetConfig+0x1d0>
 8004eea:	4b5b      	ldr	r3, [pc, #364]	; (8005058 <UART_SetConfig+0x2fc>)
 8004eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ef4:	2b40      	cmp	r3, #64	; 0x40
 8004ef6:	d00f      	beq.n	8004f18 <UART_SetConfig+0x1bc>
 8004ef8:	2b40      	cmp	r3, #64	; 0x40
 8004efa:	d802      	bhi.n	8004f02 <UART_SetConfig+0x1a6>
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d005      	beq.n	8004f0c <UART_SetConfig+0x1b0>
 8004f00:	e010      	b.n	8004f24 <UART_SetConfig+0x1c8>
 8004f02:	2b80      	cmp	r3, #128	; 0x80
 8004f04:	d005      	beq.n	8004f12 <UART_SetConfig+0x1b6>
 8004f06:	2bc0      	cmp	r3, #192	; 0xc0
 8004f08:	d009      	beq.n	8004f1e <UART_SetConfig+0x1c2>
 8004f0a:	e00b      	b.n	8004f24 <UART_SetConfig+0x1c8>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	77fb      	strb	r3, [r7, #31]
 8004f10:	e0cb      	b.n	80050aa <UART_SetConfig+0x34e>
 8004f12:	2302      	movs	r3, #2
 8004f14:	77fb      	strb	r3, [r7, #31]
 8004f16:	e0c8      	b.n	80050aa <UART_SetConfig+0x34e>
 8004f18:	2304      	movs	r3, #4
 8004f1a:	77fb      	strb	r3, [r7, #31]
 8004f1c:	e0c5      	b.n	80050aa <UART_SetConfig+0x34e>
 8004f1e:	2308      	movs	r3, #8
 8004f20:	77fb      	strb	r3, [r7, #31]
 8004f22:	e0c2      	b.n	80050aa <UART_SetConfig+0x34e>
 8004f24:	2310      	movs	r3, #16
 8004f26:	77fb      	strb	r3, [r7, #31]
 8004f28:	bf00      	nop
 8004f2a:	e0be      	b.n	80050aa <UART_SetConfig+0x34e>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a4d      	ldr	r2, [pc, #308]	; (8005068 <UART_SetConfig+0x30c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d124      	bne.n	8004f80 <UART_SetConfig+0x224>
 8004f36:	4b48      	ldr	r3, [pc, #288]	; (8005058 <UART_SetConfig+0x2fc>)
 8004f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f44:	d012      	beq.n	8004f6c <UART_SetConfig+0x210>
 8004f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f4a:	d802      	bhi.n	8004f52 <UART_SetConfig+0x1f6>
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d007      	beq.n	8004f60 <UART_SetConfig+0x204>
 8004f50:	e012      	b.n	8004f78 <UART_SetConfig+0x21c>
 8004f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f56:	d006      	beq.n	8004f66 <UART_SetConfig+0x20a>
 8004f58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f5c:	d009      	beq.n	8004f72 <UART_SetConfig+0x216>
 8004f5e:	e00b      	b.n	8004f78 <UART_SetConfig+0x21c>
 8004f60:	2300      	movs	r3, #0
 8004f62:	77fb      	strb	r3, [r7, #31]
 8004f64:	e0a1      	b.n	80050aa <UART_SetConfig+0x34e>
 8004f66:	2302      	movs	r3, #2
 8004f68:	77fb      	strb	r3, [r7, #31]
 8004f6a:	e09e      	b.n	80050aa <UART_SetConfig+0x34e>
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	77fb      	strb	r3, [r7, #31]
 8004f70:	e09b      	b.n	80050aa <UART_SetConfig+0x34e>
 8004f72:	2308      	movs	r3, #8
 8004f74:	77fb      	strb	r3, [r7, #31]
 8004f76:	e098      	b.n	80050aa <UART_SetConfig+0x34e>
 8004f78:	2310      	movs	r3, #16
 8004f7a:	77fb      	strb	r3, [r7, #31]
 8004f7c:	bf00      	nop
 8004f7e:	e094      	b.n	80050aa <UART_SetConfig+0x34e>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a39      	ldr	r2, [pc, #228]	; (800506c <UART_SetConfig+0x310>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d124      	bne.n	8004fd4 <UART_SetConfig+0x278>
 8004f8a:	4b33      	ldr	r3, [pc, #204]	; (8005058 <UART_SetConfig+0x2fc>)
 8004f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f98:	d012      	beq.n	8004fc0 <UART_SetConfig+0x264>
 8004f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9e:	d802      	bhi.n	8004fa6 <UART_SetConfig+0x24a>
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d007      	beq.n	8004fb4 <UART_SetConfig+0x258>
 8004fa4:	e012      	b.n	8004fcc <UART_SetConfig+0x270>
 8004fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004faa:	d006      	beq.n	8004fba <UART_SetConfig+0x25e>
 8004fac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fb0:	d009      	beq.n	8004fc6 <UART_SetConfig+0x26a>
 8004fb2:	e00b      	b.n	8004fcc <UART_SetConfig+0x270>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	77fb      	strb	r3, [r7, #31]
 8004fb8:	e077      	b.n	80050aa <UART_SetConfig+0x34e>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	77fb      	strb	r3, [r7, #31]
 8004fbe:	e074      	b.n	80050aa <UART_SetConfig+0x34e>
 8004fc0:	2304      	movs	r3, #4
 8004fc2:	77fb      	strb	r3, [r7, #31]
 8004fc4:	e071      	b.n	80050aa <UART_SetConfig+0x34e>
 8004fc6:	2308      	movs	r3, #8
 8004fc8:	77fb      	strb	r3, [r7, #31]
 8004fca:	e06e      	b.n	80050aa <UART_SetConfig+0x34e>
 8004fcc:	2310      	movs	r3, #16
 8004fce:	77fb      	strb	r3, [r7, #31]
 8004fd0:	bf00      	nop
 8004fd2:	e06a      	b.n	80050aa <UART_SetConfig+0x34e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a25      	ldr	r2, [pc, #148]	; (8005070 <UART_SetConfig+0x314>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d124      	bne.n	8005028 <UART_SetConfig+0x2cc>
 8004fde:	4b1e      	ldr	r3, [pc, #120]	; (8005058 <UART_SetConfig+0x2fc>)
 8004fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fec:	d012      	beq.n	8005014 <UART_SetConfig+0x2b8>
 8004fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff2:	d802      	bhi.n	8004ffa <UART_SetConfig+0x29e>
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d007      	beq.n	8005008 <UART_SetConfig+0x2ac>
 8004ff8:	e012      	b.n	8005020 <UART_SetConfig+0x2c4>
 8004ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ffe:	d006      	beq.n	800500e <UART_SetConfig+0x2b2>
 8005000:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005004:	d009      	beq.n	800501a <UART_SetConfig+0x2be>
 8005006:	e00b      	b.n	8005020 <UART_SetConfig+0x2c4>
 8005008:	2300      	movs	r3, #0
 800500a:	77fb      	strb	r3, [r7, #31]
 800500c:	e04d      	b.n	80050aa <UART_SetConfig+0x34e>
 800500e:	2302      	movs	r3, #2
 8005010:	77fb      	strb	r3, [r7, #31]
 8005012:	e04a      	b.n	80050aa <UART_SetConfig+0x34e>
 8005014:	2304      	movs	r3, #4
 8005016:	77fb      	strb	r3, [r7, #31]
 8005018:	e047      	b.n	80050aa <UART_SetConfig+0x34e>
 800501a:	2308      	movs	r3, #8
 800501c:	77fb      	strb	r3, [r7, #31]
 800501e:	e044      	b.n	80050aa <UART_SetConfig+0x34e>
 8005020:	2310      	movs	r3, #16
 8005022:	77fb      	strb	r3, [r7, #31]
 8005024:	bf00      	nop
 8005026:	e040      	b.n	80050aa <UART_SetConfig+0x34e>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a11      	ldr	r2, [pc, #68]	; (8005074 <UART_SetConfig+0x318>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d139      	bne.n	80050a6 <UART_SetConfig+0x34a>
 8005032:	4b09      	ldr	r3, [pc, #36]	; (8005058 <UART_SetConfig+0x2fc>)
 8005034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005038:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800503c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005040:	d027      	beq.n	8005092 <UART_SetConfig+0x336>
 8005042:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005046:	d817      	bhi.n	8005078 <UART_SetConfig+0x31c>
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01c      	beq.n	8005086 <UART_SetConfig+0x32a>
 800504c:	e027      	b.n	800509e <UART_SetConfig+0x342>
 800504e:	bf00      	nop
 8005050:	efff69f3 	.word	0xefff69f3
 8005054:	40011000 	.word	0x40011000
 8005058:	40023800 	.word	0x40023800
 800505c:	40004400 	.word	0x40004400
 8005060:	40004800 	.word	0x40004800
 8005064:	40004c00 	.word	0x40004c00
 8005068:	40005000 	.word	0x40005000
 800506c:	40011400 	.word	0x40011400
 8005070:	40007800 	.word	0x40007800
 8005074:	40007c00 	.word	0x40007c00
 8005078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800507c:	d006      	beq.n	800508c <UART_SetConfig+0x330>
 800507e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005082:	d009      	beq.n	8005098 <UART_SetConfig+0x33c>
 8005084:	e00b      	b.n	800509e <UART_SetConfig+0x342>
 8005086:	2300      	movs	r3, #0
 8005088:	77fb      	strb	r3, [r7, #31]
 800508a:	e00e      	b.n	80050aa <UART_SetConfig+0x34e>
 800508c:	2302      	movs	r3, #2
 800508e:	77fb      	strb	r3, [r7, #31]
 8005090:	e00b      	b.n	80050aa <UART_SetConfig+0x34e>
 8005092:	2304      	movs	r3, #4
 8005094:	77fb      	strb	r3, [r7, #31]
 8005096:	e008      	b.n	80050aa <UART_SetConfig+0x34e>
 8005098:	2308      	movs	r3, #8
 800509a:	77fb      	strb	r3, [r7, #31]
 800509c:	e005      	b.n	80050aa <UART_SetConfig+0x34e>
 800509e:	2310      	movs	r3, #16
 80050a0:	77fb      	strb	r3, [r7, #31]
 80050a2:	bf00      	nop
 80050a4:	e001      	b.n	80050aa <UART_SetConfig+0x34e>
 80050a6:	2310      	movs	r3, #16
 80050a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050b2:	d17f      	bne.n	80051b4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80050b4:	7ffb      	ldrb	r3, [r7, #31]
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d85c      	bhi.n	8005174 <UART_SetConfig+0x418>
 80050ba:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <UART_SetConfig+0x364>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	080050e5 	.word	0x080050e5
 80050c4:	08005105 	.word	0x08005105
 80050c8:	08005125 	.word	0x08005125
 80050cc:	08005175 	.word	0x08005175
 80050d0:	0800513d 	.word	0x0800513d
 80050d4:	08005175 	.word	0x08005175
 80050d8:	08005175 	.word	0x08005175
 80050dc:	08005175 	.word	0x08005175
 80050e0:	0800515d 	.word	0x0800515d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050e4:	f7fd ffcc 	bl	8003080 <HAL_RCC_GetPCLK1Freq>
 80050e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	005a      	lsls	r2, r3, #1
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	085b      	lsrs	r3, r3, #1
 80050f4:	441a      	add	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fe:	b29b      	uxth	r3, r3
 8005100:	61bb      	str	r3, [r7, #24]
        break;
 8005102:	e03a      	b.n	800517a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005104:	f7fd ffd0 	bl	80030a8 <HAL_RCC_GetPCLK2Freq>
 8005108:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	005a      	lsls	r2, r3, #1
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	085b      	lsrs	r3, r3, #1
 8005114:	441a      	add	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	fbb2 f3f3 	udiv	r3, r2, r3
 800511e:	b29b      	uxth	r3, r3
 8005120:	61bb      	str	r3, [r7, #24]
        break;
 8005122:	e02a      	b.n	800517a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	085a      	lsrs	r2, r3, #1
 800512a:	4b5f      	ldr	r3, [pc, #380]	; (80052a8 <UART_SetConfig+0x54c>)
 800512c:	4413      	add	r3, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6852      	ldr	r2, [r2, #4]
 8005132:	fbb3 f3f2 	udiv	r3, r3, r2
 8005136:	b29b      	uxth	r3, r3
 8005138:	61bb      	str	r3, [r7, #24]
        break;
 800513a:	e01e      	b.n	800517a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800513c:	f7fd febc 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8005140:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	005a      	lsls	r2, r3, #1
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	085b      	lsrs	r3, r3, #1
 800514c:	441a      	add	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	fbb2 f3f3 	udiv	r3, r2, r3
 8005156:	b29b      	uxth	r3, r3
 8005158:	61bb      	str	r3, [r7, #24]
        break;
 800515a:	e00e      	b.n	800517a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	085b      	lsrs	r3, r3, #1
 8005162:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	fbb2 f3f3 	udiv	r3, r2, r3
 800516e:	b29b      	uxth	r3, r3
 8005170:	61bb      	str	r3, [r7, #24]
        break;
 8005172:	e002      	b.n	800517a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	75fb      	strb	r3, [r7, #23]
        break;
 8005178:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	2b0f      	cmp	r3, #15
 800517e:	d916      	bls.n	80051ae <UART_SetConfig+0x452>
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005186:	d212      	bcs.n	80051ae <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	b29b      	uxth	r3, r3
 800518c:	f023 030f 	bic.w	r3, r3, #15
 8005190:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	085b      	lsrs	r3, r3, #1
 8005196:	b29b      	uxth	r3, r3
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	b29a      	uxth	r2, r3
 800519e:	897b      	ldrh	r3, [r7, #10]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	897a      	ldrh	r2, [r7, #10]
 80051aa:	60da      	str	r2, [r3, #12]
 80051ac:	e070      	b.n	8005290 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	75fb      	strb	r3, [r7, #23]
 80051b2:	e06d      	b.n	8005290 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80051b4:	7ffb      	ldrb	r3, [r7, #31]
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d859      	bhi.n	800526e <UART_SetConfig+0x512>
 80051ba:	a201      	add	r2, pc, #4	; (adr r2, 80051c0 <UART_SetConfig+0x464>)
 80051bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c0:	080051e5 	.word	0x080051e5
 80051c4:	08005203 	.word	0x08005203
 80051c8:	08005221 	.word	0x08005221
 80051cc:	0800526f 	.word	0x0800526f
 80051d0:	08005239 	.word	0x08005239
 80051d4:	0800526f 	.word	0x0800526f
 80051d8:	0800526f 	.word	0x0800526f
 80051dc:	0800526f 	.word	0x0800526f
 80051e0:	08005257 	.word	0x08005257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051e4:	f7fd ff4c 	bl	8003080 <HAL_RCC_GetPCLK1Freq>
 80051e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	085a      	lsrs	r2, r3, #1
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	441a      	add	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	61bb      	str	r3, [r7, #24]
        break;
 8005200:	e038      	b.n	8005274 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005202:	f7fd ff51 	bl	80030a8 <HAL_RCC_GetPCLK2Freq>
 8005206:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	085a      	lsrs	r2, r3, #1
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	441a      	add	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	fbb2 f3f3 	udiv	r3, r2, r3
 800521a:	b29b      	uxth	r3, r3
 800521c:	61bb      	str	r3, [r7, #24]
        break;
 800521e:	e029      	b.n	8005274 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	085a      	lsrs	r2, r3, #1
 8005226:	4b21      	ldr	r3, [pc, #132]	; (80052ac <UART_SetConfig+0x550>)
 8005228:	4413      	add	r3, r2
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6852      	ldr	r2, [r2, #4]
 800522e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005232:	b29b      	uxth	r3, r3
 8005234:	61bb      	str	r3, [r7, #24]
        break;
 8005236:	e01d      	b.n	8005274 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005238:	f7fd fe3e 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 800523c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	085a      	lsrs	r2, r3, #1
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	441a      	add	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005250:	b29b      	uxth	r3, r3
 8005252:	61bb      	str	r3, [r7, #24]
        break;
 8005254:	e00e      	b.n	8005274 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	085b      	lsrs	r3, r3, #1
 800525c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	fbb2 f3f3 	udiv	r3, r2, r3
 8005268:	b29b      	uxth	r3, r3
 800526a:	61bb      	str	r3, [r7, #24]
        break;
 800526c:	e002      	b.n	8005274 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	75fb      	strb	r3, [r7, #23]
        break;
 8005272:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	2b0f      	cmp	r3, #15
 8005278:	d908      	bls.n	800528c <UART_SetConfig+0x530>
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005280:	d204      	bcs.n	800528c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	60da      	str	r2, [r3, #12]
 800528a:	e001      	b.n	8005290 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800529c:	7dfb      	ldrb	r3, [r7, #23]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3720      	adds	r7, #32
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	01e84800 	.word	0x01e84800
 80052ac:	00f42400 	.word	0x00f42400

080052b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00a      	beq.n	80052da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	f003 0310 	and.w	r3, r3, #16
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01a      	beq.n	80053c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053ae:	d10a      	bne.n	80053c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00a      	beq.n	80053e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	605a      	str	r2, [r3, #4]
  }
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af02      	add	r7, sp, #8
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005402:	f7fc f927 	bl	8001654 <HAL_GetTick>
 8005406:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b08      	cmp	r3, #8
 8005414:	d10e      	bne.n	8005434 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005416:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f82a 	bl	800547e <UART_WaitOnFlagUntilTimeout>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e020      	b.n	8005476 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b04      	cmp	r3, #4
 8005440:	d10e      	bne.n	8005460 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005442:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f814 	bl	800547e <UART_WaitOnFlagUntilTimeout>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e00a      	b.n	8005476 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2220      	movs	r2, #32
 800546a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b084      	sub	sp, #16
 8005482:	af00      	add	r7, sp, #0
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	603b      	str	r3, [r7, #0]
 800548a:	4613      	mov	r3, r2
 800548c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800548e:	e05d      	b.n	800554c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005496:	d059      	beq.n	800554c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005498:	f7fc f8dc 	bl	8001654 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d302      	bcc.n	80054ae <UART_WaitOnFlagUntilTimeout+0x30>
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d11b      	bne.n	80054e6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0201 	bic.w	r2, r2, #1
 80054cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2220      	movs	r2, #32
 80054d2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e042      	b.n	800556c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d02b      	beq.n	800554c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005502:	d123      	bne.n	800554c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800550c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800551c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0201 	bic.w	r2, r2, #1
 800552c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2220      	movs	r2, #32
 8005532:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2220      	movs	r2, #32
 8005538:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2220      	movs	r2, #32
 800553e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e00f      	b.n	800556c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	69da      	ldr	r2, [r3, #28]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	4013      	ands	r3, r2
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	429a      	cmp	r2, r3
 800555a:	bf0c      	ite	eq
 800555c:	2301      	moveq	r3, #1
 800555e:	2300      	movne	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	461a      	mov	r2, r3
 8005564:	79fb      	ldrb	r3, [r7, #7]
 8005566:	429a      	cmp	r2, r3
 8005568:	d092      	beq.n	8005490 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005574:	b084      	sub	sp, #16
 8005576:	b580      	push	{r7, lr}
 8005578:	b084      	sub	sp, #16
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
 800557e:	f107 001c 	add.w	r0, r7, #28
 8005582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	2b01      	cmp	r3, #1
 800558a:	d120      	bne.n	80055ce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005590:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	4b20      	ldr	r3, [pc, #128]	; (8005620 <USB_CoreInit+0xac>)
 800559e:	4013      	ands	r3, r2
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d105      	bne.n	80055c2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fa52 	bl	8005a6c <USB_CoreReset>
 80055c8:	4603      	mov	r3, r0
 80055ca:	73fb      	strb	r3, [r7, #15]
 80055cc:	e010      	b.n	80055f0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fa46 	bl	8005a6c <USB_CoreReset>
 80055e0:	4603      	mov	r3, r0
 80055e2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80055f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d10b      	bne.n	800560e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f043 0206 	orr.w	r2, r3, #6
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f043 0220 	orr.w	r2, r3, #32
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800560e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800561a:	b004      	add	sp, #16
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	ffbdffbf 	.word	0xffbdffbf

08005624 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f023 0201 	bic.w	r2, r3, #1
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b082      	sub	sp, #8
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
 800564e:	460b      	mov	r3, r1
 8005650:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800565e:	78fb      	ldrb	r3, [r7, #3]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d106      	bne.n	8005672 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	60da      	str	r2, [r3, #12]
 8005670:	e00b      	b.n	800568a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005672:	78fb      	ldrb	r3, [r7, #3]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d106      	bne.n	8005686 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	60da      	str	r2, [r3, #12]
 8005684:	e001      	b.n	800568a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e003      	b.n	8005692 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800568a:	2032      	movs	r0, #50	; 0x32
 800568c:	f7fb ffee 	bl	800166c <HAL_Delay>

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
	...

0800569c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800569c:	b084      	sub	sp, #16
 800569e:	b580      	push	{r7, lr}
 80056a0:	b086      	sub	sp, #24
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056b6:	2300      	movs	r3, #0
 80056b8:	613b      	str	r3, [r7, #16]
 80056ba:	e009      	b.n	80056d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	3340      	adds	r3, #64	; 0x40
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	2200      	movs	r2, #0
 80056c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	3301      	adds	r3, #1
 80056ce:	613b      	str	r3, [r7, #16]
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	2b0e      	cmp	r3, #14
 80056d4:	d9f2      	bls.n	80056bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80056d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d11c      	bne.n	8005716 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ea:	f043 0302 	orr.w	r3, r3, #2
 80056ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	e005      	b.n	8005722 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005728:	461a      	mov	r2, r3
 800572a:	2300      	movs	r3, #0
 800572c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005734:	4619      	mov	r1, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800573c:	461a      	mov	r2, r3
 800573e:	680b      	ldr	r3, [r1, #0]
 8005740:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005744:	2b01      	cmp	r3, #1
 8005746:	d10c      	bne.n	8005762 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d104      	bne.n	8005758 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800574e:	2100      	movs	r1, #0
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f959 	bl	8005a08 <USB_SetDevSpeed>
 8005756:	e018      	b.n	800578a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005758:	2101      	movs	r1, #1
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f954 	bl	8005a08 <USB_SetDevSpeed>
 8005760:	e013      	b.n	800578a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005764:	2b03      	cmp	r3, #3
 8005766:	d10c      	bne.n	8005782 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576a:	2b00      	cmp	r3, #0
 800576c:	d104      	bne.n	8005778 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800576e:	2100      	movs	r1, #0
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 f949 	bl	8005a08 <USB_SetDevSpeed>
 8005776:	e008      	b.n	800578a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005778:	2101      	movs	r1, #1
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f944 	bl	8005a08 <USB_SetDevSpeed>
 8005780:	e003      	b.n	800578a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005782:	2103      	movs	r1, #3
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f93f 	bl	8005a08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800578a:	2110      	movs	r1, #16
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f8f3 	bl	8005978 <USB_FlushTxFifo>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f911 	bl	80059c4 <USB_FlushRxFifo>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b2:	461a      	mov	r2, r3
 80057b4:	2300      	movs	r3, #0
 80057b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057be:	461a      	mov	r2, r3
 80057c0:	2300      	movs	r3, #0
 80057c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ca:	461a      	mov	r2, r3
 80057cc:	2300      	movs	r3, #0
 80057ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057d0:	2300      	movs	r3, #0
 80057d2:	613b      	str	r3, [r7, #16]
 80057d4:	e043      	b.n	800585e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057ec:	d118      	bne.n	8005820 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10a      	bne.n	800580a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005800:	461a      	mov	r2, r3
 8005802:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	e013      	b.n	8005832 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	4413      	add	r3, r2
 8005812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005816:	461a      	mov	r2, r3
 8005818:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800581c:	6013      	str	r3, [r2, #0]
 800581e:	e008      	b.n	8005832 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582c:	461a      	mov	r2, r3
 800582e:	2300      	movs	r3, #0
 8005830:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583e:	461a      	mov	r2, r3
 8005840:	2300      	movs	r3, #0
 8005842:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005850:	461a      	mov	r2, r3
 8005852:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005856:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	3301      	adds	r3, #1
 800585c:	613b      	str	r3, [r7, #16]
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	429a      	cmp	r2, r3
 8005864:	d3b7      	bcc.n	80057d6 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005866:	2300      	movs	r3, #0
 8005868:	613b      	str	r3, [r7, #16]
 800586a:	e043      	b.n	80058f4 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800587e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005882:	d118      	bne.n	80058b6 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10a      	bne.n	80058a0 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4413      	add	r3, r2
 8005892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005896:	461a      	mov	r2, r3
 8005898:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	e013      	b.n	80058c8 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ac:	461a      	mov	r2, r3
 80058ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058b2:	6013      	str	r3, [r2, #0]
 80058b4:	e008      	b.n	80058c8 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	015a      	lsls	r2, r3, #5
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4413      	add	r3, r2
 80058be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c2:	461a      	mov	r2, r3
 80058c4:	2300      	movs	r3, #0
 80058c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d4:	461a      	mov	r2, r3
 80058d6:	2300      	movs	r3, #0
 80058d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e6:	461a      	mov	r2, r3
 80058e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	3301      	adds	r3, #1
 80058f2:	613b      	str	r3, [r7, #16]
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d3b7      	bcc.n	800586c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800590a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800590e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800591c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800591e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005920:	2b00      	cmp	r3, #0
 8005922:	d105      	bne.n	8005930 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	f043 0210 	orr.w	r2, r3, #16
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	699a      	ldr	r2, [r3, #24]
 8005934:	4b0e      	ldr	r3, [pc, #56]	; (8005970 <USB_DevInit+0x2d4>)
 8005936:	4313      	orrs	r3, r2
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800593c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800593e:	2b00      	cmp	r3, #0
 8005940:	d005      	beq.n	800594e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	f043 0208 	orr.w	r2, r3, #8
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800594e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005950:	2b01      	cmp	r3, #1
 8005952:	d105      	bne.n	8005960 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699a      	ldr	r2, [r3, #24]
 8005958:	4b06      	ldr	r3, [pc, #24]	; (8005974 <USB_DevInit+0x2d8>)
 800595a:	4313      	orrs	r3, r2
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005960:	7dfb      	ldrb	r3, [r7, #23]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3718      	adds	r7, #24
 8005966:	46bd      	mov	sp, r7
 8005968:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800596c:	b004      	add	sp, #16
 800596e:	4770      	bx	lr
 8005970:	803c3800 	.word	0x803c3800
 8005974:	40000004 	.word	0x40000004

08005978 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	019b      	lsls	r3, r3, #6
 800598a:	f043 0220 	orr.w	r2, r3, #32
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	3301      	adds	r3, #1
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4a09      	ldr	r2, [pc, #36]	; (80059c0 <USB_FlushTxFifo+0x48>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d901      	bls.n	80059a4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e006      	b.n	80059b2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	f003 0320 	and.w	r3, r3, #32
 80059ac:	2b20      	cmp	r3, #32
 80059ae:	d0f0      	beq.n	8005992 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	00030d40 	.word	0x00030d40

080059c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80059cc:	2300      	movs	r3, #0
 80059ce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2210      	movs	r2, #16
 80059d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	3301      	adds	r3, #1
 80059da:	60fb      	str	r3, [r7, #12]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4a09      	ldr	r2, [pc, #36]	; (8005a04 <USB_FlushRxFifo+0x40>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d901      	bls.n	80059e8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e006      	b.n	80059f6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	2b10      	cmp	r3, #16
 80059f2:	d0f0      	beq.n	80059d6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	00030d40 	.word	0x00030d40

08005a08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	460b      	mov	r3, r1
 8005a12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	68f9      	ldr	r1, [r7, #12]
 8005a24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b084      	sub	sp, #16
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a54:	f043 0302 	orr.w	r3, r3, #2
 8005a58:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005a5a:	2003      	movs	r0, #3
 8005a5c:	f7fb fe06 	bl	800166c <HAL_Delay>

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
	...

08005a6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	60fb      	str	r3, [r7, #12]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	4a13      	ldr	r2, [pc, #76]	; (8005ad0 <USB_CoreReset+0x64>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d901      	bls.n	8005a8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e01b      	b.n	8005ac2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	daf2      	bge.n	8005a78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f043 0201 	orr.w	r2, r3, #1
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4a09      	ldr	r2, [pc, #36]	; (8005ad0 <USB_CoreReset+0x64>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d901      	bls.n	8005ab4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e006      	b.n	8005ac2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d0f0      	beq.n	8005aa2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	00030d40 	.word	0x00030d40

08005ad4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005ad8:	bf00      	nop
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
	...

08005ae4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005aea:	f3ef 8305 	mrs	r3, IPSR
 8005aee:	60bb      	str	r3, [r7, #8]
  return(result);
 8005af0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10f      	bne.n	8005b16 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005af6:	f3ef 8310 	mrs	r3, PRIMASK
 8005afa:	607b      	str	r3, [r7, #4]
  return(result);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d105      	bne.n	8005b0e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b02:	f3ef 8311 	mrs	r3, BASEPRI
 8005b06:	603b      	str	r3, [r7, #0]
  return(result);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d007      	beq.n	8005b1e <osKernelInitialize+0x3a>
 8005b0e:	4b0e      	ldr	r3, [pc, #56]	; (8005b48 <osKernelInitialize+0x64>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d103      	bne.n	8005b1e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005b16:	f06f 0305 	mvn.w	r3, #5
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	e00c      	b.n	8005b38 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005b1e:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <osKernelInitialize+0x64>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d105      	bne.n	8005b32 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005b26:	4b08      	ldr	r3, [pc, #32]	; (8005b48 <osKernelInitialize+0x64>)
 8005b28:	2201      	movs	r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	e002      	b.n	8005b38 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005b38:	68fb      	ldr	r3, [r7, #12]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	20000094 	.word	0x20000094

08005b4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b52:	f3ef 8305 	mrs	r3, IPSR
 8005b56:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10f      	bne.n	8005b7e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b62:	607b      	str	r3, [r7, #4]
  return(result);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d105      	bne.n	8005b76 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b6a:	f3ef 8311 	mrs	r3, BASEPRI
 8005b6e:	603b      	str	r3, [r7, #0]
  return(result);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d007      	beq.n	8005b86 <osKernelStart+0x3a>
 8005b76:	4b0f      	ldr	r3, [pc, #60]	; (8005bb4 <osKernelStart+0x68>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d103      	bne.n	8005b86 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005b7e:	f06f 0305 	mvn.w	r3, #5
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	e010      	b.n	8005ba8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005b86:	4b0b      	ldr	r3, [pc, #44]	; (8005bb4 <osKernelStart+0x68>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d109      	bne.n	8005ba2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005b8e:	f7ff ffa1 	bl	8005ad4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005b92:	4b08      	ldr	r3, [pc, #32]	; (8005bb4 <osKernelStart+0x68>)
 8005b94:	2202      	movs	r2, #2
 8005b96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005b98:	f001 f89c 	bl	8006cd4 <vTaskStartScheduler>
      stat = osOK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	e002      	b.n	8005ba8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005ba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ba6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	20000094 	.word	0x20000094

08005bb8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b090      	sub	sp, #64	; 0x40
 8005bbc:	af04      	add	r7, sp, #16
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bc8:	f3ef 8305 	mrs	r3, IPSR
 8005bcc:	61fb      	str	r3, [r7, #28]
  return(result);
 8005bce:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f040 808f 	bne.w	8005cf4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8005bda:	61bb      	str	r3, [r7, #24]
  return(result);
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d105      	bne.n	8005bee <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005be2:	f3ef 8311 	mrs	r3, BASEPRI
 8005be6:	617b      	str	r3, [r7, #20]
  return(result);
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <osThreadNew+0x3e>
 8005bee:	4b44      	ldr	r3, [pc, #272]	; (8005d00 <osThreadNew+0x148>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d07e      	beq.n	8005cf4 <osThreadNew+0x13c>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d07b      	beq.n	8005cf4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005bfc:	2380      	movs	r3, #128	; 0x80
 8005bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005c00:	2318      	movs	r3, #24
 8005c02:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005c04:	2300      	movs	r3, #0
 8005c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c0c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d045      	beq.n	8005ca0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <osThreadNew+0x6a>
        name = attr->name;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d008      	beq.n	8005c48 <osThreadNew+0x90>
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	2b38      	cmp	r3, #56	; 0x38
 8005c3a:	d805      	bhi.n	8005c48 <osThreadNew+0x90>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d001      	beq.n	8005c4c <osThreadNew+0x94>
        return (NULL);
 8005c48:	2300      	movs	r3, #0
 8005c4a:	e054      	b.n	8005cf6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	089b      	lsrs	r3, r3, #2
 8005c5a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00e      	beq.n	8005c82 <osThreadNew+0xca>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	2b5b      	cmp	r3, #91	; 0x5b
 8005c6a:	d90a      	bls.n	8005c82 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d006      	beq.n	8005c82 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <osThreadNew+0xca>
        mem = 1;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	623b      	str	r3, [r7, #32]
 8005c80:	e010      	b.n	8005ca4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10c      	bne.n	8005ca4 <osThreadNew+0xec>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d108      	bne.n	8005ca4 <osThreadNew+0xec>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d104      	bne.n	8005ca4 <osThreadNew+0xec>
          mem = 0;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	623b      	str	r3, [r7, #32]
 8005c9e:	e001      	b.n	8005ca4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d110      	bne.n	8005ccc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005cb2:	9202      	str	r2, [sp, #8]
 8005cb4:	9301      	str	r3, [sp, #4]
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 fe2b 	bl	800691c <xTaskCreateStatic>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	613b      	str	r3, [r7, #16]
 8005cca:	e013      	b.n	8005cf4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005ccc:	6a3b      	ldr	r3, [r7, #32]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d110      	bne.n	8005cf4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	f107 0310 	add.w	r3, r7, #16
 8005cda:	9301      	str	r3, [sp, #4]
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 fe79 	bl	80069dc <xTaskCreate>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d001      	beq.n	8005cf4 <osThreadNew+0x13c>
          hTask = NULL;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005cf4:	693b      	ldr	r3, [r7, #16]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3730      	adds	r7, #48	; 0x30
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	20000094 	.word	0x20000094

08005d04 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d0c:	f3ef 8305 	mrs	r3, IPSR
 8005d10:	613b      	str	r3, [r7, #16]
  return(result);
 8005d12:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10f      	bne.n	8005d38 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d18:	f3ef 8310 	mrs	r3, PRIMASK
 8005d1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d105      	bne.n	8005d30 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d24:	f3ef 8311 	mrs	r3, BASEPRI
 8005d28:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d007      	beq.n	8005d40 <osDelay+0x3c>
 8005d30:	4b0a      	ldr	r3, [pc, #40]	; (8005d5c <osDelay+0x58>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d103      	bne.n	8005d40 <osDelay+0x3c>
    stat = osErrorISR;
 8005d38:	f06f 0305 	mvn.w	r3, #5
 8005d3c:	617b      	str	r3, [r7, #20]
 8005d3e:	e007      	b.n	8005d50 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 ff8c 	bl	8006c68 <vTaskDelay>
    }
  }

  return (stat);
 8005d50:	697b      	ldr	r3, [r7, #20]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3718      	adds	r7, #24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20000094 	.word	0x20000094

08005d60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4a07      	ldr	r2, [pc, #28]	; (8005d8c <vApplicationGetIdleTaskMemory+0x2c>)
 8005d70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	4a06      	ldr	r2, [pc, #24]	; (8005d90 <vApplicationGetIdleTaskMemory+0x30>)
 8005d76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2280      	movs	r2, #128	; 0x80
 8005d7c:	601a      	str	r2, [r3, #0]
}
 8005d7e:	bf00      	nop
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	20000098 	.word	0x20000098
 8005d90:	200000f4 	.word	0x200000f4

08005d94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4a07      	ldr	r2, [pc, #28]	; (8005dc0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005da4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	4a06      	ldr	r2, [pc, #24]	; (8005dc4 <vApplicationGetTimerTaskMemory+0x30>)
 8005daa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005db2:	601a      	str	r2, [r3, #0]
}
 8005db4:	bf00      	nop
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr
 8005dc0:	200002f4 	.word	0x200002f4
 8005dc4:	20000350 	.word	0x20000350

08005dc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f103 0208 	add.w	r2, r3, #8
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005de0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f103 0208 	add.w	r2, r3, #8
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f103 0208 	add.w	r2, r3, #8
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e22:	b480      	push	{r7}
 8005e24:	b085      	sub	sp, #20
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	601a      	str	r2, [r3, #0]
}
 8005e5e:	bf00      	nop
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b085      	sub	sp, #20
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e80:	d103      	bne.n	8005e8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	e00c      	b.n	8005ea4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	3308      	adds	r3, #8
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	e002      	b.n	8005e98 <vListInsert+0x2e>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d2f6      	bcs.n	8005e92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	601a      	str	r2, [r3, #0]
}
 8005ed0:	bf00      	nop
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	6892      	ldr	r2, [r2, #8]
 8005ef2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6852      	ldr	r2, [r2, #4]
 8005efc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d103      	bne.n	8005f10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	1e5a      	subs	r2, r3, #1
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10b      	bne.n	8005f5c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f48:	b672      	cpsid	i
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	b662      	cpsie	i
 8005f58:	60bb      	str	r3, [r7, #8]
 8005f5a:	e7fe      	b.n	8005f5a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8005f5c:	f002 f844 	bl	8007fe8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f68:	68f9      	ldr	r1, [r7, #12]
 8005f6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f6c:	fb01 f303 	mul.w	r3, r1, r3
 8005f70:	441a      	add	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	68f9      	ldr	r1, [r7, #12]
 8005f90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f92:	fb01 f303 	mul.w	r3, r1, r3
 8005f96:	441a      	add	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	22ff      	movs	r2, #255	; 0xff
 8005fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	22ff      	movs	r2, #255	; 0xff
 8005fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d114      	bne.n	8005fdc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d01a      	beq.n	8005ff0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	3310      	adds	r3, #16
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f001 f916 	bl	80071f0 <xTaskRemoveFromEventList>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d012      	beq.n	8005ff0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005fca:	4b0d      	ldr	r3, [pc, #52]	; (8006000 <xQueueGenericReset+0xd0>)
 8005fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	e009      	b.n	8005ff0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3310      	adds	r3, #16
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff fef1 	bl	8005dc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3324      	adds	r3, #36	; 0x24
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7ff feec 	bl	8005dc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ff0:	f002 f82c 	bl	800804c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ff4:	2301      	movs	r3, #1
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	e000ed04 	.word	0xe000ed04

08006004 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006004:	b580      	push	{r7, lr}
 8006006:	b08e      	sub	sp, #56	; 0x38
 8006008:	af02      	add	r7, sp, #8
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
 8006010:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10b      	bne.n	8006030 <xQueueGenericCreateStatic+0x2c>
 8006018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601c:	b672      	cpsid	i
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	b662      	cpsie	i
 800602c:	62bb      	str	r3, [r7, #40]	; 0x28
 800602e:	e7fe      	b.n	800602e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10b      	bne.n	800604e <xQueueGenericCreateStatic+0x4a>
 8006036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603a:	b672      	cpsid	i
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	b662      	cpsie	i
 800604a:	627b      	str	r3, [r7, #36]	; 0x24
 800604c:	e7fe      	b.n	800604c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <xQueueGenericCreateStatic+0x56>
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <xQueueGenericCreateStatic+0x5a>
 800605a:	2301      	movs	r3, #1
 800605c:	e000      	b.n	8006060 <xQueueGenericCreateStatic+0x5c>
 800605e:	2300      	movs	r3, #0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10b      	bne.n	800607c <xQueueGenericCreateStatic+0x78>
 8006064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006068:	b672      	cpsid	i
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	b662      	cpsie	i
 8006078:	623b      	str	r3, [r7, #32]
 800607a:	e7fe      	b.n	800607a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d102      	bne.n	8006088 <xQueueGenericCreateStatic+0x84>
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <xQueueGenericCreateStatic+0x88>
 8006088:	2301      	movs	r3, #1
 800608a:	e000      	b.n	800608e <xQueueGenericCreateStatic+0x8a>
 800608c:	2300      	movs	r3, #0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10b      	bne.n	80060aa <xQueueGenericCreateStatic+0xa6>
 8006092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006096:	b672      	cpsid	i
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	b662      	cpsie	i
 80060a6:	61fb      	str	r3, [r7, #28]
 80060a8:	e7fe      	b.n	80060a8 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80060aa:	2350      	movs	r3, #80	; 0x50
 80060ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2b50      	cmp	r3, #80	; 0x50
 80060b2:	d00b      	beq.n	80060cc <xQueueGenericCreateStatic+0xc8>
 80060b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b8:	b672      	cpsid	i
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	b662      	cpsie	i
 80060c8:	61bb      	str	r3, [r7, #24]
 80060ca:	e7fe      	b.n	80060ca <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80060cc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80060d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00d      	beq.n	80060f4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80060d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060e0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80060e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	4613      	mov	r3, r2
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	68b9      	ldr	r1, [r7, #8]
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 f805 	bl	80060fe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3730      	adds	r7, #48	; 0x30
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b084      	sub	sp, #16
 8006102:	af00      	add	r7, sp, #0
 8006104:	60f8      	str	r0, [r7, #12]
 8006106:	60b9      	str	r1, [r7, #8]
 8006108:	607a      	str	r2, [r7, #4]
 800610a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d103      	bne.n	800611a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	e002      	b.n	8006120 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800612c:	2101      	movs	r1, #1
 800612e:	69b8      	ldr	r0, [r7, #24]
 8006130:	f7ff fefe 	bl	8005f30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	78fa      	ldrb	r2, [r7, #3]
 8006138:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800613c:	bf00      	nop
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08e      	sub	sp, #56	; 0x38
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006152:	2300      	movs	r3, #0
 8006154:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10b      	bne.n	8006178 <xQueueGenericSend+0x34>
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	b672      	cpsid	i
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	b662      	cpsie	i
 8006174:	62bb      	str	r3, [r7, #40]	; 0x28
 8006176:	e7fe      	b.n	8006176 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d103      	bne.n	8006186 <xQueueGenericSend+0x42>
 800617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <xQueueGenericSend+0x46>
 8006186:	2301      	movs	r3, #1
 8006188:	e000      	b.n	800618c <xQueueGenericSend+0x48>
 800618a:	2300      	movs	r3, #0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10b      	bne.n	80061a8 <xQueueGenericSend+0x64>
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	b672      	cpsid	i
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	b662      	cpsie	i
 80061a4:	627b      	str	r3, [r7, #36]	; 0x24
 80061a6:	e7fe      	b.n	80061a6 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d103      	bne.n	80061b6 <xQueueGenericSend+0x72>
 80061ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <xQueueGenericSend+0x76>
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <xQueueGenericSend+0x78>
 80061ba:	2300      	movs	r3, #0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10b      	bne.n	80061d8 <xQueueGenericSend+0x94>
 80061c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c4:	b672      	cpsid	i
 80061c6:	f383 8811 	msr	BASEPRI, r3
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	b662      	cpsie	i
 80061d4:	623b      	str	r3, [r7, #32]
 80061d6:	e7fe      	b.n	80061d6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061d8:	f001 f9c8 	bl	800756c <xTaskGetSchedulerState>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d102      	bne.n	80061e8 <xQueueGenericSend+0xa4>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <xQueueGenericSend+0xa8>
 80061e8:	2301      	movs	r3, #1
 80061ea:	e000      	b.n	80061ee <xQueueGenericSend+0xaa>
 80061ec:	2300      	movs	r3, #0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10b      	bne.n	800620a <xQueueGenericSend+0xc6>
 80061f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f6:	b672      	cpsid	i
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	b662      	cpsie	i
 8006206:	61fb      	str	r3, [r7, #28]
 8006208:	e7fe      	b.n	8006208 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800620a:	f001 feed 	bl	8007fe8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800620e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006216:	429a      	cmp	r2, r3
 8006218:	d302      	bcc.n	8006220 <xQueueGenericSend+0xdc>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b02      	cmp	r3, #2
 800621e:	d129      	bne.n	8006274 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	68b9      	ldr	r1, [r7, #8]
 8006224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006226:	f000 fa0d 	bl	8006644 <prvCopyDataToQueue>
 800622a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800622c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	2b00      	cmp	r3, #0
 8006232:	d010      	beq.n	8006256 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006236:	3324      	adds	r3, #36	; 0x24
 8006238:	4618      	mov	r0, r3
 800623a:	f000 ffd9 	bl	80071f0 <xTaskRemoveFromEventList>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d013      	beq.n	800626c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006244:	4b3f      	ldr	r3, [pc, #252]	; (8006344 <xQueueGenericSend+0x200>)
 8006246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	e00a      	b.n	800626c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006258:	2b00      	cmp	r3, #0
 800625a:	d007      	beq.n	800626c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800625c:	4b39      	ldr	r3, [pc, #228]	; (8006344 <xQueueGenericSend+0x200>)
 800625e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800626c:	f001 feee 	bl	800804c <vPortExitCritical>
				return pdPASS;
 8006270:	2301      	movs	r3, #1
 8006272:	e063      	b.n	800633c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d103      	bne.n	8006282 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800627a:	f001 fee7 	bl	800804c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800627e:	2300      	movs	r3, #0
 8006280:	e05c      	b.n	800633c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006284:	2b00      	cmp	r3, #0
 8006286:	d106      	bne.n	8006296 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006288:	f107 0314 	add.w	r3, r7, #20
 800628c:	4618      	mov	r0, r3
 800628e:	f001 f813 	bl	80072b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006292:	2301      	movs	r3, #1
 8006294:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006296:	f001 fed9 	bl	800804c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800629a:	f000 fd83 	bl	8006da4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800629e:	f001 fea3 	bl	8007fe8 <vPortEnterCritical>
 80062a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062a8:	b25b      	sxtb	r3, r3
 80062aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062ae:	d103      	bne.n	80062b8 <xQueueGenericSend+0x174>
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062be:	b25b      	sxtb	r3, r3
 80062c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062c4:	d103      	bne.n	80062ce <xQueueGenericSend+0x18a>
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062ce:	f001 febd 	bl	800804c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062d2:	1d3a      	adds	r2, r7, #4
 80062d4:	f107 0314 	add.w	r3, r7, #20
 80062d8:	4611      	mov	r1, r2
 80062da:	4618      	mov	r0, r3
 80062dc:	f001 f802 	bl	80072e4 <xTaskCheckForTimeOut>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d124      	bne.n	8006330 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062e8:	f000 faa4 	bl	8006834 <prvIsQueueFull>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d018      	beq.n	8006324 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f4:	3310      	adds	r3, #16
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	4611      	mov	r1, r2
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 ff26 	bl	800714c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006302:	f000 fa2f 	bl	8006764 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006306:	f000 fd5b 	bl	8006dc0 <xTaskResumeAll>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	f47f af7c 	bne.w	800620a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006312:	4b0c      	ldr	r3, [pc, #48]	; (8006344 <xQueueGenericSend+0x200>)
 8006314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	e772      	b.n	800620a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006326:	f000 fa1d 	bl	8006764 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800632a:	f000 fd49 	bl	8006dc0 <xTaskResumeAll>
 800632e:	e76c      	b.n	800620a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006332:	f000 fa17 	bl	8006764 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006336:	f000 fd43 	bl	8006dc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800633a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800633c:	4618      	mov	r0, r3
 800633e:	3738      	adds	r7, #56	; 0x38
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	e000ed04 	.word	0xe000ed04

08006348 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08e      	sub	sp, #56	; 0x38
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
 8006354:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10b      	bne.n	8006378 <xQueueGenericSendFromISR+0x30>
 8006360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006364:	b672      	cpsid	i
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	b662      	cpsie	i
 8006374:	627b      	str	r3, [r7, #36]	; 0x24
 8006376:	e7fe      	b.n	8006376 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d103      	bne.n	8006386 <xQueueGenericSendFromISR+0x3e>
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <xQueueGenericSendFromISR+0x42>
 8006386:	2301      	movs	r3, #1
 8006388:	e000      	b.n	800638c <xQueueGenericSendFromISR+0x44>
 800638a:	2300      	movs	r3, #0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10b      	bne.n	80063a8 <xQueueGenericSendFromISR+0x60>
 8006390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006394:	b672      	cpsid	i
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	b662      	cpsie	i
 80063a4:	623b      	str	r3, [r7, #32]
 80063a6:	e7fe      	b.n	80063a6 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d103      	bne.n	80063b6 <xQueueGenericSendFromISR+0x6e>
 80063ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d101      	bne.n	80063ba <xQueueGenericSendFromISR+0x72>
 80063b6:	2301      	movs	r3, #1
 80063b8:	e000      	b.n	80063bc <xQueueGenericSendFromISR+0x74>
 80063ba:	2300      	movs	r3, #0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10b      	bne.n	80063d8 <xQueueGenericSendFromISR+0x90>
 80063c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c4:	b672      	cpsid	i
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	b662      	cpsie	i
 80063d4:	61fb      	str	r3, [r7, #28]
 80063d6:	e7fe      	b.n	80063d6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063d8:	f001 fee6 	bl	80081a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063dc:	f3ef 8211 	mrs	r2, BASEPRI
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	b672      	cpsid	i
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	b662      	cpsie	i
 80063f4:	61ba      	str	r2, [r7, #24]
 80063f6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063f8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006404:	429a      	cmp	r2, r3
 8006406:	d302      	bcc.n	800640e <xQueueGenericSendFromISR+0xc6>
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	2b02      	cmp	r3, #2
 800640c:	d12c      	bne.n	8006468 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006410:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006414:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	68b9      	ldr	r1, [r7, #8]
 800641c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800641e:	f000 f911 	bl	8006644 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006422:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006426:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800642a:	d112      	bne.n	8006452 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006430:	2b00      	cmp	r3, #0
 8006432:	d016      	beq.n	8006462 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	3324      	adds	r3, #36	; 0x24
 8006438:	4618      	mov	r0, r3
 800643a:	f000 fed9 	bl	80071f0 <xTaskRemoveFromEventList>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00e      	beq.n	8006462 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00b      	beq.n	8006462 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	e007      	b.n	8006462 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006452:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006456:	3301      	adds	r3, #1
 8006458:	b2db      	uxtb	r3, r3
 800645a:	b25a      	sxtb	r2, r3
 800645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006462:	2301      	movs	r3, #1
 8006464:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006466:	e001      	b.n	800646c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006468:	2300      	movs	r3, #0
 800646a:	637b      	str	r3, [r7, #52]	; 0x34
 800646c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006478:	4618      	mov	r0, r3
 800647a:	3738      	adds	r7, #56	; 0x38
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b08c      	sub	sp, #48	; 0x30
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800648c:	2300      	movs	r3, #0
 800648e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10b      	bne.n	80064b2 <xQueueReceive+0x32>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	b672      	cpsid	i
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	b662      	cpsie	i
 80064ae:	623b      	str	r3, [r7, #32]
 80064b0:	e7fe      	b.n	80064b0 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d103      	bne.n	80064c0 <xQueueReceive+0x40>
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <xQueueReceive+0x44>
 80064c0:	2301      	movs	r3, #1
 80064c2:	e000      	b.n	80064c6 <xQueueReceive+0x46>
 80064c4:	2300      	movs	r3, #0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10b      	bne.n	80064e2 <xQueueReceive+0x62>
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	b672      	cpsid	i
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	b662      	cpsie	i
 80064de:	61fb      	str	r3, [r7, #28]
 80064e0:	e7fe      	b.n	80064e0 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064e2:	f001 f843 	bl	800756c <xTaskGetSchedulerState>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d102      	bne.n	80064f2 <xQueueReceive+0x72>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <xQueueReceive+0x76>
 80064f2:	2301      	movs	r3, #1
 80064f4:	e000      	b.n	80064f8 <xQueueReceive+0x78>
 80064f6:	2300      	movs	r3, #0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10b      	bne.n	8006514 <xQueueReceive+0x94>
 80064fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006500:	b672      	cpsid	i
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	b662      	cpsie	i
 8006510:	61bb      	str	r3, [r7, #24]
 8006512:	e7fe      	b.n	8006512 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006514:	f001 fd68 	bl	8007fe8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	2b00      	cmp	r3, #0
 8006522:	d01f      	beq.n	8006564 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006524:	68b9      	ldr	r1, [r7, #8]
 8006526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006528:	f000 f8f6 	bl	8006718 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	1e5a      	subs	r2, r3, #1
 8006530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006532:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00f      	beq.n	800655c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	3310      	adds	r3, #16
 8006540:	4618      	mov	r0, r3
 8006542:	f000 fe55 	bl	80071f0 <xTaskRemoveFromEventList>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d007      	beq.n	800655c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800654c:	4b3c      	ldr	r3, [pc, #240]	; (8006640 <xQueueReceive+0x1c0>)
 800654e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800655c:	f001 fd76 	bl	800804c <vPortExitCritical>
				return pdPASS;
 8006560:	2301      	movs	r3, #1
 8006562:	e069      	b.n	8006638 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d103      	bne.n	8006572 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800656a:	f001 fd6f 	bl	800804c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800656e:	2300      	movs	r3, #0
 8006570:	e062      	b.n	8006638 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006574:	2b00      	cmp	r3, #0
 8006576:	d106      	bne.n	8006586 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006578:	f107 0310 	add.w	r3, r7, #16
 800657c:	4618      	mov	r0, r3
 800657e:	f000 fe9b 	bl	80072b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006582:	2301      	movs	r3, #1
 8006584:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006586:	f001 fd61 	bl	800804c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800658a:	f000 fc0b 	bl	8006da4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800658e:	f001 fd2b 	bl	8007fe8 <vPortEnterCritical>
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006598:	b25b      	sxtb	r3, r3
 800659a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800659e:	d103      	bne.n	80065a8 <xQueueReceive+0x128>
 80065a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065ae:	b25b      	sxtb	r3, r3
 80065b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065b4:	d103      	bne.n	80065be <xQueueReceive+0x13e>
 80065b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065be:	f001 fd45 	bl	800804c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065c2:	1d3a      	adds	r2, r7, #4
 80065c4:	f107 0310 	add.w	r3, r7, #16
 80065c8:	4611      	mov	r1, r2
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 fe8a 	bl	80072e4 <xTaskCheckForTimeOut>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d123      	bne.n	800661e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065d8:	f000 f916 	bl	8006808 <prvIsQueueEmpty>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d017      	beq.n	8006612 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e4:	3324      	adds	r3, #36	; 0x24
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	4611      	mov	r1, r2
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 fdae 	bl	800714c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065f2:	f000 f8b7 	bl	8006764 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065f6:	f000 fbe3 	bl	8006dc0 <xTaskResumeAll>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d189      	bne.n	8006514 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006600:	4b0f      	ldr	r3, [pc, #60]	; (8006640 <xQueueReceive+0x1c0>)
 8006602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	e780      	b.n	8006514 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006612:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006614:	f000 f8a6 	bl	8006764 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006618:	f000 fbd2 	bl	8006dc0 <xTaskResumeAll>
 800661c:	e77a      	b.n	8006514 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800661e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006620:	f000 f8a0 	bl	8006764 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006624:	f000 fbcc 	bl	8006dc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800662a:	f000 f8ed 	bl	8006808 <prvIsQueueEmpty>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	f43f af6f 	beq.w	8006514 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006636:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006638:	4618      	mov	r0, r3
 800663a:	3730      	adds	r7, #48	; 0x30
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	e000ed04 	.word	0xe000ed04

08006644 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006650:	2300      	movs	r3, #0
 8006652:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006658:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10d      	bne.n	800667e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d14d      	bne.n	8006706 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	4618      	mov	r0, r3
 8006670:	f000 ff9a 	bl	80075a8 <xTaskPriorityDisinherit>
 8006674:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	609a      	str	r2, [r3, #8]
 800667c:	e043      	b.n	8006706 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d119      	bne.n	80066b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6858      	ldr	r0, [r3, #4]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668c:	461a      	mov	r2, r3
 800668e:	68b9      	ldr	r1, [r7, #8]
 8006690:	f001 ffd6 	bl	8008640 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669c:	441a      	add	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d32b      	bcc.n	8006706 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	605a      	str	r2, [r3, #4]
 80066b6:	e026      	b.n	8006706 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	68d8      	ldr	r0, [r3, #12]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c0:	461a      	mov	r2, r3
 80066c2:	68b9      	ldr	r1, [r7, #8]
 80066c4:	f001 ffbc 	bl	8008640 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	68da      	ldr	r2, [r3, #12]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d0:	425b      	negs	r3, r3
 80066d2:	441a      	add	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d207      	bcs.n	80066f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ec:	425b      	negs	r3, r3
 80066ee:	441a      	add	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d105      	bne.n	8006706 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	3b01      	subs	r3, #1
 8006704:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800670e:	697b      	ldr	r3, [r7, #20]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3718      	adds	r7, #24
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006726:	2b00      	cmp	r3, #0
 8006728:	d018      	beq.n	800675c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	441a      	add	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68da      	ldr	r2, [r3, #12]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	429a      	cmp	r2, r3
 8006742:	d303      	bcc.n	800674c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68d9      	ldr	r1, [r3, #12]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006754:	461a      	mov	r2, r3
 8006756:	6838      	ldr	r0, [r7, #0]
 8006758:	f001 ff72 	bl	8008640 <memcpy>
	}
}
 800675c:	bf00      	nop
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800676c:	f001 fc3c 	bl	8007fe8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006776:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006778:	e011      	b.n	800679e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677e:	2b00      	cmp	r3, #0
 8006780:	d012      	beq.n	80067a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	3324      	adds	r3, #36	; 0x24
 8006786:	4618      	mov	r0, r3
 8006788:	f000 fd32 	bl	80071f0 <xTaskRemoveFromEventList>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006792:	f000 fe0b 	bl	80073ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006796:	7bfb      	ldrb	r3, [r7, #15]
 8006798:	3b01      	subs	r3, #1
 800679a:	b2db      	uxtb	r3, r3
 800679c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800679e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	dce9      	bgt.n	800677a <prvUnlockQueue+0x16>
 80067a6:	e000      	b.n	80067aa <prvUnlockQueue+0x46>
					break;
 80067a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	22ff      	movs	r2, #255	; 0xff
 80067ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067b2:	f001 fc4b 	bl	800804c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067b6:	f001 fc17 	bl	8007fe8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067c2:	e011      	b.n	80067e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d012      	beq.n	80067f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	3310      	adds	r3, #16
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 fd0d 	bl	80071f0 <xTaskRemoveFromEventList>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d001      	beq.n	80067e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067dc:	f000 fde6 	bl	80073ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067e0:	7bbb      	ldrb	r3, [r7, #14]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	dce9      	bgt.n	80067c4 <prvUnlockQueue+0x60>
 80067f0:	e000      	b.n	80067f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80067f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	22ff      	movs	r2, #255	; 0xff
 80067f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80067fc:	f001 fc26 	bl	800804c <vPortExitCritical>
}
 8006800:	bf00      	nop
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006810:	f001 fbea 	bl	8007fe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006818:	2b00      	cmp	r3, #0
 800681a:	d102      	bne.n	8006822 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800681c:	2301      	movs	r3, #1
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	e001      	b.n	8006826 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006822:	2300      	movs	r3, #0
 8006824:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006826:	f001 fc11 	bl	800804c <vPortExitCritical>

	return xReturn;
 800682a:	68fb      	ldr	r3, [r7, #12]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800683c:	f001 fbd4 	bl	8007fe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006848:	429a      	cmp	r2, r3
 800684a:	d102      	bne.n	8006852 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800684c:	2301      	movs	r3, #1
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	e001      	b.n	8006856 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006852:	2300      	movs	r3, #0
 8006854:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006856:	f001 fbf9 	bl	800804c <vPortExitCritical>

	return xReturn;
 800685a:	68fb      	ldr	r3, [r7, #12]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800686e:	2300      	movs	r3, #0
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	e014      	b.n	800689e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006874:	4a0e      	ldr	r2, [pc, #56]	; (80068b0 <vQueueAddToRegistry+0x4c>)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10b      	bne.n	8006898 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006880:	490b      	ldr	r1, [pc, #44]	; (80068b0 <vQueueAddToRegistry+0x4c>)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800688a:	4a09      	ldr	r2, [pc, #36]	; (80068b0 <vQueueAddToRegistry+0x4c>)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	00db      	lsls	r3, r3, #3
 8006890:	4413      	add	r3, r2
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006896:	e005      	b.n	80068a4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3301      	adds	r3, #1
 800689c:	60fb      	str	r3, [r7, #12]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2b07      	cmp	r3, #7
 80068a2:	d9e7      	bls.n	8006874 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80068a4:	bf00      	nop
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	20004f20 	.word	0x20004f20

080068b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80068c4:	f001 fb90 	bl	8007fe8 <vPortEnterCritical>
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068ce:	b25b      	sxtb	r3, r3
 80068d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068d4:	d103      	bne.n	80068de <vQueueWaitForMessageRestricted+0x2a>
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068e4:	b25b      	sxtb	r3, r3
 80068e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068ea:	d103      	bne.n	80068f4 <vQueueWaitForMessageRestricted+0x40>
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068f4:	f001 fbaa 	bl	800804c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d106      	bne.n	800690e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	3324      	adds	r3, #36	; 0x24
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	68b9      	ldr	r1, [r7, #8]
 8006908:	4618      	mov	r0, r3
 800690a:	f000 fc45 	bl	8007198 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800690e:	6978      	ldr	r0, [r7, #20]
 8006910:	f7ff ff28 	bl	8006764 <prvUnlockQueue>
	}
 8006914:	bf00      	nop
 8006916:	3718      	adds	r7, #24
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800691c:	b580      	push	{r7, lr}
 800691e:	b08e      	sub	sp, #56	; 0x38
 8006920:	af04      	add	r7, sp, #16
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
 8006928:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800692a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10b      	bne.n	8006948 <xTaskCreateStatic+0x2c>
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	b672      	cpsid	i
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	b662      	cpsie	i
 8006944:	623b      	str	r3, [r7, #32]
 8006946:	e7fe      	b.n	8006946 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8006948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10b      	bne.n	8006966 <xTaskCreateStatic+0x4a>
 800694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006952:	b672      	cpsid	i
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	b662      	cpsie	i
 8006962:	61fb      	str	r3, [r7, #28]
 8006964:	e7fe      	b.n	8006964 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006966:	235c      	movs	r3, #92	; 0x5c
 8006968:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	2b5c      	cmp	r3, #92	; 0x5c
 800696e:	d00b      	beq.n	8006988 <xTaskCreateStatic+0x6c>
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	b672      	cpsid	i
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	b662      	cpsie	i
 8006984:	61bb      	str	r3, [r7, #24]
 8006986:	e7fe      	b.n	8006986 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006988:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800698a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698c:	2b00      	cmp	r3, #0
 800698e:	d01e      	beq.n	80069ce <xTaskCreateStatic+0xb2>
 8006990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006992:	2b00      	cmp	r3, #0
 8006994:	d01b      	beq.n	80069ce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006998:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800699e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069a8:	2300      	movs	r3, #0
 80069aa:	9303      	str	r3, [sp, #12]
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	9302      	str	r3, [sp, #8]
 80069b0:	f107 0314 	add.w	r3, r7, #20
 80069b4:	9301      	str	r3, [sp, #4]
 80069b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	68b9      	ldr	r1, [r7, #8]
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 f850 	bl	8006a66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069c8:	f000 f8de 	bl	8006b88 <prvAddNewTaskToReadyList>
 80069cc:	e001      	b.n	80069d2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80069ce:	2300      	movs	r3, #0
 80069d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80069d2:	697b      	ldr	r3, [r7, #20]
	}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3728      	adds	r7, #40	; 0x28
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08c      	sub	sp, #48	; 0x30
 80069e0:	af04      	add	r7, sp, #16
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	603b      	str	r3, [r7, #0]
 80069e8:	4613      	mov	r3, r2
 80069ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80069ec:	88fb      	ldrh	r3, [r7, #6]
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4618      	mov	r0, r3
 80069f2:	f001 fc1b 	bl	800822c <pvPortMalloc>
 80069f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00e      	beq.n	8006a1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80069fe:	205c      	movs	r0, #92	; 0x5c
 8006a00:	f001 fc14 	bl	800822c <pvPortMalloc>
 8006a04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	631a      	str	r2, [r3, #48]	; 0x30
 8006a12:	e005      	b.n	8006a20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a14:	6978      	ldr	r0, [r7, #20]
 8006a16:	f001 fcd1 	bl	80083bc <vPortFree>
 8006a1a:	e001      	b.n	8006a20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d017      	beq.n	8006a56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a2e:	88fa      	ldrh	r2, [r7, #6]
 8006a30:	2300      	movs	r3, #0
 8006a32:	9303      	str	r3, [sp, #12]
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	9302      	str	r3, [sp, #8]
 8006a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3a:	9301      	str	r3, [sp, #4]
 8006a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	68b9      	ldr	r1, [r7, #8]
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 f80e 	bl	8006a66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a4a:	69f8      	ldr	r0, [r7, #28]
 8006a4c:	f000 f89c 	bl	8006b88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a50:	2301      	movs	r3, #1
 8006a52:	61bb      	str	r3, [r7, #24]
 8006a54:	e002      	b.n	8006a5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a5c:	69bb      	ldr	r3, [r7, #24]
	}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3720      	adds	r7, #32
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b088      	sub	sp, #32
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	60f8      	str	r0, [r7, #12]
 8006a6e:	60b9      	str	r1, [r7, #8]
 8006a70:	607a      	str	r2, [r7, #4]
 8006a72:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	21a5      	movs	r1, #165	; 0xa5
 8006a80:	f001 fde9 	bl	8008656 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a88:	6879      	ldr	r1, [r7, #4]
 8006a8a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006a8e:	440b      	add	r3, r1
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	f023 0307 	bic.w	r3, r3, #7
 8006a9c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	f003 0307 	and.w	r3, r3, #7
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00b      	beq.n	8006ac0 <prvInitialiseNewTask+0x5a>
 8006aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aac:	b672      	cpsid	i
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	b662      	cpsie	i
 8006abc:	617b      	str	r3, [r7, #20]
 8006abe:	e7fe      	b.n	8006abe <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d01f      	beq.n	8006b06 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61fb      	str	r3, [r7, #28]
 8006aca:	e012      	b.n	8006af2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	7819      	ldrb	r1, [r3, #0]
 8006ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	4413      	add	r3, r2
 8006ada:	3334      	adds	r3, #52	; 0x34
 8006adc:	460a      	mov	r2, r1
 8006ade:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d006      	beq.n	8006afa <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	3301      	adds	r3, #1
 8006af0:	61fb      	str	r3, [r7, #28]
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	2b0f      	cmp	r3, #15
 8006af6:	d9e9      	bls.n	8006acc <prvInitialiseNewTask+0x66>
 8006af8:	e000      	b.n	8006afc <prvInitialiseNewTask+0x96>
			{
				break;
 8006afa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b04:	e003      	b.n	8006b0e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b10:	2b37      	cmp	r3, #55	; 0x37
 8006b12:	d901      	bls.n	8006b18 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b14:	2337      	movs	r3, #55	; 0x37
 8006b16:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b22:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b26:	2200      	movs	r2, #0
 8006b28:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7ff f96a 	bl	8005e08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	3318      	adds	r3, #24
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7ff f965 	bl	8005e08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b56:	2200      	movs	r2, #0
 8006b58:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	68f9      	ldr	r1, [r7, #12]
 8006b66:	69b8      	ldr	r0, [r7, #24]
 8006b68:	f001 f936 	bl	8007dd8 <pxPortInitialiseStack>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d002      	beq.n	8006b7e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b7e:	bf00      	nop
 8006b80:	3720      	adds	r7, #32
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b90:	f001 fa2a 	bl	8007fe8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b94:	4b2d      	ldr	r3, [pc, #180]	; (8006c4c <prvAddNewTaskToReadyList+0xc4>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	4a2c      	ldr	r2, [pc, #176]	; (8006c4c <prvAddNewTaskToReadyList+0xc4>)
 8006b9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b9e:	4b2c      	ldr	r3, [pc, #176]	; (8006c50 <prvAddNewTaskToReadyList+0xc8>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d109      	bne.n	8006bba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ba6:	4a2a      	ldr	r2, [pc, #168]	; (8006c50 <prvAddNewTaskToReadyList+0xc8>)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006bac:	4b27      	ldr	r3, [pc, #156]	; (8006c4c <prvAddNewTaskToReadyList+0xc4>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d110      	bne.n	8006bd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006bb4:	f000 fc1e 	bl	80073f4 <prvInitialiseTaskLists>
 8006bb8:	e00d      	b.n	8006bd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006bba:	4b26      	ldr	r3, [pc, #152]	; (8006c54 <prvAddNewTaskToReadyList+0xcc>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d109      	bne.n	8006bd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006bc2:	4b23      	ldr	r3, [pc, #140]	; (8006c50 <prvAddNewTaskToReadyList+0xc8>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d802      	bhi.n	8006bd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006bd0:	4a1f      	ldr	r2, [pc, #124]	; (8006c50 <prvAddNewTaskToReadyList+0xc8>)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006bd6:	4b20      	ldr	r3, [pc, #128]	; (8006c58 <prvAddNewTaskToReadyList+0xd0>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	4a1e      	ldr	r2, [pc, #120]	; (8006c58 <prvAddNewTaskToReadyList+0xd0>)
 8006bde:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006be0:	4b1d      	ldr	r3, [pc, #116]	; (8006c58 <prvAddNewTaskToReadyList+0xd0>)
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bec:	4b1b      	ldr	r3, [pc, #108]	; (8006c5c <prvAddNewTaskToReadyList+0xd4>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d903      	bls.n	8006bfc <prvAddNewTaskToReadyList+0x74>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf8:	4a18      	ldr	r2, [pc, #96]	; (8006c5c <prvAddNewTaskToReadyList+0xd4>)
 8006bfa:	6013      	str	r3, [r2, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c00:	4613      	mov	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4a15      	ldr	r2, [pc, #84]	; (8006c60 <prvAddNewTaskToReadyList+0xd8>)
 8006c0a:	441a      	add	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	3304      	adds	r3, #4
 8006c10:	4619      	mov	r1, r3
 8006c12:	4610      	mov	r0, r2
 8006c14:	f7ff f905 	bl	8005e22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c18:	f001 fa18 	bl	800804c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c1c:	4b0d      	ldr	r3, [pc, #52]	; (8006c54 <prvAddNewTaskToReadyList+0xcc>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00e      	beq.n	8006c42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c24:	4b0a      	ldr	r3, [pc, #40]	; (8006c50 <prvAddNewTaskToReadyList+0xc8>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d207      	bcs.n	8006c42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c32:	4b0c      	ldr	r3, [pc, #48]	; (8006c64 <prvAddNewTaskToReadyList+0xdc>)
 8006c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c42:	bf00      	nop
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20000c24 	.word	0x20000c24
 8006c50:	20000750 	.word	0x20000750
 8006c54:	20000c30 	.word	0x20000c30
 8006c58:	20000c40 	.word	0x20000c40
 8006c5c:	20000c2c 	.word	0x20000c2c
 8006c60:	20000754 	.word	0x20000754
 8006c64:	e000ed04 	.word	0xe000ed04

08006c68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c70:	2300      	movs	r3, #0
 8006c72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d018      	beq.n	8006cac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c7a:	4b14      	ldr	r3, [pc, #80]	; (8006ccc <vTaskDelay+0x64>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00b      	beq.n	8006c9a <vTaskDelay+0x32>
 8006c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c86:	b672      	cpsid	i
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	b662      	cpsie	i
 8006c96:	60bb      	str	r3, [r7, #8]
 8006c98:	e7fe      	b.n	8006c98 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8006c9a:	f000 f883 	bl	8006da4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fcf1 	bl	8007688 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ca6:	f000 f88b 	bl	8006dc0 <xTaskResumeAll>
 8006caa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d107      	bne.n	8006cc2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006cb2:	4b07      	ldr	r3, [pc, #28]	; (8006cd0 <vTaskDelay+0x68>)
 8006cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb8:	601a      	str	r2, [r3, #0]
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cc2:	bf00      	nop
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000c4c 	.word	0x20000c4c
 8006cd0:	e000ed04 	.word	0xe000ed04

08006cd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b08a      	sub	sp, #40	; 0x28
 8006cd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ce2:	463a      	mov	r2, r7
 8006ce4:	1d39      	adds	r1, r7, #4
 8006ce6:	f107 0308 	add.w	r3, r7, #8
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7ff f838 	bl	8005d60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006cf0:	6839      	ldr	r1, [r7, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	9202      	str	r2, [sp, #8]
 8006cf8:	9301      	str	r3, [sp, #4]
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	460a      	mov	r2, r1
 8006d02:	4922      	ldr	r1, [pc, #136]	; (8006d8c <vTaskStartScheduler+0xb8>)
 8006d04:	4822      	ldr	r0, [pc, #136]	; (8006d90 <vTaskStartScheduler+0xbc>)
 8006d06:	f7ff fe09 	bl	800691c <xTaskCreateStatic>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	4b21      	ldr	r3, [pc, #132]	; (8006d94 <vTaskStartScheduler+0xc0>)
 8006d0e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d10:	4b20      	ldr	r3, [pc, #128]	; (8006d94 <vTaskStartScheduler+0xc0>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	617b      	str	r3, [r7, #20]
 8006d1c:	e001      	b.n	8006d22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d102      	bne.n	8006d2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d28:	f000 fd02 	bl	8007730 <xTimerCreateTimerTask>
 8006d2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d117      	bne.n	8006d64 <vTaskStartScheduler+0x90>
 8006d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d38:	b672      	cpsid	i
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	b662      	cpsie	i
 8006d48:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d4a:	4b13      	ldr	r3, [pc, #76]	; (8006d98 <vTaskStartScheduler+0xc4>)
 8006d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d52:	4b12      	ldr	r3, [pc, #72]	; (8006d9c <vTaskStartScheduler+0xc8>)
 8006d54:	2201      	movs	r2, #1
 8006d56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d58:	4b11      	ldr	r3, [pc, #68]	; (8006da0 <vTaskStartScheduler+0xcc>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d5e:	f001 f8c7 	bl	8007ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d62:	e00f      	b.n	8006d84 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d6a:	d10b      	bne.n	8006d84 <vTaskStartScheduler+0xb0>
 8006d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d70:	b672      	cpsid	i
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	b662      	cpsie	i
 8006d80:	60fb      	str	r3, [r7, #12]
 8006d82:	e7fe      	b.n	8006d82 <vTaskStartScheduler+0xae>
}
 8006d84:	bf00      	nop
 8006d86:	3718      	adds	r7, #24
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	0800945c 	.word	0x0800945c
 8006d90:	080073c5 	.word	0x080073c5
 8006d94:	20000c48 	.word	0x20000c48
 8006d98:	20000c44 	.word	0x20000c44
 8006d9c:	20000c30 	.word	0x20000c30
 8006da0:	20000c28 	.word	0x20000c28

08006da4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006da4:	b480      	push	{r7}
 8006da6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006da8:	4b04      	ldr	r3, [pc, #16]	; (8006dbc <vTaskSuspendAll+0x18>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3301      	adds	r3, #1
 8006dae:	4a03      	ldr	r2, [pc, #12]	; (8006dbc <vTaskSuspendAll+0x18>)
 8006db0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006db2:	bf00      	nop
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	20000c4c 	.word	0x20000c4c

08006dc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006dce:	4b42      	ldr	r3, [pc, #264]	; (8006ed8 <xTaskResumeAll+0x118>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10b      	bne.n	8006dee <xTaskResumeAll+0x2e>
 8006dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dda:	b672      	cpsid	i
 8006ddc:	f383 8811 	msr	BASEPRI, r3
 8006de0:	f3bf 8f6f 	isb	sy
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	b662      	cpsie	i
 8006dea:	603b      	str	r3, [r7, #0]
 8006dec:	e7fe      	b.n	8006dec <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006dee:	f001 f8fb 	bl	8007fe8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006df2:	4b39      	ldr	r3, [pc, #228]	; (8006ed8 <xTaskResumeAll+0x118>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	4a37      	ldr	r2, [pc, #220]	; (8006ed8 <xTaskResumeAll+0x118>)
 8006dfa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dfc:	4b36      	ldr	r3, [pc, #216]	; (8006ed8 <xTaskResumeAll+0x118>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d162      	bne.n	8006eca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e04:	4b35      	ldr	r3, [pc, #212]	; (8006edc <xTaskResumeAll+0x11c>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d05e      	beq.n	8006eca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e0c:	e02f      	b.n	8006e6e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e0e:	4b34      	ldr	r3, [pc, #208]	; (8006ee0 <xTaskResumeAll+0x120>)
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	3318      	adds	r3, #24
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7ff f85e 	bl	8005edc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	3304      	adds	r3, #4
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7ff f859 	bl	8005edc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2e:	4b2d      	ldr	r3, [pc, #180]	; (8006ee4 <xTaskResumeAll+0x124>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d903      	bls.n	8006e3e <xTaskResumeAll+0x7e>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3a:	4a2a      	ldr	r2, [pc, #168]	; (8006ee4 <xTaskResumeAll+0x124>)
 8006e3c:	6013      	str	r3, [r2, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e42:	4613      	mov	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4a27      	ldr	r2, [pc, #156]	; (8006ee8 <xTaskResumeAll+0x128>)
 8006e4c:	441a      	add	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	3304      	adds	r3, #4
 8006e52:	4619      	mov	r1, r3
 8006e54:	4610      	mov	r0, r2
 8006e56:	f7fe ffe4 	bl	8005e22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e5e:	4b23      	ldr	r3, [pc, #140]	; (8006eec <xTaskResumeAll+0x12c>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d302      	bcc.n	8006e6e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006e68:	4b21      	ldr	r3, [pc, #132]	; (8006ef0 <xTaskResumeAll+0x130>)
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e6e:	4b1c      	ldr	r3, [pc, #112]	; (8006ee0 <xTaskResumeAll+0x120>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1cb      	bne.n	8006e0e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e7c:	f000 fb56 	bl	800752c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006e80:	4b1c      	ldr	r3, [pc, #112]	; (8006ef4 <xTaskResumeAll+0x134>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d010      	beq.n	8006eae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e8c:	f000 f846 	bl	8006f1c <xTaskIncrementTick>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d002      	beq.n	8006e9c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006e96:	4b16      	ldr	r3, [pc, #88]	; (8006ef0 <xTaskResumeAll+0x130>)
 8006e98:	2201      	movs	r2, #1
 8006e9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1f1      	bne.n	8006e8c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006ea8:	4b12      	ldr	r3, [pc, #72]	; (8006ef4 <xTaskResumeAll+0x134>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006eae:	4b10      	ldr	r3, [pc, #64]	; (8006ef0 <xTaskResumeAll+0x130>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d009      	beq.n	8006eca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006eba:	4b0f      	ldr	r3, [pc, #60]	; (8006ef8 <xTaskResumeAll+0x138>)
 8006ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006eca:	f001 f8bf 	bl	800804c <vPortExitCritical>

	return xAlreadyYielded;
 8006ece:	68bb      	ldr	r3, [r7, #8]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	20000c4c 	.word	0x20000c4c
 8006edc:	20000c24 	.word	0x20000c24
 8006ee0:	20000be4 	.word	0x20000be4
 8006ee4:	20000c2c 	.word	0x20000c2c
 8006ee8:	20000754 	.word	0x20000754
 8006eec:	20000750 	.word	0x20000750
 8006ef0:	20000c38 	.word	0x20000c38
 8006ef4:	20000c34 	.word	0x20000c34
 8006ef8:	e000ed04 	.word	0xe000ed04

08006efc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f02:	4b05      	ldr	r3, [pc, #20]	; (8006f18 <xTaskGetTickCount+0x1c>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f08:	687b      	ldr	r3, [r7, #4]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	20000c28 	.word	0x20000c28

08006f1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f22:	2300      	movs	r3, #0
 8006f24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f26:	4b4f      	ldr	r3, [pc, #316]	; (8007064 <xTaskIncrementTick+0x148>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f040 808a 	bne.w	8007044 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f30:	4b4d      	ldr	r3, [pc, #308]	; (8007068 <xTaskIncrementTick+0x14c>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3301      	adds	r3, #1
 8006f36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f38:	4a4b      	ldr	r2, [pc, #300]	; (8007068 <xTaskIncrementTick+0x14c>)
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d121      	bne.n	8006f88 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f44:	4b49      	ldr	r3, [pc, #292]	; (800706c <xTaskIncrementTick+0x150>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00b      	beq.n	8006f66 <xTaskIncrementTick+0x4a>
 8006f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f52:	b672      	cpsid	i
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	b662      	cpsie	i
 8006f62:	603b      	str	r3, [r7, #0]
 8006f64:	e7fe      	b.n	8006f64 <xTaskIncrementTick+0x48>
 8006f66:	4b41      	ldr	r3, [pc, #260]	; (800706c <xTaskIncrementTick+0x150>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	60fb      	str	r3, [r7, #12]
 8006f6c:	4b40      	ldr	r3, [pc, #256]	; (8007070 <xTaskIncrementTick+0x154>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a3e      	ldr	r2, [pc, #248]	; (800706c <xTaskIncrementTick+0x150>)
 8006f72:	6013      	str	r3, [r2, #0]
 8006f74:	4a3e      	ldr	r2, [pc, #248]	; (8007070 <xTaskIncrementTick+0x154>)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6013      	str	r3, [r2, #0]
 8006f7a:	4b3e      	ldr	r3, [pc, #248]	; (8007074 <xTaskIncrementTick+0x158>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	4a3c      	ldr	r2, [pc, #240]	; (8007074 <xTaskIncrementTick+0x158>)
 8006f82:	6013      	str	r3, [r2, #0]
 8006f84:	f000 fad2 	bl	800752c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f88:	4b3b      	ldr	r3, [pc, #236]	; (8007078 <xTaskIncrementTick+0x15c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d349      	bcc.n	8007026 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f92:	4b36      	ldr	r3, [pc, #216]	; (800706c <xTaskIncrementTick+0x150>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d104      	bne.n	8006fa6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f9c:	4b36      	ldr	r3, [pc, #216]	; (8007078 <xTaskIncrementTick+0x15c>)
 8006f9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fa2:	601a      	str	r2, [r3, #0]
					break;
 8006fa4:	e03f      	b.n	8007026 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fa6:	4b31      	ldr	r3, [pc, #196]	; (800706c <xTaskIncrementTick+0x150>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d203      	bcs.n	8006fc6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006fbe:	4a2e      	ldr	r2, [pc, #184]	; (8007078 <xTaskIncrementTick+0x15c>)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006fc4:	e02f      	b.n	8007026 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fe ff86 	bl	8005edc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d004      	beq.n	8006fe2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	3318      	adds	r3, #24
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7fe ff7d 	bl	8005edc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe6:	4b25      	ldr	r3, [pc, #148]	; (800707c <xTaskIncrementTick+0x160>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d903      	bls.n	8006ff6 <xTaskIncrementTick+0xda>
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff2:	4a22      	ldr	r2, [pc, #136]	; (800707c <xTaskIncrementTick+0x160>)
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4a1f      	ldr	r2, [pc, #124]	; (8007080 <xTaskIncrementTick+0x164>)
 8007004:	441a      	add	r2, r3
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	3304      	adds	r3, #4
 800700a:	4619      	mov	r1, r3
 800700c:	4610      	mov	r0, r2
 800700e:	f7fe ff08 	bl	8005e22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007016:	4b1b      	ldr	r3, [pc, #108]	; (8007084 <xTaskIncrementTick+0x168>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701c:	429a      	cmp	r2, r3
 800701e:	d3b8      	bcc.n	8006f92 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007020:	2301      	movs	r3, #1
 8007022:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007024:	e7b5      	b.n	8006f92 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007026:	4b17      	ldr	r3, [pc, #92]	; (8007084 <xTaskIncrementTick+0x168>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800702c:	4914      	ldr	r1, [pc, #80]	; (8007080 <xTaskIncrementTick+0x164>)
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	440b      	add	r3, r1
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d907      	bls.n	800704e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800703e:	2301      	movs	r3, #1
 8007040:	617b      	str	r3, [r7, #20]
 8007042:	e004      	b.n	800704e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007044:	4b10      	ldr	r3, [pc, #64]	; (8007088 <xTaskIncrementTick+0x16c>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3301      	adds	r3, #1
 800704a:	4a0f      	ldr	r2, [pc, #60]	; (8007088 <xTaskIncrementTick+0x16c>)
 800704c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800704e:	4b0f      	ldr	r3, [pc, #60]	; (800708c <xTaskIncrementTick+0x170>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8007056:	2301      	movs	r3, #1
 8007058:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800705a:	697b      	ldr	r3, [r7, #20]
}
 800705c:	4618      	mov	r0, r3
 800705e:	3718      	adds	r7, #24
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	20000c4c 	.word	0x20000c4c
 8007068:	20000c28 	.word	0x20000c28
 800706c:	20000bdc 	.word	0x20000bdc
 8007070:	20000be0 	.word	0x20000be0
 8007074:	20000c3c 	.word	0x20000c3c
 8007078:	20000c44 	.word	0x20000c44
 800707c:	20000c2c 	.word	0x20000c2c
 8007080:	20000754 	.word	0x20000754
 8007084:	20000750 	.word	0x20000750
 8007088:	20000c34 	.word	0x20000c34
 800708c:	20000c38 	.word	0x20000c38

08007090 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007096:	4b28      	ldr	r3, [pc, #160]	; (8007138 <vTaskSwitchContext+0xa8>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d003      	beq.n	80070a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800709e:	4b27      	ldr	r3, [pc, #156]	; (800713c <vTaskSwitchContext+0xac>)
 80070a0:	2201      	movs	r2, #1
 80070a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80070a4:	e042      	b.n	800712c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80070a6:	4b25      	ldr	r3, [pc, #148]	; (800713c <vTaskSwitchContext+0xac>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070ac:	4b24      	ldr	r3, [pc, #144]	; (8007140 <vTaskSwitchContext+0xb0>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	60fb      	str	r3, [r7, #12]
 80070b2:	e011      	b.n	80070d8 <vTaskSwitchContext+0x48>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10b      	bne.n	80070d2 <vTaskSwitchContext+0x42>
 80070ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070be:	b672      	cpsid	i
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	b662      	cpsie	i
 80070ce:	607b      	str	r3, [r7, #4]
 80070d0:	e7fe      	b.n	80070d0 <vTaskSwitchContext+0x40>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	3b01      	subs	r3, #1
 80070d6:	60fb      	str	r3, [r7, #12]
 80070d8:	491a      	ldr	r1, [pc, #104]	; (8007144 <vTaskSwitchContext+0xb4>)
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	4613      	mov	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	440b      	add	r3, r1
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d0e3      	beq.n	80070b4 <vTaskSwitchContext+0x24>
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	4613      	mov	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4413      	add	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4a13      	ldr	r2, [pc, #76]	; (8007144 <vTaskSwitchContext+0xb4>)
 80070f8:	4413      	add	r3, r2
 80070fa:	60bb      	str	r3, [r7, #8]
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	605a      	str	r2, [r3, #4]
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	3308      	adds	r3, #8
 800710e:	429a      	cmp	r2, r3
 8007110:	d104      	bne.n	800711c <vTaskSwitchContext+0x8c>
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	605a      	str	r2, [r3, #4]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	4a09      	ldr	r2, [pc, #36]	; (8007148 <vTaskSwitchContext+0xb8>)
 8007124:	6013      	str	r3, [r2, #0]
 8007126:	4a06      	ldr	r2, [pc, #24]	; (8007140 <vTaskSwitchContext+0xb0>)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6013      	str	r3, [r2, #0]
}
 800712c:	bf00      	nop
 800712e:	3714      	adds	r7, #20
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	20000c4c 	.word	0x20000c4c
 800713c:	20000c38 	.word	0x20000c38
 8007140:	20000c2c 	.word	0x20000c2c
 8007144:	20000754 	.word	0x20000754
 8007148:	20000750 	.word	0x20000750

0800714c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10b      	bne.n	8007174 <vTaskPlaceOnEventList+0x28>
 800715c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007160:	b672      	cpsid	i
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	b662      	cpsie	i
 8007170:	60fb      	str	r3, [r7, #12]
 8007172:	e7fe      	b.n	8007172 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007174:	4b07      	ldr	r3, [pc, #28]	; (8007194 <vTaskPlaceOnEventList+0x48>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	3318      	adds	r3, #24
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f7fe fe74 	bl	8005e6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007182:	2101      	movs	r1, #1
 8007184:	6838      	ldr	r0, [r7, #0]
 8007186:	f000 fa7f 	bl	8007688 <prvAddCurrentTaskToDelayedList>
}
 800718a:	bf00      	nop
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	20000750 	.word	0x20000750

08007198 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10b      	bne.n	80071c2 <vTaskPlaceOnEventListRestricted+0x2a>
 80071aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ae:	b672      	cpsid	i
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	b662      	cpsie	i
 80071be:	617b      	str	r3, [r7, #20]
 80071c0:	e7fe      	b.n	80071c0 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071c2:	4b0a      	ldr	r3, [pc, #40]	; (80071ec <vTaskPlaceOnEventListRestricted+0x54>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3318      	adds	r3, #24
 80071c8:	4619      	mov	r1, r3
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f7fe fe29 	bl	8005e22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80071d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80071dc:	6879      	ldr	r1, [r7, #4]
 80071de:	68b8      	ldr	r0, [r7, #8]
 80071e0:	f000 fa52 	bl	8007688 <prvAddCurrentTaskToDelayedList>
	}
 80071e4:	bf00      	nop
 80071e6:	3718      	adds	r7, #24
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	20000750 	.word	0x20000750

080071f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b086      	sub	sp, #24
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10b      	bne.n	800721e <xTaskRemoveFromEventList+0x2e>
 8007206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720a:	b672      	cpsid	i
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	b662      	cpsie	i
 800721a:	60fb      	str	r3, [r7, #12]
 800721c:	e7fe      	b.n	800721c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	3318      	adds	r3, #24
 8007222:	4618      	mov	r0, r3
 8007224:	f7fe fe5a 	bl	8005edc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007228:	4b1d      	ldr	r3, [pc, #116]	; (80072a0 <xTaskRemoveFromEventList+0xb0>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d11d      	bne.n	800726c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	3304      	adds	r3, #4
 8007234:	4618      	mov	r0, r3
 8007236:	f7fe fe51 	bl	8005edc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800723e:	4b19      	ldr	r3, [pc, #100]	; (80072a4 <xTaskRemoveFromEventList+0xb4>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	429a      	cmp	r2, r3
 8007244:	d903      	bls.n	800724e <xTaskRemoveFromEventList+0x5e>
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724a:	4a16      	ldr	r2, [pc, #88]	; (80072a4 <xTaskRemoveFromEventList+0xb4>)
 800724c:	6013      	str	r3, [r2, #0]
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007252:	4613      	mov	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4413      	add	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4a13      	ldr	r2, [pc, #76]	; (80072a8 <xTaskRemoveFromEventList+0xb8>)
 800725c:	441a      	add	r2, r3
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	3304      	adds	r3, #4
 8007262:	4619      	mov	r1, r3
 8007264:	4610      	mov	r0, r2
 8007266:	f7fe fddc 	bl	8005e22 <vListInsertEnd>
 800726a:	e005      	b.n	8007278 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	3318      	adds	r3, #24
 8007270:	4619      	mov	r1, r3
 8007272:	480e      	ldr	r0, [pc, #56]	; (80072ac <xTaskRemoveFromEventList+0xbc>)
 8007274:	f7fe fdd5 	bl	8005e22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800727c:	4b0c      	ldr	r3, [pc, #48]	; (80072b0 <xTaskRemoveFromEventList+0xc0>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007282:	429a      	cmp	r2, r3
 8007284:	d905      	bls.n	8007292 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007286:	2301      	movs	r3, #1
 8007288:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800728a:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <xTaskRemoveFromEventList+0xc4>)
 800728c:	2201      	movs	r2, #1
 800728e:	601a      	str	r2, [r3, #0]
 8007290:	e001      	b.n	8007296 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007292:	2300      	movs	r3, #0
 8007294:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007296:	697b      	ldr	r3, [r7, #20]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3718      	adds	r7, #24
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	20000c4c 	.word	0x20000c4c
 80072a4:	20000c2c 	.word	0x20000c2c
 80072a8:	20000754 	.word	0x20000754
 80072ac:	20000be4 	.word	0x20000be4
 80072b0:	20000750 	.word	0x20000750
 80072b4:	20000c38 	.word	0x20000c38

080072b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80072c0:	4b06      	ldr	r3, [pc, #24]	; (80072dc <vTaskInternalSetTimeOutState+0x24>)
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80072c8:	4b05      	ldr	r3, [pc, #20]	; (80072e0 <vTaskInternalSetTimeOutState+0x28>)
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	605a      	str	r2, [r3, #4]
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	20000c3c 	.word	0x20000c3c
 80072e0:	20000c28 	.word	0x20000c28

080072e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b088      	sub	sp, #32
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10b      	bne.n	800730c <xTaskCheckForTimeOut+0x28>
 80072f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f8:	b672      	cpsid	i
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	b662      	cpsie	i
 8007308:	613b      	str	r3, [r7, #16]
 800730a:	e7fe      	b.n	800730a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10b      	bne.n	800732a <xTaskCheckForTimeOut+0x46>
 8007312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007316:	b672      	cpsid	i
 8007318:	f383 8811 	msr	BASEPRI, r3
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	b662      	cpsie	i
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	e7fe      	b.n	8007328 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800732a:	f000 fe5d 	bl	8007fe8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800732e:	4b1d      	ldr	r3, [pc, #116]	; (80073a4 <xTaskCheckForTimeOut+0xc0>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	69ba      	ldr	r2, [r7, #24]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007346:	d102      	bne.n	800734e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007348:	2300      	movs	r3, #0
 800734a:	61fb      	str	r3, [r7, #28]
 800734c:	e023      	b.n	8007396 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	4b15      	ldr	r3, [pc, #84]	; (80073a8 <xTaskCheckForTimeOut+0xc4>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	429a      	cmp	r2, r3
 8007358:	d007      	beq.n	800736a <xTaskCheckForTimeOut+0x86>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	429a      	cmp	r2, r3
 8007362:	d302      	bcc.n	800736a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007364:	2301      	movs	r3, #1
 8007366:	61fb      	str	r3, [r7, #28]
 8007368:	e015      	b.n	8007396 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	429a      	cmp	r2, r3
 8007372:	d20b      	bcs.n	800738c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	1ad2      	subs	r2, r2, r3
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7ff ff99 	bl	80072b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007386:	2300      	movs	r3, #0
 8007388:	61fb      	str	r3, [r7, #28]
 800738a:	e004      	b.n	8007396 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	2200      	movs	r2, #0
 8007390:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007392:	2301      	movs	r3, #1
 8007394:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007396:	f000 fe59 	bl	800804c <vPortExitCritical>

	return xReturn;
 800739a:	69fb      	ldr	r3, [r7, #28]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3720      	adds	r7, #32
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	20000c28 	.word	0x20000c28
 80073a8:	20000c3c 	.word	0x20000c3c

080073ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80073ac:	b480      	push	{r7}
 80073ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80073b0:	4b03      	ldr	r3, [pc, #12]	; (80073c0 <vTaskMissedYield+0x14>)
 80073b2:	2201      	movs	r2, #1
 80073b4:	601a      	str	r2, [r3, #0]
}
 80073b6:	bf00      	nop
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	20000c38 	.word	0x20000c38

080073c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80073cc:	f000 f852 	bl	8007474 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80073d0:	4b06      	ldr	r3, [pc, #24]	; (80073ec <prvIdleTask+0x28>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d9f9      	bls.n	80073cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80073d8:	4b05      	ldr	r3, [pc, #20]	; (80073f0 <prvIdleTask+0x2c>)
 80073da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80073e8:	e7f0      	b.n	80073cc <prvIdleTask+0x8>
 80073ea:	bf00      	nop
 80073ec:	20000754 	.word	0x20000754
 80073f0:	e000ed04 	.word	0xe000ed04

080073f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073fa:	2300      	movs	r3, #0
 80073fc:	607b      	str	r3, [r7, #4]
 80073fe:	e00c      	b.n	800741a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	4613      	mov	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4a12      	ldr	r2, [pc, #72]	; (8007454 <prvInitialiseTaskLists+0x60>)
 800740c:	4413      	add	r3, r2
 800740e:	4618      	mov	r0, r3
 8007410:	f7fe fcda 	bl	8005dc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	3301      	adds	r3, #1
 8007418:	607b      	str	r3, [r7, #4]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2b37      	cmp	r3, #55	; 0x37
 800741e:	d9ef      	bls.n	8007400 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007420:	480d      	ldr	r0, [pc, #52]	; (8007458 <prvInitialiseTaskLists+0x64>)
 8007422:	f7fe fcd1 	bl	8005dc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007426:	480d      	ldr	r0, [pc, #52]	; (800745c <prvInitialiseTaskLists+0x68>)
 8007428:	f7fe fcce 	bl	8005dc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800742c:	480c      	ldr	r0, [pc, #48]	; (8007460 <prvInitialiseTaskLists+0x6c>)
 800742e:	f7fe fccb 	bl	8005dc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007432:	480c      	ldr	r0, [pc, #48]	; (8007464 <prvInitialiseTaskLists+0x70>)
 8007434:	f7fe fcc8 	bl	8005dc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007438:	480b      	ldr	r0, [pc, #44]	; (8007468 <prvInitialiseTaskLists+0x74>)
 800743a:	f7fe fcc5 	bl	8005dc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800743e:	4b0b      	ldr	r3, [pc, #44]	; (800746c <prvInitialiseTaskLists+0x78>)
 8007440:	4a05      	ldr	r2, [pc, #20]	; (8007458 <prvInitialiseTaskLists+0x64>)
 8007442:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007444:	4b0a      	ldr	r3, [pc, #40]	; (8007470 <prvInitialiseTaskLists+0x7c>)
 8007446:	4a05      	ldr	r2, [pc, #20]	; (800745c <prvInitialiseTaskLists+0x68>)
 8007448:	601a      	str	r2, [r3, #0]
}
 800744a:	bf00      	nop
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	20000754 	.word	0x20000754
 8007458:	20000bb4 	.word	0x20000bb4
 800745c:	20000bc8 	.word	0x20000bc8
 8007460:	20000be4 	.word	0x20000be4
 8007464:	20000bf8 	.word	0x20000bf8
 8007468:	20000c10 	.word	0x20000c10
 800746c:	20000bdc 	.word	0x20000bdc
 8007470:	20000be0 	.word	0x20000be0

08007474 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800747a:	e019      	b.n	80074b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800747c:	f000 fdb4 	bl	8007fe8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007480:	4b0f      	ldr	r3, [pc, #60]	; (80074c0 <prvCheckTasksWaitingTermination+0x4c>)
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3304      	adds	r3, #4
 800748c:	4618      	mov	r0, r3
 800748e:	f7fe fd25 	bl	8005edc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007492:	4b0c      	ldr	r3, [pc, #48]	; (80074c4 <prvCheckTasksWaitingTermination+0x50>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	3b01      	subs	r3, #1
 8007498:	4a0a      	ldr	r2, [pc, #40]	; (80074c4 <prvCheckTasksWaitingTermination+0x50>)
 800749a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800749c:	4b0a      	ldr	r3, [pc, #40]	; (80074c8 <prvCheckTasksWaitingTermination+0x54>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	3b01      	subs	r3, #1
 80074a2:	4a09      	ldr	r2, [pc, #36]	; (80074c8 <prvCheckTasksWaitingTermination+0x54>)
 80074a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074a6:	f000 fdd1 	bl	800804c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f80e 	bl	80074cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074b0:	4b05      	ldr	r3, [pc, #20]	; (80074c8 <prvCheckTasksWaitingTermination+0x54>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1e1      	bne.n	800747c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80074b8:	bf00      	nop
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	20000bf8 	.word	0x20000bf8
 80074c4:	20000c24 	.word	0x20000c24
 80074c8:	20000c0c 	.word	0x20000c0c

080074cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d108      	bne.n	80074f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e2:	4618      	mov	r0, r3
 80074e4:	f000 ff6a 	bl	80083bc <vPortFree>
				vPortFree( pxTCB );
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 ff67 	bl	80083bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80074ee:	e019      	b.n	8007524 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d103      	bne.n	8007502 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 ff5e 	bl	80083bc <vPortFree>
	}
 8007500:	e010      	b.n	8007524 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007508:	2b02      	cmp	r3, #2
 800750a:	d00b      	beq.n	8007524 <prvDeleteTCB+0x58>
 800750c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007510:	b672      	cpsid	i
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	b662      	cpsie	i
 8007520:	60fb      	str	r3, [r7, #12]
 8007522:	e7fe      	b.n	8007522 <prvDeleteTCB+0x56>
	}
 8007524:	bf00      	nop
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007532:	4b0c      	ldr	r3, [pc, #48]	; (8007564 <prvResetNextTaskUnblockTime+0x38>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d104      	bne.n	8007546 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800753c:	4b0a      	ldr	r3, [pc, #40]	; (8007568 <prvResetNextTaskUnblockTime+0x3c>)
 800753e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007542:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007544:	e008      	b.n	8007558 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007546:	4b07      	ldr	r3, [pc, #28]	; (8007564 <prvResetNextTaskUnblockTime+0x38>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	4a04      	ldr	r2, [pc, #16]	; (8007568 <prvResetNextTaskUnblockTime+0x3c>)
 8007556:	6013      	str	r3, [r2, #0]
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr
 8007564:	20000bdc 	.word	0x20000bdc
 8007568:	20000c44 	.word	0x20000c44

0800756c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007572:	4b0b      	ldr	r3, [pc, #44]	; (80075a0 <xTaskGetSchedulerState+0x34>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d102      	bne.n	8007580 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800757a:	2301      	movs	r3, #1
 800757c:	607b      	str	r3, [r7, #4]
 800757e:	e008      	b.n	8007592 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007580:	4b08      	ldr	r3, [pc, #32]	; (80075a4 <xTaskGetSchedulerState+0x38>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d102      	bne.n	800758e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007588:	2302      	movs	r3, #2
 800758a:	607b      	str	r3, [r7, #4]
 800758c:	e001      	b.n	8007592 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800758e:	2300      	movs	r3, #0
 8007590:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007592:	687b      	ldr	r3, [r7, #4]
	}
 8007594:	4618      	mov	r0, r3
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	20000c30 	.word	0x20000c30
 80075a4:	20000c4c 	.word	0x20000c4c

080075a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80075b4:	2300      	movs	r3, #0
 80075b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d058      	beq.n	8007670 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80075be:	4b2f      	ldr	r3, [pc, #188]	; (800767c <xTaskPriorityDisinherit+0xd4>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	693a      	ldr	r2, [r7, #16]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d00b      	beq.n	80075e0 <xTaskPriorityDisinherit+0x38>
 80075c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075cc:	b672      	cpsid	i
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	b662      	cpsie	i
 80075dc:	60fb      	str	r3, [r7, #12]
 80075de:	e7fe      	b.n	80075de <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10b      	bne.n	8007600 <xTaskPriorityDisinherit+0x58>
 80075e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ec:	b672      	cpsid	i
 80075ee:	f383 8811 	msr	BASEPRI, r3
 80075f2:	f3bf 8f6f 	isb	sy
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	b662      	cpsie	i
 80075fc:	60bb      	str	r3, [r7, #8]
 80075fe:	e7fe      	b.n	80075fe <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007604:	1e5a      	subs	r2, r3, #1
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007612:	429a      	cmp	r2, r3
 8007614:	d02c      	beq.n	8007670 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800761a:	2b00      	cmp	r3, #0
 800761c:	d128      	bne.n	8007670 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	3304      	adds	r3, #4
 8007622:	4618      	mov	r0, r3
 8007624:	f7fe fc5a 	bl	8005edc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007634:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007640:	4b0f      	ldr	r3, [pc, #60]	; (8007680 <xTaskPriorityDisinherit+0xd8>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	429a      	cmp	r2, r3
 8007646:	d903      	bls.n	8007650 <xTaskPriorityDisinherit+0xa8>
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764c:	4a0c      	ldr	r2, [pc, #48]	; (8007680 <xTaskPriorityDisinherit+0xd8>)
 800764e:	6013      	str	r3, [r2, #0]
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007654:	4613      	mov	r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4413      	add	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4a09      	ldr	r2, [pc, #36]	; (8007684 <xTaskPriorityDisinherit+0xdc>)
 800765e:	441a      	add	r2, r3
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	3304      	adds	r3, #4
 8007664:	4619      	mov	r1, r3
 8007666:	4610      	mov	r0, r2
 8007668:	f7fe fbdb 	bl	8005e22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800766c:	2301      	movs	r3, #1
 800766e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007670:	697b      	ldr	r3, [r7, #20]
	}
 8007672:	4618      	mov	r0, r3
 8007674:	3718      	adds	r7, #24
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	20000750 	.word	0x20000750
 8007680:	20000c2c 	.word	0x20000c2c
 8007684:	20000754 	.word	0x20000754

08007688 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007692:	4b21      	ldr	r3, [pc, #132]	; (8007718 <prvAddCurrentTaskToDelayedList+0x90>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007698:	4b20      	ldr	r3, [pc, #128]	; (800771c <prvAddCurrentTaskToDelayedList+0x94>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	3304      	adds	r3, #4
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fe fc1c 	bl	8005edc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076aa:	d10a      	bne.n	80076c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d007      	beq.n	80076c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076b2:	4b1a      	ldr	r3, [pc, #104]	; (800771c <prvAddCurrentTaskToDelayedList+0x94>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3304      	adds	r3, #4
 80076b8:	4619      	mov	r1, r3
 80076ba:	4819      	ldr	r0, [pc, #100]	; (8007720 <prvAddCurrentTaskToDelayedList+0x98>)
 80076bc:	f7fe fbb1 	bl	8005e22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80076c0:	e026      	b.n	8007710 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4413      	add	r3, r2
 80076c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80076ca:	4b14      	ldr	r3, [pc, #80]	; (800771c <prvAddCurrentTaskToDelayedList+0x94>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d209      	bcs.n	80076ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076da:	4b12      	ldr	r3, [pc, #72]	; (8007724 <prvAddCurrentTaskToDelayedList+0x9c>)
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	4b0f      	ldr	r3, [pc, #60]	; (800771c <prvAddCurrentTaskToDelayedList+0x94>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3304      	adds	r3, #4
 80076e4:	4619      	mov	r1, r3
 80076e6:	4610      	mov	r0, r2
 80076e8:	f7fe fbbf 	bl	8005e6a <vListInsert>
}
 80076ec:	e010      	b.n	8007710 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076ee:	4b0e      	ldr	r3, [pc, #56]	; (8007728 <prvAddCurrentTaskToDelayedList+0xa0>)
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	4b0a      	ldr	r3, [pc, #40]	; (800771c <prvAddCurrentTaskToDelayedList+0x94>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	3304      	adds	r3, #4
 80076f8:	4619      	mov	r1, r3
 80076fa:	4610      	mov	r0, r2
 80076fc:	f7fe fbb5 	bl	8005e6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007700:	4b0a      	ldr	r3, [pc, #40]	; (800772c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68ba      	ldr	r2, [r7, #8]
 8007706:	429a      	cmp	r2, r3
 8007708:	d202      	bcs.n	8007710 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800770a:	4a08      	ldr	r2, [pc, #32]	; (800772c <prvAddCurrentTaskToDelayedList+0xa4>)
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	6013      	str	r3, [r2, #0]
}
 8007710:	bf00      	nop
 8007712:	3710      	adds	r7, #16
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	20000c28 	.word	0x20000c28
 800771c:	20000750 	.word	0x20000750
 8007720:	20000c10 	.word	0x20000c10
 8007724:	20000be0 	.word	0x20000be0
 8007728:	20000bdc 	.word	0x20000bdc
 800772c:	20000c44 	.word	0x20000c44

08007730 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b08a      	sub	sp, #40	; 0x28
 8007734:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007736:	2300      	movs	r3, #0
 8007738:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800773a:	f000 fb0d 	bl	8007d58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800773e:	4b1d      	ldr	r3, [pc, #116]	; (80077b4 <xTimerCreateTimerTask+0x84>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d021      	beq.n	800778a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007746:	2300      	movs	r3, #0
 8007748:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800774a:	2300      	movs	r3, #0
 800774c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800774e:	1d3a      	adds	r2, r7, #4
 8007750:	f107 0108 	add.w	r1, r7, #8
 8007754:	f107 030c 	add.w	r3, r7, #12
 8007758:	4618      	mov	r0, r3
 800775a:	f7fe fb1b 	bl	8005d94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800775e:	6879      	ldr	r1, [r7, #4]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	9202      	str	r2, [sp, #8]
 8007766:	9301      	str	r3, [sp, #4]
 8007768:	2302      	movs	r3, #2
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	2300      	movs	r3, #0
 800776e:	460a      	mov	r2, r1
 8007770:	4911      	ldr	r1, [pc, #68]	; (80077b8 <xTimerCreateTimerTask+0x88>)
 8007772:	4812      	ldr	r0, [pc, #72]	; (80077bc <xTimerCreateTimerTask+0x8c>)
 8007774:	f7ff f8d2 	bl	800691c <xTaskCreateStatic>
 8007778:	4602      	mov	r2, r0
 800777a:	4b11      	ldr	r3, [pc, #68]	; (80077c0 <xTimerCreateTimerTask+0x90>)
 800777c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800777e:	4b10      	ldr	r3, [pc, #64]	; (80077c0 <xTimerCreateTimerTask+0x90>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007786:	2301      	movs	r3, #1
 8007788:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10b      	bne.n	80077a8 <xTimerCreateTimerTask+0x78>
 8007790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007794:	b672      	cpsid	i
 8007796:	f383 8811 	msr	BASEPRI, r3
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	b662      	cpsie	i
 80077a4:	613b      	str	r3, [r7, #16]
 80077a6:	e7fe      	b.n	80077a6 <xTimerCreateTimerTask+0x76>
	return xReturn;
 80077a8:	697b      	ldr	r3, [r7, #20]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3718      	adds	r7, #24
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	20000c80 	.word	0x20000c80
 80077b8:	08009464 	.word	0x08009464
 80077bc:	080078fd 	.word	0x080078fd
 80077c0:	20000c84 	.word	0x20000c84

080077c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08a      	sub	sp, #40	; 0x28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
 80077d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80077d2:	2300      	movs	r3, #0
 80077d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10b      	bne.n	80077f4 <xTimerGenericCommand+0x30>
 80077dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e0:	b672      	cpsid	i
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	b662      	cpsie	i
 80077f0:	623b      	str	r3, [r7, #32]
 80077f2:	e7fe      	b.n	80077f2 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80077f4:	4b19      	ldr	r3, [pc, #100]	; (800785c <xTimerGenericCommand+0x98>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d02a      	beq.n	8007852 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2b05      	cmp	r3, #5
 800780c:	dc18      	bgt.n	8007840 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800780e:	f7ff fead 	bl	800756c <xTaskGetSchedulerState>
 8007812:	4603      	mov	r3, r0
 8007814:	2b02      	cmp	r3, #2
 8007816:	d109      	bne.n	800782c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007818:	4b10      	ldr	r3, [pc, #64]	; (800785c <xTimerGenericCommand+0x98>)
 800781a:	6818      	ldr	r0, [r3, #0]
 800781c:	f107 0110 	add.w	r1, r7, #16
 8007820:	2300      	movs	r3, #0
 8007822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007824:	f7fe fc8e 	bl	8006144 <xQueueGenericSend>
 8007828:	6278      	str	r0, [r7, #36]	; 0x24
 800782a:	e012      	b.n	8007852 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800782c:	4b0b      	ldr	r3, [pc, #44]	; (800785c <xTimerGenericCommand+0x98>)
 800782e:	6818      	ldr	r0, [r3, #0]
 8007830:	f107 0110 	add.w	r1, r7, #16
 8007834:	2300      	movs	r3, #0
 8007836:	2200      	movs	r2, #0
 8007838:	f7fe fc84 	bl	8006144 <xQueueGenericSend>
 800783c:	6278      	str	r0, [r7, #36]	; 0x24
 800783e:	e008      	b.n	8007852 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007840:	4b06      	ldr	r3, [pc, #24]	; (800785c <xTimerGenericCommand+0x98>)
 8007842:	6818      	ldr	r0, [r3, #0]
 8007844:	f107 0110 	add.w	r1, r7, #16
 8007848:	2300      	movs	r3, #0
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	f7fe fd7c 	bl	8006348 <xQueueGenericSendFromISR>
 8007850:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007854:	4618      	mov	r0, r3
 8007856:	3728      	adds	r7, #40	; 0x28
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	20000c80 	.word	0x20000c80

08007860 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b088      	sub	sp, #32
 8007864:	af02      	add	r7, sp, #8
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800786a:	4b23      	ldr	r3, [pc, #140]	; (80078f8 <prvProcessExpiredTimer+0x98>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	3304      	adds	r3, #4
 8007878:	4618      	mov	r0, r3
 800787a:	f7fe fb2f 	bl	8005edc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007884:	f003 0304 	and.w	r3, r3, #4
 8007888:	2b00      	cmp	r3, #0
 800788a:	d023      	beq.n	80078d4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	699a      	ldr	r2, [r3, #24]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	18d1      	adds	r1, r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	6978      	ldr	r0, [r7, #20]
 800789a:	f000 f8d3 	bl	8007a44 <prvInsertTimerInActiveList>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d020      	beq.n	80078e6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078a4:	2300      	movs	r3, #0
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	2300      	movs	r3, #0
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	2100      	movs	r1, #0
 80078ae:	6978      	ldr	r0, [r7, #20]
 80078b0:	f7ff ff88 	bl	80077c4 <xTimerGenericCommand>
 80078b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d114      	bne.n	80078e6 <prvProcessExpiredTimer+0x86>
 80078bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c0:	b672      	cpsid	i
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	b662      	cpsie	i
 80078d0:	60fb      	str	r3, [r7, #12]
 80078d2:	e7fe      	b.n	80078d2 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078da:	f023 0301 	bic.w	r3, r3, #1
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	6978      	ldr	r0, [r7, #20]
 80078ec:	4798      	blx	r3
}
 80078ee:	bf00      	nop
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	20000c78 	.word	0x20000c78

080078fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007904:	f107 0308 	add.w	r3, r7, #8
 8007908:	4618      	mov	r0, r3
 800790a:	f000 f857 	bl	80079bc <prvGetNextExpireTime>
 800790e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	4619      	mov	r1, r3
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f000 f803 	bl	8007920 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800791a:	f000 f8d5 	bl	8007ac8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800791e:	e7f1      	b.n	8007904 <prvTimerTask+0x8>

08007920 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800792a:	f7ff fa3b 	bl	8006da4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800792e:	f107 0308 	add.w	r3, r7, #8
 8007932:	4618      	mov	r0, r3
 8007934:	f000 f866 	bl	8007a04 <prvSampleTimeNow>
 8007938:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d130      	bne.n	80079a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10a      	bne.n	800795c <prvProcessTimerOrBlockTask+0x3c>
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	429a      	cmp	r2, r3
 800794c:	d806      	bhi.n	800795c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800794e:	f7ff fa37 	bl	8006dc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007952:	68f9      	ldr	r1, [r7, #12]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7ff ff83 	bl	8007860 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800795a:	e024      	b.n	80079a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d008      	beq.n	8007974 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007962:	4b13      	ldr	r3, [pc, #76]	; (80079b0 <prvProcessTimerOrBlockTask+0x90>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d101      	bne.n	8007970 <prvProcessTimerOrBlockTask+0x50>
 800796c:	2301      	movs	r3, #1
 800796e:	e000      	b.n	8007972 <prvProcessTimerOrBlockTask+0x52>
 8007970:	2300      	movs	r3, #0
 8007972:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007974:	4b0f      	ldr	r3, [pc, #60]	; (80079b4 <prvProcessTimerOrBlockTask+0x94>)
 8007976:	6818      	ldr	r0, [r3, #0]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	4619      	mov	r1, r3
 8007982:	f7fe ff97 	bl	80068b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007986:	f7ff fa1b 	bl	8006dc0 <xTaskResumeAll>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d10a      	bne.n	80079a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007990:	4b09      	ldr	r3, [pc, #36]	; (80079b8 <prvProcessTimerOrBlockTask+0x98>)
 8007992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	f3bf 8f6f 	isb	sy
}
 80079a0:	e001      	b.n	80079a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80079a2:	f7ff fa0d 	bl	8006dc0 <xTaskResumeAll>
}
 80079a6:	bf00      	nop
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	20000c7c 	.word	0x20000c7c
 80079b4:	20000c80 	.word	0x20000c80
 80079b8:	e000ed04 	.word	0xe000ed04

080079bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80079c4:	4b0e      	ldr	r3, [pc, #56]	; (8007a00 <prvGetNextExpireTime+0x44>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d101      	bne.n	80079d2 <prvGetNextExpireTime+0x16>
 80079ce:	2201      	movs	r2, #1
 80079d0:	e000      	b.n	80079d4 <prvGetNextExpireTime+0x18>
 80079d2:	2200      	movs	r2, #0
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d105      	bne.n	80079ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079e0:	4b07      	ldr	r3, [pc, #28]	; (8007a00 <prvGetNextExpireTime+0x44>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	60fb      	str	r3, [r7, #12]
 80079ea:	e001      	b.n	80079f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80079f0:	68fb      	ldr	r3, [r7, #12]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3714      	adds	r7, #20
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	20000c78 	.word	0x20000c78

08007a04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a0c:	f7ff fa76 	bl	8006efc <xTaskGetTickCount>
 8007a10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a12:	4b0b      	ldr	r3, [pc, #44]	; (8007a40 <prvSampleTimeNow+0x3c>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d205      	bcs.n	8007a28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a1c:	f000 f936 	bl	8007c8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	e002      	b.n	8007a2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a2e:	4a04      	ldr	r2, [pc, #16]	; (8007a40 <prvSampleTimeNow+0x3c>)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007a34:	68fb      	ldr	r3, [r7, #12]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	20000c88 	.word	0x20000c88

08007a44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
 8007a50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007a52:	2300      	movs	r3, #0
 8007a54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d812      	bhi.n	8007a90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	1ad2      	subs	r2, r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d302      	bcc.n	8007a7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	617b      	str	r3, [r7, #20]
 8007a7c:	e01b      	b.n	8007ab6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a7e:	4b10      	ldr	r3, [pc, #64]	; (8007ac0 <prvInsertTimerInActiveList+0x7c>)
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3304      	adds	r3, #4
 8007a86:	4619      	mov	r1, r3
 8007a88:	4610      	mov	r0, r2
 8007a8a:	f7fe f9ee 	bl	8005e6a <vListInsert>
 8007a8e:	e012      	b.n	8007ab6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d206      	bcs.n	8007aa6 <prvInsertTimerInActiveList+0x62>
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d302      	bcc.n	8007aa6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	617b      	str	r3, [r7, #20]
 8007aa4:	e007      	b.n	8007ab6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007aa6:	4b07      	ldr	r3, [pc, #28]	; (8007ac4 <prvInsertTimerInActiveList+0x80>)
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	3304      	adds	r3, #4
 8007aae:	4619      	mov	r1, r3
 8007ab0:	4610      	mov	r0, r2
 8007ab2:	f7fe f9da 	bl	8005e6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ab6:	697b      	ldr	r3, [r7, #20]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3718      	adds	r7, #24
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	20000c7c 	.word	0x20000c7c
 8007ac4:	20000c78 	.word	0x20000c78

08007ac8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b08e      	sub	sp, #56	; 0x38
 8007acc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ace:	e0cc      	b.n	8007c6a <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	da19      	bge.n	8007b0a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007ad6:	1d3b      	adds	r3, r7, #4
 8007ad8:	3304      	adds	r3, #4
 8007ada:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10b      	bne.n	8007afa <prvProcessReceivedCommands+0x32>
 8007ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae6:	b672      	cpsid	i
 8007ae8:	f383 8811 	msr	BASEPRI, r3
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	b662      	cpsie	i
 8007af6:	61fb      	str	r3, [r7, #28]
 8007af8:	e7fe      	b.n	8007af8 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b00:	6850      	ldr	r0, [r2, #4]
 8007b02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b04:	6892      	ldr	r2, [r2, #8]
 8007b06:	4611      	mov	r1, r2
 8007b08:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f2c0 80ab 	blt.w	8007c68 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b18:	695b      	ldr	r3, [r3, #20]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d004      	beq.n	8007b28 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b20:	3304      	adds	r3, #4
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fe f9da 	bl	8005edc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b28:	463b      	mov	r3, r7
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7ff ff6a 	bl	8007a04 <prvSampleTimeNow>
 8007b30:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2b09      	cmp	r3, #9
 8007b36:	f200 8098 	bhi.w	8007c6a <prvProcessReceivedCommands+0x1a2>
 8007b3a:	a201      	add	r2, pc, #4	; (adr r2, 8007b40 <prvProcessReceivedCommands+0x78>)
 8007b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b40:	08007b69 	.word	0x08007b69
 8007b44:	08007b69 	.word	0x08007b69
 8007b48:	08007b69 	.word	0x08007b69
 8007b4c:	08007bdf 	.word	0x08007bdf
 8007b50:	08007bf3 	.word	0x08007bf3
 8007b54:	08007c3f 	.word	0x08007c3f
 8007b58:	08007b69 	.word	0x08007b69
 8007b5c:	08007b69 	.word	0x08007b69
 8007b60:	08007bdf 	.word	0x08007bdf
 8007b64:	08007bf3 	.word	0x08007bf3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b6e:	f043 0301 	orr.w	r3, r3, #1
 8007b72:	b2da      	uxtb	r2, r3
 8007b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	18d1      	adds	r1, r2, r3
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b88:	f7ff ff5c 	bl	8007a44 <prvInsertTimerInActiveList>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d06b      	beq.n	8007c6a <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ba0:	f003 0304 	and.w	r3, r3, #4
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d060      	beq.n	8007c6a <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ba8:	68ba      	ldr	r2, [r7, #8]
 8007baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	441a      	add	r2, r3
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bba:	f7ff fe03 	bl	80077c4 <xTimerGenericCommand>
 8007bbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007bc0:	6a3b      	ldr	r3, [r7, #32]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d151      	bne.n	8007c6a <prvProcessReceivedCommands+0x1a2>
 8007bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bca:	b672      	cpsid	i
 8007bcc:	f383 8811 	msr	BASEPRI, r3
 8007bd0:	f3bf 8f6f 	isb	sy
 8007bd4:	f3bf 8f4f 	dsb	sy
 8007bd8:	b662      	cpsie	i
 8007bda:	61bb      	str	r3, [r7, #24]
 8007bdc:	e7fe      	b.n	8007bdc <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007be4:	f023 0301 	bic.w	r3, r3, #1
 8007be8:	b2da      	uxtb	r2, r3
 8007bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007bf0:	e03b      	b.n	8007c6a <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bf8:	f043 0301 	orr.w	r3, r3, #1
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c08:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10b      	bne.n	8007c2a <prvProcessReceivedCommands+0x162>
 8007c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c16:	b672      	cpsid	i
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	b662      	cpsie	i
 8007c26:	617b      	str	r3, [r7, #20]
 8007c28:	e7fe      	b.n	8007c28 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2c:	699a      	ldr	r2, [r3, #24]
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c30:	18d1      	adds	r1, r2, r3
 8007c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c38:	f7ff ff04 	bl	8007a44 <prvInsertTimerInActiveList>
					break;
 8007c3c:	e015      	b.n	8007c6a <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c44:	f003 0302 	and.w	r3, r3, #2
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d103      	bne.n	8007c54 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007c4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c4e:	f000 fbb5 	bl	80083bc <vPortFree>
 8007c52:	e00a      	b.n	8007c6a <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c5a:	f023 0301 	bic.w	r3, r3, #1
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007c66:	e000      	b.n	8007c6a <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007c68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c6a:	4b07      	ldr	r3, [pc, #28]	; (8007c88 <prvProcessReceivedCommands+0x1c0>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	1d39      	adds	r1, r7, #4
 8007c70:	2200      	movs	r2, #0
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fe fc04 	bl	8006480 <xQueueReceive>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f47f af28 	bne.w	8007ad0 <prvProcessReceivedCommands+0x8>
	}
}
 8007c80:	bf00      	nop
 8007c82:	3730      	adds	r7, #48	; 0x30
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	20000c80 	.word	0x20000c80

08007c8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b088      	sub	sp, #32
 8007c90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c92:	e049      	b.n	8007d28 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c94:	4b2e      	ldr	r3, [pc, #184]	; (8007d50 <prvSwitchTimerLists+0xc4>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c9e:	4b2c      	ldr	r3, [pc, #176]	; (8007d50 <prvSwitchTimerLists+0xc4>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	3304      	adds	r3, #4
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fe f915 	bl	8005edc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cc0:	f003 0304 	and.w	r3, r3, #4
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d02f      	beq.n	8007d28 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	4413      	add	r3, r2
 8007cd0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d90e      	bls.n	8007cf8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ce6:	4b1a      	ldr	r3, [pc, #104]	; (8007d50 <prvSwitchTimerLists+0xc4>)
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	3304      	adds	r3, #4
 8007cee:	4619      	mov	r1, r3
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	f7fe f8ba 	bl	8005e6a <vListInsert>
 8007cf6:	e017      	b.n	8007d28 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	2100      	movs	r1, #0
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f7ff fd5e 	bl	80077c4 <xTimerGenericCommand>
 8007d08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10b      	bne.n	8007d28 <prvSwitchTimerLists+0x9c>
 8007d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d14:	b672      	cpsid	i
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	b662      	cpsie	i
 8007d24:	603b      	str	r3, [r7, #0]
 8007d26:	e7fe      	b.n	8007d26 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d28:	4b09      	ldr	r3, [pc, #36]	; (8007d50 <prvSwitchTimerLists+0xc4>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1b0      	bne.n	8007c94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007d32:	4b07      	ldr	r3, [pc, #28]	; (8007d50 <prvSwitchTimerLists+0xc4>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007d38:	4b06      	ldr	r3, [pc, #24]	; (8007d54 <prvSwitchTimerLists+0xc8>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a04      	ldr	r2, [pc, #16]	; (8007d50 <prvSwitchTimerLists+0xc4>)
 8007d3e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007d40:	4a04      	ldr	r2, [pc, #16]	; (8007d54 <prvSwitchTimerLists+0xc8>)
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	6013      	str	r3, [r2, #0]
}
 8007d46:	bf00      	nop
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	20000c78 	.word	0x20000c78
 8007d54:	20000c7c 	.word	0x20000c7c

08007d58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007d5e:	f000 f943 	bl	8007fe8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007d62:	4b15      	ldr	r3, [pc, #84]	; (8007db8 <prvCheckForValidListAndQueue+0x60>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d120      	bne.n	8007dac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007d6a:	4814      	ldr	r0, [pc, #80]	; (8007dbc <prvCheckForValidListAndQueue+0x64>)
 8007d6c:	f7fe f82c 	bl	8005dc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007d70:	4813      	ldr	r0, [pc, #76]	; (8007dc0 <prvCheckForValidListAndQueue+0x68>)
 8007d72:	f7fe f829 	bl	8005dc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007d76:	4b13      	ldr	r3, [pc, #76]	; (8007dc4 <prvCheckForValidListAndQueue+0x6c>)
 8007d78:	4a10      	ldr	r2, [pc, #64]	; (8007dbc <prvCheckForValidListAndQueue+0x64>)
 8007d7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d7c:	4b12      	ldr	r3, [pc, #72]	; (8007dc8 <prvCheckForValidListAndQueue+0x70>)
 8007d7e:	4a10      	ldr	r2, [pc, #64]	; (8007dc0 <prvCheckForValidListAndQueue+0x68>)
 8007d80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d82:	2300      	movs	r3, #0
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	4b11      	ldr	r3, [pc, #68]	; (8007dcc <prvCheckForValidListAndQueue+0x74>)
 8007d88:	4a11      	ldr	r2, [pc, #68]	; (8007dd0 <prvCheckForValidListAndQueue+0x78>)
 8007d8a:	2110      	movs	r1, #16
 8007d8c:	200a      	movs	r0, #10
 8007d8e:	f7fe f939 	bl	8006004 <xQueueGenericCreateStatic>
 8007d92:	4602      	mov	r2, r0
 8007d94:	4b08      	ldr	r3, [pc, #32]	; (8007db8 <prvCheckForValidListAndQueue+0x60>)
 8007d96:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d98:	4b07      	ldr	r3, [pc, #28]	; (8007db8 <prvCheckForValidListAndQueue+0x60>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d005      	beq.n	8007dac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007da0:	4b05      	ldr	r3, [pc, #20]	; (8007db8 <prvCheckForValidListAndQueue+0x60>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	490b      	ldr	r1, [pc, #44]	; (8007dd4 <prvCheckForValidListAndQueue+0x7c>)
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fe fd5c 	bl	8006864 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007dac:	f000 f94e 	bl	800804c <vPortExitCritical>
}
 8007db0:	bf00      	nop
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	20000c80 	.word	0x20000c80
 8007dbc:	20000c50 	.word	0x20000c50
 8007dc0:	20000c64 	.word	0x20000c64
 8007dc4:	20000c78 	.word	0x20000c78
 8007dc8:	20000c7c 	.word	0x20000c7c
 8007dcc:	20000d2c 	.word	0x20000d2c
 8007dd0:	20000c8c 	.word	0x20000c8c
 8007dd4:	0800946c 	.word	0x0800946c

08007dd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3b04      	subs	r3, #4
 8007de8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007df0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3b04      	subs	r3, #4
 8007df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	f023 0201 	bic.w	r2, r3, #1
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	3b04      	subs	r3, #4
 8007e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e08:	4a0c      	ldr	r2, [pc, #48]	; (8007e3c <pxPortInitialiseStack+0x64>)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	3b14      	subs	r3, #20
 8007e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	3b04      	subs	r3, #4
 8007e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f06f 0202 	mvn.w	r2, #2
 8007e26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	3b20      	subs	r3, #32
 8007e2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	08007e41 	.word	0x08007e41

08007e40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e4a:	4b13      	ldr	r3, [pc, #76]	; (8007e98 <prvTaskExitError+0x58>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e52:	d00b      	beq.n	8007e6c <prvTaskExitError+0x2c>
 8007e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e58:	b672      	cpsid	i
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	b662      	cpsie	i
 8007e68:	60fb      	str	r3, [r7, #12]
 8007e6a:	e7fe      	b.n	8007e6a <prvTaskExitError+0x2a>
 8007e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e70:	b672      	cpsid	i
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	b662      	cpsie	i
 8007e80:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e82:	bf00      	nop
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d0fc      	beq.n	8007e84 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e8a:	bf00      	nop
 8007e8c:	3714      	adds	r7, #20
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	2000000c 	.word	0x2000000c
 8007e9c:	00000000 	.word	0x00000000

08007ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ea0:	4b07      	ldr	r3, [pc, #28]	; (8007ec0 <pxCurrentTCBConst2>)
 8007ea2:	6819      	ldr	r1, [r3, #0]
 8007ea4:	6808      	ldr	r0, [r1, #0]
 8007ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eaa:	f380 8809 	msr	PSP, r0
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	f04f 0000 	mov.w	r0, #0
 8007eb6:	f380 8811 	msr	BASEPRI, r0
 8007eba:	4770      	bx	lr
 8007ebc:	f3af 8000 	nop.w

08007ec0 <pxCurrentTCBConst2>:
 8007ec0:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ec4:	bf00      	nop
 8007ec6:	bf00      	nop

08007ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ec8:	4808      	ldr	r0, [pc, #32]	; (8007eec <prvPortStartFirstTask+0x24>)
 8007eca:	6800      	ldr	r0, [r0, #0]
 8007ecc:	6800      	ldr	r0, [r0, #0]
 8007ece:	f380 8808 	msr	MSP, r0
 8007ed2:	f04f 0000 	mov.w	r0, #0
 8007ed6:	f380 8814 	msr	CONTROL, r0
 8007eda:	b662      	cpsie	i
 8007edc:	b661      	cpsie	f
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	df00      	svc	0
 8007ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007eea:	bf00      	nop
 8007eec:	e000ed08 	.word	0xe000ed08

08007ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ef6:	4b36      	ldr	r3, [pc, #216]	; (8007fd0 <xPortStartScheduler+0xe0>)
 8007ef8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	22ff      	movs	r2, #255	; 0xff
 8007f06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f10:	78fb      	ldrb	r3, [r7, #3]
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	4b2e      	ldr	r3, [pc, #184]	; (8007fd4 <xPortStartScheduler+0xe4>)
 8007f1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f1e:	4b2e      	ldr	r3, [pc, #184]	; (8007fd8 <xPortStartScheduler+0xe8>)
 8007f20:	2207      	movs	r2, #7
 8007f22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f24:	e009      	b.n	8007f3a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007f26:	4b2c      	ldr	r3, [pc, #176]	; (8007fd8 <xPortStartScheduler+0xe8>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	4a2a      	ldr	r2, [pc, #168]	; (8007fd8 <xPortStartScheduler+0xe8>)
 8007f2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f30:	78fb      	ldrb	r3, [r7, #3]
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	005b      	lsls	r3, r3, #1
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f3a:	78fb      	ldrb	r3, [r7, #3]
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f42:	2b80      	cmp	r3, #128	; 0x80
 8007f44:	d0ef      	beq.n	8007f26 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f46:	4b24      	ldr	r3, [pc, #144]	; (8007fd8 <xPortStartScheduler+0xe8>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f1c3 0307 	rsb	r3, r3, #7
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	d00b      	beq.n	8007f6a <xPortStartScheduler+0x7a>
 8007f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f56:	b672      	cpsid	i
 8007f58:	f383 8811 	msr	BASEPRI, r3
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	b662      	cpsie	i
 8007f66:	60bb      	str	r3, [r7, #8]
 8007f68:	e7fe      	b.n	8007f68 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f6a:	4b1b      	ldr	r3, [pc, #108]	; (8007fd8 <xPortStartScheduler+0xe8>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	021b      	lsls	r3, r3, #8
 8007f70:	4a19      	ldr	r2, [pc, #100]	; (8007fd8 <xPortStartScheduler+0xe8>)
 8007f72:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f74:	4b18      	ldr	r3, [pc, #96]	; (8007fd8 <xPortStartScheduler+0xe8>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f7c:	4a16      	ldr	r2, [pc, #88]	; (8007fd8 <xPortStartScheduler+0xe8>)
 8007f7e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f88:	4b14      	ldr	r3, [pc, #80]	; (8007fdc <xPortStartScheduler+0xec>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a13      	ldr	r2, [pc, #76]	; (8007fdc <xPortStartScheduler+0xec>)
 8007f8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f92:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f94:	4b11      	ldr	r3, [pc, #68]	; (8007fdc <xPortStartScheduler+0xec>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a10      	ldr	r2, [pc, #64]	; (8007fdc <xPortStartScheduler+0xec>)
 8007f9a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f9e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007fa0:	f000 f8d4 	bl	800814c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007fa4:	4b0e      	ldr	r3, [pc, #56]	; (8007fe0 <xPortStartScheduler+0xf0>)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007faa:	f000 f8f3 	bl	8008194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007fae:	4b0d      	ldr	r3, [pc, #52]	; (8007fe4 <xPortStartScheduler+0xf4>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a0c      	ldr	r2, [pc, #48]	; (8007fe4 <xPortStartScheduler+0xf4>)
 8007fb4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007fb8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007fba:	f7ff ff85 	bl	8007ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007fbe:	f7ff f867 	bl	8007090 <vTaskSwitchContext>
	prvTaskExitError();
 8007fc2:	f7ff ff3d 	bl	8007e40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	e000e400 	.word	0xe000e400
 8007fd4:	20000d7c 	.word	0x20000d7c
 8007fd8:	20000d80 	.word	0x20000d80
 8007fdc:	e000ed20 	.word	0xe000ed20
 8007fe0:	2000000c 	.word	0x2000000c
 8007fe4:	e000ef34 	.word	0xe000ef34

08007fe8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff2:	b672      	cpsid	i
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	b662      	cpsie	i
 8008002:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008004:	4b0f      	ldr	r3, [pc, #60]	; (8008044 <vPortEnterCritical+0x5c>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	3301      	adds	r3, #1
 800800a:	4a0e      	ldr	r2, [pc, #56]	; (8008044 <vPortEnterCritical+0x5c>)
 800800c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800800e:	4b0d      	ldr	r3, [pc, #52]	; (8008044 <vPortEnterCritical+0x5c>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2b01      	cmp	r3, #1
 8008014:	d110      	bne.n	8008038 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008016:	4b0c      	ldr	r3, [pc, #48]	; (8008048 <vPortEnterCritical+0x60>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00b      	beq.n	8008038 <vPortEnterCritical+0x50>
 8008020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008024:	b672      	cpsid	i
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	b662      	cpsie	i
 8008034:	603b      	str	r3, [r7, #0]
 8008036:	e7fe      	b.n	8008036 <vPortEnterCritical+0x4e>
	}
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr
 8008044:	2000000c 	.word	0x2000000c
 8008048:	e000ed04 	.word	0xe000ed04

0800804c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008052:	4b12      	ldr	r3, [pc, #72]	; (800809c <vPortExitCritical+0x50>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10b      	bne.n	8008072 <vPortExitCritical+0x26>
 800805a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805e:	b672      	cpsid	i
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	b662      	cpsie	i
 800806e:	607b      	str	r3, [r7, #4]
 8008070:	e7fe      	b.n	8008070 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8008072:	4b0a      	ldr	r3, [pc, #40]	; (800809c <vPortExitCritical+0x50>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	3b01      	subs	r3, #1
 8008078:	4a08      	ldr	r2, [pc, #32]	; (800809c <vPortExitCritical+0x50>)
 800807a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800807c:	4b07      	ldr	r3, [pc, #28]	; (800809c <vPortExitCritical+0x50>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d104      	bne.n	800808e <vPortExitCritical+0x42>
 8008084:	2300      	movs	r3, #0
 8008086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800808e:	bf00      	nop
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	2000000c 	.word	0x2000000c

080080a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80080a0:	f3ef 8009 	mrs	r0, PSP
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	4b15      	ldr	r3, [pc, #84]	; (8008100 <pxCurrentTCBConst>)
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	f01e 0f10 	tst.w	lr, #16
 80080b0:	bf08      	it	eq
 80080b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80080b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ba:	6010      	str	r0, [r2, #0]
 80080bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80080c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80080c4:	b672      	cpsid	i
 80080c6:	f380 8811 	msr	BASEPRI, r0
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	f3bf 8f6f 	isb	sy
 80080d2:	b662      	cpsie	i
 80080d4:	f7fe ffdc 	bl	8007090 <vTaskSwitchContext>
 80080d8:	f04f 0000 	mov.w	r0, #0
 80080dc:	f380 8811 	msr	BASEPRI, r0
 80080e0:	bc09      	pop	{r0, r3}
 80080e2:	6819      	ldr	r1, [r3, #0]
 80080e4:	6808      	ldr	r0, [r1, #0]
 80080e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ea:	f01e 0f10 	tst.w	lr, #16
 80080ee:	bf08      	it	eq
 80080f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80080f4:	f380 8809 	msr	PSP, r0
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop

08008100 <pxCurrentTCBConst>:
 8008100:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008104:	bf00      	nop
 8008106:	bf00      	nop

08008108 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008112:	b672      	cpsid	i
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	b662      	cpsie	i
 8008122:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008124:	f7fe fefa 	bl	8006f1c <xTaskIncrementTick>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d003      	beq.n	8008136 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800812e:	4b06      	ldr	r3, [pc, #24]	; (8008148 <SysTick_Handler+0x40>)
 8008130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008134:	601a      	str	r2, [r3, #0]
 8008136:	2300      	movs	r3, #0
 8008138:	603b      	str	r3, [r7, #0]
	__asm volatile
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008140:	bf00      	nop
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	e000ed04 	.word	0xe000ed04

0800814c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800814c:	b480      	push	{r7}
 800814e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008150:	4b0b      	ldr	r3, [pc, #44]	; (8008180 <vPortSetupTimerInterrupt+0x34>)
 8008152:	2200      	movs	r2, #0
 8008154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008156:	4b0b      	ldr	r3, [pc, #44]	; (8008184 <vPortSetupTimerInterrupt+0x38>)
 8008158:	2200      	movs	r2, #0
 800815a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800815c:	4b0a      	ldr	r3, [pc, #40]	; (8008188 <vPortSetupTimerInterrupt+0x3c>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a0a      	ldr	r2, [pc, #40]	; (800818c <vPortSetupTimerInterrupt+0x40>)
 8008162:	fba2 2303 	umull	r2, r3, r2, r3
 8008166:	099b      	lsrs	r3, r3, #6
 8008168:	4a09      	ldr	r2, [pc, #36]	; (8008190 <vPortSetupTimerInterrupt+0x44>)
 800816a:	3b01      	subs	r3, #1
 800816c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800816e:	4b04      	ldr	r3, [pc, #16]	; (8008180 <vPortSetupTimerInterrupt+0x34>)
 8008170:	2207      	movs	r2, #7
 8008172:	601a      	str	r2, [r3, #0]
}
 8008174:	bf00      	nop
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	e000e010 	.word	0xe000e010
 8008184:	e000e018 	.word	0xe000e018
 8008188:	20000000 	.word	0x20000000
 800818c:	10624dd3 	.word	0x10624dd3
 8008190:	e000e014 	.word	0xe000e014

08008194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008194:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80081a4 <vPortEnableVFP+0x10>
 8008198:	6801      	ldr	r1, [r0, #0]
 800819a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800819e:	6001      	str	r1, [r0, #0]
 80081a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80081a2:	bf00      	nop
 80081a4:	e000ed88 	.word	0xe000ed88

080081a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80081ae:	f3ef 8305 	mrs	r3, IPSR
 80081b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2b0f      	cmp	r3, #15
 80081b8:	d915      	bls.n	80081e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081ba:	4a18      	ldr	r2, [pc, #96]	; (800821c <vPortValidateInterruptPriority+0x74>)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	4413      	add	r3, r2
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80081c4:	4b16      	ldr	r3, [pc, #88]	; (8008220 <vPortValidateInterruptPriority+0x78>)
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	7afa      	ldrb	r2, [r7, #11]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d20b      	bcs.n	80081e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	b672      	cpsid	i
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	b662      	cpsie	i
 80081e2:	607b      	str	r3, [r7, #4]
 80081e4:	e7fe      	b.n	80081e4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80081e6:	4b0f      	ldr	r3, [pc, #60]	; (8008224 <vPortValidateInterruptPriority+0x7c>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80081ee:	4b0e      	ldr	r3, [pc, #56]	; (8008228 <vPortValidateInterruptPriority+0x80>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d90b      	bls.n	800820e <vPortValidateInterruptPriority+0x66>
 80081f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fa:	b672      	cpsid	i
 80081fc:	f383 8811 	msr	BASEPRI, r3
 8008200:	f3bf 8f6f 	isb	sy
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	b662      	cpsie	i
 800820a:	603b      	str	r3, [r7, #0]
 800820c:	e7fe      	b.n	800820c <vPortValidateInterruptPriority+0x64>
	}
 800820e:	bf00      	nop
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	e000e3f0 	.word	0xe000e3f0
 8008220:	20000d7c 	.word	0x20000d7c
 8008224:	e000ed0c 	.word	0xe000ed0c
 8008228:	20000d80 	.word	0x20000d80

0800822c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b08a      	sub	sp, #40	; 0x28
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008234:	2300      	movs	r3, #0
 8008236:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008238:	f7fe fdb4 	bl	8006da4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800823c:	4b5a      	ldr	r3, [pc, #360]	; (80083a8 <pvPortMalloc+0x17c>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d101      	bne.n	8008248 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008244:	f000 f916 	bl	8008474 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008248:	4b58      	ldr	r3, [pc, #352]	; (80083ac <pvPortMalloc+0x180>)
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4013      	ands	r3, r2
 8008250:	2b00      	cmp	r3, #0
 8008252:	f040 8090 	bne.w	8008376 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d01e      	beq.n	800829a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800825c:	2208      	movs	r2, #8
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4413      	add	r3, r2
 8008262:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f003 0307 	and.w	r3, r3, #7
 800826a:	2b00      	cmp	r3, #0
 800826c:	d015      	beq.n	800829a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f023 0307 	bic.w	r3, r3, #7
 8008274:	3308      	adds	r3, #8
 8008276:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f003 0307 	and.w	r3, r3, #7
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00b      	beq.n	800829a <pvPortMalloc+0x6e>
 8008282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008286:	b672      	cpsid	i
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	b662      	cpsie	i
 8008296:	617b      	str	r3, [r7, #20]
 8008298:	e7fe      	b.n	8008298 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d06a      	beq.n	8008376 <pvPortMalloc+0x14a>
 80082a0:	4b43      	ldr	r3, [pc, #268]	; (80083b0 <pvPortMalloc+0x184>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d865      	bhi.n	8008376 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082aa:	4b42      	ldr	r3, [pc, #264]	; (80083b4 <pvPortMalloc+0x188>)
 80082ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082ae:	4b41      	ldr	r3, [pc, #260]	; (80083b4 <pvPortMalloc+0x188>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082b4:	e004      	b.n	80082c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80082b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80082ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d903      	bls.n	80082d2 <pvPortMalloc+0xa6>
 80082ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1f1      	bne.n	80082b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80082d2:	4b35      	ldr	r3, [pc, #212]	; (80083a8 <pvPortMalloc+0x17c>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082d8:	429a      	cmp	r2, r3
 80082da:	d04c      	beq.n	8008376 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80082dc:	6a3b      	ldr	r3, [r7, #32]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2208      	movs	r2, #8
 80082e2:	4413      	add	r3, r2
 80082e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80082e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	685a      	ldr	r2, [r3, #4]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	1ad2      	subs	r2, r2, r3
 80082f6:	2308      	movs	r3, #8
 80082f8:	005b      	lsls	r3, r3, #1
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d920      	bls.n	8008340 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80082fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4413      	add	r3, r2
 8008304:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	f003 0307 	and.w	r3, r3, #7
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00b      	beq.n	8008328 <pvPortMalloc+0xfc>
 8008310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008314:	b672      	cpsid	i
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	b662      	cpsie	i
 8008324:	613b      	str	r3, [r7, #16]
 8008326:	e7fe      	b.n	8008326 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	685a      	ldr	r2, [r3, #4]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	1ad2      	subs	r2, r2, r3
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800833a:	69b8      	ldr	r0, [r7, #24]
 800833c:	f000 f8fc 	bl	8008538 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008340:	4b1b      	ldr	r3, [pc, #108]	; (80083b0 <pvPortMalloc+0x184>)
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	4a19      	ldr	r2, [pc, #100]	; (80083b0 <pvPortMalloc+0x184>)
 800834c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800834e:	4b18      	ldr	r3, [pc, #96]	; (80083b0 <pvPortMalloc+0x184>)
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	4b19      	ldr	r3, [pc, #100]	; (80083b8 <pvPortMalloc+0x18c>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	429a      	cmp	r2, r3
 8008358:	d203      	bcs.n	8008362 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800835a:	4b15      	ldr	r3, [pc, #84]	; (80083b0 <pvPortMalloc+0x184>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a16      	ldr	r2, [pc, #88]	; (80083b8 <pvPortMalloc+0x18c>)
 8008360:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	4b11      	ldr	r3, [pc, #68]	; (80083ac <pvPortMalloc+0x180>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	431a      	orrs	r2, r3
 800836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	2200      	movs	r2, #0
 8008374:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008376:	f7fe fd23 	bl	8006dc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	f003 0307 	and.w	r3, r3, #7
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00b      	beq.n	800839c <pvPortMalloc+0x170>
 8008384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008388:	b672      	cpsid	i
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	b662      	cpsie	i
 8008398:	60fb      	str	r3, [r7, #12]
 800839a:	e7fe      	b.n	800839a <pvPortMalloc+0x16e>
	return pvReturn;
 800839c:	69fb      	ldr	r3, [r7, #28]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3728      	adds	r7, #40	; 0x28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	2000498c 	.word	0x2000498c
 80083ac:	20004998 	.word	0x20004998
 80083b0:	20004990 	.word	0x20004990
 80083b4:	20004984 	.word	0x20004984
 80083b8:	20004994 	.word	0x20004994

080083bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d04a      	beq.n	8008464 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80083ce:	2308      	movs	r3, #8
 80083d0:	425b      	negs	r3, r3
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	4413      	add	r3, r2
 80083d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	685a      	ldr	r2, [r3, #4]
 80083e0:	4b22      	ldr	r3, [pc, #136]	; (800846c <vPortFree+0xb0>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4013      	ands	r3, r2
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10b      	bne.n	8008402 <vPortFree+0x46>
 80083ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ee:	b672      	cpsid	i
 80083f0:	f383 8811 	msr	BASEPRI, r3
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	b662      	cpsie	i
 80083fe:	60fb      	str	r3, [r7, #12]
 8008400:	e7fe      	b.n	8008400 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00b      	beq.n	8008422 <vPortFree+0x66>
 800840a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840e:	b672      	cpsid	i
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	b662      	cpsie	i
 800841e:	60bb      	str	r3, [r7, #8]
 8008420:	e7fe      	b.n	8008420 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	685a      	ldr	r2, [r3, #4]
 8008426:	4b11      	ldr	r3, [pc, #68]	; (800846c <vPortFree+0xb0>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4013      	ands	r3, r2
 800842c:	2b00      	cmp	r3, #0
 800842e:	d019      	beq.n	8008464 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d115      	bne.n	8008464 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	4b0b      	ldr	r3, [pc, #44]	; (800846c <vPortFree+0xb0>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	43db      	mvns	r3, r3
 8008442:	401a      	ands	r2, r3
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008448:	f7fe fcac 	bl	8006da4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	685a      	ldr	r2, [r3, #4]
 8008450:	4b07      	ldr	r3, [pc, #28]	; (8008470 <vPortFree+0xb4>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4413      	add	r3, r2
 8008456:	4a06      	ldr	r2, [pc, #24]	; (8008470 <vPortFree+0xb4>)
 8008458:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800845a:	6938      	ldr	r0, [r7, #16]
 800845c:	f000 f86c 	bl	8008538 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008460:	f7fe fcae 	bl	8006dc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008464:	bf00      	nop
 8008466:	3718      	adds	r7, #24
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	20004998 	.word	0x20004998
 8008470:	20004990 	.word	0x20004990

08008474 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800847a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800847e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008480:	4b27      	ldr	r3, [pc, #156]	; (8008520 <prvHeapInit+0xac>)
 8008482:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f003 0307 	and.w	r3, r3, #7
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00c      	beq.n	80084a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	3307      	adds	r3, #7
 8008492:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f023 0307 	bic.w	r3, r3, #7
 800849a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	4a1f      	ldr	r2, [pc, #124]	; (8008520 <prvHeapInit+0xac>)
 80084a4:	4413      	add	r3, r2
 80084a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084ac:	4a1d      	ldr	r2, [pc, #116]	; (8008524 <prvHeapInit+0xb0>)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80084b2:	4b1c      	ldr	r3, [pc, #112]	; (8008524 <prvHeapInit+0xb0>)
 80084b4:	2200      	movs	r2, #0
 80084b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	4413      	add	r3, r2
 80084be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80084c0:	2208      	movs	r2, #8
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	1a9b      	subs	r3, r3, r2
 80084c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f023 0307 	bic.w	r3, r3, #7
 80084ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	4a15      	ldr	r2, [pc, #84]	; (8008528 <prvHeapInit+0xb4>)
 80084d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80084d6:	4b14      	ldr	r3, [pc, #80]	; (8008528 <prvHeapInit+0xb4>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2200      	movs	r2, #0
 80084dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80084de:	4b12      	ldr	r3, [pc, #72]	; (8008528 <prvHeapInit+0xb4>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2200      	movs	r2, #0
 80084e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	1ad2      	subs	r2, r2, r3
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80084f4:	4b0c      	ldr	r3, [pc, #48]	; (8008528 <prvHeapInit+0xb4>)
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	4a0a      	ldr	r2, [pc, #40]	; (800852c <prvHeapInit+0xb8>)
 8008502:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	4a09      	ldr	r2, [pc, #36]	; (8008530 <prvHeapInit+0xbc>)
 800850a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800850c:	4b09      	ldr	r3, [pc, #36]	; (8008534 <prvHeapInit+0xc0>)
 800850e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008512:	601a      	str	r2, [r3, #0]
}
 8008514:	bf00      	nop
 8008516:	3714      	adds	r7, #20
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr
 8008520:	20000d84 	.word	0x20000d84
 8008524:	20004984 	.word	0x20004984
 8008528:	2000498c 	.word	0x2000498c
 800852c:	20004994 	.word	0x20004994
 8008530:	20004990 	.word	0x20004990
 8008534:	20004998 	.word	0x20004998

08008538 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008540:	4b28      	ldr	r3, [pc, #160]	; (80085e4 <prvInsertBlockIntoFreeList+0xac>)
 8008542:	60fb      	str	r3, [r7, #12]
 8008544:	e002      	b.n	800854c <prvInsertBlockIntoFreeList+0x14>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	60fb      	str	r3, [r7, #12]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	429a      	cmp	r2, r3
 8008554:	d8f7      	bhi.n	8008546 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	4413      	add	r3, r2
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	429a      	cmp	r2, r3
 8008566:	d108      	bne.n	800857a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	441a      	add	r2, r3
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	441a      	add	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	429a      	cmp	r2, r3
 800858c:	d118      	bne.n	80085c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	4b15      	ldr	r3, [pc, #84]	; (80085e8 <prvInsertBlockIntoFreeList+0xb0>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	429a      	cmp	r2, r3
 8008598:	d00d      	beq.n	80085b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	685a      	ldr	r2, [r3, #4]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	441a      	add	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	601a      	str	r2, [r3, #0]
 80085b4:	e008      	b.n	80085c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80085b6:	4b0c      	ldr	r3, [pc, #48]	; (80085e8 <prvInsertBlockIntoFreeList+0xb0>)
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	601a      	str	r2, [r3, #0]
 80085be:	e003      	b.n	80085c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d002      	beq.n	80085d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085d6:	bf00      	nop
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	20004984 	.word	0x20004984
 80085e8:	2000498c 	.word	0x2000498c

080085ec <__errno>:
 80085ec:	4b01      	ldr	r3, [pc, #4]	; (80085f4 <__errno+0x8>)
 80085ee:	6818      	ldr	r0, [r3, #0]
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	20000010 	.word	0x20000010

080085f8 <__libc_init_array>:
 80085f8:	b570      	push	{r4, r5, r6, lr}
 80085fa:	4e0d      	ldr	r6, [pc, #52]	; (8008630 <__libc_init_array+0x38>)
 80085fc:	4c0d      	ldr	r4, [pc, #52]	; (8008634 <__libc_init_array+0x3c>)
 80085fe:	1ba4      	subs	r4, r4, r6
 8008600:	10a4      	asrs	r4, r4, #2
 8008602:	2500      	movs	r5, #0
 8008604:	42a5      	cmp	r5, r4
 8008606:	d109      	bne.n	800861c <__libc_init_array+0x24>
 8008608:	4e0b      	ldr	r6, [pc, #44]	; (8008638 <__libc_init_array+0x40>)
 800860a:	4c0c      	ldr	r4, [pc, #48]	; (800863c <__libc_init_array+0x44>)
 800860c:	f000 ff10 	bl	8009430 <_init>
 8008610:	1ba4      	subs	r4, r4, r6
 8008612:	10a4      	asrs	r4, r4, #2
 8008614:	2500      	movs	r5, #0
 8008616:	42a5      	cmp	r5, r4
 8008618:	d105      	bne.n	8008626 <__libc_init_array+0x2e>
 800861a:	bd70      	pop	{r4, r5, r6, pc}
 800861c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008620:	4798      	blx	r3
 8008622:	3501      	adds	r5, #1
 8008624:	e7ee      	b.n	8008604 <__libc_init_array+0xc>
 8008626:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800862a:	4798      	blx	r3
 800862c:	3501      	adds	r5, #1
 800862e:	e7f2      	b.n	8008616 <__libc_init_array+0x1e>
 8008630:	08009550 	.word	0x08009550
 8008634:	08009550 	.word	0x08009550
 8008638:	08009550 	.word	0x08009550
 800863c:	08009554 	.word	0x08009554

08008640 <memcpy>:
 8008640:	b510      	push	{r4, lr}
 8008642:	1e43      	subs	r3, r0, #1
 8008644:	440a      	add	r2, r1
 8008646:	4291      	cmp	r1, r2
 8008648:	d100      	bne.n	800864c <memcpy+0xc>
 800864a:	bd10      	pop	{r4, pc}
 800864c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008650:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008654:	e7f7      	b.n	8008646 <memcpy+0x6>

08008656 <memset>:
 8008656:	4402      	add	r2, r0
 8008658:	4603      	mov	r3, r0
 800865a:	4293      	cmp	r3, r2
 800865c:	d100      	bne.n	8008660 <memset+0xa>
 800865e:	4770      	bx	lr
 8008660:	f803 1b01 	strb.w	r1, [r3], #1
 8008664:	e7f9      	b.n	800865a <memset+0x4>
	...

08008668 <iprintf>:
 8008668:	b40f      	push	{r0, r1, r2, r3}
 800866a:	4b0a      	ldr	r3, [pc, #40]	; (8008694 <iprintf+0x2c>)
 800866c:	b513      	push	{r0, r1, r4, lr}
 800866e:	681c      	ldr	r4, [r3, #0]
 8008670:	b124      	cbz	r4, 800867c <iprintf+0x14>
 8008672:	69a3      	ldr	r3, [r4, #24]
 8008674:	b913      	cbnz	r3, 800867c <iprintf+0x14>
 8008676:	4620      	mov	r0, r4
 8008678:	f000 f84e 	bl	8008718 <__sinit>
 800867c:	ab05      	add	r3, sp, #20
 800867e:	9a04      	ldr	r2, [sp, #16]
 8008680:	68a1      	ldr	r1, [r4, #8]
 8008682:	9301      	str	r3, [sp, #4]
 8008684:	4620      	mov	r0, r4
 8008686:	f000 f955 	bl	8008934 <_vfiprintf_r>
 800868a:	b002      	add	sp, #8
 800868c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008690:	b004      	add	sp, #16
 8008692:	4770      	bx	lr
 8008694:	20000010 	.word	0x20000010

08008698 <std>:
 8008698:	2300      	movs	r3, #0
 800869a:	b510      	push	{r4, lr}
 800869c:	4604      	mov	r4, r0
 800869e:	e9c0 3300 	strd	r3, r3, [r0]
 80086a2:	6083      	str	r3, [r0, #8]
 80086a4:	8181      	strh	r1, [r0, #12]
 80086a6:	6643      	str	r3, [r0, #100]	; 0x64
 80086a8:	81c2      	strh	r2, [r0, #14]
 80086aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086ae:	6183      	str	r3, [r0, #24]
 80086b0:	4619      	mov	r1, r3
 80086b2:	2208      	movs	r2, #8
 80086b4:	305c      	adds	r0, #92	; 0x5c
 80086b6:	f7ff ffce 	bl	8008656 <memset>
 80086ba:	4b05      	ldr	r3, [pc, #20]	; (80086d0 <std+0x38>)
 80086bc:	6263      	str	r3, [r4, #36]	; 0x24
 80086be:	4b05      	ldr	r3, [pc, #20]	; (80086d4 <std+0x3c>)
 80086c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80086c2:	4b05      	ldr	r3, [pc, #20]	; (80086d8 <std+0x40>)
 80086c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086c6:	4b05      	ldr	r3, [pc, #20]	; (80086dc <std+0x44>)
 80086c8:	6224      	str	r4, [r4, #32]
 80086ca:	6323      	str	r3, [r4, #48]	; 0x30
 80086cc:	bd10      	pop	{r4, pc}
 80086ce:	bf00      	nop
 80086d0:	08008e91 	.word	0x08008e91
 80086d4:	08008eb3 	.word	0x08008eb3
 80086d8:	08008eeb 	.word	0x08008eeb
 80086dc:	08008f0f 	.word	0x08008f0f

080086e0 <_cleanup_r>:
 80086e0:	4901      	ldr	r1, [pc, #4]	; (80086e8 <_cleanup_r+0x8>)
 80086e2:	f000 b885 	b.w	80087f0 <_fwalk_reent>
 80086e6:	bf00      	nop
 80086e8:	080091e9 	.word	0x080091e9

080086ec <__sfmoreglue>:
 80086ec:	b570      	push	{r4, r5, r6, lr}
 80086ee:	1e4a      	subs	r2, r1, #1
 80086f0:	2568      	movs	r5, #104	; 0x68
 80086f2:	4355      	muls	r5, r2
 80086f4:	460e      	mov	r6, r1
 80086f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80086fa:	f000 f897 	bl	800882c <_malloc_r>
 80086fe:	4604      	mov	r4, r0
 8008700:	b140      	cbz	r0, 8008714 <__sfmoreglue+0x28>
 8008702:	2100      	movs	r1, #0
 8008704:	e9c0 1600 	strd	r1, r6, [r0]
 8008708:	300c      	adds	r0, #12
 800870a:	60a0      	str	r0, [r4, #8]
 800870c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008710:	f7ff ffa1 	bl	8008656 <memset>
 8008714:	4620      	mov	r0, r4
 8008716:	bd70      	pop	{r4, r5, r6, pc}

08008718 <__sinit>:
 8008718:	6983      	ldr	r3, [r0, #24]
 800871a:	b510      	push	{r4, lr}
 800871c:	4604      	mov	r4, r0
 800871e:	bb33      	cbnz	r3, 800876e <__sinit+0x56>
 8008720:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008724:	6503      	str	r3, [r0, #80]	; 0x50
 8008726:	4b12      	ldr	r3, [pc, #72]	; (8008770 <__sinit+0x58>)
 8008728:	4a12      	ldr	r2, [pc, #72]	; (8008774 <__sinit+0x5c>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6282      	str	r2, [r0, #40]	; 0x28
 800872e:	4298      	cmp	r0, r3
 8008730:	bf04      	itt	eq
 8008732:	2301      	moveq	r3, #1
 8008734:	6183      	streq	r3, [r0, #24]
 8008736:	f000 f81f 	bl	8008778 <__sfp>
 800873a:	6060      	str	r0, [r4, #4]
 800873c:	4620      	mov	r0, r4
 800873e:	f000 f81b 	bl	8008778 <__sfp>
 8008742:	60a0      	str	r0, [r4, #8]
 8008744:	4620      	mov	r0, r4
 8008746:	f000 f817 	bl	8008778 <__sfp>
 800874a:	2200      	movs	r2, #0
 800874c:	60e0      	str	r0, [r4, #12]
 800874e:	2104      	movs	r1, #4
 8008750:	6860      	ldr	r0, [r4, #4]
 8008752:	f7ff ffa1 	bl	8008698 <std>
 8008756:	2201      	movs	r2, #1
 8008758:	2109      	movs	r1, #9
 800875a:	68a0      	ldr	r0, [r4, #8]
 800875c:	f7ff ff9c 	bl	8008698 <std>
 8008760:	2202      	movs	r2, #2
 8008762:	2112      	movs	r1, #18
 8008764:	68e0      	ldr	r0, [r4, #12]
 8008766:	f7ff ff97 	bl	8008698 <std>
 800876a:	2301      	movs	r3, #1
 800876c:	61a3      	str	r3, [r4, #24]
 800876e:	bd10      	pop	{r4, pc}
 8008770:	080094b0 	.word	0x080094b0
 8008774:	080086e1 	.word	0x080086e1

08008778 <__sfp>:
 8008778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800877a:	4b1b      	ldr	r3, [pc, #108]	; (80087e8 <__sfp+0x70>)
 800877c:	681e      	ldr	r6, [r3, #0]
 800877e:	69b3      	ldr	r3, [r6, #24]
 8008780:	4607      	mov	r7, r0
 8008782:	b913      	cbnz	r3, 800878a <__sfp+0x12>
 8008784:	4630      	mov	r0, r6
 8008786:	f7ff ffc7 	bl	8008718 <__sinit>
 800878a:	3648      	adds	r6, #72	; 0x48
 800878c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008790:	3b01      	subs	r3, #1
 8008792:	d503      	bpl.n	800879c <__sfp+0x24>
 8008794:	6833      	ldr	r3, [r6, #0]
 8008796:	b133      	cbz	r3, 80087a6 <__sfp+0x2e>
 8008798:	6836      	ldr	r6, [r6, #0]
 800879a:	e7f7      	b.n	800878c <__sfp+0x14>
 800879c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80087a0:	b16d      	cbz	r5, 80087be <__sfp+0x46>
 80087a2:	3468      	adds	r4, #104	; 0x68
 80087a4:	e7f4      	b.n	8008790 <__sfp+0x18>
 80087a6:	2104      	movs	r1, #4
 80087a8:	4638      	mov	r0, r7
 80087aa:	f7ff ff9f 	bl	80086ec <__sfmoreglue>
 80087ae:	6030      	str	r0, [r6, #0]
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d1f1      	bne.n	8008798 <__sfp+0x20>
 80087b4:	230c      	movs	r3, #12
 80087b6:	603b      	str	r3, [r7, #0]
 80087b8:	4604      	mov	r4, r0
 80087ba:	4620      	mov	r0, r4
 80087bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087be:	4b0b      	ldr	r3, [pc, #44]	; (80087ec <__sfp+0x74>)
 80087c0:	6665      	str	r5, [r4, #100]	; 0x64
 80087c2:	e9c4 5500 	strd	r5, r5, [r4]
 80087c6:	60a5      	str	r5, [r4, #8]
 80087c8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80087cc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80087d0:	2208      	movs	r2, #8
 80087d2:	4629      	mov	r1, r5
 80087d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80087d8:	f7ff ff3d 	bl	8008656 <memset>
 80087dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80087e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80087e4:	e7e9      	b.n	80087ba <__sfp+0x42>
 80087e6:	bf00      	nop
 80087e8:	080094b0 	.word	0x080094b0
 80087ec:	ffff0001 	.word	0xffff0001

080087f0 <_fwalk_reent>:
 80087f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087f4:	4680      	mov	r8, r0
 80087f6:	4689      	mov	r9, r1
 80087f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80087fc:	2600      	movs	r6, #0
 80087fe:	b914      	cbnz	r4, 8008806 <_fwalk_reent+0x16>
 8008800:	4630      	mov	r0, r6
 8008802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008806:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800880a:	3f01      	subs	r7, #1
 800880c:	d501      	bpl.n	8008812 <_fwalk_reent+0x22>
 800880e:	6824      	ldr	r4, [r4, #0]
 8008810:	e7f5      	b.n	80087fe <_fwalk_reent+0xe>
 8008812:	89ab      	ldrh	r3, [r5, #12]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d907      	bls.n	8008828 <_fwalk_reent+0x38>
 8008818:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800881c:	3301      	adds	r3, #1
 800881e:	d003      	beq.n	8008828 <_fwalk_reent+0x38>
 8008820:	4629      	mov	r1, r5
 8008822:	4640      	mov	r0, r8
 8008824:	47c8      	blx	r9
 8008826:	4306      	orrs	r6, r0
 8008828:	3568      	adds	r5, #104	; 0x68
 800882a:	e7ee      	b.n	800880a <_fwalk_reent+0x1a>

0800882c <_malloc_r>:
 800882c:	b570      	push	{r4, r5, r6, lr}
 800882e:	1ccd      	adds	r5, r1, #3
 8008830:	f025 0503 	bic.w	r5, r5, #3
 8008834:	3508      	adds	r5, #8
 8008836:	2d0c      	cmp	r5, #12
 8008838:	bf38      	it	cc
 800883a:	250c      	movcc	r5, #12
 800883c:	2d00      	cmp	r5, #0
 800883e:	4606      	mov	r6, r0
 8008840:	db01      	blt.n	8008846 <_malloc_r+0x1a>
 8008842:	42a9      	cmp	r1, r5
 8008844:	d903      	bls.n	800884e <_malloc_r+0x22>
 8008846:	230c      	movs	r3, #12
 8008848:	6033      	str	r3, [r6, #0]
 800884a:	2000      	movs	r0, #0
 800884c:	bd70      	pop	{r4, r5, r6, pc}
 800884e:	f000 fd6b 	bl	8009328 <__malloc_lock>
 8008852:	4a21      	ldr	r2, [pc, #132]	; (80088d8 <_malloc_r+0xac>)
 8008854:	6814      	ldr	r4, [r2, #0]
 8008856:	4621      	mov	r1, r4
 8008858:	b991      	cbnz	r1, 8008880 <_malloc_r+0x54>
 800885a:	4c20      	ldr	r4, [pc, #128]	; (80088dc <_malloc_r+0xb0>)
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	b91b      	cbnz	r3, 8008868 <_malloc_r+0x3c>
 8008860:	4630      	mov	r0, r6
 8008862:	f000 fb05 	bl	8008e70 <_sbrk_r>
 8008866:	6020      	str	r0, [r4, #0]
 8008868:	4629      	mov	r1, r5
 800886a:	4630      	mov	r0, r6
 800886c:	f000 fb00 	bl	8008e70 <_sbrk_r>
 8008870:	1c43      	adds	r3, r0, #1
 8008872:	d124      	bne.n	80088be <_malloc_r+0x92>
 8008874:	230c      	movs	r3, #12
 8008876:	6033      	str	r3, [r6, #0]
 8008878:	4630      	mov	r0, r6
 800887a:	f000 fd56 	bl	800932a <__malloc_unlock>
 800887e:	e7e4      	b.n	800884a <_malloc_r+0x1e>
 8008880:	680b      	ldr	r3, [r1, #0]
 8008882:	1b5b      	subs	r3, r3, r5
 8008884:	d418      	bmi.n	80088b8 <_malloc_r+0x8c>
 8008886:	2b0b      	cmp	r3, #11
 8008888:	d90f      	bls.n	80088aa <_malloc_r+0x7e>
 800888a:	600b      	str	r3, [r1, #0]
 800888c:	50cd      	str	r5, [r1, r3]
 800888e:	18cc      	adds	r4, r1, r3
 8008890:	4630      	mov	r0, r6
 8008892:	f000 fd4a 	bl	800932a <__malloc_unlock>
 8008896:	f104 000b 	add.w	r0, r4, #11
 800889a:	1d23      	adds	r3, r4, #4
 800889c:	f020 0007 	bic.w	r0, r0, #7
 80088a0:	1ac3      	subs	r3, r0, r3
 80088a2:	d0d3      	beq.n	800884c <_malloc_r+0x20>
 80088a4:	425a      	negs	r2, r3
 80088a6:	50e2      	str	r2, [r4, r3]
 80088a8:	e7d0      	b.n	800884c <_malloc_r+0x20>
 80088aa:	428c      	cmp	r4, r1
 80088ac:	684b      	ldr	r3, [r1, #4]
 80088ae:	bf16      	itet	ne
 80088b0:	6063      	strne	r3, [r4, #4]
 80088b2:	6013      	streq	r3, [r2, #0]
 80088b4:	460c      	movne	r4, r1
 80088b6:	e7eb      	b.n	8008890 <_malloc_r+0x64>
 80088b8:	460c      	mov	r4, r1
 80088ba:	6849      	ldr	r1, [r1, #4]
 80088bc:	e7cc      	b.n	8008858 <_malloc_r+0x2c>
 80088be:	1cc4      	adds	r4, r0, #3
 80088c0:	f024 0403 	bic.w	r4, r4, #3
 80088c4:	42a0      	cmp	r0, r4
 80088c6:	d005      	beq.n	80088d4 <_malloc_r+0xa8>
 80088c8:	1a21      	subs	r1, r4, r0
 80088ca:	4630      	mov	r0, r6
 80088cc:	f000 fad0 	bl	8008e70 <_sbrk_r>
 80088d0:	3001      	adds	r0, #1
 80088d2:	d0cf      	beq.n	8008874 <_malloc_r+0x48>
 80088d4:	6025      	str	r5, [r4, #0]
 80088d6:	e7db      	b.n	8008890 <_malloc_r+0x64>
 80088d8:	2000499c 	.word	0x2000499c
 80088dc:	200049a0 	.word	0x200049a0

080088e0 <__sfputc_r>:
 80088e0:	6893      	ldr	r3, [r2, #8]
 80088e2:	3b01      	subs	r3, #1
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	b410      	push	{r4}
 80088e8:	6093      	str	r3, [r2, #8]
 80088ea:	da08      	bge.n	80088fe <__sfputc_r+0x1e>
 80088ec:	6994      	ldr	r4, [r2, #24]
 80088ee:	42a3      	cmp	r3, r4
 80088f0:	db01      	blt.n	80088f6 <__sfputc_r+0x16>
 80088f2:	290a      	cmp	r1, #10
 80088f4:	d103      	bne.n	80088fe <__sfputc_r+0x1e>
 80088f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088fa:	f000 bb0d 	b.w	8008f18 <__swbuf_r>
 80088fe:	6813      	ldr	r3, [r2, #0]
 8008900:	1c58      	adds	r0, r3, #1
 8008902:	6010      	str	r0, [r2, #0]
 8008904:	7019      	strb	r1, [r3, #0]
 8008906:	4608      	mov	r0, r1
 8008908:	f85d 4b04 	ldr.w	r4, [sp], #4
 800890c:	4770      	bx	lr

0800890e <__sfputs_r>:
 800890e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008910:	4606      	mov	r6, r0
 8008912:	460f      	mov	r7, r1
 8008914:	4614      	mov	r4, r2
 8008916:	18d5      	adds	r5, r2, r3
 8008918:	42ac      	cmp	r4, r5
 800891a:	d101      	bne.n	8008920 <__sfputs_r+0x12>
 800891c:	2000      	movs	r0, #0
 800891e:	e007      	b.n	8008930 <__sfputs_r+0x22>
 8008920:	463a      	mov	r2, r7
 8008922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008926:	4630      	mov	r0, r6
 8008928:	f7ff ffda 	bl	80088e0 <__sfputc_r>
 800892c:	1c43      	adds	r3, r0, #1
 800892e:	d1f3      	bne.n	8008918 <__sfputs_r+0xa>
 8008930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008934 <_vfiprintf_r>:
 8008934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008938:	460c      	mov	r4, r1
 800893a:	b09d      	sub	sp, #116	; 0x74
 800893c:	4617      	mov	r7, r2
 800893e:	461d      	mov	r5, r3
 8008940:	4606      	mov	r6, r0
 8008942:	b118      	cbz	r0, 800894c <_vfiprintf_r+0x18>
 8008944:	6983      	ldr	r3, [r0, #24]
 8008946:	b90b      	cbnz	r3, 800894c <_vfiprintf_r+0x18>
 8008948:	f7ff fee6 	bl	8008718 <__sinit>
 800894c:	4b7c      	ldr	r3, [pc, #496]	; (8008b40 <_vfiprintf_r+0x20c>)
 800894e:	429c      	cmp	r4, r3
 8008950:	d158      	bne.n	8008a04 <_vfiprintf_r+0xd0>
 8008952:	6874      	ldr	r4, [r6, #4]
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	0718      	lsls	r0, r3, #28
 8008958:	d55e      	bpl.n	8008a18 <_vfiprintf_r+0xe4>
 800895a:	6923      	ldr	r3, [r4, #16]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d05b      	beq.n	8008a18 <_vfiprintf_r+0xe4>
 8008960:	2300      	movs	r3, #0
 8008962:	9309      	str	r3, [sp, #36]	; 0x24
 8008964:	2320      	movs	r3, #32
 8008966:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800896a:	2330      	movs	r3, #48	; 0x30
 800896c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008970:	9503      	str	r5, [sp, #12]
 8008972:	f04f 0b01 	mov.w	fp, #1
 8008976:	46b8      	mov	r8, r7
 8008978:	4645      	mov	r5, r8
 800897a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800897e:	b10b      	cbz	r3, 8008984 <_vfiprintf_r+0x50>
 8008980:	2b25      	cmp	r3, #37	; 0x25
 8008982:	d154      	bne.n	8008a2e <_vfiprintf_r+0xfa>
 8008984:	ebb8 0a07 	subs.w	sl, r8, r7
 8008988:	d00b      	beq.n	80089a2 <_vfiprintf_r+0x6e>
 800898a:	4653      	mov	r3, sl
 800898c:	463a      	mov	r2, r7
 800898e:	4621      	mov	r1, r4
 8008990:	4630      	mov	r0, r6
 8008992:	f7ff ffbc 	bl	800890e <__sfputs_r>
 8008996:	3001      	adds	r0, #1
 8008998:	f000 80c2 	beq.w	8008b20 <_vfiprintf_r+0x1ec>
 800899c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800899e:	4453      	add	r3, sl
 80089a0:	9309      	str	r3, [sp, #36]	; 0x24
 80089a2:	f898 3000 	ldrb.w	r3, [r8]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f000 80ba 	beq.w	8008b20 <_vfiprintf_r+0x1ec>
 80089ac:	2300      	movs	r3, #0
 80089ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089b6:	9304      	str	r3, [sp, #16]
 80089b8:	9307      	str	r3, [sp, #28]
 80089ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089be:	931a      	str	r3, [sp, #104]	; 0x68
 80089c0:	46a8      	mov	r8, r5
 80089c2:	2205      	movs	r2, #5
 80089c4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80089c8:	485e      	ldr	r0, [pc, #376]	; (8008b44 <_vfiprintf_r+0x210>)
 80089ca:	f7f7 fc39 	bl	8000240 <memchr>
 80089ce:	9b04      	ldr	r3, [sp, #16]
 80089d0:	bb78      	cbnz	r0, 8008a32 <_vfiprintf_r+0xfe>
 80089d2:	06d9      	lsls	r1, r3, #27
 80089d4:	bf44      	itt	mi
 80089d6:	2220      	movmi	r2, #32
 80089d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80089dc:	071a      	lsls	r2, r3, #28
 80089de:	bf44      	itt	mi
 80089e0:	222b      	movmi	r2, #43	; 0x2b
 80089e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80089e6:	782a      	ldrb	r2, [r5, #0]
 80089e8:	2a2a      	cmp	r2, #42	; 0x2a
 80089ea:	d02a      	beq.n	8008a42 <_vfiprintf_r+0x10e>
 80089ec:	9a07      	ldr	r2, [sp, #28]
 80089ee:	46a8      	mov	r8, r5
 80089f0:	2000      	movs	r0, #0
 80089f2:	250a      	movs	r5, #10
 80089f4:	4641      	mov	r1, r8
 80089f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089fa:	3b30      	subs	r3, #48	; 0x30
 80089fc:	2b09      	cmp	r3, #9
 80089fe:	d969      	bls.n	8008ad4 <_vfiprintf_r+0x1a0>
 8008a00:	b360      	cbz	r0, 8008a5c <_vfiprintf_r+0x128>
 8008a02:	e024      	b.n	8008a4e <_vfiprintf_r+0x11a>
 8008a04:	4b50      	ldr	r3, [pc, #320]	; (8008b48 <_vfiprintf_r+0x214>)
 8008a06:	429c      	cmp	r4, r3
 8008a08:	d101      	bne.n	8008a0e <_vfiprintf_r+0xda>
 8008a0a:	68b4      	ldr	r4, [r6, #8]
 8008a0c:	e7a2      	b.n	8008954 <_vfiprintf_r+0x20>
 8008a0e:	4b4f      	ldr	r3, [pc, #316]	; (8008b4c <_vfiprintf_r+0x218>)
 8008a10:	429c      	cmp	r4, r3
 8008a12:	bf08      	it	eq
 8008a14:	68f4      	ldreq	r4, [r6, #12]
 8008a16:	e79d      	b.n	8008954 <_vfiprintf_r+0x20>
 8008a18:	4621      	mov	r1, r4
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f000 fae0 	bl	8008fe0 <__swsetup_r>
 8008a20:	2800      	cmp	r0, #0
 8008a22:	d09d      	beq.n	8008960 <_vfiprintf_r+0x2c>
 8008a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a28:	b01d      	add	sp, #116	; 0x74
 8008a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a2e:	46a8      	mov	r8, r5
 8008a30:	e7a2      	b.n	8008978 <_vfiprintf_r+0x44>
 8008a32:	4a44      	ldr	r2, [pc, #272]	; (8008b44 <_vfiprintf_r+0x210>)
 8008a34:	1a80      	subs	r0, r0, r2
 8008a36:	fa0b f000 	lsl.w	r0, fp, r0
 8008a3a:	4318      	orrs	r0, r3
 8008a3c:	9004      	str	r0, [sp, #16]
 8008a3e:	4645      	mov	r5, r8
 8008a40:	e7be      	b.n	80089c0 <_vfiprintf_r+0x8c>
 8008a42:	9a03      	ldr	r2, [sp, #12]
 8008a44:	1d11      	adds	r1, r2, #4
 8008a46:	6812      	ldr	r2, [r2, #0]
 8008a48:	9103      	str	r1, [sp, #12]
 8008a4a:	2a00      	cmp	r2, #0
 8008a4c:	db01      	blt.n	8008a52 <_vfiprintf_r+0x11e>
 8008a4e:	9207      	str	r2, [sp, #28]
 8008a50:	e004      	b.n	8008a5c <_vfiprintf_r+0x128>
 8008a52:	4252      	negs	r2, r2
 8008a54:	f043 0302 	orr.w	r3, r3, #2
 8008a58:	9207      	str	r2, [sp, #28]
 8008a5a:	9304      	str	r3, [sp, #16]
 8008a5c:	f898 3000 	ldrb.w	r3, [r8]
 8008a60:	2b2e      	cmp	r3, #46	; 0x2e
 8008a62:	d10e      	bne.n	8008a82 <_vfiprintf_r+0x14e>
 8008a64:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008a68:	2b2a      	cmp	r3, #42	; 0x2a
 8008a6a:	d138      	bne.n	8008ade <_vfiprintf_r+0x1aa>
 8008a6c:	9b03      	ldr	r3, [sp, #12]
 8008a6e:	1d1a      	adds	r2, r3, #4
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	9203      	str	r2, [sp, #12]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	bfb8      	it	lt
 8008a78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008a7c:	f108 0802 	add.w	r8, r8, #2
 8008a80:	9305      	str	r3, [sp, #20]
 8008a82:	4d33      	ldr	r5, [pc, #204]	; (8008b50 <_vfiprintf_r+0x21c>)
 8008a84:	f898 1000 	ldrb.w	r1, [r8]
 8008a88:	2203      	movs	r2, #3
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f7f7 fbd8 	bl	8000240 <memchr>
 8008a90:	b140      	cbz	r0, 8008aa4 <_vfiprintf_r+0x170>
 8008a92:	2340      	movs	r3, #64	; 0x40
 8008a94:	1b40      	subs	r0, r0, r5
 8008a96:	fa03 f000 	lsl.w	r0, r3, r0
 8008a9a:	9b04      	ldr	r3, [sp, #16]
 8008a9c:	4303      	orrs	r3, r0
 8008a9e:	f108 0801 	add.w	r8, r8, #1
 8008aa2:	9304      	str	r3, [sp, #16]
 8008aa4:	f898 1000 	ldrb.w	r1, [r8]
 8008aa8:	482a      	ldr	r0, [pc, #168]	; (8008b54 <_vfiprintf_r+0x220>)
 8008aaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008aae:	2206      	movs	r2, #6
 8008ab0:	f108 0701 	add.w	r7, r8, #1
 8008ab4:	f7f7 fbc4 	bl	8000240 <memchr>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	d037      	beq.n	8008b2c <_vfiprintf_r+0x1f8>
 8008abc:	4b26      	ldr	r3, [pc, #152]	; (8008b58 <_vfiprintf_r+0x224>)
 8008abe:	bb1b      	cbnz	r3, 8008b08 <_vfiprintf_r+0x1d4>
 8008ac0:	9b03      	ldr	r3, [sp, #12]
 8008ac2:	3307      	adds	r3, #7
 8008ac4:	f023 0307 	bic.w	r3, r3, #7
 8008ac8:	3308      	adds	r3, #8
 8008aca:	9303      	str	r3, [sp, #12]
 8008acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ace:	444b      	add	r3, r9
 8008ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ad2:	e750      	b.n	8008976 <_vfiprintf_r+0x42>
 8008ad4:	fb05 3202 	mla	r2, r5, r2, r3
 8008ad8:	2001      	movs	r0, #1
 8008ada:	4688      	mov	r8, r1
 8008adc:	e78a      	b.n	80089f4 <_vfiprintf_r+0xc0>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	f108 0801 	add.w	r8, r8, #1
 8008ae4:	9305      	str	r3, [sp, #20]
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	250a      	movs	r5, #10
 8008aea:	4640      	mov	r0, r8
 8008aec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008af0:	3a30      	subs	r2, #48	; 0x30
 8008af2:	2a09      	cmp	r2, #9
 8008af4:	d903      	bls.n	8008afe <_vfiprintf_r+0x1ca>
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d0c3      	beq.n	8008a82 <_vfiprintf_r+0x14e>
 8008afa:	9105      	str	r1, [sp, #20]
 8008afc:	e7c1      	b.n	8008a82 <_vfiprintf_r+0x14e>
 8008afe:	fb05 2101 	mla	r1, r5, r1, r2
 8008b02:	2301      	movs	r3, #1
 8008b04:	4680      	mov	r8, r0
 8008b06:	e7f0      	b.n	8008aea <_vfiprintf_r+0x1b6>
 8008b08:	ab03      	add	r3, sp, #12
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	4622      	mov	r2, r4
 8008b0e:	4b13      	ldr	r3, [pc, #76]	; (8008b5c <_vfiprintf_r+0x228>)
 8008b10:	a904      	add	r1, sp, #16
 8008b12:	4630      	mov	r0, r6
 8008b14:	f3af 8000 	nop.w
 8008b18:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008b1c:	4681      	mov	r9, r0
 8008b1e:	d1d5      	bne.n	8008acc <_vfiprintf_r+0x198>
 8008b20:	89a3      	ldrh	r3, [r4, #12]
 8008b22:	065b      	lsls	r3, r3, #25
 8008b24:	f53f af7e 	bmi.w	8008a24 <_vfiprintf_r+0xf0>
 8008b28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b2a:	e77d      	b.n	8008a28 <_vfiprintf_r+0xf4>
 8008b2c:	ab03      	add	r3, sp, #12
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	4622      	mov	r2, r4
 8008b32:	4b0a      	ldr	r3, [pc, #40]	; (8008b5c <_vfiprintf_r+0x228>)
 8008b34:	a904      	add	r1, sp, #16
 8008b36:	4630      	mov	r0, r6
 8008b38:	f000 f888 	bl	8008c4c <_printf_i>
 8008b3c:	e7ec      	b.n	8008b18 <_vfiprintf_r+0x1e4>
 8008b3e:	bf00      	nop
 8008b40:	080094d4 	.word	0x080094d4
 8008b44:	08009514 	.word	0x08009514
 8008b48:	080094f4 	.word	0x080094f4
 8008b4c:	080094b4 	.word	0x080094b4
 8008b50:	0800951a 	.word	0x0800951a
 8008b54:	0800951e 	.word	0x0800951e
 8008b58:	00000000 	.word	0x00000000
 8008b5c:	0800890f 	.word	0x0800890f

08008b60 <_printf_common>:
 8008b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b64:	4691      	mov	r9, r2
 8008b66:	461f      	mov	r7, r3
 8008b68:	688a      	ldr	r2, [r1, #8]
 8008b6a:	690b      	ldr	r3, [r1, #16]
 8008b6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b70:	4293      	cmp	r3, r2
 8008b72:	bfb8      	it	lt
 8008b74:	4613      	movlt	r3, r2
 8008b76:	f8c9 3000 	str.w	r3, [r9]
 8008b7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b7e:	4606      	mov	r6, r0
 8008b80:	460c      	mov	r4, r1
 8008b82:	b112      	cbz	r2, 8008b8a <_printf_common+0x2a>
 8008b84:	3301      	adds	r3, #1
 8008b86:	f8c9 3000 	str.w	r3, [r9]
 8008b8a:	6823      	ldr	r3, [r4, #0]
 8008b8c:	0699      	lsls	r1, r3, #26
 8008b8e:	bf42      	ittt	mi
 8008b90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008b94:	3302      	addmi	r3, #2
 8008b96:	f8c9 3000 	strmi.w	r3, [r9]
 8008b9a:	6825      	ldr	r5, [r4, #0]
 8008b9c:	f015 0506 	ands.w	r5, r5, #6
 8008ba0:	d107      	bne.n	8008bb2 <_printf_common+0x52>
 8008ba2:	f104 0a19 	add.w	sl, r4, #25
 8008ba6:	68e3      	ldr	r3, [r4, #12]
 8008ba8:	f8d9 2000 	ldr.w	r2, [r9]
 8008bac:	1a9b      	subs	r3, r3, r2
 8008bae:	42ab      	cmp	r3, r5
 8008bb0:	dc28      	bgt.n	8008c04 <_printf_common+0xa4>
 8008bb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008bb6:	6822      	ldr	r2, [r4, #0]
 8008bb8:	3300      	adds	r3, #0
 8008bba:	bf18      	it	ne
 8008bbc:	2301      	movne	r3, #1
 8008bbe:	0692      	lsls	r2, r2, #26
 8008bc0:	d42d      	bmi.n	8008c1e <_printf_common+0xbe>
 8008bc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bc6:	4639      	mov	r1, r7
 8008bc8:	4630      	mov	r0, r6
 8008bca:	47c0      	blx	r8
 8008bcc:	3001      	adds	r0, #1
 8008bce:	d020      	beq.n	8008c12 <_printf_common+0xb2>
 8008bd0:	6823      	ldr	r3, [r4, #0]
 8008bd2:	68e5      	ldr	r5, [r4, #12]
 8008bd4:	f8d9 2000 	ldr.w	r2, [r9]
 8008bd8:	f003 0306 	and.w	r3, r3, #6
 8008bdc:	2b04      	cmp	r3, #4
 8008bde:	bf08      	it	eq
 8008be0:	1aad      	subeq	r5, r5, r2
 8008be2:	68a3      	ldr	r3, [r4, #8]
 8008be4:	6922      	ldr	r2, [r4, #16]
 8008be6:	bf0c      	ite	eq
 8008be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bec:	2500      	movne	r5, #0
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	bfc4      	itt	gt
 8008bf2:	1a9b      	subgt	r3, r3, r2
 8008bf4:	18ed      	addgt	r5, r5, r3
 8008bf6:	f04f 0900 	mov.w	r9, #0
 8008bfa:	341a      	adds	r4, #26
 8008bfc:	454d      	cmp	r5, r9
 8008bfe:	d11a      	bne.n	8008c36 <_printf_common+0xd6>
 8008c00:	2000      	movs	r0, #0
 8008c02:	e008      	b.n	8008c16 <_printf_common+0xb6>
 8008c04:	2301      	movs	r3, #1
 8008c06:	4652      	mov	r2, sl
 8008c08:	4639      	mov	r1, r7
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	47c0      	blx	r8
 8008c0e:	3001      	adds	r0, #1
 8008c10:	d103      	bne.n	8008c1a <_printf_common+0xba>
 8008c12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c1a:	3501      	adds	r5, #1
 8008c1c:	e7c3      	b.n	8008ba6 <_printf_common+0x46>
 8008c1e:	18e1      	adds	r1, r4, r3
 8008c20:	1c5a      	adds	r2, r3, #1
 8008c22:	2030      	movs	r0, #48	; 0x30
 8008c24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c28:	4422      	add	r2, r4
 8008c2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c32:	3302      	adds	r3, #2
 8008c34:	e7c5      	b.n	8008bc2 <_printf_common+0x62>
 8008c36:	2301      	movs	r3, #1
 8008c38:	4622      	mov	r2, r4
 8008c3a:	4639      	mov	r1, r7
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	47c0      	blx	r8
 8008c40:	3001      	adds	r0, #1
 8008c42:	d0e6      	beq.n	8008c12 <_printf_common+0xb2>
 8008c44:	f109 0901 	add.w	r9, r9, #1
 8008c48:	e7d8      	b.n	8008bfc <_printf_common+0x9c>
	...

08008c4c <_printf_i>:
 8008c4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008c54:	460c      	mov	r4, r1
 8008c56:	7e09      	ldrb	r1, [r1, #24]
 8008c58:	b085      	sub	sp, #20
 8008c5a:	296e      	cmp	r1, #110	; 0x6e
 8008c5c:	4617      	mov	r7, r2
 8008c5e:	4606      	mov	r6, r0
 8008c60:	4698      	mov	r8, r3
 8008c62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c64:	f000 80b3 	beq.w	8008dce <_printf_i+0x182>
 8008c68:	d822      	bhi.n	8008cb0 <_printf_i+0x64>
 8008c6a:	2963      	cmp	r1, #99	; 0x63
 8008c6c:	d036      	beq.n	8008cdc <_printf_i+0x90>
 8008c6e:	d80a      	bhi.n	8008c86 <_printf_i+0x3a>
 8008c70:	2900      	cmp	r1, #0
 8008c72:	f000 80b9 	beq.w	8008de8 <_printf_i+0x19c>
 8008c76:	2958      	cmp	r1, #88	; 0x58
 8008c78:	f000 8083 	beq.w	8008d82 <_printf_i+0x136>
 8008c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008c84:	e032      	b.n	8008cec <_printf_i+0xa0>
 8008c86:	2964      	cmp	r1, #100	; 0x64
 8008c88:	d001      	beq.n	8008c8e <_printf_i+0x42>
 8008c8a:	2969      	cmp	r1, #105	; 0x69
 8008c8c:	d1f6      	bne.n	8008c7c <_printf_i+0x30>
 8008c8e:	6820      	ldr	r0, [r4, #0]
 8008c90:	6813      	ldr	r3, [r2, #0]
 8008c92:	0605      	lsls	r5, r0, #24
 8008c94:	f103 0104 	add.w	r1, r3, #4
 8008c98:	d52a      	bpl.n	8008cf0 <_printf_i+0xa4>
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6011      	str	r1, [r2, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	da03      	bge.n	8008caa <_printf_i+0x5e>
 8008ca2:	222d      	movs	r2, #45	; 0x2d
 8008ca4:	425b      	negs	r3, r3
 8008ca6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008caa:	486f      	ldr	r0, [pc, #444]	; (8008e68 <_printf_i+0x21c>)
 8008cac:	220a      	movs	r2, #10
 8008cae:	e039      	b.n	8008d24 <_printf_i+0xd8>
 8008cb0:	2973      	cmp	r1, #115	; 0x73
 8008cb2:	f000 809d 	beq.w	8008df0 <_printf_i+0x1a4>
 8008cb6:	d808      	bhi.n	8008cca <_printf_i+0x7e>
 8008cb8:	296f      	cmp	r1, #111	; 0x6f
 8008cba:	d020      	beq.n	8008cfe <_printf_i+0xb2>
 8008cbc:	2970      	cmp	r1, #112	; 0x70
 8008cbe:	d1dd      	bne.n	8008c7c <_printf_i+0x30>
 8008cc0:	6823      	ldr	r3, [r4, #0]
 8008cc2:	f043 0320 	orr.w	r3, r3, #32
 8008cc6:	6023      	str	r3, [r4, #0]
 8008cc8:	e003      	b.n	8008cd2 <_printf_i+0x86>
 8008cca:	2975      	cmp	r1, #117	; 0x75
 8008ccc:	d017      	beq.n	8008cfe <_printf_i+0xb2>
 8008cce:	2978      	cmp	r1, #120	; 0x78
 8008cd0:	d1d4      	bne.n	8008c7c <_printf_i+0x30>
 8008cd2:	2378      	movs	r3, #120	; 0x78
 8008cd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cd8:	4864      	ldr	r0, [pc, #400]	; (8008e6c <_printf_i+0x220>)
 8008cda:	e055      	b.n	8008d88 <_printf_i+0x13c>
 8008cdc:	6813      	ldr	r3, [r2, #0]
 8008cde:	1d19      	adds	r1, r3, #4
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	6011      	str	r1, [r2, #0]
 8008ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cec:	2301      	movs	r3, #1
 8008cee:	e08c      	b.n	8008e0a <_printf_i+0x1be>
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	6011      	str	r1, [r2, #0]
 8008cf4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cf8:	bf18      	it	ne
 8008cfa:	b21b      	sxthne	r3, r3
 8008cfc:	e7cf      	b.n	8008c9e <_printf_i+0x52>
 8008cfe:	6813      	ldr	r3, [r2, #0]
 8008d00:	6825      	ldr	r5, [r4, #0]
 8008d02:	1d18      	adds	r0, r3, #4
 8008d04:	6010      	str	r0, [r2, #0]
 8008d06:	0628      	lsls	r0, r5, #24
 8008d08:	d501      	bpl.n	8008d0e <_printf_i+0xc2>
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	e002      	b.n	8008d14 <_printf_i+0xc8>
 8008d0e:	0668      	lsls	r0, r5, #25
 8008d10:	d5fb      	bpl.n	8008d0a <_printf_i+0xbe>
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	4854      	ldr	r0, [pc, #336]	; (8008e68 <_printf_i+0x21c>)
 8008d16:	296f      	cmp	r1, #111	; 0x6f
 8008d18:	bf14      	ite	ne
 8008d1a:	220a      	movne	r2, #10
 8008d1c:	2208      	moveq	r2, #8
 8008d1e:	2100      	movs	r1, #0
 8008d20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d24:	6865      	ldr	r5, [r4, #4]
 8008d26:	60a5      	str	r5, [r4, #8]
 8008d28:	2d00      	cmp	r5, #0
 8008d2a:	f2c0 8095 	blt.w	8008e58 <_printf_i+0x20c>
 8008d2e:	6821      	ldr	r1, [r4, #0]
 8008d30:	f021 0104 	bic.w	r1, r1, #4
 8008d34:	6021      	str	r1, [r4, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d13d      	bne.n	8008db6 <_printf_i+0x16a>
 8008d3a:	2d00      	cmp	r5, #0
 8008d3c:	f040 808e 	bne.w	8008e5c <_printf_i+0x210>
 8008d40:	4665      	mov	r5, ip
 8008d42:	2a08      	cmp	r2, #8
 8008d44:	d10b      	bne.n	8008d5e <_printf_i+0x112>
 8008d46:	6823      	ldr	r3, [r4, #0]
 8008d48:	07db      	lsls	r3, r3, #31
 8008d4a:	d508      	bpl.n	8008d5e <_printf_i+0x112>
 8008d4c:	6923      	ldr	r3, [r4, #16]
 8008d4e:	6862      	ldr	r2, [r4, #4]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	bfde      	ittt	le
 8008d54:	2330      	movle	r3, #48	; 0x30
 8008d56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d5a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008d5e:	ebac 0305 	sub.w	r3, ip, r5
 8008d62:	6123      	str	r3, [r4, #16]
 8008d64:	f8cd 8000 	str.w	r8, [sp]
 8008d68:	463b      	mov	r3, r7
 8008d6a:	aa03      	add	r2, sp, #12
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	4630      	mov	r0, r6
 8008d70:	f7ff fef6 	bl	8008b60 <_printf_common>
 8008d74:	3001      	adds	r0, #1
 8008d76:	d14d      	bne.n	8008e14 <_printf_i+0x1c8>
 8008d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d7c:	b005      	add	sp, #20
 8008d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d82:	4839      	ldr	r0, [pc, #228]	; (8008e68 <_printf_i+0x21c>)
 8008d84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008d88:	6813      	ldr	r3, [r2, #0]
 8008d8a:	6821      	ldr	r1, [r4, #0]
 8008d8c:	1d1d      	adds	r5, r3, #4
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	6015      	str	r5, [r2, #0]
 8008d92:	060a      	lsls	r2, r1, #24
 8008d94:	d50b      	bpl.n	8008dae <_printf_i+0x162>
 8008d96:	07ca      	lsls	r2, r1, #31
 8008d98:	bf44      	itt	mi
 8008d9a:	f041 0120 	orrmi.w	r1, r1, #32
 8008d9e:	6021      	strmi	r1, [r4, #0]
 8008da0:	b91b      	cbnz	r3, 8008daa <_printf_i+0x15e>
 8008da2:	6822      	ldr	r2, [r4, #0]
 8008da4:	f022 0220 	bic.w	r2, r2, #32
 8008da8:	6022      	str	r2, [r4, #0]
 8008daa:	2210      	movs	r2, #16
 8008dac:	e7b7      	b.n	8008d1e <_printf_i+0xd2>
 8008dae:	064d      	lsls	r5, r1, #25
 8008db0:	bf48      	it	mi
 8008db2:	b29b      	uxthmi	r3, r3
 8008db4:	e7ef      	b.n	8008d96 <_printf_i+0x14a>
 8008db6:	4665      	mov	r5, ip
 8008db8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008dbc:	fb02 3311 	mls	r3, r2, r1, r3
 8008dc0:	5cc3      	ldrb	r3, [r0, r3]
 8008dc2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	2900      	cmp	r1, #0
 8008dca:	d1f5      	bne.n	8008db8 <_printf_i+0x16c>
 8008dcc:	e7b9      	b.n	8008d42 <_printf_i+0xf6>
 8008dce:	6813      	ldr	r3, [r2, #0]
 8008dd0:	6825      	ldr	r5, [r4, #0]
 8008dd2:	6961      	ldr	r1, [r4, #20]
 8008dd4:	1d18      	adds	r0, r3, #4
 8008dd6:	6010      	str	r0, [r2, #0]
 8008dd8:	0628      	lsls	r0, r5, #24
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	d501      	bpl.n	8008de2 <_printf_i+0x196>
 8008dde:	6019      	str	r1, [r3, #0]
 8008de0:	e002      	b.n	8008de8 <_printf_i+0x19c>
 8008de2:	066a      	lsls	r2, r5, #25
 8008de4:	d5fb      	bpl.n	8008dde <_printf_i+0x192>
 8008de6:	8019      	strh	r1, [r3, #0]
 8008de8:	2300      	movs	r3, #0
 8008dea:	6123      	str	r3, [r4, #16]
 8008dec:	4665      	mov	r5, ip
 8008dee:	e7b9      	b.n	8008d64 <_printf_i+0x118>
 8008df0:	6813      	ldr	r3, [r2, #0]
 8008df2:	1d19      	adds	r1, r3, #4
 8008df4:	6011      	str	r1, [r2, #0]
 8008df6:	681d      	ldr	r5, [r3, #0]
 8008df8:	6862      	ldr	r2, [r4, #4]
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	f7f7 fa1f 	bl	8000240 <memchr>
 8008e02:	b108      	cbz	r0, 8008e08 <_printf_i+0x1bc>
 8008e04:	1b40      	subs	r0, r0, r5
 8008e06:	6060      	str	r0, [r4, #4]
 8008e08:	6863      	ldr	r3, [r4, #4]
 8008e0a:	6123      	str	r3, [r4, #16]
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e12:	e7a7      	b.n	8008d64 <_printf_i+0x118>
 8008e14:	6923      	ldr	r3, [r4, #16]
 8008e16:	462a      	mov	r2, r5
 8008e18:	4639      	mov	r1, r7
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	47c0      	blx	r8
 8008e1e:	3001      	adds	r0, #1
 8008e20:	d0aa      	beq.n	8008d78 <_printf_i+0x12c>
 8008e22:	6823      	ldr	r3, [r4, #0]
 8008e24:	079b      	lsls	r3, r3, #30
 8008e26:	d413      	bmi.n	8008e50 <_printf_i+0x204>
 8008e28:	68e0      	ldr	r0, [r4, #12]
 8008e2a:	9b03      	ldr	r3, [sp, #12]
 8008e2c:	4298      	cmp	r0, r3
 8008e2e:	bfb8      	it	lt
 8008e30:	4618      	movlt	r0, r3
 8008e32:	e7a3      	b.n	8008d7c <_printf_i+0x130>
 8008e34:	2301      	movs	r3, #1
 8008e36:	464a      	mov	r2, r9
 8008e38:	4639      	mov	r1, r7
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	47c0      	blx	r8
 8008e3e:	3001      	adds	r0, #1
 8008e40:	d09a      	beq.n	8008d78 <_printf_i+0x12c>
 8008e42:	3501      	adds	r5, #1
 8008e44:	68e3      	ldr	r3, [r4, #12]
 8008e46:	9a03      	ldr	r2, [sp, #12]
 8008e48:	1a9b      	subs	r3, r3, r2
 8008e4a:	42ab      	cmp	r3, r5
 8008e4c:	dcf2      	bgt.n	8008e34 <_printf_i+0x1e8>
 8008e4e:	e7eb      	b.n	8008e28 <_printf_i+0x1dc>
 8008e50:	2500      	movs	r5, #0
 8008e52:	f104 0919 	add.w	r9, r4, #25
 8008e56:	e7f5      	b.n	8008e44 <_printf_i+0x1f8>
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1ac      	bne.n	8008db6 <_printf_i+0x16a>
 8008e5c:	7803      	ldrb	r3, [r0, #0]
 8008e5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e66:	e76c      	b.n	8008d42 <_printf_i+0xf6>
 8008e68:	08009525 	.word	0x08009525
 8008e6c:	08009536 	.word	0x08009536

08008e70 <_sbrk_r>:
 8008e70:	b538      	push	{r3, r4, r5, lr}
 8008e72:	4c06      	ldr	r4, [pc, #24]	; (8008e8c <_sbrk_r+0x1c>)
 8008e74:	2300      	movs	r3, #0
 8008e76:	4605      	mov	r5, r0
 8008e78:	4608      	mov	r0, r1
 8008e7a:	6023      	str	r3, [r4, #0]
 8008e7c:	f7f8 fb20 	bl	80014c0 <_sbrk>
 8008e80:	1c43      	adds	r3, r0, #1
 8008e82:	d102      	bne.n	8008e8a <_sbrk_r+0x1a>
 8008e84:	6823      	ldr	r3, [r4, #0]
 8008e86:	b103      	cbz	r3, 8008e8a <_sbrk_r+0x1a>
 8008e88:	602b      	str	r3, [r5, #0]
 8008e8a:	bd38      	pop	{r3, r4, r5, pc}
 8008e8c:	20004f60 	.word	0x20004f60

08008e90 <__sread>:
 8008e90:	b510      	push	{r4, lr}
 8008e92:	460c      	mov	r4, r1
 8008e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e98:	f000 fa96 	bl	80093c8 <_read_r>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	bfab      	itete	ge
 8008ea0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ea2:	89a3      	ldrhlt	r3, [r4, #12]
 8008ea4:	181b      	addge	r3, r3, r0
 8008ea6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008eaa:	bfac      	ite	ge
 8008eac:	6563      	strge	r3, [r4, #84]	; 0x54
 8008eae:	81a3      	strhlt	r3, [r4, #12]
 8008eb0:	bd10      	pop	{r4, pc}

08008eb2 <__swrite>:
 8008eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb6:	461f      	mov	r7, r3
 8008eb8:	898b      	ldrh	r3, [r1, #12]
 8008eba:	05db      	lsls	r3, r3, #23
 8008ebc:	4605      	mov	r5, r0
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	4616      	mov	r6, r2
 8008ec2:	d505      	bpl.n	8008ed0 <__swrite+0x1e>
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ecc:	f000 f9b6 	bl	800923c <_lseek_r>
 8008ed0:	89a3      	ldrh	r3, [r4, #12]
 8008ed2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ed6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008eda:	81a3      	strh	r3, [r4, #12]
 8008edc:	4632      	mov	r2, r6
 8008ede:	463b      	mov	r3, r7
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee6:	f000 b869 	b.w	8008fbc <_write_r>

08008eea <__sseek>:
 8008eea:	b510      	push	{r4, lr}
 8008eec:	460c      	mov	r4, r1
 8008eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ef2:	f000 f9a3 	bl	800923c <_lseek_r>
 8008ef6:	1c43      	adds	r3, r0, #1
 8008ef8:	89a3      	ldrh	r3, [r4, #12]
 8008efa:	bf15      	itete	ne
 8008efc:	6560      	strne	r0, [r4, #84]	; 0x54
 8008efe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f06:	81a3      	strheq	r3, [r4, #12]
 8008f08:	bf18      	it	ne
 8008f0a:	81a3      	strhne	r3, [r4, #12]
 8008f0c:	bd10      	pop	{r4, pc}

08008f0e <__sclose>:
 8008f0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f12:	f000 b8d3 	b.w	80090bc <_close_r>
	...

08008f18 <__swbuf_r>:
 8008f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1a:	460e      	mov	r6, r1
 8008f1c:	4614      	mov	r4, r2
 8008f1e:	4605      	mov	r5, r0
 8008f20:	b118      	cbz	r0, 8008f2a <__swbuf_r+0x12>
 8008f22:	6983      	ldr	r3, [r0, #24]
 8008f24:	b90b      	cbnz	r3, 8008f2a <__swbuf_r+0x12>
 8008f26:	f7ff fbf7 	bl	8008718 <__sinit>
 8008f2a:	4b21      	ldr	r3, [pc, #132]	; (8008fb0 <__swbuf_r+0x98>)
 8008f2c:	429c      	cmp	r4, r3
 8008f2e:	d12a      	bne.n	8008f86 <__swbuf_r+0x6e>
 8008f30:	686c      	ldr	r4, [r5, #4]
 8008f32:	69a3      	ldr	r3, [r4, #24]
 8008f34:	60a3      	str	r3, [r4, #8]
 8008f36:	89a3      	ldrh	r3, [r4, #12]
 8008f38:	071a      	lsls	r2, r3, #28
 8008f3a:	d52e      	bpl.n	8008f9a <__swbuf_r+0x82>
 8008f3c:	6923      	ldr	r3, [r4, #16]
 8008f3e:	b363      	cbz	r3, 8008f9a <__swbuf_r+0x82>
 8008f40:	6923      	ldr	r3, [r4, #16]
 8008f42:	6820      	ldr	r0, [r4, #0]
 8008f44:	1ac0      	subs	r0, r0, r3
 8008f46:	6963      	ldr	r3, [r4, #20]
 8008f48:	b2f6      	uxtb	r6, r6
 8008f4a:	4283      	cmp	r3, r0
 8008f4c:	4637      	mov	r7, r6
 8008f4e:	dc04      	bgt.n	8008f5a <__swbuf_r+0x42>
 8008f50:	4621      	mov	r1, r4
 8008f52:	4628      	mov	r0, r5
 8008f54:	f000 f948 	bl	80091e8 <_fflush_r>
 8008f58:	bb28      	cbnz	r0, 8008fa6 <__swbuf_r+0x8e>
 8008f5a:	68a3      	ldr	r3, [r4, #8]
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	60a3      	str	r3, [r4, #8]
 8008f60:	6823      	ldr	r3, [r4, #0]
 8008f62:	1c5a      	adds	r2, r3, #1
 8008f64:	6022      	str	r2, [r4, #0]
 8008f66:	701e      	strb	r6, [r3, #0]
 8008f68:	6963      	ldr	r3, [r4, #20]
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	4283      	cmp	r3, r0
 8008f6e:	d004      	beq.n	8008f7a <__swbuf_r+0x62>
 8008f70:	89a3      	ldrh	r3, [r4, #12]
 8008f72:	07db      	lsls	r3, r3, #31
 8008f74:	d519      	bpl.n	8008faa <__swbuf_r+0x92>
 8008f76:	2e0a      	cmp	r6, #10
 8008f78:	d117      	bne.n	8008faa <__swbuf_r+0x92>
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	f000 f933 	bl	80091e8 <_fflush_r>
 8008f82:	b190      	cbz	r0, 8008faa <__swbuf_r+0x92>
 8008f84:	e00f      	b.n	8008fa6 <__swbuf_r+0x8e>
 8008f86:	4b0b      	ldr	r3, [pc, #44]	; (8008fb4 <__swbuf_r+0x9c>)
 8008f88:	429c      	cmp	r4, r3
 8008f8a:	d101      	bne.n	8008f90 <__swbuf_r+0x78>
 8008f8c:	68ac      	ldr	r4, [r5, #8]
 8008f8e:	e7d0      	b.n	8008f32 <__swbuf_r+0x1a>
 8008f90:	4b09      	ldr	r3, [pc, #36]	; (8008fb8 <__swbuf_r+0xa0>)
 8008f92:	429c      	cmp	r4, r3
 8008f94:	bf08      	it	eq
 8008f96:	68ec      	ldreq	r4, [r5, #12]
 8008f98:	e7cb      	b.n	8008f32 <__swbuf_r+0x1a>
 8008f9a:	4621      	mov	r1, r4
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	f000 f81f 	bl	8008fe0 <__swsetup_r>
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	d0cc      	beq.n	8008f40 <__swbuf_r+0x28>
 8008fa6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008faa:	4638      	mov	r0, r7
 8008fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	080094d4 	.word	0x080094d4
 8008fb4:	080094f4 	.word	0x080094f4
 8008fb8:	080094b4 	.word	0x080094b4

08008fbc <_write_r>:
 8008fbc:	b538      	push	{r3, r4, r5, lr}
 8008fbe:	4c07      	ldr	r4, [pc, #28]	; (8008fdc <_write_r+0x20>)
 8008fc0:	4605      	mov	r5, r0
 8008fc2:	4608      	mov	r0, r1
 8008fc4:	4611      	mov	r1, r2
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	6022      	str	r2, [r4, #0]
 8008fca:	461a      	mov	r2, r3
 8008fcc:	f7f8 fa27 	bl	800141e <_write>
 8008fd0:	1c43      	adds	r3, r0, #1
 8008fd2:	d102      	bne.n	8008fda <_write_r+0x1e>
 8008fd4:	6823      	ldr	r3, [r4, #0]
 8008fd6:	b103      	cbz	r3, 8008fda <_write_r+0x1e>
 8008fd8:	602b      	str	r3, [r5, #0]
 8008fda:	bd38      	pop	{r3, r4, r5, pc}
 8008fdc:	20004f60 	.word	0x20004f60

08008fe0 <__swsetup_r>:
 8008fe0:	4b32      	ldr	r3, [pc, #200]	; (80090ac <__swsetup_r+0xcc>)
 8008fe2:	b570      	push	{r4, r5, r6, lr}
 8008fe4:	681d      	ldr	r5, [r3, #0]
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	460c      	mov	r4, r1
 8008fea:	b125      	cbz	r5, 8008ff6 <__swsetup_r+0x16>
 8008fec:	69ab      	ldr	r3, [r5, #24]
 8008fee:	b913      	cbnz	r3, 8008ff6 <__swsetup_r+0x16>
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	f7ff fb91 	bl	8008718 <__sinit>
 8008ff6:	4b2e      	ldr	r3, [pc, #184]	; (80090b0 <__swsetup_r+0xd0>)
 8008ff8:	429c      	cmp	r4, r3
 8008ffa:	d10f      	bne.n	800901c <__swsetup_r+0x3c>
 8008ffc:	686c      	ldr	r4, [r5, #4]
 8008ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009002:	b29a      	uxth	r2, r3
 8009004:	0715      	lsls	r5, r2, #28
 8009006:	d42c      	bmi.n	8009062 <__swsetup_r+0x82>
 8009008:	06d0      	lsls	r0, r2, #27
 800900a:	d411      	bmi.n	8009030 <__swsetup_r+0x50>
 800900c:	2209      	movs	r2, #9
 800900e:	6032      	str	r2, [r6, #0]
 8009010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009014:	81a3      	strh	r3, [r4, #12]
 8009016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800901a:	e03e      	b.n	800909a <__swsetup_r+0xba>
 800901c:	4b25      	ldr	r3, [pc, #148]	; (80090b4 <__swsetup_r+0xd4>)
 800901e:	429c      	cmp	r4, r3
 8009020:	d101      	bne.n	8009026 <__swsetup_r+0x46>
 8009022:	68ac      	ldr	r4, [r5, #8]
 8009024:	e7eb      	b.n	8008ffe <__swsetup_r+0x1e>
 8009026:	4b24      	ldr	r3, [pc, #144]	; (80090b8 <__swsetup_r+0xd8>)
 8009028:	429c      	cmp	r4, r3
 800902a:	bf08      	it	eq
 800902c:	68ec      	ldreq	r4, [r5, #12]
 800902e:	e7e6      	b.n	8008ffe <__swsetup_r+0x1e>
 8009030:	0751      	lsls	r1, r2, #29
 8009032:	d512      	bpl.n	800905a <__swsetup_r+0x7a>
 8009034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009036:	b141      	cbz	r1, 800904a <__swsetup_r+0x6a>
 8009038:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800903c:	4299      	cmp	r1, r3
 800903e:	d002      	beq.n	8009046 <__swsetup_r+0x66>
 8009040:	4630      	mov	r0, r6
 8009042:	f000 f973 	bl	800932c <_free_r>
 8009046:	2300      	movs	r3, #0
 8009048:	6363      	str	r3, [r4, #52]	; 0x34
 800904a:	89a3      	ldrh	r3, [r4, #12]
 800904c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009050:	81a3      	strh	r3, [r4, #12]
 8009052:	2300      	movs	r3, #0
 8009054:	6063      	str	r3, [r4, #4]
 8009056:	6923      	ldr	r3, [r4, #16]
 8009058:	6023      	str	r3, [r4, #0]
 800905a:	89a3      	ldrh	r3, [r4, #12]
 800905c:	f043 0308 	orr.w	r3, r3, #8
 8009060:	81a3      	strh	r3, [r4, #12]
 8009062:	6923      	ldr	r3, [r4, #16]
 8009064:	b94b      	cbnz	r3, 800907a <__swsetup_r+0x9a>
 8009066:	89a3      	ldrh	r3, [r4, #12]
 8009068:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800906c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009070:	d003      	beq.n	800907a <__swsetup_r+0x9a>
 8009072:	4621      	mov	r1, r4
 8009074:	4630      	mov	r0, r6
 8009076:	f000 f917 	bl	80092a8 <__smakebuf_r>
 800907a:	89a2      	ldrh	r2, [r4, #12]
 800907c:	f012 0301 	ands.w	r3, r2, #1
 8009080:	d00c      	beq.n	800909c <__swsetup_r+0xbc>
 8009082:	2300      	movs	r3, #0
 8009084:	60a3      	str	r3, [r4, #8]
 8009086:	6963      	ldr	r3, [r4, #20]
 8009088:	425b      	negs	r3, r3
 800908a:	61a3      	str	r3, [r4, #24]
 800908c:	6923      	ldr	r3, [r4, #16]
 800908e:	b953      	cbnz	r3, 80090a6 <__swsetup_r+0xc6>
 8009090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009094:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009098:	d1ba      	bne.n	8009010 <__swsetup_r+0x30>
 800909a:	bd70      	pop	{r4, r5, r6, pc}
 800909c:	0792      	lsls	r2, r2, #30
 800909e:	bf58      	it	pl
 80090a0:	6963      	ldrpl	r3, [r4, #20]
 80090a2:	60a3      	str	r3, [r4, #8]
 80090a4:	e7f2      	b.n	800908c <__swsetup_r+0xac>
 80090a6:	2000      	movs	r0, #0
 80090a8:	e7f7      	b.n	800909a <__swsetup_r+0xba>
 80090aa:	bf00      	nop
 80090ac:	20000010 	.word	0x20000010
 80090b0:	080094d4 	.word	0x080094d4
 80090b4:	080094f4 	.word	0x080094f4
 80090b8:	080094b4 	.word	0x080094b4

080090bc <_close_r>:
 80090bc:	b538      	push	{r3, r4, r5, lr}
 80090be:	4c06      	ldr	r4, [pc, #24]	; (80090d8 <_close_r+0x1c>)
 80090c0:	2300      	movs	r3, #0
 80090c2:	4605      	mov	r5, r0
 80090c4:	4608      	mov	r0, r1
 80090c6:	6023      	str	r3, [r4, #0]
 80090c8:	f7f8 f9c5 	bl	8001456 <_close>
 80090cc:	1c43      	adds	r3, r0, #1
 80090ce:	d102      	bne.n	80090d6 <_close_r+0x1a>
 80090d0:	6823      	ldr	r3, [r4, #0]
 80090d2:	b103      	cbz	r3, 80090d6 <_close_r+0x1a>
 80090d4:	602b      	str	r3, [r5, #0]
 80090d6:	bd38      	pop	{r3, r4, r5, pc}
 80090d8:	20004f60 	.word	0x20004f60

080090dc <__sflush_r>:
 80090dc:	898a      	ldrh	r2, [r1, #12]
 80090de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090e2:	4605      	mov	r5, r0
 80090e4:	0710      	lsls	r0, r2, #28
 80090e6:	460c      	mov	r4, r1
 80090e8:	d458      	bmi.n	800919c <__sflush_r+0xc0>
 80090ea:	684b      	ldr	r3, [r1, #4]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	dc05      	bgt.n	80090fc <__sflush_r+0x20>
 80090f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	dc02      	bgt.n	80090fc <__sflush_r+0x20>
 80090f6:	2000      	movs	r0, #0
 80090f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090fe:	2e00      	cmp	r6, #0
 8009100:	d0f9      	beq.n	80090f6 <__sflush_r+0x1a>
 8009102:	2300      	movs	r3, #0
 8009104:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009108:	682f      	ldr	r7, [r5, #0]
 800910a:	6a21      	ldr	r1, [r4, #32]
 800910c:	602b      	str	r3, [r5, #0]
 800910e:	d032      	beq.n	8009176 <__sflush_r+0x9a>
 8009110:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009112:	89a3      	ldrh	r3, [r4, #12]
 8009114:	075a      	lsls	r2, r3, #29
 8009116:	d505      	bpl.n	8009124 <__sflush_r+0x48>
 8009118:	6863      	ldr	r3, [r4, #4]
 800911a:	1ac0      	subs	r0, r0, r3
 800911c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800911e:	b10b      	cbz	r3, 8009124 <__sflush_r+0x48>
 8009120:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009122:	1ac0      	subs	r0, r0, r3
 8009124:	2300      	movs	r3, #0
 8009126:	4602      	mov	r2, r0
 8009128:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800912a:	6a21      	ldr	r1, [r4, #32]
 800912c:	4628      	mov	r0, r5
 800912e:	47b0      	blx	r6
 8009130:	1c43      	adds	r3, r0, #1
 8009132:	89a3      	ldrh	r3, [r4, #12]
 8009134:	d106      	bne.n	8009144 <__sflush_r+0x68>
 8009136:	6829      	ldr	r1, [r5, #0]
 8009138:	291d      	cmp	r1, #29
 800913a:	d848      	bhi.n	80091ce <__sflush_r+0xf2>
 800913c:	4a29      	ldr	r2, [pc, #164]	; (80091e4 <__sflush_r+0x108>)
 800913e:	40ca      	lsrs	r2, r1
 8009140:	07d6      	lsls	r6, r2, #31
 8009142:	d544      	bpl.n	80091ce <__sflush_r+0xf2>
 8009144:	2200      	movs	r2, #0
 8009146:	6062      	str	r2, [r4, #4]
 8009148:	04d9      	lsls	r1, r3, #19
 800914a:	6922      	ldr	r2, [r4, #16]
 800914c:	6022      	str	r2, [r4, #0]
 800914e:	d504      	bpl.n	800915a <__sflush_r+0x7e>
 8009150:	1c42      	adds	r2, r0, #1
 8009152:	d101      	bne.n	8009158 <__sflush_r+0x7c>
 8009154:	682b      	ldr	r3, [r5, #0]
 8009156:	b903      	cbnz	r3, 800915a <__sflush_r+0x7e>
 8009158:	6560      	str	r0, [r4, #84]	; 0x54
 800915a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800915c:	602f      	str	r7, [r5, #0]
 800915e:	2900      	cmp	r1, #0
 8009160:	d0c9      	beq.n	80090f6 <__sflush_r+0x1a>
 8009162:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009166:	4299      	cmp	r1, r3
 8009168:	d002      	beq.n	8009170 <__sflush_r+0x94>
 800916a:	4628      	mov	r0, r5
 800916c:	f000 f8de 	bl	800932c <_free_r>
 8009170:	2000      	movs	r0, #0
 8009172:	6360      	str	r0, [r4, #52]	; 0x34
 8009174:	e7c0      	b.n	80090f8 <__sflush_r+0x1c>
 8009176:	2301      	movs	r3, #1
 8009178:	4628      	mov	r0, r5
 800917a:	47b0      	blx	r6
 800917c:	1c41      	adds	r1, r0, #1
 800917e:	d1c8      	bne.n	8009112 <__sflush_r+0x36>
 8009180:	682b      	ldr	r3, [r5, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d0c5      	beq.n	8009112 <__sflush_r+0x36>
 8009186:	2b1d      	cmp	r3, #29
 8009188:	d001      	beq.n	800918e <__sflush_r+0xb2>
 800918a:	2b16      	cmp	r3, #22
 800918c:	d101      	bne.n	8009192 <__sflush_r+0xb6>
 800918e:	602f      	str	r7, [r5, #0]
 8009190:	e7b1      	b.n	80090f6 <__sflush_r+0x1a>
 8009192:	89a3      	ldrh	r3, [r4, #12]
 8009194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009198:	81a3      	strh	r3, [r4, #12]
 800919a:	e7ad      	b.n	80090f8 <__sflush_r+0x1c>
 800919c:	690f      	ldr	r7, [r1, #16]
 800919e:	2f00      	cmp	r7, #0
 80091a0:	d0a9      	beq.n	80090f6 <__sflush_r+0x1a>
 80091a2:	0793      	lsls	r3, r2, #30
 80091a4:	680e      	ldr	r6, [r1, #0]
 80091a6:	bf08      	it	eq
 80091a8:	694b      	ldreq	r3, [r1, #20]
 80091aa:	600f      	str	r7, [r1, #0]
 80091ac:	bf18      	it	ne
 80091ae:	2300      	movne	r3, #0
 80091b0:	eba6 0807 	sub.w	r8, r6, r7
 80091b4:	608b      	str	r3, [r1, #8]
 80091b6:	f1b8 0f00 	cmp.w	r8, #0
 80091ba:	dd9c      	ble.n	80090f6 <__sflush_r+0x1a>
 80091bc:	4643      	mov	r3, r8
 80091be:	463a      	mov	r2, r7
 80091c0:	6a21      	ldr	r1, [r4, #32]
 80091c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091c4:	4628      	mov	r0, r5
 80091c6:	47b0      	blx	r6
 80091c8:	2800      	cmp	r0, #0
 80091ca:	dc06      	bgt.n	80091da <__sflush_r+0xfe>
 80091cc:	89a3      	ldrh	r3, [r4, #12]
 80091ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091d2:	81a3      	strh	r3, [r4, #12]
 80091d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091d8:	e78e      	b.n	80090f8 <__sflush_r+0x1c>
 80091da:	4407      	add	r7, r0
 80091dc:	eba8 0800 	sub.w	r8, r8, r0
 80091e0:	e7e9      	b.n	80091b6 <__sflush_r+0xda>
 80091e2:	bf00      	nop
 80091e4:	20400001 	.word	0x20400001

080091e8 <_fflush_r>:
 80091e8:	b538      	push	{r3, r4, r5, lr}
 80091ea:	690b      	ldr	r3, [r1, #16]
 80091ec:	4605      	mov	r5, r0
 80091ee:	460c      	mov	r4, r1
 80091f0:	b1db      	cbz	r3, 800922a <_fflush_r+0x42>
 80091f2:	b118      	cbz	r0, 80091fc <_fflush_r+0x14>
 80091f4:	6983      	ldr	r3, [r0, #24]
 80091f6:	b90b      	cbnz	r3, 80091fc <_fflush_r+0x14>
 80091f8:	f7ff fa8e 	bl	8008718 <__sinit>
 80091fc:	4b0c      	ldr	r3, [pc, #48]	; (8009230 <_fflush_r+0x48>)
 80091fe:	429c      	cmp	r4, r3
 8009200:	d109      	bne.n	8009216 <_fflush_r+0x2e>
 8009202:	686c      	ldr	r4, [r5, #4]
 8009204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009208:	b17b      	cbz	r3, 800922a <_fflush_r+0x42>
 800920a:	4621      	mov	r1, r4
 800920c:	4628      	mov	r0, r5
 800920e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009212:	f7ff bf63 	b.w	80090dc <__sflush_r>
 8009216:	4b07      	ldr	r3, [pc, #28]	; (8009234 <_fflush_r+0x4c>)
 8009218:	429c      	cmp	r4, r3
 800921a:	d101      	bne.n	8009220 <_fflush_r+0x38>
 800921c:	68ac      	ldr	r4, [r5, #8]
 800921e:	e7f1      	b.n	8009204 <_fflush_r+0x1c>
 8009220:	4b05      	ldr	r3, [pc, #20]	; (8009238 <_fflush_r+0x50>)
 8009222:	429c      	cmp	r4, r3
 8009224:	bf08      	it	eq
 8009226:	68ec      	ldreq	r4, [r5, #12]
 8009228:	e7ec      	b.n	8009204 <_fflush_r+0x1c>
 800922a:	2000      	movs	r0, #0
 800922c:	bd38      	pop	{r3, r4, r5, pc}
 800922e:	bf00      	nop
 8009230:	080094d4 	.word	0x080094d4
 8009234:	080094f4 	.word	0x080094f4
 8009238:	080094b4 	.word	0x080094b4

0800923c <_lseek_r>:
 800923c:	b538      	push	{r3, r4, r5, lr}
 800923e:	4c07      	ldr	r4, [pc, #28]	; (800925c <_lseek_r+0x20>)
 8009240:	4605      	mov	r5, r0
 8009242:	4608      	mov	r0, r1
 8009244:	4611      	mov	r1, r2
 8009246:	2200      	movs	r2, #0
 8009248:	6022      	str	r2, [r4, #0]
 800924a:	461a      	mov	r2, r3
 800924c:	f7f8 f92a 	bl	80014a4 <_lseek>
 8009250:	1c43      	adds	r3, r0, #1
 8009252:	d102      	bne.n	800925a <_lseek_r+0x1e>
 8009254:	6823      	ldr	r3, [r4, #0]
 8009256:	b103      	cbz	r3, 800925a <_lseek_r+0x1e>
 8009258:	602b      	str	r3, [r5, #0]
 800925a:	bd38      	pop	{r3, r4, r5, pc}
 800925c:	20004f60 	.word	0x20004f60

08009260 <__swhatbuf_r>:
 8009260:	b570      	push	{r4, r5, r6, lr}
 8009262:	460e      	mov	r6, r1
 8009264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009268:	2900      	cmp	r1, #0
 800926a:	b096      	sub	sp, #88	; 0x58
 800926c:	4614      	mov	r4, r2
 800926e:	461d      	mov	r5, r3
 8009270:	da07      	bge.n	8009282 <__swhatbuf_r+0x22>
 8009272:	2300      	movs	r3, #0
 8009274:	602b      	str	r3, [r5, #0]
 8009276:	89b3      	ldrh	r3, [r6, #12]
 8009278:	061a      	lsls	r2, r3, #24
 800927a:	d410      	bmi.n	800929e <__swhatbuf_r+0x3e>
 800927c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009280:	e00e      	b.n	80092a0 <__swhatbuf_r+0x40>
 8009282:	466a      	mov	r2, sp
 8009284:	f000 f8b2 	bl	80093ec <_fstat_r>
 8009288:	2800      	cmp	r0, #0
 800928a:	dbf2      	blt.n	8009272 <__swhatbuf_r+0x12>
 800928c:	9a01      	ldr	r2, [sp, #4]
 800928e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009292:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009296:	425a      	negs	r2, r3
 8009298:	415a      	adcs	r2, r3
 800929a:	602a      	str	r2, [r5, #0]
 800929c:	e7ee      	b.n	800927c <__swhatbuf_r+0x1c>
 800929e:	2340      	movs	r3, #64	; 0x40
 80092a0:	2000      	movs	r0, #0
 80092a2:	6023      	str	r3, [r4, #0]
 80092a4:	b016      	add	sp, #88	; 0x58
 80092a6:	bd70      	pop	{r4, r5, r6, pc}

080092a8 <__smakebuf_r>:
 80092a8:	898b      	ldrh	r3, [r1, #12]
 80092aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092ac:	079d      	lsls	r5, r3, #30
 80092ae:	4606      	mov	r6, r0
 80092b0:	460c      	mov	r4, r1
 80092b2:	d507      	bpl.n	80092c4 <__smakebuf_r+0x1c>
 80092b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092b8:	6023      	str	r3, [r4, #0]
 80092ba:	6123      	str	r3, [r4, #16]
 80092bc:	2301      	movs	r3, #1
 80092be:	6163      	str	r3, [r4, #20]
 80092c0:	b002      	add	sp, #8
 80092c2:	bd70      	pop	{r4, r5, r6, pc}
 80092c4:	ab01      	add	r3, sp, #4
 80092c6:	466a      	mov	r2, sp
 80092c8:	f7ff ffca 	bl	8009260 <__swhatbuf_r>
 80092cc:	9900      	ldr	r1, [sp, #0]
 80092ce:	4605      	mov	r5, r0
 80092d0:	4630      	mov	r0, r6
 80092d2:	f7ff faab 	bl	800882c <_malloc_r>
 80092d6:	b948      	cbnz	r0, 80092ec <__smakebuf_r+0x44>
 80092d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092dc:	059a      	lsls	r2, r3, #22
 80092de:	d4ef      	bmi.n	80092c0 <__smakebuf_r+0x18>
 80092e0:	f023 0303 	bic.w	r3, r3, #3
 80092e4:	f043 0302 	orr.w	r3, r3, #2
 80092e8:	81a3      	strh	r3, [r4, #12]
 80092ea:	e7e3      	b.n	80092b4 <__smakebuf_r+0xc>
 80092ec:	4b0d      	ldr	r3, [pc, #52]	; (8009324 <__smakebuf_r+0x7c>)
 80092ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80092f0:	89a3      	ldrh	r3, [r4, #12]
 80092f2:	6020      	str	r0, [r4, #0]
 80092f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092f8:	81a3      	strh	r3, [r4, #12]
 80092fa:	9b00      	ldr	r3, [sp, #0]
 80092fc:	6163      	str	r3, [r4, #20]
 80092fe:	9b01      	ldr	r3, [sp, #4]
 8009300:	6120      	str	r0, [r4, #16]
 8009302:	b15b      	cbz	r3, 800931c <__smakebuf_r+0x74>
 8009304:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009308:	4630      	mov	r0, r6
 800930a:	f000 f881 	bl	8009410 <_isatty_r>
 800930e:	b128      	cbz	r0, 800931c <__smakebuf_r+0x74>
 8009310:	89a3      	ldrh	r3, [r4, #12]
 8009312:	f023 0303 	bic.w	r3, r3, #3
 8009316:	f043 0301 	orr.w	r3, r3, #1
 800931a:	81a3      	strh	r3, [r4, #12]
 800931c:	89a3      	ldrh	r3, [r4, #12]
 800931e:	431d      	orrs	r5, r3
 8009320:	81a5      	strh	r5, [r4, #12]
 8009322:	e7cd      	b.n	80092c0 <__smakebuf_r+0x18>
 8009324:	080086e1 	.word	0x080086e1

08009328 <__malloc_lock>:
 8009328:	4770      	bx	lr

0800932a <__malloc_unlock>:
 800932a:	4770      	bx	lr

0800932c <_free_r>:
 800932c:	b538      	push	{r3, r4, r5, lr}
 800932e:	4605      	mov	r5, r0
 8009330:	2900      	cmp	r1, #0
 8009332:	d045      	beq.n	80093c0 <_free_r+0x94>
 8009334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009338:	1f0c      	subs	r4, r1, #4
 800933a:	2b00      	cmp	r3, #0
 800933c:	bfb8      	it	lt
 800933e:	18e4      	addlt	r4, r4, r3
 8009340:	f7ff fff2 	bl	8009328 <__malloc_lock>
 8009344:	4a1f      	ldr	r2, [pc, #124]	; (80093c4 <_free_r+0x98>)
 8009346:	6813      	ldr	r3, [r2, #0]
 8009348:	4610      	mov	r0, r2
 800934a:	b933      	cbnz	r3, 800935a <_free_r+0x2e>
 800934c:	6063      	str	r3, [r4, #4]
 800934e:	6014      	str	r4, [r2, #0]
 8009350:	4628      	mov	r0, r5
 8009352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009356:	f7ff bfe8 	b.w	800932a <__malloc_unlock>
 800935a:	42a3      	cmp	r3, r4
 800935c:	d90c      	bls.n	8009378 <_free_r+0x4c>
 800935e:	6821      	ldr	r1, [r4, #0]
 8009360:	1862      	adds	r2, r4, r1
 8009362:	4293      	cmp	r3, r2
 8009364:	bf04      	itt	eq
 8009366:	681a      	ldreq	r2, [r3, #0]
 8009368:	685b      	ldreq	r3, [r3, #4]
 800936a:	6063      	str	r3, [r4, #4]
 800936c:	bf04      	itt	eq
 800936e:	1852      	addeq	r2, r2, r1
 8009370:	6022      	streq	r2, [r4, #0]
 8009372:	6004      	str	r4, [r0, #0]
 8009374:	e7ec      	b.n	8009350 <_free_r+0x24>
 8009376:	4613      	mov	r3, r2
 8009378:	685a      	ldr	r2, [r3, #4]
 800937a:	b10a      	cbz	r2, 8009380 <_free_r+0x54>
 800937c:	42a2      	cmp	r2, r4
 800937e:	d9fa      	bls.n	8009376 <_free_r+0x4a>
 8009380:	6819      	ldr	r1, [r3, #0]
 8009382:	1858      	adds	r0, r3, r1
 8009384:	42a0      	cmp	r0, r4
 8009386:	d10b      	bne.n	80093a0 <_free_r+0x74>
 8009388:	6820      	ldr	r0, [r4, #0]
 800938a:	4401      	add	r1, r0
 800938c:	1858      	adds	r0, r3, r1
 800938e:	4282      	cmp	r2, r0
 8009390:	6019      	str	r1, [r3, #0]
 8009392:	d1dd      	bne.n	8009350 <_free_r+0x24>
 8009394:	6810      	ldr	r0, [r2, #0]
 8009396:	6852      	ldr	r2, [r2, #4]
 8009398:	605a      	str	r2, [r3, #4]
 800939a:	4401      	add	r1, r0
 800939c:	6019      	str	r1, [r3, #0]
 800939e:	e7d7      	b.n	8009350 <_free_r+0x24>
 80093a0:	d902      	bls.n	80093a8 <_free_r+0x7c>
 80093a2:	230c      	movs	r3, #12
 80093a4:	602b      	str	r3, [r5, #0]
 80093a6:	e7d3      	b.n	8009350 <_free_r+0x24>
 80093a8:	6820      	ldr	r0, [r4, #0]
 80093aa:	1821      	adds	r1, r4, r0
 80093ac:	428a      	cmp	r2, r1
 80093ae:	bf04      	itt	eq
 80093b0:	6811      	ldreq	r1, [r2, #0]
 80093b2:	6852      	ldreq	r2, [r2, #4]
 80093b4:	6062      	str	r2, [r4, #4]
 80093b6:	bf04      	itt	eq
 80093b8:	1809      	addeq	r1, r1, r0
 80093ba:	6021      	streq	r1, [r4, #0]
 80093bc:	605c      	str	r4, [r3, #4]
 80093be:	e7c7      	b.n	8009350 <_free_r+0x24>
 80093c0:	bd38      	pop	{r3, r4, r5, pc}
 80093c2:	bf00      	nop
 80093c4:	2000499c 	.word	0x2000499c

080093c8 <_read_r>:
 80093c8:	b538      	push	{r3, r4, r5, lr}
 80093ca:	4c07      	ldr	r4, [pc, #28]	; (80093e8 <_read_r+0x20>)
 80093cc:	4605      	mov	r5, r0
 80093ce:	4608      	mov	r0, r1
 80093d0:	4611      	mov	r1, r2
 80093d2:	2200      	movs	r2, #0
 80093d4:	6022      	str	r2, [r4, #0]
 80093d6:	461a      	mov	r2, r3
 80093d8:	f7f8 f804 	bl	80013e4 <_read>
 80093dc:	1c43      	adds	r3, r0, #1
 80093de:	d102      	bne.n	80093e6 <_read_r+0x1e>
 80093e0:	6823      	ldr	r3, [r4, #0]
 80093e2:	b103      	cbz	r3, 80093e6 <_read_r+0x1e>
 80093e4:	602b      	str	r3, [r5, #0]
 80093e6:	bd38      	pop	{r3, r4, r5, pc}
 80093e8:	20004f60 	.word	0x20004f60

080093ec <_fstat_r>:
 80093ec:	b538      	push	{r3, r4, r5, lr}
 80093ee:	4c07      	ldr	r4, [pc, #28]	; (800940c <_fstat_r+0x20>)
 80093f0:	2300      	movs	r3, #0
 80093f2:	4605      	mov	r5, r0
 80093f4:	4608      	mov	r0, r1
 80093f6:	4611      	mov	r1, r2
 80093f8:	6023      	str	r3, [r4, #0]
 80093fa:	f7f8 f838 	bl	800146e <_fstat>
 80093fe:	1c43      	adds	r3, r0, #1
 8009400:	d102      	bne.n	8009408 <_fstat_r+0x1c>
 8009402:	6823      	ldr	r3, [r4, #0]
 8009404:	b103      	cbz	r3, 8009408 <_fstat_r+0x1c>
 8009406:	602b      	str	r3, [r5, #0]
 8009408:	bd38      	pop	{r3, r4, r5, pc}
 800940a:	bf00      	nop
 800940c:	20004f60 	.word	0x20004f60

08009410 <_isatty_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	4c06      	ldr	r4, [pc, #24]	; (800942c <_isatty_r+0x1c>)
 8009414:	2300      	movs	r3, #0
 8009416:	4605      	mov	r5, r0
 8009418:	4608      	mov	r0, r1
 800941a:	6023      	str	r3, [r4, #0]
 800941c:	f7f8 f837 	bl	800148e <_isatty>
 8009420:	1c43      	adds	r3, r0, #1
 8009422:	d102      	bne.n	800942a <_isatty_r+0x1a>
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	b103      	cbz	r3, 800942a <_isatty_r+0x1a>
 8009428:	602b      	str	r3, [r5, #0]
 800942a:	bd38      	pop	{r3, r4, r5, pc}
 800942c:	20004f60 	.word	0x20004f60

08009430 <_init>:
 8009430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009432:	bf00      	nop
 8009434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009436:	bc08      	pop	{r3}
 8009438:	469e      	mov	lr, r3
 800943a:	4770      	bx	lr

0800943c <_fini>:
 800943c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800943e:	bf00      	nop
 8009440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009442:	bc08      	pop	{r3}
 8009444:	469e      	mov	lr, r3
 8009446:	4770      	bx	lr
