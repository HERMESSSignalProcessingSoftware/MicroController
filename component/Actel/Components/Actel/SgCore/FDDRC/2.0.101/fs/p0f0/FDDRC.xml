<spirit:component xmlns:actel-cc="http://www.actel.com/XMLSchema/CoreConsole" xmlns:spirit="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.1 http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.1/component.xsd">
  <spirit:vendor>Actel</spirit:vendor>
  <spirit:library>SgCore</spirit:library>
  <spirit:name>FDDRC</spirit:name>
  <spirit:version>2.0.101</spirit:version>
  <spirit:busInterfaces>
  <spirit:busInterface>
    <spirit:name>FDDR_PADS</spirit:name>
    <spirit:busType spirit:vendor="Actel" spirit:library="GROUP" spirit:name="GROUP" spirit:version="0"/>
    <spirit:master></spirit:master>
    <spirit:signalMap>
      <spirit:signalName>
        <spirit:componentSignalName>FDDR_CAS_N</spirit:componentSignalName><spirit:busSignalName>FDDR_CAS_N</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>FDDR_CKE</spirit:componentSignalName><spirit:busSignalName>FDDR_CKE</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>FDDR_CLK</spirit:componentSignalName><spirit:busSignalName>FDDR_CLK</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>FDDR_CLK_N</spirit:componentSignalName><spirit:busSignalName>FDDR_CLK_N</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>FDDR_CS_N</spirit:componentSignalName><spirit:busSignalName>FDDR_CS_N</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>FDDR_ODT</spirit:componentSignalName><spirit:busSignalName>FDDR_ODT</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>FDDR_RAS_N</spirit:componentSignalName><spirit:busSignalName>FDDR_RAS_N</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>FDDR_RESET_N</spirit:componentSignalName><spirit:busSignalName>FDDR_RESET_N</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>FDDR_WE_N</spirit:componentSignalName><spirit:busSignalName>FDDR_WE_N</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>FDDR_ADDR</spirit:componentSignalName><spirit:busSignalName>FDDR_ADDR</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>FDDR_BA</spirit:componentSignalName><spirit:busSignalName>FDDR_BA</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>FDDR_DM_RDQS</spirit:componentSignalName><spirit:busSignalName>FDDR_DM_RDQS</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>FDDR_DM_RDQS_ECC</spirit:componentSignalName><spirit:busSignalName>FDDR_DM_RDQS_ECC</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>FDDR_DQS</spirit:componentSignalName><spirit:busSignalName>FDDR_DQS</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>FDDR_DQS_N</spirit:componentSignalName><spirit:busSignalName>FDDR_DQS_N</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>FDDR_DQS_ECC</spirit:componentSignalName><spirit:busSignalName>FDDR_DQS_ECC</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>FDDR_DQS_ECC_N</spirit:componentSignalName><spirit:busSignalName>FDDR_DQS_ECC_N</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>FDDR_DQ</spirit:componentSignalName><spirit:busSignalName>FDDR_DQ</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>FDDR_DQ_ECC</spirit:componentSignalName><spirit:busSignalName>FDDR_DQ_ECC</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>FDDR_DQS_TMATCH_0_OUT</spirit:componentSignalName><spirit:busSignalName>FDDR_DQS_TMATCH_0_OUT</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>FDDR_DQS_TMATCH_1_OUT</spirit:componentSignalName><spirit:busSignalName>FDDR_DQS_TMATCH_1_OUT</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>FDDR_DQS_TMATCH_0_IN</spirit:componentSignalName><spirit:busSignalName>FDDR_DQS_TMATCH_0_IN</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>FDDR_DQS_TMATCH_1_IN</spirit:componentSignalName><spirit:busSignalName>FDDR_DQS_TMATCH_1_IN</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>FDDR_DQS_TMATCH_ECC_OUT</spirit:componentSignalName><spirit:busSignalName>FDDR_DQS_TMATCH_ECC_OUT</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>FDDR_DQS_TMATCH_ECC_IN</spirit:componentSignalName><spirit:busSignalName>FDDR_DQS_TMATCH_ECC_IN</spirit:busSignalName></spirit:signalName></spirit:signalMap>
    <spirit:vendorExtensions>
      <actel-cc:description>FDDR_PADS</actel-cc:description></spirit:vendorExtensions>
  </spirit:busInterface>
  <spirit:busInterface>
    <spirit:name>APB_SLAVE</spirit:name>
    <spirit:busType spirit:vendor="AMBA" spirit:library="AMBA2" spirit:name="APB" spirit:version="r0p0"/>
    <spirit:slave></spirit:slave>
    <spirit:signalMap>
      <spirit:signalName>
        <spirit:componentSignalName>APB_S_PENABLE</spirit:componentSignalName><spirit:busSignalName>PENABLE</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>APB_S_PSEL</spirit:componentSignalName><spirit:busSignalName>PSELx</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>APB_S_PWRITE</spirit:componentSignalName><spirit:busSignalName>PWRITE</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>APB_S_PADDR</spirit:componentSignalName><spirit:busSignalName>PADDR</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>APB_S_PWDATA</spirit:componentSignalName><spirit:busSignalName>PWDATA</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>APB_S_PREADY</spirit:componentSignalName><spirit:busSignalName>PREADY</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>APB_S_PSLVERR</spirit:componentSignalName><spirit:busSignalName>PSLVERR</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>APB_S_PRDATA</spirit:componentSignalName><spirit:busSignalName>PRDATA</spirit:busSignalName></spirit:signalName></spirit:signalMap>
  </spirit:busInterface>
  <spirit:busInterface>
    <spirit:name>AXI_SLAVE</spirit:name>
    <spirit:busType spirit:vendor="AMBA" spirit:library="AMBA3" spirit:name="AXI" spirit:version="r1p0_5"/>
    <spirit:slave></spirit:slave>
    <spirit:signalMap>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_AWREADY</spirit:componentSignalName><spirit:busSignalName>AWREADY</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_WREADY</spirit:componentSignalName><spirit:busSignalName>WREADY</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_BID</spirit:componentSignalName><spirit:busSignalName>BID</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_BRESP</spirit:componentSignalName><spirit:busSignalName>BRESP</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_BVALID</spirit:componentSignalName><spirit:busSignalName>BVALID</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_ARREADY</spirit:componentSignalName><spirit:busSignalName>ARREADY</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_RID</spirit:componentSignalName><spirit:busSignalName>RID</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_RRESP</spirit:componentSignalName><spirit:busSignalName>RRESP</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_RDATA</spirit:componentSignalName><spirit:busSignalName>RDATA</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_RLAST</spirit:componentSignalName><spirit:busSignalName>RLAST</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_RVALID</spirit:componentSignalName><spirit:busSignalName>RVALID</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_AWID</spirit:componentSignalName><spirit:busSignalName>AWID</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_AWADDR</spirit:componentSignalName><spirit:busSignalName>AWADDR</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_AWLEN</spirit:componentSignalName><spirit:busSignalName>AWLEN</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_AWSIZE</spirit:componentSignalName><spirit:busSignalName>AWSIZE</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_AWBURST</spirit:componentSignalName><spirit:busSignalName>AWBURST</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_AWLOCK</spirit:componentSignalName><spirit:busSignalName>AWLOCK</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_AWVALID</spirit:componentSignalName><spirit:busSignalName>AWVALID</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_WID</spirit:componentSignalName><spirit:busSignalName>WID</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_WDATA</spirit:componentSignalName><spirit:busSignalName>WDATA</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_WSTRB</spirit:componentSignalName><spirit:busSignalName>WSTRB</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_WLAST</spirit:componentSignalName><spirit:busSignalName>WLAST</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_WVALID</spirit:componentSignalName><spirit:busSignalName>WVALID</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_BREADY</spirit:componentSignalName><spirit:busSignalName>BREADY</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_ARID</spirit:componentSignalName><spirit:busSignalName>ARID</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_ARADDR</spirit:componentSignalName><spirit:busSignalName>ARADDR</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_ARLEN</spirit:componentSignalName><spirit:busSignalName>ARLEN</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_ARSIZE</spirit:componentSignalName><spirit:busSignalName>ARSIZE</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_ARBURST</spirit:componentSignalName><spirit:busSignalName>ARBURST</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_ARLOCK</spirit:componentSignalName><spirit:busSignalName>ARLOCK</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_ARVALID</spirit:componentSignalName><spirit:busSignalName>ARVALID</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AXI_S_RREADY</spirit:componentSignalName><spirit:busSignalName>RREADY</spirit:busSignalName></spirit:signalName></spirit:signalMap>
    <spirit:vendorExtensions>
      <actel-cc:used>
        <actel-cc:logicEquation>
          <actel-cc:logicTerm spirit:referenceId="MODE" actel-cc:termValue="MODE_AXI64"></actel-cc:logicTerm></actel-cc:logicEquation></actel-cc:used>
      <actel-cc:export spirit:configGroups="export" spirit:prompt="AXI_SLAVE" spirit:resolve="user">false</actel-cc:export></spirit:vendorExtensions>
  </spirit:busInterface>
  <spirit:busInterface>
    <spirit:name>AHB0_SLAVE</spirit:name>
    <spirit:busType spirit:vendor="AMBA" spirit:library="AMBA2" spirit:name="AHB" spirit:version="r0p0"/>
    <spirit:slave></spirit:slave>
    <spirit:signalMap>
      <spirit:signalName>
        <spirit:componentSignalName>AHB0_S_HREADYOUT</spirit:componentSignalName><spirit:busSignalName>HREADYOUT</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AHB0_S_HRESP</spirit:componentSignalName><spirit:busSignalName>HRESP</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AHB0_S_HRDATA</spirit:componentSignalName><spirit:busSignalName>HRDATA</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AHB0_S_HSEL</spirit:componentSignalName><spirit:busSignalName>HSELx</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AHB0_S_HADDR</spirit:componentSignalName><spirit:busSignalName>HADDR</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AHB0_S_HBURST</spirit:componentSignalName><spirit:busSignalName>HBURST</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AHB0_S_HSIZE</spirit:componentSignalName><spirit:busSignalName>HSIZE</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AHB0_S_HTRANS</spirit:componentSignalName><spirit:busSignalName>HTRANS</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AHB0_S_HMASTLOCK</spirit:componentSignalName><spirit:busSignalName>HMASTLOCK</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AHB0_S_HWRITE</spirit:componentSignalName><spirit:busSignalName>HWRITE</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AHB0_S_HREADY</spirit:componentSignalName><spirit:busSignalName>HREADY</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AHB0_S_HWDATA</spirit:componentSignalName><spirit:busSignalName>HWDATA</spirit:busSignalName></spirit:signalName></spirit:signalMap>
    <spirit:vendorExtensions>
      <actel-cc:used>
        <actel-cc:logicEquation>
          <actel-cc:logicTerm spirit:referenceId="MODE" actel-cc:operation="notEqual" actel-cc:termValue="MODE_AXI64"></actel-cc:logicTerm></actel-cc:logicEquation></actel-cc:used>
      <actel-cc:export spirit:configGroups="export" spirit:prompt="AHB0_SLAVE" spirit:resolve="user">false</actel-cc:export></spirit:vendorExtensions>
  </spirit:busInterface>
  <spirit:busInterface>
    <spirit:name>AHB1_SLAVE</spirit:name>
    <spirit:busType spirit:vendor="AMBA" spirit:library="AMBA2" spirit:name="AHB" spirit:version="r0p0"/>
    <spirit:slave></spirit:slave>
    <spirit:signalMap>
      <spirit:signalName>
        <spirit:componentSignalName>AHB1_S_HREADYOUT</spirit:componentSignalName><spirit:busSignalName>HREADYOUT</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AHB1_S_HRESP</spirit:componentSignalName><spirit:busSignalName>HRESP</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AHB1_S_HRDATA</spirit:componentSignalName><spirit:busSignalName>HRDATA</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AHB1_S_HREADY</spirit:componentSignalName><spirit:busSignalName>HREADY</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AHB1_S_HWDATA</spirit:componentSignalName><spirit:busSignalName>HWDATA</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AHB1_S_HSEL</spirit:componentSignalName><spirit:busSignalName>HSELx</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AHB1_S_HADDR</spirit:componentSignalName><spirit:busSignalName>HADDR</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AHB1_S_HBURST</spirit:componentSignalName><spirit:busSignalName>HBURST</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AHB1_S_HSIZE</spirit:componentSignalName><spirit:busSignalName>HSIZE</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AHB1_S_HTRANS</spirit:componentSignalName><spirit:busSignalName>HTRANS</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AHB1_S_HMASTLOCK</spirit:componentSignalName><spirit:busSignalName>HMASTLOCK</spirit:busSignalName></spirit:signalName>
      <spirit:signalName>
        <spirit:componentSignalName>AHB1_S_HWRITE</spirit:componentSignalName><spirit:busSignalName>HWRITE</spirit:busSignalName></spirit:signalName></spirit:signalMap>
    <spirit:vendorExtensions>
      <actel-cc:used>
        <actel-cc:logicEquation>
          <actel-cc:logicTerm spirit:referenceId="MODE" actel-cc:termValue="MODE_AHB0_AHB1"></actel-cc:logicTerm></actel-cc:logicEquation></actel-cc:used>
      <actel-cc:export spirit:configGroups="export" spirit:prompt="AHB1_SLAVE" spirit:resolve="user">false</actel-cc:export></spirit:vendorExtensions>
  </spirit:busInterface>
  </spirit:busInterfaces>
  <spirit:memoryMaps>
  <spirit:memoryMap>
    <spirit:name>internal_registers</spirit:name>
    <spirit:addressBlock>
      <spirit:baseAddress>0x0</spirit:baseAddress>
      <spirit:range>0x200</spirit:range>
      <spirit:width>16</spirit:width>
      <spirit:register>
        <spirit:name>DDRC_DYN_SOFT_RESET_CR</spirit:name>
        <spirit:addressOffset>0x0</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x4</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_SOFT_RSTB</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> This is a Soft Reset. 0- Puts the Controller into reset 1- Takes the Controller out of Reset Controller should be taken out of reset only when all other registers have been programmed. Asserting this bit does NOT reset all the APB configuration registers, once the soft reset bit is asserted the APB register should be modified as required. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>RESET_APB_REG</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Full Soft Reset If this bit set when the soft reset bit is written as '1' then all APB registers reset to the power up state. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>AXIRESET</spirit:name>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> It will set when main AXI reset signal is asserted. Reads and Writes to the Dynamic registers should not be carried out. This is Read only bit. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>29</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Reset Register. </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_RESERVED0</spirit:name>
        <spirit:addressOffset>0x4</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
        <spirit:description> DDRC Reserved Register. </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_DYN_REFRESH_1_CR</spirit:name>
        <spirit:addressOffset>0x8</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x1188</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_REFRESH_TO_X32</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>5</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Speculative refresh </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_SELFREF_EN</spirit:name>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description>If 1, then the controller puts the DRAM into self refresh when the transaction store is empty. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_REFRESH_UPDATE_LEVEL</spirit:name>
            <spirit:bitOffset>6</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Toggle this signal to indicate that the refresh register(s) have been updated.  The value is automatically updated when existing soft reset. So it does not need to be toggled initially.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_T_RFC_MIN</spirit:name>
            <spirit:bitOffset>7</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> tRFC (min) - Minimum time from refresh to refresh or activate (spec: 75ns to 195ns).
Unit: clocks.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>15</spirit:bitOffset>
            <spirit:bitWidth>17</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Refresh Control Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_DYN_REFRESH_2_CR</spirit:name>
        <spirit:addressOffset>0xc</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x290</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_REFRESH_BURST</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>3</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description>The programmed value plus one is the number of refresh timeouts that is allowed to accumulate before traffic is blocked and the refreshes are forced to execute.  Closing pages to perform a refresh is a one-time penalty that must be paid for each group of refreshes; therefore, performing refreshes in a burst reduces the per-refresh penalty of these page closings. Higher numbers for burst_of_N_refresh slightly increases utilization; lower numbers decreases the worst-case latency associated with refreshes.
0x0: Single refresh
0x1: Burst-of-2
0x7: Burst-of-8 refresh.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_T_RFC_NOM_X32</spirit:name>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>12</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> tREFI - Average time between refreshes (specifications: 7.8us).
Unit: in multiples of 32 clocks.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>15</spirit:bitOffset>
            <spirit:bitWidth>17</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Refresh Control Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_DYN_POWERDOWN_CR</spirit:name>
        <spirit:addressOffset>0x10</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x2</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_DEEPPOWERDOWN_EN</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 1 - Controller puts the DRAM into Deep Power down mode when the transaction store is empty.  0 - Brings Controller out of Deep Power down mode Present only in designs that has Mobile support. FOR PERFORMANCE ONLY.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_POWERDOWN_EN</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> If true then the controller goes into power down after a programmable number of cycles (REG_DDRC_POWERDOWN_TO_X32).  This register bit may be reprogrammed during the course of normal operation.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>30</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Power Down Control Register. </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_DYN_DEBUG_CR</spirit:name>
        <spirit:addressOffset>0x14</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_DIS_DQ</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> When 1, DDRC will not de-queue any transactions from the CAM.  Bypass will also be disabled. All transactions are queued in the CAM. This is for debug only; no reads or writes are issued to DRAM as long as this is asserted. This bit is intended to be switched on-the-fly.  FOR DEBUG ONLY.   </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>31</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC debug register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_MODE_CR</spirit:name>
        <spirit:addressOffset>0x18</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_DATA_BUS_WIDTH</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description>00: Full DQ bus width to DRAM.
01: Half DQ bus width to DRAM.
10: Quarter DQ bus width to DRAM.
11: Reserved.
Note that the Half bus width modes are only supported when the DRAM bus width is a multiple of 16. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_ECC_MODE</spirit:name>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>3</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> DRAM ECC Mode 000 - No ECC 101 - ECC Enabled  All other selections are reserved </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_TEST_MODE</spirit:name>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 1 - Controller is in Test Mode 0 - Controller is in Normal Mode  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_SDRAM</spirit:name>
            <spirit:bitOffset>6</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 1- SDRAM mode 0 - Non-SDRAM mode Only present in designs that support SDRAM and/or mSDR device(s) </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_MOBILE</spirit:name>
            <spirit:bitOffset>7</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description>1: mobile/LPDDR DRAM device in use
0: non-mobile DRAM device in use </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_DDR3</spirit:name>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description>1: DDR3 operating mode
0: DDR2 operating mode  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>9</spirit:bitOffset>
            <spirit:bitWidth>23</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Mode Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_ADDR_MAP_BANK_CR</spirit:name>
        <spirit:addressOffset>0x1c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_ADDRMAP_BANK_B2</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Selects the address bits used as bank address bit 2. Valid Range: 0 to 14 and 15 Internal Base: 4  The selected address bit is determined by adding the Internal Base to the value of this field. If set to 15, bank address bit 2 is set to 0.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_ADDRMAP_BANK_B1</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Selects the address bits used as bank address bit 1. Valid Range: 0 to 14  Internal Base: 3  The selected address bit for each of the bank address bits is determined by adding the Internal Base to the value of this field. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_ADDRMAP_BANK_B0</spirit:name>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Selects the address bits used as bank address bit 0. Valid Range: 0 to 14  Internal Base: 2  The selected address bit for each of the bank address bits is determined by adding the Internal Base to the value of this field.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>12</spirit:bitOffset>
            <spirit:bitWidth>20</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Bank Address Map Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_ECC_DATA_MASK_CR</spirit:name>
        <spirit:addressOffset>0x20</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>CO_WU_RXDATA_MASK_INT_ECC</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Mask to be used during production test. Valid when CO_WU_RXDATA_VALID is 1 Present only in designs that support ECC  Test_mode: The value on this bus is driven on the ECC mask bits going to the DRAM bus Internal ECC mode (if supported): Unused </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>CO_WU_RXDATA_INT_ECC</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Internal ECC / Production test data. Valid when co_wu_rxdata_valid is 1 Present only in designs that support ECC  Test_mode: The data on this bus is driven on the ECC bits going to the DRAM bus  Internal ECC mode (if supported): This contains the SECDED ECC associated with the CO_WU_RXDATA bus. Data on this bus is presented to the Internal ECC decode logic. If both test_mode and Internal_ECC are ON, then test_mode takes preference over Internal ECC.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>9</spirit:bitOffset>
            <spirit:bitWidth>23</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC ECC Test Data Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_ADDR_MAP_COL_1_CR</spirit:name>
        <spirit:addressOffset>0x24</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_ADDRMAP_COL_B7</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Full bus width mode: Selects the address bit used as column address bit 8. Half bus width mode: Selects the address bit used as column address bit 9. Quarter bus width mode: Selects the address bit used as column address bit 11. Valid Range: 0 to 7, and 15  Internal Base: 7 The selected address bit is determined by adding the Internal Base to the value of this field. If set to 15, column address bit 9 is set to 0.  Note: Per JEDEC DDR2 specific, column address bit 10 is reserved for indicating auto-precharge, and hence no source address bit can be mapped to column address bit 10.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_ADDRMAP_COL_B4</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Full bus width mode: Selects the address bits used as column address bits 5. Half bus width mode: Selects the address bits used as column address bits 6.  Quarter bus width mode: Selects the address bit used as column address bits 7. Valid Range: 0 to 7 Internal Base: 4 The selected address bit for each of the column address bits is determined by adding the Internal Base to the value of this field. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_ADDRMAP_COL_B3</spirit:name>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Full bus width mode: Selects the address bit used as column address bit 4.  Half bus width mode: Selects the address bit used as column address bit 5.  Quarter bus width mode: Selects the address bit used as column address bit 6. Valid Range: 0 to 7 Internal Base: 3  The selected address bit is  determined by adding the Internal Base to the value of this field </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_ADDRMAP_COL_B2</spirit:name>
            <spirit:bitOffset>12</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Full bus width mode: Selects the address bit used as column address bit 3. Half bus width mode: Selects the address bit used as column address bit 4. Quarter bus width mode: Selects the address bit used as column address bit 5. Valid Range: 0 to 7  Internal Base: 2  The selected address bit is determined by adding the Internal Base to the value of this field.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Column Address Map Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_ADDR_MAP_COL_2_CR</spirit:name>
        <spirit:addressOffset>0x28</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_ADDRMAP_COL_B11</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Full bus width mode: Selects the address bit used as column address bit 13. Half bus width mode: Unused. To make it unused, this should be tied to 0xF Quarter bus width mode: Unused. To make it unused, this should be tied to 0xF Valid Range: 0 to 7, and 15  Internal Base: 11 The selected address bit is determined by adding the Internal Base to the value of this field. If set to 15, column address bit 11 is set to 0.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_ADDRMAP_COL_B10</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Full bus width mode: Selects the address bits used as column address bits 12. Half bus width mode: Selects the address bits used as column address bits 13. Quarter bus width mode: Unused. Should be set to 15. Valid Range: 0 to 7, and 15 Internal Base: 10 The selected address bit is determined by adding the Internal Base to the value of this field. If set to 15, column address bit 10 is set to 0. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_ADDRMAP_COL_B9</spirit:name>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Full bus width mode: Selects the address bit used as column address bit 11.  Half bus width mode: Selects the address bit used as column address bit 12.  Quarter bus width mode: Selects the address bit used as column address bit 13. Valid Range: 0 to 7, and 15 Internal Base: 9 The selected address bit is determined by adding the Internal Base to the value of this field. If set to 15, column address bit 9 is set to 0. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_ADDRMAP_COL_B8</spirit:name>
            <spirit:bitOffset>12</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Full bus width mode: Selects the address bit used as column address bit 9. Half bus width mode: Selects the address bit used as column address bit 11. Quarter bus width mode: Selects the address bit used as column address bit 12. Valid Range: 0 to 7, and 15 Internal Base: 8 The selected address bit is determined by adding the Internal Base to the value of this field. If set to 15, column address bit 9 is set to 0.  Note: Per JEDEC DDR2 specific, column address bit 10 is reserved for indicating auto-precharge, and hence no source address bit can be mapped to column address bit 10. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Column Address Map Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_ADDR_MAP_COL_3_CR</spirit:name>
        <spirit:addressOffset>0x78</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_DIS_SCRUB</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> This feature is not supported. Only default value works.  1 - Disable ECC scrubs  0 - Enable ECC scrubs  Valid only when REG_DDRC_ECC_MODE = 100 or 101. Only present in designs that support ECC. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_DIS_COLLISION_PAGE_OPT</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> When this is set to '0', auto-precharge is disabled for the flushed command in a collision case. Collision cases are write followed by read to same address, read followed by write to same address, or write followed by write to same address with REG_DDRC_DIS_WC bit = 1 (where same address comparisons exclude the two address bits representing critical word).  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_DIS_PRE_BYPASS</spirit:name>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Only present in designs supporting precharge bypass.  When 1, disable bypass path for high priority precharges  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_DIS_RD_BYPASS</spirit:name>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Only present in designs supporting read bypass.  When 1, disable bypass path for high priority read page hits. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_DIS_ACT_BYPASS</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Only present in designs supporting activate bypass.  When 1, disable bypass path for high priority read activates  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_DIS_WC</spirit:name>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> When 1, disable Write Combine. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved1</spirit:name>
            <spirit:bitOffset>6</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_ADDRMAP_COL_B6</spirit:name>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Full bus width mode: Selects the address bit used as column address bit 7. Half bus width mode: Selects the address bit used as column address bit 8.  Quarter bus width mode: Selects the address bit used as column address bits 9. Valid Range: 0 to 7 Internal Base: 6  The selected address bit for each of the column address bits is determined by adding the Internal Base to the value of this field. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_ADDRMAP_COL_B5</spirit:name>
            <spirit:bitOffset>12</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Full bus width mode: Selects the address bit used as column address bit 6. Half bus width mode: Selects the address bit used as column address bit 7. Quarter bus width mode: Selects the address bit used as column address bits 8. Valid Range: 0 to 7  Internal Base: 5  The selected address bit for each of the column address bits is determined by adding the Internal Base to the value of this field. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Upper byte is DDRC Column Address Map Register and lower byte control debug features </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_ADDR_MAP_ROW_1_CR</spirit:name>
        <spirit:addressOffset>0x2c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_ADDRMAP_ROW_B12</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Selects the address bit used as row address bit 12.  Valid Range: 0 to 11, and 15 Internal Base: 18 The selected address bit is determined by adding the Internal Base to the value of this field. If set to 15, row address bit 12 is set to 0.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_ADDRMAP_ROW_B2_11</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Selects the address bits used as row address bits 2 to 11.  Valid Range: 0 to 11  Internal Base:    8 for row address bit 2   9 for row address bit 3 10 for row address bit 4 ... 15 for row address bit 9 16 for row address bit 10 17  for row address bit 11 The selected address bit for each of the row address bits is determined by adding the Internal Base to the value of this field. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_ADDRMAP_ROW_B1</spirit:name>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Selects the address bits used as row address bit 1.  Valid Range: 0 to 11 Internal Base: 7 The selected address bit for each of the row address bits is determined by adding the Internal Base to the value of this field. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_ADDRMAP_ROW_B0</spirit:name>
            <spirit:bitOffset>12</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Selects the address bits used as row address bit 0.  Valid Range: 0 to 11 Internal Base: 6 The selected address bit for each of the row address bits is determined by adding the Internal Base to the value of this field. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Row Address Map Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_ADDR_MAP_ROW_2_CR</spirit:name>
        <spirit:addressOffset>0x30</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_ADDRMAP_ROW_B15</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Selects the address bit used as row address bit 15.  Valid Range: 0 to 11, and 15 Internal Base: 21  The selected address bit is determined by adding the Internal Base to the value of this field.  If set to 15, row address bit 15 is set to 0. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_ADDRMAP_ROW_B14</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Selects the address bit used as row address bit 14.  Valid Range: 0 to 11, and 15 Internal Base: 20 The selected address bit is determined by adding the Internal Base to the value of this field.  If set to 15, row address bit 14 is set to 0. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_ADDRMAP_ROW_B13</spirit:name>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Selects the address bits used as row address bit 13.  Valid Range: 0 to 11, and 15 Internal Base: 19 The selected address bit is determined by adding the Internal Base to the value of this field.  If set to 15, row address bit 13 is set to 0.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>12</spirit:bitOffset>
            <spirit:bitWidth>20</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Row Address Map Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_INIT_1_CR</spirit:name>
        <spirit:addressOffset>0x34</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x1</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_SKIP_OCD</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> This register must be kept at 1.   1 - Indicates the controller to skip OCD adjustment step during   DDR2 initialization.  OCD_Default and OCD_Exit are performed instead.  0 - Not supported. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_FINAL_WAIT_X32</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>7</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Cycles to wait after completing the DRAM initialization sequence before starting the dynamic scheduler.  Units are in counts of a global timer that pulses every 32 clock cycles.  There is known specific requirement for this; it may be set to zero.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_PRE_OCD_X32</spirit:name>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Wait period before driving the OCD Complete command to DRAM.  Units are in counts of a global timer that pulses every 32 clock cycles.  There is no known specific requirement for this. It may be set to zero.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>12</spirit:bitOffset>
            <spirit:bitWidth>20</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Initialization Control Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_CKE_RSTN_CYCLES_1_CR</spirit:name>
        <spirit:addressOffset>0x38</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_DRAM_RSTN_X1024</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Number of cycles to assert DRAM reset signal during init sequence.  This is only present for implementations supporting DDR3 devices. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_PRE_CKE_X1024</spirit:name>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Lower 8 bits of REG_DDRC_PRE_CKE_X1024 Cycles to wait after reset before driving CKE high to start the DRAM initialization sequence.  Units: 1024 clock cycles.  DDR2 Specifications typically require this to be programmed for a delay of &gt;= 200 us. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Initialization Control Register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_CKE_RSTN_CYCLES_2_CR</spirit:name>
        <spirit:addressOffset>0x3c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_PRE_CKE_X1024</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Upper 2 bits of REG_DDRC_PRE_CKE_X1024 Cycles to wait after reset before driving CKE high to start the DRAM initialization sequence.  Units: 1024 clock cycles.  DDR2 Specifications typically require this to be programmed for a delay of &gt;= 200 us. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_POST_CKE_X1024</spirit:name>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>10</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Cycles to wait after driving CKE high to start the DRAM initialization sequence.  Units: 1024 clocks.  DDR - Typically require a 400 ns delay, requiring this value to be programmed to 2 at all clock speeds.  SDR - Typically require this to be programmed for a delay of 100us to 200us. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Initialization Control Register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_INIT_MR_CR</spirit:name>
        <spirit:addressOffset>0x40</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x95a</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_MR</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Value to be loaded into the DRAM Mode register. Bit 8 is for DLL and the setting here is ignored. The controller sets appropriately. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC  MR Initialization Register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_INIT_EMR_CR</spirit:name>
        <spirit:addressOffset>0x44</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x402</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_EMR</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Value to be loaded into DRAM EMR registers. Bits [9:7] are for OCD and the setting in this register is ignored.  The controller sets those bits appropriately. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC  EMR Initialization Register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_INIT_EMR2_CR</spirit:name>
        <spirit:addressOffset>0x48</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_EMR2</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Value to be loaded into DRAM EMR2 registers. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC  EMR2 Initialization Register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_INIT_EMR3_CR</spirit:name>
        <spirit:addressOffset>0x4c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_EMR3</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Value to be loaded into DRAM EMR3 registers. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC  EMR3 Initialization Register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_DRAM_BANK_TIMING_PARAM_CR</spirit:name>
        <spirit:addressOffset>0x50</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_T_FAW</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>6</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> tFAW - Valid only in burst of 8 mode.  At most 4 banks must be activated in a rolling window of tFAW cycles.
Unit: clocks. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_T_RC</spirit:name>
            <spirit:bitOffset>6</spirit:bitOffset>
            <spirit:bitWidth>6</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> tRC - Minimum time between activates to same bank (spec: 65 ns  for DDR2-400 and smaller for faster parts).
Unit: clocks. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>12</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC  DRAM Bank Timing Parameter Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_DRAM_RD_WR_LATENCY_CR</spirit:name>
        <spirit:addressOffset>0x54</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_READ_LATENCY</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>5</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description>Time from read command to read data on DRAM interface.
Unit: clocks.
This signal is present for designs supporting LPDDR/LPDDR2 DRAM only. It is used to calculate when DRAM clock may be stopped. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_WRITE_LATENCY</spirit:name>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>5</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Number of clocks between the Write Command to Write Data Enable PHY. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>10</spirit:bitOffset>
            <spirit:bitWidth>22</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC  DRAM Write Latency Register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_DRAM_RD_WR_PRE_CR</spirit:name>
        <spirit:addressOffset>0x58</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_RD2PRE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>5</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> tRTP - Minimum time from read to precharge of same bank (spec: tRTP for BL=4 and tRTP+2 for BL=8. tRTP = 7.5 ns).
Unit: clocks. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_WR2PRE</spirit:name>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>5</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Min time between write and precharge to same bank  (specifications: WL + BL/2 + tWR = approximately 8 cycles + 15 ns = 14 clocks @400MHz and less for lower frequencies).
Unit: Clocks
where:  WL = write latency.  BL = burst length.
This must match the value programmed in the BL bit of the mode register to the DRAM.  tWR = write recovery time. This comes directly from the DRAM specs. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>10</spirit:bitOffset>
            <spirit:bitWidth>22</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC  DRAM Read-Write precharge Timing Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_DRAM_MR_TIMING_PARAM_CR</spirit:name>
        <spirit:addressOffset>0x5c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_T_MRD</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>3</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> tMRD - Cycles between Load Mode commands.  Not used in DDR3 mode.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_T_MOD</spirit:name>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>10</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Present for DDR3 only (replaces REG_DDRC_T_MRD functionality when used with DDR3 devices). Mode register set command update delay in number of clock cycles.   This is required to be programmed even when a design that supports DDR3 is running in ddr2 mode. (Minimum is the largest of 12 clock cycles or 15ns). </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>13</spirit:bitOffset>
            <spirit:bitWidth>19</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC  DRAM Mode Register Timing Parameter Register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_DRAM_RAS_TIMING_CR</spirit:name>
        <spirit:addressOffset>0x60</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_T_RAS_MIN</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>5</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> tRAS(min) - Minimum time between activate and precharge to the same bank(spec: 45 ns).
Unit: clocks. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_T_RAS_MAX</spirit:name>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>6</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> tRAS(max) - Maximum time between activate and precharge to same bank. Maximum time that a page can be kept open (spec: 70 us). Minimum value of this register is 1.  Zero is invalid.
Unit: Multiples of 1024 clocks. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>11</spirit:bitOffset>
            <spirit:bitWidth>21</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC  DRAM RAS Timing Parameter Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_DRAM_RD_WR_TRNARND_TIME_CR</spirit:name>
        <spirit:addressOffset>0x64</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_WR2RD</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>5</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> WL + tWTR + BL/2  Minimum time from WRITE command to READ command. Includes time for bus turnaround and recovery times and all per-bank, per- rank, and global constraints.
Unit: clocks.
Where:  WL = write latency.  BL = burst length.
This should match the value programmed in the BL bit of the mode register to the DRAM.  tWTR = internal WRITE to READ command delay. This comes directly from the DRAM specs. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_RD2WR</spirit:name>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>5</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> RL + BL/2 + 2 - WL   Min time from READ command to WRITE command. Include time for bus turnaround and all per-bank, per-rank, and global constraints.
Unit: clocks.
Where:  WL = write latency. BL = burst length.
This must match the value programmed in the BL bit of the mode register to the DRAM.  RL = read latency = CAS latency. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>10</spirit:bitOffset>
            <spirit:bitWidth>6</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC  DRAM Read Write Turn-around Timing Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_DRAM_T_PD_CR</spirit:name>
        <spirit:addressOffset>0x68</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_T_CKE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Minimum number of cycles of CKE HIGH/LOW during power down and self refresh.
Unit: clocks. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_T_XP</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>5</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> tXP: Minimum time after power down exit to any operation.
Unit: clocks. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>9</spirit:bitOffset>
            <spirit:bitWidth>23</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC  DRAM Power Down Parameter Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_DRAM_BANK_ACT_TIMING_CR</spirit:name>
        <spirit:addressOffset>0x6c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_T_RP</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> tRP - Minimum time from precharge to activate of same bank.
Unit: clocks. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_T_RRD</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>3</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> tRRD - Minimum time between activates  from bank A to bank B  (specifications: 10ns or less).
Unit: clocks. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_T_CCD</spirit:name>
            <spirit:bitOffset>7</spirit:bitOffset>
            <spirit:bitWidth>3</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> tCCD - Minimum time between two reads or two writes (from bank A to bank B) (spec: 2 cycles) is this value + 1.
Unit: clocks. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_T_RCD</spirit:name>
            <spirit:bitOffset>10</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> tRCD - Minimum time from activate to READ or WRITE command to same bank (spec: 15ns for DDR2-400 and lower for faster  devices).
Unit: clocks. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>14</spirit:bitOffset>
            <spirit:bitWidth>18</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC  DRAM Bank Activate Timing Parameter Register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_ODT_PARAM_1_CR</spirit:name>
        <spirit:addressOffset>0x70</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_RANK0_RD_ODT</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> [NUM_RANKS-1:0] -Indicates which remote odt's should be turned on during a Read to Rank 0.  Each rank has a remote ODT (in the DRAM) which can be turned on by setting the appropriate bit here.  Rank 0 is controlled by the LSB, Rank 1 is controlled by bit next to the LSB, etc.  For each rank, set its bit to 1 to enable its ODT.  [NUM_RANKS] - Uppermost bit is UNUSED </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_RANK0_WR_ODT</spirit:name>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> [NUM_RANKS-1:0] -Indicates which remote odt's should be turned on during a Write to Rank 0.  Each rank has a remote ODT (in the DRAM) which can be turned on by setting the appropriate bit here.  Rank 0 is controlled by the LSB, Rank 1 is controlled by bit next to the LSB, etc.  For each rank, set its bit to 1 to enable its ODT.  [NUM_RANKS] - Uppermost bit is UNUSED </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_WR_ODT_DELAY</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> The delay, in clock cycles, from issuing a WRITE command to setting ODT values associated with that command. The Recommended value for DDR2 is CL - 5. where CL is CAS latency. DDR ODT has  a 2-cycle on-time delay and a 2.5-cycle off-time delay. ODT setting should remain constant for the entire time that DQS is driven by the controller. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_RD_ODT_DELAY</spirit:name>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> The delay, in clock cycles, from issuing a READ command to setting ODT values associated with that command. Recommended value for DDR2 is CL - 4. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>12</spirit:bitOffset>
            <spirit:bitWidth>20</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC  ODT Delay Control Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_ODT_PARAM_2_CR</spirit:name>
        <spirit:addressOffset>0x74</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_WR_ODT_BLOCK</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 00 - block read/write scheduling for 1-cycle when Write requires changing ODT settings.  01 - block read/write scheduling for 2 cycles when Write requires changing ODT settings.  10 - block read/write scheduling for 3 cycles when Write requires changing ODT settings.  11 - Reserved. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_WR_ODT_HOLD</spirit:name>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Cycles to hold ODT for a WRITE Command. When 0, ODT signal is ON for 1 cycle. When 1, ODT signal is ON for 2 cycles, and so on. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_RD_ODT_HOLD</spirit:name>
            <spirit:bitOffset>6</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Cycles to hold ODT for a READ Command. When 0, ODT signal is ON for 1 cycle. When 1, ODT signal is ON for 2 cycles, and so on. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>10</spirit:bitOffset>
            <spirit:bitWidth>22</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC  ODT Hold/Block cycles Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_DEBUG_CR</spirit:name>
        <spirit:addressOffset>0x78</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_DIS_SCRUB</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> This feature is not supported. Only default value works.  1 - Disable ECC scrubs  0 - Enable ECC scrubs  Valid only when REG_DDRC_ECC_MODE = 100 or 101. Only present in designs that support ECC. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_DIS_COLLISION_PAGE_OPT</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> When this is set to '0', auto-precharge is disabled for the flushed command in a collision case. Collision cases are write followed by read to same address, read followed by write to same address, or write followed by write to same address with REG_DDRC_DIS_WC bit = 1 (where same address comparisons exclude the two address bits representing critical word).  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_DIS_PRE_BYPASS</spirit:name>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Only present in designs supporting precharge bypass.  When 1, disable bypass path for high priority precharges  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_DIS_RD_BYPASS</spirit:name>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Only present in designs supporting read bypass.  When 1, disable bypass path for high priority read page hits. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_DIS_ACT_BYPASS</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Only present in designs supporting activate bypass.  When 1, disable bypass path for high priority read activates  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_DIS_WC</spirit:name>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> When 1, disable Write Combine. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>6</spirit:bitOffset>
            <spirit:bitWidth>26</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Debug Register and DDRC Column Address Map Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_MODE_REG_RD_WR_CR</spirit:name>
        <spirit:addressOffset>0x7c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_MR_TYPE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Indicates whether the Mode register operation is read or write          1 - Read          0 - Write. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_MR_ADDR</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Address of the Mode register that is to be written to.  00-  MR0 01-  MR1 10-  MR2 11-  MR3 </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_MR_WR</spirit:name>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> When written to a '1' and DDRC_REG_MR_WR_BUSY is low then a mode register read or write operation is started. There is no need to the CPU to set this back to zero. This bit always reads as zero. Controller accepts this command, if this signal is detected high and DDRC_REG_MR_WR_BUSY is detected low. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>28</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC  Mode Register Read/Write Command Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_MODE_REG_DATA_CR</spirit:name>
        <spirit:addressOffset>0x80</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_MR_DATA</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Mode register write data. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC  Mode Register Write Data Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_PWR_SAVE_1_CR</spirit:name>
        <spirit:addressOffset>0x84</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x40c</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_CLOCK_STOP_EN</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 1- Stops the clock to the PHY whenever a clock is  not required by LPDDR.  0-Clock will never be stopped.  This is only present for implementations supporting mobile/LPDDR  devices </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_POWERDOWN_TO_X32</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>5</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> After this many clocks of NOP or DESELECT the controller puts the DRAM into power down. This must be enabled in the Master Control Register.
Unit: Multiples of 32 clocks  FOR PERFORMANCE ONLY. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_POST_SELFREF_GAP_X32</spirit:name>
            <spirit:bitOffset>6</spirit:bitOffset>
            <spirit:bitWidth>7</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Minimum time to wait after coming out of self refresh before doing anything. This must be bigger than all the constraints that exist (specifications: max of tXSNR and tXSRD and tXSDLL which is 512 clocks).
Unit: in multiples of 32 clocks. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>13</spirit:bitOffset>
            <spirit:bitWidth>3</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC  Power Save Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_PWR_SAVE_2_CR</spirit:name>
        <spirit:addressOffset>0x88</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_PAD_PD</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>3</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> If pads have a power-saving mode, this is the greater of the time for the pads to enter power down or the time for the pads to exit power down. Used only in non-DFI designs.
Unit: clocks. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_DEEPPOWERDOWN_TO_X1024</spirit:name>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Minimum deep power down time applicable only for LPDDR2. LPDDR exits from deep power down mode immediately after REG_DDRC_DEEPPOWERDOWN_EN is deasserted. For LPDDR2, Value from the spec is 500us. Units are in 1024 clock cycles.  Present only in designs that has Mobile support.  FOR PERFORMANCE ONLY. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_DIS_PAD_PD</spirit:name>
            <spirit:bitOffset>11</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 1- disable the pad power down feature.  0- Enable the pad power down feature. Used only in non-DFI designs.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>12</spirit:bitOffset>
            <spirit:bitWidth>20</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC  Power Save Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_ZQ_LONG_TIME_CR</spirit:name>
        <spirit:addressOffset>0x8c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_T_ZQ_LONG_NOP</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>10</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description>Number of cycles of NOP required after a ZQCL (ZQ calibration long) command is issued to DRAM.
Unit: Clock cycles.
This is only present for implementations supporting DDR3 devices. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>10</spirit:bitOffset>
            <spirit:bitWidth>22</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC ZQ Long Time Calibration Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_ZQ_SHORT_TIME_CR</spirit:name>
        <spirit:addressOffset>0x90</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_T_ZQ_SHORT_NOP</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>10</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description>Number of cycles of NOP required after a ZQCS (ZQ calibration short) command is issued to DRAM.
Unit: Clock cycles.
This is only present for implementations supporting DDR3 devices. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>10</spirit:bitOffset>
            <spirit:bitWidth>22</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC ZQ Short Time Calibration Register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_ZQ_SHORT_INT_REFRESH_MARGIN_1_CR</spirit:name>
        <spirit:addressOffset>0x94</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x2</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_REFRESH_MARGIN</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Threshold value in number of clock cycles before the critical refresh or page timer expires. A critical refresh is to be issued before this threshold is reached. Recommended to use default value.
Unit: multiples of 32 clocks. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_T_ZQ_SHORT_INTERVAL_X1024</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>12</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description>Lower 12 bits of REG_DDRC_T_ZQ_SHORT_INTERVAL_X1024. Average interval to wait between automatically issuing ZQCS (ZQ  calibration short) commands to DDR3 devices. Not considered if REG_DDRC_DIS_AUTO_ZQ=1.
Unit: 1024 Clock cycles
This is only present for implementations supporting DDR3 devices. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC ZQ Short Time Calibration Register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_ZQ_SHORT_INT_REFRESH_MARGIN_2_CR</spirit:name>
        <spirit:addressOffset>0x98</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_T_ZQ_SHORT_INTERVAL_X1024</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Upper 8 bits of REG_DDRC_T_ZQ_SHORT_INTERVAL_X1024 Average interval to wait between automatically issuing ZQCS (ZQ  calibration short) commands to DDR3 devices. Not considered if REG_DDRC_DIS_AUTO_ZQ=1. Units: 1024 Clock cycles  This is only present for implementations supporting DDR3 devices. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>24</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC ZQ Short Time Calibration Register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_PERF_PARAM_1_CR</spirit:name>
        <spirit:addressOffset>0x9c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x83</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_LPR_NUM_ENTRIES</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>3</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Number of entries in the low priority transaction store is this value plus 1.   (READ_CAM_DEPTH - (REG_DDRC_LPR_NUM_ENTRIES + 1)) is  the  number of entries available for the high priority transaction store.  READ_CAM_DEPTH = Depth of the read transaction store Setting this to maximum value allocates all entries to Low Priority transaction store.  Setting this to 0 allocates 1 entry to low priority transaction store and the rest to high priority transaction store.  FOR PERFORMANCE ONLY. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved_1</spirit:name>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> This bit must always be set to zero.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_PAGECLOSE</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 1-bank is closed and kept closed if no transactions are available for it. This is different from auto-precharge in that  (a) explicit precharge commands are used, and not read/write with auto-precharge and  (b) page is not closed after a read/write if there is another read/write pending to the same page.  0-bank remains open until there is a need to close it (to open a different page, or for page timeout or refresh timeout.) This does not apply when auto-refresh is used.  FOR PERFORMANCE ONLY.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_RDWR_IDLE_GAP</spirit:name>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>7</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> When the preferred transaction store is empty for these many clock cycles, switch to the alternate transaction store if it is non-empty.  The read transaction store (both high and low priority) is the default preferred transaction store and the write transaction store is the alternate store.  When &quot;Prefer write over read&quot; is set this is reversed.  FOR PERFORMANCE ONLY. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved_2</spirit:name>
            <spirit:bitOffset>12</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> This bit must always be set to zero. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_BURST_RDWR</spirit:name>
            <spirit:bitOffset>13</spirit:bitOffset>
            <spirit:bitWidth>3</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description>001: Burst length of 4
010: Burst length of 8
100: Burst length of 16
All other values are reserved.  This controls the burst size used to access the DRAM. This must match the BL mode register setting in the DRAM.
Note:
 1. The DDRC and AXI controllers are optimized for a burst length of 8.
 2. The recommended setting is 8.
 3. Burst length of 16 is only supported for LPDDR1. Setting to 16 when using LPDDR in Half/Quarter bus mode may boost performance.
 4. For systems that tend to do lots of single cycle random transactions a burst length of 4 may slightly improve system performance. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved_3</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Performance parameter Register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_HPR_QUEUE_PARAM_1_CR</spirit:name>
        <spirit:addressOffset>0xa0</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_HPR_XACT_RUN_LENGTH</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Number of transactions that are serviced once the HPR queue goes critical is the smaller of: this value and Number of transactions available.
Unit: Transaction  FOR PERFORMANCE ONLY. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_HPR_MIN_NON_CRITICAL</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>11</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Number of clocks that the HPR queue is guaranteed to be non-critical.
Unit: 32 clocks.  FOR PERFORMANCE ONLY. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_HPR_MAX_STARVE_X32</spirit:name>
            <spirit:bitOffset>15</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Lower 1 bit of REG_DDRC_HPR_MAX_STARVE_X32 Number of clocks that the HPR queue can be starved before it goes critical.
Unit: 32 clocks.  FOR PERFORMANCE ONLY </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Performance parameter Register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_HPR_QUEUE_PARAM_2_CR</spirit:name>
        <spirit:addressOffset>0xa4</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_HPR_MAX_STARVE_X32</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>11</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Upper 11 bits of REG_DDRC_LPR_MAX_STARVE_X32 Number of clocks that the HPR queue can be starved before it goes critical.
Unit: 32 clocks.  FOR PERFORMANCE ONLY </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>11</spirit:bitOffset>
            <spirit:bitWidth>21</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Performance parameter Register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_LPR_QUEUE_PARAM_1_CR</spirit:name>
        <spirit:addressOffset>0xa8</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_LPR_XACT_RUN_LENGTH</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Number of transactions that are serviced once the LPR queue goes critical is the smaller of: this value and Number of transactions available.
Unit: Transaction.  FOR PERFORMANCE ONLY. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_LPR_MIN_NON_CRITICAL</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>11</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Number of clocks that the LPR queue is guaranteed to be non-critical.
Unit: 32 clocks.  FOR PERFORMANCE ONLY. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_LPR_MAX_STARVE_X32</spirit:name>
            <spirit:bitOffset>15</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Lower 1 bit of REG_DDRC_LPR_MAX_STARVE_X32 Number of clocks that the LPR queue can be starved before it goes critical.
Unit: 32 clocks.  FOR PERFORMANCE ONLY. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Performance parameter Register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_LPR_QUEUE_PARAM_2_CR</spirit:name>
        <spirit:addressOffset>0xac</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_LPR_MAX_STARVE_X32</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>11</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Upper 11 bits of REG_DDRC_HPR_MAX_STARVE_X32 Number of clocks that the LPR queue can be starved before it goes critical.
Unit: 32 clocks.  FOR PERFORMANCE ONLY. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Performance parameter Register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_WR_QUEUE_PARAM_CR</spirit:name>
        <spirit:addressOffset>0xb0</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_W_XACT_RUN_LENGTH</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Number of transactions that are serviced once the WR queue goes critical is the smaller of: this value and Number of transactions available.
Unit: Transaction.   FOR PERFORMANCE ONLY. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_W_MIN_NON_CRITICAL</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>11</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Number of clocks that the write queue is guaranteed to be non-critical.
Unit: 32 clocks.  FOR PERFORMANCE ONLY. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>15</spirit:bitOffset>
            <spirit:bitWidth>17</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Performance parameter Register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_PERF_PARAM_2_CR</spirit:name>
        <spirit:addressOffset>0xb4</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_FORCE_LOW_PRI_N</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Active Low signal. When asserted ('0'), all incoming transactions are forced to low priority. Forcing the incoming transactions to low priority implicitly turns off bypass.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_PREFER_WRITE</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> If set then the bank selector prefers writes over reads.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_GO2CRITICAL_HYSTERESIS</spirit:name>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Describes the number of cycles that CO_GS_GO2CRITICAL_RD or CO_GS_GO2CRITICAL_WR must be asserted before the corresponding queue moves to the critical state in the DDRC.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_BURST_MODE</spirit:name>
            <spirit:bitOffset>10</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description>1: Interleaved Burst Mode
0: Sequential Burst Mode
The burst mode programmed in the DRAM mode register and the order of the input data to the Controller should both match the value programmed in the REG_DDRC_BURST_MODE register.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_BURSTCHOP</spirit:name>
            <spirit:bitOffset>11</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Not supported in this version of the DDRC controller always reads as zero. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>12</spirit:bitOffset>
            <spirit:bitWidth>20</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Performance parameter Register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_PERF_PARAM_3_CR</spirit:name>
        <spirit:addressOffset>0xb8</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_EN_2T_TIMING_MODE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description>1: DDRC uses 2T timing.
0: DDRC uses 1T timing. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_2T_DELAY</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>9</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Selects the clock edge in which chip select (CSN) and CKE is asserted. There are 9 CSN and CKE (one for every 4 DQS). Each bit of this signal controls the corresponding CSN &amp; CKE.  Bit[0] controls CSN0[1:0] and CKE0  Bit[1] controls CSN1[1:0] and CKE1 and so on.  '0' on any bit indicates that the corresponding CSN and CKE will be asserted (set to 0) on the first cycle that address/command are driven to DRAM. '1' on any bit indicates that the corresponding CSN and CKE will be asserted (set to 0) on the second cycle that address/command are driven to DRAM. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>10</spirit:bitOffset>
            <spirit:bitWidth>22</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Performance parameter Register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_DFI_RDDATA_EN_CR</spirit:name>
        <spirit:addressOffset>0xbc</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_DFI_T_RDDATA_EN</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>5</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Time from the assertion of a READ command on the DFI interface to the assertion of the DDRC_DFI_RDDATA_EN signal.  Program this to (RL - 1), where RL is the Read Latency of the DRAM. For LPDDR this should be set to RL. Units: Clocks  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>27</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC DFI Read Command Timing Register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_DFI_MIN_CTRLUPD_TIMING_CR</spirit:name>
        <spirit:addressOffset>0xc0</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x3</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_DFI_T_CTRLUP_MIN</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>10</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Specifies the minimum number of clock cycles that the DDRC_DFI_CTRLUPD_REQ signal must be asserted. Lowest value to assign to this variable is 0x3. Units: Clocks </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>10</spirit:bitOffset>
            <spirit:bitWidth>22</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC DFI Controller Update Min Time Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_DFI_MAX_CTRLUPD_TIMING_CR</spirit:name>
        <spirit:addressOffset>0xc4</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x40</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_DFI_T_CTRLUP_MAX</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>10</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Specifies the maximum number of clock cycles that the DDRC_DFI_CTRLUPD_REQ signal can assert. Lowest value to assign to this variable is 0x40. Units: Clocks </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>10</spirit:bitOffset>
            <spirit:bitWidth>22</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC DFI Controller Update Max Time Register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_DFI_WR_LVL_CONTROL_1_CR</spirit:name>
        <spirit:addressOffset>0xc8</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_WRLVL_WW</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Write leveling write-to-write delay.  Specifies the minimum number of clock cycles from the assertion of a DDRC_DFI_WRLVL_STROBE signal to the next DDRC_DFI_WRLVL_STROBE signal. Only applicable when connecting to PHY's operating in PHY RdLvl Evaluation mode. Only present in designs that support DDR3 devices. Units: Clocks </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_DFI_WRLVL_MAX_X1024</spirit:name>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Lower 8 bits Write leveling maximum time. Specifies the maximum number of clock cycles that the controller will wait for a response (PHY_DFI_WRLVL_RESP) to a write leveling enable signal (DDRC_DFI_WRLVL_EN).  Only applicable when connecting to PHY's operating in PHY WrLvl Evaluation mode. Units: 1024 Clocks  Only present in designs that support DDR3 devices. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC DFI Write Levelling Control Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_DFI_WR_LVL_CONTROL_2_CR</spirit:name>
        <spirit:addressOffset>0xcc</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_DFI_WRLVL_MAX_X1024</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Upper 4 bits  Write leveling maximum time. Specifies the maximum number of clock cycles that the controller will wait for a response (PHY_DFI_WRLVL_RESP) to a write leveling enable signal (DDRC_DFI_WRLVL_EN).  Only applicable when connecting to PHY's operating in PHY WrLvl Evaluation mode. Units: 1024 Clocks  Only present in designs that support DDR3 devices. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_DFI_WR_LEVEL_EN</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 1-Write leveling mode has been enabled as part of init sequence. Only present in designs that support DDR3 devices. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_DFI_T_WLMRD</spirit:name>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>10</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> First DQS/DQS# rising edge after write leveling mode is programmed.  Only present in designs that support DDR3 devices. Units: Clocks </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>15</spirit:bitOffset>
            <spirit:bitWidth>17</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC DFI Write Levelling Control Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_DFI_RD_LVL_CONTROL_1_CR</spirit:name>
        <spirit:addressOffset>0xd0</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_RDLVL_RR</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 1-Read Data Eye training mode has been enabled as part of init sequence.  Only present in designs that support DDR3 devices. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_DFI_RDLVL_MAX_X1024</spirit:name>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Lower 8 bits. Read leveling read-to-read delay. Specifies the minimum number of clock cycles from the assertion of a read command to the next read command. Only applicable when connecting to PHY's operating in PHY RdLvl Evaluation mode.  Only present in designs that support DDR3 devices. Units: Clocks </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC DFI Read Levelling Control Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_DFI_RD_LVL_CONTROL_2_CR</spirit:name>
        <spirit:addressOffset>0xd4</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_DFI_RDLVL_MAX_X1024</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Upper 4 bits. Read leveling read-to-read delay. Specifies the minimum number of clock cycles from the assertion of a read command to the next read command. Only applicable when connecting to PHY's operating in PHY RdLvl Evaluation mode.  Only present in designs that support DDR3 devices. Units: Clocks </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_DFI_RD_DQS_GATE_LEVEL</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Read leveling maximum time. Specifies the maximum number of clock cycles that the controller will wait for a response (PHY_DFI_RDLVL_RESP) to a read leveling enable signal (DDRC_DFI_RDLVL_EN or DDRC_DFI_RDLVL_GATE_EN).   Only applicable when connecting to PHY's operating in PHY RdLvl Evaluation mode.  Only present in designs that support DDR3 devices. Units: 1024 Clocks </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_DFI_RD_DATA_EYE_TRAIN</spirit:name>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 1-Read DQS Date Leveling mode has been enabled as part of init sequence.  Only present in designs that support DDR3 devices. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>6</spirit:bitOffset>
            <spirit:bitWidth>26</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC DFI Read Levelling Control Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_DFI_CTRLUPD_TIME_INTERVAL_CR</spirit:name>
        <spirit:addressOffset>0xd8</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x1016</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_DDRC_DFI_T_CTRLUPD_INTERVAL_MAX_X1024</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> This is the maximum amount of time between Controller initiated DFI update requests. This timer resets with each update request; when the timer expires, traffic is blocked for a few cycles. PHY can use this idle time to recalibrate the delay lines to the DLLs. The DLL calibration is also used to reset PHY FIFO pointers in case of data capture errors. Updates are required to maintain calibration over PVT, but frequent updates may impact performance. Units: 1024 clocks </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_DDRC_DFI_T_CTRLUPD_INTERVAL_MIN_X1024</spirit:name>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> This is the minimum amount of time between controller initiated DFI update requests (which will be executed whenever the controller is idle). Set this number higher to reduce the frequency of update requests, which can have a small impact on the latency of the first read request when the controller is idle. Units: 1024 clocks </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC DFI Controller Update Time Interval Register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_DYN_SOFT_RESET_ALIAS_CR</spirit:name>
        <spirit:addressOffset>0xdc</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x4</spirit:resetValue>
        <spirit:description> DDRC Reset Register. </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_AXI_FABRIC_PRI_ID_CR</spirit:name>
        <spirit:addressOffset>0xe0</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PRIORITY_ID</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> If the Priority Enable bit is 1 then this ID will have a higher priority over other ID's. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>PRIORITY_ENABLE_BIT</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> This is to set the priority of the Fabric Master ID. 01: Indicates that the ID is higher priority but still lower than the ICache and DSG bus. 10/11: Indicates that the ID has the highest priority even higher than ICache and DSG bus (to be used for isochronous traffic display applications only). This only affects the reads.  Writes would still have the priority lower than Cache/DSG. 00 - None of the Master ID's from Fabric have a higher priority </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>6</spirit:bitOffset>
            <spirit:bitWidth>26</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC AXI Interface Fabric Priority ID Register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_SR</spirit:name>
        <spirit:addressOffset>0xe4</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDRC_REG_MR_WR_BUSY</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> 1 - Indicates that mode register write operation is in progress.   0 - Indicates that the core can initiate a mode register write operation.  Core must initiate a MR write operation only if this signal is low. This signal goes high in the clock after the controller accepts the write request. It goes low when the MR write command is issued to the DRAM. Any MR write command that is received when  'DDRC_REG_MR_WR_BUSY' is high, is not accepted. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>DDRC_REG_TWRLVL_MAX_ERROR</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Single pulse output: when '1' indicates the WRLVL_MAX timer has timed out. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>DDRC_REG_TRDLVL_MAX_ERROR</spirit:name>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Single pulse output: when '1' indicates the RDRLVL_MAX timer has timed out. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>DDRC_CORE_REG_OPERATING_MODE</spirit:name>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>3</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Operating mode. This is 3-bits widein designs with Mobile support and 2-bits in all other designs  Non-Mobile designs:  00 - Init  01 - Normal  10 - Power down  11 - Self Refresh  Mobile designs:  000 - Init  001 - Normal  010 - Power down  011 - Self Refresh  1XX - Deep Power down </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>6</spirit:bitOffset>
            <spirit:bitWidth>26</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Status Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_SINGLE_ERR_CNT_SR</spirit:name>
        <spirit:addressOffset>0xe8</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDRC_SINGLE_ERR_CNT_STATUS_REG</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Single Error Count Status  If the count reaches 0xFFFF then it is held and only cleared after the DDRC_ECC_ERR_READ_DONE_CR is written over by the System </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Single Error Count Status Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_DOUBLE_ERR_CNT_SR</spirit:name>
        <spirit:addressOffset>0xec</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDRC_DOUBLE_ERR_CNT_STATUS_REG</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Double Error Count Status  If the count reaches 0xFFFF then it is held and only cleared after the DDRC_ECC_ERR_READ_DONE_CR is written over by the System  </spirit:description>
          </spirit:field>
        <spirit:description> DDRC double error count status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_LUE_SYNDROME_1_SR</spirit:name>
        <spirit:addressOffset>0xf0</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDRC_REG_ECC_SYNDROMES</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Lower 16 bits First data which has ECC error in it.  128-bits consists of the following   Device Correction ECC: (if supported)  [127:64] - ECC  [ 63: 00] - Data  SECDED ECC:  [127:72] - Don't care  [71:64] - ECC  [63:00] - Data  In the same clock cycle, if one lane has correctable error and the other lane has uncorrectable error, then the syndrome for the uncorrectable error is sent on this bus. If more than one data lane has error in it, then the lower data lane is selected. The priority applied when there are multiple errors in the same cycle is as follows:  ·          Uncorrectable error, lower lane  ·          Uncorrectable error, upper lane  ·          Correctable error, lower lane  ·          Correctable error, upper lane  Only present in designs that support ECC. This is Cleared after the DDRC_ECC_ERR_READ_DONE_CR is written over by the System  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC last uncorrected error syndrome register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_LUE_SYNDROME_2_SR</spirit:name>
        <spirit:addressOffset>0xf4</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDRC_REG_ECC_SYNDROMES</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Next 16 bits to DDR_LUE_SYNDROME_1_SR  First data which has ECC error in it.  128-bits consists of the following   Device Correction ECC: (if supported)  [127:64] - ECC  [ 63: 00] - Data  SECDED ECC:  [127:72] - Don't care  [71:64] - ECC  [63:00] - Data  In the same clock cycle, if one lane has correctable error and the other lane has uncorrectable error, then the syndrome for the uncorrectable error is sent on this bus. If more than one data lane has error in it, then the lower data lane is selected. The priority applied when there are multiple errors in the same cycle is as follows:  ·          Uncorrectable error, lower lane  ·          Uncorrectable error, upper lane  ·          Correctable error, lower lane  ·          Correctable error, upper lane  Only present in designs that support ECC. This is Cleared after the DDRC_ECC_ERR_READ_DONE_CR is written over by the System  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC last uncorrected error syndrome register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_LUE_SYNDROME_3_SR</spirit:name>
        <spirit:addressOffset>0xf8</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDRC_REG_ECC_SYNDROMES</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Next 16 bits to DDR_LUE_SYNDROME_2_SR  First data which has ECC error in it.  128-bits consists of the following   Device Correction ECC: (if supported)  [127:64] - ECC  [ 63: 00] - Data  SECDED ECC:  [127:72] - Don't care  [71:64] - ECC  [63:00] - Data  In the same clock cycle, if one lane has correctable error and the other lane has uncorrectable error, then the syndrome for the uncorrectable error is sent on this bus. If more than one data lane has error in it, then the lower data lane is selected. The priority applied when there are multiple errors in the same cycle is as follows:  ·          Uncorrectable error, lower lane  ·          Uncorrectable error, upper lane  ·          Correctable error, lower lane  ·          Correctable error, upper lane  Only present in designs that support ECC. This is Cleared after the DDRC_ECC_ERR_READ_DONE_CR is written over by the System  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC last uncorrected error syndrome register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_LUE_SYNDROME_4_SR</spirit:name>
        <spirit:addressOffset>0xfc</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDRC_REG_ECC_SYNDROMES</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Next 16 bits to DDR_LUE_SYNDROME_3_SR  First data which has ECC error in it.  128-bits consists of the following   Device Correction ECC: (if supported)  [127:64] - ECC  [ 63: 00] - Data  SECDED ECC:  [127:72] - Don't care  [71:64] - ECC  [63:00] - Data  In the same clock cycle, if one lane has correctable error and the other lane has uncorrectable error, then the syndrome for the uncorrectable error is sent on this bus. If more than one data lane has error in it, then the lower data lane is selected. The priority applied when there are multiple errors in the same cycle is as follows:  ·          Uncorrectable error, lower lane  ·          Uncorrectable error, upper lane  ·          Correctable error, lower lane  ·          Correctable error, upper lane  Only present in designs that support ECC. This is Cleared after the DDRC_ECC_ERR_READ_DONE_CR is written over by the System  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC last uncorrected error syndrome register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_LUE_SYNDROME_5_SR</spirit:name>
        <spirit:addressOffset>0x100</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDRC_REG_ECC_SYNDROMES</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Upper 8 bits.  First data which has ECC error in it.  128-bits consists of the following   Device Correction ECC: (if supported)  [127:64] - ECC  [ 63: 00] - Data  SECDED ECC:  [127:72] - Don't care  [71:64] - ECC  [63:00] - Data  In the same clock cycle, if one lane has correctable error and the other lane has uncorrectable error, then the syndrome for the uncorrectable error is sent on this bus. If more than one data lane has error in it, then the lower data lane is selected. The priority applied when there are multiple errors in the same cycle is as follows:  ·          Uncorrectable error, lower lane  ·          Uncorrectable error, upper lane  ·          Correctable error, lower lane  ·          Correctable error, upper lane  Only present in designs that support ECC. This is Cleared after the DDRC_ECC_ERR_READ_DONE_CR is written over by the System  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC last uncorrected error syndrome register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_LUE_ADDRESS_1_SR</spirit:name>
        <spirit:addressOffset>0x104</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDRC_REG_ECC_ROW</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Row where the ECC error occurred.  Only present in designs that support ECC. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Last Uncorrected Error Address Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_LUE_ADDRESS_2_SR</spirit:name>
        <spirit:addressOffset>0x108</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDRC_REG_ECC_COL</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>12</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Column where the ECC error occurred.  Col[0] is always set to 0 coming out of the controller. This bit is overwritten by the register module and indicates whether the error came from upper or lower lane.  Only present in designs that support ECC. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>DDRC_REG_ECC_BANK</spirit:name>
            <spirit:bitOffset>12</spirit:bitOffset>
            <spirit:bitWidth>3</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Bank where the ECC error occurred.  Only present in designs that support ECC. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>15</spirit:bitOffset>
            <spirit:bitWidth>17</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC Last Uncorrected Error Address Register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_LCE_SYNDROME_1_SR</spirit:name>
        <spirit:addressOffset>0x10c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDRC_REG_ECC_SYNDROMES</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Lower 16 bits First data which has ECC error in it.  128-bits consists of the following   Device Correction ECC: (if supported)  [127:64] - ECC  [ 63: 00] - Data  SECDED ECC:  [127:72] - Don't care  [71:64] - ECC  [63:00] - Data  In the same clock cycle, if one lane has correctable error and the other lane has uncorrectable error, then the syndrome for the uncorrectable error is sent on this bus. If more than one data lane has error in it, then the lower data lane is selected. The priority applied when there are multiple errors in the same cycle is as follows:  ·          Uncorrectable error, lower lane  ·          Uncorrectable error, upper lane  ·          Correctable error, lower lane  ·          Correctable error, upper lane  Only present in designs that support ECC. This is Cleared after the DDRC_ECC_ERR_READ_DONE_CR is written over by the System  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC last corrected error syndrome  register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_LCE_SYNDROME_2_SR</spirit:name>
        <spirit:addressOffset>0x110</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDRC_REG_ECC_SYNDROMES</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Next 16 bits to DDR_LCE_SYNDROME_1_SR First data which has ECC error in it.  128-bits consists of the following   Device Correction ECC: (if supported)  [127:64] - ECC  [ 63: 00] - Data  SECDED ECC:  [127:72] - Don't care  [71:64] - ECC  [63:00] - Data  In the same clock cycle, if one lane has correctable error and the other lane has uncorrectable error, then the syndrome for the uncorrectable error is sent on this bus. If more than one data lane has error in it, then the lower data lane is selected. The priority applied when there are multiple errors in the same cycle is as follows:  ·          Uncorrectable error, lower lane  ·          Uncorrectable error, upper lane  ·          Correctable error, lower lane  ·          Correctable error, upper lane  Only present in designs that support ECC. This is Cleared after the DDRC_ECC_ERR_READ_DONE_CR is written over by the System  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC last corrected error syndrome  register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_LCE_SYNDROME_3_SR</spirit:name>
        <spirit:addressOffset>0x114</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDRC_REG_ECC_SYNDROMES</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Next 16 bits to DDR_LCE_SYNDROME_2_SR First data which has ECC error in it.  128-bits consists of the following   Device Correction ECC: (if supported)  [127:64] - ECC  [ 63: 00] - Data  SECDED ECC:  [127:72] - Don't care  [71:64] - ECC  [63:00] - Data  In the same clock cycle, if one lane has correctable error and the other lane has uncorrectable error, then the syndrome for the uncorrectable error is sent on this bus. If more than one data lane has error in it, then the lower data lane is selected. The priority applied when there are multiple errors in the same cycle is as follows:  ·          Uncorrectable error, lower lane  ·          Uncorrectable error, upper lane  ·          Correctable error, lower lane  ·          Correctable error, upper lane  Only present in designs that support ECC. This is Cleared after the DDRC_ECC_ERR_READ_DONE_CR is written over by the System  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC last corrected error syndrome  register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_LCE_SYNDROME_4_SR</spirit:name>
        <spirit:addressOffset>0x118</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDRC_REG_ECC_SYNDROMES</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Next 16 bits to DDR_LCE_SYNDROME_3_SR First data which has ECC error in it.  128-bits consists of the following   Device Correction ECC: (if supported)  [127:64] - ECC  [ 63: 00] - Data  SECDED ECC:  [127:72] - Don't care  [71:64] - ECC  [63:00] - Data  In the same clock cycle, if one lane has correctable error and the other lane has uncorrectable error, then the syndrome for the uncorrectable error is sent on this bus. If more than one data lane has error in it, then the lower data lane is selected. The priority applied when there are multiple errors in the same cycle is as follows:  ·          Uncorrectable error, lower lane  ·          Uncorrectable error, upper lane  ·          Correctable error, lower lane  ·          Correctable error, upper lane  Only present in designs that support ECC. This is Cleared after the DDRC_ECC_ERR_READ_DONE_CR is written over by the System  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC last corrected error syndrome  register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_LCE_SYNDROME_5_SR</spirit:name>
        <spirit:addressOffset>0x11c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDRC_REG_ECC_SYNDROMES</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Lower 8 bits. First data which has ECC error in it.  128-bits consists of the following   Device Correction ECC: (if supported)  [127:64] - ECC  [ 63: 00] - Data  SECDED ECC:  [127:72] - Don't care  [71:64] - ECC  [63:00] - Data  In the same clock cycle, if one lane has correctable error and the other lane has uncorrectable error, then the syndrome for the uncorrectable error is sent on this bus. If more than one data lane has error in it, then the lower data lane is selected. The priority applied when there are multiple errors in the same cycle is as follows:  ·          Uncorrectable error, lower lane  ·          Uncorrectable error, upper lane  ·          Correctable error, lower lane  ·          Correctable error, upper lane  Only present in designs that support ECC. This is Cleared after the DDRC_ECC_ERR_READ_DONE_CR is written over by the System  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC last corrected error syndrome  register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_LCE_ADDRESS_1_SR</spirit:name>
        <spirit:addressOffset>0x120</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDRC_REG_ECC_ROW</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Row where the ECC error occurred.  Only present in designs that support ECC. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC last corrected error address register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_LCE_ADDRESS_2_SR</spirit:name>
        <spirit:addressOffset>0x124</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDRC_REG_ECC_COL</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>12</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Column where the ECC error occurred.  Col[0] is always set to 0 coming out of the controller. This bit is overwritten by the register module and indicates whether the error came from upper or lower lane.  Only present in designs that support ECC. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>DDRC_REG_ECC_BANK</spirit:name>
            <spirit:bitOffset>12</spirit:bitOffset>
            <spirit:bitWidth>3</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Bank where the ECC error occurred.  Only present in designs that support ECC. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>15</spirit:bitOffset>
            <spirit:bitWidth>17</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC last corrected error address register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_LCB_NUMBER_SR</spirit:name>
        <spirit:addressOffset>0x128</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDRC_LCB_BIT_NUM</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>7</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Indicates the location of the bit that caused single-bit error in SECDED ECC case (encoded value). If more than one data lane has error in it, the lower data lane is selected. This register is 7-bit wide in order to handle 72-bits of the data present in a single lane. This doesn't indicate corrected_bit_num in the case of Device Correction ECC. The encoding is only present in designs that support ECC. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>7</spirit:bitOffset>
            <spirit:bitWidth>25</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC last corrected bit number register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_LCB_MASK_1_SR</spirit:name>
        <spirit:addressOffset>0x12c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDRC_LCB_MASK</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Lower 16 bits. Indicates the mask of the corrected data.  1 - on any bit indicates that the bit has been corrected by the DRAM ECC logic  0 - on any bit indicates that the bit has NOT been corrected by the DRAM ECC logic.  Valid when any bit of DDRC_REG_ECC_CORRECTED_ERR is high.   This mask doesn't indicate any correction that has been made in the ECC check bits.   If there are errors in multiple lanes, then this signal will have the mask for the lowest lane. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC last corrected bit mask status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_LCB_MASK_2_SR</spirit:name>
        <spirit:addressOffset>0x130</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDRC_LCB_MASK</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Next mask bits to LCB_MASK1  Indicates the mask of the corrected data.  1 - on any bit indicates that the bit has been corrected by the DRAM ECC logic  0 - on any bit indicates that the bit has NOT been corrected by the DRAM ECC logic.  Valid when any bit of DDRC_REG_ECC_CORRECTED_ERR is high.   This mask doesn't indicate any correction that has been made in the ECC check bits.   If there are errors in multiple lanes, then this signal will have the mask for the lowest lane. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC last corrected bit mask status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_LCB_MASK_3_SR</spirit:name>
        <spirit:addressOffset>0x134</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDRC_LCB_MASK</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Next mask bits to LCB_MASK1  Indicates the mask of the corrected data.  1 - on any bit indicates that the bit has been corrected by the DRAM ECC logic  0 - on any bit indicates that the bit has NOT been corrected by the DRAM ECC logic.  Valid when any bit of DDRC_REG_ECC_CORRECTED_ERR is high.   This mask doesn't indicate any correction that has been made in the ECC check bits.   If there are errors in multiple lanes, then this signal will have the mask for the lowest lane. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC last corrected bit mask status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_LCB_MASK_4_SR</spirit:name>
        <spirit:addressOffset>0x138</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDRC_LCB_MASK</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Upper 16 bits. Indicates the mask of the corrected data.  1 - on any bit indicates that the bit has been corrected by the DRAM ECC logic  0 - on any bit indicates that the bit has NOT been corrected by the DRAM ECC logic.  Valid when any bit of DDRC_REG_ECC_CORRECTED_ERR is high.   This mask doesn't indicate any correction that has been made in the ECC check bits.   If there are errors in multiple lanes, then this signal will have the mask for the lowest lane. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC last corrected bit mask status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_ECC_INT_SR</spirit:name>
        <spirit:addressOffset>0x13c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDRC_ECC_STATUS_SR</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>3</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Bit 0: 1 Indicates that ECC interrupt is because of single error Bit 1: 1 Indicates that ECC interrupt is because of double error Bit 3: 1 </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>29</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC ECC interrupt status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_ECC_INT_CLR_REG</spirit:name>
        <spirit:addressOffset>0x140</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDRC_ECC_INT_CLR_REG</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> This Register should be written by the processor when it has read the ECC error status information. This helps to clear all the ECC status information like error counters and other ECC registers. The read value of this register is always 0. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>31</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC ECC interrupt clear register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDRC_ECC_OUTPUT_DATA_SR</spirit:name>
        <spirit:addressOffset>0x144</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>ECC_OUTPUT_DATA_SR</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Internal ECC / Production test data. Valid when ra_co_resp_valid is high Only present in designs that support ECC Test mode: The production test pattern that was sent on the ECC bus (co_wu_rxdata_int_ecc) is returned to the core on this bus. Internal ECC: Contains the Internal ECC encoded data corresponding to ra_co_resp_data bus.  If both test_mode and Internal_ECC are ON, then test_mode takes preference over Internal ECC.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>24</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DDRC ECC Output Data - For Production test   </spirit:description>
      </spirit:register>
    </spirit:addressBlock>
    <spirit:addressBlock>
      <spirit:baseAddress>0x0</spirit:baseAddress>
      <spirit:range>0x400</spirit:range>
      <spirit:width>16</spirit:width>
      <spirit:register>
        <spirit:name>PHY_DYN_BIST_TEST_CR</spirit:name>
        <spirit:addressOffset>0x200</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_BIST_FORCE_ERR</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> This register bit is used to check that BIST checker is not giving false pass.  When this port is set 1, data bit gets inverted before sending out to the external memory and BIST checker must return a mismatch error.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_PHY_BIST_MODE</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> The mode bits select the pattern type generated by the BIST generator. All the patterns are transmitted continuously once enabled.  00 : constant pattern (0 repeated on each DQ bit)  01 : low freq pattern (00001111 repeated on each DQ bit)  10 : PRBS pattern (2^7-1 PRBS pattern repeated on each DQ bit)  Each DQ bit always has same data value except when early shifting in PRBS mode is requested.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_PHY_BIST_ENABLE</spirit:name>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Enable the internal BIST generation and checker logic when this port is set HIGH. Setting this port as '0' will stop the BIST  Generator / checker. In order to run BIST tests, this port must be set along with reg_phy_loopback.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_PHY_AT_SPD_ATPG</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 1 = test with full clock speed but lower coverage.  0 = test with lower clock speed but higher coverage.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> PHY BIST test configuration register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_DYN_BIST_TEST_ERRCLR_1_CR</spirit:name>
        <spirit:addressOffset>0x204</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_BIST_ERR_CLR</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Lower 16 bits. Clear the mismatch error flag from the BIST Checker.  1 : sticky error flag is cleared  0 : No effect   </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> PHY BIST test error clear register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_DYN_BIST_TEST_ERRCLR_2_CR</spirit:name>
        <spirit:addressOffset>0x208</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_BIST_ERR_CLR</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Next 16 bits to DYN_BIST_TEST_ERRCLR_1_CR Clear the mismatch error flag from the BIST Checker.  1: sticky error flag is cleared  0: No effect   </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> PHY BIST test error clear register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_DYN_BIST_TEST_ERRCLR_3_CR</spirit:name>
        <spirit:addressOffset>0x20c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_BIST_ERR_CLR</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>12</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Upper 12 bits. Clear the mismatch error flag from the BIST Checker.  1: sticky error flag is cleared  0: No effect   </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>12</spirit:bitOffset>
            <spirit:bitWidth>20</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> PHY BIST test error clear register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_BIST_TEST_SHIFT_PATTERN_1_CR</spirit:name>
        <spirit:addressOffset>0x210</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_BIST_SHIFT_DQ</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Lower 16 bits Determines whether early shifting is required for a particular DQ bit when reg_phy_bist_mode is 10; 1: PRBS pattern shifted early by 1 bit  0: PRBS pattern without any shift  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> PHY BIST test shift pattern register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_BIST_TEST_SHIFT_PATTERN_2_CR</spirit:name>
        <spirit:addressOffset>0x214</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_BIST_SHIFT_DQ</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Next 16 bits to BIST_TEST_SHIFT_PATTERN_1_CR Determines whether early shifting is required for a particular DQ bit when reg_phy_bist_mode is 10;  1: PRBS pattern shifted early by 1 bit  0: PRBS pattern without any shift  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> PHY BIST test shift pattern register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_BIST_TEST_SHIFT_PATTERN_3_CR</spirit:name>
        <spirit:addressOffset>0x218</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_BIST_SHIFT_DQ</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>12</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Upper 12 bits. Determines whether early shifting is required for a particular DQ bit when reg_phy_bist_mode is 10;  1: PRBS pattern shifted early by 1 bit  0: PRBS pattern without any shift  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>12</spirit:bitOffset>
            <spirit:bitWidth>20</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> PHY BIST test shift pattern register   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_LOOPBACK_TEST_CR</spirit:name>
        <spirit:addressOffset>0x21c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_LOOPBACK</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Loopback testing. 1: enable, 0: disable  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>31</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> PHY  loopback test configuration register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_BOARD_LOOPBACK_CR</spirit:name>
        <spirit:addressOffset>0x220</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_BOARD_LPBK_RX</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>5</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> External Board Loopback testing.  1: This Slice behaves as Receiver for board loopback.  0: disable  This port must be set '0' always except when in external board level loopback test mode.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_PHY_BOARD_LPBK_TX</spirit:name>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>5</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> External Board Loopback testing.  1: This Slice behaves as Transmitter for board loopback.  0: Default  This port must be set '0' always except when in external board level loopback test mode.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>10</spirit:bitOffset>
            <spirit:bitWidth>22</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> PHY  Board loopback test configuration register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_CTRL_SLAVE_RATIO_CR</spirit:name>
        <spirit:addressOffset>0x224</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_CTRL_SLAVE_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>10</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Ratio value for address/command launches timing in phy_ctrl macro. This is the fraction of a clock cycle represented by the shift to be applied to the read DQS in units of 256ths. In other words, the full-cycle tap value from the master DLL will be scaled by this number over 256 to get the delay value for the slave delay line.    </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>10</spirit:bitOffset>
            <spirit:bitWidth>6</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> PHY  control slice dll slave ratio register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_CTRL_SLAVE_FORCE_CR</spirit:name>
        <spirit:addressOffset>0x228</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_CTRL_SLAVE_FORCE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 1: overwrite the delay/tap value for address/command timing slave DLL with the value of the reg_phy_rd_dqs_slave_delay bus.   </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>31</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> PHY  control slice dll slave force register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_CTRL_SLAVE_DELAY_CR</spirit:name>
        <spirit:addressOffset>0x22c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_CTRL_SLAVE_DELAY</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>9</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> If reg_phy_rd_dqs_slave_force is 1, replace delay/tap value for address/command timing slave DLL with this value.    </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>9</spirit:bitOffset>
            <spirit:bitWidth>23</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> PHY  control slice dll slave delay register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_DATA_SLICE_IN_USE_CR</spirit:name>
        <spirit:addressOffset>0x230</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_DATA_SLICE_IN_USE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>9</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Data bus width selection for Read FIFO RE generation. One bit for each data slice.  1: data slice is valid.  0: read data responses are ignored.  Note: The PHY Data Slice 0 must always be enabled.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>9</spirit:bitOffset>
            <spirit:bitWidth>23</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> PHY  control slice in use register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_LVL_NUM_OF_DQ0_CR</spirit:name>
        <spirit:addressOffset>0x234</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_WRLVL_NUM_OF_DQ0</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> This register value determines the number of samples for dq0_in for each ratio increment by the Write Leveling FSM.  Num_of_iteration = reg_phy_gatelvl_num_of_dq0 + 1   </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_PHY_GATELVL_NUM_OF_DQ0</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> This register value determines the number of samples for dq0_in for each ratio increment by the Gate Training FSM.  Num_of_iteration = reg_phy_gatelvl_num_of_dq0 + 1   </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> PHY receiver on off control register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_DQ_OFFSET_1_CR</spirit:name>
        <spirit:addressOffset>0x238</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x240</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_DQ_OFFSET</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Lower 16 bits. Offset value from DQS to DQ. Default value: 0x40 (for 90 degree shift).  This is only used when reg_phy_use_wr_level=1.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Selection register of Offset value from DQS to DQ </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_DQ_OFFSET_2_CR</spirit:name>
        <spirit:addressOffset>0x23c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x4081</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_DQ_OFFSET</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Next 16 bits to PHY_DQ_OFFSET_1_CR Offset value from DQS to DQ. Default value: 0x40 (for 90 degree shift).  This is only used when reg_phy_use_wr_level=1.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Selection register of Offset value from DQS to DQ </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_DQ_OFFSET_3_CR</spirit:name>
        <spirit:addressOffset>0x240</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_DQ_OFFSET</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>3</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Upper 3 bits Offset value from DQS to DQ. Default value: 0x40 (for 90 degree shift).  This is only used when reg_phy_use_wr_level=1.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>29</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Selection register of Offset value from DQS to DQ </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_DIS_CALIB_RST_CR</spirit:name>
        <spirit:addressOffset>0x244</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_DIS_CALIB_RST</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Disable the resetting of the Read Capture FIFO pointers with dll_calib (internally generated signal). The pointers are reset to ensure that the PHY can recover if the appropriate number of DQS edges is not observed after a read command (which can happen when the DQS squelch timing is manually overridden via the debug registers).  0: enable, 1: disable.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>31</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Calibration reset disabling register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_DLL_LOCK_DIFF_CR</spirit:name>
        <spirit:addressOffset>0x248</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_DLL_LOCK_DIFF</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> The maximum number of delay line taps variation allowed while maintaining the master DLL lock.  This is calculated as total jitter/ delay line tap size. Where total jitter is half of (incoming clock jitter (pp) + delay line jitter (pp)). </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>28</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Selects the maximum number of delay line taps </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_FIFO_WE_IN_DELAY_1_CR</spirit:name>
        <spirit:addressOffset>0x24c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_FIFO_WE_IN_DELAY</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Lower 16 bits Delay value to be used when reg_phy_fifo_we_in_forceX is set to 1.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Delay value for fifo WE </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_FIFO_WE_IN_DELAY_2_CR</spirit:name>
        <spirit:addressOffset>0x250</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_FIFO_WE_IN_DELAY</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Next 16 bits to PHY_FIFO_WE_IN_DELAY_1_CR Delay value to be used when reg_phy_fifo_we_in_forceX is set to 1.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Delay value for fifo WE </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_FIFO_WE_IN_DELAY_3_CR</spirit:name>
        <spirit:addressOffset>0x254</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_FIFO_WE_IN_DELAY</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>13</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Upper 13 bits Delay value to be used when reg_phy_fifo_we_in_forceX is set to 1.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>13</spirit:bitOffset>
            <spirit:bitWidth>19</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Delay value for fifo WE </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_FIFO_WE_IN_FORCE_CR</spirit:name>
        <spirit:addressOffset>0x258</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_FIFO_WE_IN_FORCE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>5</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 1: overwrite the delay/tap value for fifo_we_X slave DLL with the value of the reg_phy_fifo_we_in_delayX bus.  X is the number of 8 bit memory Data Slices supported.  R is the number of Ranks supported.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>3</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Overwriting delay value selection reg for fifo we. </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_FIFO_WE_SLAVE_RATIO_1_CR</spirit:name>
        <spirit:addressOffset>0x25c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_FIFO_WE_SLAVE_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Lower 16 bits X is the number of 8 bit memory Data Slices supported.  R is the number of Ranks supported.  Lowest 11*R bits are from data slice 0, next 11*R bits are for data slice 1, etc. When a particular Rank is not used, corresponding ratio values are set as 11'h7ff.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Ratio value for fifo WE slave DLL </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_FIFO_WE_SLAVE_RATIO_2_CR</spirit:name>
        <spirit:addressOffset>0x260</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_FIFO_WE_SLAVE_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Next 16 bits to PHY_FIFO_WE_SLAVE_RATIO_1_CR X is the number of 8 bit memory Data Slices supported.  R is the number of Ranks supported.  Lowest 11*R bits are from data slice 0, next 11*R bits are for data slice 1, etc. When a particular Rank is not used, corresponding ratio values are set as 11'h7ff.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Ratio value for fifo WE slave DLL </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_FIFO_WE_SLAVE_RATIO_3_CR</spirit:name>
        <spirit:addressOffset>0x264</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_FIFO_WE_SLAVE_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Next 16 bits to PHY_FIFO_WE_SLAVE_RATIO_2_CR X is the number of 8 bit memory Data Slices supported.  R is the number of Ranks supported.  Lowest 11*R bits are from data slice 0, next 11*R bits are for data slice 1, etc. When a particular Rank is not used, corresponding ratio values are set as 11'h7ff.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Ratio value for fifo WE slave DLL </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_FIFO_WE_SLAVE_RATIO_4_CR</spirit:name>
        <spirit:addressOffset>0x268</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_FIFO_WE_SLAVE_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>7</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Upper 7 bits X is the number of 8 bit memory Data Slices supported.  R is the number of Ranks supported.  Lowest 11*R bits are from data slice 0, next 11*R bits are for data slice 1, etc. When a particular Rank is not used, corresponding ratio values are set as 11'h7ff.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>7</spirit:bitOffset>
            <spirit:bitWidth>25</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Ratio value for fifo WE slave DLL </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_GATELVL_INIT_MODE_CR</spirit:name>
        <spirit:addressOffset>0x26c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_GATELVL_INIT_MODE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> The user programmable init ratio selection mode.  1: selects a starting ratio value based on reg_phy_gatelvl_init_ratio port.  0: selects a starting ratio value based on Write Leveling of the same data slice. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>31</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Init ratio selection register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_GATELVL_INIT_RATIO_1_CR</spirit:name>
        <spirit:addressOffset>0x270</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_GATELVL_INIT_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Lower 16 bits X is the number of 8 bit memory Data Slices supported. R is the number of Ranks supported. Lowest 11*R bits are from data slice 0, next 11*R bits are for data slice 1, etc.  When a particular Rank is not used, corresponding ratio values are set as 11'h7ff.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Init ratio value configuration register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_GATELVL_INIT_RATIO_2_CR</spirit:name>
        <spirit:addressOffset>0x274</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_GATELVL_INIT_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Next 16 bits to PHY_GATELVL_INIT_RATIO_2_CR X is the number of 8 bit memory Data Slices supported. R is the number of Ranks supported. Lowest 11*R bits are from data slice 0, next 11*R bits are for data slice 1, etc.  When a particular Rank is not used, corresponding ratio values are set as 11'h7ff.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Init ratio value configuration register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_GATELVL_INIT_RATIO_3_CR</spirit:name>
        <spirit:addressOffset>0x278</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_GATELVL_INIT_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Next 16 bits to PHY_GATELVL_INIT_RATIO_2_CR X is the number of 8 bit memory Data Slices supported. R is the number of Ranks supported. Lowest 11*R bits are from data slice 0, next 11*R bits are for data slice 1, etc.  When a particular Rank is not used, corresponding ratio values are set as 11'h7ff.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Init ratio value configuration register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_GATELVL_INIT_RATIO_4_CR</spirit:name>
        <spirit:addressOffset>0x27c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_GATELVL_INIT_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>7</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Upper 7 bits X is the number of 8 bit memory Data Slices supported. R is the number of Ranks supported. Lowest 11*R bits are from data slice 0, next 11*R bits are for data slice 1, etc.  When a particular Rank is not used, corresponding ratio values are set as 11'h7ff.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>7</spirit:bitOffset>
            <spirit:bitWidth>25</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Init ratio value configuration register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_LOCAL_ODT_CR</spirit:name>
        <spirit:addressOffset>0x280</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_RD_LOCAL_ODT</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Tied to 0. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_PHY_WR_LOCAL_ODT</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Tied to 0.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_PHY_IDLE_LOCAL_ODT</spirit:name>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> The user programmable init ratio selection mode.  1: selects a starting ratio value based on reg_phy_gatelvl_init_ratio port.  0: selects a starting ratio value based on Write Leveling of the same data slice. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>28</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> PHY ODT control register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_INVERT_CLKOUT_CR</spirit:name>
        <spirit:addressOffset>0x284</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_INVERT_CLKOUT</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Inverts the polarity of DRAM clock.  0: core clock is passed on to DRAM. Most common usage mode.  1: inverted core clock is passed on to DRAM. Use this when CLK can arrive at a DRAM device ahead of DQS or coincidence with DQS based on boad topology. This effectively delays the CLK to the DRAM device by ½-cycle, providing a CLK edge that DQS can align to during leveling. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>15</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> PHY DRAM clock polarity change register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_RD_DQS_SLAVE_DELAY_1_CR</spirit:name>
        <spirit:addressOffset>0x288</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_RD_DQS_SLAVE_DELAY</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Lower 16 bits If REG_PHY_RD_DQS_SLAVE_FORCE is 1, replace delay/tap value for read DQS slave DLL with this value.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Delay value for read DQS </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_RD_DQS_SLAVE_DELAY_2_CR</spirit:name>
        <spirit:addressOffset>0x28c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_RD_DQS_SLAVE_DELAY</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Middle 16 bits If REG_PHY_RD_DQS_SLAVE_FORCE is 1, replace delay/tap value for read DQS slave DLL with this value.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Delay value for read DQS </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_RD_DQS_SLAVE_DELAY_3_CR</spirit:name>
        <spirit:addressOffset>0x290</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_RD_DQS_SLAVE_DELAY</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>13</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Upper 13 bits If REG_PHY_RD_DQS_SLAVE_FORCE is 1, replace delay/tap value for read DQS slave DLL with this value.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>13</spirit:bitOffset>
            <spirit:bitWidth>19</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Delay value for read DQS </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_RD_DQS_SLAVE_FORCE_CR</spirit:name>
        <spirit:addressOffset>0x294</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_RD_DQS_SLAVE_FORCE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 1: overwrite the delay/tap value for read DQS slave DLL with the value of the PHY_RD_DQS_SLAVE_DELAY.   </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>31</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Overwriting delay value selection reg for read DQS. </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_RD_DQS_SLAVE_RATIO_1_CR</spirit:name>
        <spirit:addressOffset>0x298</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x40</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_RD_DQS_SLAVE_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Lower 16 bits Ratio value for read DQS slave DLL. This is the fraction of a clock cycle represented by the shift to be applied to the read DQS in units of 256ths. In other words, the full-cycle tap value from the master DLL will be scaled by this number over 256 to get the delay value for the slave delay line.  Default value: 0x40  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Ratio value for read DQS slave DLL </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_RD_DQS_SLAVE_RATIO_2_CR</spirit:name>
        <spirit:addressOffset>0x29c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x401</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_RD_DQS_SLAVE_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Next 16 bits to PHY_RD_DQS_SLAVE_RATIO_1_CR Ratio value for read DQS slave DLL. This is the fraction of a clock cycle represented by the shift to be applied to the read DQS in units of 256ths. In other words, the full-cycle tap value from the master DLL will be scaled by this number over 256 to get the delay value for the slave delay line.  Default value: 0x40  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Ratio value for read DQS slave DLL </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_RD_DQS_SLAVE_RATIO_3_CR</spirit:name>
        <spirit:addressOffset>0x2a0</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x4010</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_RD_DQS_SLAVE_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Next 16 bits to PHY_RD_DQS_SLAVE_RATIO_2_CR Ratio value for read DQS slave DLL. This is the fraction of a clock cycle represented by the shift to be applied to the read DQS in units of 256ths. In other words, the full-cycle tap value from the master DLL will be scaled by this number over 256 to get the delay value for the slave delay line.  Default value: 0x40  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Ratio value for read DQS slave DLL </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_RD_DQS_SLAVE_RATIO_4_CR</spirit:name>
        <spirit:addressOffset>0x2a4</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_RD_DQS_SLAVE_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Upper 2 bits Ratio value for read DQS slave DLL. This is the fraction of a clock cycle represented by the shift to be applied to the read DQS in units of 256ths. In other words, the full-cycle tap value from the master DLL will be scaled by this number over 256 to get the delay value for the slave delay line.  Default value: 0x40  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>30</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Ratio value for read DQS slave DLL </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WR_DQS_SLAVE_DELAY_1_CR</spirit:name>
        <spirit:addressOffset>0x2a8</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_WR_DQS_SLAVE_DELAY</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Lower 16 bits If reg_phy_wr_dqs_slave_force is 1, replace delay/tap value for read DQS slave DLL with this value.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Delay value for write DQS </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WR_DQS_SLAVE_DELAY_2_CR</spirit:name>
        <spirit:addressOffset>0x2ac</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_WR_DQS_SLAVE_DELAY</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Middle 16 bits If reg_phy_wr_dqs_slave_force is 1, replace delay/tap value for read DQS slave DLL with this value.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Delay value for write DQS </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WR_DQS_SLAVE_DELAY_3_CR</spirit:name>
        <spirit:addressOffset>0x2b0</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_WR_DQS_SLAVE_DELAY</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>13</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Upper 13 bits If reg_phy_wr_dqs_slave_force is 1, replace delay/tap value for read DQS slave DLL with this value.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>13</spirit:bitOffset>
            <spirit:bitWidth>19</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Delay value for write DQS </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WR_DQS_SLAVE_FORCE_CR</spirit:name>
        <spirit:addressOffset>0x2b4</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_WR_DQS_SLAVE_FORCE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>5</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 1: overwrite the delay/tap value for read DQS slave DLL with the value of the reg_phy_wr_dqs_slave_delay bus.   </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>27</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Overwriting delay value selection reg for write DQS. </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WR_DQS_SLAVE_RATIO_1_CR</spirit:name>
        <spirit:addressOffset>0x2b8</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_WR_DQS_SLAVE_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Lower 16 bits Ratio value for read DQS slave DLL. This is the fraction of a clock cycle represented by the shift to be applied to the read DQS in units of 256ths. In other words, the full-cycle tap value from the master DLL will be scaled by this number over 256 to get the delay value for the slave delay line.  Default value: 0x40 </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Ratio value for write DQS slave DLL </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WR_DQS_SLAVE_RATIO_2_CR</spirit:name>
        <spirit:addressOffset>0x2bc</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_WR_DQS_SLAVE_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> next 16 bits to PHY_WR_DQS_SLAVE_RATIO_1_CR Ratio value for read DQS slave DLL. This is the fraction of a clock cycle represented by the shift to be applied to the read DQS in units of 256ths. In other words, the full-cycle tap value from the master DLL will be scaled by this number over 256 to get the delay value for the slave delay line.  Default value: 0x40 </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Ratio value for write DQS slave DLL </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WR_DQS_SLAVE_RATIO_3_CR</spirit:name>
        <spirit:addressOffset>0x2c0</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_WR_DQS_SLAVE_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> next 16 bits to PHY_WR_DQS_SLAVE_RATIO_2_CR Ratio value for read DQS slave DLL. This is the fraction of a clock cycle represented by the shift to be applied to the read DQS in units of 256ths. In other words, the full-cycle tap value from the master DLL will be scaled by this number over 256 to get the delay value for the slave delay line.  Default value: 0x40 </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Ratio value for write DQS slave DLL </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WR_DQS_SLAVE_RATIO_4_CR</spirit:name>
        <spirit:addressOffset>0x2c4</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_WR_DQS_SLAVE_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Upper 13 bits Ratio value for read DQS slave DLL. This is the fraction of a clock cycle represented by the shift to be applied to the read DQS in units of 256ths. In other words, the full-cycle tap value from the master DLL will be scaled by this number over 256 to get the delay value for the slave delay line.  Default value: 0x40 </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>30</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Ratio value for write DQS slave DLL </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WR_DATA_SLAVE_DELAY_1_CR</spirit:name>
        <spirit:addressOffset>0x2c8</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_WR_DATA_SLAVE_DELAY</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Lower 16 bits. If reg_phy_wr_data_slave_force is 1, replace delay/tap value for write data slave DLL with this value.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Delay value for write DATA </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WR_DATA_SLAVE_DELAY_2_CR</spirit:name>
        <spirit:addressOffset>0x2cc</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_WR_DATA_SLAVE_DELAY</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Middle 16 bits. If reg_phy_wr_data_slave_force is 1, replace delay/tap value for write data slave DLL with this value.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Delay value for write DATA </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WR_DATA_SLAVE_DELAY_3_CR</spirit:name>
        <spirit:addressOffset>0x2d0</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_WR_DATA_SLAVE_DELAY</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>13</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Upper 13 bits. If reg_phy_wr_data_slave_force is 1, replace delay/tap value for write data slave DLL with this value.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>13</spirit:bitOffset>
            <spirit:bitWidth>19</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Delay value for write DATA </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WR_DATA_SLAVE_FORCE_CR</spirit:name>
        <spirit:addressOffset>0x2d4</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_WR_DATA_SLAVE_FORCE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>5</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 1: overwrite the delay/tap value for write data slave DLL with the value of the reg_phy_wr_data_slave_delay bus.   </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>27</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Overwriting delay value selection reg for write DATA. </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WR_DATA_SLAVE_RATIO_1_CR</spirit:name>
        <spirit:addressOffset>0x2d8</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x40</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_WR_DATA_SLAVE_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Lower 16 bits. Ratio value for write data slave DLL. This is the fraction of a clock cycle represented by the shift to be applied to the write DQ muxes in units of 256ths. In other words, the full-cycle tap value from the master DLL will be scaled by this number over 256 to get the delay value for the slave delay line.  This is only used when reg_phy_use_wr_level=0.  X is the number of 8 bit memory Data Slices supported.  R is the number of Ranks supported.  Default value: 0x40 </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Ratio value for write DATA slave DLL </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WR_DATA_SLAVE_RATIO_2_CR</spirit:name>
        <spirit:addressOffset>0x2dc</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x401</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_WR_DATA_SLAVE_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Next 16 bits to PHY_WR_DATA_SLAVE_RATIO_1_CR. Ratio value for write data slave DLL. This is the fraction of a clock cycle represented by the shift to be applied to the write DQ muxes in units of 256ths. In other words, the full-cycle tap value from the master DLL will be scaled by this number over 256 to get the delay value for the slave delay line.  This is only used when reg_phy_use_wr_level=0.  X is the number of 8 bit memory Data Slices supported.  R is the number of Ranks supported.  Default value: 0x40 </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Ratio value for write DATA slave DLL </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WR_DATA_SLAVE_RATIO_3_CR</spirit:name>
        <spirit:addressOffset>0x2e0</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x401</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_WR_DATA_SLAVE_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Next 16 bits to PHY_WR_DATA_SLAVE_RATIO_2_CR. Ratio value for write data slave DLL. This is the fraction of a clock cycle represented by the shift to be applied to the write DQ muxes in units of 256ths. In other words, the full-cycle tap value from the master DLL will be scaled by this number over 256 to get the delay value for the slave delay line.  This is only used when reg_phy_use_wr_level=0.  X is the number of 8 bit memory Data Slices supported.  R is the number of Ranks supported.  Default value: 0x40 </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Ratio value for write DATA slave DLL </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WR_DATA_SLAVE_RATIO_4_CR</spirit:name>
        <spirit:addressOffset>0x2e4</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_WR_DATA_SLAVE_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Upper 2 bits. Ratio value for write data slave DLL. This is the fraction of a clock cycle represented by the shift to be applied to the write DQ muxes in units of 256ths. In other words, the full-cycle tap value from the master DLL will be scaled by this number over 256 to get the delay value for the slave delay line.  This is only used when reg_phy_use_wr_level=0.  X is the number of 8 bit memory Data Slices supported.  R is the number of Ranks supported.  Default value: 0x40 </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>30</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Ratio value for write DATA slave DLL </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WRLVL_INIT_MODE_CR</spirit:name>
        <spirit:addressOffset>0x2e8</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_WRLVL_INIT_MODE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> The user programmable init ratio selection mode.  1: selects a starting ratio value based on reg_phy_wrlvl_init_ratio port.  0: selects a starting ratio value based on Write Leveling of previous data slice. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>31</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Init ratio selection register used by Write Leveling </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WRLVL_INIT_RATIO_1_CR</spirit:name>
        <spirit:addressOffset>0x2ec</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_WRLVL_INIT_MODE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Lower 16 bits. The user programmable init ratio used by Write Leveling FSM when REG_PHY_WRLVL_INIT_MODE port is set to 1.  X is the number of 8 bit memory Data Slices supported.  R is the number of Ranks supported.  The recommended setting of reg_phy_wrlvl_init_ratio is half cycle less than total skew between CLK &amp; DQS at the DRAM. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Configuring register for init ratio used by Write Leveling </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WRLVL_INIT_RATIO_2_CR</spirit:name>
        <spirit:addressOffset>0x2f0</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_WRLVL_INIT_MODE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Next 16 bits to PHY_WRLVL_INIT_RATIO_1_CR. The user programmable init ratio used by Write Leveling FSM when REG_PHY_WRLVL_INIT_MODE port is set to 1.  X is the number of 8 bit memory Data Slices supported.  R is the number of Ranks supported.  The recommended setting of reg_phy_wrlvl_init_ratio is half cycle less than total skew between CLK &amp; DQS at the DRAM. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Configuring register for init ratio used by Write Leveling </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WRLVL_INIT_RATIO_3_CR</spirit:name>
        <spirit:addressOffset>0x2f4</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_WRLVL_INIT_MODE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Next 16 bits to PHY_WRLVL_INIT_RATIO_2_CR. The user programmable init ratio used by Write Leveling FSM when REG_PHY_WRLVL_INIT_MODE port is set to 1.  X is the number of 8 bit memory Data Slices supported.  R is the number of Ranks supported.  The recommended setting of reg_phy_wrlvl_init_ratio is half cycle less than total skew between CLK &amp; DQS at the DRAM. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Configuring register for init ratio used by Write Leveling </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WRLVL_INIT_RATIO_4_CR</spirit:name>
        <spirit:addressOffset>0x2f8</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_WRLVL_INIT_MODE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Upper 2 bits. The user programmable init ratio used by Write Leveling FSM when REG_PHY_WRLVL_INIT_MODE port is set to 1.  X is the number of 8 bit memory Data Slices supported.  R is the number of Ranks supported.  The recommended setting of reg_phy_wrlvl_init_ratio is half cycle less than total skew between CLK &amp; DQS at the DRAM.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>30</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Configuring register for init ratio used by Write Leveling </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WR_RD_RL_CR</spirit:name>
        <spirit:addressOffset>0x2fc</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_RD_RL_DELAY</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>5</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> This delay determines when to select the active rank's ratio logic delay for FIFO_WE and Read DQS slave delay lines after PHY receives a read command at Control Interface  This is only used for multi-rank designs when reg_phy_use_rank0_delays=0. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_PHY_WR_RL_DELAY</spirit:name>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>5</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> This delay determines when to select the active rank's ratio logic delay for Write Data and Write DQS slave delay lines after PHY receives a write command at Control Interface.  This is only used for multi-rank designs when reg_phy_use_rank0_delays=0.  This must be programmed as (Write Latency -4) with a minimum value of 1. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>10</spirit:bitOffset>
            <spirit:bitWidth>22</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Configurable register for delays to read and write. </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_RDC_FIFO_RST_ERR_CNT_CLR_CR</spirit:name>
        <spirit:addressOffset>0x300</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_RDC_FIFO_RST_ERR_CNT_CLR</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Clear/reset for counter rdc_fifo_rst_err_cnt[3:0]. 0: no clear, 1: clear.   </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>31</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Reset register for counter </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_RDC_WE_TO_RE_DELAY_CR</spirit:name>
        <spirit:addressOffset>0x304</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_RDC_WE_TO_RE_DELAY</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Register input - specified in number of clock cycles  This is valid only if use_fixed_re? is high.  As Read Capture FIFO depth is limited to 8 entries only, the recommended value for this port is less than 8, even though a higher number may work in some cases depending upon memory system design.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>28</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Configurable register for delay between WE and RE </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_USE_FIXED_RE_CR</spirit:name>
        <spirit:addressOffset>0x308</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_USE_FIXED_RE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> When 1: PHY generates FIFO read enable after fixed number of clock cycles as defined by reg_phy_rdc_we_to_re_delay[3:0].  When 0: PHY uses the not_empty method to do the read enable generation.  Note: This port must be set HIGH during training/leveling process i.e. when ddrc_dfi_wrlvl_en/ddrc_dfi_rdlvl_en/ddrc_dfi_rdlvl_gate_en port is set HIGH.   </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>31</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Selection register for generating read enable to FIFO. </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_USE_RANK0_DELAYS_CR</spirit:name>
        <spirit:addressOffset>0x30c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_USE_RANK0_DELAYS</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Delay selection. This applies to multi-rank designs only.  1- Rank 0 delays are used for all ranks  0- Each Rank uses its own delay  This port must be set HIGH when write latency &lt; 5. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>31</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Delay selection. This applies to multi-rank designs only.  </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_USE_LVL_TRNG_LEVEL_CR</spirit:name>
        <spirit:addressOffset>0x310</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_USE_RD_DATA_EYE_LEVEL</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Read Data Eye training control.  0 : Use register programmed ratio values  1 : Use ratio for delay line calculated by data eye leveling  Note: This port must be set 0 when PHY is not working in DDR3 mode   </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_PHY_USE_RD_DQS_GATE_LEVEL</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Read DQS Gate training control.  0 : Use register programmed ratio values 1 : Use ratio for delay line calculated by DQS gate leveling  This can be used in DDR2 mode also.  Note: This port must be set 0 when PHY is not working in DDR2/DDR3 mode  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_PHY_USE_WR_LEVEL</spirit:name>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Write Leveling training control.  0 : Use register programmed ratio values  1 : Use ratio for delay line calculated by write leveling  Note: This port must be set 0 when PHY is not working in DDR3 mode.   </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>13</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> training control register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_DYN_CONFIG_CR</spirit:name>
        <spirit:addressOffset>0x314</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_CMD_LATENCY</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Extra Command Latency. 1: cmd bus has 1 extra cycle of latency 0: default  This port is available only when MEMP_CMD_PIPELINE is defined.   </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_PHY_CLK_STALL_LEVEL</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> This port determines whether delay line clock stalls at HIGH or LOW level. The expected input is a very slow clock to avoid asymmetric aging in delay lines. This port is implementation specific and may not be available in all PHYs.   </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_PHY_BL2</spirit:name>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Burst length control. 1:  burst length 2 0: other burst length  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_PHY_LPDDR</spirit:name>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> If the PHY is operating in LPDDR Mode </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_PHY_DIS_PHY_CTRL_RSTN</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Disable the PHY Control Macro reset. 1: PHY Control macro doesn't get reset. 0: PHY Control macro gets reset. (default)     </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>27</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> PHY dynamically control register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_RD_WR_GATE_LVL_CR</spirit:name>
        <spirit:addressOffset>0x318</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>REG_PHY_RDLVL_INC_MODE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>5</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Incremental Read Data Eye Training Mode.  One bit for each data slice. 1: incremental read data eye training.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_PHY_WRLVL_INC_MODE</spirit:name>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>5</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Incremental Write Leveling Mode.  One bit for each data slice. 1: incremental write leveling. 0: normal write leveling.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_PHY_GATELVL_INC_MODE</spirit:name>
            <spirit:bitOffset>10</spirit:bitOffset>
            <spirit:bitWidth>5</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Incremental Read DQS Gate Training Mode. One bit for each data slice.  1: incremental Read Gate training. 0: normal Read Gate training.     </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>15</spirit:bitOffset>
            <spirit:bitWidth>17</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Training mode selection register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_DYN_RESET_CR</spirit:name>
        <spirit:addressOffset>0x31c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_RESET</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> A 1 in this register will bring the PHY out of Reset. This is dynamic and synchronized internally before giving to PHY.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>31</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> This register will bring the PHY out of Reset. </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_LEVELLING_FAILURE_SR</spirit:name>
        <spirit:addressOffset>0x320</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_GATELVL_INC_FAIL</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>5</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Incremental Gate Leveling Fail Status Flag.  1 : Incremental gate leveling test has failed.  0 : Incremental gate leveling test has passed.   </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>PHY_REG_WRLVL_INC_FAIL</spirit:name>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>5</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Incremental Write Leveling Fail Status Flag.  1 : Incremental write leveling test has failed.  0 : Incremental write leveling test has passed. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>PHY_REG_RDLVL_INC_FAIL</spirit:name>
            <spirit:bitOffset>10</spirit:bitOffset>
            <spirit:bitWidth>5</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Incremental Read Leveling Fail Status Flag.  1 : Incremental read leveling test has failed.  0 : Incremental read leveling test has passed.   </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>15</spirit:bitOffset>
            <spirit:bitWidth>17</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Leveling failure status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_BIST_ERROR_1_SR</spirit:name>
        <spirit:addressOffset>0x324</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_BIST_ERR</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Lower 16 bits Mismatch error flag from the BIST Checker.  1 : Pattern mismatch error  0 : All patterns matched his is a sticky flag. In order to clear this bit, port reg_phy_bist_err_clr must be set HIGH.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> BIST error status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_BIST_ERROR_2_SR</spirit:name>
        <spirit:addressOffset>0x328</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_BIST_ERR</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Middle 16 bits Mismatch error flag from the BIST Checker.  1 : Pattern mismatch error  0 : All patterns matched his is a sticky flag. In order to clear this bit, port reg_phy_bist_err_clr must be set HIGH.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> BIST error status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_BIST_ERROR_3_SR</spirit:name>
        <spirit:addressOffset>0x32c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_BIST_ERR</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>13</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Upper 13 bits Mismatch error flag from the BIST Checker.  1 : Pattern mismatch error  0 : All patterns matched his is a sticky flag. In order to clear this bit, port reg_phy_bist_err_clr must be set HIGH.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>13</spirit:bitOffset>
            <spirit:bitWidth>19</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> BIST error status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WRLVL_DQS_RATIO_1_SR</spirit:name>
        <spirit:addressOffset>0x330</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_WRLVL_DQS_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Lower 16 bits Ratio value generated by the write leveling FSM for Write DQS.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Write level DQS ratio status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WRLVL_DQS_RATIO_2_SR</spirit:name>
        <spirit:addressOffset>0x334</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_WRLVL_DQS_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Next 16 bits to PHY_WRLVL_DQS_RATIO_1_SR Ratio value generated by the write leveling FSM for Write DQS.   </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Write level DQS ratio status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WRLVL_DQS_RATIO_3_SR</spirit:name>
        <spirit:addressOffset>0x338</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_WRLVL_DQS_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Next 16 bits to PHY_WRLVL_DQS_RATIO_2_SR Ratio value generated by the write leveling FSM for Write DQS.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Write level DQS ratio status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WRLVL_DQS_RATIO_4_SR</spirit:name>
        <spirit:addressOffset>0x33c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_WRLVL_DQS_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Upper 2 bits Ratio value generated by the write leveling FSM for Write DQS.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>30</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Write level DQS ratio status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WRLVL_DQ_RATIO_1_SR</spirit:name>
        <spirit:addressOffset>0x340</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_WRLVL_DQ_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Lower 16 bits Ratio value generated by the write leveling FSM for Write Data.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Write level DQ ratio status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WRLVL_DQ_RATIO_2_SR</spirit:name>
        <spirit:addressOffset>0x344</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_WRLVL_DQ_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Next 16 bits to PHY_WRLVL_DQ_RATIO_1_SR. Ratio value generated by the write leveling FSM for Write Data.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Write level DQ ratio status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WRLVL_DQ_RATIO_3_SR</spirit:name>
        <spirit:addressOffset>0x348</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_WRLVL_DQ_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Next 16 bits to PHY_WRLVL_DQ_RATIO_2_SR. Ratio value generated by the write leveling FSM for Write Data.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Write level DQ ratio status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WRLVL_DQ_RATIO_4_SR</spirit:name>
        <spirit:addressOffset>0x34c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_WRLVL_DQ_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Upper 2 bits. Ratio value generated by the write leveling FSM for Write Data.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>30</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Write level DQ ratio status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_RDLVL_DQS_RATIO_1_SR</spirit:name>
        <spirit:addressOffset>0x350</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_RDLVL_DQS_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Lower 16 bits. Ratio value generated by Read Data Eye training FSM.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Read level DQS ratio status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_RDLVL_DQS_RATIO_2_SR</spirit:name>
        <spirit:addressOffset>0x354</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_RDLVL_DQS_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Next 16 bits to PHY_RDLVL_DQS_RATIO_1_SR. Ratio value generated by Read Data Eye training FSM.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Read level DQS ratio status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_RDLVL_DQS_RATIO_3_SR</spirit:name>
        <spirit:addressOffset>0x358</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_RDLVL_DQS_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Next 16 bits to PHY_RDLVL_DQS_RATIO_2_SR. Ratio value generated by Read Data Eye training FSM.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Read level DQS ratio status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_RDLVL_DQS_RATIO_4_SR</spirit:name>
        <spirit:addressOffset>0x35c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_RDLVL_DQS_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Upper 2 bits. Ratio value generated by Read Data Eye training FSM.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>30</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Read level DQS ratio status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_FIFO_1_SR</spirit:name>
        <spirit:addressOffset>0x360</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_RDLVL_FIFOWEIN_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Lower 16 bits. Ratio value generated by Read Gate training FSM.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> FIFO status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_FIFO_2_SR</spirit:name>
        <spirit:addressOffset>0x364</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_RDLVL_FIFOWEIN_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Next 16 bits to PHY_FIFO_1_SR.  Ratio value generated by Read Gate training FSM.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> FIFO status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_FIFO_3_SR</spirit:name>
        <spirit:addressOffset>0x368</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_RDLVL_FIFOWEIN_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Next 16 bits to PHY_FIFO_2_SR.  Ratio value generated by Read Gate training FSM.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> FIFO status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_FIFO_4_SR</spirit:name>
        <spirit:addressOffset>0x36c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_RDLVL_FIFOWEIN_RATIO</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>7</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Upper 7 bits. Ratio value generated by Read Gate training FSM.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>REG_PHY_RDC_FIFO_RST_ERR_CNT</spirit:name>
            <spirit:bitOffset>7</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Counter for counting how many times the pointers of read capture FIFO differ when they are reset by dll_calib.   </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>11</spirit:bitOffset>
            <spirit:bitWidth>21</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> FIFO status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_MASTER_DLL_SR</spirit:name>
        <spirit:addressOffset>0x370</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_STATUS_DLL_LOCK</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>3</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Status signal:  1 - Master DLL is locked  0 - Master DLL is notlocked  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>PHY_REG_STATUS_OF_IN_LOCK_STATE</spirit:name>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>6</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Lock status from the Output Filter module inside the Master DLL. (2 bits per MDLL) Bit[0] - Fine delay line lock status.  1: locked, 0: unlocked.  Bit[1] - Coarse delay line lock status. 1: locked, 0: unlocked.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>9</spirit:bitOffset>
            <spirit:bitWidth>23</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Master DLL status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_DLL_SLAVE_VALUE_1_SR</spirit:name>
        <spirit:addressOffset>0x374</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_STATUS_DLL_SLAVE_VALUE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Lower 16 bits. Shows the current Coarse and Fine delay values measured for a full-cycle shift by each master DLL [1:0] - Fine value  [8:2] - Coarse value </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Slave DLL status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_DLL_SLAVE_VALUE_2_SR</spirit:name>
        <spirit:addressOffset>0x378</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_STATUS_DLL_SLAVE_VALUE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>11</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Upper 11 bits. Shows the current Coarse and Fine delay values measured for a full-cycle shift by each master DLL [1:0] - Fine value  [8:2] - Coarse value </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>11</spirit:bitOffset>
            <spirit:bitWidth>21</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Slave DLL status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_STATUS_OF_IN_DELAY_VAL_1_SR</spirit:name>
        <spirit:addressOffset>0x37c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_STATUS_OF_IN_DELAY_VALUE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Lower 16 bits. The Coarse and Fine values going into the Output Filter in Master DLL. {coarse[6:0],fine[1:0]}  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> IN delay status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_STATUS_OF_IN_DELAY_VAL_2_SR</spirit:name>
        <spirit:addressOffset>0x380</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_STATUS_OF_IN_DELAY_VALUE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>11</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Upper 11 bits. The Coarse and Fine values going into the Output Filter in Master DLL. {coarse[6:0],fine[1:0]}  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>11</spirit:bitOffset>
            <spirit:bitWidth>21</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> IN delay status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_STATUS_OF_OUT_DELAY_VAL_1_SR</spirit:name>
        <spirit:addressOffset>0x384</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_STATUS_OF_OUT_DELAY_VALUE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Lower 16 bits. The Coarse and Fine values coming out of the Output Filter in Master DLL. {coarse[6:0],fine[1:0]} </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> OUT delay status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_STATUS_OF_OUT_DELAY_VAL_2_SR</spirit:name>
        <spirit:addressOffset>0x388</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_STATUS_OF_OUT_DELAY_VALUE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>11</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Upper 11 bits. The Coarse and Fine values coming out of the Output Filter in Master DLL. {coarse[6:0],fine[1:0]}  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>11</spirit:bitOffset>
            <spirit:bitWidth>21</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> OUT delay status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_DLL_LOCK_AND_SLAVE_VAL_SR</spirit:name>
        <spirit:addressOffset>0x38c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_STATUS_PHY_CTRL_DLL_SLAVE_VALUE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>9</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Shows the current Coarse and Fine delay value going to the PHY_CTRL Slave DLL. [1:0] - Fine value [8:2] - Coarse value    </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>PHY_REG_STATUS_PHY_CTRL_DLL_LOCK</spirit:name>
            <spirit:bitOffset>9</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> The Coarse and Fine values coming out of the Output Filter in Master DLL. {coarse[6:0],fine[1:0]}  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>10</spirit:bitOffset>
            <spirit:bitWidth>22</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DLL lock status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_CTRL_OUTPUT_FILTER_SR</spirit:name>
        <spirit:addressOffset>0x390</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_STATUS_PHY_CTRL_OF_IN_DELAY_VALUE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>9</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> The Coarse and Fine values going into the Output Filter in PHY_CTRL Master DLL. {coarse[6:0],fine[1:0]}  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>PHY_REG_STATUS_PHY_CTRL_OF_IN_LOCK_STATE</spirit:name>
            <spirit:bitOffset>9</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Lock status from the Output Filter module inside the PHY_CTRL Master DLL.  Bit[0] - Fine delay line lock status. 1: locked, 0: unlocked.  Bit[1] - Coarse delay line lock status. 1: locked, 0: unlocked.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>11</spirit:bitOffset>
            <spirit:bitWidth>21</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Control output filter status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_CTRL_OF_OUTPUT_DELAY_SR</spirit:name>
        <spirit:addressOffset>0x394</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_CTRL_OF_OUTPUT_DELAY_SR</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>9</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> The Coarse and Fine values going into the Output Delay in PHY_CTRL Master DLL. {coarse[6:0],fine[1:0]}  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>9</spirit:bitOffset>
            <spirit:bitWidth>23</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Control output delay status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_RD_DQS_SLAVE_DLL_VAL_1_SR</spirit:name>
        <spirit:addressOffset>0x398</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_STATUS_RD_DQS_SLAVE_DLL_VALUE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Lower 16 bits. Delay value applied to read DQS slave DLL. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Read DQS slave DLL status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_RD_DQS_SLAVE_DLL_VAL_2_SR</spirit:name>
        <spirit:addressOffset>0x39c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_STATUS_RD_DQS_SLAVE_DLL_VALUE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Middle 16 bits. Delay value applied to read DQS slave DLL. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Read DQS slave DLL status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_RD_DQS_SLAVE_DLL_VAL_3_SR</spirit:name>
        <spirit:addressOffset>0x3a0</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_STATUS_RD_DQS_SLAVE_DLL_VALUE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>13</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Upper 13 bits. Delay value applied to read DQS slave DLL. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>13</spirit:bitOffset>
            <spirit:bitWidth>19</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Read DQS slave DLL status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WR_DATA_SLAVE_DLL_VAL_1_SR</spirit:name>
        <spirit:addressOffset>0x3a4</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_STATUS_WR_DATA_SLAVE_DLL_VALUE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Lower 16 bits. Delay value applied to write data slave DLL.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Write DATA slave DLL status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WR_DATA_SLAVE_DLL_VAL_2_SR</spirit:name>
        <spirit:addressOffset>0x3a8</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_STATUS_WR_DATA_SLAVE_DLL_VALUE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Middle 16 bits. Delay value applied to write data slave DLL.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Write DATA slave DLL status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WR_DATA_SLAVE_DLL_VAL_3_SR</spirit:name>
        <spirit:addressOffset>0x3ac</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_STATUS_WR_DATA_SLAVE_DLL_VALUE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>13</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Upper 13 bits. Delay value applied to write data slave DLL.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>13</spirit:bitOffset>
            <spirit:bitWidth>19</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Write DATA slave DLL status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_FIFO_WE_SLAVE_DLL_VAL_1_SR</spirit:name>
        <spirit:addressOffset>0x3b0</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_STATUS_FIFO_WE_SLAVE_DLL_VALUE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Lower 16 bits. Delay value applied to FIFO WE slave DLL.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> FIFO WE slave DLL status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_FIFO_WE_SLAVE_DLL_VAL_2_SR</spirit:name>
        <spirit:addressOffset>0x3b4</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_STATUS_FIFO_WE_SLAVE_DLL_VALUE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Middle 16 bits. Delay value applied to FIFO WE slave DLL.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> FIFO WE slave DLL status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_FIFO_WE_SLAVE_DLL_VAL_3_SR</spirit:name>
        <spirit:addressOffset>0x3b8</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_STATUS_FIFO_WE_SLAVE_DLL_VALUE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Upper 13 bits. Delay value applied to FIFO WE slave DLL.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> FIFO WE slave DLL status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WR_DQS_SLAVE_DLL_VAL_1_SR</spirit:name>
        <spirit:addressOffset>0x3bc</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_STATUS_WR_DQS_SLAVE_DLL_VALUE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Lower 16 bits. Delay value applied to write DQS slave DLL.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Write DQS slave DLL status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WR_DQS_SLAVE_DLL_VAL_2_SR</spirit:name>
        <spirit:addressOffset>0x3c0</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_STATUS_WR_DQS_SLAVE_DLL_VALUE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Middle 16 bits. Delay value applied to write DQS slave DLL.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Write DQS slave DLL status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_WR_DQS_SLAVE_DLL_VAL_3_SR</spirit:name>
        <spirit:addressOffset>0x3c4</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_STATUS_WR_DQS_SLAVE_DLL_VALUE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Upper 13 bits. Delay value applied to write DQS slave DLL.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Write DQS slave DLL status register </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>PHY_CTRL_SLAVE_DLL_VAL_SR</spirit:name>
        <spirit:addressOffset>0x3c8</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>PHY_REG_STATUS_PHY_CTRL_SLAVE_DLL_VALUE</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>9</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Delay value applied to write DQS slave DLL.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>9</spirit:bitOffset>
            <spirit:bitWidth>23</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> DLL controller status register </spirit:description>
      </spirit:register>
    </spirit:addressBlock>
    <spirit:addressBlock>
      <spirit:baseAddress>0x0</spirit:baseAddress>
      <spirit:range>0x600</spirit:range>
      <spirit:width>16</spirit:width>
      <spirit:register>
        <spirit:name>DDR_FIC_NB_ADDR_CR</spirit:name>
        <spirit:addressOffset>0x400</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDR_FIC_NB_ADD</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> This indicates the base address of non bufferable address region. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Indicates the base address of non bufferable address region. </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDR_FIC_NBRWB_SIZE_CR</spirit:name>
        <spirit:addressOffset>0x404</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDR_FIC_NUBF_SZ</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> This signal indicates the size of non bufferable address region.  The region sizes are as follows: 0000: Reserved (default) 0001: 64KB bufferable region 0010: 128KB bufferable region    0011: 256KB bufferable region 0100: 512KB bufferable region  0101: 1MB bufferable region  0110: 2MB bufferable region  0111: 4MB bufferable region  1000: 8MB bufferable region 1001: 16MB bufferable region  1010: 32MB bufferable region        1011: 64MB bufferable region        1100: 128MB bufferable region      1101: 256MB bufferable region      1110: 512MB bufferable region      1111: 1GB bufferable region          </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved_1</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>DDR_FIC_WCB_SZ</spirit:name>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Configures write buffer and read buffer size as per DDR burst size.  This port is common for all buffers. Buffers can be configured to 16 byte or 32 byte size.  0b: buffer size is configured to 16 byte 1b: buffer size is configured to 32 byte </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved_2</spirit:name>
            <spirit:bitOffset>9</spirit:bitOffset>
            <spirit:bitWidth>23</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Indicates the size of non bufferable address region.  </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDR_FIC_WB_TIMEOUT_CR</spirit:name>
        <spirit:addressOffset>0x408</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDR_FIC_TIMER</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>10</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 10 bit timer interface used to configure time out register.  Once timer reaches to time out value, flush request is generated by flush controller in DDR_FIC. This port is common for all buffers. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>10</spirit:bitOffset>
            <spirit:bitWidth>22</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> 10 bit timer interface used to configure time out register.  </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDR_FIC_HPD_SW_RW_EN_CR</spirit:name>
        <spirit:addressOffset>0x40c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDR_FIC_M2_WEN</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 1: Enable write buffer for AHB lite master2. 0: Disable write buffer for AHB lite master2. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved_1</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>DDR_FIC_M2_REN</spirit:name>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 1: Enable read buffer for AHB lite master2. 0: Disable read buffer for AHB lite master2. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved_2</spirit:name>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>DDR_FIC_M1_WEN</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 1: Enable write buffer for AHB lite master1. 0: Disable write buffer for AHB lite master1. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved_3</spirit:name>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>DDR_FIC_M1_REN</spirit:name>
            <spirit:bitOffset>6</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 1: Enable read buffer for AHB lite master1. 0: Disable read buffer for AHB lite master1. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved_4</spirit:name>
            <spirit:bitOffset>7</spirit:bitOffset>
            <spirit:bitWidth>25</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Enable write buffer and read buffer register for AHB lite master1 and master2 </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDR_FIC_HPD_SW_RW_INVAL_CR</spirit:name>
        <spirit:addressOffset>0x410</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDR_FIC_invalid_M2</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 1: Invalidate read buffer for AHB lite master2. 0: Default. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved_1</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>DDR_FIC_flshM2</spirit:name>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 1: Flush write buffer for AHB lite master2. 0: Default.   </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved_2</spirit:name>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>DDR_FIC_invalid_M1</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 1: Invalidate write buffer for AHB lite master1. 0: Default </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved_3</spirit:name>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>DDR_FIC_flshM1</spirit:name>
            <spirit:bitOffset>6</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 1: Flush read buffer for AHB lite master1. 0: Default. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved_4</spirit:name>
            <spirit:bitOffset>7</spirit:bitOffset>
            <spirit:bitWidth>25</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Invalidates write buffer and read buffer for AHB lite master1 and master2. </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDR_FIC_SW_WR_ERCLR_CR</spirit:name>
        <spirit:addressOffset>0x414</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDR_FIC_M1_WR_ERCLR</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Clear bit for error status posted by AHB lite master1 write buffer. Once it goes high, error status is cleared. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>3</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>DDR_FIC_M2_WR_ERCLR</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Clear bit for error status of AHB lite master2 write buffer. Once it goes high, error status is cleared.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved_1</spirit:name>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>3</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>DDR_FIC_LTO_CLR</spirit:name>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Clear signal to lock time out interrupt. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved_2</spirit:name>
            <spirit:bitOffset>9</spirit:bitOffset>
            <spirit:bitWidth>23</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Clear bit for error status by AHB lite master1 and master2 write buffer. </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDR_FIC_ERR_INT_ENABLE_CR</spirit:name>
        <spirit:addressOffset>0x418</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>SYR_HPD_WR_ERR</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Status bit. Goes high when error response is received for bufferable write request.  Goes low when processor serves the interrupt when the SYR_HPD_WR_ERR bit goes high and makes clear bit for AHB lite master2 high. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>SYR_SW_WR_ERR</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Status bit.  Goes high when error response is received for bufferable write request.  Goes low when processor serves interrupt and makes clear bit for AHB lite master1 </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>30</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Used for Interrupt generation.   </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDR_FIC_NUM_AHB_MASTERS_CR</spirit:name>
        <spirit:addressOffset>0x41c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>Reserved_1</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>CFG_NUM_AHB_MASTERS</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Defines whether one or two AHB lite 32 bit Master's are implemented in fabric.  0: One 32 bit AHB Master implemented in fabric  1: Two 32 bit AHB Master's implemented in fabric. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved_2</spirit:name>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>27</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Defines whether one or two AHB lite 32 bit master's are implemented in fabric. </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDR_FIC_HPB_ERR_ADDR_1_SR</spirit:name>
        <spirit:addressOffset>0x420</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDR_FIC_M1_ERR_ADD</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Lower 16 bits Tag of write buffer for which error response is received is placed in this register. Following values are updated in this register as per buffer size, For 16 bits Buffer size DDR_FIC_M1_ERR_ADD[31:0] is (TAG, 0000) and for 32 bits Buffer size DDR_FIC_M1_ERR_ADD[31:0] is (TAG[27:1], 00000) </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Tag of write buffer for which error response is received is placed in this register.  </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDR_FIC_HPB_ERR_ADDR_2_SR</spirit:name>
        <spirit:addressOffset>0x424</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDR_FIC_M1_ERR_ADD</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Upper 16 bits Tag of write buffer for which error response is received is placed in this register. Following values are updated in this register as per buffer size, For 16 bits Buffer size DDR_FIC_M1_ERR_ADD[31:0] is (TAG, 0000) and for 32 bits Buffer size DDR_FIC_M1_ERR_ADD[31:0] is (TAG[27:1], 00000)  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Tag of write buffer for which error response is received is placed in this register.  </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDR_FIC_SW_ERR_ADDR_1_SR</spirit:name>
        <spirit:addressOffset>0x428</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDR_FIC_M2_ERR_ADD</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Lower 16 bits Tag of write buffer for which error response is received is placed in this register. Following values are updated in this register as per buffer size, For 16 bits Buffer size DDR_FIC_M2_ERR_ADD[31:0] is (TAG, 0000) and for 32 bits Buffer size DDR_FIC_M2_ERR_ADD[31:0] is (TAG[27:1], 00000) </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Tag of write buffer for which error response is received is placed in this register.  </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDR_FIC_SW_ERR_ADDR_2_SR</spirit:name>
        <spirit:addressOffset>0x42c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDR_FIC_M2_ERR_ADD</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Upper 16 bits Tag of write buffer for which error response is received is placed in this register. Following values are updated in this register as per buffer size, For 16 bits Buffer size DDR_FIC_M2_ERR_ADD[31:0] is (TAG, 0000) and for 32 bits Buffer size DDR_FIC_M2_ERR_ADD[31:0] is (TAG[27:1], 00000) </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Tag of write buffer for which error response is received is placed in this register.  </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDR_FIC_HPD_SW_WRB_EMPTY_SR</spirit:name>
        <spirit:addressOffset>0x430</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDR_FIC_M2_WBEMPTY</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> 1: Write buffer of AHB lite master2 is not having valid data. 0: Default. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved_1</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>DDR_FIC_M2_RBEMPTY</spirit:name>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> 1: Read buffer of AHB lite master2 is not having valid data. 0: Default. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved_2</spirit:name>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>DDR_FIC_M1_WBEMPTY</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> 1: Write buffer of AHB lite master1 is not having valid data. 0: Default. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved_3</spirit:name>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>DDR_FIC_M1_RBEMPTY</spirit:name>
            <spirit:bitOffset>6</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> 1b: Read buffer of AHB lite master1 is not having valid data.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved_4</spirit:name>
            <spirit:bitOffset>7</spirit:bitOffset>
            <spirit:bitWidth>25</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Indicates valid data in read and write buffer for AHB lite master1 and master2. </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDR_FIC_SW_HPB_LOCKOUT_SR</spirit:name>
        <spirit:addressOffset>0x434</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDR_FIC_M1_RDSBL_DN</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> High indicates AHB lite master1 write buffer is disabled. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>DDR_FIC_M1_WDSBL_DN</spirit:name>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> High indicates AHB lite master1 read buffer is disabled.  </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>DDR_FIC_M2_RDSBL_DN</spirit:name>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> High indicates AHB lite master2 read buffer is disabled. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>DDR_FIC_M2_WDSBL_DN</spirit:name>
            <spirit:bitOffset>6</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> High indicates AHB lite master2 write buffer is disabled. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved_1</spirit:name>
            <spirit:bitOffset>7</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>DDR_FIC_LCKTOUT</spirit:name>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Indicates lock counter in arbiter reached to its maximum value. Lock counter (20-bit) starts counting when a locked request got access to bus and will be cleared when lock signal becomes logic 0. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved_2</spirit:name>
            <spirit:bitOffset>9</spirit:bitOffset>
            <spirit:bitWidth>23</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Write and read buffer status register for AHB lite master1 and master2. </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDR_FIC_SW_HPD_WERR_SR</spirit:name>
        <spirit:addressOffset>0x438</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDR_FIC_M2_WR_ERR</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Status bit. Goes high when error response is received for bufferable write request.  Goes low when processor serves the interrupt when the DDR_FIC_M2_wr_err bit goes high and makes clear bit for AHB lite master2 high. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved_1</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>7</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>DDR_FIC_M1_WR_ERR</spirit:name>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Status bit.  Goes high when error response is received for bufferable write request.  Goes low when processor serves interrupt and makes clear bit for AHB lite master1 </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved_2</spirit:name>
            <spirit:bitOffset>9</spirit:bitOffset>
            <spirit:bitWidth>23</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Error response register for bufferable write request. </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDR_FIC_LOCK_TIMEOUTVAL_1_CR</spirit:name>
        <spirit:addressOffset>0x440</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>CFGR_LOCK_TIMEOUT_REG</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Lower 16 bits. Lock time out 20 bit register.  Indicates maximum number of cycles a master can hold the bus for locked transfer. If master hold the bus for locked transfer more than the required cycles, an interrupt is generated. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Indicates maximum number of cycles a master can hold the bus for locked transfer. </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDR_FIC_LOCK_TIMEOUTVAL_2_CR</spirit:name>
        <spirit:addressOffset>0x444</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>CFGR_LOCK_TIMEOUT_REG</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> Upper 16 bits. Lock time out 20 bit register.  Indicates maximum number of cycles a master can hold the bus for locked transfer. If master hold the bus for locked transfer more than the required cycles, an interrupt is generated. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Indicates maximum number of cycles a master can hold the bus for locked transfer. </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDR_FIC_LOCK_TIMEOUT_EN_CR</spirit:name>
        <spirit:addressOffset>0x448</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-write</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>CFGR_LOCK_TIMEOUT_EN</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:description> 1: Lock timeout feature is enabled and interrupt is generated. 0: Lock timeout feature is disabled and interrupt is not generated. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>31</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Lock time out feature enable register. </spirit:description>
      </spirit:register>
      <spirit:register>
        <spirit:name>DDR_FIC_RDWR_ERR_SR</spirit:name>
        <spirit:addressOffset>0x44c</spirit:addressOffset>
        <spirit:size>16</spirit:size>
        <spirit:access>read-only</spirit:access>
        <spirit:resetValue>0x0</spirit:resetValue>
          <spirit:field>
            <spirit:name>DDR_FIC_CFG_RDWR_ERR_SR</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>6</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Read address of math error register. </spirit:description>
          </spirit:field>
          <spirit:field>
            <spirit:name>Reserved</spirit:name>
            <spirit:bitOffset>6</spirit:bitOffset>
            <spirit:bitWidth>26</spirit:bitWidth>
            <spirit:access>read-only</spirit:access>
            <spirit:description> Software should not rely on the value of a reserved bit. To provide compatibility with future products, the value of a reserved bit should be preserved across a read-modify-write operation. </spirit:description>
          </spirit:field>
        <spirit:description> Indicates read address of math error register.  </spirit:description>
      </spirit:register>
    </spirit:addressBlock>
    <spirit:bitsInLau>32</spirit:bitsInLau>
  </spirit:memoryMap>
  </spirit:memoryMaps>
  <spirit:hwModel>
    <spirit:views>
      <spirit:view>
        <spirit:name>Generator</spirit:name>
        <spirit:envIdentifier></spirit:envIdentifier>
        <spirit:language></spirit:language>
        <spirit:fileSetRef>ADLTCL</spirit:fileSetRef>
        <spirit:vendorExtensions>
          <actel-cc:fsInclusionRules>
            <actel-cc:fsInclusionRule spirit:fileSetRef="ADLTCL"></actel-cc:fsInclusionRule></actel-cc:fsInclusionRules></spirit:vendorExtensions>
      </spirit:view>
    </spirit:views>
    <spirit:signals>
      <spirit:signal>
        <spirit:name>FDDR_CAS_N</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="FDDR_CAS_N" spirit:resolve="user">false</spirit:export>
        <spirit:vendorExtensions>
          <actel-cc:pad>true</actel-cc:pad>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>FDDR_CAS_N</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FDDR_CKE</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="FDDR_CKE" spirit:resolve="user">false</spirit:export>
        <spirit:vendorExtensions>
          <actel-cc:pad>true</actel-cc:pad>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>FDDR_CKE</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FDDR_CLK</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="FDDR_CLK" spirit:resolve="user">false</spirit:export>
        <spirit:vendorExtensions>
          <actel-cc:pad>true</actel-cc:pad>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>FDDR_CLK</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FDDR_CLK_N</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="FDDR_CLK_N" spirit:resolve="user">false</spirit:export>
        <spirit:vendorExtensions>
          <actel-cc:pad>true</actel-cc:pad>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>FDDR_CLK_N</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FDDR_CS_N</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="FDDR_CS_N" spirit:resolve="user">false</spirit:export>
        <spirit:vendorExtensions>
          <actel-cc:pad>true</actel-cc:pad>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>FDDR_CS_N</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FDDR_ODT</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="FDDR_ODT" spirit:resolve="user">false</spirit:export>
        <spirit:vendorExtensions>
          <actel-cc:pad>true</actel-cc:pad>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>FDDR_ODT</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FDDR_RAS_N</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="FDDR_RAS_N" spirit:resolve="user">false</spirit:export>
        <spirit:vendorExtensions>
          <actel-cc:pad>true</actel-cc:pad>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>FDDR_RAS_N</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FDDR_RESET_N</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="FDDR_RESET_N" spirit:resolve="user">false</spirit:export>
        <spirit:vendorExtensions>
          <actel-cc:pad>true</actel-cc:pad>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>FDDR_RESET_N</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FDDR_WE_N</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="FDDR_WE_N" spirit:resolve="user">false</spirit:export>
        <spirit:vendorExtensions>
          <actel-cc:pad>true</actel-cc:pad>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>FDDR_WE_N</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FDDR_ADDR</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:left>15</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="FDDR_ADDR" spirit:resolve="user">false</spirit:export>
        <spirit:vendorExtensions>
          <actel-cc:pad>true</actel-cc:pad>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>FDDR_ADDR</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FDDR_BA</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:left>2</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="FDDR_BA" spirit:resolve="user">false</spirit:export>
        <spirit:vendorExtensions>
          <actel-cc:pad>true</actel-cc:pad>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>FDDR_BA</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FDDR_DM_RDQS</spirit:name>
        <spirit:direction>inout</spirit:direction>
        <spirit:left spirit:dependency="id('DM_WIDTH')" spirit:resolve="dependent">3</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="FDDR_DM_RDQS" spirit:resolve="user">false</spirit:export>
        <spirit:vendorExtensions>
          <actel-cc:pad>true</actel-cc:pad>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>FDDR_DM_RDQS</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FDDR_DM_RDQS_ECC</spirit:name>
        <spirit:direction>inout</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="FDDR_DM_RDQS_ECC" spirit:resolve="user">false</spirit:export>
        <spirit:vendorExtensions>
          <actel-cc:pad>true</actel-cc:pad>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:used>
            <actel-cc:logicEquation>
              <actel-cc:logicTerm spirit:referenceId="MEMORY_ECC" actel-cc:termValue="YES"></actel-cc:logicTerm></actel-cc:logicEquation></actel-cc:used>
          <actel-cc:description>FDDR_DM_RDQS_ECC</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FDDR_DQS</spirit:name>
        <spirit:direction>inout</spirit:direction>
        <spirit:left spirit:dependency="id('DQS_WIDTH')" spirit:resolve="dependent">3</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="FDDR_DQS" spirit:resolve="user">false</spirit:export>
        <spirit:vendorExtensions>
          <actel-cc:pad>true</actel-cc:pad>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>FDDR_DQS</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FDDR_DQS_N</spirit:name>
        <spirit:direction>inout</spirit:direction>
        <spirit:left spirit:dependency="id('DQS_WIDTH')" spirit:resolve="dependent">3</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="FDDR_DQS_N" spirit:resolve="user">false</spirit:export>
        <spirit:vendorExtensions>
          <actel-cc:pad>true</actel-cc:pad>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:used>
            <actel-cc:logicEquation>
              <actel-cc:logicAndTerms>
                <actel-cc:logicTerm spirit:referenceId="MEMORY_TYPE" actel-cc:operation="notEqual" actel-cc:termValue="LPDDR"></actel-cc:logicTerm>
                <actel-cc:logicTerm spirit:referenceId="MEMORY_TYPE" actel-cc:operation="notEqual" actel-cc:termValue="LPDDR_NO_CALIBRATION"></actel-cc:logicTerm>
                <actel-cc:logicTerm spirit:referenceId="MEMORY_TYPE" actel-cc:operation="notEqual" actel-cc:termValue="LPDDR_LVCMOS18"></actel-cc:logicTerm>
                <actel-cc:logicTerm spirit:referenceId="MEMORY_TYPE" actel-cc:operation="notEqual" actel-cc:termValue="LPDDR_LVCMOS18_NO_CALIBRATION"></actel-cc:logicTerm></actel-cc:logicAndTerms></actel-cc:logicEquation></actel-cc:used>
          <actel-cc:description>FDDR_DQS_N</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FDDR_DQS_ECC</spirit:name>
        <spirit:direction>inout</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="FDDR_DQS_ECC" spirit:resolve="user">false</spirit:export>
        <spirit:vendorExtensions>
          <actel-cc:pad>true</actel-cc:pad>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:used>
            <actel-cc:logicEquation>
              <actel-cc:logicTerm spirit:referenceId="MEMORY_ECC" actel-cc:termValue="YES"></actel-cc:logicTerm></actel-cc:logicEquation></actel-cc:used>
          <actel-cc:description>FDDR_DQS_ECC</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FDDR_DQS_ECC_N</spirit:name>
        <spirit:direction>inout</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="FDDR_DQS_ECC_N" spirit:resolve="user">false</spirit:export>
        <spirit:vendorExtensions>
          <actel-cc:pad>true</actel-cc:pad>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:used>
            <actel-cc:logicEquation>
              <actel-cc:logicAndTerms>
                <actel-cc:logicTerm spirit:referenceId="MEMORY_TYPE" actel-cc:operation="notEqual" actel-cc:termValue="LPDDR"></actel-cc:logicTerm>
                <actel-cc:logicTerm spirit:referenceId="MEMORY_TYPE" actel-cc:operation="notEqual" actel-cc:termValue="LPDDR_NO_CALIBRATION"></actel-cc:logicTerm>
                <actel-cc:logicTerm spirit:referenceId="MEMORY_TYPE" actel-cc:operation="notEqual" actel-cc:termValue="LPDDR_LVCMOS18"></actel-cc:logicTerm>
                <actel-cc:logicTerm spirit:referenceId="MEMORY_TYPE" actel-cc:operation="notEqual" actel-cc:termValue="LPDDR_LVCMOS18_NO_CALIBRATION"></actel-cc:logicTerm>
                <actel-cc:logicTerm spirit:referenceId="MEMORY_ECC" actel-cc:termValue="YES"></actel-cc:logicTerm></actel-cc:logicAndTerms></actel-cc:logicEquation></actel-cc:used>
          <actel-cc:description>FDDR_DQS_ECC_N</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FDDR_DQ</spirit:name>
        <spirit:direction>inout</spirit:direction>
        <spirit:left spirit:dependency="id('DQ_WIDTH')" spirit:resolve="dependent">31</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="FDDR_DQ" spirit:resolve="user">false</spirit:export>
        <spirit:vendorExtensions>
          <actel-cc:pad>true</actel-cc:pad>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>FDDR_DQ</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FDDR_DQ_ECC</spirit:name>
        <spirit:direction>inout</spirit:direction>
        <spirit:left spirit:dependency="id('DQ_ECC_WIDTH')" spirit:resolve="dependent">3</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="FDDR_DQ_ECC" spirit:resolve="user">false</spirit:export>
        <spirit:vendorExtensions>
          <actel-cc:pad>true</actel-cc:pad>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:used>
            <actel-cc:logicEquation>
              <actel-cc:logicTerm spirit:referenceId="MEMORY_ECC" actel-cc:termValue="YES"></actel-cc:logicTerm></actel-cc:logicEquation></actel-cc:used>
          <actel-cc:description>FDDR_DQ_ECC</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FDDR_DQS_TMATCH_0_OUT</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="FDDR_DQS_TMATCH_0_OUT" spirit:resolve="user">false</spirit:export>
        <spirit:vendorExtensions>
          <actel-cc:pad>true</actel-cc:pad>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>FDDR_DQS_TMATCH_0_OUT</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FDDR_DQS_TMATCH_1_OUT</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="FDDR_DQS_TMATCH_1_OUT" spirit:resolve="user">false</spirit:export>
        <spirit:vendorExtensions>
          <actel-cc:pad>true</actel-cc:pad>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:used>
            <actel-cc:logicEquation>
              <actel-cc:logicTerm spirit:referenceId="MEMORY_WIDTH" actel-cc:termValue="32"></actel-cc:logicTerm></actel-cc:logicEquation></actel-cc:used>
          <actel-cc:description>FDDR_DQS_TMATCH_1_OUT</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FDDR_DQS_TMATCH_0_IN</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="FDDR_DQS_TMATCH_0_IN" spirit:resolve="user">false</spirit:export>
        <spirit:vendorExtensions>
          <actel-cc:pad>true</actel-cc:pad>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>FDDR_DQS_TMATCH_0_IN</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FDDR_DQS_TMATCH_1_IN</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="FDDR_DQS_TMATCH_1_IN" spirit:resolve="user">false</spirit:export>
        <spirit:vendorExtensions>
          <actel-cc:pad>true</actel-cc:pad>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:used>
            <actel-cc:logicEquation>
              <actel-cc:logicTerm spirit:referenceId="MEMORY_WIDTH" actel-cc:termValue="32"></actel-cc:logicTerm></actel-cc:logicEquation></actel-cc:used>
          <actel-cc:description>FDDR_DQS_TMATCH_1_IN</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FDDR_DQS_TMATCH_ECC_OUT</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="FDDR_DQS_TMATCH_ECC_OUT" spirit:resolve="user">false</spirit:export>
        <spirit:vendorExtensions>
          <actel-cc:pad>true</actel-cc:pad>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:used>
            <actel-cc:logicEquation>
              <actel-cc:logicTerm spirit:referenceId="MEMORY_ECC" actel-cc:termValue="YES"></actel-cc:logicTerm></actel-cc:logicEquation></actel-cc:used>
          <actel-cc:description>FDDR_DQS_TMATCH_ECC_OUT</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FDDR_DQS_TMATCH_ECC_IN</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="FDDR_DQS_TMATCH_ECC_IN" spirit:resolve="user">false</spirit:export>
        <spirit:vendorExtensions>
          <actel-cc:pad>true</actel-cc:pad>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:used>
            <actel-cc:logicEquation>
              <actel-cc:logicTerm spirit:referenceId="MEMORY_ECC" actel-cc:termValue="YES"></actel-cc:logicTerm></actel-cc:logicEquation></actel-cc:used>
          <actel-cc:description>FDDR_DQS_TMATCH_ECC_IN</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>APB_S_PCLK</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="APB_S_PCLK" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>APB_S_PCLK</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>APB_S_PRESET_N</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="APB_S_PRESET_N" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>APB_S_PRESET_N</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>APB_S_PENABLE</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="APB_S_PENABLE" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>APB_S_PENABLE</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>APB_S_PSEL</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="APB_S_PSEL" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>APB_S_PSEL</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>APB_S_PWRITE</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="APB_S_PWRITE" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>APB_S_PWRITE</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>APB_S_PADDR</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>10</spirit:left>
        <spirit:right>2</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="APB_S_PADDR" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>APB_S_PADDR</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>APB_S_PWDATA</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>15</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="APB_S_PWDATA" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>APB_S_PWDATA</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>APB_S_PREADY</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="APB_S_PREADY" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>APB_S_PREADY</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>APB_S_PSLVERR</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="APB_S_PSLVERR" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>APB_S_PSLVERR</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>APB_S_PRDATA</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:left>15</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="APB_S_PRDATA" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>APB_S_PRDATA</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_AWREADY</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_AWREADY" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_AWREADY</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_WREADY</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_WREADY" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_WREADY</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_BID</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:left>3</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_BID" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_BID</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_BRESP</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:left>1</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_BRESP" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_BRESP</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_BVALID</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_BVALID" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_BVALID</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_ARREADY</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_ARREADY" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_ARREADY</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_RID</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:left>3</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_RID" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_RID</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_RRESP</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:left>1</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_RRESP" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_RRESP</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_RDATA</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:left>63</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_RDATA" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_RDATA</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_RLAST</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_RLAST" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_RLAST</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_RVALID</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_RVALID" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_RVALID</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_AWID</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>3</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_AWID" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_AWID</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_AWADDR</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>31</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_AWADDR" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_AWADDR</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_AWLEN</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>3</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_AWLEN" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_AWLEN</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_AWSIZE</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>1</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_AWSIZE" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_AWSIZE</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_AWBURST</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>1</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_AWBURST" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_AWBURST</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_AWLOCK</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>1</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_AWLOCK" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_AWLOCK</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_AWVALID</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_AWVALID" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_AWVALID</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_WID</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>3</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_WID" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_WID</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_WDATA</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>63</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_WDATA" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_WDATA</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_WSTRB</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>7</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_WSTRB" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_WSTRB</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_WLAST</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_WLAST" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_WLAST</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_WVALID</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_WVALID" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_WVALID</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_BREADY</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_BREADY" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_BREADY</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_ARID</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>3</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_ARID" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_ARID</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_ARADDR</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>31</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_ARADDR" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_ARADDR</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_ARLEN</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>3</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_ARLEN" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_ARLEN</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_ARSIZE</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>1</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_ARSIZE" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_ARSIZE</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_ARBURST</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>1</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_ARBURST" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_ARBURST</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_ARLOCK</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>1</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_ARLOCK" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_ARLOCK</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_ARVALID</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_ARVALID" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_ARVALID</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_RREADY</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_RREADY" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AXI_S_RREADY</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AXI_S_RMW</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="AXI_S_RMW" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:used>
            <actel-cc:logicEquation>
              <actel-cc:logicTerm spirit:referenceId="MODE" actel-cc:termValue="MODE_AXI64"></actel-cc:logicTerm></actel-cc:logicEquation></actel-cc:used>
          <actel-cc:description>AXI_S_RMW</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>CLK_BASE_PLL_LOCK</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="CLK_BASE_PLL_LOCK" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:used>
            <actel-cc:logicEquation>
              <actel-cc:logicTerm spirit:referenceId="FAB_PLL_LOCK_USED" actel-cc:termValue="true"></actel-cc:logicTerm></actel-cc:logicEquation></actel-cc:used>
          <actel-cc:description>CLK_BASE_PLL_LOCK</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>CORE_RESET_N</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="CORE_RESET_N" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>CORE_RESET_N</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>CLK_BASE</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="CLK_BASE" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>CLK_BASE</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FPLL_LOCK</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="FPLL_LOCK" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>FPLL_LOCK</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>PLL_LOCK_INT</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="PLL_LOCK_INT" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:used>
            <actel-cc:logicEquation>
              <actel-cc:logicTerm spirit:referenceId="ENABLE_INTERRUPTS" actel-cc:termValue="true"></actel-cc:logicTerm></actel-cc:logicEquation></actel-cc:used>
          <actel-cc:description>PLL_LOCK_INT</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>PLL_LOCKLOST_INT</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="PLL_LOCKLOST_INT" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:used>
            <actel-cc:logicEquation>
              <actel-cc:logicTerm spirit:referenceId="ENABLE_INTERRUPTS" actel-cc:termValue="true"></actel-cc:logicTerm></actel-cc:logicEquation></actel-cc:used>
          <actel-cc:description>PLL_LOCKLOST_INT</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>ECC_INT</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="ECC_INT" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:used>
            <actel-cc:logicEquation>
              <actel-cc:logicTerm spirit:referenceId="ENABLE_INTERRUPTS" actel-cc:termValue="true"></actel-cc:logicTerm></actel-cc:logicEquation></actel-cc:used>
          <actel-cc:description>ECC_INT</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>IO_CALIB_INT</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="IO_CALIB_INT" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:used>
            <actel-cc:logicEquation>
              <actel-cc:logicTerm spirit:referenceId="ENABLE_INTERRUPTS" actel-cc:termValue="true"></actel-cc:logicTerm></actel-cc:logicEquation></actel-cc:used>
          <actel-cc:description>IO_CALIB_INT</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>FIC_INT</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="FIC_INT" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:used>
            <actel-cc:logicEquation>
              <actel-cc:logicTerm spirit:referenceId="ENABLE_INTERRUPTS" actel-cc:termValue="true"></actel-cc:logicTerm></actel-cc:logicEquation></actel-cc:used>
          <actel-cc:description>FIC_INT</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AHB0_S_HREADYOUT</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="AHB0_S_HREADYOUT" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AHB0_S_HREADYOUT</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AHB0_S_HRESP</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="AHB0_S_HRESP" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AHB0_S_HRESP</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AHB0_S_HRDATA</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:left>31</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AHB0_S_HRDATA" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AHB0_S_HRDATA</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AHB0_S_HSEL</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="AHB0_S_HSEL" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AHB0_S_HSEL</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AHB0_S_HADDR</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>31</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AHB0_S_HADDR" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AHB0_S_HADDR</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AHB0_S_HBURST</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>2</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AHB0_S_HBURST" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AHB0_S_HBURST</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AHB0_S_HSIZE</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>1</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AHB0_S_HSIZE" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AHB0_S_HSIZE</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AHB0_S_HTRANS</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>1</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AHB0_S_HTRANS" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AHB0_S_HTRANS</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AHB0_S_HMASTLOCK</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="AHB0_S_HMASTLOCK" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AHB0_S_HMASTLOCK</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AHB0_S_HWRITE</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="AHB0_S_HWRITE" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AHB0_S_HWRITE</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AHB0_S_HREADY</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="AHB0_S_HREADY" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AHB0_S_HREADY</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AHB0_S_HWDATA</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>31</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AHB0_S_HWDATA" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AHB0_S_HWDATA</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AHB1_S_HREADYOUT</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="AHB1_S_HREADYOUT" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AHB1_S_HREADYOUT</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AHB1_S_HRESP</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="AHB1_S_HRESP" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AHB1_S_HRESP</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AHB1_S_HRDATA</spirit:name>
        <spirit:direction>out</spirit:direction>
        <spirit:left>31</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AHB1_S_HRDATA" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AHB1_S_HRDATA</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AHB1_S_HSEL</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="AHB1_S_HSEL" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AHB1_S_HSEL</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AHB1_S_HADDR</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>31</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AHB1_S_HADDR" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AHB1_S_HADDR</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AHB1_S_HBURST</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>2</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AHB1_S_HBURST" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AHB1_S_HBURST</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AHB1_S_HSIZE</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>1</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AHB1_S_HSIZE" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AHB1_S_HSIZE</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AHB1_S_HTRANS</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>1</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AHB1_S_HTRANS" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AHB1_S_HTRANS</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AHB1_S_HMASTLOCK</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="AHB1_S_HMASTLOCK" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AHB1_S_HMASTLOCK</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AHB1_S_HWRITE</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="AHB1_S_HWRITE" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AHB1_S_HWRITE</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AHB1_S_HREADY</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:export spirit:configGroups="export" spirit:prompt="AHB1_S_HREADY" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AHB1_S_HREADY</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
      <spirit:signal>
        <spirit:name>AHB1_S_HWDATA</spirit:name>
        <spirit:direction>in</spirit:direction>
        <spirit:left>31</spirit:left>
        <spirit:right>0</spirit:right>
        <spirit:export spirit:configGroups="export" spirit:prompt="AHB1_S_HWDATA" spirit:resolve="user">false</spirit:export>
        <spirit:defaultValue>
          <spirit:value>1</spirit:value></spirit:defaultValue>
        <spirit:vendorExtensions>
          <actel-cc:requiredConnection></actel-cc:requiredConnection>
          <actel-cc:description>AHB1_S_HWDATA</actel-cc:description></spirit:vendorExtensions>
      </spirit:signal>
    </spirit:signals>
    <spirit:hwParameters>
    </spirit:hwParameters>
    <spirit:deletedhwParameters>
    </spirit:deletedhwParameters>
  <spirit:vendorExtensions>
    <actel-cc:variantParameters>
      <actel-cc:variantParameter spirit:id="FAMILY" spirit:name="FAMILY" spirit:prompt="FPGA Family:" spirit:dataType="int" actel-cc:choiceRef="Choice_FamilyValue" spirit:choiceStyle="combo" spirit:configGroups="globalConfig" spirit:resolve="user">19</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PARAM_IS_FALSE" spirit:name="PARAM_IS_FALSE" spirit:prompt="" actel-cc:choiceRef="" spirit:dataType="boolean" spirit:resolve="generated">0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="MEMORY_TYPE" spirit:name="MEMORY_TYPE" spirit:prompt="Type" spirit:dataType="string" actel-cc:choiceRef="MEMORY_TYPE_CHOICES" spirit:configGroups="1Cols:Memory Configuration" spirit:resolve="user">DDR2</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="MEMORY_WIDTH" spirit:name="MEMORY_WIDTH" spirit:prompt="Width" spirit:dataType="string" actel-cc:choiceRef="MEMORY_WIDTH_CHOICES" spirit:configGroups="1Cols:Memory Configuration" spirit:resolve="user">32</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="MEMORY_ECC" spirit:name="MEMORY_ECC" spirit:prompt="ECC" spirit:dataType="string" actel-cc:choiceRef="MEMORY_ECC_CHOICES" spirit:configGroups="1Cols:Memory Configuration" spirit:resolve="user">NO</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="MODE" spirit:name="MODE" spirit:prompt="FPGA Fabric Interface" spirit:dataType="string" actel-cc:choiceRef="MODE_CHOICES" spirit:configGroups="1Cols:Memory Access" spirit:resolve="user">MODE_AXI64</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PLL_CLK_FDDR_FREQ" spirit:name="PLL_CLK_FDDR_FREQ" spirit:prompt="FDDR_CLK (MHz)" actel-cc:choiceRef="" spirit:dataType="string" spirit:configGroups="1Cols:Clocks" spirit:resolve="user">100</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PLL_CLK_FIC64_DIV" spirit:name="PLL_CLK_FIC64_DIV" spirit:prompt="DDR_FIC Clock (CLK_BASE) = FDDR_CLK" spirit:dataType="string" actel-cc:choiceRef="PLL_CLK_FIC64_DIV_CHOICES" spirit:configGroups="1Cols:Clocks" spirit:resolve="user">1</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="FAB_PLL_LOCK_USED" spirit:name="FAB_PLL_LOCK_USED" spirit:prompt="Use FPLL Lock (FAB_PLL_LOCK)" actel-cc:choiceRef="" spirit:dataType="boolean" spirit:configGroups="1Cols:FPLL Configuration" spirit:resolve="user">0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="ENABLE_INTERRUPTS" spirit:name="ENABLE_INTERRUPTS" spirit:prompt="Enable Interrupts" actel-cc:choiceRef="" spirit:dataType="boolean" spirit:configGroups="1Cols:Interrupts" spirit:resolve="user">0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="NUMBER_OF_ROW_BITS" spirit:name="NUMBER_OF_ROW_BITS" spirit:prompt="NUMBER_OF_ROW_BITS " actel-cc:choiceRef="" spirit:dataType="string" spirit:configGroups="1Cols:Row" spirit:resolve="user">16</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="NUMBER_OF_BANK_BITS" spirit:name="NUMBER_OF_BANK_BITS" spirit:prompt="NUMBER_OF_BANK_BITS " actel-cc:choiceRef="" spirit:dataType="string" spirit:configGroups="1Cols:Bank" spirit:resolve="user">3</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="NUMBER_OF_COLUMN_BITS" spirit:name="NUMBER_OF_COLUMN_BITS" spirit:prompt="NUMBER_OF_COLUMN_BITS " actel-cc:choiceRef="" spirit:dataType="string" spirit:configGroups="1Cols:Column" spirit:resolve="user">10</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DQ_WIDTH" spirit:name="DQ_WIDTH" spirit:prompt="DQ_Width" actel-cc:choiceRef="" spirit:dataType="int" spirit:resolve="generated" spirit:minimum="0" spirit:maximum="31">31</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DQ_ECC_WIDTH" spirit:name="DQ_ECC_WIDTH" spirit:prompt="DQ_ECC_Width" actel-cc:choiceRef="" spirit:dataType="int" spirit:resolve="generated" spirit:minimum="0" spirit:maximum="3">3</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DQS_WIDTH" spirit:name="DQS_WIDTH" spirit:prompt="DQS_Width" actel-cc:choiceRef="" spirit:dataType="int" spirit:resolve="generated" spirit:minimum="0" spirit:maximum="3">3</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DM_WIDTH" spirit:name="DM_WIDTH" spirit:prompt="DM_Width" actel-cc:choiceRef="" spirit:dataType="int" spirit:resolve="generated" spirit:minimum="0" spirit:maximum="3">3</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PLL_SUPPLY_VOLTAGE" spirit:name="PLL_SUPPLY_VOLTAGE" spirit:prompt="Supply Voltage" spirit:dataType="string" actel-cc:choiceRef="PLL_VOLTAGE_CHOICES" spirit:resolve="generated">25_V</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PLL_LOCK_DELAY" spirit:name="PLL_LOCK_DELAY" spirit:prompt="Lock Delay" spirit:dataType="string" actel-cc:choiceRef="PLL_DELAY_CHOICES" spirit:resolve="generated">1024</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PLL_LOCK_WINDOW" spirit:name="PLL_LOCK_WINDOW" spirit:prompt="Lock Window" spirit:dataType="string" actel-cc:choiceRef="PLL_WINDOW_CHOICES" spirit:resolve="generated">8000</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_DYN_SOFT_RESET_CR" spirit:name="DDRC_DYN_SOFT_RESET_CR" spirit:prompt="DDRC_DYN_SOFT_RESET_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x4</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_RESERVED0" spirit:name="DDRC_RESERVED0" spirit:prompt="DDRC_RESERVED0" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_DYN_REFRESH_1_CR" spirit:name="DDRC_DYN_REFRESH_1_CR" spirit:prompt="DDRC_DYN_REFRESH_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x1188</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_DYN_REFRESH_2_CR" spirit:name="DDRC_DYN_REFRESH_2_CR" spirit:prompt="DDRC_DYN_REFRESH_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x290</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_DYN_POWERDOWN_CR" spirit:name="DDRC_DYN_POWERDOWN_CR" spirit:prompt="DDRC_DYN_POWERDOWN_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x2</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_DYN_DEBUG_CR" spirit:name="DDRC_DYN_DEBUG_CR" spirit:prompt="DDRC_DYN_DEBUG_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_MODE_CR" spirit:name="DDRC_MODE_CR" spirit:prompt="DDRC_MODE_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_ADDR_MAP_BANK_CR" spirit:name="DDRC_ADDR_MAP_BANK_CR" spirit:prompt="DDRC_ADDR_MAP_BANK_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_ECC_DATA_MASK_CR" spirit:name="DDRC_ECC_DATA_MASK_CR" spirit:prompt="DDRC_ECC_DATA_MASK_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_ADDR_MAP_COL_1_CR" spirit:name="DDRC_ADDR_MAP_COL_1_CR" spirit:prompt="DDRC_ADDR_MAP_COL_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_ADDR_MAP_COL_2_CR" spirit:name="DDRC_ADDR_MAP_COL_2_CR" spirit:prompt="DDRC_ADDR_MAP_COL_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_ADDR_MAP_COL_3_CR" spirit:name="DDRC_ADDR_MAP_COL_3_CR" spirit:prompt="DDRC_ADDR_MAP_COL_3_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_ADDR_MAP_ROW_1_CR" spirit:name="DDRC_ADDR_MAP_ROW_1_CR" spirit:prompt="DDRC_ADDR_MAP_ROW_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_ADDR_MAP_ROW_2_CR" spirit:name="DDRC_ADDR_MAP_ROW_2_CR" spirit:prompt="DDRC_ADDR_MAP_ROW_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_INIT_1_CR" spirit:name="DDRC_INIT_1_CR" spirit:prompt="DDRC_INIT_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x1</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_CKE_RSTN_CYCLES_1_CR" spirit:name="DDRC_CKE_RSTN_CYCLES_1_CR" spirit:prompt="DDRC_CKE_RSTN_CYCLES_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_CKE_RSTN_CYCLES_2_CR" spirit:name="DDRC_CKE_RSTN_CYCLES_2_CR" spirit:prompt="DDRC_CKE_RSTN_CYCLES_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_INIT_MR_CR" spirit:name="DDRC_INIT_MR_CR" spirit:prompt="DDRC_INIT_MR_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x95A</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_INIT_EMR_CR" spirit:name="DDRC_INIT_EMR_CR" spirit:prompt="DDRC_INIT_EMR_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x402</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_INIT_EMR2_CR" spirit:name="DDRC_INIT_EMR2_CR" spirit:prompt="DDRC_INIT_EMR2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_INIT_EMR3_CR" spirit:name="DDRC_INIT_EMR3_CR" spirit:prompt="DDRC_INIT_EMR3_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_DRAM_BANK_TIMING_PARAM_CR" spirit:name="DDRC_DRAM_BANK_TIMING_PARAM_CR" spirit:prompt="DDRC_DRAM_BANK_TIMING_PARAM_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_DRAM_RD_WR_LATENCY_CR" spirit:name="DDRC_DRAM_RD_WR_LATENCY_CR" spirit:prompt="DDRC_DRAM_RD_WR_LATENCY_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_DRAM_RD_WR_PRE_CR" spirit:name="DDRC_DRAM_RD_WR_PRE_CR" spirit:prompt="DDRC_DRAM_RD_WR_PRE_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_DRAM_MR_TIMING_PARAM_CR" spirit:name="DDRC_DRAM_MR_TIMING_PARAM_CR" spirit:prompt="DDRC_DRAM_MR_TIMING_PARAM_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_DRAM_RAS_TIMING_CR" spirit:name="DDRC_DRAM_RAS_TIMING_CR" spirit:prompt="DDRC_DRAM_RAS_TIMING_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_DRAM_RD_WR_TRNARND_TIME_CR" spirit:name="DDRC_DRAM_RD_WR_TRNARND_TIME_CR" spirit:prompt="DDRC_DRAM_RD_WR_TRNARND_TIME_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_DRAM_T_PD_CR" spirit:name="DDRC_DRAM_T_PD_CR" spirit:prompt="DDRC_DRAM_T_PD_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_DRAM_BANK_ACT_TIMING_CR" spirit:name="DDRC_DRAM_BANK_ACT_TIMING_CR" spirit:prompt="DDRC_DRAM_BANK_ACT_TIMING_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_ODT_PARAM_1_CR" spirit:name="DDRC_ODT_PARAM_1_CR" spirit:prompt="DDRC_ODT_PARAM_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_ODT_PARAM_2_CR" spirit:name="DDRC_ODT_PARAM_2_CR" spirit:prompt="DDRC_ODT_PARAM_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_DEBUG_CR" spirit:name="DDRC_DEBUG_CR" spirit:prompt="DDRC_DEBUG_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_MODE_REG_RD_WR_CR" spirit:name="DDRC_MODE_REG_RD_WR_CR" spirit:prompt="DDRC_MODE_REG_RD_WR_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_MODE_REG_DATA_CR" spirit:name="DDRC_MODE_REG_DATA_CR" spirit:prompt="DDRC_MODE_REG_DATA_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_PWR_SAVE_1_CR" spirit:name="DDRC_PWR_SAVE_1_CR" spirit:prompt="DDRC_PWR_SAVE_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x40C</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_PWR_SAVE_2_CR" spirit:name="DDRC_PWR_SAVE_2_CR" spirit:prompt="DDRC_PWR_SAVE_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_ZQ_LONG_TIME_CR" spirit:name="DDRC_ZQ_LONG_TIME_CR" spirit:prompt="DDRC_ZQ_LONG_TIME_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_ZQ_SHORT_TIME_CR" spirit:name="DDRC_ZQ_SHORT_TIME_CR" spirit:prompt="DDRC_ZQ_SHORT_TIME_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_ZQ_SHORT_INT_REFRESH_MARGIN_1_CR" spirit:name="DDRC_ZQ_SHORT_INT_REFRESH_MARGIN_1_CR" spirit:prompt="DDRC_ZQ_SHORT_INT_REFRESH_MARGIN_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x2</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_ZQ_SHORT_INT_REFRESH_MARGIN_2_CR" spirit:name="DDRC_ZQ_SHORT_INT_REFRESH_MARGIN_2_CR" spirit:prompt="DDRC_ZQ_SHORT_INT_REFRESH_MARGIN_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_PERF_PARAM_1_CR" spirit:name="DDRC_PERF_PARAM_1_CR" spirit:prompt="DDRC_PERF_PARAM_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x83</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_HPR_QUEUE_PARAM_1_CR" spirit:name="DDRC_HPR_QUEUE_PARAM_1_CR" spirit:prompt="DDRC_HPR_QUEUE_PARAM_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_HPR_QUEUE_PARAM_2_CR" spirit:name="DDRC_HPR_QUEUE_PARAM_2_CR" spirit:prompt="DDRC_HPR_QUEUE_PARAM_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_LPR_QUEUE_PARAM_1_CR" spirit:name="DDRC_LPR_QUEUE_PARAM_1_CR" spirit:prompt="DDRC_LPR_QUEUE_PARAM_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_LPR_QUEUE_PARAM_2_CR" spirit:name="DDRC_LPR_QUEUE_PARAM_2_CR" spirit:prompt="DDRC_LPR_QUEUE_PARAM_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_WR_QUEUE_PARAM_CR" spirit:name="DDRC_WR_QUEUE_PARAM_CR" spirit:prompt="DDRC_WR_QUEUE_PARAM_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_PERF_PARAM_2_CR" spirit:name="DDRC_PERF_PARAM_2_CR" spirit:prompt="DDRC_PERF_PARAM_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_PERF_PARAM_3_CR" spirit:name="DDRC_PERF_PARAM_3_CR" spirit:prompt="DDRC_PERF_PARAM_3_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_DFI_RDDATA_EN_CR" spirit:name="DDRC_DFI_RDDATA_EN_CR" spirit:prompt="DDRC_DFI_RDDATA_EN_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_DFI_MIN_CTRLUPD_TIMING_CR" spirit:name="DDRC_DFI_MIN_CTRLUPD_TIMING_CR" spirit:prompt="DDRC_DFI_MIN_CTRLUPD_TIMING_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x3</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_DFI_MAX_CTRLUPD_TIMING_CR" spirit:name="DDRC_DFI_MAX_CTRLUPD_TIMING_CR" spirit:prompt="DDRC_DFI_MAX_CTRLUPD_TIMING_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x40</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_DFI_WR_LVL_CONTROL_1_CR" spirit:name="DDRC_DFI_WR_LVL_CONTROL_1_CR" spirit:prompt="DDRC_DFI_WR_LVL_CONTROL_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_DFI_WR_LVL_CONTROL_2_CR" spirit:name="DDRC_DFI_WR_LVL_CONTROL_2_CR" spirit:prompt="DDRC_DFI_WR_LVL_CONTROL_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_DFI_RD_LVL_CONTROL_1_CR" spirit:name="DDRC_DFI_RD_LVL_CONTROL_1_CR" spirit:prompt="DDRC_DFI_RD_LVL_CONTROL_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_DFI_RD_LVL_CONTROL_2_CR" spirit:name="DDRC_DFI_RD_LVL_CONTROL_2_CR" spirit:prompt="DDRC_DFI_RD_LVL_CONTROL_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_DFI_CTRLUPD_TIME_INTERVAL_CR" spirit:name="DDRC_DFI_CTRLUPD_TIME_INTERVAL_CR" spirit:prompt="DDRC_DFI_CTRLUPD_TIME_INTERVAL_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x1016</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_DYN_SOFT_RESET_ALIAS_CR" spirit:name="DDRC_DYN_SOFT_RESET_ALIAS_CR" spirit:prompt="DDRC_DYN_SOFT_RESET_ALIAS_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x4</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_AXI_FABRIC_PRI_ID_CR" spirit:name="DDRC_AXI_FABRIC_PRI_ID_CR" spirit:prompt="DDRC_AXI_FABRIC_PRI_ID_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_SR" spirit:name="DDRC_SR" spirit:prompt="DDRC_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_SINGLE_ERR_CNT_SR" spirit:name="DDRC_SINGLE_ERR_CNT_SR" spirit:prompt="DDRC_SINGLE_ERR_CNT_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_DOUBLE_ERR_CNT_SR" spirit:name="DDRC_DOUBLE_ERR_CNT_SR" spirit:prompt="DDRC_DOUBLE_ERR_CNT_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_LUE_SYNDROME_1_SR" spirit:name="DDRC_LUE_SYNDROME_1_SR" spirit:prompt="DDRC_LUE_SYNDROME_1_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_LUE_SYNDROME_2_SR" spirit:name="DDRC_LUE_SYNDROME_2_SR" spirit:prompt="DDRC_LUE_SYNDROME_2_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_LUE_SYNDROME_3_SR" spirit:name="DDRC_LUE_SYNDROME_3_SR" spirit:prompt="DDRC_LUE_SYNDROME_3_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_LUE_SYNDROME_4_SR" spirit:name="DDRC_LUE_SYNDROME_4_SR" spirit:prompt="DDRC_LUE_SYNDROME_4_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_LUE_SYNDROME_5_SR" spirit:name="DDRC_LUE_SYNDROME_5_SR" spirit:prompt="DDRC_LUE_SYNDROME_5_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_LUE_ADDRESS_1_SR" spirit:name="DDRC_LUE_ADDRESS_1_SR" spirit:prompt="DDRC_LUE_ADDRESS_1_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_LUE_ADDRESS_2_SR" spirit:name="DDRC_LUE_ADDRESS_2_SR" spirit:prompt="DDRC_LUE_ADDRESS_2_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_LCE_SYNDROME_1_SR" spirit:name="DDRC_LCE_SYNDROME_1_SR" spirit:prompt="DDRC_LCE_SYNDROME_1_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_LCE_SYNDROME_2_SR" spirit:name="DDRC_LCE_SYNDROME_2_SR" spirit:prompt="DDRC_LCE_SYNDROME_2_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_LCE_SYNDROME_3_SR" spirit:name="DDRC_LCE_SYNDROME_3_SR" spirit:prompt="DDRC_LCE_SYNDROME_3_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_LCE_SYNDROME_4_SR" spirit:name="DDRC_LCE_SYNDROME_4_SR" spirit:prompt="DDRC_LCE_SYNDROME_4_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_LCE_SYNDROME_5_SR" spirit:name="DDRC_LCE_SYNDROME_5_SR" spirit:prompt="DDRC_LCE_SYNDROME_5_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_LCE_ADDRESS_1_SR" spirit:name="DDRC_LCE_ADDRESS_1_SR" spirit:prompt="DDRC_LCE_ADDRESS_1_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_LCE_ADDRESS_2_SR" spirit:name="DDRC_LCE_ADDRESS_2_SR" spirit:prompt="DDRC_LCE_ADDRESS_2_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_LCB_NUMBER_SR" spirit:name="DDRC_LCB_NUMBER_SR" spirit:prompt="DDRC_LCB_NUMBER_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_LCB_MASK_1_SR" spirit:name="DDRC_LCB_MASK_1_SR" spirit:prompt="DDRC_LCB_MASK_1_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_LCB_MASK_2_SR" spirit:name="DDRC_LCB_MASK_2_SR" spirit:prompt="DDRC_LCB_MASK_2_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_LCB_MASK_3_SR" spirit:name="DDRC_LCB_MASK_3_SR" spirit:prompt="DDRC_LCB_MASK_3_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_LCB_MASK_4_SR" spirit:name="DDRC_LCB_MASK_4_SR" spirit:prompt="DDRC_LCB_MASK_4_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_ECC_INT_SR" spirit:name="DDRC_ECC_INT_SR" spirit:prompt="DDRC_ECC_INT_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_ECC_INT_CLR_REG" spirit:name="DDRC_ECC_INT_CLR_REG" spirit:prompt="DDRC_ECC_INT_CLR_REG" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDRC_ECC_OUTPUT_DATA_SR" spirit:name="DDRC_ECC_OUTPUT_DATA_SR" spirit:prompt="DDRC_ECC_OUTPUT_DATA_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_DYN_BIST_TEST_CR" spirit:name="PHY_DYN_BIST_TEST_CR" spirit:prompt="PHY_DYN_BIST_TEST_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_DYN_BIST_TEST_ERRCLR_1_CR" spirit:name="PHY_DYN_BIST_TEST_ERRCLR_1_CR" spirit:prompt="PHY_DYN_BIST_TEST_ERRCLR_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_DYN_BIST_TEST_ERRCLR_2_CR" spirit:name="PHY_DYN_BIST_TEST_ERRCLR_2_CR" spirit:prompt="PHY_DYN_BIST_TEST_ERRCLR_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_DYN_BIST_TEST_ERRCLR_3_CR" spirit:name="PHY_DYN_BIST_TEST_ERRCLR_3_CR" spirit:prompt="PHY_DYN_BIST_TEST_ERRCLR_3_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_BIST_TEST_SHIFT_PATTERN_1_CR" spirit:name="PHY_BIST_TEST_SHIFT_PATTERN_1_CR" spirit:prompt="PHY_BIST_TEST_SHIFT_PATTERN_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_BIST_TEST_SHIFT_PATTERN_2_CR" spirit:name="PHY_BIST_TEST_SHIFT_PATTERN_2_CR" spirit:prompt="PHY_BIST_TEST_SHIFT_PATTERN_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_BIST_TEST_SHIFT_PATTERN_3_CR" spirit:name="PHY_BIST_TEST_SHIFT_PATTERN_3_CR" spirit:prompt="PHY_BIST_TEST_SHIFT_PATTERN_3_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_LOOPBACK_TEST_CR" spirit:name="PHY_LOOPBACK_TEST_CR" spirit:prompt="PHY_LOOPBACK_TEST_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_BOARD_LOOPBACK_CR" spirit:name="PHY_BOARD_LOOPBACK_CR" spirit:prompt="PHY_BOARD_LOOPBACK_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_CTRL_SLAVE_RATIO_CR" spirit:name="PHY_CTRL_SLAVE_RATIO_CR" spirit:prompt="PHY_CTRL_SLAVE_RATIO_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_CTRL_SLAVE_FORCE_CR" spirit:name="PHY_CTRL_SLAVE_FORCE_CR" spirit:prompt="PHY_CTRL_SLAVE_FORCE_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_CTRL_SLAVE_DELAY_CR" spirit:name="PHY_CTRL_SLAVE_DELAY_CR" spirit:prompt="PHY_CTRL_SLAVE_DELAY_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_DATA_SLICE_IN_USE_CR" spirit:name="PHY_DATA_SLICE_IN_USE_CR" spirit:prompt="PHY_DATA_SLICE_IN_USE_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_LVL_NUM_OF_DQ0_CR" spirit:name="PHY_LVL_NUM_OF_DQ0_CR" spirit:prompt="PHY_LVL_NUM_OF_DQ0_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_DQ_OFFSET_1_CR" spirit:name="PHY_DQ_OFFSET_1_CR" spirit:prompt="PHY_DQ_OFFSET_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x240</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_DQ_OFFSET_2_CR" spirit:name="PHY_DQ_OFFSET_2_CR" spirit:prompt="PHY_DQ_OFFSET_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x4081</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_DQ_OFFSET_3_CR" spirit:name="PHY_DQ_OFFSET_3_CR" spirit:prompt="PHY_DQ_OFFSET_3_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_DIS_CALIB_RST_CR" spirit:name="PHY_DIS_CALIB_RST_CR" spirit:prompt="PHY_DIS_CALIB_RST_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_DLL_LOCK_DIFF_CR" spirit:name="PHY_DLL_LOCK_DIFF_CR" spirit:prompt="PHY_DLL_LOCK_DIFF_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_FIFO_WE_IN_DELAY_1_CR" spirit:name="PHY_FIFO_WE_IN_DELAY_1_CR" spirit:prompt="PHY_FIFO_WE_IN_DELAY_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_FIFO_WE_IN_DELAY_2_CR" spirit:name="PHY_FIFO_WE_IN_DELAY_2_CR" spirit:prompt="PHY_FIFO_WE_IN_DELAY_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_FIFO_WE_IN_DELAY_3_CR" spirit:name="PHY_FIFO_WE_IN_DELAY_3_CR" spirit:prompt="PHY_FIFO_WE_IN_DELAY_3_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_FIFO_WE_IN_FORCE_CR" spirit:name="PHY_FIFO_WE_IN_FORCE_CR" spirit:prompt="PHY_FIFO_WE_IN_FORCE_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_FIFO_WE_SLAVE_RATIO_1_CR" spirit:name="PHY_FIFO_WE_SLAVE_RATIO_1_CR" spirit:prompt="PHY_FIFO_WE_SLAVE_RATIO_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_FIFO_WE_SLAVE_RATIO_2_CR" spirit:name="PHY_FIFO_WE_SLAVE_RATIO_2_CR" spirit:prompt="PHY_FIFO_WE_SLAVE_RATIO_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_FIFO_WE_SLAVE_RATIO_3_CR" spirit:name="PHY_FIFO_WE_SLAVE_RATIO_3_CR" spirit:prompt="PHY_FIFO_WE_SLAVE_RATIO_3_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_FIFO_WE_SLAVE_RATIO_4_CR" spirit:name="PHY_FIFO_WE_SLAVE_RATIO_4_CR" spirit:prompt="PHY_FIFO_WE_SLAVE_RATIO_4_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_GATELVL_INIT_MODE_CR" spirit:name="PHY_GATELVL_INIT_MODE_CR" spirit:prompt="PHY_GATELVL_INIT_MODE_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_GATELVL_INIT_RATIO_1_CR" spirit:name="PHY_GATELVL_INIT_RATIO_1_CR" spirit:prompt="PHY_GATELVL_INIT_RATIO_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_GATELVL_INIT_RATIO_2_CR" spirit:name="PHY_GATELVL_INIT_RATIO_2_CR" spirit:prompt="PHY_GATELVL_INIT_RATIO_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_GATELVL_INIT_RATIO_3_CR" spirit:name="PHY_GATELVL_INIT_RATIO_3_CR" spirit:prompt="PHY_GATELVL_INIT_RATIO_3_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_GATELVL_INIT_RATIO_4_CR" spirit:name="PHY_GATELVL_INIT_RATIO_4_CR" spirit:prompt="PHY_GATELVL_INIT_RATIO_4_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_LOCAL_ODT_CR" spirit:name="PHY_LOCAL_ODT_CR" spirit:prompt="PHY_LOCAL_ODT_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_INVERT_CLKOUT_CR" spirit:name="PHY_INVERT_CLKOUT_CR" spirit:prompt="PHY_INVERT_CLKOUT_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_RD_DQS_SLAVE_DELAY_1_CR" spirit:name="PHY_RD_DQS_SLAVE_DELAY_1_CR" spirit:prompt="PHY_RD_DQS_SLAVE_DELAY_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_RD_DQS_SLAVE_DELAY_2_CR" spirit:name="PHY_RD_DQS_SLAVE_DELAY_2_CR" spirit:prompt="PHY_RD_DQS_SLAVE_DELAY_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_RD_DQS_SLAVE_DELAY_3_CR" spirit:name="PHY_RD_DQS_SLAVE_DELAY_3_CR" spirit:prompt="PHY_RD_DQS_SLAVE_DELAY_3_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_RD_DQS_SLAVE_FORCE_CR" spirit:name="PHY_RD_DQS_SLAVE_FORCE_CR" spirit:prompt="PHY_RD_DQS_SLAVE_FORCE_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_RD_DQS_SLAVE_RATIO_1_CR" spirit:name="PHY_RD_DQS_SLAVE_RATIO_1_CR" spirit:prompt="PHY_RD_DQS_SLAVE_RATIO_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x40</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_RD_DQS_SLAVE_RATIO_2_CR" spirit:name="PHY_RD_DQS_SLAVE_RATIO_2_CR" spirit:prompt="PHY_RD_DQS_SLAVE_RATIO_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x401</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_RD_DQS_SLAVE_RATIO_3_CR" spirit:name="PHY_RD_DQS_SLAVE_RATIO_3_CR" spirit:prompt="PHY_RD_DQS_SLAVE_RATIO_3_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x4010</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_RD_DQS_SLAVE_RATIO_4_CR" spirit:name="PHY_RD_DQS_SLAVE_RATIO_4_CR" spirit:prompt="PHY_RD_DQS_SLAVE_RATIO_4_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WR_DQS_SLAVE_DELAY_1_CR" spirit:name="PHY_WR_DQS_SLAVE_DELAY_1_CR" spirit:prompt="PHY_WR_DQS_SLAVE_DELAY_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WR_DQS_SLAVE_DELAY_2_CR" spirit:name="PHY_WR_DQS_SLAVE_DELAY_2_CR" spirit:prompt="PHY_WR_DQS_SLAVE_DELAY_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WR_DQS_SLAVE_DELAY_3_CR" spirit:name="PHY_WR_DQS_SLAVE_DELAY_3_CR" spirit:prompt="PHY_WR_DQS_SLAVE_DELAY_3_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WR_DQS_SLAVE_FORCE_CR" spirit:name="PHY_WR_DQS_SLAVE_FORCE_CR" spirit:prompt="PHY_WR_DQS_SLAVE_FORCE_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WR_DQS_SLAVE_RATIO_1_CR" spirit:name="PHY_WR_DQS_SLAVE_RATIO_1_CR" spirit:prompt="PHY_WR_DQS_SLAVE_RATIO_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WR_DQS_SLAVE_RATIO_2_CR" spirit:name="PHY_WR_DQS_SLAVE_RATIO_2_CR" spirit:prompt="PHY_WR_DQS_SLAVE_RATIO_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WR_DQS_SLAVE_RATIO_3_CR" spirit:name="PHY_WR_DQS_SLAVE_RATIO_3_CR" spirit:prompt="PHY_WR_DQS_SLAVE_RATIO_3_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WR_DQS_SLAVE_RATIO_4_CR" spirit:name="PHY_WR_DQS_SLAVE_RATIO_4_CR" spirit:prompt="PHY_WR_DQS_SLAVE_RATIO_4_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WR_DATA_SLAVE_DELAY_1_CR" spirit:name="PHY_WR_DATA_SLAVE_DELAY_1_CR" spirit:prompt="PHY_WR_DATA_SLAVE_DELAY_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WR_DATA_SLAVE_DELAY_2_CR" spirit:name="PHY_WR_DATA_SLAVE_DELAY_2_CR" spirit:prompt="PHY_WR_DATA_SLAVE_DELAY_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WR_DATA_SLAVE_DELAY_3_CR" spirit:name="PHY_WR_DATA_SLAVE_DELAY_3_CR" spirit:prompt="PHY_WR_DATA_SLAVE_DELAY_3_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WR_DATA_SLAVE_FORCE_CR" spirit:name="PHY_WR_DATA_SLAVE_FORCE_CR" spirit:prompt="PHY_WR_DATA_SLAVE_FORCE_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WR_DATA_SLAVE_RATIO_1_CR" spirit:name="PHY_WR_DATA_SLAVE_RATIO_1_CR" spirit:prompt="PHY_WR_DATA_SLAVE_RATIO_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x40</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WR_DATA_SLAVE_RATIO_2_CR" spirit:name="PHY_WR_DATA_SLAVE_RATIO_2_CR" spirit:prompt="PHY_WR_DATA_SLAVE_RATIO_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x401</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WR_DATA_SLAVE_RATIO_3_CR" spirit:name="PHY_WR_DATA_SLAVE_RATIO_3_CR" spirit:prompt="PHY_WR_DATA_SLAVE_RATIO_3_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x401</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WR_DATA_SLAVE_RATIO_4_CR" spirit:name="PHY_WR_DATA_SLAVE_RATIO_4_CR" spirit:prompt="PHY_WR_DATA_SLAVE_RATIO_4_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WRLVL_INIT_MODE_CR" spirit:name="PHY_WRLVL_INIT_MODE_CR" spirit:prompt="PHY_WRLVL_INIT_MODE_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WRLVL_INIT_RATIO_1_CR" spirit:name="PHY_WRLVL_INIT_RATIO_1_CR" spirit:prompt="PHY_WRLVL_INIT_RATIO_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WRLVL_INIT_RATIO_2_CR" spirit:name="PHY_WRLVL_INIT_RATIO_2_CR" spirit:prompt="PHY_WRLVL_INIT_RATIO_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WRLVL_INIT_RATIO_3_CR" spirit:name="PHY_WRLVL_INIT_RATIO_3_CR" spirit:prompt="PHY_WRLVL_INIT_RATIO_3_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WRLVL_INIT_RATIO_4_CR" spirit:name="PHY_WRLVL_INIT_RATIO_4_CR" spirit:prompt="PHY_WRLVL_INIT_RATIO_4_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WR_RD_RL_CR" spirit:name="PHY_WR_RD_RL_CR" spirit:prompt="PHY_WR_RD_RL_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_RDC_FIFO_RST_ERR_CNT_CLR_CR" spirit:name="PHY_RDC_FIFO_RST_ERR_CNT_CLR_CR" spirit:prompt="PHY_RDC_FIFO_RST_ERR_CNT_CLR_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_RDC_WE_TO_RE_DELAY_CR" spirit:name="PHY_RDC_WE_TO_RE_DELAY_CR" spirit:prompt="PHY_RDC_WE_TO_RE_DELAY_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_USE_FIXED_RE_CR" spirit:name="PHY_USE_FIXED_RE_CR" spirit:prompt="PHY_USE_FIXED_RE_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_USE_RANK0_DELAYS_CR" spirit:name="PHY_USE_RANK0_DELAYS_CR" spirit:prompt="PHY_USE_RANK0_DELAYS_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_USE_LVL_TRNG_LEVEL_CR" spirit:name="PHY_USE_LVL_TRNG_LEVEL_CR" spirit:prompt="PHY_USE_LVL_TRNG_LEVEL_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_DYN_CONFIG_CR" spirit:name="PHY_DYN_CONFIG_CR" spirit:prompt="PHY_DYN_CONFIG_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_RD_WR_GATE_LVL_CR" spirit:name="PHY_RD_WR_GATE_LVL_CR" spirit:prompt="PHY_RD_WR_GATE_LVL_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_DYN_RESET_CR" spirit:name="PHY_DYN_RESET_CR" spirit:prompt="PHY_DYN_RESET_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_LEVELLING_FAILURE_SR" spirit:name="PHY_LEVELLING_FAILURE_SR" spirit:prompt="PHY_LEVELLING_FAILURE_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_BIST_ERROR_1_SR" spirit:name="PHY_BIST_ERROR_1_SR" spirit:prompt="PHY_BIST_ERROR_1_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_BIST_ERROR_2_SR" spirit:name="PHY_BIST_ERROR_2_SR" spirit:prompt="PHY_BIST_ERROR_2_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_BIST_ERROR_3_SR" spirit:name="PHY_BIST_ERROR_3_SR" spirit:prompt="PHY_BIST_ERROR_3_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WRLVL_DQS_RATIO_1_SR" spirit:name="PHY_WRLVL_DQS_RATIO_1_SR" spirit:prompt="PHY_WRLVL_DQS_RATIO_1_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WRLVL_DQS_RATIO_2_SR" spirit:name="PHY_WRLVL_DQS_RATIO_2_SR" spirit:prompt="PHY_WRLVL_DQS_RATIO_2_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WRLVL_DQS_RATIO_3_SR" spirit:name="PHY_WRLVL_DQS_RATIO_3_SR" spirit:prompt="PHY_WRLVL_DQS_RATIO_3_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WRLVL_DQS_RATIO_4_SR" spirit:name="PHY_WRLVL_DQS_RATIO_4_SR" spirit:prompt="PHY_WRLVL_DQS_RATIO_4_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WRLVL_DQ_RATIO_1_SR" spirit:name="PHY_WRLVL_DQ_RATIO_1_SR" spirit:prompt="PHY_WRLVL_DQ_RATIO_1_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WRLVL_DQ_RATIO_2_SR" spirit:name="PHY_WRLVL_DQ_RATIO_2_SR" spirit:prompt="PHY_WRLVL_DQ_RATIO_2_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WRLVL_DQ_RATIO_3_SR" spirit:name="PHY_WRLVL_DQ_RATIO_3_SR" spirit:prompt="PHY_WRLVL_DQ_RATIO_3_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WRLVL_DQ_RATIO_4_SR" spirit:name="PHY_WRLVL_DQ_RATIO_4_SR" spirit:prompt="PHY_WRLVL_DQ_RATIO_4_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_RDLVL_DQS_RATIO_1_SR" spirit:name="PHY_RDLVL_DQS_RATIO_1_SR" spirit:prompt="PHY_RDLVL_DQS_RATIO_1_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_RDLVL_DQS_RATIO_2_SR" spirit:name="PHY_RDLVL_DQS_RATIO_2_SR" spirit:prompt="PHY_RDLVL_DQS_RATIO_2_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_RDLVL_DQS_RATIO_3_SR" spirit:name="PHY_RDLVL_DQS_RATIO_3_SR" spirit:prompt="PHY_RDLVL_DQS_RATIO_3_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_RDLVL_DQS_RATIO_4_SR" spirit:name="PHY_RDLVL_DQS_RATIO_4_SR" spirit:prompt="PHY_RDLVL_DQS_RATIO_4_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_FIFO_1_SR" spirit:name="PHY_FIFO_1_SR" spirit:prompt="PHY_FIFO_1_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_FIFO_2_SR" spirit:name="PHY_FIFO_2_SR" spirit:prompt="PHY_FIFO_2_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_FIFO_3_SR" spirit:name="PHY_FIFO_3_SR" spirit:prompt="PHY_FIFO_3_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_FIFO_4_SR" spirit:name="PHY_FIFO_4_SR" spirit:prompt="PHY_FIFO_4_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_MASTER_DLL_SR" spirit:name="PHY_MASTER_DLL_SR" spirit:prompt="PHY_MASTER_DLL_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_DLL_SLAVE_VALUE_1_SR" spirit:name="PHY_DLL_SLAVE_VALUE_1_SR" spirit:prompt="PHY_DLL_SLAVE_VALUE_1_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_DLL_SLAVE_VALUE_2_SR" spirit:name="PHY_DLL_SLAVE_VALUE_2_SR" spirit:prompt="PHY_DLL_SLAVE_VALUE_2_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_STATUS_OF_IN_DELAY_VAL_1_SR" spirit:name="PHY_STATUS_OF_IN_DELAY_VAL_1_SR" spirit:prompt="PHY_STATUS_OF_IN_DELAY_VAL_1_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_STATUS_OF_IN_DELAY_VAL_2_SR" spirit:name="PHY_STATUS_OF_IN_DELAY_VAL_2_SR" spirit:prompt="PHY_STATUS_OF_IN_DELAY_VAL_2_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_STATUS_OF_OUT_DELAY_VAL_1_SR" spirit:name="PHY_STATUS_OF_OUT_DELAY_VAL_1_SR" spirit:prompt="PHY_STATUS_OF_OUT_DELAY_VAL_1_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_STATUS_OF_OUT_DELAY_VAL_2_SR" spirit:name="PHY_STATUS_OF_OUT_DELAY_VAL_2_SR" spirit:prompt="PHY_STATUS_OF_OUT_DELAY_VAL_2_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_DLL_LOCK_AND_SLAVE_VAL_SR" spirit:name="PHY_DLL_LOCK_AND_SLAVE_VAL_SR" spirit:prompt="PHY_DLL_LOCK_AND_SLAVE_VAL_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_CTRL_OUTPUT_FILTER_SR" spirit:name="PHY_CTRL_OUTPUT_FILTER_SR" spirit:prompt="PHY_CTRL_OUTPUT_FILTER_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_CTRL_OF_OUTPUT_DELAY_SR" spirit:name="PHY_CTRL_OF_OUTPUT_DELAY_SR" spirit:prompt="PHY_CTRL_OF_OUTPUT_DELAY_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_RD_DQS_SLAVE_DLL_VAL_1_SR" spirit:name="PHY_RD_DQS_SLAVE_DLL_VAL_1_SR" spirit:prompt="PHY_RD_DQS_SLAVE_DLL_VAL_1_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_RD_DQS_SLAVE_DLL_VAL_2_SR" spirit:name="PHY_RD_DQS_SLAVE_DLL_VAL_2_SR" spirit:prompt="PHY_RD_DQS_SLAVE_DLL_VAL_2_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_RD_DQS_SLAVE_DLL_VAL_3_SR" spirit:name="PHY_RD_DQS_SLAVE_DLL_VAL_3_SR" spirit:prompt="PHY_RD_DQS_SLAVE_DLL_VAL_3_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WR_DATA_SLAVE_DLL_VAL_1_SR" spirit:name="PHY_WR_DATA_SLAVE_DLL_VAL_1_SR" spirit:prompt="PHY_WR_DATA_SLAVE_DLL_VAL_1_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WR_DATA_SLAVE_DLL_VAL_2_SR" spirit:name="PHY_WR_DATA_SLAVE_DLL_VAL_2_SR" spirit:prompt="PHY_WR_DATA_SLAVE_DLL_VAL_2_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WR_DATA_SLAVE_DLL_VAL_3_SR" spirit:name="PHY_WR_DATA_SLAVE_DLL_VAL_3_SR" spirit:prompt="PHY_WR_DATA_SLAVE_DLL_VAL_3_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_FIFO_WE_SLAVE_DLL_VAL_1_SR" spirit:name="PHY_FIFO_WE_SLAVE_DLL_VAL_1_SR" spirit:prompt="PHY_FIFO_WE_SLAVE_DLL_VAL_1_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_FIFO_WE_SLAVE_DLL_VAL_2_SR" spirit:name="PHY_FIFO_WE_SLAVE_DLL_VAL_2_SR" spirit:prompt="PHY_FIFO_WE_SLAVE_DLL_VAL_2_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_FIFO_WE_SLAVE_DLL_VAL_3_SR" spirit:name="PHY_FIFO_WE_SLAVE_DLL_VAL_3_SR" spirit:prompt="PHY_FIFO_WE_SLAVE_DLL_VAL_3_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WR_DQS_SLAVE_DLL_VAL_1_SR" spirit:name="PHY_WR_DQS_SLAVE_DLL_VAL_1_SR" spirit:prompt="PHY_WR_DQS_SLAVE_DLL_VAL_1_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WR_DQS_SLAVE_DLL_VAL_2_SR" spirit:name="PHY_WR_DQS_SLAVE_DLL_VAL_2_SR" spirit:prompt="PHY_WR_DQS_SLAVE_DLL_VAL_2_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_WR_DQS_SLAVE_DLL_VAL_3_SR" spirit:name="PHY_WR_DQS_SLAVE_DLL_VAL_3_SR" spirit:prompt="PHY_WR_DQS_SLAVE_DLL_VAL_3_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="PHY_CTRL_SLAVE_DLL_VAL_SR" spirit:name="PHY_CTRL_SLAVE_DLL_VAL_SR" spirit:prompt="PHY_CTRL_SLAVE_DLL_VAL_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDR_FIC_NB_ADDR_CR" spirit:name="DDR_FIC_NB_ADDR_CR" spirit:prompt="DDR_FIC_NB_ADDR_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDR_FIC_NBRWB_SIZE_CR" spirit:name="DDR_FIC_NBRWB_SIZE_CR" spirit:prompt="DDR_FIC_NBRWB_SIZE_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDR_FIC_WB_TIMEOUT_CR" spirit:name="DDR_FIC_WB_TIMEOUT_CR" spirit:prompt="DDR_FIC_WB_TIMEOUT_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDR_FIC_HPD_SW_RW_EN_CR" spirit:name="DDR_FIC_HPD_SW_RW_EN_CR" spirit:prompt="DDR_FIC_HPD_SW_RW_EN_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDR_FIC_HPD_SW_RW_INVAL_CR" spirit:name="DDR_FIC_HPD_SW_RW_INVAL_CR" spirit:prompt="DDR_FIC_HPD_SW_RW_INVAL_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDR_FIC_SW_WR_ERCLR_CR" spirit:name="DDR_FIC_SW_WR_ERCLR_CR" spirit:prompt="DDR_FIC_SW_WR_ERCLR_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDR_FIC_ERR_INT_ENABLE_CR" spirit:name="DDR_FIC_ERR_INT_ENABLE_CR" spirit:prompt="DDR_FIC_ERR_INT_ENABLE_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDR_FIC_NUM_AHB_MASTERS_CR" spirit:name="DDR_FIC_NUM_AHB_MASTERS_CR" spirit:prompt="DDR_FIC_NUM_AHB_MASTERS_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDR_FIC_HPB_ERR_ADDR_1_SR" spirit:name="DDR_FIC_HPB_ERR_ADDR_1_SR" spirit:prompt="DDR_FIC_HPB_ERR_ADDR_1_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDR_FIC_HPB_ERR_ADDR_2_SR" spirit:name="DDR_FIC_HPB_ERR_ADDR_2_SR" spirit:prompt="DDR_FIC_HPB_ERR_ADDR_2_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDR_FIC_SW_ERR_ADDR_1_SR" spirit:name="DDR_FIC_SW_ERR_ADDR_1_SR" spirit:prompt="DDR_FIC_SW_ERR_ADDR_1_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDR_FIC_SW_ERR_ADDR_2_SR" spirit:name="DDR_FIC_SW_ERR_ADDR_2_SR" spirit:prompt="DDR_FIC_SW_ERR_ADDR_2_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDR_FIC_HPD_SW_WRB_EMPTY_SR" spirit:name="DDR_FIC_HPD_SW_WRB_EMPTY_SR" spirit:prompt="DDR_FIC_HPD_SW_WRB_EMPTY_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDR_FIC_SW_HPB_LOCKOUT_SR" spirit:name="DDR_FIC_SW_HPB_LOCKOUT_SR" spirit:prompt="DDR_FIC_SW_HPB_LOCKOUT_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDR_FIC_SW_HPD_WERR_SR" spirit:name="DDR_FIC_SW_HPD_WERR_SR" spirit:prompt="DDR_FIC_SW_HPD_WERR_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDR_FIC_LOCK_TIMEOUTVAL_1_CR" spirit:name="DDR_FIC_LOCK_TIMEOUTVAL_1_CR" spirit:prompt="DDR_FIC_LOCK_TIMEOUTVAL_1_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDR_FIC_LOCK_TIMEOUTVAL_2_CR" spirit:name="DDR_FIC_LOCK_TIMEOUTVAL_2_CR" spirit:prompt="DDR_FIC_LOCK_TIMEOUTVAL_2_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDR_FIC_LOCK_TIMEOUT_EN_CR" spirit:name="DDR_FIC_LOCK_TIMEOUT_EN_CR" spirit:prompt="DDR_FIC_LOCK_TIMEOUT_EN_CR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
      <actel-cc:variantParameter spirit:id="DDR_FIC_RDWR_ERR_SR" spirit:name="DDR_FIC_RDWR_ERR_SR" spirit:prompt="DDR_FIC_RDWR_ERR_SR" actel-cc:choiceRef="" spirit:dataType="string" spirit:resolve="generated">0x0</actel-cc:variantParameter>
    </actel-cc:variantParameters>
    <actel-cc:script>DynamicFeedback('PLL_CLK_FIC64_DIV', DynamicText('%i MHz', DivDouble('PLL_CLK_FDDR_FREQ', 'PLL_CLK_FIC64_DIV')));\
Set('DQ_WIDTH', Eq(ValueOf('MEMORY_WIDTH'), '32'), '31');\
Set('DQ_WIDTH', Eq(ValueOf('MEMORY_WIDTH'), '16'), '15');\
Set('DQ_WIDTH', Eq(ValueOf('MEMORY_WIDTH'), '8'), '7');\
Set('DQ_ECC_WIDTH', Eq(ValueOf('MEMORY_WIDTH'), '32'), '3');\
Set('DQ_ECC_WIDTH', Eq(ValueOf('MEMORY_WIDTH'), '16'), '1');\
Set('DQ_ECC_WIDTH', Eq(ValueOf('MEMORY_WIDTH'), '8'), '0');\
Set('DQS_WIDTH', Eq(ValueOf('MEMORY_WIDTH'), '32'), '3');\
Set('DQS_WIDTH', Eq(ValueOf('MEMORY_WIDTH'), '16'), '1');\
Set('DQS_WIDTH', Eq(ValueOf('MEMORY_WIDTH'), '8'), '0');\
Set('DM_WIDTH', Eq(ValueOf('MEMORY_WIDTH'), '32'), '3');\
Set('DM_WIDTH', Eq(ValueOf('MEMORY_WIDTH'), '16'), '1');\
Set('DM_WIDTH', Eq(ValueOf('MEMORY_WIDTH'), '8'), '0');\
Validate('DDR_FIC cannot be more than 200MHz', Less(Div('PLL_CLK_FDDR_FREQ', 'PLL_CLK_FIC64_DIV'), '201'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_DYN_SOFT_RESET_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_RESERVED0', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_DYN_REFRESH_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_DYN_REFRESH_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_DYN_POWERDOWN_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_DYN_DEBUG_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_MODE_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_ADDR_MAP_BANK_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_ECC_DATA_MASK_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_ADDR_MAP_COL_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_ADDR_MAP_COL_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_ADDR_MAP_COL_3_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_ADDR_MAP_ROW_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_ADDR_MAP_ROW_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_INIT_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_CKE_RSTN_CYCLES_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_CKE_RSTN_CYCLES_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_INIT_MR_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_INIT_EMR_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_INIT_EMR2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_INIT_EMR3_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_DRAM_BANK_TIMING_PARAM_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_DRAM_RD_WR_LATENCY_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_DRAM_RD_WR_PRE_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_DRAM_MR_TIMING_PARAM_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_DRAM_RAS_TIMING_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_DRAM_RD_WR_TRNARND_TIME_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_DRAM_T_PD_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_DRAM_BANK_ACT_TIMING_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_ODT_PARAM_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_ODT_PARAM_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_DEBUG_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_MODE_REG_RD_WR_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_MODE_REG_DATA_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_PWR_SAVE_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_PWR_SAVE_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_ZQ_LONG_TIME_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_ZQ_SHORT_TIME_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_ZQ_SHORT_INT_REFRESH_MARGIN_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_ZQ_SHORT_INT_REFRESH_MARGIN_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_PERF_PARAM_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_HPR_QUEUE_PARAM_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_HPR_QUEUE_PARAM_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_LPR_QUEUE_PARAM_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_LPR_QUEUE_PARAM_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_WR_QUEUE_PARAM_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_PERF_PARAM_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_PERF_PARAM_3_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_DFI_RDDATA_EN_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_DFI_MIN_CTRLUPD_TIMING_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_DFI_MAX_CTRLUPD_TIMING_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_DFI_WR_LVL_CONTROL_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_DFI_WR_LVL_CONTROL_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_DFI_RD_LVL_CONTROL_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_DFI_RD_LVL_CONTROL_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_DFI_CTRLUPD_TIME_INTERVAL_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_DYN_SOFT_RESET_ALIAS_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_AXI_FABRIC_PRI_ID_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_SINGLE_ERR_CNT_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_DOUBLE_ERR_CNT_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_LUE_SYNDROME_1_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_LUE_SYNDROME_2_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_LUE_SYNDROME_3_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_LUE_SYNDROME_4_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_LUE_SYNDROME_5_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_LUE_ADDRESS_1_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_LUE_ADDRESS_2_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_LCE_SYNDROME_1_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_LCE_SYNDROME_2_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_LCE_SYNDROME_3_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_LCE_SYNDROME_4_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_LCE_SYNDROME_5_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_LCE_ADDRESS_1_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_LCE_ADDRESS_2_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_LCB_NUMBER_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_LCB_MASK_1_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_LCB_MASK_2_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_LCB_MASK_3_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_LCB_MASK_4_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_ECC_INT_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_ECC_INT_CLR_REG', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDRC_ECC_OUTPUT_DATA_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_DYN_BIST_TEST_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_DYN_BIST_TEST_ERRCLR_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_DYN_BIST_TEST_ERRCLR_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_DYN_BIST_TEST_ERRCLR_3_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_BIST_TEST_SHIFT_PATTERN_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_BIST_TEST_SHIFT_PATTERN_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_BIST_TEST_SHIFT_PATTERN_3_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_LOOPBACK_TEST_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_BOARD_LOOPBACK_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_CTRL_SLAVE_RATIO_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_CTRL_SLAVE_FORCE_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_CTRL_SLAVE_DELAY_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_DATA_SLICE_IN_USE_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_LVL_NUM_OF_DQ0_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_DQ_OFFSET_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_DQ_OFFSET_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_DQ_OFFSET_3_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_DIS_CALIB_RST_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_DLL_LOCK_DIFF_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_FIFO_WE_IN_DELAY_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_FIFO_WE_IN_DELAY_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_FIFO_WE_IN_DELAY_3_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_FIFO_WE_IN_FORCE_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_FIFO_WE_SLAVE_RATIO_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_FIFO_WE_SLAVE_RATIO_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_FIFO_WE_SLAVE_RATIO_3_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_FIFO_WE_SLAVE_RATIO_4_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_GATELVL_INIT_MODE_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_GATELVL_INIT_RATIO_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_GATELVL_INIT_RATIO_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_GATELVL_INIT_RATIO_3_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_GATELVL_INIT_RATIO_4_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_LOCAL_ODT_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_INVERT_CLKOUT_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_RD_DQS_SLAVE_DELAY_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_RD_DQS_SLAVE_DELAY_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_RD_DQS_SLAVE_DELAY_3_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_RD_DQS_SLAVE_FORCE_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_RD_DQS_SLAVE_RATIO_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_RD_DQS_SLAVE_RATIO_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_RD_DQS_SLAVE_RATIO_3_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_RD_DQS_SLAVE_RATIO_4_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WR_DQS_SLAVE_DELAY_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WR_DQS_SLAVE_DELAY_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WR_DQS_SLAVE_DELAY_3_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WR_DQS_SLAVE_FORCE_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WR_DQS_SLAVE_RATIO_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WR_DQS_SLAVE_RATIO_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WR_DQS_SLAVE_RATIO_3_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WR_DQS_SLAVE_RATIO_4_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WR_DATA_SLAVE_DELAY_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WR_DATA_SLAVE_DELAY_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WR_DATA_SLAVE_DELAY_3_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WR_DATA_SLAVE_FORCE_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WR_DATA_SLAVE_RATIO_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WR_DATA_SLAVE_RATIO_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WR_DATA_SLAVE_RATIO_3_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WR_DATA_SLAVE_RATIO_4_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WRLVL_INIT_MODE_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WRLVL_INIT_RATIO_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WRLVL_INIT_RATIO_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WRLVL_INIT_RATIO_3_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WRLVL_INIT_RATIO_4_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WR_RD_RL_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_RDC_FIFO_RST_ERR_CNT_CLR_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_RDC_WE_TO_RE_DELAY_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_USE_FIXED_RE_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_USE_RANK0_DELAYS_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_USE_LVL_TRNG_LEVEL_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_DYN_CONFIG_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_RD_WR_GATE_LVL_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_DYN_RESET_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_LEVELLING_FAILURE_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_BIST_ERROR_1_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_BIST_ERROR_2_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_BIST_ERROR_3_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WRLVL_DQS_RATIO_1_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WRLVL_DQS_RATIO_2_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WRLVL_DQS_RATIO_3_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WRLVL_DQS_RATIO_4_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WRLVL_DQ_RATIO_1_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WRLVL_DQ_RATIO_2_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WRLVL_DQ_RATIO_3_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WRLVL_DQ_RATIO_4_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_RDLVL_DQS_RATIO_1_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_RDLVL_DQS_RATIO_2_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_RDLVL_DQS_RATIO_3_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_RDLVL_DQS_RATIO_4_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_FIFO_1_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_FIFO_2_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_FIFO_3_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_FIFO_4_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_MASTER_DLL_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_DLL_SLAVE_VALUE_1_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_DLL_SLAVE_VALUE_2_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_STATUS_OF_IN_DELAY_VAL_1_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_STATUS_OF_IN_DELAY_VAL_2_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_STATUS_OF_OUT_DELAY_VAL_1_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_STATUS_OF_OUT_DELAY_VAL_2_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_DLL_LOCK_AND_SLAVE_VAL_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_CTRL_OUTPUT_FILTER_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_CTRL_OF_OUTPUT_DELAY_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_RD_DQS_SLAVE_DLL_VAL_1_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_RD_DQS_SLAVE_DLL_VAL_2_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_RD_DQS_SLAVE_DLL_VAL_3_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WR_DATA_SLAVE_DLL_VAL_1_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WR_DATA_SLAVE_DLL_VAL_2_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WR_DATA_SLAVE_DLL_VAL_3_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_FIFO_WE_SLAVE_DLL_VAL_1_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_FIFO_WE_SLAVE_DLL_VAL_2_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_FIFO_WE_SLAVE_DLL_VAL_3_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WR_DQS_SLAVE_DLL_VAL_1_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WR_DQS_SLAVE_DLL_VAL_2_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_WR_DQS_SLAVE_DLL_VAL_3_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('PHY_CTRL_SLAVE_DLL_VAL_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDR_FIC_NB_ADDR_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDR_FIC_NBRWB_SIZE_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDR_FIC_WB_TIMEOUT_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDR_FIC_HPD_SW_RW_EN_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDR_FIC_HPD_SW_RW_INVAL_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDR_FIC_SW_WR_ERCLR_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDR_FIC_ERR_INT_ENABLE_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDR_FIC_NUM_AHB_MASTERS_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDR_FIC_HPB_ERR_ADDR_1_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDR_FIC_HPB_ERR_ADDR_2_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDR_FIC_SW_ERR_ADDR_1_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDR_FIC_SW_ERR_ADDR_2_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDR_FIC_HPD_SW_WRB_EMPTY_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDR_FIC_SW_HPB_LOCKOUT_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDR_FIC_SW_HPD_WERR_SR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDR_FIC_LOCK_TIMEOUTVAL_1_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDR_FIC_LOCK_TIMEOUTVAL_2_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDR_FIC_LOCK_TIMEOUT_EN_CR', '16'));\
Validate('Value must be a hexadecimal number less than or equal to 2^16 -1', IsHexOfWidth('DDR_FIC_RDWR_ERR_SR', '16'));\
</actel-cc:script></spirit:vendorExtensions>
  </spirit:hwModel>
  <spirit:componentGenerators>
    <spirit:componentGenerator>
      <spirit:name>winConfigurator</spirit:name>
      <spirit:generatorExe>file://{ACTEL_SW_DIR}/bin/pa4fddrgui.exe</spirit:generatorExe>
      <spirit:apiType>TGI</spirit:apiType>
      <spirit:group>Configurator,Win32</spirit:group>
    </spirit:componentGenerator>
    <spirit:componentGenerator>
      <spirit:name>linConfigurator</spirit:name>
      <spirit:generatorExe>file://{ACTEL_SW_DIR}/bin/pa4fddrgui</spirit:generatorExe>
      <spirit:apiType>TGI</spirit:apiType>
      <spirit:group>Configurator,Unix</spirit:group>
    </spirit:componentGenerator>
    <spirit:componentGenerator>
      <spirit:name>winGenerator</spirit:name>
      <spirit:generatorExe>file://{ACTEL_SW_DIR}/bin/pa4fddrgen.exe</spirit:generatorExe>
      <spirit:apiType>TGI</spirit:apiType>
      <spirit:group>Generator,Win32</spirit:group>
    </spirit:componentGenerator>
    <spirit:componentGenerator>
      <spirit:name>linGenerator</spirit:name>
      <spirit:generatorExe>file://{ACTEL_SW_DIR}/bin/pa4fddrgen</spirit:generatorExe>
      <spirit:apiType>TGI</spirit:apiType>
      <spirit:group>Generator,Unix</spirit:group>
    </spirit:componentGenerator>
    <spirit:componentGenerator>
      <spirit:name>winValidator</spirit:name>
      <spirit:generatorExe>file://{ACTEL_SW_DIR}/bin/pa4fddrgen.exe</spirit:generatorExe>
      <spirit:apiType>TGI</spirit:apiType>
      <spirit:group>Validator,Win32</spirit:group>
    </spirit:componentGenerator>
    <spirit:componentGenerator>
      <spirit:name>linValidator</spirit:name>
      <spirit:generatorExe>file://{ACTEL_SW_DIR}/bin/pa4fddrgen</spirit:generatorExe>
      <spirit:apiType>TGI</spirit:apiType>
      <spirit:group>Validator,Unix</spirit:group>
    </spirit:componentGenerator>
  </spirit:componentGenerators>
  <spirit:choices>
    <spirit:choice>
      <spirit:name>Choice_FamilyValue</spirit:name>
      <spirit:enumeration spirit:text="SmartFusion2">19</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>MEMORY_ECC_CHOICES</spirit:name>
      <spirit:enumeration spirit:text="YES">YES</spirit:enumeration>
      <spirit:enumeration spirit:text="NO">NO</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>MEMORY_TYPE_CHOICES</spirit:name>
      <spirit:enumeration spirit:text="LPDDR">LPDDR</spirit:enumeration>
      <spirit:enumeration spirit:text="LPDDR_NO_CALIBRATION">LPDDR_NO_CALIBRATION</spirit:enumeration>
      <spirit:enumeration spirit:text="LPDDR_LVCMOS18">LPDDR_LVCMOS18</spirit:enumeration>
      <spirit:enumeration spirit:text="LPDDR_LVCMOS18_NO_CALIBRATION">LPDDR_LVCMOS18_NO_CALIBRATION</spirit:enumeration>
      <spirit:enumeration spirit:text="DDR2">DDR2</spirit:enumeration>
      <spirit:enumeration spirit:text="DDR2_FULL_STRENGTH">DDR2_FULL_STRENGTH</spirit:enumeration>
      <spirit:enumeration spirit:text="DDR3">DDR3</spirit:enumeration>
      <spirit:enumeration spirit:text="DDR3_FULL_STRENGTH">DDR3_FULL_STRENGTH</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>MEMORY_WIDTH_CHOICES</spirit:name>
      <spirit:enumeration spirit:text="32">32</spirit:enumeration>
      <spirit:enumeration spirit:text="16">16</spirit:enumeration>
      <spirit:enumeration spirit:text="8">8</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>MODE_CHOICES</spirit:name>
      <spirit:enumeration spirit:text="Using an AXI-64 Interface">MODE_AXI64</spirit:enumeration>
      <spirit:enumeration spirit:text="Using a Single AHB-32 Interface">MODE_AHB0</spirit:enumeration>
      <spirit:enumeration spirit:text="Using Two AHB-32 Interfaces">MODE_AHB0_AHB1</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>PLL_CLK_FIC64_DIV_CHOICES</spirit:name>
      <spirit:enumeration spirit:text="/1">1</spirit:enumeration>
      <spirit:enumeration spirit:text="/2">2</spirit:enumeration>
      <spirit:enumeration spirit:text="/3">3</spirit:enumeration>
      <spirit:enumeration spirit:text="/4">4</spirit:enumeration>
      <spirit:enumeration spirit:text="/6">6</spirit:enumeration>
      <spirit:enumeration spirit:text="/8">8</spirit:enumeration>
      <spirit:enumeration spirit:text="/12">12</spirit:enumeration>
      <spirit:enumeration spirit:text="/16">16</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>PLL_DELAY_CHOICES</spirit:name>
      <spirit:enumeration spirit:text="     32 cycles">32</spirit:enumeration>
      <spirit:enumeration spirit:text="     64 cycles">64</spirit:enumeration>
      <spirit:enumeration spirit:text="    128 cycles">128</spirit:enumeration>
      <spirit:enumeration spirit:text="    256 cycles">256</spirit:enumeration>
      <spirit:enumeration spirit:text="    512 cycles">512</spirit:enumeration>
      <spirit:enumeration spirit:text="   1024 cycles">1024</spirit:enumeration>
      <spirit:enumeration spirit:text="   2048 cycles">2048</spirit:enumeration>
      <spirit:enumeration spirit:text="   4096 cycles">4096</spirit:enumeration>
      <spirit:enumeration spirit:text="   8192 cycles">8192</spirit:enumeration>
      <spirit:enumeration spirit:text="  16384 cycles">16384</spirit:enumeration>
      <spirit:enumeration spirit:text="  32768 cycles">32768</spirit:enumeration>
      <spirit:enumeration spirit:text="  65536 cycles">65536</spirit:enumeration>
      <spirit:enumeration spirit:text=" 131072 cycles">131072</spirit:enumeration>
      <spirit:enumeration spirit:text=" 262144 cycles">262144</spirit:enumeration>
      <spirit:enumeration spirit:text=" 524288 cycles">524288</spirit:enumeration>
      <spirit:enumeration spirit:text="1048576 cycles">1048576</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>PLL_VOLTAGE_CHOICES</spirit:name>
      <spirit:enumeration spirit:text="2.5 V">25_V</spirit:enumeration>
      <spirit:enumeration spirit:text="3.3 V">33_V</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>PLL_WINDOW_CHOICES</spirit:name>
      <spirit:enumeration spirit:text="  500 ppm">500</spirit:enumeration>
      <spirit:enumeration spirit:text=" 1000 ppm">1000</spirit:enumeration>
      <spirit:enumeration spirit:text=" 2000 ppm">2000</spirit:enumeration>
      <spirit:enumeration spirit:text=" 4000 ppm">4000</spirit:enumeration>
      <spirit:enumeration spirit:text=" 8000 ppm">8000</spirit:enumeration>
      <spirit:enumeration spirit:text="16000 ppm">16000</spirit:enumeration>
      <spirit:enumeration spirit:text="32000 ppm">32000</spirit:enumeration>
      <spirit:enumeration spirit:text="64000 ppm">64000</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>REF_CLK_CHOICES</spirit:name>
      <spirit:enumeration spirit:text="CLK_BASE">REF_CLK_BASE</spirit:enumeration>
      <spirit:enumeration spirit:text="RCOSC_25_50MHZ">REF_CLK_RC25_50</spirit:enumeration>
    </spirit:choice>
  </spirit:choices>
  <spirit:fileSets>
  <spirit:fileSet spirit:fileSetId="ADLTCL">
    <spirit:file>
      <spirit:name>core.tcl</spirit:name>
      <spirit:fileType>unknown</spirit:fileType>
    <spirit:vendorExtensions></spirit:vendorExtensions>
    </spirit:file>
  <spirit:vendorExtensions></spirit:vendorExtensions>
  </spirit:fileSet>
  </spirit:fileSets>
  <spirit:vendorExtensions>
    <actel-cc:displayName>DDR Memory Controller</actel-cc:displayName>
    <actel-cc:description>DDR Memory Controller</actel-cc:description>
    <actel-cc:packageTimestamp>20210421121756</actel-cc:packageTimestamp>
    <actel-cc:type typeName="IP"/>
    <actel-cc:instantiateOnCreation value="false"/>
    <actel-cc:diveInPermission value="READ_WRITE"/>
    <actel-cc:categories categoryName="OS" style="hidden">
      <actel-cc:category name="PC">
      </actel-cc:category>
      <actel-cc:category name="Linux">
      </actel-cc:category>
    </actel-cc:categories>
    <actel-cc:categories categoryName="Functional Category">
      <actel-cc:category name="Memory &amp; Controllers">
      </actel-cc:category>
    </actel-cc:categories>
    <actel-cc:categories categoryName="min_libero_version" style="hidden">
      <actel-cc:category name="2021.2.0">
      </actel-cc:category>
    </actel-cc:categories>
    <actel-cc:categories categoryName="Product Family" style="checkbox">
      <actel-cc:category name="SmartFusion2">
      </actel-cc:category>
    </actel-cc:categories>
    <actel-cc:resources>
      <actel-cc:resource doc_title="User's Guide" url="http://coredocs.s3.amazonaws.com/Libero/SgCore/FDDR/sf2_fddr_config_ug_1.pdf">
        <actel-cc:presentation></actel-cc:presentation></actel-cc:resource></actel-cc:resources>
    <actel-cc:requireUniquify></actel-cc:requireUniquify>
  </spirit:vendorExtensions>
</spirit:component>
