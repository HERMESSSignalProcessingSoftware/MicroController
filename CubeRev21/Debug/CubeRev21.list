
CubeRev21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007654  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  08007854  08007854  00017854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007be8  08007be8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007be8  08007be8  00017be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bf0  08007bf0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bf0  08007bf0  00017bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bf4  08007bf4  00017bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  20000070  08007c68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08007c68  0002043c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f67b  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027a3  00000000  00000000  0002f719  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c68  00000000  00000000  00031ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b00  00000000  00000000  00032b28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e17d  00000000  00000000  00033628  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dd21  00000000  00000000  000617a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00111d72  00000000  00000000  0006f4c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00181238  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003360  00000000  00000000  001812b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	0800783c 	.word	0x0800783c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	0800783c 	.word	0x0800783c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <FastMemoryTest>:

/**
 * Performes a fast memory test, just writes one page and reads it
 *
 */
uint32_t FastMemoryTest(UART_HandleTypeDef huart) {
 80005f0:	b084      	sub	sp, #16
 80005f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005f4:	b0d1      	sub	sp, #324	; 0x144
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	f507 74ac 	add.w	r4, r7, #344	; 0x158
 80005fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	char writeBuffer[256] = "Starting FLASH Test...\r\n";
 8000600:	f107 0634 	add.w	r6, r7, #52	; 0x34
 8000604:	4bc4      	ldr	r3, [pc, #784]	; (8000918 <FastMemoryTest+0x328>)
 8000606:	4634      	mov	r4, r6
 8000608:	461d      	mov	r5, r3
 800060a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000612:	c403      	stmia	r4!, {r0, r1}
 8000614:	7022      	strb	r2, [r4, #0]
 8000616:	f106 0319 	add.w	r3, r6, #25
 800061a:	22e7      	movs	r2, #231	; 0xe7
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f006 fd07 	bl	8007032 <memset>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 8000624:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fe09 	bl	8000240 <strlen>
 800062e:	4603      	mov	r3, r0
 8000630:	b29a      	uxth	r2, r3
 8000632:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800063e:	f005 fc61 	bl	8005f04 <HAL_UART_Transmit>

	SPI_Values DUT0;
	DUT0.CS_Pin = FL2_CS1_Pin;
 8000642:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000646:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800064a:	809a      	strh	r2, [r3, #4]
	DUT0.CS_Port = FL2_CS1_GPIO_Port;
 800064c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000650:	4ab2      	ldr	r2, [pc, #712]	; (800091c <FastMemoryTest+0x32c>)
 8000652:	609a      	str	r2, [r3, #8]
	DUT0.spihandle = &hspi2;
 8000654:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000658:	4ab1      	ldr	r2, [pc, #708]	; (8000920 <FastMemoryTest+0x330>)
 800065a:	601a      	str	r2, [r3, #0]
	//
	SPI_Values DUT1;
	DUT1.CS_Pin = FL2_CS2_Pin;
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000664:	809a      	strh	r2, [r3, #4]
	DUT1.CS_Port = FL2_CS2_GPIO_Port;
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	4aac      	ldr	r2, [pc, #688]	; (800091c <FastMemoryTest+0x32c>)
 800066c:	609a      	str	r2, [r3, #8]
	DUT1.spihandle = &hspi2;
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	4aab      	ldr	r2, [pc, #684]	; (8000920 <FastMemoryTest+0x330>)
 8000674:	601a      	str	r2, [r3, #0]
	//
	SPI_Values DUT2;
	DUT2.CS_Pin = FL1_CS1_Pin;
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800067e:	809a      	strh	r2, [r3, #4]
	DUT2.CS_Port = FL1_CS1_GPIO_Port;
 8000680:	f107 0310 	add.w	r3, r7, #16
 8000684:	4aa7      	ldr	r2, [pc, #668]	; (8000924 <FastMemoryTest+0x334>)
 8000686:	609a      	str	r2, [r3, #8]
	DUT2.spihandle = &hspi6;
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	4aa6      	ldr	r2, [pc, #664]	; (8000928 <FastMemoryTest+0x338>)
 800068e:	601a      	str	r2, [r3, #0]
	//
	SPI_Values DUT3;
	DUT3.CS_Pin = FL1_CS2_Pin;
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000696:	809a      	strh	r2, [r3, #4]
	DUT3.CS_Port = FL1_CS2_GPIO_Port;
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	4aa4      	ldr	r2, [pc, #656]	; (800092c <FastMemoryTest+0x33c>)
 800069c:	609a      	str	r2, [r3, #8]
	DUT3.spihandle = &hspi6;
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4aa1      	ldr	r2, [pc, #644]	; (8000928 <FastMemoryTest+0x338>)
 80006a2:	601a      	str	r2, [r3, #0]


	uint32_t result = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	uint32_t startTime = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint32_t endTime = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

	sprintf(writeBuffer, "\t%s\n\r\0", "Checking FL2/1");
 80006b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006ba:	4a9d      	ldr	r2, [pc, #628]	; (8000930 <FastMemoryTest+0x340>)
 80006bc:	499d      	ldr	r1, [pc, #628]	; (8000934 <FastMemoryTest+0x344>)
 80006be:	4618      	mov	r0, r3
 80006c0:	f006 fcc0 	bl	8007044 <siprintf>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 80006c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff fdb9 	bl	8000240 <strlen>
 80006ce:	4603      	mov	r3, r0
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
 80006da:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 80006de:	f005 fc11 	bl	8005f04 <HAL_UART_Transmit>
	startTime = HAL_GetTick();
 80006e2:	f001 fcbf 	bl	8002064 <HAL_GetTick>
 80006e6:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	result = FastTest(DUT0);
 80006ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80006f2:	f000 f92d 	bl	8000950 <FastTest>
 80006f6:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	endTime = HAL_GetTick() - startTime;
 80006fa:	f001 fcb3 	bl	8002064 <HAL_GetTick>
 80006fe:	4602      	mov	r2, r0
 8000700:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	sprintf(writeBuffer, "\t\tResult: %s, took %dms\r\n\0", result == 1 ? "Passed" : "Failed", endTime);
 800070a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800070e:	2b01      	cmp	r3, #1
 8000710:	d101      	bne.n	8000716 <FastMemoryTest+0x126>
 8000712:	4a89      	ldr	r2, [pc, #548]	; (8000938 <FastMemoryTest+0x348>)
 8000714:	e000      	b.n	8000718 <FastMemoryTest+0x128>
 8000716:	4a89      	ldr	r2, [pc, #548]	; (800093c <FastMemoryTest+0x34c>)
 8000718:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800071c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000720:	4987      	ldr	r1, [pc, #540]	; (8000940 <FastMemoryTest+0x350>)
 8000722:	f006 fc8f 	bl	8007044 <siprintf>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 8000726:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fd88 	bl	8000240 <strlen>
 8000730:	4603      	mov	r3, r0
 8000732:	b29a      	uxth	r2, r3
 8000734:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000738:	f04f 33ff 	mov.w	r3, #4294967295
 800073c:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8000740:	f005 fbe0 	bl	8005f04 <HAL_UART_Transmit>
	HAL_Delay(50);
 8000744:	2032      	movs	r0, #50	; 0x32
 8000746:	f001 fc99 	bl	800207c <HAL_Delay>


	sprintf(writeBuffer, "\t%s\n\r\0", "Checking FL2/2");
 800074a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800074e:	4a7d      	ldr	r2, [pc, #500]	; (8000944 <FastMemoryTest+0x354>)
 8000750:	4978      	ldr	r1, [pc, #480]	; (8000934 <FastMemoryTest+0x344>)
 8000752:	4618      	mov	r0, r3
 8000754:	f006 fc76 	bl	8007044 <siprintf>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 8000758:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff fd6f 	bl	8000240 <strlen>
 8000762:	4603      	mov	r3, r0
 8000764:	b29a      	uxth	r2, r3
 8000766:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8000772:	f005 fbc7 	bl	8005f04 <HAL_UART_Transmit>
	startTime = HAL_GetTick();
 8000776:	f001 fc75 	bl	8002064 <HAL_GetTick>
 800077a:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	result = FastTest(DUT1);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000786:	f000 f8e3 	bl	8000950 <FastTest>
 800078a:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	endTime = HAL_GetTick() - startTime;
 800078e:	f001 fc69 	bl	8002064 <HAL_GetTick>
 8000792:	4602      	mov	r2, r0
 8000794:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	sprintf(writeBuffer, "\t\tResult: %s, took %dms\r\n\0", result == 1 ? "Passed" : "Failed", endTime);
 800079e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d101      	bne.n	80007aa <FastMemoryTest+0x1ba>
 80007a6:	4a64      	ldr	r2, [pc, #400]	; (8000938 <FastMemoryTest+0x348>)
 80007a8:	e000      	b.n	80007ac <FastMemoryTest+0x1bc>
 80007aa:	4a64      	ldr	r2, [pc, #400]	; (800093c <FastMemoryTest+0x34c>)
 80007ac:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80007b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007b4:	4962      	ldr	r1, [pc, #392]	; (8000940 <FastMemoryTest+0x350>)
 80007b6:	f006 fc45 	bl	8007044 <siprintf>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 80007ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fd3e 	bl	8000240 <strlen>
 80007c4:	4603      	mov	r3, r0
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80007cc:	f04f 33ff 	mov.w	r3, #4294967295
 80007d0:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 80007d4:	f005 fb96 	bl	8005f04 <HAL_UART_Transmit>
	HAL_Delay(50);
 80007d8:	2032      	movs	r0, #50	; 0x32
 80007da:	f001 fc4f 	bl	800207c <HAL_Delay>


	sprintf(writeBuffer, "\t%s\n\r\0", "Checking FL1/1");
 80007de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007e2:	4a59      	ldr	r2, [pc, #356]	; (8000948 <FastMemoryTest+0x358>)
 80007e4:	4953      	ldr	r1, [pc, #332]	; (8000934 <FastMemoryTest+0x344>)
 80007e6:	4618      	mov	r0, r3
 80007e8:	f006 fc2c 	bl	8007044 <siprintf>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 80007ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fd25 	bl	8000240 <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8000806:	f005 fb7d 	bl	8005f04 <HAL_UART_Transmit>
	startTime = HAL_GetTick();
 800080a:	f001 fc2b 	bl	8002064 <HAL_GetTick>
 800080e:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	result = FastTest(DUT2);
 8000812:	f107 0310 	add.w	r3, r7, #16
 8000816:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800081a:	f000 f899 	bl	8000950 <FastTest>
 800081e:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	endTime = HAL_GetTick() - startTime;
 8000822:	f001 fc1f 	bl	8002064 <HAL_GetTick>
 8000826:	4602      	mov	r2, r0
 8000828:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	sprintf(writeBuffer, "\t\tResult: %s, took %dms\r\n\0", result == 1 ? "Passed" : "Failed", endTime);
 8000832:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000836:	2b01      	cmp	r3, #1
 8000838:	d101      	bne.n	800083e <FastMemoryTest+0x24e>
 800083a:	4a3f      	ldr	r2, [pc, #252]	; (8000938 <FastMemoryTest+0x348>)
 800083c:	e000      	b.n	8000840 <FastMemoryTest+0x250>
 800083e:	4a3f      	ldr	r2, [pc, #252]	; (800093c <FastMemoryTest+0x34c>)
 8000840:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000844:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000848:	493d      	ldr	r1, [pc, #244]	; (8000940 <FastMemoryTest+0x350>)
 800084a:	f006 fbfb 	bl	8007044 <siprintf>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 800084e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fcf4 	bl	8000240 <strlen>
 8000858:	4603      	mov	r3, r0
 800085a:	b29a      	uxth	r2, r3
 800085c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000860:	f04f 33ff 	mov.w	r3, #4294967295
 8000864:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8000868:	f005 fb4c 	bl	8005f04 <HAL_UART_Transmit>
	HAL_Delay(50);
 800086c:	2032      	movs	r0, #50	; 0x32
 800086e:	f001 fc05 	bl	800207c <HAL_Delay>


	sprintf(writeBuffer, "\t%s\n\r\0", "Checking FL1/2");
 8000872:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000876:	4a35      	ldr	r2, [pc, #212]	; (800094c <FastMemoryTest+0x35c>)
 8000878:	492e      	ldr	r1, [pc, #184]	; (8000934 <FastMemoryTest+0x344>)
 800087a:	4618      	mov	r0, r3
 800087c:	f006 fbe2 	bl	8007044 <siprintf>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 8000880:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fcdb 	bl	8000240 <strlen>
 800088a:	4603      	mov	r3, r0
 800088c:	b29a      	uxth	r2, r3
 800088e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000892:	f04f 33ff 	mov.w	r3, #4294967295
 8000896:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800089a:	f005 fb33 	bl	8005f04 <HAL_UART_Transmit>
	startTime = HAL_GetTick();
 800089e:	f001 fbe1 	bl	8002064 <HAL_GetTick>
 80008a2:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	result = FastTest(DUT3);
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80008ac:	f000 f850 	bl	8000950 <FastTest>
 80008b0:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	endTime = HAL_GetTick() - startTime;
 80008b4:	f001 fbd6 	bl	8002064 <HAL_GetTick>
 80008b8:	4602      	mov	r2, r0
 80008ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	sprintf(writeBuffer, "\t\tResult: %s, took %dms\r\n\0", result == 1 ? "Passed" : "Failed", endTime);
 80008c4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d101      	bne.n	80008d0 <FastMemoryTest+0x2e0>
 80008cc:	4a1a      	ldr	r2, [pc, #104]	; (8000938 <FastMemoryTest+0x348>)
 80008ce:	e000      	b.n	80008d2 <FastMemoryTest+0x2e2>
 80008d0:	4a1a      	ldr	r2, [pc, #104]	; (800093c <FastMemoryTest+0x34c>)
 80008d2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80008d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80008da:	4919      	ldr	r1, [pc, #100]	; (8000940 <FastMemoryTest+0x350>)
 80008dc:	f006 fbb2 	bl	8007044 <siprintf>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 80008e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fcab 	bl	8000240 <strlen>
 80008ea:	4603      	mov	r3, r0
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295
 80008f6:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 80008fa:	f005 fb03 	bl	8005f04 <HAL_UART_Transmit>
	HAL_Delay(50);
 80008fe:	2032      	movs	r0, #50	; 0x32
 8000900:	f001 fbbc 	bl	800207c <HAL_Delay>




	return 0;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800090c:	46bd      	mov	sp, r7
 800090e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000912:	b004      	add	sp, #16
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	080078c8 	.word	0x080078c8
 800091c:	40020c00 	.word	0x40020c00
 8000920:	200000c0 	.word	0x200000c0
 8000924:	40020400 	.word	0x40020400
 8000928:	20000188 	.word	0x20000188
 800092c:	40021c00 	.word	0x40021c00
 8000930:	08007854 	.word	0x08007854
 8000934:	08007864 	.word	0x08007864
 8000938:	0800786c 	.word	0x0800786c
 800093c:	08007874 	.word	0x08007874
 8000940:	0800787c 	.word	0x0800787c
 8000944:	08007898 	.word	0x08007898
 8000948:	080078a8 	.word	0x080078a8
 800094c:	080078b8 	.word	0x080078b8

08000950 <FastTest>:

uint32_t FastTest(SPI_Values DUT) {
 8000950:	b580      	push	{r7, lr}
 8000952:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 8000956:	af02      	add	r7, sp, #8
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t writeBuffer[256] = { 0 };
 800095e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000962:	4618      	mov	r0, r3
 8000964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000968:	461a      	mov	r2, r3
 800096a:	2100      	movs	r1, #0
 800096c:	f006 fb61 	bl	8007032 <memset>
	uint8_t readBuffer[256] = { 0 };
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4618      	mov	r0, r3
 8000976:	f44f 7380 	mov.w	r3, #256	; 0x100
 800097a:	461a      	mov	r2, r3
 800097c:	2100      	movs	r1, #0
 800097e:	f006 fb58 	bl	8007032 <memset>
	uint32_t adresse = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	volatile uint8_t SR1;
	//Testdaten initialisieren
	for (int i = 0; i < 256; i++) {
 8000988:	2300      	movs	r3, #0
 800098a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800098e:	e00e      	b.n	80009ae <FastTest+0x5e>
		writeBuffer[i] = i;
 8000990:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000994:	b2d9      	uxtb	r1, r3
 8000996:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800099a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800099e:	4413      	add	r3, r2
 80009a0:	460a      	mov	r2, r1
 80009a2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 256; i++) {
 80009a4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80009a8:	3301      	adds	r3, #1
 80009aa:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80009ae:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80009b2:	2bff      	cmp	r3, #255	; 0xff
 80009b4:	ddec      	ble.n	8000990 <FastTest+0x40>

	//CHIP löschen
	//chipErase(DUT);
	//evtl Zusätzliche Schleife für die verschiedenen Chips und CS pins

	adresse = 0x0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	//Daten für eine Page schicken
	writePage(writeBuffer, adresse, DUT);
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	f507 708a 	add.w	r0, r7, #276	; 0x114
 80009c2:	689a      	ldr	r2, [r3, #8]
 80009c4:	9200      	str	r2, [sp, #0]
 80009c6:	cb0c      	ldmia	r3, {r2, r3}
 80009c8:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 80009cc:	f000 f931 	bl	8000c32 <writePage>
	//Warten bis fertig geschrieben wurde
	writeReady(DUT);
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80009d6:	f000 f9f1 	bl	8000dbc <writeReady>
	//Selbe page auslesen
	readPage(readBuffer, adresse, DUT);
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	f107 0014 	add.w	r0, r7, #20
 80009e0:	689a      	ldr	r2, [r3, #8]
 80009e2:	9200      	str	r2, [sp, #0]
 80009e4:	cb0c      	ldmia	r3, {r2, r3}
 80009e6:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 80009ea:	f000 f98b 	bl	8000d04 <readPage>
	//Inhalt vergleichen
	for (int y = 0; y < 256; y++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80009f4:	e01e      	b.n	8000a34 <FastTest+0xe4>
		//Wenn inhalt nicht gleich
		if (writeBuffer[y] != readBuffer[y]) {
 80009f6:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80009fa:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80009fe:	4413      	add	r3, r2
 8000a00:	781a      	ldrb	r2, [r3, #0]
 8000a02:	f107 0114 	add.w	r1, r7, #20
 8000a06:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000a0a:	440b      	add	r3, r1
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d00b      	beq.n	8000a2a <FastTest+0xda>
			SR1 = readStatus(DUT);
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a18:	f000 f8be 	bl	8000b98 <readStatus>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461a      	mov	r2, r3
 8000a20:	f107 0313 	add.w	r3, r7, #19
 8000a24:	701a      	strb	r2, [r3, #0]
			return 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	e009      	b.n	8000a3e <FastTest+0xee>
	for (int y = 0; y < 256; y++) {
 8000a2a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000a2e:	3301      	adds	r3, #1
 8000a30:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000a34:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000a38:	2bff      	cmp	r3, #255	; 0xff
 8000a3a:	dddc      	ble.n	80009f6 <FastTest+0xa6>
		}
	}
	return 1;
 8000a3c:	2301      	movs	r3, #1
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <MX_CRC_Init+0x3c>)
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <MX_CRC_Init+0x40>)
 8000a50:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_CRC_Init+0x3c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <MX_CRC_Init+0x3c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_CRC_Init+0x3c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <MX_CRC_Init+0x3c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_CRC_Init+0x3c>)
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a70:	4804      	ldr	r0, [pc, #16]	; (8000a84 <MX_CRC_Init+0x3c>)
 8000a72:	f001 fc65 	bl	8002340 <HAL_CRC_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000a7c:	f000 fd52 	bl	8001524 <Error_Handler>
  }

}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000098 	.word	0x20000098
 8000a88:	40023000 	.word	0x40023000

08000a8c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <HAL_CRC_MspInit+0x38>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d10b      	bne.n	8000ab6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <HAL_CRC_MspInit+0x3c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <HAL_CRC_MspInit+0x3c>)
 8000aa4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <HAL_CRC_MspInit+0x3c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40023000 	.word	0x40023000
 8000ac8:	40023800 	.word	0x40023800

08000acc <InitMemory>:

/**
 * Sets the pin to the right state
 * @returns 0: ok
 */
int32_t InitMemory(void) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FL1_CS1_GPIO_Port, FL1_CS1_Pin, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad6:	482d      	ldr	r0, [pc, #180]	; (8000b8c <InitMemory+0xc0>)
 8000ad8:	f002 f952 	bl	8002d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL1_CS2_GPIO_Port, FL1_CS2_Pin, GPIO_PIN_SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae2:	482b      	ldr	r0, [pc, #172]	; (8000b90 <InitMemory+0xc4>)
 8000ae4:	f002 f94c 	bl	8002d80 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FL2_CS1_GPIO_Port, FL2_CS1_Pin, GPIO_PIN_SET);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aee:	4829      	ldr	r0, [pc, #164]	; (8000b94 <InitMemory+0xc8>)
 8000af0:	f002 f946 	bl	8002d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL2_CS2_GPIO_Port, FL2_CS2_Pin, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000afa:	4826      	ldr	r0, [pc, #152]	; (8000b94 <InitMemory+0xc8>)
 8000afc:	f002 f940 	bl	8002d80 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FL1_HLD_GPIO_Port, FL1_HLD_Pin, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b06:	4822      	ldr	r0, [pc, #136]	; (8000b90 <InitMemory+0xc4>)
 8000b08:	f002 f93a 	bl	8002d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL2_HLD_GPIO_Port, FL2_HLD_Pin, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b12:	4820      	ldr	r0, [pc, #128]	; (8000b94 <InitMemory+0xc8>)
 8000b14:	f002 f934 	bl	8002d80 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FL1_WP_GPIO_Port, FL1_WP_Pin, GPIO_PIN_SET);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1e:	481c      	ldr	r0, [pc, #112]	; (8000b90 <InitMemory+0xc4>)
 8000b20:	f002 f92e 	bl	8002d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL2_WP_GPIO_Port, FL2_WP_Pin, GPIO_PIN_SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2a:	481a      	ldr	r0, [pc, #104]	; (8000b94 <InitMemory+0xc8>)
 8000b2c:	f002 f928 	bl	8002d80 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FL1_RES_GPIO_Port, FL1_RES_Pin, GPIO_PIN_SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b36:	4816      	ldr	r0, [pc, #88]	; (8000b90 <InitMemory+0xc4>)
 8000b38:	f002 f922 	bl	8002d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL2_RES_GPIO_Port, FL2_RES_Pin, GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b42:	4814      	ldr	r0, [pc, #80]	; (8000b94 <InitMemory+0xc8>)
 8000b44:	f002 f91c 	bl	8002d80 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000b48:	200a      	movs	r0, #10
 8000b4a:	f001 fa97 	bl	800207c <HAL_Delay>
	HAL_GPIO_WritePin(FL1_RES_GPIO_Port, FL1_RES_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b54:	480e      	ldr	r0, [pc, #56]	; (8000b90 <InitMemory+0xc4>)
 8000b56:	f002 f913 	bl	8002d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL2_RES_GPIO_Port, FL2_RES_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b60:	480c      	ldr	r0, [pc, #48]	; (8000b94 <InitMemory+0xc8>)
 8000b62:	f002 f90d 	bl	8002d80 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000b66:	200a      	movs	r0, #10
 8000b68:	f001 fa88 	bl	800207c <HAL_Delay>
	HAL_GPIO_WritePin(FL1_RES_GPIO_Port, FL1_RES_Pin, GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b72:	4807      	ldr	r0, [pc, #28]	; (8000b90 <InitMemory+0xc4>)
 8000b74:	f002 f904 	bl	8002d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL2_RES_GPIO_Port, FL2_RES_Pin, GPIO_PIN_SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <InitMemory+0xc8>)
 8000b80:	f002 f8fe 	bl	8002d80 <HAL_GPIO_WritePin>
	return 0;
 8000b84:	2300      	movs	r3, #0

}
 8000b86:	4618      	mov	r0, r3
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40020400 	.word	0x40020400
 8000b90:	40021c00 	.word	0x40021c00
 8000b94:	40020c00 	.word	0x40020c00

08000b98 <readStatus>:
 * Function Read Status
 * reads the status byte from the memory unit
 * @param: SPI_val
 * @return 8 bit status register
 */
uint8_t readStatus(SPI_Values SPI_val) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t data;
	uint8_t command = c_READSTATUSREG1;
 8000ba4:	2305      	movs	r3, #5
 8000ba6:	75bb      	strb	r3, [r7, #22]
	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	8939      	ldrh	r1, [r7, #8]
 8000bac:	2200      	movs	r2, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f002 f8e6 	bl	8002d80 <HAL_GPIO_WritePin>

	HAL_Delay(1); //test
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f001 fa61 	bl	800207c <HAL_Delay>

	//send command
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f107 0116 	add.w	r1, r7, #22
 8000bc0:	230a      	movs	r3, #10
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f004 f98e 	bl	8004ee4 <HAL_SPI_Transmit>
	//read data from status register
	HAL_SPI_Receive(SPI_val.spihandle, &data, 1, 10);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f107 0117 	add.w	r1, r7, #23
 8000bce:	230a      	movs	r3, #10
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f004 fafd 	bl	80051d0 <HAL_SPI_Receive>
	//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	8939      	ldrh	r1, [r7, #8]
 8000bda:	2201      	movs	r2, #1
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f002 f8cf 	bl	8002d80 <HAL_GPIO_WritePin>
	return data;
 8000be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <writeByte>:
 *  @brief Writes one byte so SPI
 *  @param uint8_t data: the one byte
 *  @param SPI_Val: the specifier of the SPI
 *  @return 0: Ok.
 */
int writeByte(uint8_t data, SPI_Values SPI_val) {
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b087      	sub	sp, #28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	4638      	mov	r0, r7
 8000bf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000bfa:	4623      	mov	r3, r4
 8000bfc:	73fb      	strb	r3, [r7, #15]
	uint8_t command = data;
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	75fb      	strb	r3, [r7, #23]
	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	88b9      	ldrh	r1, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f002 f8b9 	bl	8002d80 <HAL_GPIO_WritePin>
	//Ausgabe lesen
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 8000c0e:	6838      	ldr	r0, [r7, #0]
 8000c10:	f107 0117 	add.w	r1, r7, #23
 8000c14:	230a      	movs	r3, #10
 8000c16:	2201      	movs	r2, #1
 8000c18:	f004 f964 	bl	8004ee4 <HAL_SPI_Transmit>
	//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	88b9      	ldrh	r1, [r7, #4]
 8000c20:	2201      	movs	r2, #1
 8000c22:	4618      	mov	r0, r3
 8000c24:	f002 f8ac 	bl	8002d80 <HAL_GPIO_WritePin>
	return 0;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	371c      	adds	r7, #28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd90      	pop	{r4, r7, pc}

08000c32 <writePage>:
 * @param uint8_t * data: Pointer to the data field
 * @param uint32_t address: the address on the memory chip
 * @param SPI_Values SPI_val
 * @return 0: ok
 */
int writePage(uint8_t *data, uint32_t address, SPI_Values SPI_val) {
 8000c32:	b082      	sub	sp, #8
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	f107 0118 	add.w	r1, r7, #24
 8000c42:	e881 000c 	stmia.w	r1, {r2, r3}

	uint8_t command = c_WRITEPAGE;
 8000c46:	2312      	movs	r3, #18
 8000c48:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp_add;

//Write enable
	writeByte(c_WREN, SPI_val);
 8000c4a:	f107 0318 	add.w	r3, r7, #24
 8000c4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c50:	2006      	movs	r0, #6
 8000c52:	f7ff ffcb 	bl	8000bec <writeByte>

	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 8000c56:	6a3b      	ldr	r3, [r7, #32]
 8000c58:	8bb9      	ldrh	r1, [r7, #28]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f002 f88f 	bl	8002d80 <HAL_GPIO_WritePin>

	//commando schicken
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 8000c62:	69b8      	ldr	r0, [r7, #24]
 8000c64:	f107 010f 	add.w	r1, r7, #15
 8000c68:	230a      	movs	r3, #10
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f004 f93a 	bl	8004ee4 <HAL_SPI_Transmit>
	HAL_Delay(10);
 8000c70:	200a      	movs	r0, #10
 8000c72:	f001 fa03 	bl	800207c <HAL_Delay>
	//Addressse schicken MSB to LSB
//	HAL_SPI_Transmit(SPI_val.spihandle, (uint8_t*) (&address), 4, 40);

	tmp_add = (uint8_t) ((address >> 24) & 0x000000FF);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	0e1b      	lsrs	r3, r3, #24
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000c7e:	69b8      	ldr	r0, [r7, #24]
 8000c80:	f107 010e 	add.w	r1, r7, #14
 8000c84:	230a      	movs	r3, #10
 8000c86:	2201      	movs	r2, #1
 8000c88:	f004 f92c 	bl	8004ee4 <HAL_SPI_Transmit>
	tmp_add = (uint8_t) ((address >> 16) & 0x000000FF);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	0c1b      	lsrs	r3, r3, #16
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000c94:	69b8      	ldr	r0, [r7, #24]
 8000c96:	f107 010e 	add.w	r1, r7, #14
 8000c9a:	230a      	movs	r3, #10
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f004 f921 	bl	8004ee4 <HAL_SPI_Transmit>
	tmp_add = (uint8_t) ((address >> 8) & 0x000000FF);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000caa:	69b8      	ldr	r0, [r7, #24]
 8000cac:	f107 010e 	add.w	r1, r7, #14
 8000cb0:	230a      	movs	r3, #10
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f004 f916 	bl	8004ee4 <HAL_SPI_Transmit>
	tmp_add = (uint8_t) (address & 0x000000FF);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000cbe:	69b8      	ldr	r0, [r7, #24]
 8000cc0:	f107 010e 	add.w	r1, r7, #14
 8000cc4:	230a      	movs	r3, #10
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f004 f90c 	bl	8004ee4 <HAL_SPI_Transmit>

	//Daten schicken
	HAL_SPI_Transmit(SPI_val.spihandle, data, 256, 2560);
 8000ccc:	69b8      	ldr	r0, [r7, #24]
 8000cce:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	f004 f904 	bl	8004ee4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(SPI_val.spihandle, &data[i], 1, 10);
	}
*/

	//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 8000cdc:	6a3b      	ldr	r3, [r7, #32]
 8000cde:	8bb9      	ldrh	r1, [r7, #28]
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f002 f84c 	bl	8002d80 <HAL_GPIO_WritePin>

	//Write disable
	writeByte(c_WRDI, SPI_val);
 8000ce8:	f107 0318 	add.w	r3, r7, #24
 8000cec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cee:	2004      	movs	r0, #4
 8000cf0:	f7ff ff7c 	bl	8000bec <writeByte>
	return 0;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d00:	b002      	add	sp, #8
 8000d02:	4770      	bx	lr

08000d04 <readPage>:
 * @param uint8_t  * data: Pointer to the data array
 * @param uint32_t address: Address of the momory unit to be read
 * @param SPI_Values SPI_val: the corresponding SPI values
 * @return 0: ok
 */
int readPage(uint8_t *data, uint32_t address, SPI_Values SPI_val) {
 8000d04:	b082      	sub	sp, #8
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b084      	sub	sp, #16
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	6039      	str	r1, [r7, #0]
 8000d10:	f107 0118 	add.w	r1, r7, #24
 8000d14:	e881 000c 	stmia.w	r1, {r2, r3}

	uint8_t command = c_READ;
 8000d18:	2313      	movs	r3, #19
 8000d1a:	73fb      	strb	r3, [r7, #15]

	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 8000d1c:	6a3b      	ldr	r3, [r7, #32]
 8000d1e:	8bb9      	ldrh	r1, [r7, #28]
 8000d20:	2200      	movs	r2, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f002 f82c 	bl	8002d80 <HAL_GPIO_WritePin>

	//commando schicken
//	writeByte(c_READ, SPI_val);
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 8000d28:	69b8      	ldr	r0, [r7, #24]
 8000d2a:	f107 010f 	add.w	r1, r7, #15
 8000d2e:	230a      	movs	r3, #10
 8000d30:	2201      	movs	r2, #1
 8000d32:	f004 f8d7 	bl	8004ee4 <HAL_SPI_Transmit>

//4 Byte Addressse schicken MSB to LSB
//	HAL_SPI_Transmit(SPI_val.spihandle, (uint8_t*) (&address), 4, 40);
	tmp_add = (uint8_t) ((address >> 24) & 0x000000FF);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	0e1b      	lsrs	r3, r3, #24
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <readPage+0xb4>)
 8000d3e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000d40:	69b8      	ldr	r0, [r7, #24]
 8000d42:	230a      	movs	r3, #10
 8000d44:	2201      	movs	r2, #1
 8000d46:	491c      	ldr	r1, [pc, #112]	; (8000db8 <readPage+0xb4>)
 8000d48:	f004 f8cc 	bl	8004ee4 <HAL_SPI_Transmit>
	tmp_add = (uint8_t) ((address >> 16) & 0x000000FF);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	0c1b      	lsrs	r3, r3, #16
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <readPage+0xb4>)
 8000d54:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000d56:	69b8      	ldr	r0, [r7, #24]
 8000d58:	230a      	movs	r3, #10
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4916      	ldr	r1, [pc, #88]	; (8000db8 <readPage+0xb4>)
 8000d5e:	f004 f8c1 	bl	8004ee4 <HAL_SPI_Transmit>
	tmp_add = (uint8_t) ((address >> 8) & 0x000000FF);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <readPage+0xb4>)
 8000d6a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000d6c:	69b8      	ldr	r0, [r7, #24]
 8000d6e:	230a      	movs	r3, #10
 8000d70:	2201      	movs	r2, #1
 8000d72:	4911      	ldr	r1, [pc, #68]	; (8000db8 <readPage+0xb4>)
 8000d74:	f004 f8b6 	bl	8004ee4 <HAL_SPI_Transmit>
	tmp_add = (uint8_t) (address & 0x000000FF);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <readPage+0xb4>)
 8000d7e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000d80:	69b8      	ldr	r0, [r7, #24]
 8000d82:	230a      	movs	r3, #10
 8000d84:	2201      	movs	r2, #1
 8000d86:	490c      	ldr	r1, [pc, #48]	; (8000db8 <readPage+0xb4>)
 8000d88:	f004 f8ac 	bl	8004ee4 <HAL_SPI_Transmit>

//Daten lesen
	HAL_SPI_Receive(SPI_val.spihandle, data, 256, 2560);
 8000d8c:	69b8      	ldr	r0, [r7, #24]
 8000d8e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000d92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	f004 fa1a 	bl	80051d0 <HAL_SPI_Receive>
//	for (int i = 0; i < 256; i++) {
//		HAL_SPI_Receive(SPI_val.spihandle, &data[i], 1, 10);
//	}

//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 8000d9c:	6a3b      	ldr	r3, [r7, #32]
 8000d9e:	8bb9      	ldrh	r1, [r7, #28]
 8000da0:	2201      	movs	r2, #1
 8000da2:	4618      	mov	r0, r3
 8000da4:	f001 ffec 	bl	8002d80 <HAL_GPIO_WritePin>

	return 0;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000db4:	b002      	add	sp, #8
 8000db6:	4770      	bx	lr
 8000db8:	200000bc 	.word	0x200000bc

08000dbc <writeReady>:

/**
 * Waits for the bit WIP (Write in Progress) bit to toggle
 * Reads SR1 register from memory
 */
void writeReady(SPI_Values SPI_val) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint32_t status = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
	uint8_t SR1 = 0xF;
 8000dcc:	230f      	movs	r3, #15
 8000dce:	74fb      	strb	r3, [r7, #19]
	while (status == 0) {
 8000dd0:	e00d      	b.n	8000dee <writeReady+0x32>
		SR1 = readStatus(SPI_val);
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000dd8:	f7ff fede 	bl	8000b98 <readStatus>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	74fb      	strb	r3, [r7, #19]
		if ((SR1 & 0x1) == 0)
 8000de0:	7cfb      	ldrb	r3, [r7, #19]
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <writeReady+0x32>
			status = 1;
 8000dea:	2301      	movs	r3, #1
 8000dec:	617b      	str	r3, [r7, #20]
	while (status == 0) {
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0ee      	beq.n	8000dd2 <writeReady+0x16>
	}
}
 8000df4:	bf00      	nop
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b090      	sub	sp, #64	; 0x40
 8000e00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e12:	4bb1      	ldr	r3, [pc, #708]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4ab0      	ldr	r2, [pc, #704]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000e18:	f043 0310 	orr.w	r3, r3, #16
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4bae      	ldr	r3, [pc, #696]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0310 	and.w	r3, r3, #16
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e2a:	4bab      	ldr	r3, [pc, #684]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4aaa      	ldr	r2, [pc, #680]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4ba8      	ldr	r3, [pc, #672]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e42:	4ba5      	ldr	r3, [pc, #660]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4aa4      	ldr	r2, [pc, #656]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4ba2      	ldr	r3, [pc, #648]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	623b      	str	r3, [r7, #32]
 8000e58:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e5a:	4b9f      	ldr	r3, [pc, #636]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a9e      	ldr	r2, [pc, #632]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000e60:	f043 0320 	orr.w	r3, r3, #32
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b9c      	ldr	r3, [pc, #624]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0320 	and.w	r3, r3, #32
 8000e6e:	61fb      	str	r3, [r7, #28]
 8000e70:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e72:	4b99      	ldr	r3, [pc, #612]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a98      	ldr	r2, [pc, #608]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b96      	ldr	r3, [pc, #600]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e86:	61bb      	str	r3, [r7, #24]
 8000e88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	4b93      	ldr	r3, [pc, #588]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a92      	ldr	r2, [pc, #584]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b90      	ldr	r3, [pc, #576]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	4b8d      	ldr	r3, [pc, #564]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a8c      	ldr	r2, [pc, #560]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b8a      	ldr	r3, [pc, #552]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000eba:	4b87      	ldr	r3, [pc, #540]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a86      	ldr	r2, [pc, #536]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000ec0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b84      	ldr	r3, [pc, #528]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ed2:	4b81      	ldr	r3, [pc, #516]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a80      	ldr	r2, [pc, #512]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b7e      	ldr	r3, [pc, #504]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eea:	4b7b      	ldr	r3, [pc, #492]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a7a      	ldr	r2, [pc, #488]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000ef0:	f043 0308 	orr.w	r3, r3, #8
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b78      	ldr	r3, [pc, #480]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000f02:	4b75      	ldr	r3, [pc, #468]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a74      	ldr	r2, [pc, #464]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000f08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b72      	ldr	r3, [pc, #456]	; (80010d8 <MX_GPIO_Init+0x2dc>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED_4_Pin|LWL_OUT_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f244 0108 	movw	r1, #16392	; 0x4008
 8000f20:	486e      	ldr	r0, [pc, #440]	; (80010dc <MX_GPIO_Init+0x2e0>)
 8000f22:	f001 ff2d 	bl	8002d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_3_Pin|LED_2_Pin|LED_1_Pin|SD_CS_Pin
 8000f26:	2200      	movs	r2, #0
 8000f28:	f24e 4138 	movw	r1, #58424	; 0xe438
 8000f2c:	486c      	ldr	r0, [pc, #432]	; (80010e0 <MX_GPIO_Init+0x2e4>)
 8000f2e:	f001 ff27 	bl	8002d80 <HAL_GPIO_WritePin>
                          |nCS_DMS1_Pin|nCS_DMS2_Pin|nCS_DMS3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, nCS_DMS4_Pin|nCS_DMS5_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2103      	movs	r1, #3
 8000f36:	486b      	ldr	r0, [pc, #428]	; (80010e4 <MX_GPIO_Init+0x2e8>)
 8000f38:	f001 ff22 	bl	8002d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCS_DMS6_GPIO_Port, nCS_DMS6_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2180      	movs	r1, #128	; 0x80
 8000f40:	4869      	ldr	r0, [pc, #420]	; (80010e8 <MX_GPIO_Init+0x2ec>)
 8000f42:	f001 ff1d 	bl	8002d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, FL1_HLD_Pin|FL1_WP_Pin|FL1_RES_Pin|FL1_CS2_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8000f4c:	4867      	ldr	r0, [pc, #412]	; (80010ec <MX_GPIO_Init+0x2f0>)
 8000f4e:	f001 ff17 	bl	8002d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL1_CS1_GPIO_Port, FL1_CS1_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f58:	4865      	ldr	r0, [pc, #404]	; (80010f0 <MX_GPIO_Init+0x2f4>)
 8000f5a:	f001 ff11 	bl	8002d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, nCS_PT3_Pin|FL2_HLD_Pin|FL2_RES_Pin|FL2_CS2_Pin
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000f64:	4863      	ldr	r0, [pc, #396]	; (80010f4 <MX_GPIO_Init+0x2f8>)
 8000f66:	f001 ff0b 	bl	8002d80 <HAL_GPIO_WritePin>
                          |FL2_CS1_Pin|FL2_WP_Pin|nCS_PT2_Pin|nCS_PT1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE3 PE4 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
 8000f6a:	f64f 7318 	movw	r3, #65304	; 0xff18
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f70:	2303      	movs	r3, #3
 8000f72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	485a      	ldr	r0, [pc, #360]	; (80010e8 <MX_GPIO_Init+0x2ec>)
 8000f80:	f001 fb50 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LWL_IN_Pin;
 8000f84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LWL_IN_GPIO_Port, &GPIO_InitStruct);
 8000f92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f96:	4619      	mov	r1, r3
 8000f98:	4850      	ldr	r0, [pc, #320]	; (80010dc <MX_GPIO_Init+0x2e0>)
 8000f9a:	f001 fb43 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000f9e:	f24e 33ff 	movw	r3, #58367	; 0xe3ff
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4851      	ldr	r0, [pc, #324]	; (80010f8 <MX_GPIO_Init+0x2fc>)
 8000fb4:	f001 fb36 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI10 PI11 PI12 PI13
                           PI15 PI0 PI1 PI2
                           PI4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000fb8:	f64b 4317 	movw	r3, #48151	; 0xbc17
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4843      	ldr	r0, [pc, #268]	; (80010dc <MX_GPIO_Init+0x2e0>)
 8000fce:	f001 fb29 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF6
                           PF11 PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8000fd2:	f641 0347 	movw	r3, #6215	; 0x1847
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fe0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	483e      	ldr	r0, [pc, #248]	; (80010e0 <MX_GPIO_Init+0x2e4>)
 8000fe8:	f001 fb1c 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LED_4_Pin|LWL_OUT_Pin;
 8000fec:	f244 0308 	movw	r3, #16392	; 0x4008
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ffe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001002:	4619      	mov	r1, r3
 8001004:	4835      	ldr	r0, [pc, #212]	; (80010dc <MX_GPIO_Init+0x2e0>)
 8001006:	f001 fb0d 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LED_1_Pin|SD_CS_Pin
 800100a:	f24e 4338 	movw	r3, #58424	; 0xe438
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |nCS_DMS1_Pin|nCS_DMS2_Pin|nCS_DMS3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800101c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001020:	4619      	mov	r1, r3
 8001022:	482f      	ldr	r0, [pc, #188]	; (80010e0 <MX_GPIO_Init+0x2e4>)
 8001024:	f001 fafe 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH2 PH3
                           PH4 PH5 PH6 PH7
                           PH8 PH13 PH14 PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001028:	f24e 13ff 	movw	r3, #57855	; 0xe1ff
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102e:	2303      	movs	r3, #3
 8001030:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001036:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800103a:	4619      	mov	r1, r3
 800103c:	482b      	ldr	r0, [pc, #172]	; (80010ec <MX_GPIO_Init+0x2f0>)
 800103e:	f001 faf1 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001042:	231e      	movs	r3, #30
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001046:	2303      	movs	r3, #3
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001052:	4619      	mov	r1, r3
 8001054:	4829      	ldr	r0, [pc, #164]	; (80010fc <MX_GPIO_Init+0x300>)
 8001056:	f001 fae5 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800105a:	f640 73e3 	movw	r3, #4067	; 0xfe3
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001060:	2303      	movs	r3, #3
 8001062:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001068:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800106c:	4619      	mov	r1, r3
 800106e:	4820      	ldr	r0, [pc, #128]	; (80010f0 <MX_GPIO_Init+0x2f4>)
 8001070:	f001 fad8 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ0 PJ1 PJ2 PJ3
                           PJ4 PJ5 PJ12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001074:	f241 033f 	movw	r3, #4159	; 0x103f
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107a:	2303      	movs	r3, #3
 800107c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001082:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001086:	4619      	mov	r1, r3
 8001088:	481d      	ldr	r0, [pc, #116]	; (8001100 <MX_GPIO_Init+0x304>)
 800108a:	f001 facb 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = nCS_DMS4_Pin|nCS_DMS5_Pin;
 800108e:	2303      	movs	r3, #3
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	2301      	movs	r3, #1
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800109e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010a2:	4619      	mov	r1, r3
 80010a4:	480f      	ldr	r0, [pc, #60]	; (80010e4 <MX_GPIO_Init+0x2e8>)
 80010a6:	f001 fabd 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nCS_DMS6_Pin;
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(nCS_DMS6_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010be:	4619      	mov	r1, r3
 80010c0:	4809      	ldr	r0, [pc, #36]	; (80010e8 <MX_GPIO_Init+0x2ec>)
 80010c2:	f001 faaf 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = FL1_HLD_Pin|FL1_WP_Pin|FL1_RES_Pin|FL1_CS2_Pin;
 80010c6:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	e015      	b.n	8001104 <MX_GPIO_Init+0x308>
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40022000 	.word	0x40022000
 80010e0:	40021400 	.word	0x40021400
 80010e4:	40021800 	.word	0x40021800
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40021c00 	.word	0x40021c00
 80010f0:	40020400 	.word	0x40020400
 80010f4:	40020c00 	.word	0x40020c00
 80010f8:	40020800 	.word	0x40020800
 80010fc:	40020000 	.word	0x40020000
 8001100:	40022400 	.word	0x40022400
 8001104:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001106:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800110a:	4619      	mov	r1, r3
 800110c:	4856      	ldr	r0, [pc, #344]	; (8001268 <MX_GPIO_Init+0x46c>)
 800110e:	f001 fa89 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FL1_CS1_Pin;
 8001112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	2301      	movs	r3, #1
 800111a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FL1_CS1_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001128:	4619      	mov	r1, r3
 800112a:	4850      	ldr	r0, [pc, #320]	; (800126c <MX_GPIO_Init+0x470>)
 800112c:	f001 fa7a 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = nCS_PT3_Pin|FL2_HLD_Pin|FL2_RES_Pin|FL2_CS2_Pin
 8001130:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FL2_CS1_Pin|FL2_WP_Pin|nCS_PT2_Pin|nCS_PT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	2301      	movs	r3, #1
 8001138:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001142:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001146:	4619      	mov	r1, r3
 8001148:	4849      	ldr	r0, [pc, #292]	; (8001270 <MX_GPIO_Init+0x474>)
 800114a:	f001 fa6b 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MS_SEL_Pin;
 800114e:	2304      	movs	r3, #4
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001152:	2300      	movs	r3, #0
 8001154:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MS_SEL_GPIO_Port, &GPIO_InitStruct);
 800115a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800115e:	4619      	mov	r1, r3
 8001160:	4844      	ldr	r0, [pc, #272]	; (8001274 <MX_GPIO_Init+0x478>)
 8001162:	f001 fa5f 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG5 PG6 PG7
                           PG8 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001166:	f64f 73e8 	movw	r3, #65512	; 0xffe8
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800116c:	2303      	movs	r3, #3
 800116e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001174:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001178:	4619      	mov	r1, r3
 800117a:	483e      	ldr	r0, [pc, #248]	; (8001274 <MX_GPIO_Init+0x478>)
 800117c:	f001 fa52 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDRDY_DMS1_Pin;
 8001180:	2310      	movs	r3, #16
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001184:	4b3c      	ldr	r3, [pc, #240]	; (8001278 <MX_GPIO_Init+0x47c>)
 8001186:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(nDRDY_DMS1_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001190:	4619      	mov	r1, r3
 8001192:	4838      	ldr	r0, [pc, #224]	; (8001274 <MX_GPIO_Init+0x478>)
 8001194:	f001 fa46 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = nDRDY_DMS2_Pin|nDRDY_DMS3_Pin|nDRDY_DMS5_Pin|nDRDY_DMS6_Pin;
 8001198:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800119e:	4b36      	ldr	r3, [pc, #216]	; (8001278 <MX_GPIO_Init+0x47c>)
 80011a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011aa:	4619      	mov	r1, r3
 80011ac:	4833      	ldr	r0, [pc, #204]	; (800127c <MX_GPIO_Init+0x480>)
 80011ae:	f001 fa39 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDRDY_DMS4_Pin;
 80011b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b8:	2300      	movs	r3, #0
 80011ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(nDRDY_DMS4_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c4:	4619      	mov	r1, r3
 80011c6:	482d      	ldr	r0, [pc, #180]	; (800127c <MX_GPIO_Init+0x480>)
 80011c8:	f001 fa2c 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80011cc:	23fb      	movs	r3, #251	; 0xfb
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d0:	2303      	movs	r3, #3
 80011d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011dc:	4619      	mov	r1, r3
 80011de:	4824      	ldr	r0, [pc, #144]	; (8001270 <MX_GPIO_Init+0x474>)
 80011e0:	f001 fa20 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = nDRDY_PT3_Pin|nDRDY_PT2_Pin|nDRDY_PT1_Pin;
 80011e4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ea:	4b23      	ldr	r3, [pc, #140]	; (8001278 <MX_GPIO_Init+0x47c>)
 80011ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80011f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f6:	4619      	mov	r1, r3
 80011f8:	4821      	ldr	r0, [pc, #132]	; (8001280 <MX_GPIO_Init+0x484>)
 80011fa:	f001 fa13 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK3 PK4 PK5 PK6
                           PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80011fe:	23f8      	movs	r3, #248	; 0xf8
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001202:	2303      	movs	r3, #3
 8001204:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800120a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800120e:	4619      	mov	r1, r3
 8001210:	481c      	ldr	r0, [pc, #112]	; (8001284 <MX_GPIO_Init+0x488>)
 8001212:	f001 fa07 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SODS_OPT_Pin|SOE_OPT_Pin|LO_OPT_Pin;
 8001216:	23e0      	movs	r3, #224	; 0xe0
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <MX_GPIO_Init+0x47c>)
 800121c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001222:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001226:	4619      	mov	r1, r3
 8001228:	4817      	ldr	r0, [pc, #92]	; (8001288 <MX_GPIO_Init+0x48c>)
 800122a:	f001 f9fb 	bl	8002624 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2105      	movs	r1, #5
 8001232:	200a      	movs	r0, #10
 8001234:	f001 f834 	bl	80022a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001238:	200a      	movs	r0, #10
 800123a:	f001 f85d 	bl	80022f8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2105      	movs	r1, #5
 8001242:	2017      	movs	r0, #23
 8001244:	f001 f82c 	bl	80022a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001248:	2017      	movs	r0, #23
 800124a:	f001 f855 	bl	80022f8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2105      	movs	r1, #5
 8001252:	2028      	movs	r0, #40	; 0x28
 8001254:	f001 f824 	bl	80022a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001258:	2028      	movs	r0, #40	; 0x28
 800125a:	f001 f84d 	bl	80022f8 <HAL_NVIC_EnableIRQ>

}
 800125e:	bf00      	nop
 8001260:	3740      	adds	r7, #64	; 0x40
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40021c00 	.word	0x40021c00
 800126c:	40020400 	.word	0x40020400
 8001270:	40020c00 	.word	0x40020c00
 8001274:	40021800 	.word	0x40021800
 8001278:	10110000 	.word	0x10110000
 800127c:	40020000 	.word	0x40020000
 8001280:	40022400 	.word	0x40022400
 8001284:	40022800 	.word	0x40022800
 8001288:	40022000 	.word	0x40022000

0800128c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001290:	f000 fe97 	bl	8001fc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001294:	f000 f83c 	bl	8001310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001298:	f7ff fdb0 	bl	8000dfc <MX_GPIO_Init>
  MX_SPI2_Init();
 800129c:	f000 f954 	bl	8001548 <MX_SPI2_Init>
  MX_SPI3_Init();
 80012a0:	f000 f990 	bl	80015c4 <MX_SPI3_Init>
  MX_SPI6_Init();
 80012a4:	f000 fa48 	bl	8001738 <MX_SPI6_Init>
  MX_UART4_Init();
 80012a8:	f000 fcd4 	bl	8001c54 <MX_UART4_Init>
  MX_UART8_Init();
 80012ac:	f000 fd32 	bl	8001d14 <MX_UART8_Init>
  MX_UART5_Init();
 80012b0:	f000 fd00 	bl	8001cb4 <MX_UART5_Init>
  MX_CRC_Init();
 80012b4:	f7ff fbc8 	bl	8000a48 <MX_CRC_Init>
  MX_SPI4_Init();
 80012b8:	f000 f9c2 	bl	8001640 <MX_SPI4_Init>
  MX_SPI5_Init();
 80012bc:	f000 f9fe 	bl	80016bc <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET); //clear all LEDs
 80012c0:	2200      	movs	r2, #0
 80012c2:	2120      	movs	r1, #32
 80012c4:	480f      	ldr	r0, [pc, #60]	; (8001304 <main+0x78>)
 80012c6:	f001 fd5b 	bl	8002d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2110      	movs	r1, #16
 80012ce:	480d      	ldr	r0, [pc, #52]	; (8001304 <main+0x78>)
 80012d0:	f001 fd56 	bl	8002d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2108      	movs	r1, #8
 80012d8:	480a      	ldr	r0, [pc, #40]	; (8001304 <main+0x78>)
 80012da:	f001 fd51 	bl	8002d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012e4:	4808      	ldr	r0, [pc, #32]	; (8001308 <main+0x7c>)
 80012e6:	f001 fd4b 	bl	8002d80 <HAL_GPIO_WritePin>

	if (!HAL_GPIO_ReadPin(MS_SEL_GPIO_Port, MS_SEL_Pin)) {
 80012ea:	2104      	movs	r1, #4
 80012ec:	4807      	ldr	r0, [pc, #28]	; (800130c <main+0x80>)
 80012ee:	f001 fd27 	bl	8002d40 <HAL_GPIO_ReadPin>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <main+0x72>
		main_master();
 80012f8:	f000 f89e 	bl	8001438 <main_master>
 80012fc:	e001      	b.n	8001302 <main+0x76>
	} else { //Slave loop
		main_slave();
 80012fe:	f000 f8c5 	bl	800148c <main_slave>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001302:	e7fe      	b.n	8001302 <main+0x76>
 8001304:	40021400 	.word	0x40021400
 8001308:	40022000 	.word	0x40022000
 800130c:	40021800 	.word	0x40021800

08001310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b0b8      	sub	sp, #224	; 0xe0
 8001314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001316:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800131a:	2234      	movs	r2, #52	; 0x34
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f005 fe87 	bl	8007032 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001324:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	2290      	movs	r2, #144	; 0x90
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f005 fe78 	bl	8007032 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <SystemClock_Config+0x120>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	4a3a      	ldr	r2, [pc, #232]	; (8001430 <SystemClock_Config+0x120>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134c:	6413      	str	r3, [r2, #64]	; 0x40
 800134e:	4b38      	ldr	r3, [pc, #224]	; (8001430 <SystemClock_Config+0x120>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800135a:	4b36      	ldr	r3, [pc, #216]	; (8001434 <SystemClock_Config+0x124>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a35      	ldr	r2, [pc, #212]	; (8001434 <SystemClock_Config+0x124>)
 8001360:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	4b33      	ldr	r3, [pc, #204]	; (8001434 <SystemClock_Config+0x124>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001372:	2302      	movs	r3, #2
 8001374:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001378:	2301      	movs	r3, #1
 800137a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800137e:	2310      	movs	r3, #16
 8001380:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001384:	2302      	movs	r3, #2
 8001386:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001390:	2308      	movs	r3, #8
 8001392:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001396:	23c0      	movs	r3, #192	; 0xc0
 8001398:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800139c:	2302      	movs	r3, #2
 800139e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013a2:	2302      	movs	r3, #2
 80013a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013ac:	4618      	mov	r0, r3
 80013ae:	f001 fd87 	bl	8002ec0 <HAL_RCC_OscConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80013b8:	f000 f8b4 	bl	8001524 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013bc:	f001 fd30 	bl	8002e20 <HAL_PWREx_EnableOverDrive>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0xba>
  {
    Error_Handler();
 80013c6:	f000 f8ad 	bl	8001524 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ca:	230f      	movs	r3, #15
 80013cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d0:	2302      	movs	r3, #2
 80013d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80013e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80013ec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80013f0:	2106      	movs	r1, #6
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 f8d4 	bl	80035a0 <HAL_RCC_ClockConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80013fe:	f000 f891 	bl	8001524 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART5
 8001402:	f44f 5318 	mov.w	r3, #9728	; 0x2600
 8001406:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART8;
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001408:	2300      	movs	r3, #0
 800140a:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800140c:	2300      	movs	r3, #0
 800140e:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8001410:	2300      	movs	r3, #0
 8001412:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	4618      	mov	r0, r3
 800141a:	f002 fb4f 	bl	8003abc <HAL_RCCEx_PeriphCLKConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8001424:	f000 f87e 	bl	8001524 <Error_Handler>
  }
}
 8001428:	bf00      	nop
 800142a:	37e0      	adds	r7, #224	; 0xe0
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40023800 	.word	0x40023800
 8001434:	40007000 	.word	0x40007000

08001438 <main_master>:

/* USER CODE BEGIN 4 */
void main_master(void) {
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b0e3      	sub	sp, #396	; 0x18c
 800143c:	af1c      	add	r7, sp, #112	; 0x70
	//HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);  //ON = MS set to Master
	//uint8_t bufferOff[3] = {0x01, 0x03, 0x05};
	//uint8_t bufferOn[3] = {0x02, 0x04, 0x06};

	uint32_t lastInit = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t lastBlinky = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint8_t writeBuffer[256] = {0};
 800144a:	f107 0308 	add.w	r3, r7, #8
 800144e:	4618      	mov	r0, r3
 8001450:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001454:	461a      	mov	r2, r3
 8001456:	2100      	movs	r1, #0
 8001458:	f005 fdeb 	bl	8007032 <memset>

	uint8_t readSensor = 3; //DMS: 0-5, PT100: 6-8
 800145c:	2303      	movs	r3, #3
 800145e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	}
*/


	/* Performing the memory test */
	InitMemory();
 8001462:	f7ff fb33 	bl	8000acc <InitMemory>
	uint32_t memoryTest = FastMemoryTest(huart4);
 8001466:	4c08      	ldr	r4, [pc, #32]	; (8001488 <main_master+0x50>)
 8001468:	4668      	mov	r0, sp
 800146a:	f104 0310 	add.w	r3, r4, #16
 800146e:	2270      	movs	r2, #112	; 0x70
 8001470:	4619      	mov	r1, r3
 8001472:	f005 fdd3 	bl	800701c <memcpy>
 8001476:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800147a:	f7ff f8b9 	bl	80005f0 <FastMemoryTest>
 800147e:	4603      	mov	r3, r0
 8001480:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	while(1);
 8001484:	e7fe      	b.n	8001484 <main_master+0x4c>
 8001486:	bf00      	nop
 8001488:	200003b4 	.word	0x200003b4

0800148c <main_slave>:
		 HAL_Delay(100);
		 */
	}
}

void main_slave(void) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
	uint8_t buffer[1] = { 0x00 };
 8001492:	2300      	movs	r3, #0
 8001494:	713b      	strb	r3, [r7, #4]
	while (1) {
		HAL_UART_Receive(&huart5, buffer, sizeof(buffer), 5);
 8001496:	1d39      	adds	r1, r7, #4
 8001498:	2305      	movs	r3, #5
 800149a:	2201      	movs	r2, #1
 800149c:	481e      	ldr	r0, [pc, #120]	; (8001518 <main_slave+0x8c>)
 800149e:	f004 fdc2 	bl	8006026 <HAL_UART_Receive>
		if (buffer[0] == 0x01) {
 80014a2:	793b      	ldrb	r3, [r7, #4]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d105      	bne.n	80014b4 <main_slave+0x28>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2110      	movs	r1, #16
 80014ac:	481b      	ldr	r0, [pc, #108]	; (800151c <main_slave+0x90>)
 80014ae:	f001 fc67 	bl	8002d80 <HAL_GPIO_WritePin>
 80014b2:	e02d      	b.n	8001510 <main_slave+0x84>
		} else if (buffer[0] == 0x02) {
 80014b4:	793b      	ldrb	r3, [r7, #4]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d105      	bne.n	80014c6 <main_slave+0x3a>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80014ba:	2201      	movs	r2, #1
 80014bc:	2110      	movs	r1, #16
 80014be:	4817      	ldr	r0, [pc, #92]	; (800151c <main_slave+0x90>)
 80014c0:	f001 fc5e 	bl	8002d80 <HAL_GPIO_WritePin>
 80014c4:	e024      	b.n	8001510 <main_slave+0x84>
		} else if (buffer[0] == 0x03) {
 80014c6:	793b      	ldrb	r3, [r7, #4]
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d105      	bne.n	80014d8 <main_slave+0x4c>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2108      	movs	r1, #8
 80014d0:	4812      	ldr	r0, [pc, #72]	; (800151c <main_slave+0x90>)
 80014d2:	f001 fc55 	bl	8002d80 <HAL_GPIO_WritePin>
 80014d6:	e01b      	b.n	8001510 <main_slave+0x84>
		} else if (buffer[0] == 0x04) {
 80014d8:	793b      	ldrb	r3, [r7, #4]
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d105      	bne.n	80014ea <main_slave+0x5e>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	2108      	movs	r1, #8
 80014e2:	480e      	ldr	r0, [pc, #56]	; (800151c <main_slave+0x90>)
 80014e4:	f001 fc4c 	bl	8002d80 <HAL_GPIO_WritePin>
 80014e8:	e012      	b.n	8001510 <main_slave+0x84>
		} else if (buffer[0] == 0x05) {
 80014ea:	793b      	ldrb	r3, [r7, #4]
 80014ec:	2b05      	cmp	r3, #5
 80014ee:	d106      	bne.n	80014fe <main_slave+0x72>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014f6:	480a      	ldr	r0, [pc, #40]	; (8001520 <main_slave+0x94>)
 80014f8:	f001 fc42 	bl	8002d80 <HAL_GPIO_WritePin>
 80014fc:	e008      	b.n	8001510 <main_slave+0x84>
		} else if (buffer[0] == 0x06) {
 80014fe:	793b      	ldrb	r3, [r7, #4]
 8001500:	2b06      	cmp	r3, #6
 8001502:	d105      	bne.n	8001510 <main_slave+0x84>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8001504:	2201      	movs	r2, #1
 8001506:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <main_slave+0x94>)
 800150c:	f001 fc38 	bl	8002d80 <HAL_GPIO_WritePin>
		}
		buffer[1] = 0x00;
 8001510:	2300      	movs	r3, #0
 8001512:	717b      	strb	r3, [r7, #5]
		HAL_UART_Receive(&huart5, buffer, sizeof(buffer), 5);
 8001514:	e7bf      	b.n	8001496 <main_slave+0xa>
 8001516:	bf00      	nop
 8001518:	200002b4 	.word	0x200002b4
 800151c:	40021400 	.word	0x40021400
 8001520:	40022000 	.word	0x40022000

08001524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi5;
SPI_HandleTypeDef hspi6;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <MX_SPI2_Init+0x74>)
 800154e:	4a1c      	ldr	r2, [pc, #112]	; (80015c0 <MX_SPI2_Init+0x78>)
 8001550:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001552:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <MX_SPI2_Init+0x74>)
 8001554:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001558:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <MX_SPI2_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <MX_SPI2_Init+0x74>)
 8001562:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001566:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <MX_SPI2_Init+0x74>)
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <MX_SPI2_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_SPI2_Init+0x74>)
 8001576:	f44f 7200 	mov.w	r2, #512	; 0x200
 800157a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <MX_SPI2_Init+0x74>)
 800157e:	2208      	movs	r2, #8
 8001580:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <MX_SPI2_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_SPI2_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <MX_SPI2_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_SPI2_Init+0x74>)
 8001596:	2207      	movs	r2, #7
 8001598:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <MX_SPI2_Init+0x74>)
 800159c:	2200      	movs	r2, #0
 800159e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_SPI2_Init+0x74>)
 80015a2:	2208      	movs	r2, #8
 80015a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_SPI2_Init+0x74>)
 80015a8:	f003 faf4 	bl	8004b94 <HAL_SPI_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80015b2:	f7ff ffb7 	bl	8001524 <Error_Handler>
  }

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200000c0 	.word	0x200000c0
 80015c0:	40003800 	.word	0x40003800

080015c4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <MX_SPI3_Init+0x74>)
 80015ca:	4a1c      	ldr	r2, [pc, #112]	; (800163c <MX_SPI3_Init+0x78>)
 80015cc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80015ce:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <MX_SPI3_Init+0x74>)
 80015d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015d4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <MX_SPI3_Init+0x74>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <MX_SPI3_Init+0x74>)
 80015de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015e2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <MX_SPI3_Init+0x74>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ea:	4b13      	ldr	r3, [pc, #76]	; (8001638 <MX_SPI3_Init+0x74>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <MX_SPI3_Init+0x74>)
 80015f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <MX_SPI3_Init+0x74>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <MX_SPI3_Init+0x74>)
 8001600:	2200      	movs	r2, #0
 8001602:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <MX_SPI3_Init+0x74>)
 8001606:	2200      	movs	r2, #0
 8001608:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <MX_SPI3_Init+0x74>)
 800160c:	2200      	movs	r2, #0
 800160e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <MX_SPI3_Init+0x74>)
 8001612:	2207      	movs	r2, #7
 8001614:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <MX_SPI3_Init+0x74>)
 8001618:	2200      	movs	r2, #0
 800161a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <MX_SPI3_Init+0x74>)
 800161e:	2208      	movs	r2, #8
 8001620:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <MX_SPI3_Init+0x74>)
 8001624:	f003 fab6 	bl	8004b94 <HAL_SPI_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800162e:	f7ff ff79 	bl	8001524 <Error_Handler>
  }

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200001ec 	.word	0x200001ec
 800163c:	40003c00 	.word	0x40003c00

08001640 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <MX_SPI4_Init+0x74>)
 8001646:	4a1c      	ldr	r2, [pc, #112]	; (80016b8 <MX_SPI4_Init+0x78>)
 8001648:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <MX_SPI4_Init+0x74>)
 800164c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001650:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001652:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <MX_SPI4_Init+0x74>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <MX_SPI4_Init+0x74>)
 800165a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800165e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <MX_SPI4_Init+0x74>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001666:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <MX_SPI4_Init+0x74>)
 8001668:	2201      	movs	r2, #1
 800166a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <MX_SPI4_Init+0x74>)
 800166e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001672:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <MX_SPI4_Init+0x74>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <MX_SPI4_Init+0x74>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MX_SPI4_Init+0x74>)
 8001682:	2200      	movs	r2, #0
 8001684:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <MX_SPI4_Init+0x74>)
 8001688:	2200      	movs	r2, #0
 800168a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_SPI4_Init+0x74>)
 800168e:	2207      	movs	r2, #7
 8001690:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <MX_SPI4_Init+0x74>)
 8001694:	2200      	movs	r2, #0
 8001696:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <MX_SPI4_Init+0x74>)
 800169a:	2200      	movs	r2, #0
 800169c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_SPI4_Init+0x74>)
 80016a0:	f003 fa78 	bl	8004b94 <HAL_SPI_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80016aa:	f7ff ff3b 	bl	8001524 <Error_Handler>
  }

}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000250 	.word	0x20000250
 80016b8:	40013400 	.word	0x40013400

080016bc <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <MX_SPI5_Init+0x74>)
 80016c2:	4a1c      	ldr	r2, [pc, #112]	; (8001734 <MX_SPI5_Init+0x78>)
 80016c4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80016c6:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_SPI5_Init+0x74>)
 80016c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016cc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <MX_SPI5_Init+0x74>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_SPI5_Init+0x74>)
 80016d6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80016da:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_SPI5_Init+0x74>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <MX_SPI5_Init+0x74>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_SPI5_Init+0x74>)
 80016ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ee:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_SPI5_Init+0x74>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_SPI5_Init+0x74>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_SPI5_Init+0x74>)
 80016fe:	2200      	movs	r2, #0
 8001700:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <MX_SPI5_Init+0x74>)
 8001704:	2200      	movs	r2, #0
 8001706:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_SPI5_Init+0x74>)
 800170a:	2207      	movs	r2, #7
 800170c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <MX_SPI5_Init+0x74>)
 8001710:	2200      	movs	r2, #0
 8001712:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_SPI5_Init+0x74>)
 8001716:	2208      	movs	r2, #8
 8001718:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_SPI5_Init+0x74>)
 800171c:	f003 fa3a 	bl	8004b94 <HAL_SPI_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001726:	f7ff fefd 	bl	8001524 <Error_Handler>
  }

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000124 	.word	0x20000124
 8001734:	40015000 	.word	0x40015000

08001738 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <MX_SPI6_Init+0x74>)
 800173e:	4a1c      	ldr	r2, [pc, #112]	; (80017b0 <MX_SPI6_Init+0x78>)
 8001740:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8001742:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <MX_SPI6_Init+0x74>)
 8001744:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001748:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <MX_SPI6_Init+0x74>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8001750:	4b16      	ldr	r3, [pc, #88]	; (80017ac <MX_SPI6_Init+0x74>)
 8001752:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001756:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <MX_SPI6_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 800175e:	4b13      	ldr	r3, [pc, #76]	; (80017ac <MX_SPI6_Init+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_SPI6_Init+0x74>)
 8001766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800176a:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <MX_SPI6_Init+0x74>)
 800176e:	2208      	movs	r2, #8
 8001770:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_SPI6_Init+0x74>)
 8001774:	2200      	movs	r2, #0
 8001776:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_SPI6_Init+0x74>)
 800177a:	2200      	movs	r2, #0
 800177c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_SPI6_Init+0x74>)
 8001780:	2200      	movs	r2, #0
 8001782:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_SPI6_Init+0x74>)
 8001786:	2207      	movs	r2, #7
 8001788:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_SPI6_Init+0x74>)
 800178c:	2200      	movs	r2, #0
 800178e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_SPI6_Init+0x74>)
 8001792:	2208      	movs	r2, #8
 8001794:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_SPI6_Init+0x74>)
 8001798:	f003 f9fc 	bl	8004b94 <HAL_SPI_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_SPI6_Init+0x6e>
  {
    Error_Handler();
 80017a2:	f7ff febf 	bl	8001524 <Error_Handler>
  }

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000188 	.word	0x20000188
 80017b0:	40015400 	.word	0x40015400

080017b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b092      	sub	sp, #72	; 0x48
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a8e      	ldr	r2, [pc, #568]	; (8001a0c <HAL_SPI_MspInit+0x258>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d131      	bne.n	800183a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017d6:	4b8e      	ldr	r3, [pc, #568]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	4a8d      	ldr	r2, [pc, #564]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 80017dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e0:	6413      	str	r3, [r2, #64]	; 0x40
 80017e2:	4b8b      	ldr	r3, [pc, #556]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ea:	633b      	str	r3, [r7, #48]	; 0x30
 80017ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ee:	4b88      	ldr	r3, [pc, #544]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a87      	ldr	r2, [pc, #540]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b85      	ldr	r3, [pc, #532]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001806:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800180a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180c:	2302      	movs	r3, #2
 800180e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001818:	2305      	movs	r3, #5
 800181a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001820:	4619      	mov	r1, r3
 8001822:	487c      	ldr	r0, [pc, #496]	; (8001a14 <HAL_SPI_MspInit+0x260>)
 8001824:	f000 fefe 	bl	8002624 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 6, 0);
 8001828:	2200      	movs	r2, #0
 800182a:	2106      	movs	r1, #6
 800182c:	2024      	movs	r0, #36	; 0x24
 800182e:	f000 fd37 	bl	80022a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001832:	2024      	movs	r0, #36	; 0x24
 8001834:	f000 fd60 	bl	80022f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8001838:	e0e4      	b.n	8001a04 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI3)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a76      	ldr	r2, [pc, #472]	; (8001a18 <HAL_SPI_MspInit+0x264>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d145      	bne.n	80018d0 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001844:	4b72      	ldr	r3, [pc, #456]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	4a71      	ldr	r2, [pc, #452]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 800184a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800184e:	6413      	str	r3, [r2, #64]	; 0x40
 8001850:	4b6f      	ldr	r3, [pc, #444]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
 800185a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185c:	4b6c      	ldr	r3, [pc, #432]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 800185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001860:	4a6b      	ldr	r2, [pc, #428]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 8001862:	f043 0302 	orr.w	r3, r3, #2
 8001866:	6313      	str	r3, [r2, #48]	; 0x30
 8001868:	4b69      	ldr	r3, [pc, #420]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 800186a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001874:	4b66      	ldr	r3, [pc, #408]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	4a65      	ldr	r2, [pc, #404]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 800187a:	f043 0304 	orr.w	r3, r3, #4
 800187e:	6313      	str	r3, [r2, #48]	; 0x30
 8001880:	4b63      	ldr	r3, [pc, #396]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	623b      	str	r3, [r7, #32]
 800188a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800188c:	2304      	movs	r3, #4
 800188e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001898:	2303      	movs	r3, #3
 800189a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800189c:	2307      	movs	r3, #7
 800189e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018a4:	4619      	mov	r1, r3
 80018a6:	485b      	ldr	r0, [pc, #364]	; (8001a14 <HAL_SPI_MspInit+0x260>)
 80018a8:	f000 febc 	bl	8002624 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ba:	2303      	movs	r3, #3
 80018bc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018be:	2306      	movs	r3, #6
 80018c0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018c6:	4619      	mov	r1, r3
 80018c8:	4854      	ldr	r0, [pc, #336]	; (8001a1c <HAL_SPI_MspInit+0x268>)
 80018ca:	f000 feab 	bl	8002624 <HAL_GPIO_Init>
}
 80018ce:	e099      	b.n	8001a04 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI4)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a52      	ldr	r2, [pc, #328]	; (8001a20 <HAL_SPI_MspInit+0x26c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d130      	bne.n	800193c <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80018da:	4b4d      	ldr	r3, [pc, #308]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	4a4c      	ldr	r2, [pc, #304]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 80018e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018e4:	6453      	str	r3, [r2, #68]	; 0x44
 80018e6:	4b4a      	ldr	r3, [pc, #296]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018ee:	61fb      	str	r3, [r7, #28]
 80018f0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018f2:	4b47      	ldr	r3, [pc, #284]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a46      	ldr	r2, [pc, #280]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 80018f8:	f043 0310 	orr.w	r3, r3, #16
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b44      	ldr	r3, [pc, #272]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	61bb      	str	r3, [r7, #24]
 8001908:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800190a:	2364      	movs	r3, #100	; 0x64
 800190c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001916:	2303      	movs	r3, #3
 8001918:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800191a:	2305      	movs	r3, #5
 800191c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800191e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001922:	4619      	mov	r1, r3
 8001924:	483f      	ldr	r0, [pc, #252]	; (8001a24 <HAL_SPI_MspInit+0x270>)
 8001926:	f000 fe7d 	bl	8002624 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 6, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2106      	movs	r1, #6
 800192e:	2054      	movs	r0, #84	; 0x54
 8001930:	f000 fcb6 	bl	80022a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001934:	2054      	movs	r0, #84	; 0x54
 8001936:	f000 fcdf 	bl	80022f8 <HAL_NVIC_EnableIRQ>
}
 800193a:	e063      	b.n	8001a04 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI5)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a39      	ldr	r2, [pc, #228]	; (8001a28 <HAL_SPI_MspInit+0x274>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d129      	bne.n	800199a <HAL_SPI_MspInit+0x1e6>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001946:	4b32      	ldr	r3, [pc, #200]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	4a31      	ldr	r2, [pc, #196]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 800194c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001950:	6453      	str	r3, [r2, #68]	; 0x44
 8001952:	4b2f      	ldr	r3, [pc, #188]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800195e:	4b2c      	ldr	r3, [pc, #176]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a2b      	ldr	r2, [pc, #172]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 8001964:	f043 0320 	orr.w	r3, r3, #32
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b29      	ldr	r3, [pc, #164]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0320 	and.w	r3, r3, #32
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001976:	f44f 7360 	mov.w	r3, #896	; 0x380
 800197a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001988:	2305      	movs	r3, #5
 800198a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800198c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001990:	4619      	mov	r1, r3
 8001992:	4826      	ldr	r0, [pc, #152]	; (8001a2c <HAL_SPI_MspInit+0x278>)
 8001994:	f000 fe46 	bl	8002624 <HAL_GPIO_Init>
}
 8001998:	e034      	b.n	8001a04 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI6)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a24      	ldr	r2, [pc, #144]	; (8001a30 <HAL_SPI_MspInit+0x27c>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d12f      	bne.n	8001a04 <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI6_CLK_ENABLE();
 80019a4:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 80019a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a8:	4a19      	ldr	r2, [pc, #100]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 80019aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019ae:	6453      	str	r3, [r2, #68]	; 0x44
 80019b0:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 80019b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	4a13      	ldr	r2, [pc, #76]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6313      	str	r3, [r2, #48]	; 0x30
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <HAL_SPI_MspInit+0x25c>)
 80019ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019d4:	23e0      	movs	r3, #224	; 0xe0
 80019d6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 80019e4:	2308      	movs	r3, #8
 80019e6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019ec:	4619      	mov	r1, r3
 80019ee:	4811      	ldr	r0, [pc, #68]	; (8001a34 <HAL_SPI_MspInit+0x280>)
 80019f0:	f000 fe18 	bl	8002624 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 6, 0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2106      	movs	r1, #6
 80019f8:	2056      	movs	r0, #86	; 0x56
 80019fa:	f000 fc51 	bl	80022a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 80019fe:	2056      	movs	r0, #86	; 0x56
 8001a00:	f000 fc7a 	bl	80022f8 <HAL_NVIC_EnableIRQ>
}
 8001a04:	bf00      	nop
 8001a06:	3748      	adds	r7, #72	; 0x48
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40003800 	.word	0x40003800
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020400 	.word	0x40020400
 8001a18:	40003c00 	.word	0x40003c00
 8001a1c:	40020800 	.word	0x40020800
 8001a20:	40013400 	.word	0x40013400
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40015000 	.word	0x40015000
 8001a2c:	40021400 	.word	0x40021400
 8001a30:	40015400 	.word	0x40015400
 8001a34:	40020000 	.word	0x40020000

08001a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <HAL_MspInit+0x44>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	4a0e      	ldr	r2, [pc, #56]	; (8001a7c <HAL_MspInit+0x44>)
 8001a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a48:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <HAL_MspInit+0x44>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_MspInit+0x44>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	4a08      	ldr	r2, [pc, #32]	; (8001a7c <HAL_MspInit+0x44>)
 8001a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a60:	6453      	str	r3, [r2, #68]	; 0x44
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_MspInit+0x44>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800

08001a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <HardFault_Handler+0x4>

08001a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <MemManage_Handler+0x4>

08001a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <BusFault_Handler+0x4>

08001aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <UsageFault_Handler+0x4>

08001aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001ad4:	2010      	movs	r0, #16
 8001ad6:	f001 f97f 	bl	8002dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}

08001ade <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001ae2:	2020      	movs	r0, #32
 8001ae4:	f001 f978 	bl	8002dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001ae8:	2040      	movs	r0, #64	; 0x40
 8001aea:	f001 f975 	bl	8002dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001aee:	2080      	movs	r0, #128	; 0x80
 8001af0:	f001 f972 	bl	8002dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001af4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001af8:	f001 f96e 	bl	8002dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001afc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b00:	f001 f96a 	bl	8002dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <SPI2_IRQHandler+0x10>)
 8001b0e:	f003 fea5 	bl	800585c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200000c0 	.word	0x200000c0

08001b1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001b20:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b24:	f001 f958 	bl	8002dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001b28:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b2c:	f001 f954 	bl	8002dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b34:	f001 f950 	bl	8002dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001b38:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b3c:	f001 f94c 	bl	8002dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001b40:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b44:	f001 f948 	bl	8002dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <UART4_IRQHandler+0x10>)
 8001b52:	f004 fb35 	bl	80061c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200003b4 	.word	0x200003b4

08001b60 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <UART5_IRQHandler+0x10>)
 8001b66:	f004 fb2b 	bl	80061c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200002b4 	.word	0x200002b4

08001b74 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <UART8_IRQHandler+0x10>)
 8001b7a:	f004 fb21 	bl	80061c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000334 	.word	0x20000334

08001b88 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001b8c:	4802      	ldr	r0, [pc, #8]	; (8001b98 <SPI4_IRQHandler+0x10>)
 8001b8e:	f003 fe65 	bl	800585c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000250 	.word	0x20000250

08001b9c <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 8001ba0:	4802      	ldr	r0, [pc, #8]	; (8001bac <SPI6_IRQHandler+0x10>)
 8001ba2:	f003 fe5b 	bl	800585c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000188 	.word	0x20000188

08001bb0 <SysTick_Handler>:

/* USER CODE BEGIN 1 */
void SysTick_Handler(void) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001bb4:	f000 fa42 	bl	800203c <HAL_IncTick>
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc4:	4a14      	ldr	r2, [pc, #80]	; (8001c18 <_sbrk+0x5c>)
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <_sbrk+0x60>)
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <_sbrk+0x64>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d102      	bne.n	8001bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <_sbrk+0x64>)
 8001bda:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <_sbrk+0x68>)
 8001bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <_sbrk+0x64>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d207      	bcs.n	8001bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bec:	f005 f9ec 	bl	8006fc8 <__errno>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	230c      	movs	r3, #12
 8001bf4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfa:	e009      	b.n	8001c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <_sbrk+0x64>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <_sbrk+0x64>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <_sbrk+0x64>)
 8001c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20080000 	.word	0x20080000
 8001c1c:	00000400 	.word	0x00000400
 8001c20:	2000008c 	.word	0x2000008c
 8001c24:	20000440 	.word	0x20000440

08001c28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <SystemInit+0x28>)
 8001c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c32:	4a07      	ldr	r2, [pc, #28]	; (8001c50 <SystemInit+0x28>)
 8001c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <SystemInit+0x28>)
 8001c3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c42:	609a      	str	r2, [r3, #8]
#endif
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart8;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001c58:	4b14      	ldr	r3, [pc, #80]	; (8001cac <MX_UART4_Init+0x58>)
 8001c5a:	4a15      	ldr	r2, [pc, #84]	; (8001cb0 <MX_UART4_Init+0x5c>)
 8001c5c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001c5e:	4b13      	ldr	r3, [pc, #76]	; (8001cac <MX_UART4_Init+0x58>)
 8001c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c64:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <MX_UART4_Init+0x58>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <MX_UART4_Init+0x58>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <MX_UART4_Init+0x58>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <MX_UART4_Init+0x58>)
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <MX_UART4_Init+0x58>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <MX_UART4_Init+0x58>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <MX_UART4_Init+0x58>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <MX_UART4_Init+0x58>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c96:	4805      	ldr	r0, [pc, #20]	; (8001cac <MX_UART4_Init+0x58>)
 8001c98:	f004 f874 	bl	8005d84 <HAL_UART_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001ca2:	f7ff fc3f 	bl	8001524 <Error_Handler>
  }

}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200003b4 	.word	0x200003b4
 8001cb0:	40004c00 	.word	0x40004c00

08001cb4 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <MX_UART5_Init+0x58>)
 8001cba:	4a15      	ldr	r2, [pc, #84]	; (8001d10 <MX_UART5_Init+0x5c>)
 8001cbc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001cbe:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <MX_UART5_Init+0x58>)
 8001cc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cc4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <MX_UART5_Init+0x58>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <MX_UART5_Init+0x58>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <MX_UART5_Init+0x58>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <MX_UART5_Init+0x58>)
 8001cda:	220c      	movs	r2, #12
 8001cdc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <MX_UART5_Init+0x58>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <MX_UART5_Init+0x58>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <MX_UART5_Init+0x58>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <MX_UART5_Init+0x58>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001cf6:	4805      	ldr	r0, [pc, #20]	; (8001d0c <MX_UART5_Init+0x58>)
 8001cf8:	f004 f844 	bl	8005d84 <HAL_UART_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001d02:	f7ff fc0f 	bl	8001524 <Error_Handler>
  }

}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200002b4 	.word	0x200002b4
 8001d10:	40005000 	.word	0x40005000

08001d14 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 8001d18:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <MX_UART8_Init+0x58>)
 8001d1a:	4a15      	ldr	r2, [pc, #84]	; (8001d70 <MX_UART8_Init+0x5c>)
 8001d1c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 30000;
 8001d1e:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <MX_UART8_Init+0x58>)
 8001d20:	f247 5230 	movw	r2, #30000	; 0x7530
 8001d24:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MX_UART8_Init+0x58>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <MX_UART8_Init+0x58>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <MX_UART8_Init+0x58>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <MX_UART8_Init+0x58>)
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <MX_UART8_Init+0x58>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <MX_UART8_Init+0x58>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d4a:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <MX_UART8_Init+0x58>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <MX_UART8_Init+0x58>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001d56:	4805      	ldr	r0, [pc, #20]	; (8001d6c <MX_UART8_Init+0x58>)
 8001d58:	f004 f814 	bl	8005d84 <HAL_UART_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_UART8_Init+0x52>
  {
    Error_Handler();
 8001d62:	f7ff fbdf 	bl	8001524 <Error_Handler>
  }

}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000334 	.word	0x20000334
 8001d70:	40007c00 	.word	0x40007c00

08001d74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b090      	sub	sp, #64	; 0x40
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a6e      	ldr	r2, [pc, #440]	; (8001f4c <HAL_UART_MspInit+0x1d8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d14d      	bne.n	8001e32 <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d96:	4b6e      	ldr	r3, [pc, #440]	; (8001f50 <HAL_UART_MspInit+0x1dc>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	4a6d      	ldr	r2, [pc, #436]	; (8001f50 <HAL_UART_MspInit+0x1dc>)
 8001d9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001da0:	6413      	str	r3, [r2, #64]	; 0x40
 8001da2:	4b6b      	ldr	r3, [pc, #428]	; (8001f50 <HAL_UART_MspInit+0x1dc>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dac:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001dae:	4b68      	ldr	r3, [pc, #416]	; (8001f50 <HAL_UART_MspInit+0x1dc>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a67      	ldr	r2, [pc, #412]	; (8001f50 <HAL_UART_MspInit+0x1dc>)
 8001db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b65      	ldr	r3, [pc, #404]	; (8001f50 <HAL_UART_MspInit+0x1dc>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	4b62      	ldr	r3, [pc, #392]	; (8001f50 <HAL_UART_MspInit+0x1dc>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a61      	ldr	r2, [pc, #388]	; (8001f50 <HAL_UART_MspInit+0x1dc>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b5f      	ldr	r3, [pc, #380]	; (8001f50 <HAL_UART_MspInit+0x1dc>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	623b      	str	r3, [r7, #32]
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PI9     ------> UART4_RX
    PA0/WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = DAPI_RX_Pin;
 8001dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dec:	2303      	movs	r3, #3
 8001dee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001df0:	2308      	movs	r3, #8
 8001df2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(DAPI_RX_GPIO_Port, &GPIO_InitStruct);
 8001df4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4856      	ldr	r0, [pc, #344]	; (8001f54 <HAL_UART_MspInit+0x1e0>)
 8001dfc:	f000 fc12 	bl	8002624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DAPI_TX_Pin;
 8001e00:	2301      	movs	r3, #1
 8001e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e10:	2308      	movs	r3, #8
 8001e12:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(DAPI_TX_GPIO_Port, &GPIO_InitStruct);
 8001e14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e18:	4619      	mov	r1, r3
 8001e1a:	484f      	ldr	r0, [pc, #316]	; (8001f58 <HAL_UART_MspInit+0x1e4>)
 8001e1c:	f000 fc02 	bl	8002624 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 8001e20:	2200      	movs	r2, #0
 8001e22:	2106      	movs	r1, #6
 8001e24:	2034      	movs	r0, #52	; 0x34
 8001e26:	f000 fa3b 	bl	80022a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001e2a:	2034      	movs	r0, #52	; 0x34
 8001e2c:	f000 fa64 	bl	80022f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 8001e30:	e087      	b.n	8001f42 <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==UART5)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a49      	ldr	r2, [pc, #292]	; (8001f5c <HAL_UART_MspInit+0x1e8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d14d      	bne.n	8001ed8 <HAL_UART_MspInit+0x164>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001e3c:	4b44      	ldr	r3, [pc, #272]	; (8001f50 <HAL_UART_MspInit+0x1dc>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	4a43      	ldr	r2, [pc, #268]	; (8001f50 <HAL_UART_MspInit+0x1dc>)
 8001e42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e46:	6413      	str	r3, [r2, #64]	; 0x40
 8001e48:	4b41      	ldr	r3, [pc, #260]	; (8001f50 <HAL_UART_MspInit+0x1dc>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e54:	4b3e      	ldr	r3, [pc, #248]	; (8001f50 <HAL_UART_MspInit+0x1dc>)
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	4a3d      	ldr	r2, [pc, #244]	; (8001f50 <HAL_UART_MspInit+0x1dc>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e60:	4b3b      	ldr	r3, [pc, #236]	; (8001f50 <HAL_UART_MspInit+0x1dc>)
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	61bb      	str	r3, [r7, #24]
 8001e6a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e6c:	4b38      	ldr	r3, [pc, #224]	; (8001f50 <HAL_UART_MspInit+0x1dc>)
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	4a37      	ldr	r2, [pc, #220]	; (8001f50 <HAL_UART_MspInit+0x1dc>)
 8001e72:	f043 0308 	orr.w	r3, r3, #8
 8001e76:	6313      	str	r3, [r2, #48]	; 0x30
 8001e78:	4b35      	ldr	r3, [pc, #212]	; (8001f50 <HAL_UART_MspInit+0x1dc>)
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = INTERSPU_TX_Pin;
 8001e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e92:	2303      	movs	r3, #3
 8001e94:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001e96:	2308      	movs	r3, #8
 8001e98:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(INTERSPU_TX_GPIO_Port, &GPIO_InitStruct);
 8001e9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	482f      	ldr	r0, [pc, #188]	; (8001f60 <HAL_UART_MspInit+0x1ec>)
 8001ea2:	f000 fbbf 	bl	8002624 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = INTERSPU_RX_Pin;
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001eb6:	2308      	movs	r3, #8
 8001eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(INTERSPU_RX_GPIO_Port, &GPIO_InitStruct);
 8001eba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4828      	ldr	r0, [pc, #160]	; (8001f64 <HAL_UART_MspInit+0x1f0>)
 8001ec2:	f000 fbaf 	bl	8002624 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 6, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2106      	movs	r1, #6
 8001eca:	2035      	movs	r0, #53	; 0x35
 8001ecc:	f000 f9e8 	bl	80022a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001ed0:	2035      	movs	r0, #53	; 0x35
 8001ed2:	f000 fa11 	bl	80022f8 <HAL_NVIC_EnableIRQ>
}
 8001ed6:	e034      	b.n	8001f42 <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==UART8)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a22      	ldr	r2, [pc, #136]	; (8001f68 <HAL_UART_MspInit+0x1f4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d12f      	bne.n	8001f42 <HAL_UART_MspInit+0x1ce>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001ee2:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <HAL_UART_MspInit+0x1dc>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	4a1a      	ldr	r2, [pc, #104]	; (8001f50 <HAL_UART_MspInit+0x1dc>)
 8001ee8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001eec:	6413      	str	r3, [r2, #64]	; 0x40
 8001eee:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <HAL_UART_MspInit+0x1dc>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <HAL_UART_MspInit+0x1dc>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a14      	ldr	r2, [pc, #80]	; (8001f50 <HAL_UART_MspInit+0x1dc>)
 8001f00:	f043 0310 	orr.w	r3, r3, #16
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_UART_MspInit+0x1dc>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EXP_IN_Pin|EXP_OUT_Pin;
 8001f12:	2303      	movs	r3, #3
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001f22:	2308      	movs	r3, #8
 8001f24:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	480f      	ldr	r0, [pc, #60]	; (8001f6c <HAL_UART_MspInit+0x1f8>)
 8001f2e:	f000 fb79 	bl	8002624 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 6, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2106      	movs	r1, #6
 8001f36:	2053      	movs	r0, #83	; 0x53
 8001f38:	f000 f9b2 	bl	80022a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001f3c:	2053      	movs	r0, #83	; 0x53
 8001f3e:	f000 f9db 	bl	80022f8 <HAL_NVIC_EnableIRQ>
}
 8001f42:	bf00      	nop
 8001f44:	3740      	adds	r7, #64	; 0x40
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40004c00 	.word	0x40004c00
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40022000 	.word	0x40022000
 8001f58:	40020000 	.word	0x40020000
 8001f5c:	40005000 	.word	0x40005000
 8001f60:	40020800 	.word	0x40020800
 8001f64:	40020c00 	.word	0x40020c00
 8001f68:	40007c00 	.word	0x40007c00
 8001f6c:	40021000 	.word	0x40021000

08001f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fa8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f76:	e003      	b.n	8001f80 <LoopCopyDataInit>

08001f78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f7e:	3104      	adds	r1, #4

08001f80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f80:	480b      	ldr	r0, [pc, #44]	; (8001fb0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f82:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f88:	d3f6      	bcc.n	8001f78 <CopyDataInit>
  ldr  r2, =_sbss
 8001f8a:	4a0b      	ldr	r2, [pc, #44]	; (8001fb8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f8c:	e002      	b.n	8001f94 <LoopFillZerobss>

08001f8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f90:	f842 3b04 	str.w	r3, [r2], #4

08001f94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f98:	d3f9      	bcc.n	8001f8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f9a:	f7ff fe45 	bl	8001c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f9e:	f005 f819 	bl	8006fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fa2:	f7ff f973 	bl	800128c <main>
  bx  lr    
 8001fa6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fa8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001fac:	08007bf8 	.word	0x08007bf8
  ldr  r0, =_sdata
 8001fb0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fb4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001fb8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001fbc:	2000043c 	.word	0x2000043c

08001fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc0:	e7fe      	b.n	8001fc0 <ADC_IRQHandler>

08001fc2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc6:	2003      	movs	r0, #3
 8001fc8:	f000 f94a 	bl	8002260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f000 f805 	bl	8001fdc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001fd2:	f7ff fd31 	bl	8001a38 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_InitTick+0x54>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_InitTick+0x58>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	4619      	mov	r1, r3
 8001fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f994 	bl	8002328 <HAL_SYSTICK_Config>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e00e      	b.n	8002028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b0f      	cmp	r3, #15
 800200e:	d80a      	bhi.n	8002026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002010:	2200      	movs	r2, #0
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	f04f 30ff 	mov.w	r0, #4294967295
 8002018:	f000 f942 	bl	80022a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800201c:	4a06      	ldr	r2, [pc, #24]	; (8002038 <HAL_InitTick+0x5c>)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	e000      	b.n	8002028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000000 	.word	0x20000000
 8002034:	20000008 	.word	0x20000008
 8002038:	20000004 	.word	0x20000004

0800203c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_IncTick+0x20>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_IncTick+0x24>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4413      	add	r3, r2
 800204c:	4a04      	ldr	r2, [pc, #16]	; (8002060 <HAL_IncTick+0x24>)
 800204e:	6013      	str	r3, [r2, #0]
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000008 	.word	0x20000008
 8002060:	20000434 	.word	0x20000434

08002064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return uwTick;
 8002068:	4b03      	ldr	r3, [pc, #12]	; (8002078 <HAL_GetTick+0x14>)
 800206a:	681b      	ldr	r3, [r3, #0]
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	20000434 	.word	0x20000434

0800207c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002084:	f7ff ffee 	bl	8002064 <HAL_GetTick>
 8002088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002094:	d005      	beq.n	80020a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_Delay+0x40>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4413      	add	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020a2:	bf00      	nop
 80020a4:	f7ff ffde 	bl	8002064 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d8f7      	bhi.n	80020a4 <HAL_Delay+0x28>
  {
  }
}
 80020b4:	bf00      	nop
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000008 	.word	0x20000008

080020c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <__NVIC_SetPriorityGrouping+0x40>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020dc:	4013      	ands	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ee:	4a04      	ldr	r2, [pc, #16]	; (8002100 <__NVIC_SetPriorityGrouping+0x40>)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	60d3      	str	r3, [r2, #12]
}
 80020f4:	bf00      	nop
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000ed00 	.word	0xe000ed00
 8002104:	05fa0000 	.word	0x05fa0000

08002108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800210c:	4b04      	ldr	r3, [pc, #16]	; (8002120 <__NVIC_GetPriorityGrouping+0x18>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	f003 0307 	and.w	r3, r3, #7
}
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	2b00      	cmp	r3, #0
 8002134:	db0b      	blt.n	800214e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	f003 021f 	and.w	r2, r3, #31
 800213c:	4907      	ldr	r1, [pc, #28]	; (800215c <__NVIC_EnableIRQ+0x38>)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	2001      	movs	r0, #1
 8002146:	fa00 f202 	lsl.w	r2, r0, r2
 800214a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	e000e100 	.word	0xe000e100

08002160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	6039      	str	r1, [r7, #0]
 800216a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002170:	2b00      	cmp	r3, #0
 8002172:	db0a      	blt.n	800218a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	b2da      	uxtb	r2, r3
 8002178:	490c      	ldr	r1, [pc, #48]	; (80021ac <__NVIC_SetPriority+0x4c>)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	0112      	lsls	r2, r2, #4
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	440b      	add	r3, r1
 8002184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002188:	e00a      	b.n	80021a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4908      	ldr	r1, [pc, #32]	; (80021b0 <__NVIC_SetPriority+0x50>)
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	3b04      	subs	r3, #4
 8002198:	0112      	lsls	r2, r2, #4
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	440b      	add	r3, r1
 800219e:	761a      	strb	r2, [r3, #24]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000e100 	.word	0xe000e100
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	; 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f1c3 0307 	rsb	r3, r3, #7
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	bf28      	it	cs
 80021d2:	2304      	movcs	r3, #4
 80021d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3304      	adds	r3, #4
 80021da:	2b06      	cmp	r3, #6
 80021dc:	d902      	bls.n	80021e4 <NVIC_EncodePriority+0x30>
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3b03      	subs	r3, #3
 80021e2:	e000      	b.n	80021e6 <NVIC_EncodePriority+0x32>
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43da      	mvns	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	401a      	ands	r2, r3
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	fa01 f303 	lsl.w	r3, r1, r3
 8002206:	43d9      	mvns	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800220c:	4313      	orrs	r3, r2
         );
}
 800220e:	4618      	mov	r0, r3
 8002210:	3724      	adds	r7, #36	; 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3b01      	subs	r3, #1
 8002228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800222c:	d301      	bcc.n	8002232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222e:	2301      	movs	r3, #1
 8002230:	e00f      	b.n	8002252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002232:	4a0a      	ldr	r2, [pc, #40]	; (800225c <SysTick_Config+0x40>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800223a:	210f      	movs	r1, #15
 800223c:	f04f 30ff 	mov.w	r0, #4294967295
 8002240:	f7ff ff8e 	bl	8002160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <SysTick_Config+0x40>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800224a:	4b04      	ldr	r3, [pc, #16]	; (800225c <SysTick_Config+0x40>)
 800224c:	2207      	movs	r2, #7
 800224e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	e000e010 	.word	0xe000e010

08002260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b07      	cmp	r3, #7
 800226c:	d00f      	beq.n	800228e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b06      	cmp	r3, #6
 8002272:	d00c      	beq.n	800228e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b05      	cmp	r3, #5
 8002278:	d009      	beq.n	800228e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b04      	cmp	r3, #4
 800227e:	d006      	beq.n	800228e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b03      	cmp	r3, #3
 8002284:	d003      	beq.n	800228e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002286:	2192      	movs	r1, #146	; 0x92
 8002288:	4804      	ldr	r0, [pc, #16]	; (800229c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800228a:	f7ff f952 	bl	8001532 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ff16 	bl	80020c0 <__NVIC_SetPriorityGrouping>
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	080079c8 	.word	0x080079c8

080022a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
 80022ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b0f      	cmp	r3, #15
 80022b6:	d903      	bls.n	80022c0 <HAL_NVIC_SetPriority+0x20>
 80022b8:	21aa      	movs	r1, #170	; 0xaa
 80022ba:	480e      	ldr	r0, [pc, #56]	; (80022f4 <HAL_NVIC_SetPriority+0x54>)
 80022bc:	f7ff f939 	bl	8001532 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2b0f      	cmp	r3, #15
 80022c4:	d903      	bls.n	80022ce <HAL_NVIC_SetPriority+0x2e>
 80022c6:	21ab      	movs	r1, #171	; 0xab
 80022c8:	480a      	ldr	r0, [pc, #40]	; (80022f4 <HAL_NVIC_SetPriority+0x54>)
 80022ca:	f7ff f932 	bl	8001532 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ce:	f7ff ff1b 	bl	8002108 <__NVIC_GetPriorityGrouping>
 80022d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	6978      	ldr	r0, [r7, #20]
 80022da:	f7ff ff6b 	bl	80021b4 <NVIC_EncodePriority>
 80022de:	4602      	mov	r2, r0
 80022e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff ff3a 	bl	8002160 <__NVIC_SetPriority>
}
 80022ec:	bf00      	nop
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	080079c8 	.word	0x080079c8

080022f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	2b00      	cmp	r3, #0
 8002308:	da03      	bge.n	8002312 <HAL_NVIC_EnableIRQ+0x1a>
 800230a:	21be      	movs	r1, #190	; 0xbe
 800230c:	4805      	ldr	r0, [pc, #20]	; (8002324 <HAL_NVIC_EnableIRQ+0x2c>)
 800230e:	f7ff f910 	bl	8001532 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff ff04 	bl	8002124 <__NVIC_EnableIRQ>
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	080079c8 	.word	0x080079c8

08002328 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff ff73 	bl	800221c <SysTick_Config>
 8002336:	4603      	mov	r3, r0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e0a5      	b.n	800249e <HAL_CRC_Init+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a54      	ldr	r2, [pc, #336]	; (80024a8 <HAL_CRC_Init+0x168>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d003      	beq.n	8002364 <HAL_CRC_Init+0x24>
 800235c:	2170      	movs	r1, #112	; 0x70
 800235e:	4853      	ldr	r0, [pc, #332]	; (80024ac <HAL_CRC_Init+0x16c>)
 8002360:	f7ff f8e7 	bl	8001532 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7f5b      	ldrb	r3, [r3, #29]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d105      	bne.n	800237a <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7fe fb89 	bl	8000a8c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2202      	movs	r2, #2
 800237e:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	791b      	ldrb	r3, [r3, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <HAL_CRC_Init+0x58>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	791b      	ldrb	r3, [r3, #4]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d003      	beq.n	8002398 <HAL_CRC_Init+0x58>
 8002390:	217e      	movs	r1, #126	; 0x7e
 8002392:	4846      	ldr	r0, [pc, #280]	; (80024ac <HAL_CRC_Init+0x16c>)
 8002394:	f7ff f8cd 	bl	8001532 <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	791b      	ldrb	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10c      	bne.n	80023ba <HAL_CRC_Init+0x7a>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a42      	ldr	r2, [pc, #264]	; (80024b0 <HAL_CRC_Init+0x170>)
 80023a6:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0218 	bic.w	r2, r2, #24
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	e00c      	b.n	80023d4 <HAL_CRC_Init+0x94>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6899      	ldr	r1, [r3, #8]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	461a      	mov	r2, r3
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f875 	bl	80024b4 <HAL_CRCEx_Polynomial_Set>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_CRC_Init+0x94>
    {
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e064      	b.n	800249e <HAL_CRC_Init+0x15e>
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	795b      	ldrb	r3, [r3, #5]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d007      	beq.n	80023ec <HAL_CRC_Init+0xac>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	795b      	ldrb	r3, [r3, #5]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d003      	beq.n	80023ec <HAL_CRC_Init+0xac>
 80023e4:	2190      	movs	r1, #144	; 0x90
 80023e6:	4831      	ldr	r0, [pc, #196]	; (80024ac <HAL_CRC_Init+0x16c>)
 80023e8:	f7ff f8a3 	bl	8001532 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	795b      	ldrb	r3, [r3, #5]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d105      	bne.n	8002400 <HAL_CRC_Init+0xc0>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f04f 32ff 	mov.w	r2, #4294967295
 80023fc:	611a      	str	r2, [r3, #16]
 80023fe:	e004      	b.n	800240a <HAL_CRC_Init+0xca>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6912      	ldr	r2, [r2, #16]
 8002408:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00f      	beq.n	8002432 <HAL_CRC_Init+0xf2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	2b20      	cmp	r3, #32
 8002418:	d00b      	beq.n	8002432 <HAL_CRC_Init+0xf2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	2b40      	cmp	r3, #64	; 0x40
 8002420:	d007      	beq.n	8002432 <HAL_CRC_Init+0xf2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	2b60      	cmp	r3, #96	; 0x60
 8002428:	d003      	beq.n	8002432 <HAL_CRC_Init+0xf2>
 800242a:	219c      	movs	r1, #156	; 0x9c
 800242c:	481f      	ldr	r0, [pc, #124]	; (80024ac <HAL_CRC_Init+0x16c>)
 800242e:	f7ff f880 	bl	8001532 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	695a      	ldr	r2, [r3, #20]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d007      	beq.n	8002460 <HAL_CRC_Init+0x120>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	2b80      	cmp	r3, #128	; 0x80
 8002456:	d003      	beq.n	8002460 <HAL_CRC_Init+0x120>
 8002458:	21a0      	movs	r1, #160	; 0xa0
 800245a:	4814      	ldr	r0, [pc, #80]	; (80024ac <HAL_CRC_Init+0x16c>)
 800245c:	f7ff f869 	bl	8001532 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699a      	ldr	r2, [r3, #24]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	609a      	str	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d00b      	beq.n	8002496 <HAL_CRC_Init+0x156>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d007      	beq.n	8002496 <HAL_CRC_Init+0x156>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	2b03      	cmp	r3, #3
 800248c:	d003      	beq.n	8002496 <HAL_CRC_Init+0x156>
 800248e:	21a5      	movs	r1, #165	; 0xa5
 8002490:	4806      	ldr	r0, [pc, #24]	; (80024ac <HAL_CRC_Init+0x16c>)
 8002492:	f7ff f84e 	bl	8001532 <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023000 	.word	0x40023000
 80024ac:	08007a04 	.word	0x08007a04
 80024b0:	04c11db7 	.word	0x04c11db7

080024b4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80024c4:	231f      	movs	r3, #31
 80024c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00c      	beq.n	80024e8 <HAL_CRCEx_Polynomial_Set+0x34>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d009      	beq.n	80024e8 <HAL_CRCEx_Polynomial_Set+0x34>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b10      	cmp	r3, #16
 80024d8:	d006      	beq.n	80024e8 <HAL_CRCEx_Polynomial_Set+0x34>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b18      	cmp	r3, #24
 80024de:	d003      	beq.n	80024e8 <HAL_CRCEx_Polynomial_Set+0x34>
 80024e0:	215f      	movs	r1, #95	; 0x5f
 80024e2:	483e      	ldr	r0, [pc, #248]	; (80025dc <HAL_CRCEx_Polynomial_Set+0x128>)
 80024e4:	f7ff f825 	bl	8001532 <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80024e8:	bf00      	nop
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1e5a      	subs	r2, r3, #1
 80024ee:	613a      	str	r2, [r7, #16]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d009      	beq.n	8002508 <HAL_CRCEx_Polynomial_Set+0x54>
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0f0      	beq.n	80024ea <HAL_CRCEx_Polynomial_Set+0x36>
  {
  }

  switch (PolyLength)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b18      	cmp	r3, #24
 800250c:	d846      	bhi.n	800259c <HAL_CRCEx_Polynomial_Set+0xe8>
 800250e:	a201      	add	r2, pc, #4	; (adr r2, 8002514 <HAL_CRCEx_Polynomial_Set+0x60>)
 8002510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002514:	080025a3 	.word	0x080025a3
 8002518:	0800259d 	.word	0x0800259d
 800251c:	0800259d 	.word	0x0800259d
 8002520:	0800259d 	.word	0x0800259d
 8002524:	0800259d 	.word	0x0800259d
 8002528:	0800259d 	.word	0x0800259d
 800252c:	0800259d 	.word	0x0800259d
 8002530:	0800259d 	.word	0x0800259d
 8002534:	08002591 	.word	0x08002591
 8002538:	0800259d 	.word	0x0800259d
 800253c:	0800259d 	.word	0x0800259d
 8002540:	0800259d 	.word	0x0800259d
 8002544:	0800259d 	.word	0x0800259d
 8002548:	0800259d 	.word	0x0800259d
 800254c:	0800259d 	.word	0x0800259d
 8002550:	0800259d 	.word	0x0800259d
 8002554:	08002585 	.word	0x08002585
 8002558:	0800259d 	.word	0x0800259d
 800255c:	0800259d 	.word	0x0800259d
 8002560:	0800259d 	.word	0x0800259d
 8002564:	0800259d 	.word	0x0800259d
 8002568:	0800259d 	.word	0x0800259d
 800256c:	0800259d 	.word	0x0800259d
 8002570:	0800259d 	.word	0x0800259d
 8002574:	08002579 	.word	0x08002579
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	2b06      	cmp	r3, #6
 800257c:	d913      	bls.n	80025a6 <HAL_CRCEx_Polynomial_Set+0xf2>
      {
        status =   HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002582:	e010      	b.n	80025a6 <HAL_CRCEx_Polynomial_Set+0xf2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	2b07      	cmp	r3, #7
 8002588:	d90f      	bls.n	80025aa <HAL_CRCEx_Polynomial_Set+0xf6>
      {
        status =   HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800258e:	e00c      	b.n	80025aa <HAL_CRCEx_Polynomial_Set+0xf6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	2b0f      	cmp	r3, #15
 8002594:	d90b      	bls.n	80025ae <HAL_CRCEx_Polynomial_Set+0xfa>
      {
        status =   HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800259a:	e008      	b.n	80025ae <HAL_CRCEx_Polynomial_Set+0xfa>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	75fb      	strb	r3, [r7, #23]
      break;
 80025a0:	e006      	b.n	80025b0 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 80025a2:	bf00      	nop
 80025a4:	e004      	b.n	80025b0 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 80025a6:	bf00      	nop
 80025a8:	e002      	b.n	80025b0 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 80025aa:	bf00      	nop
 80025ac:	e000      	b.n	80025b0 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 80025ae:	bf00      	nop
  }
  if (status == HAL_OK)
 80025b0:	7dfb      	ldrb	r3, [r7, #23]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10d      	bne.n	80025d2 <HAL_CRCEx_Polynomial_Set+0x11e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f023 0118 	bic.w	r1, r3, #24
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80025d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	08007a3c 	.word	0x08007a3c

080025e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d004      	beq.n	80025fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2280      	movs	r2, #128	; 0x80
 80025f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e00c      	b.n	8002618 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2205      	movs	r2, #5
 8002602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0201 	bic.w	r2, r2, #1
 8002614:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002636:	2300      	movs	r3, #0
 8002638:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800263a:	2300      	movs	r3, #0
 800263c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a42      	ldr	r2, [pc, #264]	; (800274c <HAL_GPIO_Init+0x128>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d02b      	beq.n	800269e <HAL_GPIO_Init+0x7a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a41      	ldr	r2, [pc, #260]	; (8002750 <HAL_GPIO_Init+0x12c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d027      	beq.n	800269e <HAL_GPIO_Init+0x7a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a40      	ldr	r2, [pc, #256]	; (8002754 <HAL_GPIO_Init+0x130>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d023      	beq.n	800269e <HAL_GPIO_Init+0x7a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a3f      	ldr	r2, [pc, #252]	; (8002758 <HAL_GPIO_Init+0x134>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d01f      	beq.n	800269e <HAL_GPIO_Init+0x7a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a3e      	ldr	r2, [pc, #248]	; (800275c <HAL_GPIO_Init+0x138>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d01b      	beq.n	800269e <HAL_GPIO_Init+0x7a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a3d      	ldr	r2, [pc, #244]	; (8002760 <HAL_GPIO_Init+0x13c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d017      	beq.n	800269e <HAL_GPIO_Init+0x7a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a3c      	ldr	r2, [pc, #240]	; (8002764 <HAL_GPIO_Init+0x140>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d013      	beq.n	800269e <HAL_GPIO_Init+0x7a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a3b      	ldr	r2, [pc, #236]	; (8002768 <HAL_GPIO_Init+0x144>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00f      	beq.n	800269e <HAL_GPIO_Init+0x7a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a3a      	ldr	r2, [pc, #232]	; (800276c <HAL_GPIO_Init+0x148>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d00b      	beq.n	800269e <HAL_GPIO_Init+0x7a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a39      	ldr	r2, [pc, #228]	; (8002770 <HAL_GPIO_Init+0x14c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d007      	beq.n	800269e <HAL_GPIO_Init+0x7a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a38      	ldr	r2, [pc, #224]	; (8002774 <HAL_GPIO_Init+0x150>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x7a>
 8002696:	21b1      	movs	r1, #177	; 0xb1
 8002698:	4837      	ldr	r0, [pc, #220]	; (8002778 <HAL_GPIO_Init+0x154>)
 800269a:	f7fe ff4a 	bl	8001532 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d103      	bne.n	80026b0 <HAL_GPIO_Init+0x8c>
 80026a8:	21b2      	movs	r1, #178	; 0xb2
 80026aa:	4833      	ldr	r0, [pc, #204]	; (8002778 <HAL_GPIO_Init+0x154>)
 80026ac:	f7fe ff41 	bl	8001532 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d035      	beq.n	8002724 <HAL_GPIO_Init+0x100>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d031      	beq.n	8002724 <HAL_GPIO_Init+0x100>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b11      	cmp	r3, #17
 80026c6:	d02d      	beq.n	8002724 <HAL_GPIO_Init+0x100>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d029      	beq.n	8002724 <HAL_GPIO_Init+0x100>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b12      	cmp	r3, #18
 80026d6:	d025      	beq.n	8002724 <HAL_GPIO_Init+0x100>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4a27      	ldr	r2, [pc, #156]	; (800277c <HAL_GPIO_Init+0x158>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d020      	beq.n	8002724 <HAL_GPIO_Init+0x100>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	4a26      	ldr	r2, [pc, #152]	; (8002780 <HAL_GPIO_Init+0x15c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d01b      	beq.n	8002724 <HAL_GPIO_Init+0x100>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	4a24      	ldr	r2, [pc, #144]	; (8002784 <HAL_GPIO_Init+0x160>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d016      	beq.n	8002724 <HAL_GPIO_Init+0x100>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	4a23      	ldr	r2, [pc, #140]	; (8002788 <HAL_GPIO_Init+0x164>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d011      	beq.n	8002724 <HAL_GPIO_Init+0x100>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	4a21      	ldr	r2, [pc, #132]	; (800278c <HAL_GPIO_Init+0x168>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d00c      	beq.n	8002724 <HAL_GPIO_Init+0x100>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	4a20      	ldr	r2, [pc, #128]	; (8002790 <HAL_GPIO_Init+0x16c>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d007      	beq.n	8002724 <HAL_GPIO_Init+0x100>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b03      	cmp	r3, #3
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x100>
 800271c:	21b3      	movs	r1, #179	; 0xb3
 800271e:	4816      	ldr	r0, [pc, #88]	; (8002778 <HAL_GPIO_Init+0x154>)
 8002720:	f7fe ff07 	bl	8001532 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00b      	beq.n	8002744 <HAL_GPIO_Init+0x120>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d007      	beq.n	8002744 <HAL_GPIO_Init+0x120>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b02      	cmp	r3, #2
 800273a:	d003      	beq.n	8002744 <HAL_GPIO_Init+0x120>
 800273c:	21b4      	movs	r1, #180	; 0xb4
 800273e:	480e      	ldr	r0, [pc, #56]	; (8002778 <HAL_GPIO_Init+0x154>)
 8002740:	f7fe fef7 	bl	8001532 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002744:	2300      	movs	r3, #0
 8002746:	61fb      	str	r3, [r7, #28]
 8002748:	e2d6      	b.n	8002cf8 <HAL_GPIO_Init+0x6d4>
 800274a:	bf00      	nop
 800274c:	40020000 	.word	0x40020000
 8002750:	40020400 	.word	0x40020400
 8002754:	40020800 	.word	0x40020800
 8002758:	40020c00 	.word	0x40020c00
 800275c:	40021000 	.word	0x40021000
 8002760:	40021400 	.word	0x40021400
 8002764:	40021800 	.word	0x40021800
 8002768:	40021c00 	.word	0x40021c00
 800276c:	40022000 	.word	0x40022000
 8002770:	40022400 	.word	0x40022400
 8002774:	40022800 	.word	0x40022800
 8002778:	08007a78 	.word	0x08007a78
 800277c:	10110000 	.word	0x10110000
 8002780:	10210000 	.word	0x10210000
 8002784:	10310000 	.word	0x10310000
 8002788:	10120000 	.word	0x10120000
 800278c:	10220000 	.word	0x10220000
 8002790:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002794:	2201      	movs	r2, #1
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	f040 82a0 	bne.w	8002cf2 <HAL_GPIO_Init+0x6ce>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d00b      	beq.n	80027d2 <HAL_GPIO_Init+0x1ae>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d007      	beq.n	80027d2 <HAL_GPIO_Init+0x1ae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027c6:	2b11      	cmp	r3, #17
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x1ae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b12      	cmp	r3, #18
 80027d0:	d144      	bne.n	800285c <HAL_GPIO_Init+0x238>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00f      	beq.n	80027fa <HAL_GPIO_Init+0x1d6>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d00b      	beq.n	80027fa <HAL_GPIO_Init+0x1d6>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d007      	beq.n	80027fa <HAL_GPIO_Init+0x1d6>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_Init+0x1d6>
 80027f2:	21c6      	movs	r1, #198	; 0xc6
 80027f4:	482a      	ldr	r0, [pc, #168]	; (80028a0 <HAL_GPIO_Init+0x27c>)
 80027f6:	f7fe fe9c 	bl	8001532 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	2203      	movs	r2, #3
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002830:	2201      	movs	r2, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	091b      	lsrs	r3, r3, #4
 8002846:	f003 0201 	and.w	r2, r3, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	2203      	movs	r2, #3
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d007      	beq.n	80028a4 <HAL_GPIO_Init+0x280>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b12      	cmp	r3, #18
 800289a:	f040 814b 	bne.w	8002b34 <HAL_GPIO_Init+0x510>
 800289e:	e001      	b.n	80028a4 <HAL_GPIO_Init+0x280>
 80028a0:	08007a78 	.word	0x08007a78
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 811f 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	f000 811a 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 8115 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 8110 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 810b 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	f000 8106 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	f000 8101 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	f000 80fc 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	f000 80f7 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	2b03      	cmp	r3, #3
 8002904:	f000 80f2 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	2b03      	cmp	r3, #3
 800290e:	f000 80ed 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	2b03      	cmp	r3, #3
 8002918:	f000 80e8 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	2b03      	cmp	r3, #3
 8002922:	f000 80e3 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b03      	cmp	r3, #3
 800292c:	f000 80de 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	2b03      	cmp	r3, #3
 8002936:	f000 80d9 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	2b04      	cmp	r3, #4
 8002940:	f000 80d4 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	2b04      	cmp	r3, #4
 800294a:	f000 80cf 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b04      	cmp	r3, #4
 8002954:	f000 80ca 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	2b04      	cmp	r3, #4
 800295e:	f000 80c5 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	2b04      	cmp	r3, #4
 8002968:	f000 80c0 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	2b05      	cmp	r3, #5
 8002972:	f000 80bb 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2b05      	cmp	r3, #5
 800297c:	f000 80b6 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	2b05      	cmp	r3, #5
 8002986:	f000 80b1 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2b05      	cmp	r3, #5
 8002990:	f000 80ac 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	2b05      	cmp	r3, #5
 800299a:	f000 80a7 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	2b05      	cmp	r3, #5
 80029a4:	f000 80a2 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	2b06      	cmp	r3, #6
 80029ae:	f000 809d 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	2b06      	cmp	r3, #6
 80029b8:	f000 8098 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	2b07      	cmp	r3, #7
 80029c2:	f000 8093 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b07      	cmp	r3, #7
 80029cc:	f000 808e 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	2b07      	cmp	r3, #7
 80029d6:	f000 8089 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	2b07      	cmp	r3, #7
 80029e0:	f000 8084 	beq.w	8002aec <HAL_GPIO_Init+0x4c8>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	2b07      	cmp	r3, #7
 80029ea:	d07f      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	2b07      	cmp	r3, #7
 80029f2:	d07b      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	2b07      	cmp	r3, #7
 80029fa:	d077      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d073      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d06f      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d06b      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d067      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d063      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d05f      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d05b      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	2b09      	cmp	r3, #9
 8002a3a:	d057      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2b09      	cmp	r3, #9
 8002a42:	d053      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	2b09      	cmp	r3, #9
 8002a4a:	d04f      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	2b09      	cmp	r3, #9
 8002a52:	d04b      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	2b09      	cmp	r3, #9
 8002a5a:	d047      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	2b09      	cmp	r3, #9
 8002a62:	d043      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	2b09      	cmp	r3, #9
 8002a6a:	d03f      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	2b0a      	cmp	r3, #10
 8002a72:	d03b      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	2b0a      	cmp	r3, #10
 8002a7a:	d037      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	2b0a      	cmp	r3, #10
 8002a82:	d033      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	2b0a      	cmp	r3, #10
 8002a8a:	d02f      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	2b0b      	cmp	r3, #11
 8002a92:	d02b      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	2b0a      	cmp	r3, #10
 8002a9a:	d027      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	2b0b      	cmp	r3, #11
 8002aa2:	d023      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	2b0b      	cmp	r3, #11
 8002aaa:	d01f      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	2b0c      	cmp	r3, #12
 8002ab2:	d01b      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	2b0c      	cmp	r3, #12
 8002aba:	d017      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	2b0c      	cmp	r3, #12
 8002ac2:	d013      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	2b0f      	cmp	r3, #15
 8002aca:	d00f      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	2b0d      	cmp	r3, #13
 8002ad2:	d00b      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	2b0e      	cmp	r3, #14
 8002ada:	d007      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	2b0d      	cmp	r3, #13
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0x4c8>
 8002ae4:	21de      	movs	r1, #222	; 0xde
 8002ae6:	4888      	ldr	r0, [pc, #544]	; (8002d08 <HAL_GPIO_Init+0x6e4>)
 8002ae8:	f7fe fd23 	bl	8001532 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	08da      	lsrs	r2, r3, #3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3208      	adds	r2, #8
 8002af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	220f      	movs	r2, #15
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	08da      	lsrs	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3208      	adds	r2, #8
 8002b2e:	69b9      	ldr	r1, [r7, #24]
 8002b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2203      	movs	r2, #3
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0203 	and.w	r2, r3, #3
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80be 	beq.w	8002cf2 <HAL_GPIO_Init+0x6ce>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b76:	4b65      	ldr	r3, [pc, #404]	; (8002d0c <HAL_GPIO_Init+0x6e8>)
 8002b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7a:	4a64      	ldr	r2, [pc, #400]	; (8002d0c <HAL_GPIO_Init+0x6e8>)
 8002b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b80:	6453      	str	r3, [r2, #68]	; 0x44
 8002b82:	4b62      	ldr	r3, [pc, #392]	; (8002d0c <HAL_GPIO_Init+0x6e8>)
 8002b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b8e:	4a60      	ldr	r2, [pc, #384]	; (8002d10 <HAL_GPIO_Init+0x6ec>)
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	089b      	lsrs	r3, r3, #2
 8002b94:	3302      	adds	r3, #2
 8002b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	220f      	movs	r2, #15
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a57      	ldr	r2, [pc, #348]	; (8002d14 <HAL_GPIO_Init+0x6f0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d037      	beq.n	8002c2a <HAL_GPIO_Init+0x606>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a56      	ldr	r2, [pc, #344]	; (8002d18 <HAL_GPIO_Init+0x6f4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d031      	beq.n	8002c26 <HAL_GPIO_Init+0x602>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a55      	ldr	r2, [pc, #340]	; (8002d1c <HAL_GPIO_Init+0x6f8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d02b      	beq.n	8002c22 <HAL_GPIO_Init+0x5fe>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a54      	ldr	r2, [pc, #336]	; (8002d20 <HAL_GPIO_Init+0x6fc>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d025      	beq.n	8002c1e <HAL_GPIO_Init+0x5fa>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a53      	ldr	r2, [pc, #332]	; (8002d24 <HAL_GPIO_Init+0x700>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d01f      	beq.n	8002c1a <HAL_GPIO_Init+0x5f6>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a52      	ldr	r2, [pc, #328]	; (8002d28 <HAL_GPIO_Init+0x704>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d019      	beq.n	8002c16 <HAL_GPIO_Init+0x5f2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a51      	ldr	r2, [pc, #324]	; (8002d2c <HAL_GPIO_Init+0x708>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d013      	beq.n	8002c12 <HAL_GPIO_Init+0x5ee>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a50      	ldr	r2, [pc, #320]	; (8002d30 <HAL_GPIO_Init+0x70c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00d      	beq.n	8002c0e <HAL_GPIO_Init+0x5ea>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a4f      	ldr	r2, [pc, #316]	; (8002d34 <HAL_GPIO_Init+0x710>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d007      	beq.n	8002c0a <HAL_GPIO_Init+0x5e6>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a4e      	ldr	r2, [pc, #312]	; (8002d38 <HAL_GPIO_Init+0x714>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d101      	bne.n	8002c06 <HAL_GPIO_Init+0x5e2>
 8002c02:	2309      	movs	r3, #9
 8002c04:	e012      	b.n	8002c2c <HAL_GPIO_Init+0x608>
 8002c06:	230a      	movs	r3, #10
 8002c08:	e010      	b.n	8002c2c <HAL_GPIO_Init+0x608>
 8002c0a:	2308      	movs	r3, #8
 8002c0c:	e00e      	b.n	8002c2c <HAL_GPIO_Init+0x608>
 8002c0e:	2307      	movs	r3, #7
 8002c10:	e00c      	b.n	8002c2c <HAL_GPIO_Init+0x608>
 8002c12:	2306      	movs	r3, #6
 8002c14:	e00a      	b.n	8002c2c <HAL_GPIO_Init+0x608>
 8002c16:	2305      	movs	r3, #5
 8002c18:	e008      	b.n	8002c2c <HAL_GPIO_Init+0x608>
 8002c1a:	2304      	movs	r3, #4
 8002c1c:	e006      	b.n	8002c2c <HAL_GPIO_Init+0x608>
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e004      	b.n	8002c2c <HAL_GPIO_Init+0x608>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e002      	b.n	8002c2c <HAL_GPIO_Init+0x608>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <HAL_GPIO_Init+0x608>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	69fa      	ldr	r2, [r7, #28]
 8002c2e:	f002 0203 	and.w	r2, r2, #3
 8002c32:	0092      	lsls	r2, r2, #2
 8002c34:	4093      	lsls	r3, r2
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c3c:	4934      	ldr	r1, [pc, #208]	; (8002d10 <HAL_GPIO_Init+0x6ec>)
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	089b      	lsrs	r3, r3, #2
 8002c42:	3302      	adds	r3, #2
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c4a:	4b3c      	ldr	r3, [pc, #240]	; (8002d3c <HAL_GPIO_Init+0x718>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4013      	ands	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_Init+0x64a>
        {
          temp |= iocurrent;
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c6e:	4a33      	ldr	r2, [pc, #204]	; (8002d3c <HAL_GPIO_Init+0x718>)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c74:	4b31      	ldr	r3, [pc, #196]	; (8002d3c <HAL_GPIO_Init+0x718>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x674>
        {
          temp |= iocurrent;
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c98:	4a28      	ldr	r2, [pc, #160]	; (8002d3c <HAL_GPIO_Init+0x718>)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c9e:	4b27      	ldr	r3, [pc, #156]	; (8002d3c <HAL_GPIO_Init+0x718>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_Init+0x69e>
        {
          temp |= iocurrent;
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cc2:	4a1e      	ldr	r2, [pc, #120]	; (8002d3c <HAL_GPIO_Init+0x718>)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cc8:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <HAL_GPIO_Init+0x718>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_GPIO_Init+0x6c8>
        {
          temp |= iocurrent;
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cec:	4a13      	ldr	r2, [pc, #76]	; (8002d3c <HAL_GPIO_Init+0x718>)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	61fb      	str	r3, [r7, #28]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	2b0f      	cmp	r3, #15
 8002cfc:	f67f ad4a 	bls.w	8002794 <HAL_GPIO_Init+0x170>
      }
    }
  }
}
 8002d00:	bf00      	nop
 8002d02:	3720      	adds	r7, #32
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	08007a78 	.word	0x08007a78
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	40013800 	.word	0x40013800
 8002d14:	40020000 	.word	0x40020000
 8002d18:	40020400 	.word	0x40020400
 8002d1c:	40020800 	.word	0x40020800
 8002d20:	40020c00 	.word	0x40020c00
 8002d24:	40021000 	.word	0x40021000
 8002d28:	40021400 	.word	0x40021400
 8002d2c:	40021800 	.word	0x40021800
 8002d30:	40021c00 	.word	0x40021c00
 8002d34:	40022000 	.word	0x40022000
 8002d38:	40022400 	.word	0x40022400
 8002d3c:	40013c00 	.word	0x40013c00

08002d40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002d4c:	887b      	ldrh	r3, [r7, #2]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d104      	bne.n	8002d5c <HAL_GPIO_ReadPin+0x1c>
 8002d52:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8002d56:	4809      	ldr	r0, [pc, #36]	; (8002d7c <HAL_GPIO_ReadPin+0x3c>)
 8002d58:	f7fe fbeb 	bl	8001532 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	887b      	ldrh	r3, [r7, #2]
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	73fb      	strb	r3, [r7, #15]
 8002d6c:	e001      	b.n	8002d72 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	08007a78 	.word	0x08007a78

08002d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	807b      	strh	r3, [r7, #2]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002d90:	887b      	ldrh	r3, [r7, #2]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d104      	bne.n	8002da0 <HAL_GPIO_WritePin+0x20>
 8002d96:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8002d9a:	480e      	ldr	r0, [pc, #56]	; (8002dd4 <HAL_GPIO_WritePin+0x54>)
 8002d9c:	f7fe fbc9 	bl	8001532 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002da0:	787b      	ldrb	r3, [r7, #1]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d007      	beq.n	8002db6 <HAL_GPIO_WritePin+0x36>
 8002da6:	787b      	ldrb	r3, [r7, #1]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d004      	beq.n	8002db6 <HAL_GPIO_WritePin+0x36>
 8002dac:	f240 119b 	movw	r1, #411	; 0x19b
 8002db0:	4808      	ldr	r0, [pc, #32]	; (8002dd4 <HAL_GPIO_WritePin+0x54>)
 8002db2:	f7fe fbbe 	bl	8001532 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002db6:	787b      	ldrb	r3, [r7, #1]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dbc:	887a      	ldrh	r2, [r7, #2]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002dc2:	e003      	b.n	8002dcc <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002dc4:	887b      	ldrh	r3, [r7, #2]
 8002dc6:	041a      	lsls	r2, r3, #16
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	619a      	str	r2, [r3, #24]
}
 8002dcc:	bf00      	nop
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	08007a78 	.word	0x08007a78

08002dd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	88fb      	ldrh	r3, [r7, #6]
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d006      	beq.n	8002dfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dee:	4a05      	ldr	r2, [pc, #20]	; (8002e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 f806 	bl	8002e08 <HAL_GPIO_EXTI_Callback>
  }
}
 8002dfc:	bf00      	nop
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40013c00 	.word	0x40013c00

08002e08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	4b23      	ldr	r3, [pc, #140]	; (8002eb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	4a22      	ldr	r2, [pc, #136]	; (8002eb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e34:	6413      	str	r3, [r2, #64]	; 0x40
 8002e36:	4b20      	ldr	r3, [pc, #128]	; (8002eb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e42:	4b1e      	ldr	r3, [pc, #120]	; (8002ebc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a1d      	ldr	r2, [pc, #116]	; (8002ebc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e4e:	f7ff f909 	bl	8002064 <HAL_GetTick>
 8002e52:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e54:	e009      	b.n	8002e6a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e56:	f7ff f905 	bl	8002064 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e64:	d901      	bls.n	8002e6a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e022      	b.n	8002eb0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e6a:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e76:	d1ee      	bne.n	8002e56 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e78:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a0f      	ldr	r2, [pc, #60]	; (8002ebc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e82:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e84:	f7ff f8ee 	bl	8002064 <HAL_GetTick>
 8002e88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e8a:	e009      	b.n	8002ea0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e8c:	f7ff f8ea 	bl	8002064 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e9a:	d901      	bls.n	8002ea0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e007      	b.n	8002eb0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002eac:	d1ee      	bne.n	8002e8c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40007000 	.word	0x40007000

08002ec0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e35c      	b.n	8003590 <HAL_RCC_OscConfig+0x6d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b0f      	cmp	r3, #15
 8002edc:	d904      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x28>
 8002ede:	f240 1165 	movw	r1, #357	; 0x165
 8002ee2:	4892      	ldr	r0, [pc, #584]	; (800312c <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	f7fe fb25 	bl	8001532 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 809a 	beq.w	800302a <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00e      	beq.n	8002f1c <HAL_RCC_OscConfig+0x5c>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f06:	d009      	beq.n	8002f1c <HAL_RCC_OscConfig+0x5c>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f10:	d004      	beq.n	8002f1c <HAL_RCC_OscConfig+0x5c>
 8002f12:	f240 116b 	movw	r1, #363	; 0x16b
 8002f16:	4885      	ldr	r0, [pc, #532]	; (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f18:	f7fe fb0b 	bl	8001532 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f1c:	4b84      	ldr	r3, [pc, #528]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 030c 	and.w	r3, r3, #12
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d00c      	beq.n	8002f42 <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f28:	4b81      	ldr	r3, [pc, #516]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d112      	bne.n	8002f5a <HAL_RCC_OscConfig+0x9a>
 8002f34:	4b7e      	ldr	r3, [pc, #504]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f40:	d10b      	bne.n	8002f5a <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f42:	4b7b      	ldr	r3, [pc, #492]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d06c      	beq.n	8003028 <HAL_RCC_OscConfig+0x168>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d168      	bne.n	8003028 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e31a      	b.n	8003590 <HAL_RCC_OscConfig+0x6d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f62:	d106      	bne.n	8002f72 <HAL_RCC_OscConfig+0xb2>
 8002f64:	4b72      	ldr	r3, [pc, #456]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a71      	ldr	r2, [pc, #452]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 8002f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	e02e      	b.n	8002fd0 <HAL_RCC_OscConfig+0x110>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0xd4>
 8002f7a:	4b6d      	ldr	r3, [pc, #436]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a6c      	ldr	r2, [pc, #432]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 8002f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	4b6a      	ldr	r3, [pc, #424]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a69      	ldr	r2, [pc, #420]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 8002f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e01d      	b.n	8002fd0 <HAL_RCC_OscConfig+0x110>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0xf8>
 8002f9e:	4b64      	ldr	r3, [pc, #400]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a63      	ldr	r2, [pc, #396]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 8002fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	4b61      	ldr	r3, [pc, #388]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a60      	ldr	r2, [pc, #384]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e00b      	b.n	8002fd0 <HAL_RCC_OscConfig+0x110>
 8002fb8:	4b5d      	ldr	r3, [pc, #372]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a5c      	ldr	r2, [pc, #368]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	4b5a      	ldr	r3, [pc, #360]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a59      	ldr	r2, [pc, #356]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 8002fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d013      	beq.n	8003000 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7ff f844 	bl	8002064 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7ff f840 	bl	8002064 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	; 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e2ce      	b.n	8003590 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff2:	4b4f      	ldr	r3, [pc, #316]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x120>
 8002ffe:	e014      	b.n	800302a <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7ff f830 	bl	8002064 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003008:	f7ff f82c 	bl	8002064 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e2ba      	b.n	8003590 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301a:	4b45      	ldr	r3, [pc, #276]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x148>
 8003026:	e000      	b.n	800302a <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 8084 	beq.w	8003140 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d008      	beq.n	8003052 <HAL_RCC_OscConfig+0x192>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d004      	beq.n	8003052 <HAL_RCC_OscConfig+0x192>
 8003048:	f240 119d 	movw	r1, #413	; 0x19d
 800304c:	4837      	ldr	r0, [pc, #220]	; (800312c <HAL_RCC_OscConfig+0x26c>)
 800304e:	f7fe fa70 	bl	8001532 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	2b1f      	cmp	r3, #31
 8003058:	d904      	bls.n	8003064 <HAL_RCC_OscConfig+0x1a4>
 800305a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800305e:	4833      	ldr	r0, [pc, #204]	; (800312c <HAL_RCC_OscConfig+0x26c>)
 8003060:	f7fe fa67 	bl	8001532 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003064:	4b32      	ldr	r3, [pc, #200]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 030c 	and.w	r3, r3, #12
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00b      	beq.n	8003088 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003070:	4b2f      	ldr	r3, [pc, #188]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 030c 	and.w	r3, r3, #12
 8003078:	2b08      	cmp	r3, #8
 800307a:	d11c      	bne.n	80030b6 <HAL_RCC_OscConfig+0x1f6>
 800307c:	4b2c      	ldr	r3, [pc, #176]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d116      	bne.n	80030b6 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003088:	4b29      	ldr	r3, [pc, #164]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_OscConfig+0x1e0>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d001      	beq.n	80030a0 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e277      	b.n	8003590 <HAL_RCC_OscConfig+0x6d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a0:	4b23      	ldr	r3, [pc, #140]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4920      	ldr	r1, [pc, #128]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b4:	e044      	b.n	8003140 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d023      	beq.n	8003106 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030be:	4b1c      	ldr	r3, [pc, #112]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a1b      	ldr	r2, [pc, #108]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 80030c4:	f043 0301 	orr.w	r3, r3, #1
 80030c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ca:	f7fe ffcb 	bl	8002064 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d2:	f7fe ffc7 	bl	8002064 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e255      	b.n	8003590 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e4:	4b12      	ldr	r3, [pc, #72]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f0:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	490c      	ldr	r1, [pc, #48]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 8003100:	4313      	orrs	r3, r2
 8003102:	600b      	str	r3, [r1, #0]
 8003104:	e01c      	b.n	8003140 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003106:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a09      	ldr	r2, [pc, #36]	; (8003130 <HAL_RCC_OscConfig+0x270>)
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003112:	f7fe ffa7 	bl	8002064 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003118:	e00c      	b.n	8003134 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800311a:	f7fe ffa3 	bl	8002064 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d905      	bls.n	8003134 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e231      	b.n	8003590 <HAL_RCC_OscConfig+0x6d0>
 800312c:	08007ab4 	.word	0x08007ab4
 8003130:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003134:	4b7e      	ldr	r3, [pc, #504]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1ec      	bne.n	800311a <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	d043      	beq.n	80031d4 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_RCC_OscConfig+0x2a6>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d004      	beq.n	8003166 <HAL_RCC_OscConfig+0x2a6>
 800315c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8003160:	4874      	ldr	r0, [pc, #464]	; (8003334 <HAL_RCC_OscConfig+0x474>)
 8003162:	f7fe f9e6 	bl	8001532 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d019      	beq.n	80031a2 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800316e:	4b70      	ldr	r3, [pc, #448]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 8003170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003172:	4a6f      	ldr	r2, [pc, #444]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317a:	f7fe ff73 	bl	8002064 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003182:	f7fe ff6f 	bl	8002064 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e1fd      	b.n	8003590 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003194:	4b66      	ldr	r3, [pc, #408]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 8003196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCC_OscConfig+0x2c2>
 80031a0:	e018      	b.n	80031d4 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a2:	4b63      	ldr	r3, [pc, #396]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 80031a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a6:	4a62      	ldr	r2, [pc, #392]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 80031a8:	f023 0301 	bic.w	r3, r3, #1
 80031ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ae:	f7fe ff59 	bl	8002064 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b6:	f7fe ff55 	bl	8002064 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e1e3      	b.n	8003590 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c8:	4b59      	ldr	r3, [pc, #356]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 80031ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f0      	bne.n	80031b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 80bc 	beq.w	800335a <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00c      	beq.n	8003204 <HAL_RCC_OscConfig+0x344>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d008      	beq.n	8003204 <HAL_RCC_OscConfig+0x344>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b05      	cmp	r3, #5
 80031f8:	d004      	beq.n	8003204 <HAL_RCC_OscConfig+0x344>
 80031fa:	f44f 7102 	mov.w	r1, #520	; 0x208
 80031fe:	484d      	ldr	r0, [pc, #308]	; (8003334 <HAL_RCC_OscConfig+0x474>)
 8003200:	f7fe f997 	bl	8001532 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003204:	4b4a      	ldr	r3, [pc, #296]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10d      	bne.n	800322c <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003210:	4b47      	ldr	r3, [pc, #284]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	4a46      	ldr	r2, [pc, #280]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 8003216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800321a:	6413      	str	r3, [r2, #64]	; 0x40
 800321c:	4b44      	ldr	r3, [pc, #272]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003228:	2301      	movs	r3, #1
 800322a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800322c:	4b42      	ldr	r3, [pc, #264]	; (8003338 <HAL_RCC_OscConfig+0x478>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d118      	bne.n	800326a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003238:	4b3f      	ldr	r3, [pc, #252]	; (8003338 <HAL_RCC_OscConfig+0x478>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a3e      	ldr	r2, [pc, #248]	; (8003338 <HAL_RCC_OscConfig+0x478>)
 800323e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003242:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003244:	f7fe ff0e 	bl	8002064 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800324c:	f7fe ff0a 	bl	8002064 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b64      	cmp	r3, #100	; 0x64
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e198      	b.n	8003590 <HAL_RCC_OscConfig+0x6d0>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800325e:	4b36      	ldr	r3, [pc, #216]	; (8003338 <HAL_RCC_OscConfig+0x478>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0f0      	beq.n	800324c <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d106      	bne.n	8003280 <HAL_RCC_OscConfig+0x3c0>
 8003272:	4b2f      	ldr	r3, [pc, #188]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 8003274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003276:	4a2e      	ldr	r2, [pc, #184]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	6713      	str	r3, [r2, #112]	; 0x70
 800327e:	e02d      	b.n	80032dc <HAL_RCC_OscConfig+0x41c>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10c      	bne.n	80032a2 <HAL_RCC_OscConfig+0x3e2>
 8003288:	4b29      	ldr	r3, [pc, #164]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 800328a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328c:	4a28      	ldr	r2, [pc, #160]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 800328e:	f023 0301 	bic.w	r3, r3, #1
 8003292:	6713      	str	r3, [r2, #112]	; 0x70
 8003294:	4b26      	ldr	r3, [pc, #152]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 8003296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003298:	4a25      	ldr	r2, [pc, #148]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 800329a:	f023 0304 	bic.w	r3, r3, #4
 800329e:	6713      	str	r3, [r2, #112]	; 0x70
 80032a0:	e01c      	b.n	80032dc <HAL_RCC_OscConfig+0x41c>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2b05      	cmp	r3, #5
 80032a8:	d10c      	bne.n	80032c4 <HAL_RCC_OscConfig+0x404>
 80032aa:	4b21      	ldr	r3, [pc, #132]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 80032ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ae:	4a20      	ldr	r2, [pc, #128]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 80032b0:	f043 0304 	orr.w	r3, r3, #4
 80032b4:	6713      	str	r3, [r2, #112]	; 0x70
 80032b6:	4b1e      	ldr	r3, [pc, #120]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 80032b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ba:	4a1d      	ldr	r2, [pc, #116]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	6713      	str	r3, [r2, #112]	; 0x70
 80032c2:	e00b      	b.n	80032dc <HAL_RCC_OscConfig+0x41c>
 80032c4:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 80032c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c8:	4a19      	ldr	r2, [pc, #100]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 80032ca:	f023 0301 	bic.w	r3, r3, #1
 80032ce:	6713      	str	r3, [r2, #112]	; 0x70
 80032d0:	4b17      	ldr	r3, [pc, #92]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 80032d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d4:	4a16      	ldr	r2, [pc, #88]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 80032d6:	f023 0304 	bic.w	r3, r3, #4
 80032da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d015      	beq.n	8003310 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e4:	f7fe febe 	bl	8002064 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ea:	e00a      	b.n	8003302 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ec:	f7fe feba 	bl	8002064 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e146      	b.n	8003590 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003302:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 8003304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0ee      	beq.n	80032ec <HAL_RCC_OscConfig+0x42c>
 800330e:	e01b      	b.n	8003348 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003310:	f7fe fea8 	bl	8002064 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003316:	e011      	b.n	800333c <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003318:	f7fe fea4 	bl	8002064 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f241 3288 	movw	r2, #5000	; 0x1388
 8003326:	4293      	cmp	r3, r2
 8003328:	d908      	bls.n	800333c <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e130      	b.n	8003590 <HAL_RCC_OscConfig+0x6d0>
 800332e:	bf00      	nop
 8003330:	40023800 	.word	0x40023800
 8003334:	08007ab4 	.word	0x08007ab4
 8003338:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800333c:	4b96      	ldr	r3, [pc, #600]	; (8003598 <HAL_RCC_OscConfig+0x6d8>)
 800333e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1e7      	bne.n	8003318 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003348:	7dfb      	ldrb	r3, [r7, #23]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d105      	bne.n	800335a <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800334e:	4b92      	ldr	r3, [pc, #584]	; (8003598 <HAL_RCC_OscConfig+0x6d8>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	4a91      	ldr	r2, [pc, #580]	; (8003598 <HAL_RCC_OscConfig+0x6d8>)
 8003354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003358:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00c      	beq.n	800337c <HAL_RCC_OscConfig+0x4bc>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d008      	beq.n	800337c <HAL_RCC_OscConfig+0x4bc>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d004      	beq.n	800337c <HAL_RCC_OscConfig+0x4bc>
 8003372:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8003376:	4889      	ldr	r0, [pc, #548]	; (800359c <HAL_RCC_OscConfig+0x6dc>)
 8003378:	f7fe f8db 	bl	8001532 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 8104 	beq.w	800358e <HAL_RCC_OscConfig+0x6ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003386:	4b84      	ldr	r3, [pc, #528]	; (8003598 <HAL_RCC_OscConfig+0x6d8>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	2b08      	cmp	r3, #8
 8003390:	f000 80c3 	beq.w	800351a <HAL_RCC_OscConfig+0x65a>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	2b02      	cmp	r3, #2
 800339a:	f040 80a4 	bne.w	80034e6 <HAL_RCC_OscConfig+0x626>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d009      	beq.n	80033ba <HAL_RCC_OscConfig+0x4fa>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ae:	d004      	beq.n	80033ba <HAL_RCC_OscConfig+0x4fa>
 80033b0:	f240 2155 	movw	r1, #597	; 0x255
 80033b4:	4879      	ldr	r0, [pc, #484]	; (800359c <HAL_RCC_OscConfig+0x6dc>)
 80033b6:	f7fe f8bc 	bl	8001532 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d903      	bls.n	80033ca <HAL_RCC_OscConfig+0x50a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	2b3f      	cmp	r3, #63	; 0x3f
 80033c8:	d904      	bls.n	80033d4 <HAL_RCC_OscConfig+0x514>
 80033ca:	f240 2156 	movw	r1, #598	; 0x256
 80033ce:	4873      	ldr	r0, [pc, #460]	; (800359c <HAL_RCC_OscConfig+0x6dc>)
 80033d0:	f7fe f8af 	bl	8001532 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	2b31      	cmp	r3, #49	; 0x31
 80033da:	d904      	bls.n	80033e6 <HAL_RCC_OscConfig+0x526>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80033e4:	d904      	bls.n	80033f0 <HAL_RCC_OscConfig+0x530>
 80033e6:	f240 2157 	movw	r1, #599	; 0x257
 80033ea:	486c      	ldr	r0, [pc, #432]	; (800359c <HAL_RCC_OscConfig+0x6dc>)
 80033ec:	f7fe f8a1 	bl	8001532 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d010      	beq.n	800341a <HAL_RCC_OscConfig+0x55a>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d00c      	beq.n	800341a <HAL_RCC_OscConfig+0x55a>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	2b06      	cmp	r3, #6
 8003406:	d008      	beq.n	800341a <HAL_RCC_OscConfig+0x55a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	2b08      	cmp	r3, #8
 800340e:	d004      	beq.n	800341a <HAL_RCC_OscConfig+0x55a>
 8003410:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003414:	4861      	ldr	r0, [pc, #388]	; (800359c <HAL_RCC_OscConfig+0x6dc>)
 8003416:	f7fe f88c 	bl	8001532 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	2b01      	cmp	r3, #1
 8003420:	d903      	bls.n	800342a <HAL_RCC_OscConfig+0x56a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	2b0f      	cmp	r3, #15
 8003428:	d904      	bls.n	8003434 <HAL_RCC_OscConfig+0x574>
 800342a:	f240 2159 	movw	r1, #601	; 0x259
 800342e:	485b      	ldr	r0, [pc, #364]	; (800359c <HAL_RCC_OscConfig+0x6dc>)
 8003430:	f7fe f87f 	bl	8001532 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	2b01      	cmp	r3, #1
 800343a:	d903      	bls.n	8003444 <HAL_RCC_OscConfig+0x584>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	2b07      	cmp	r3, #7
 8003442:	d904      	bls.n	800344e <HAL_RCC_OscConfig+0x58e>
 8003444:	f240 215b 	movw	r1, #603	; 0x25b
 8003448:	4854      	ldr	r0, [pc, #336]	; (800359c <HAL_RCC_OscConfig+0x6dc>)
 800344a:	f7fe f872 	bl	8001532 <assert_failed>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344e:	4b52      	ldr	r3, [pc, #328]	; (8003598 <HAL_RCC_OscConfig+0x6d8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a51      	ldr	r2, [pc, #324]	; (8003598 <HAL_RCC_OscConfig+0x6d8>)
 8003454:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345a:	f7fe fe03 	bl	8002064 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x5b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003462:	f7fe fdff 	bl	8002064 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x5b4>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e08d      	b.n	8003590 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003474:	4b48      	ldr	r3, [pc, #288]	; (8003598 <HAL_RCC_OscConfig+0x6d8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1f0      	bne.n	8003462 <HAL_RCC_OscConfig+0x5a2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69da      	ldr	r2, [r3, #28]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	431a      	orrs	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	019b      	lsls	r3, r3, #6
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003496:	085b      	lsrs	r3, r3, #1
 8003498:	3b01      	subs	r3, #1
 800349a:	041b      	lsls	r3, r3, #16
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a2:	061b      	lsls	r3, r3, #24
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	071b      	lsls	r3, r3, #28
 80034ac:	493a      	ldr	r1, [pc, #232]	; (8003598 <HAL_RCC_OscConfig+0x6d8>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b2:	4b39      	ldr	r3, [pc, #228]	; (8003598 <HAL_RCC_OscConfig+0x6d8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a38      	ldr	r2, [pc, #224]	; (8003598 <HAL_RCC_OscConfig+0x6d8>)
 80034b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7fe fdd1 	bl	8002064 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x618>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c6:	f7fe fdcd 	bl	8002064 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e05b      	b.n	8003590 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d8:	4b2f      	ldr	r3, [pc, #188]	; (8003598 <HAL_RCC_OscConfig+0x6d8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x606>
 80034e4:	e053      	b.n	800358e <HAL_RCC_OscConfig+0x6ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e6:	4b2c      	ldr	r3, [pc, #176]	; (8003598 <HAL_RCC_OscConfig+0x6d8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a2b      	ldr	r2, [pc, #172]	; (8003598 <HAL_RCC_OscConfig+0x6d8>)
 80034ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f2:	f7fe fdb7 	bl	8002064 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x64c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fa:	f7fe fdb3 	bl	8002064 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e041      	b.n	8003590 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350c:	4b22      	ldr	r3, [pc, #136]	; (8003598 <HAL_RCC_OscConfig+0x6d8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1f0      	bne.n	80034fa <HAL_RCC_OscConfig+0x63a>
 8003518:	e039      	b.n	800358e <HAL_RCC_OscConfig+0x6ce>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800351a:	4b1f      	ldr	r3, [pc, #124]	; (8003598 <HAL_RCC_OscConfig+0x6d8>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d030      	beq.n	800358a <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003532:	429a      	cmp	r2, r3
 8003534:	d129      	bne.n	800358a <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d122      	bne.n	800358a <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800354a:	4013      	ands	r3, r2
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003550:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003552:	4293      	cmp	r3, r2
 8003554:	d119      	bne.n	800358a <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003560:	085b      	lsrs	r3, r3, #1
 8003562:	3b01      	subs	r3, #1
 8003564:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d10f      	bne.n	800358a <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003576:	429a      	cmp	r2, r3
 8003578:	d107      	bne.n	800358a <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003584:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003586:	429a      	cmp	r2, r3
 8003588:	d001      	beq.n	800358e <HAL_RCC_OscConfig+0x6ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <HAL_RCC_OscConfig+0x6d0>
      }
    }
  }
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40023800 	.word	0x40023800
 800359c:	08007ab4 	.word	0x08007ab4

080035a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e18c      	b.n	80038d2 <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x28>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b0f      	cmp	r3, #15
 80035c6:	d904      	bls.n	80035d2 <HAL_RCC_ClockConfig+0x32>
 80035c8:	f240 21df 	movw	r1, #735	; 0x2df
 80035cc:	4887      	ldr	r0, [pc, #540]	; (80037ec <HAL_RCC_ClockConfig+0x24c>)
 80035ce:	f7fd ffb0 	bl	8001532 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d031      	beq.n	800363c <HAL_RCC_ClockConfig+0x9c>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d02e      	beq.n	800363c <HAL_RCC_ClockConfig+0x9c>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d02b      	beq.n	800363c <HAL_RCC_ClockConfig+0x9c>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	d028      	beq.n	800363c <HAL_RCC_ClockConfig+0x9c>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d025      	beq.n	800363c <HAL_RCC_ClockConfig+0x9c>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	2b05      	cmp	r3, #5
 80035f4:	d022      	beq.n	800363c <HAL_RCC_ClockConfig+0x9c>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b06      	cmp	r3, #6
 80035fa:	d01f      	beq.n	800363c <HAL_RCC_ClockConfig+0x9c>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	2b07      	cmp	r3, #7
 8003600:	d01c      	beq.n	800363c <HAL_RCC_ClockConfig+0x9c>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b08      	cmp	r3, #8
 8003606:	d019      	beq.n	800363c <HAL_RCC_ClockConfig+0x9c>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2b09      	cmp	r3, #9
 800360c:	d016      	beq.n	800363c <HAL_RCC_ClockConfig+0x9c>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b0a      	cmp	r3, #10
 8003612:	d013      	beq.n	800363c <HAL_RCC_ClockConfig+0x9c>
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	2b0b      	cmp	r3, #11
 8003618:	d010      	beq.n	800363c <HAL_RCC_ClockConfig+0x9c>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b0c      	cmp	r3, #12
 800361e:	d00d      	beq.n	800363c <HAL_RCC_ClockConfig+0x9c>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b0d      	cmp	r3, #13
 8003624:	d00a      	beq.n	800363c <HAL_RCC_ClockConfig+0x9c>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b0e      	cmp	r3, #14
 800362a:	d007      	beq.n	800363c <HAL_RCC_ClockConfig+0x9c>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b0f      	cmp	r3, #15
 8003630:	d004      	beq.n	800363c <HAL_RCC_ClockConfig+0x9c>
 8003632:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8003636:	486d      	ldr	r0, [pc, #436]	; (80037ec <HAL_RCC_ClockConfig+0x24c>)
 8003638:	f7fd ff7b 	bl	8001532 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800363c:	4b6c      	ldr	r3, [pc, #432]	; (80037f0 <HAL_RCC_ClockConfig+0x250>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d910      	bls.n	800366c <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364a:	4b69      	ldr	r3, [pc, #420]	; (80037f0 <HAL_RCC_ClockConfig+0x250>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 020f 	bic.w	r2, r3, #15
 8003652:	4967      	ldr	r1, [pc, #412]	; (80037f0 <HAL_RCC_ClockConfig+0x250>)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	4313      	orrs	r3, r2
 8003658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800365a:	4b65      	ldr	r3, [pc, #404]	; (80037f0 <HAL_RCC_ClockConfig+0x250>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d001      	beq.n	800366c <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e132      	b.n	80038d2 <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d049      	beq.n	800370c <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003684:	4b5b      	ldr	r3, [pc, #364]	; (80037f4 <HAL_RCC_ClockConfig+0x254>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	4a5a      	ldr	r2, [pc, #360]	; (80037f4 <HAL_RCC_ClockConfig+0x254>)
 800368a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800368e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800369c:	4b55      	ldr	r3, [pc, #340]	; (80037f4 <HAL_RCC_ClockConfig+0x254>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4a54      	ldr	r2, [pc, #336]	; (80037f4 <HAL_RCC_ClockConfig+0x254>)
 80036a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d024      	beq.n	80036fa <HAL_RCC_ClockConfig+0x15a>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2b80      	cmp	r3, #128	; 0x80
 80036b6:	d020      	beq.n	80036fa <HAL_RCC_ClockConfig+0x15a>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b90      	cmp	r3, #144	; 0x90
 80036be:	d01c      	beq.n	80036fa <HAL_RCC_ClockConfig+0x15a>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2ba0      	cmp	r3, #160	; 0xa0
 80036c6:	d018      	beq.n	80036fa <HAL_RCC_ClockConfig+0x15a>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2bb0      	cmp	r3, #176	; 0xb0
 80036ce:	d014      	beq.n	80036fa <HAL_RCC_ClockConfig+0x15a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2bc0      	cmp	r3, #192	; 0xc0
 80036d6:	d010      	beq.n	80036fa <HAL_RCC_ClockConfig+0x15a>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2bd0      	cmp	r3, #208	; 0xd0
 80036de:	d00c      	beq.n	80036fa <HAL_RCC_ClockConfig+0x15a>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2be0      	cmp	r3, #224	; 0xe0
 80036e6:	d008      	beq.n	80036fa <HAL_RCC_ClockConfig+0x15a>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2bf0      	cmp	r3, #240	; 0xf0
 80036ee:	d004      	beq.n	80036fa <HAL_RCC_ClockConfig+0x15a>
 80036f0:	f44f 7141 	mov.w	r1, #772	; 0x304
 80036f4:	483d      	ldr	r0, [pc, #244]	; (80037ec <HAL_RCC_ClockConfig+0x24c>)
 80036f6:	f7fd ff1c 	bl	8001532 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036fa:	4b3e      	ldr	r3, [pc, #248]	; (80037f4 <HAL_RCC_ClockConfig+0x254>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	493b      	ldr	r1, [pc, #236]	; (80037f4 <HAL_RCC_ClockConfig+0x254>)
 8003708:	4313      	orrs	r3, r2
 800370a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d051      	beq.n	80037bc <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00c      	beq.n	800373a <HAL_RCC_ClockConfig+0x19a>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d008      	beq.n	800373a <HAL_RCC_ClockConfig+0x19a>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d004      	beq.n	800373a <HAL_RCC_ClockConfig+0x19a>
 8003730:	f240 310b 	movw	r1, #779	; 0x30b
 8003734:	482d      	ldr	r0, [pc, #180]	; (80037ec <HAL_RCC_ClockConfig+0x24c>)
 8003736:	f7fd fefc 	bl	8001532 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	4b2c      	ldr	r3, [pc, #176]	; (80037f4 <HAL_RCC_ClockConfig+0x254>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d115      	bne.n	800377a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e0bf      	b.n	80038d2 <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d107      	bne.n	800376a <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375a:	4b26      	ldr	r3, [pc, #152]	; (80037f4 <HAL_RCC_ClockConfig+0x254>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e0b3      	b.n	80038d2 <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376a:	4b22      	ldr	r3, [pc, #136]	; (80037f4 <HAL_RCC_ClockConfig+0x254>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e0ab      	b.n	80038d2 <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800377a:	4b1e      	ldr	r3, [pc, #120]	; (80037f4 <HAL_RCC_ClockConfig+0x254>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f023 0203 	bic.w	r2, r3, #3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	491b      	ldr	r1, [pc, #108]	; (80037f4 <HAL_RCC_ClockConfig+0x254>)
 8003788:	4313      	orrs	r3, r2
 800378a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800378c:	f7fe fc6a 	bl	8002064 <HAL_GetTick>
 8003790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003792:	e00a      	b.n	80037aa <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003794:	f7fe fc66 	bl	8002064 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e093      	b.n	80038d2 <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037aa:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <HAL_RCC_ClockConfig+0x254>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 020c 	and.w	r2, r3, #12
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d1eb      	bne.n	8003794 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037bc:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <HAL_RCC_ClockConfig+0x250>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d216      	bcs.n	80037f8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ca:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <HAL_RCC_ClockConfig+0x250>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f023 020f 	bic.w	r2, r3, #15
 80037d2:	4907      	ldr	r1, [pc, #28]	; (80037f0 <HAL_RCC_ClockConfig+0x250>)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <HAL_RCC_ClockConfig+0x250>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d007      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e072      	b.n	80038d2 <HAL_RCC_ClockConfig+0x332>
 80037ec:	08007ab4 	.word	0x08007ab4
 80037f0:	40023c00 	.word	0x40023c00
 80037f4:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d025      	beq.n	8003850 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d018      	beq.n	800383e <HAL_RCC_ClockConfig+0x29e>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003814:	d013      	beq.n	800383e <HAL_RCC_ClockConfig+0x29e>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800381e:	d00e      	beq.n	800383e <HAL_RCC_ClockConfig+0x29e>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003828:	d009      	beq.n	800383e <HAL_RCC_ClockConfig+0x29e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003832:	d004      	beq.n	800383e <HAL_RCC_ClockConfig+0x29e>
 8003834:	f44f 7152 	mov.w	r1, #840	; 0x348
 8003838:	4828      	ldr	r0, [pc, #160]	; (80038dc <HAL_RCC_ClockConfig+0x33c>)
 800383a:	f7fd fe7a 	bl	8001532 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800383e:	4b28      	ldr	r3, [pc, #160]	; (80038e0 <HAL_RCC_ClockConfig+0x340>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	4925      	ldr	r1, [pc, #148]	; (80038e0 <HAL_RCC_ClockConfig+0x340>)
 800384c:	4313      	orrs	r3, r2
 800384e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d026      	beq.n	80038aa <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d018      	beq.n	8003896 <HAL_RCC_ClockConfig+0x2f6>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800386c:	d013      	beq.n	8003896 <HAL_RCC_ClockConfig+0x2f6>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003876:	d00e      	beq.n	8003896 <HAL_RCC_ClockConfig+0x2f6>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003880:	d009      	beq.n	8003896 <HAL_RCC_ClockConfig+0x2f6>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800388a:	d004      	beq.n	8003896 <HAL_RCC_ClockConfig+0x2f6>
 800388c:	f240 314f 	movw	r1, #847	; 0x34f
 8003890:	4812      	ldr	r0, [pc, #72]	; (80038dc <HAL_RCC_ClockConfig+0x33c>)
 8003892:	f7fd fe4e 	bl	8001532 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003896:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <HAL_RCC_ClockConfig+0x340>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	490e      	ldr	r1, [pc, #56]	; (80038e0 <HAL_RCC_ClockConfig+0x340>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038aa:	f000 f821 	bl	80038f0 <HAL_RCC_GetSysClockFreq>
 80038ae:	4601      	mov	r1, r0
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <HAL_RCC_ClockConfig+0x340>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	091b      	lsrs	r3, r3, #4
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	4a0a      	ldr	r2, [pc, #40]	; (80038e4 <HAL_RCC_ClockConfig+0x344>)
 80038bc:	5cd3      	ldrb	r3, [r2, r3]
 80038be:	fa21 f303 	lsr.w	r3, r1, r3
 80038c2:	4a09      	ldr	r2, [pc, #36]	; (80038e8 <HAL_RCC_ClockConfig+0x348>)
 80038c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038c6:	4b09      	ldr	r3, [pc, #36]	; (80038ec <HAL_RCC_ClockConfig+0x34c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe fb86 	bl	8001fdc <HAL_InitTick>

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	08007ab4 	.word	0x08007ab4
 80038e0:	40023800 	.word	0x40023800
 80038e4:	08007b9c 	.word	0x08007b9c
 80038e8:	20000000 	.word	0x20000000
 80038ec:	20000004 	.word	0x20000004

080038f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80038f6:	2300      	movs	r3, #0
 80038f8:	607b      	str	r3, [r7, #4]
 80038fa:	2300      	movs	r3, #0
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	2300      	movs	r3, #0
 8003900:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003902:	2300      	movs	r3, #0
 8003904:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003906:	4b50      	ldr	r3, [pc, #320]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x158>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	2b04      	cmp	r3, #4
 8003910:	d007      	beq.n	8003922 <HAL_RCC_GetSysClockFreq+0x32>
 8003912:	2b08      	cmp	r3, #8
 8003914:	d008      	beq.n	8003928 <HAL_RCC_GetSysClockFreq+0x38>
 8003916:	2b00      	cmp	r3, #0
 8003918:	f040 808d 	bne.w	8003a36 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800391c:	4b4b      	ldr	r3, [pc, #300]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x15c>)
 800391e:	60bb      	str	r3, [r7, #8]
      break;
 8003920:	e08c      	b.n	8003a3c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003922:	4b4b      	ldr	r3, [pc, #300]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x160>)
 8003924:	60bb      	str	r3, [r7, #8]
      break;
 8003926:	e089      	b.n	8003a3c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003928:	4b47      	ldr	r3, [pc, #284]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x158>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003930:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003932:	4b45      	ldr	r3, [pc, #276]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x158>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d023      	beq.n	8003986 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800393e:	4b42      	ldr	r3, [pc, #264]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x158>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	099b      	lsrs	r3, r3, #6
 8003944:	f04f 0400 	mov.w	r4, #0
 8003948:	f240 11ff 	movw	r1, #511	; 0x1ff
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	ea03 0501 	and.w	r5, r3, r1
 8003954:	ea04 0602 	and.w	r6, r4, r2
 8003958:	4a3d      	ldr	r2, [pc, #244]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x160>)
 800395a:	fb02 f106 	mul.w	r1, r2, r6
 800395e:	2200      	movs	r2, #0
 8003960:	fb02 f205 	mul.w	r2, r2, r5
 8003964:	440a      	add	r2, r1
 8003966:	493a      	ldr	r1, [pc, #232]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x160>)
 8003968:	fba5 0101 	umull	r0, r1, r5, r1
 800396c:	1853      	adds	r3, r2, r1
 800396e:	4619      	mov	r1, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f04f 0400 	mov.w	r4, #0
 8003976:	461a      	mov	r2, r3
 8003978:	4623      	mov	r3, r4
 800397a:	f7fc fcb9 	bl	80002f0 <__aeabi_uldivmod>
 800397e:	4603      	mov	r3, r0
 8003980:	460c      	mov	r4, r1
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	e049      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003986:	4b30      	ldr	r3, [pc, #192]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x158>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	099b      	lsrs	r3, r3, #6
 800398c:	f04f 0400 	mov.w	r4, #0
 8003990:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	ea03 0501 	and.w	r5, r3, r1
 800399c:	ea04 0602 	and.w	r6, r4, r2
 80039a0:	4629      	mov	r1, r5
 80039a2:	4632      	mov	r2, r6
 80039a4:	f04f 0300 	mov.w	r3, #0
 80039a8:	f04f 0400 	mov.w	r4, #0
 80039ac:	0154      	lsls	r4, r2, #5
 80039ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80039b2:	014b      	lsls	r3, r1, #5
 80039b4:	4619      	mov	r1, r3
 80039b6:	4622      	mov	r2, r4
 80039b8:	1b49      	subs	r1, r1, r5
 80039ba:	eb62 0206 	sbc.w	r2, r2, r6
 80039be:	f04f 0300 	mov.w	r3, #0
 80039c2:	f04f 0400 	mov.w	r4, #0
 80039c6:	0194      	lsls	r4, r2, #6
 80039c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80039cc:	018b      	lsls	r3, r1, #6
 80039ce:	1a5b      	subs	r3, r3, r1
 80039d0:	eb64 0402 	sbc.w	r4, r4, r2
 80039d4:	f04f 0100 	mov.w	r1, #0
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	00e2      	lsls	r2, r4, #3
 80039de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80039e2:	00d9      	lsls	r1, r3, #3
 80039e4:	460b      	mov	r3, r1
 80039e6:	4614      	mov	r4, r2
 80039e8:	195b      	adds	r3, r3, r5
 80039ea:	eb44 0406 	adc.w	r4, r4, r6
 80039ee:	f04f 0100 	mov.w	r1, #0
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	02a2      	lsls	r2, r4, #10
 80039f8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80039fc:	0299      	lsls	r1, r3, #10
 80039fe:	460b      	mov	r3, r1
 8003a00:	4614      	mov	r4, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	4621      	mov	r1, r4
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f04f 0400 	mov.w	r4, #0
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4623      	mov	r3, r4
 8003a10:	f7fc fc6e 	bl	80002f0 <__aeabi_uldivmod>
 8003a14:	4603      	mov	r3, r0
 8003a16:	460c      	mov	r4, r1
 8003a18:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	0c1b      	lsrs	r3, r3, #16
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	3301      	adds	r3, #1
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a32:	60bb      	str	r3, [r7, #8]
      break;
 8003a34:	e002      	b.n	8003a3c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a36:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003a38:	60bb      	str	r3, [r7, #8]
      break;
 8003a3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a3c:	68bb      	ldr	r3, [r7, #8]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	00f42400 	.word	0x00f42400
 8003a50:	017d7840 	.word	0x017d7840

08003a54 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a58:	4b03      	ldr	r3, [pc, #12]	; (8003a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	20000000 	.word	0x20000000

08003a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a70:	f7ff fff0 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8003a74:	4601      	mov	r1, r0
 8003a76:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	0a9b      	lsrs	r3, r3, #10
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	4a03      	ldr	r2, [pc, #12]	; (8003a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a82:	5cd3      	ldrb	r3, [r2, r3]
 8003a84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	08007bac 	.word	0x08007bac

08003a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a98:	f7ff ffdc 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8003a9c:	4601      	mov	r1, r0
 8003a9e:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	0b5b      	lsrs	r3, r3, #13
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	4a03      	ldr	r2, [pc, #12]	; (8003ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aaa:	5cd3      	ldrb	r3, [r2, r3]
 8003aac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	08007bac 	.word	0x08007bac

08003abc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f040 809e 	bne.w	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f040 8097 	bne.w	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f040 8090 	bne.w	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f040 8089 	bne.w	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f040 8082 	bne.w	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d17b      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d175      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d16f      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d169      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d163      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d15d      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d157      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d151      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d14b      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d145      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d13f      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d139      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d133      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d12d      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d127      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d121      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d11b      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d115      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10f      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d109      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d103      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c1a:	2174      	movs	r1, #116	; 0x74
 8003c1c:	48a2      	ldr	r0, [pc, #648]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003c1e:	f7fd fc88 	bl	8001532 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d01f      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d008      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c3e:	d003      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003c40:	217a      	movs	r1, #122	; 0x7a
 8003c42:	4899      	ldr	r0, [pc, #612]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003c44:	f7fd fc75 	bl	8001532 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c48:	4b98      	ldr	r3, [pc, #608]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	4a97      	ldr	r2, [pc, #604]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003c4e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c52:	6093      	str	r3, [r2, #8]
 8003c54:	4b95      	ldr	r3, [pc, #596]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5c:	4993      	ldr	r1, [pc, #588]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      plli2sused = 1;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d02e      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d012      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c8a:	d00d      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c94:	d008      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c9e:	d003      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003ca0:	218a      	movs	r1, #138	; 0x8a
 8003ca2:	4881      	ldr	r0, [pc, #516]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003ca4:	f7fd fc45 	bl	8001532 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ca8:	4b80      	ldr	r3, [pc, #512]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb6:	497d      	ldr	r1, [pc, #500]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cc6:	d101      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x210>
    {
      plli2sused = 1;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      pllsaiused = 1;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d02e      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d012      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cf4:	d00d      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cfe:	d008      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d08:	d003      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003d0a:	219e      	movs	r1, #158	; 0x9e
 8003d0c:	4866      	ldr	r0, [pc, #408]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003d0e:	f7fd fc10 	bl	8001532 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d12:	4b66      	ldr	r3, [pc, #408]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	4962      	ldr	r1, [pc, #392]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d30:	d101      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      plli2sused = 1;
 8003d32:	2301      	movs	r3, #1
 8003d34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      pllsaiused = 1;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
      plli2sused = 1;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 8187 	beq.w	800406e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d68:	f000 80eb 	beq.w	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d74:	f000 80e5 	beq.w	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	4a4c      	ldr	r2, [pc, #304]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	f000 80df 	beq.w	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d88:	4a4a      	ldr	r2, [pc, #296]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	f000 80d9 	beq.w	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	4a48      	ldr	r2, [pc, #288]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	f000 80d3 	beq.w	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	4a46      	ldr	r2, [pc, #280]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	f000 80cd 	beq.w	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	4a44      	ldr	r2, [pc, #272]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	f000 80c7 	beq.w	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	4a42      	ldr	r2, [pc, #264]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	f000 80c1 	beq.w	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	4a40      	ldr	r2, [pc, #256]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	f000 80bb 	beq.w	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	4a3e      	ldr	r2, [pc, #248]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x410>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	f000 80b5 	beq.w	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	4a3c      	ldr	r2, [pc, #240]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x414>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	f000 80af 	beq.w	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	4a3a      	ldr	r2, [pc, #232]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	f000 80a9 	beq.w	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	4a38      	ldr	r2, [pc, #224]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	f000 80a3 	beq.w	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	4a36      	ldr	r2, [pc, #216]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	f000 809d 	beq.w	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0c:	4a34      	ldr	r2, [pc, #208]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	f000 8097 	beq.w	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e18:	4a32      	ldr	r2, [pc, #200]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	f000 8091 	beq.w	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	4a30      	ldr	r2, [pc, #192]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	f000 808b 	beq.w	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e30:	4a2e      	ldr	r2, [pc, #184]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	f000 8085 	beq.w	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3c:	4a2c      	ldr	r2, [pc, #176]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d07f      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	4a2b      	ldr	r2, [pc, #172]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d07a      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e50:	4a29      	ldr	r2, [pc, #164]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d075      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	4a28      	ldr	r2, [pc, #160]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d070      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e64:	4a26      	ldr	r2, [pc, #152]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d06b      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	4a25      	ldr	r2, [pc, #148]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d066      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	4a23      	ldr	r2, [pc, #140]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d061      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	4a22      	ldr	r2, [pc, #136]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d05c      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	4a20      	ldr	r2, [pc, #128]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d057      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	4a1f      	ldr	r2, [pc, #124]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d052      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	4a1d      	ldr	r2, [pc, #116]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d04d      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003ea6:	e039      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003ea8:	08007aec 	.word	0x08007aec
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	00020300 	.word	0x00020300
 8003eb4:	00030300 	.word	0x00030300
 8003eb8:	00040300 	.word	0x00040300
 8003ebc:	00050300 	.word	0x00050300
 8003ec0:	00060300 	.word	0x00060300
 8003ec4:	00070300 	.word	0x00070300
 8003ec8:	00080300 	.word	0x00080300
 8003ecc:	00090300 	.word	0x00090300
 8003ed0:	000a0300 	.word	0x000a0300
 8003ed4:	000b0300 	.word	0x000b0300
 8003ed8:	000c0300 	.word	0x000c0300
 8003edc:	000d0300 	.word	0x000d0300
 8003ee0:	000e0300 	.word	0x000e0300
 8003ee4:	000f0300 	.word	0x000f0300
 8003ee8:	00100300 	.word	0x00100300
 8003eec:	00110300 	.word	0x00110300
 8003ef0:	00120300 	.word	0x00120300
 8003ef4:	00130300 	.word	0x00130300
 8003ef8:	00140300 	.word	0x00140300
 8003efc:	00150300 	.word	0x00150300
 8003f00:	00160300 	.word	0x00160300
 8003f04:	00170300 	.word	0x00170300
 8003f08:	00180300 	.word	0x00180300
 8003f0c:	00190300 	.word	0x00190300
 8003f10:	001a0300 	.word	0x001a0300
 8003f14:	001b0300 	.word	0x001b0300
 8003f18:	001c0300 	.word	0x001c0300
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	4a44      	ldr	r2, [pc, #272]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00d      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	4a43      	ldr	r2, [pc, #268]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d008      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	4a41      	ldr	r2, [pc, #260]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d003      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f3a:	21b9      	movs	r1, #185	; 0xb9
 8003f3c:	4840      	ldr	r0, [pc, #256]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8003f3e:	f7fd faf8 	bl	8001532 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f42:	4b40      	ldr	r3, [pc, #256]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	4a3f      	ldr	r2, [pc, #252]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f4e:	4b3d      	ldr	r3, [pc, #244]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f56:	60bb      	str	r3, [r7, #8]
 8003f58:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f5a:	4b3b      	ldr	r3, [pc, #236]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a3a      	ldr	r2, [pc, #232]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f66:	f7fe f87d 	bl	8002064 <HAL_GetTick>
 8003f6a:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f6c:	e009      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f6e:	f7fe f879 	bl	8002064 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b64      	cmp	r3, #100	; 0x64
 8003f7a:	d902      	bls.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
      {
        return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	f000 be00 	b.w	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f82:	4b31      	ldr	r3, [pc, #196]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0ef      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f8e:	4b2d      	ldr	r3, [pc, #180]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f96:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d036      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d02f      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fac:	4b25      	ldr	r3, [pc, #148]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fb6:	4b23      	ldr	r3, [pc, #140]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fba:	4a22      	ldr	r2, [pc, #136]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fc2:	4b20      	ldr	r3, [pc, #128]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc6:	4a1f      	ldr	r2, [pc, #124]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fcc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003fce:	4a1d      	ldr	r2, [pc, #116]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fd4:	4b1b      	ldr	r3, [pc, #108]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d115      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x550>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe0:	f7fe f840 	bl	8002064 <HAL_GetTick>
 8003fe4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe6:	e00b      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x544>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe8:	f7fe f83c 	bl	8002064 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d902      	bls.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x544>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	f000 bdc1 	b.w	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004000:	4b10      	ldr	r3, [pc, #64]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0ed      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004014:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004018:	d11a      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800401a:	4b0a      	ldr	r3, [pc, #40]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004026:	4b09      	ldr	r3, [pc, #36]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004028:	400b      	ands	r3, r1
 800402a:	4906      	ldr	r1, [pc, #24]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800402c:	4313      	orrs	r3, r2
 800402e:	608b      	str	r3, [r1, #8]
 8004030:	e014      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 8004032:	bf00      	nop
 8004034:	001d0300 	.word	0x001d0300
 8004038:	001e0300 	.word	0x001e0300
 800403c:	001f0300 	.word	0x001f0300
 8004040:	08007aec 	.word	0x08007aec
 8004044:	40023800 	.word	0x40023800
 8004048:	40007000 	.word	0x40007000
 800404c:	0ffffcff 	.word	0x0ffffcff
 8004050:	4ba7      	ldr	r3, [pc, #668]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	4aa6      	ldr	r2, [pc, #664]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004056:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800405a:	6093      	str	r3, [r2, #8]
 800405c:	4ba4      	ldr	r3, [pc, #656]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800405e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004068:	49a1      	ldr	r1, [pc, #644]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800406a:	4313      	orrs	r3, r2
 800406c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0310 	and.w	r3, r3, #16
 8004076:	2b00      	cmp	r3, #0
 8004078:	d01d      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	2b00      	cmp	r3, #0
 8004080:	d008      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800408a:	d003      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 800408c:	21f3      	movs	r1, #243	; 0xf3
 800408e:	4899      	ldr	r0, [pc, #612]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004090:	f7fd fa4f 	bl	8001532 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004094:	4b96      	ldr	r3, [pc, #600]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800409a:	4a95      	ldr	r2, [pc, #596]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800409c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040a0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80040a4:	4b92      	ldr	r3, [pc, #584]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040a6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ae:	4990      	ldr	r1, [pc, #576]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d01c      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00d      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d2:	d008      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040dc:	d003      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 80040de:	21fd      	movs	r1, #253	; 0xfd
 80040e0:	4884      	ldr	r0, [pc, #528]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80040e2:	f7fd fa26 	bl	8001532 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040e6:	4b82      	ldr	r3, [pc, #520]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f4:	497e      	ldr	r1, [pc, #504]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d01d      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00e      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004114:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004118:	d009      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800411e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004122:	d004      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004124:	f240 1107 	movw	r1, #263	; 0x107
 8004128:	4872      	ldr	r0, [pc, #456]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800412a:	f7fd fa02 	bl	8001532 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800412e:	4b70      	ldr	r3, [pc, #448]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004134:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800413c:	496c      	ldr	r1, [pc, #432]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d01d      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00e      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800415c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004160:	d009      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004166:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800416a:	d004      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 800416c:	f240 1111 	movw	r1, #273	; 0x111
 8004170:	4860      	ldr	r0, [pc, #384]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004172:	f7fd f9de 	bl	8001532 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004176:	4b5e      	ldr	r3, [pc, #376]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004184:	495a      	ldr	r1, [pc, #360]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01d      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x718>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00e      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x702>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041a8:	d009      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x702>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041b2:	d004      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x702>
 80041b4:	f240 111b 	movw	r1, #283	; 0x11b
 80041b8:	484e      	ldr	r0, [pc, #312]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80041ba:	f7fd f9ba 	bl	8001532 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041be:	4b4c      	ldr	r3, [pc, #304]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041cc:	4948      	ldr	r1, [pc, #288]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d01f      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x764>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d010      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x74e>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d00c      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x74e>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d008      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x74e>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d004      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004200:	f240 1125 	movw	r1, #293	; 0x125
 8004204:	483b      	ldr	r0, [pc, #236]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004206:	f7fd f994 	bl	8001532 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800420a:	4b39      	ldr	r3, [pc, #228]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800420c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004210:	f023 0203 	bic.w	r2, r3, #3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004218:	4935      	ldr	r1, [pc, #212]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004228:	2b00      	cmp	r3, #0
 800422a:	d01f      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004230:	2b00      	cmp	r3, #0
 8004232:	d010      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004238:	2b04      	cmp	r3, #4
 800423a:	d00c      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004240:	2b0c      	cmp	r3, #12
 8004242:	d008      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004248:	2b08      	cmp	r3, #8
 800424a:	d004      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 800424c:	f240 112f 	movw	r1, #303	; 0x12f
 8004250:	4828      	ldr	r0, [pc, #160]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004252:	f7fd f96e 	bl	8001532 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004256:	4b26      	ldr	r3, [pc, #152]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425c:	f023 020c 	bic.w	r2, r3, #12
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004264:	4922      	ldr	r1, [pc, #136]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004266:	4313      	orrs	r3, r2
 8004268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004274:	2b00      	cmp	r3, #0
 8004276:	d01f      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427c:	2b00      	cmp	r3, #0
 800427e:	d010      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004284:	2b10      	cmp	r3, #16
 8004286:	d00c      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428c:	2b30      	cmp	r3, #48	; 0x30
 800428e:	d008      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004294:	2b20      	cmp	r3, #32
 8004296:	d004      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8004298:	f240 1139 	movw	r1, #313	; 0x139
 800429c:	4815      	ldr	r0, [pc, #84]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800429e:	f7fd f948 	bl	8001532 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042a2:	4b13      	ldr	r3, [pc, #76]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b0:	490f      	ldr	r1, [pc, #60]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d024      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d015      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d0:	2b40      	cmp	r3, #64	; 0x40
 80042d2:	d011      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d8:	2bc0      	cmp	r3, #192	; 0xc0
 80042da:	d00d      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e0:	2b80      	cmp	r3, #128	; 0x80
 80042e2:	d009      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80042e4:	f240 1143 	movw	r1, #323	; 0x143
 80042e8:	4802      	ldr	r0, [pc, #8]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80042ea:	f7fd f922 	bl	8001532 <assert_failed>
 80042ee:	e003      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80042f0:	40023800 	.word	0x40023800
 80042f4:	08007aec 	.word	0x08007aec

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042f8:	4bae      	ldr	r3, [pc, #696]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80042fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004306:	49ab      	ldr	r1, [pc, #684]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004308:	4313      	orrs	r3, r2
 800430a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004316:	2b00      	cmp	r3, #0
 8004318:	d022      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431e:	2b00      	cmp	r3, #0
 8004320:	d013      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800432a:	d00e      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x88e>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004330:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004334:	d009      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800433e:	d004      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004340:	f240 114d 	movw	r1, #333	; 0x14d
 8004344:	489c      	ldr	r0, [pc, #624]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004346:	f7fd f8f4 	bl	8001532 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800434a:	4b9a      	ldr	r3, [pc, #616]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800434c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004350:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004358:	4996      	ldr	r1, [pc, #600]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004368:	2b00      	cmp	r3, #0
 800436a:	d022      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004370:	2b00      	cmp	r3, #0
 8004372:	d013      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437c:	d00e      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004382:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004386:	d009      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004390:	d004      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8004392:	f240 1157 	movw	r1, #343	; 0x157
 8004396:	4888      	ldr	r0, [pc, #544]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004398:	f7fd f8cb 	bl	8001532 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800439c:	4b85      	ldr	r3, [pc, #532]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800439e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043aa:	4982      	ldr	r1, [pc, #520]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d022      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d013      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x932>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ce:	d00e      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x932>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043d8:	d009      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x932>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e2:	d004      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x932>
 80043e4:	f240 1161 	movw	r1, #353	; 0x161
 80043e8:	4873      	ldr	r0, [pc, #460]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80043ea:	f7fd f8a2 	bl	8001532 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80043ee:	4b71      	ldr	r3, [pc, #452]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80043f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fc:	496d      	ldr	r1, [pc, #436]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d022      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004414:	2b00      	cmp	r3, #0
 8004416:	d013      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800441c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004420:	d00e      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004426:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800442a:	d009      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004434:	d004      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004436:	f240 116b 	movw	r1, #363	; 0x16b
 800443a:	485f      	ldr	r0, [pc, #380]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 800443c:	f7fd f879 	bl	8001532 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004440:	4b5c      	ldr	r3, [pc, #368]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004446:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444e:	4959      	ldr	r1, [pc, #356]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d018      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004466:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800446a:	d008      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004470:	2b00      	cmp	r3, #0
 8004472:	d004      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8004474:	f240 1175 	movw	r1, #373	; 0x175
 8004478:	484f      	ldr	r0, [pc, #316]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 800447a:	f7fd f85a 	bl	8001532 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800447e:	4b4d      	ldr	r3, [pc, #308]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004484:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800448c:	4949      	ldr	r1, [pc, #292]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d01f      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044a8:	d008      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d004      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80044b2:	f240 117f 	movw	r1, #383	; 0x17f
 80044b6:	4840      	ldr	r0, [pc, #256]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80044b8:	f7fd f83b 	bl	8001532 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044bc:	4b3d      	ldr	r3, [pc, #244]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ca:	493a      	ldr	r1, [pc, #232]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044da:	d101      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      pllsaiused = 1;
 80044dc:	2301      	movs	r3, #1
 80044de:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0308 	and.w	r3, r3, #8
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    pllsaiused = 1;
 80044ec:	2301      	movs	r3, #1
 80044ee:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d022      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xa86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004500:	2b00      	cmp	r3, #0
 8004502:	d013      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800450c:	d00e      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004512:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004516:	d009      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800451c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004520:	d004      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004522:	f240 1197 	movw	r1, #407	; 0x197
 8004526:	4824      	ldr	r0, [pc, #144]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004528:	f7fd f803 	bl	8001532 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800452c:	4b21      	ldr	r3, [pc, #132]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800452e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004532:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453a:	491e      	ldr	r1, [pc, #120]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d01b      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xaca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004554:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004558:	d009      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004560:	2b00      	cmp	r3, #0
 8004562:	d004      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004564:	f240 11a1 	movw	r1, #417	; 0x1a1
 8004568:	4813      	ldr	r0, [pc, #76]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 800456a:	f7fc ffe2 	bl	8001532 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800456e:	4b11      	ldr	r3, [pc, #68]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004574:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800457e:	490d      	ldr	r1, [pc, #52]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d020      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800459c:	d00e      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xb00>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d009      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xb00>
 80045a8:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80045ac:	4802      	ldr	r0, [pc, #8]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80045ae:	f7fc ffc0 	bl	8001532 <assert_failed>
 80045b2:	e003      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xb00>
 80045b4:	40023800 	.word	0x40023800
 80045b8:	08007aec 	.word	0x08007aec

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80045bc:	4b35      	ldr	r3, [pc, #212]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80045be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045cc:	4931      	ldr	r1, [pc, #196]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d01b      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045f4:	d004      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 80045f6:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80045fa:	4827      	ldr	r0, [pc, #156]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80045fc:	f7fc ff99 	bl	8001532 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004600:	4b24      	ldr	r3, [pc, #144]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004606:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004610:	4920      	ldr	r1, [pc, #128]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01b      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004634:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004638:	d004      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800463a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800463e:	4816      	ldr	r0, [pc, #88]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004640:	f7fc ff77 	bl	8001532 <assert_failed>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004644:	4b13      	ldr	r3, [pc, #76]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004646:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800464a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004654:	490f      	ldr	r1, [pc, #60]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d005      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800466a:	f040 8153 	bne.w	8004914 <HAL_RCCEx_PeriphCLKConfig+0xe58>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800466e:	4b09      	ldr	r3, [pc, #36]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a08      	ldr	r2, [pc, #32]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004674:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004678:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800467a:	f7fd fcf3 	bl	8002064 <HAL_GetTick>
 800467e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004680:	e00c      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004682:	f7fd fcef 	bl	8002064 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b64      	cmp	r3, #100	; 0x64
 800468e:	d905      	bls.n	800469c <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e276      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 8004694:	40023800 	.word	0x40023800
 8004698:	08007aec 	.word	0x08007aec
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800469c:	4ba9      	ldr	r3, [pc, #676]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1ec      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b31      	cmp	r3, #49	; 0x31
 80046ae:	d904      	bls.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80046b8:	d904      	bls.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80046ba:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80046be:	48a2      	ldr	r0, [pc, #648]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80046c0:	f7fc ff37 	bl	8001532 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d02e      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d12a      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d903      	bls.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2b07      	cmp	r3, #7
 80046e6:	d904      	bls.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xc36>
 80046e8:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80046ec:	4896      	ldr	r0, [pc, #600]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80046ee:	f7fc ff20 	bl	8001532 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046f2:	4b94      	ldr	r3, [pc, #592]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80046f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046f8:	0c1b      	lsrs	r3, r3, #16
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004700:	4b90      	ldr	r3, [pc, #576]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004706:	0e1b      	lsrs	r3, r3, #24
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	019a      	lsls	r2, r3, #6
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	041b      	lsls	r3, r3, #16
 8004718:	431a      	orrs	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	061b      	lsls	r3, r3, #24
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	071b      	lsls	r3, r3, #28
 8004726:	4987      	ldr	r1, [pc, #540]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d004      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xc88>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004742:	d00a      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800474c:	2b00      	cmp	r3, #0
 800474e:	d048      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004758:	d143      	bne.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d903      	bls.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xcae>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	2b0f      	cmp	r3, #15
 8004768:	d904      	bls.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 800476a:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800476e:	4876      	ldr	r0, [pc, #472]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004770:	f7fc fedf 	bl	8001532 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	2b20      	cmp	r3, #32
 8004782:	d904      	bls.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 8004784:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004788:	486f      	ldr	r0, [pc, #444]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 800478a:	f7fc fed2 	bl	8001532 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800478e:	4b6d      	ldr	r3, [pc, #436]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004794:	0c1b      	lsrs	r3, r3, #16
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800479c:	4b69      	ldr	r3, [pc, #420]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800479e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a2:	0f1b      	lsrs	r3, r3, #28
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	019a      	lsls	r2, r3, #6
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	041b      	lsls	r3, r3, #16
 80047b4:	431a      	orrs	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	061b      	lsls	r3, r3, #24
 80047bc:	431a      	orrs	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	071b      	lsls	r3, r3, #28
 80047c2:	4960      	ldr	r1, [pc, #384]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80047ca:	4b5e      	ldr	r3, [pc, #376]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80047cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047d0:	f023 021f 	bic.w	r2, r3, #31
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	3b01      	subs	r3, #1
 80047da:	495a      	ldr	r1, [pc, #360]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d032      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xd98>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d010      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d00c      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	2b02      	cmp	r3, #2
 8004804:	d008      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	2b03      	cmp	r3, #3
 800480c:	d004      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 800480e:	f240 2107 	movw	r1, #519	; 0x207
 8004812:	484d      	ldr	r0, [pc, #308]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004814:	f7fc fe8d 	bl	8001532 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004818:	4b4a      	ldr	r3, [pc, #296]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800481a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800481e:	0e1b      	lsrs	r3, r3, #24
 8004820:	f003 030f 	and.w	r3, r3, #15
 8004824:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004826:	4b47      	ldr	r3, [pc, #284]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800482c:	0f1b      	lsrs	r3, r3, #28
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	019a      	lsls	r2, r3, #6
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	041b      	lsls	r3, r3, #16
 8004840:	431a      	orrs	r2, r3
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	061b      	lsls	r3, r3, #24
 8004846:	431a      	orrs	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	071b      	lsls	r3, r3, #28
 800484c:	493d      	ldr	r1, [pc, #244]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d040      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d010      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d00c      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d008      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	2b03      	cmp	r3, #3
 800487e:	d004      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004880:	f240 2116 	movw	r1, #534	; 0x216
 8004884:	4830      	ldr	r0, [pc, #192]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004886:	f7fc fe54 	bl	8001532 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d903      	bls.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	2b07      	cmp	r3, #7
 8004898:	d904      	bls.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
 800489a:	f240 2117 	movw	r1, #535	; 0x217
 800489e:	482a      	ldr	r0, [pc, #168]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80048a0:	f7fc fe47 	bl	8001532 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d903      	bls.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	2b0f      	cmp	r3, #15
 80048b2:	d904      	bls.n	80048be <HAL_RCCEx_PeriphCLKConfig+0xe02>
 80048b4:	f44f 7106 	mov.w	r1, #536	; 0x218
 80048b8:	4823      	ldr	r0, [pc, #140]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80048ba:	f7fc fe3a 	bl	8001532 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	019a      	lsls	r2, r3, #6
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	041b      	lsls	r3, r3, #16
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	061b      	lsls	r3, r3, #24
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	071b      	lsls	r3, r3, #28
 80048da:	491a      	ldr	r1, [pc, #104]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048e2:	4b18      	ldr	r3, [pc, #96]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a17      	ldr	r2, [pc, #92]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ee:	f7fd fbb9 	bl	8002064 <HAL_GetTick>
 80048f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048f4:	e008      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048f6:	f7fd fbb5 	bl	8002064 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b64      	cmp	r3, #100	; 0x64
 8004902:	d901      	bls.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e13c      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004908:	4b0e      	ldr	r3, [pc, #56]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f0      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	2b01      	cmp	r3, #1
 8004918:	f040 8132 	bne.w	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800491c:	4b09      	ldr	r3, [pc, #36]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a08      	ldr	r2, [pc, #32]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004922:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004926:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004928:	f7fd fb9c 	bl	8002064 <HAL_GetTick>
 800492c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800492e:	e00d      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xe90>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004930:	f7fd fb98 	bl	8002064 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b64      	cmp	r3, #100	; 0x64
 800493c:	d906      	bls.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xe90>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e11f      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 8004942:	bf00      	nop
 8004944:	40023800 	.word	0x40023800
 8004948:	08007aec 	.word	0x08007aec
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800494c:	4b8f      	ldr	r3, [pc, #572]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004958:	d0ea      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xe74>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	2b31      	cmp	r3, #49	; 0x31
 8004960:	d904      	bls.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xeb0>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800496a:	d904      	bls.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xeba>
 800496c:	f240 2146 	movw	r1, #582	; 0x246
 8004970:	4887      	ldr	r0, [pc, #540]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004972:	f7fc fdde 	bl	8001532 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xece>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004986:	2b00      	cmp	r3, #0
 8004988:	d009      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xee2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004992:	2b00      	cmp	r3, #0
 8004994:	d048      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	2b00      	cmp	r3, #0
 800499c:	d144      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d903      	bls.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xef2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	2b0f      	cmp	r3, #15
 80049ac:	d904      	bls.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xefc>
 80049ae:	f240 214d 	movw	r1, #589	; 0x24d
 80049b2:	4877      	ldr	r0, [pc, #476]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 80049b4:	f7fc fdbd 	bl	8001532 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	d904      	bls.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80049c8:	f240 214f 	movw	r1, #591	; 0x24f
 80049cc:	4870      	ldr	r0, [pc, #448]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 80049ce:	f7fc fdb0 	bl	8001532 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049d2:	4b6e      	ldr	r3, [pc, #440]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80049d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d8:	0c1b      	lsrs	r3, r3, #16
 80049da:	f003 0303 	and.w	r3, r3, #3
 80049de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049e0:	4b6a      	ldr	r3, [pc, #424]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80049e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e6:	0f1b      	lsrs	r3, r3, #28
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	019a      	lsls	r2, r3, #6
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	041b      	lsls	r3, r3, #16
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	061b      	lsls	r3, r3, #24
 8004a00:	431a      	orrs	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	071b      	lsls	r3, r3, #28
 8004a06:	4961      	ldr	r1, [pc, #388]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a0e:	4b5f      	ldr	r3, [pc, #380]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a14:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	021b      	lsls	r3, r3, #8
 8004a20:	495a      	ldr	r1, [pc, #360]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d037      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a3c:	d132      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d010      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d00c      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d008      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	2b03      	cmp	r3, #3
 8004a5c:	d004      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004a5e:	f240 2162 	movw	r1, #610	; 0x262
 8004a62:	484b      	ldr	r0, [pc, #300]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004a64:	f7fc fd65 	bl	8001532 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a68:	4b48      	ldr	r3, [pc, #288]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6e:	0e1b      	lsrs	r3, r3, #24
 8004a70:	f003 030f 	and.w	r3, r3, #15
 8004a74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a76:	4b45      	ldr	r3, [pc, #276]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7c:	0f1b      	lsrs	r3, r3, #28
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	019a      	lsls	r2, r3, #6
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	041b      	lsls	r3, r3, #16
 8004a90:	431a      	orrs	r2, r3
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	061b      	lsls	r3, r3, #24
 8004a96:	431a      	orrs	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	071b      	lsls	r3, r3, #28
 8004a9c:	493b      	ldr	r1, [pc, #236]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d04d      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1090>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d903      	bls.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1004>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	2b07      	cmp	r3, #7
 8004abe:	d904      	bls.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x100e>
 8004ac0:	f240 2171 	movw	r1, #625	; 0x271
 8004ac4:	4832      	ldr	r0, [pc, #200]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004ac6:	f7fc fd34 	bl	8001532 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d013      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ada:	d00e      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ae4:	d009      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004aee:	d004      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8004af0:	f240 2172 	movw	r1, #626	; 0x272
 8004af4:	4826      	ldr	r0, [pc, #152]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004af6:	f7fc fd1c 	bl	8001532 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004afa:	4b24      	ldr	r3, [pc, #144]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b00:	0e1b      	lsrs	r3, r3, #24
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b08:	4b20      	ldr	r3, [pc, #128]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0e:	0c1b      	lsrs	r3, r3, #16
 8004b10:	f003 0303 	and.w	r3, r3, #3
 8004b14:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	019a      	lsls	r2, r3, #6
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	041b      	lsls	r3, r3, #16
 8004b20:	431a      	orrs	r2, r3
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	061b      	lsls	r3, r3, #24
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	071b      	lsls	r3, r3, #28
 8004b2e:	4917      	ldr	r1, [pc, #92]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b36:	4b15      	ldr	r3, [pc, #84]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	4911      	ldr	r1, [pc, #68]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b4c:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a0e      	ldr	r2, [pc, #56]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b58:	f7fd fa84 	bl	8002064 <HAL_GetTick>
 8004b5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b60:	f7fd fa80 	bl	8002064 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b64      	cmp	r3, #100	; 0x64
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e007      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b72:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b7e:	d1ef      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
      }
    }
  }
  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3720      	adds	r7, #32
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	08007aec 	.word	0x08007aec

08004b94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e199      	b.n	8004eda <HAL_SPI_Init+0x346>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a94      	ldr	r2, [pc, #592]	; (8004dfc <HAL_SPI_Init+0x268>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d01d      	beq.n	8004bec <HAL_SPI_Init+0x58>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a92      	ldr	r2, [pc, #584]	; (8004e00 <HAL_SPI_Init+0x26c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d018      	beq.n	8004bec <HAL_SPI_Init+0x58>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a91      	ldr	r2, [pc, #580]	; (8004e04 <HAL_SPI_Init+0x270>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d013      	beq.n	8004bec <HAL_SPI_Init+0x58>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a8f      	ldr	r2, [pc, #572]	; (8004e08 <HAL_SPI_Init+0x274>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00e      	beq.n	8004bec <HAL_SPI_Init+0x58>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a8e      	ldr	r2, [pc, #568]	; (8004e0c <HAL_SPI_Init+0x278>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d009      	beq.n	8004bec <HAL_SPI_Init+0x58>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a8c      	ldr	r2, [pc, #560]	; (8004e10 <HAL_SPI_Init+0x27c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d004      	beq.n	8004bec <HAL_SPI_Init+0x58>
 8004be2:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004be6:	488b      	ldr	r0, [pc, #556]	; (8004e14 <HAL_SPI_Init+0x280>)
 8004be8:	f7fc fca3 	bl	8001532 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d009      	beq.n	8004c08 <HAL_SPI_Init+0x74>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bfc:	d004      	beq.n	8004c08 <HAL_SPI_Init+0x74>
 8004bfe:	f240 1145 	movw	r1, #325	; 0x145
 8004c02:	4884      	ldr	r0, [pc, #528]	; (8004e14 <HAL_SPI_Init+0x280>)
 8004c04:	f7fc fc95 	bl	8001532 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00e      	beq.n	8004c2e <HAL_SPI_Init+0x9a>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c18:	d009      	beq.n	8004c2e <HAL_SPI_Init+0x9a>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c22:	d004      	beq.n	8004c2e <HAL_SPI_Init+0x9a>
 8004c24:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004c28:	487a      	ldr	r0, [pc, #488]	; (8004e14 <HAL_SPI_Init+0x280>)
 8004c2a:	f7fc fc82 	bl	8001532 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c36:	d040      	beq.n	8004cba <HAL_SPI_Init+0x126>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8004c40:	d03b      	beq.n	8004cba <HAL_SPI_Init+0x126>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004c4a:	d036      	beq.n	8004cba <HAL_SPI_Init+0x126>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c54:	d031      	beq.n	8004cba <HAL_SPI_Init+0x126>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004c5e:	d02c      	beq.n	8004cba <HAL_SPI_Init+0x126>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004c68:	d027      	beq.n	8004cba <HAL_SPI_Init+0x126>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004c72:	d022      	beq.n	8004cba <HAL_SPI_Init+0x126>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c7c:	d01d      	beq.n	8004cba <HAL_SPI_Init+0x126>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c86:	d018      	beq.n	8004cba <HAL_SPI_Init+0x126>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c90:	d013      	beq.n	8004cba <HAL_SPI_Init+0x126>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004c9a:	d00e      	beq.n	8004cba <HAL_SPI_Init+0x126>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca4:	d009      	beq.n	8004cba <HAL_SPI_Init+0x126>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cae:	d004      	beq.n	8004cba <HAL_SPI_Init+0x126>
 8004cb0:	f240 1147 	movw	r1, #327	; 0x147
 8004cb4:	4857      	ldr	r0, [pc, #348]	; (8004e14 <HAL_SPI_Init+0x280>)
 8004cb6:	f7fc fc3c 	bl	8001532 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cc2:	d00d      	beq.n	8004ce0 <HAL_SPI_Init+0x14c>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d009      	beq.n	8004ce0 <HAL_SPI_Init+0x14c>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004cd4:	d004      	beq.n	8004ce0 <HAL_SPI_Init+0x14c>
 8004cd6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004cda:	484e      	ldr	r0, [pc, #312]	; (8004e14 <HAL_SPI_Init+0x280>)
 8004cdc:	f7fc fc29 	bl	8001532 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d008      	beq.n	8004cfa <HAL_SPI_Init+0x166>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d004      	beq.n	8004cfa <HAL_SPI_Init+0x166>
 8004cf0:	f240 1149 	movw	r1, #329	; 0x149
 8004cf4:	4847      	ldr	r0, [pc, #284]	; (8004e14 <HAL_SPI_Init+0x280>)
 8004cf6:	f7fc fc1c 	bl	8001532 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d020      	beq.n	8004d44 <HAL_SPI_Init+0x1b0>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	2b08      	cmp	r3, #8
 8004d08:	d01c      	beq.n	8004d44 <HAL_SPI_Init+0x1b0>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	2b10      	cmp	r3, #16
 8004d10:	d018      	beq.n	8004d44 <HAL_SPI_Init+0x1b0>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	2b18      	cmp	r3, #24
 8004d18:	d014      	beq.n	8004d44 <HAL_SPI_Init+0x1b0>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	2b20      	cmp	r3, #32
 8004d20:	d010      	beq.n	8004d44 <HAL_SPI_Init+0x1b0>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	2b28      	cmp	r3, #40	; 0x28
 8004d28:	d00c      	beq.n	8004d44 <HAL_SPI_Init+0x1b0>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	2b30      	cmp	r3, #48	; 0x30
 8004d30:	d008      	beq.n	8004d44 <HAL_SPI_Init+0x1b0>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	2b38      	cmp	r3, #56	; 0x38
 8004d38:	d004      	beq.n	8004d44 <HAL_SPI_Init+0x1b0>
 8004d3a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004d3e:	4835      	ldr	r0, [pc, #212]	; (8004e14 <HAL_SPI_Init+0x280>)
 8004d40:	f7fc fbf7 	bl	8001532 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d008      	beq.n	8004d5e <HAL_SPI_Init+0x1ca>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	2b80      	cmp	r3, #128	; 0x80
 8004d52:	d004      	beq.n	8004d5e <HAL_SPI_Init+0x1ca>
 8004d54:	f240 114b 	movw	r1, #331	; 0x14b
 8004d58:	482e      	ldr	r0, [pc, #184]	; (8004e14 <HAL_SPI_Init+0x280>)
 8004d5a:	f7fc fbea 	bl	8001532 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d008      	beq.n	8004d78 <HAL_SPI_Init+0x1e4>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	2b10      	cmp	r3, #16
 8004d6c:	d004      	beq.n	8004d78 <HAL_SPI_Init+0x1e4>
 8004d6e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004d72:	4828      	ldr	r0, [pc, #160]	; (8004e14 <HAL_SPI_Init+0x280>)
 8004d74:	f7fc fbdd 	bl	8001532 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d119      	bne.n	8004db4 <HAL_SPI_Init+0x220>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d008      	beq.n	8004d9a <HAL_SPI_Init+0x206>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d004      	beq.n	8004d9a <HAL_SPI_Init+0x206>
 8004d90:	f240 114f 	movw	r1, #335	; 0x14f
 8004d94:	481f      	ldr	r0, [pc, #124]	; (8004e14 <HAL_SPI_Init+0x280>)
 8004d96:	f7fc fbcc 	bl	8001532 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d008      	beq.n	8004db4 <HAL_SPI_Init+0x220>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d004      	beq.n	8004db4 <HAL_SPI_Init+0x220>
 8004daa:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004dae:	4819      	ldr	r0, [pc, #100]	; (8004e14 <HAL_SPI_Init+0x280>)
 8004db0:	f7fc fbbf 	bl	8001532 <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d106      	bne.n	8004dd4 <HAL_SPI_Init+0x240>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fc fcf0 	bl	80017b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004df4:	d910      	bls.n	8004e18 <HAL_SPI_Init+0x284>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004df6:	2300      	movs	r3, #0
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	e010      	b.n	8004e1e <HAL_SPI_Init+0x28a>
 8004dfc:	40013000 	.word	0x40013000
 8004e00:	40003800 	.word	0x40003800
 8004e04:	40003c00 	.word	0x40003c00
 8004e08:	40013400 	.word	0x40013400
 8004e0c:	40015000 	.word	0x40015000
 8004e10:	40015400 	.word	0x40015400
 8004e14:	08007b28 	.word	0x08007b28
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e1c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e26:	d007      	beq.n	8004e38 <HAL_SPI_Init+0x2a4>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e30:	d002      	beq.n	8004e38 <HAL_SPI_Init+0x2a4>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10b      	bne.n	8004e58 <HAL_SPI_Init+0x2c4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e48:	d903      	bls.n	8004e52 <HAL_SPI_Init+0x2be>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	631a      	str	r2, [r3, #48]	; 0x30
 8004e50:	e002      	b.n	8004e58 <HAL_SPI_Init+0x2c4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	ea42 0103 	orr.w	r1, r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	0c1b      	lsrs	r3, r3, #16
 8004e98:	f003 0204 	and.w	r2, r3, #4
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	ea42 0103 	orr.w	r1, r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69da      	ldr	r2, [r3, #28]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ec8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop

08004ee4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	603b      	str	r3, [r7, #0]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d009      	beq.n	8004f14 <HAL_SPI_Transmit+0x30>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f08:	d004      	beq.n	8004f14 <HAL_SPI_Transmit+0x30>
 8004f0a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8004f0e:	4895      	ldr	r0, [pc, #596]	; (8005164 <HAL_SPI_Transmit+0x280>)
 8004f10:	f7fc fb0f 	bl	8001532 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d101      	bne.n	8004f22 <HAL_SPI_Transmit+0x3e>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e152      	b.n	80051c8 <HAL_SPI_Transmit+0x2e4>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f2a:	f7fd f89b 	bl	8002064 <HAL_GetTick>
 8004f2e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f30:	88fb      	ldrh	r3, [r7, #6]
 8004f32:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d002      	beq.n	8004f46 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8004f40:	2302      	movs	r3, #2
 8004f42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f44:	e137      	b.n	80051b6 <HAL_SPI_Transmit+0x2d2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <HAL_SPI_Transmit+0x6e>
 8004f4c:	88fb      	ldrh	r3, [r7, #6]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d102      	bne.n	8004f58 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f56:	e12e      	b.n	80051b6 <HAL_SPI_Transmit+0x2d2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2203      	movs	r2, #3
 8004f5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	88fa      	ldrh	r2, [r7, #6]
 8004f70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	88fa      	ldrh	r2, [r7, #6]
 8004f76:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fa2:	d107      	bne.n	8004fb4 <HAL_SPI_Transmit+0xd0>
  {
    SPI_1LINE_TX(hspi);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fb2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbe:	2b40      	cmp	r3, #64	; 0x40
 8004fc0:	d007      	beq.n	8004fd2 <HAL_SPI_Transmit+0xee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fda:	d94b      	bls.n	8005074 <HAL_SPI_Transmit+0x190>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <HAL_SPI_Transmit+0x106>
 8004fe4:	8afb      	ldrh	r3, [r7, #22]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d13e      	bne.n	8005068 <HAL_SPI_Transmit+0x184>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fee:	881a      	ldrh	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffa:	1c9a      	adds	r2, r3, #2
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005004:	b29b      	uxth	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800500e:	e02b      	b.n	8005068 <HAL_SPI_Transmit+0x184>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b02      	cmp	r3, #2
 800501c:	d112      	bne.n	8005044 <HAL_SPI_Transmit+0x160>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005022:	881a      	ldrh	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502e:	1c9a      	adds	r2, r3, #2
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005038:	b29b      	uxth	r3, r3
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005042:	e011      	b.n	8005068 <HAL_SPI_Transmit+0x184>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005044:	f7fd f80e 	bl	8002064 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	429a      	cmp	r2, r3
 8005052:	d803      	bhi.n	800505c <HAL_SPI_Transmit+0x178>
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505a:	d102      	bne.n	8005062 <HAL_SPI_Transmit+0x17e>
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d102      	bne.n	8005068 <HAL_SPI_Transmit+0x184>
        {
          errorcode = HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005066:	e0a6      	b.n	80051b6 <HAL_SPI_Transmit+0x2d2>
    while (hspi->TxXferCount > 0U)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800506c:	b29b      	uxth	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1ce      	bne.n	8005010 <HAL_SPI_Transmit+0x12c>
 8005072:	e07e      	b.n	8005172 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <HAL_SPI_Transmit+0x19e>
 800507c:	8afb      	ldrh	r3, [r7, #22]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d172      	bne.n	8005168 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005086:	b29b      	uxth	r3, r3
 8005088:	2b01      	cmp	r3, #1
 800508a:	d912      	bls.n	80050b2 <HAL_SPI_Transmit+0x1ce>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005090:	881a      	ldrh	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509c:	1c9a      	adds	r2, r3, #2
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b02      	subs	r3, #2
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050b0:	e05a      	b.n	8005168 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	330c      	adds	r3, #12
 80050bc:	7812      	ldrb	r2, [r2, #0]
 80050be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80050d8:	e046      	b.n	8005168 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d12b      	bne.n	8005140 <HAL_SPI_Transmit+0x25c>
      {
        if (hspi->TxXferCount > 1U)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d912      	bls.n	8005118 <HAL_SPI_Transmit+0x234>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f6:	881a      	ldrh	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005102:	1c9a      	adds	r2, r3, #2
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800510c:	b29b      	uxth	r3, r3
 800510e:	3b02      	subs	r3, #2
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005116:	e027      	b.n	8005168 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	330c      	adds	r3, #12
 8005122:	7812      	ldrb	r2, [r2, #0]
 8005124:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005134:	b29b      	uxth	r3, r3
 8005136:	3b01      	subs	r3, #1
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800513e:	e013      	b.n	8005168 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005140:	f7fc ff90 	bl	8002064 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d803      	bhi.n	8005158 <HAL_SPI_Transmit+0x274>
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005156:	d102      	bne.n	800515e <HAL_SPI_Transmit+0x27a>
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d104      	bne.n	8005168 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005162:	e028      	b.n	80051b6 <HAL_SPI_Transmit+0x2d2>
 8005164:	08007b28 	.word	0x08007b28
    while (hspi->TxXferCount > 0U)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1b3      	bne.n	80050da <HAL_SPI_Transmit+0x1f6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	6839      	ldr	r1, [r7, #0]
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f000 fdbe 	bl	8005cf8 <SPI_EndRxTxTransaction>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2220      	movs	r2, #32
 8005186:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10a      	bne.n	80051a6 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005190:	2300      	movs	r3, #0
 8005192:	613b      	str	r3, [r7, #16]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	613b      	str	r3, [r7, #16]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	613b      	str	r3, [r7, #16]
 80051a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	77fb      	strb	r3, [r7, #31]
 80051b2:	e000      	b.n	80051b6 <HAL_SPI_Transmit+0x2d2>
  }

error:
 80051b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80051c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3720      	adds	r7, #32
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b088      	sub	sp, #32
 80051d4:	af02      	add	r7, sp, #8
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	603b      	str	r3, [r7, #0]
 80051dc:	4613      	mov	r3, r2
 80051de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ec:	d112      	bne.n	8005214 <HAL_SPI_Receive+0x44>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10e      	bne.n	8005214 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2204      	movs	r2, #4
 80051fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80051fe:	88fa      	ldrh	r2, [r7, #6]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	4613      	mov	r3, r2
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	68b9      	ldr	r1, [r7, #8]
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 f908 	bl	8005420 <HAL_SPI_TransmitReceive>
 8005210:	4603      	mov	r3, r0
 8005212:	e101      	b.n	8005418 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800521a:	2b01      	cmp	r3, #1
 800521c:	d101      	bne.n	8005222 <HAL_SPI_Receive+0x52>
 800521e:	2302      	movs	r3, #2
 8005220:	e0fa      	b.n	8005418 <HAL_SPI_Receive+0x248>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800522a:	f7fc ff1b 	bl	8002064 <HAL_GetTick>
 800522e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b01      	cmp	r3, #1
 800523a:	d002      	beq.n	8005242 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800523c:	2302      	movs	r3, #2
 800523e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005240:	e0e1      	b.n	8005406 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d002      	beq.n	800524e <HAL_SPI_Receive+0x7e>
 8005248:	88fb      	ldrh	r3, [r7, #6]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d102      	bne.n	8005254 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005252:	e0d8      	b.n	8005406 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2204      	movs	r2, #4
 8005258:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	88fa      	ldrh	r2, [r7, #6]
 800526c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	88fa      	ldrh	r2, [r7, #6]
 8005274:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800529e:	d908      	bls.n	80052b2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052ae:	605a      	str	r2, [r3, #4]
 80052b0:	e007      	b.n	80052c2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052c0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ca:	d107      	bne.n	80052dc <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052da:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e6:	2b40      	cmp	r3, #64	; 0x40
 80052e8:	d007      	beq.n	80052fa <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052f8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005302:	d867      	bhi.n	80053d4 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005304:	e030      	b.n	8005368 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b01      	cmp	r3, #1
 8005312:	d117      	bne.n	8005344 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f103 020c 	add.w	r2, r3, #12
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005320:	7812      	ldrb	r2, [r2, #0]
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005336:	b29b      	uxth	r3, r3
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005342:	e011      	b.n	8005368 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005344:	f7fc fe8e 	bl	8002064 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d803      	bhi.n	800535c <HAL_SPI_Receive+0x18c>
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535a:	d102      	bne.n	8005362 <HAL_SPI_Receive+0x192>
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d102      	bne.n	8005368 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005366:	e04e      	b.n	8005406 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1c8      	bne.n	8005306 <HAL_SPI_Receive+0x136>
 8005374:	e034      	b.n	80053e0 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b01      	cmp	r3, #1
 8005382:	d115      	bne.n	80053b0 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68da      	ldr	r2, [r3, #12]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	b292      	uxth	r2, r2
 8005390:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	1c9a      	adds	r2, r3, #2
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80053ae:	e011      	b.n	80053d4 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053b0:	f7fc fe58 	bl	8002064 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d803      	bhi.n	80053c8 <HAL_SPI_Receive+0x1f8>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c6:	d102      	bne.n	80053ce <HAL_SPI_Receive+0x1fe>
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d102      	bne.n	80053d4 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80053d2:	e018      	b.n	8005406 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053da:	b29b      	uxth	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1ca      	bne.n	8005376 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	6839      	ldr	r1, [r7, #0]
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 fc2f 	bl	8005c48 <SPI_EndRxTransaction>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d002      	beq.n	80053f6 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2220      	movs	r2, #32
 80053f4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d002      	beq.n	8005404 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	75fb      	strb	r3, [r7, #23]
 8005402:	e000      	b.n	8005406 <HAL_SPI_Receive+0x236>
  }

error :
 8005404:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005416:	7dfb      	ldrb	r3, [r7, #23]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08a      	sub	sp, #40	; 0x28
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800542e:	2301      	movs	r3, #1
 8005430:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d004      	beq.n	800544a <HAL_SPI_TransmitReceive+0x2a>
 8005440:	f240 41bf 	movw	r1, #1215	; 0x4bf
 8005444:	4895      	ldr	r0, [pc, #596]	; (800569c <HAL_SPI_TransmitReceive+0x27c>)
 8005446:	f7fc f874 	bl	8001532 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005450:	2b01      	cmp	r3, #1
 8005452:	d101      	bne.n	8005458 <HAL_SPI_TransmitReceive+0x38>
 8005454:	2302      	movs	r3, #2
 8005456:	e1fd      	b.n	8005854 <HAL_SPI_TransmitReceive+0x434>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005460:	f7fc fe00 	bl	8002064 <HAL_GetTick>
 8005464:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800546c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005474:	887b      	ldrh	r3, [r7, #2]
 8005476:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005478:	887b      	ldrh	r3, [r7, #2]
 800547a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800547c:	7efb      	ldrb	r3, [r7, #27]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d00e      	beq.n	80054a0 <HAL_SPI_TransmitReceive+0x80>
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005488:	d106      	bne.n	8005498 <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d102      	bne.n	8005498 <HAL_SPI_TransmitReceive+0x78>
 8005492:	7efb      	ldrb	r3, [r7, #27]
 8005494:	2b04      	cmp	r3, #4
 8005496:	d003      	beq.n	80054a0 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 8005498:	2302      	movs	r3, #2
 800549a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800549e:	e1cf      	b.n	8005840 <HAL_SPI_TransmitReceive+0x420>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d005      	beq.n	80054b2 <HAL_SPI_TransmitReceive+0x92>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d002      	beq.n	80054b2 <HAL_SPI_TransmitReceive+0x92>
 80054ac:	887b      	ldrh	r3, [r7, #2]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d103      	bne.n	80054ba <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80054b8:	e1c2      	b.n	8005840 <HAL_SPI_TransmitReceive+0x420>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b04      	cmp	r3, #4
 80054c4:	d003      	beq.n	80054ce <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2205      	movs	r2, #5
 80054ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	887a      	ldrh	r2, [r7, #2]
 80054de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	887a      	ldrh	r2, [r7, #2]
 80054e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	887a      	ldrh	r2, [r7, #2]
 80054f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	887a      	ldrh	r2, [r7, #2]
 80054fa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005510:	d802      	bhi.n	8005518 <HAL_SPI_TransmitReceive+0xf8>
 8005512:	8a3b      	ldrh	r3, [r7, #16]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d908      	bls.n	800552a <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005526:	605a      	str	r2, [r3, #4]
 8005528:	e007      	b.n	800553a <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005538:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005544:	2b40      	cmp	r3, #64	; 0x40
 8005546:	d007      	beq.n	8005558 <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005556:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005560:	d97c      	bls.n	800565c <HAL_SPI_TransmitReceive+0x23c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d002      	beq.n	8005570 <HAL_SPI_TransmitReceive+0x150>
 800556a:	8a7b      	ldrh	r3, [r7, #18]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d169      	bne.n	8005644 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005574:	881a      	ldrh	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	1c9a      	adds	r2, r3, #2
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005594:	e056      	b.n	8005644 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d11b      	bne.n	80055dc <HAL_SPI_TransmitReceive+0x1bc>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d016      	beq.n	80055dc <HAL_SPI_TransmitReceive+0x1bc>
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d113      	bne.n	80055dc <HAL_SPI_TransmitReceive+0x1bc>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b8:	881a      	ldrh	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	1c9a      	adds	r2, r3, #2
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d11c      	bne.n	8005624 <HAL_SPI_TransmitReceive+0x204>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d016      	beq.n	8005624 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005600:	b292      	uxth	r2, r2
 8005602:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005608:	1c9a      	adds	r2, r3, #2
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005614:	b29b      	uxth	r3, r3
 8005616:	3b01      	subs	r3, #1
 8005618:	b29a      	uxth	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005620:	2301      	movs	r3, #1
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005624:	f7fc fd1e 	bl	8002064 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005630:	429a      	cmp	r2, r3
 8005632:	d807      	bhi.n	8005644 <HAL_SPI_TransmitReceive+0x224>
 8005634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563a:	d003      	beq.n	8005644 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005642:	e0fd      	b.n	8005840 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005648:	b29b      	uxth	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1a3      	bne.n	8005596 <HAL_SPI_TransmitReceive+0x176>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d19d      	bne.n	8005596 <HAL_SPI_TransmitReceive+0x176>
 800565a:	e0e1      	b.n	8005820 <HAL_SPI_TransmitReceive+0x400>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <HAL_SPI_TransmitReceive+0x24c>
 8005664:	8a7b      	ldrh	r3, [r7, #18]
 8005666:	2b01      	cmp	r3, #1
 8005668:	f040 80cd 	bne.w	8005806 <HAL_SPI_TransmitReceive+0x3e6>
    {
      if (hspi->TxXferCount > 1U)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005670:	b29b      	uxth	r3, r3
 8005672:	2b01      	cmp	r3, #1
 8005674:	d914      	bls.n	80056a0 <HAL_SPI_TransmitReceive+0x280>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567a:	881a      	ldrh	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	1c9a      	adds	r2, r3, #2
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005690:	b29b      	uxth	r3, r3
 8005692:	3b02      	subs	r3, #2
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	87da      	strh	r2, [r3, #62]	; 0x3e
 800569a:	e0b4      	b.n	8005806 <HAL_SPI_TransmitReceive+0x3e6>
 800569c:	08007b28 	.word	0x08007b28
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	330c      	adds	r3, #12
 80056aa:	7812      	ldrb	r2, [r2, #0]
 80056ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056bc:	b29b      	uxth	r3, r3
 80056be:	3b01      	subs	r3, #1
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056c6:	e09e      	b.n	8005806 <HAL_SPI_TransmitReceive+0x3e6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d134      	bne.n	8005740 <HAL_SPI_TransmitReceive+0x320>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056da:	b29b      	uxth	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d02f      	beq.n	8005740 <HAL_SPI_TransmitReceive+0x320>
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d12c      	bne.n	8005740 <HAL_SPI_TransmitReceive+0x320>
      {
        if (hspi->TxXferCount > 1U)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d912      	bls.n	8005716 <HAL_SPI_TransmitReceive+0x2f6>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f4:	881a      	ldrh	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005700:	1c9a      	adds	r2, r3, #2
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800570a:	b29b      	uxth	r3, r3
 800570c:	3b02      	subs	r3, #2
 800570e:	b29a      	uxth	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005714:	e012      	b.n	800573c <HAL_SPI_TransmitReceive+0x31c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	330c      	adds	r3, #12
 8005720:	7812      	ldrb	r2, [r2, #0]
 8005722:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b01      	subs	r3, #1
 8005736:	b29a      	uxth	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b01      	cmp	r3, #1
 800574c:	d148      	bne.n	80057e0 <HAL_SPI_TransmitReceive+0x3c0>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d042      	beq.n	80057e0 <HAL_SPI_TransmitReceive+0x3c0>
      {
        if (hspi->RxXferCount > 1U)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005760:	b29b      	uxth	r3, r3
 8005762:	2b01      	cmp	r3, #1
 8005764:	d923      	bls.n	80057ae <HAL_SPI_TransmitReceive+0x38e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005770:	b292      	uxth	r2, r2
 8005772:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005778:	1c9a      	adds	r2, r3, #2
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005784:	b29b      	uxth	r3, r3
 8005786:	3b02      	subs	r3, #2
 8005788:	b29a      	uxth	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005796:	b29b      	uxth	r3, r3
 8005798:	2b01      	cmp	r3, #1
 800579a:	d81f      	bhi.n	80057dc <HAL_SPI_TransmitReceive+0x3bc>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057aa:	605a      	str	r2, [r3, #4]
 80057ac:	e016      	b.n	80057dc <HAL_SPI_TransmitReceive+0x3bc>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f103 020c 	add.w	r2, r3, #12
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	7812      	ldrb	r2, [r2, #0]
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	3b01      	subs	r3, #1
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057dc:	2301      	movs	r3, #1
 80057de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80057e0:	f7fc fc40 	bl	8002064 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d803      	bhi.n	80057f8 <HAL_SPI_TransmitReceive+0x3d8>
 80057f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f6:	d102      	bne.n	80057fe <HAL_SPI_TransmitReceive+0x3de>
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d103      	bne.n	8005806 <HAL_SPI_TransmitReceive+0x3e6>
      {
        errorcode = HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005804:	e01c      	b.n	8005840 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800580a:	b29b      	uxth	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	f47f af5b 	bne.w	80056c8 <HAL_SPI_TransmitReceive+0x2a8>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	f47f af54 	bne.w	80056c8 <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005820:	69fa      	ldr	r2, [r7, #28]
 8005822:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 fa67 	bl	8005cf8 <SPI_EndRxTxTransaction>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d006      	beq.n	800583e <HAL_SPI_TransmitReceive+0x41e>
  {
    errorcode = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2220      	movs	r2, #32
 800583a:	661a      	str	r2, [r3, #96]	; 0x60
 800583c:	e000      	b.n	8005840 <HAL_SPI_TransmitReceive+0x420>
  }

error :
 800583e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005850:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005854:	4618      	mov	r0, r3
 8005856:	3728      	adds	r7, #40	; 0x28
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b088      	sub	sp, #32
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	099b      	lsrs	r3, r3, #6
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10f      	bne.n	80058a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	099b      	lsrs	r3, r3, #6
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d004      	beq.n	80058a0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	4798      	blx	r3
    return;
 800589e:	e0d8      	b.n	8005a52 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	085b      	lsrs	r3, r3, #1
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <HAL_SPI_IRQHandler+0x66>
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	09db      	lsrs	r3, r3, #7
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d004      	beq.n	80058c2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	4798      	blx	r3
    return;
 80058c0:	e0c7      	b.n	8005a52 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	095b      	lsrs	r3, r3, #5
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10c      	bne.n	80058e8 <HAL_SPI_IRQHandler+0x8c>
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	099b      	lsrs	r3, r3, #6
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d106      	bne.n	80058e8 <HAL_SPI_IRQHandler+0x8c>
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	0a1b      	lsrs	r3, r3, #8
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 80b5 	beq.w	8005a52 <HAL_SPI_IRQHandler+0x1f6>
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	095b      	lsrs	r3, r3, #5
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 80ae 	beq.w	8005a52 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	099b      	lsrs	r3, r3, #6
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d023      	beq.n	800594a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b03      	cmp	r3, #3
 800590c:	d011      	beq.n	8005932 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005912:	f043 0204 	orr.w	r2, r3, #4
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800591a:	2300      	movs	r3, #0
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	617b      	str	r3, [r7, #20]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	617b      	str	r3, [r7, #20]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	e00b      	b.n	800594a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005932:	2300      	movs	r3, #0
 8005934:	613b      	str	r3, [r7, #16]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	613b      	str	r3, [r7, #16]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	613b      	str	r3, [r7, #16]
 8005946:	693b      	ldr	r3, [r7, #16]
        return;
 8005948:	e083      	b.n	8005a52 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	095b      	lsrs	r3, r3, #5
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d014      	beq.n	8005980 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800595a:	f043 0201 	orr.w	r2, r3, #1
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800597c:	601a      	str	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	0a1b      	lsrs	r3, r3, #8
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00c      	beq.n	80059a6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005990:	f043 0208 	orr.w	r2, r3, #8
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005998:	2300      	movs	r3, #0
 800599a:	60bb      	str	r3, [r7, #8]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	60bb      	str	r3, [r7, #8]
 80059a4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d050      	beq.n	8005a50 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059bc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d104      	bne.n	80059da <HAL_SPI_IRQHandler+0x17e>
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d034      	beq.n	8005a44 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0203 	bic.w	r2, r2, #3
 80059e8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d011      	beq.n	8005a16 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f6:	4a18      	ldr	r2, [pc, #96]	; (8005a58 <HAL_SPI_IRQHandler+0x1fc>)
 80059f8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fc fdee 	bl	80025e0 <HAL_DMA_Abort_IT>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d005      	beq.n	8005a16 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d016      	beq.n	8005a4c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a22:	4a0d      	ldr	r2, [pc, #52]	; (8005a58 <HAL_SPI_IRQHandler+0x1fc>)
 8005a24:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7fc fdd8 	bl	80025e0 <HAL_DMA_Abort_IT>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005a42:	e003      	b.n	8005a4c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f809 	bl	8005a5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005a4a:	e000      	b.n	8005a4e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005a4c:	bf00      	nop
    return;
 8005a4e:	bf00      	nop
 8005a50:	bf00      	nop
  }
}
 8005a52:	3720      	adds	r7, #32
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	08005a71 	.word	0x08005a71

08005a5c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f7ff ffe5 	bl	8005a5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a92:	bf00      	nop
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	60f8      	str	r0, [r7, #12]
 8005aa2:	60b9      	str	r1, [r7, #8]
 8005aa4:	603b      	str	r3, [r7, #0]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aaa:	e04c      	b.n	8005b46 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab2:	d048      	beq.n	8005b46 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005ab4:	f7fc fad6 	bl	8002064 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d902      	bls.n	8005aca <SPI_WaitFlagStateUntilTimeout+0x30>
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d13d      	bne.n	8005b46 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ad8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ae2:	d111      	bne.n	8005b08 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aec:	d004      	beq.n	8005af8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af6:	d107      	bne.n	8005b08 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b10:	d10f      	bne.n	8005b32 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e00f      	b.n	8005b66 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	bf0c      	ite	eq
 8005b56:	2301      	moveq	r3, #1
 8005b58:	2300      	movne	r3, #0
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	79fb      	ldrb	r3, [r7, #7]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d1a3      	bne.n	8005aac <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b084      	sub	sp, #16
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	60f8      	str	r0, [r7, #12]
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	607a      	str	r2, [r7, #4]
 8005b7a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005b7c:	e057      	b.n	8005c2e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005b84:	d106      	bne.n	8005b94 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d103      	bne.n	8005b94 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	330c      	adds	r3, #12
 8005b92:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9a:	d048      	beq.n	8005c2e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005b9c:	f7fc fa62 	bl	8002064 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d902      	bls.n	8005bb2 <SPI_WaitFifoStateUntilTimeout+0x44>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d13d      	bne.n	8005c2e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005bc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bca:	d111      	bne.n	8005bf0 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bd4:	d004      	beq.n	8005be0 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bde:	d107      	bne.n	8005bf0 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bf8:	d10f      	bne.n	8005c1a <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e008      	b.n	8005c40 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4013      	ands	r3, r2
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d19f      	bne.n	8005b7e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c5c:	d111      	bne.n	8005c82 <SPI_EndRxTransaction+0x3a>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c66:	d004      	beq.n	8005c72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c70:	d107      	bne.n	8005c82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c80:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2180      	movs	r1, #128	; 0x80
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f7ff ff04 	bl	8005a9a <SPI_WaitFlagStateUntilTimeout>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d007      	beq.n	8005ca8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c9c:	f043 0220 	orr.w	r2, r3, #32
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e023      	b.n	8005cf0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cb0:	d11d      	bne.n	8005cee <SPI_EndRxTransaction+0xa6>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cba:	d004      	beq.n	8005cc6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cc4:	d113      	bne.n	8005cee <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f7ff ff4b 	bl	8005b6e <SPI_WaitFifoStateUntilTimeout>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d007      	beq.n	8005cee <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce2:	f043 0220 	orr.w	r2, r3, #32
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e000      	b.n	8005cf0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af02      	add	r7, sp, #8
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f7ff ff2c 	bl	8005b6e <SPI_WaitFifoStateUntilTimeout>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d007      	beq.n	8005d2c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d20:	f043 0220 	orr.w	r2, r3, #32
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e027      	b.n	8005d7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	2200      	movs	r2, #0
 8005d34:	2180      	movs	r1, #128	; 0x80
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f7ff feaf 	bl	8005a9a <SPI_WaitFlagStateUntilTimeout>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d007      	beq.n	8005d52 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d46:	f043 0220 	orr.w	r2, r3, #32
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e014      	b.n	8005d7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f7ff ff05 	bl	8005b6e <SPI_WaitFifoStateUntilTimeout>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d007      	beq.n	8005d7a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d6e:	f043 0220 	orr.w	r2, r3, #32
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e000      	b.n	8005d7c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e09f      	b.n	8005ed6 <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d02d      	beq.n	8005dfa <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a4f      	ldr	r2, [pc, #316]	; (8005ee0 <HAL_UART_Init+0x15c>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d055      	beq.n	8005e54 <HAL_UART_Init+0xd0>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a4d      	ldr	r2, [pc, #308]	; (8005ee4 <HAL_UART_Init+0x160>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d050      	beq.n	8005e54 <HAL_UART_Init+0xd0>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a4c      	ldr	r2, [pc, #304]	; (8005ee8 <HAL_UART_Init+0x164>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d04b      	beq.n	8005e54 <HAL_UART_Init+0xd0>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a4a      	ldr	r2, [pc, #296]	; (8005eec <HAL_UART_Init+0x168>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d046      	beq.n	8005e54 <HAL_UART_Init+0xd0>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a49      	ldr	r2, [pc, #292]	; (8005ef0 <HAL_UART_Init+0x16c>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d041      	beq.n	8005e54 <HAL_UART_Init+0xd0>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a47      	ldr	r2, [pc, #284]	; (8005ef4 <HAL_UART_Init+0x170>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d03c      	beq.n	8005e54 <HAL_UART_Init+0xd0>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a46      	ldr	r2, [pc, #280]	; (8005ef8 <HAL_UART_Init+0x174>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d037      	beq.n	8005e54 <HAL_UART_Init+0xd0>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a44      	ldr	r2, [pc, #272]	; (8005efc <HAL_UART_Init+0x178>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d032      	beq.n	8005e54 <HAL_UART_Init+0xd0>
 8005dee:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8005df2:	4843      	ldr	r0, [pc, #268]	; (8005f00 <HAL_UART_Init+0x17c>)
 8005df4:	f7fb fb9d 	bl	8001532 <assert_failed>
 8005df8:	e02c      	b.n	8005e54 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a38      	ldr	r2, [pc, #224]	; (8005ee0 <HAL_UART_Init+0x15c>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d027      	beq.n	8005e54 <HAL_UART_Init+0xd0>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a36      	ldr	r2, [pc, #216]	; (8005ee4 <HAL_UART_Init+0x160>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d022      	beq.n	8005e54 <HAL_UART_Init+0xd0>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a35      	ldr	r2, [pc, #212]	; (8005ee8 <HAL_UART_Init+0x164>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d01d      	beq.n	8005e54 <HAL_UART_Init+0xd0>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a33      	ldr	r2, [pc, #204]	; (8005eec <HAL_UART_Init+0x168>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d018      	beq.n	8005e54 <HAL_UART_Init+0xd0>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a32      	ldr	r2, [pc, #200]	; (8005ef0 <HAL_UART_Init+0x16c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d013      	beq.n	8005e54 <HAL_UART_Init+0xd0>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a30      	ldr	r2, [pc, #192]	; (8005ef4 <HAL_UART_Init+0x170>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d00e      	beq.n	8005e54 <HAL_UART_Init+0xd0>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a2f      	ldr	r2, [pc, #188]	; (8005ef8 <HAL_UART_Init+0x174>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d009      	beq.n	8005e54 <HAL_UART_Init+0xd0>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a2d      	ldr	r2, [pc, #180]	; (8005efc <HAL_UART_Init+0x178>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d004      	beq.n	8005e54 <HAL_UART_Init+0xd0>
 8005e4a:	f240 112f 	movw	r1, #303	; 0x12f
 8005e4e:	482c      	ldr	r0, [pc, #176]	; (8005f00 <HAL_UART_Init+0x17c>)
 8005e50:	f7fb fb6f 	bl	8001532 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d106      	bne.n	8005e6a <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f7fb ff85 	bl	8001d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2224      	movs	r2, #36	; 0x24
 8005e6e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 0201 	bic.w	r2, r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fb01 	bl	8006488 <UART_SetConfig>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d101      	bne.n	8005e90 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e022      	b.n	8005ed6 <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fe31 	bl	8006b00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ebc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f042 0201 	orr.w	r2, r2, #1
 8005ecc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 ff6a 	bl	8006da8 <UART_CheckIdleState>
 8005ed4:	4603      	mov	r3, r0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	40011000 	.word	0x40011000
 8005ee4:	40004400 	.word	0x40004400
 8005ee8:	40004800 	.word	0x40004800
 8005eec:	40004c00 	.word	0x40004c00
 8005ef0:	40005000 	.word	0x40005000
 8005ef4:	40011400 	.word	0x40011400
 8005ef8:	40007800 	.word	0x40007800
 8005efc:	40007c00 	.word	0x40007c00
 8005f00:	08007b60 	.word	0x08007b60

08005f04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08a      	sub	sp, #40	; 0x28
 8005f08:	af02      	add	r7, sp, #8
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	603b      	str	r3, [r7, #0]
 8005f10:	4613      	mov	r3, r2
 8005f12:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f18:	2b20      	cmp	r3, #32
 8005f1a:	d17f      	bne.n	800601c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <HAL_UART_Transmit+0x24>
 8005f22:	88fb      	ldrh	r3, [r7, #6]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e078      	b.n	800601e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_UART_Transmit+0x36>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e071      	b.n	800601e <HAL_UART_Transmit+0x11a>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2221      	movs	r2, #33	; 0x21
 8005f4c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005f4e:	f7fc f889 	bl	8002064 <HAL_GetTick>
 8005f52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	88fa      	ldrh	r2, [r7, #6]
 8005f58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	88fa      	ldrh	r2, [r7, #6]
 8005f60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6c:	d108      	bne.n	8005f80 <HAL_UART_Transmit+0x7c>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d104      	bne.n	8005f80 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	e003      	b.n	8005f88 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005f90:	e02c      	b.n	8005fec <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	2180      	movs	r1, #128	; 0x80
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 ff48 	bl	8006e32 <UART_WaitOnFlagUntilTimeout>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e038      	b.n	800601e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10b      	bne.n	8005fca <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fc0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	3302      	adds	r3, #2
 8005fc6:	61bb      	str	r3, [r7, #24]
 8005fc8:	e007      	b.n	8005fda <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	781a      	ldrb	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1cc      	bne.n	8005f92 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	2200      	movs	r2, #0
 8006000:	2140      	movs	r1, #64	; 0x40
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 ff15 	bl	8006e32 <UART_WaitOnFlagUntilTimeout>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e005      	b.n	800601e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2220      	movs	r2, #32
 8006016:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	e000      	b.n	800601e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800601c:	2302      	movs	r3, #2
  }
}
 800601e:	4618      	mov	r0, r3
 8006020:	3720      	adds	r7, #32
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b08a      	sub	sp, #40	; 0x28
 800602a:	af02      	add	r7, sp, #8
 800602c:	60f8      	str	r0, [r7, #12]
 800602e:	60b9      	str	r1, [r7, #8]
 8006030:	603b      	str	r3, [r7, #0]
 8006032:	4613      	mov	r3, r2
 8006034:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800603a:	2b20      	cmp	r3, #32
 800603c:	f040 80ba 	bne.w	80061b4 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <HAL_UART_Receive+0x26>
 8006046:	88fb      	ldrh	r3, [r7, #6]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e0b2      	b.n	80061b6 <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006056:	2b01      	cmp	r3, #1
 8006058:	d101      	bne.n	800605e <HAL_UART_Receive+0x38>
 800605a:	2302      	movs	r3, #2
 800605c:	e0ab      	b.n	80061b6 <HAL_UART_Receive+0x190>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2222      	movs	r2, #34	; 0x22
 8006070:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006072:	f7fb fff7 	bl	8002064 <HAL_GetTick>
 8006076:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	88fa      	ldrh	r2, [r7, #6]
 800607c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	88fa      	ldrh	r2, [r7, #6]
 8006084:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006090:	d10e      	bne.n	80060b0 <HAL_UART_Receive+0x8a>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d105      	bne.n	80060a6 <HAL_UART_Receive+0x80>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f240 12ff 	movw	r2, #511	; 0x1ff
 80060a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060a4:	e02d      	b.n	8006102 <HAL_UART_Receive+0xdc>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	22ff      	movs	r2, #255	; 0xff
 80060aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060ae:	e028      	b.n	8006102 <HAL_UART_Receive+0xdc>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10d      	bne.n	80060d4 <HAL_UART_Receive+0xae>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d104      	bne.n	80060ca <HAL_UART_Receive+0xa4>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	22ff      	movs	r2, #255	; 0xff
 80060c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060c8:	e01b      	b.n	8006102 <HAL_UART_Receive+0xdc>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	227f      	movs	r2, #127	; 0x7f
 80060ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060d2:	e016      	b.n	8006102 <HAL_UART_Receive+0xdc>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060dc:	d10d      	bne.n	80060fa <HAL_UART_Receive+0xd4>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d104      	bne.n	80060f0 <HAL_UART_Receive+0xca>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	227f      	movs	r2, #127	; 0x7f
 80060ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060ee:	e008      	b.n	8006102 <HAL_UART_Receive+0xdc>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	223f      	movs	r2, #63	; 0x3f
 80060f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060f8:	e003      	b.n	8006102 <HAL_UART_Receive+0xdc>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006108:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006112:	d108      	bne.n	8006126 <HAL_UART_Receive+0x100>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d104      	bne.n	8006126 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800611c:	2300      	movs	r3, #0
 800611e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	61bb      	str	r3, [r7, #24]
 8006124:	e003      	b.n	800612e <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800612a:	2300      	movs	r3, #0
 800612c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006136:	e032      	b.n	800619e <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	2200      	movs	r2, #0
 8006140:	2120      	movs	r1, #32
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 fe75 	bl	8006e32 <UART_WaitOnFlagUntilTimeout>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e031      	b.n	80061b6 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10c      	bne.n	8006172 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615e:	b29a      	uxth	r2, r3
 8006160:	8a7b      	ldrh	r3, [r7, #18]
 8006162:	4013      	ands	r3, r2
 8006164:	b29a      	uxth	r2, r3
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	3302      	adds	r3, #2
 800616e:	61bb      	str	r3, [r7, #24]
 8006170:	e00c      	b.n	800618c <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	b2da      	uxtb	r2, r3
 800617a:	8a7b      	ldrh	r3, [r7, #18]
 800617c:	b2db      	uxtb	r3, r3
 800617e:	4013      	ands	r3, r2
 8006180:	b2da      	uxtb	r2, r3
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	3301      	adds	r3, #1
 800618a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006192:	b29b      	uxth	r3, r3
 8006194:	3b01      	subs	r3, #1
 8006196:	b29a      	uxth	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1c6      	bne.n	8006138 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2220      	movs	r2, #32
 80061ae:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	e000      	b.n	80061b6 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 80061b4:	2302      	movs	r3, #2
  }
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3720      	adds	r7, #32
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
	...

080061c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	69db      	ldr	r3, [r3, #28]
 80061ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061e0:	69fa      	ldr	r2, [r7, #28]
 80061e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80061e6:	4013      	ands	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d113      	bne.n	8006218 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	f003 0320 	and.w	r3, r3, #32
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00e      	beq.n	8006218 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	f003 0320 	and.w	r3, r3, #32
 8006200:	2b00      	cmp	r3, #0
 8006202:	d009      	beq.n	8006218 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 8114 	beq.w	8006436 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	4798      	blx	r3
      }
      return;
 8006216:	e10e      	b.n	8006436 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	2b00      	cmp	r3, #0
 800621c:	f000 80d6 	beq.w	80063cc <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b00      	cmp	r3, #0
 8006228:	d105      	bne.n	8006236 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 80cb 	beq.w	80063cc <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00e      	beq.n	800625e <HAL_UART_IRQHandler+0x9e>
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006246:	2b00      	cmp	r3, #0
 8006248:	d009      	beq.n	800625e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2201      	movs	r2, #1
 8006250:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006256:	f043 0201 	orr.w	r2, r3, #1
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00e      	beq.n	8006286 <HAL_UART_IRQHandler+0xc6>
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b00      	cmp	r3, #0
 8006270:	d009      	beq.n	8006286 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2202      	movs	r2, #2
 8006278:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800627e:	f043 0204 	orr.w	r2, r3, #4
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	f003 0304 	and.w	r3, r3, #4
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00e      	beq.n	80062ae <HAL_UART_IRQHandler+0xee>
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	d009      	beq.n	80062ae <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2204      	movs	r2, #4
 80062a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062a6:	f043 0202 	orr.w	r2, r3, #2
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	f003 0308 	and.w	r3, r3, #8
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d013      	beq.n	80062e0 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d104      	bne.n	80062cc <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d009      	beq.n	80062e0 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2208      	movs	r2, #8
 80062d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062d8:	f043 0208 	orr.w	r2, r3, #8
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00f      	beq.n	800630a <HAL_UART_IRQHandler+0x14a>
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00a      	beq.n	800630a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006302:	f043 0220 	orr.w	r2, r3, #32
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800630e:	2b00      	cmp	r3, #0
 8006310:	f000 8093 	beq.w	800643a <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00c      	beq.n	8006338 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	f003 0320 	and.w	r3, r3, #32
 8006324:	2b00      	cmp	r3, #0
 8006326:	d007      	beq.n	8006338 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800632c:	2b00      	cmp	r3, #0
 800632e:	d003      	beq.n	8006338 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800633c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006348:	2b40      	cmp	r3, #64	; 0x40
 800634a:	d004      	beq.n	8006356 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006352:	2b00      	cmp	r3, #0
 8006354:	d031      	beq.n	80063ba <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fde6 	bl	8006f28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006366:	2b40      	cmp	r3, #64	; 0x40
 8006368:	d123      	bne.n	80063b2 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689a      	ldr	r2, [r3, #8]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006378:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800637e:	2b00      	cmp	r3, #0
 8006380:	d013      	beq.n	80063aa <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006386:	4a30      	ldr	r2, [pc, #192]	; (8006448 <HAL_UART_IRQHandler+0x288>)
 8006388:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800638e:	4618      	mov	r0, r3
 8006390:	f7fc f926 	bl	80025e0 <HAL_DMA_Abort_IT>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d016      	beq.n	80063c8 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800639e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80063a4:	4610      	mov	r0, r2
 80063a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a8:	e00e      	b.n	80063c8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f858 	bl	8006460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b0:	e00a      	b.n	80063c8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f854 	bl	8006460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b8:	e006      	b.n	80063c8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f850 	bl	8006460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80063c6:	e038      	b.n	800643a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c8:	bf00      	nop
    return;
 80063ca:	e036      	b.n	800643a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00d      	beq.n	80063f2 <HAL_UART_IRQHandler+0x232>
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d008      	beq.n	80063f2 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80063e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f842 	bl	8006474 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063f0:	e026      	b.n	8006440 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00d      	beq.n	8006418 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006402:	2b00      	cmp	r3, #0
 8006404:	d008      	beq.n	8006418 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800640a:	2b00      	cmp	r3, #0
 800640c:	d017      	beq.n	800643e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	4798      	blx	r3
    }
    return;
 8006416:	e012      	b.n	800643e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00e      	beq.n	8006440 <HAL_UART_IRQHandler+0x280>
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006428:	2b00      	cmp	r3, #0
 800642a:	d009      	beq.n	8006440 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fdb1 	bl	8006f94 <UART_EndTransmit_IT>
    return;
 8006432:	bf00      	nop
 8006434:	e004      	b.n	8006440 <HAL_UART_IRQHandler+0x280>
      return;
 8006436:	bf00      	nop
 8006438:	e002      	b.n	8006440 <HAL_UART_IRQHandler+0x280>
    return;
 800643a:	bf00      	nop
 800643c:	e000      	b.n	8006440 <HAL_UART_IRQHandler+0x280>
    return;
 800643e:	bf00      	nop
  }

}
 8006440:	3720      	adds	r7, #32
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	08006f69 	.word	0x08006f69

0800644c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b088      	sub	sp, #32
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006490:	2300      	movs	r3, #0
 8006492:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006494:	2300      	movs	r3, #0
 8006496:	75fb      	strb	r3, [r7, #23]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	4aaa      	ldr	r2, [pc, #680]	; (8006748 <UART_SetConfig+0x2c0>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d904      	bls.n	80064ac <UART_SetConfig+0x24>
 80064a2:	f640 21be 	movw	r1, #2750	; 0xabe
 80064a6:	48a9      	ldr	r0, [pc, #676]	; (800674c <UART_SetConfig+0x2c4>)
 80064a8:	f7fb f843 	bl	8001532 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064b4:	d00d      	beq.n	80064d2 <UART_SetConfig+0x4a>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d009      	beq.n	80064d2 <UART_SetConfig+0x4a>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064c6:	d004      	beq.n	80064d2 <UART_SetConfig+0x4a>
 80064c8:	f640 21bf 	movw	r1, #2751	; 0xabf
 80064cc:	489f      	ldr	r0, [pc, #636]	; (800674c <UART_SetConfig+0x2c4>)
 80064ce:	f7fb f830 	bl	8001532 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064da:	d012      	beq.n	8006502 <UART_SetConfig+0x7a>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00e      	beq.n	8006502 <UART_SetConfig+0x7a>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064ec:	d009      	beq.n	8006502 <UART_SetConfig+0x7a>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064f6:	d004      	beq.n	8006502 <UART_SetConfig+0x7a>
 80064f8:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 80064fc:	4893      	ldr	r0, [pc, #588]	; (800674c <UART_SetConfig+0x2c4>)
 80064fe:	f7fb f818 	bl	8001532 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d009      	beq.n	800651e <UART_SetConfig+0x96>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006512:	d004      	beq.n	800651e <UART_SetConfig+0x96>
 8006514:	f640 21c1 	movw	r1, #2753	; 0xac1
 8006518:	488c      	ldr	r0, [pc, #560]	; (800674c <UART_SetConfig+0x2c4>)
 800651a:	f7fb f80a 	bl	8001532 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00e      	beq.n	8006544 <UART_SetConfig+0xbc>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800652e:	d009      	beq.n	8006544 <UART_SetConfig+0xbc>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006538:	d004      	beq.n	8006544 <UART_SetConfig+0xbc>
 800653a:	f640 21c3 	movw	r1, #2755	; 0xac3
 800653e:	4883      	ldr	r0, [pc, #524]	; (800674c <UART_SetConfig+0x2c4>)
 8006540:	f7fa fff7 	bl	8001532 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	f023 030c 	bic.w	r3, r3, #12
 800654c:	2b00      	cmp	r3, #0
 800654e:	d103      	bne.n	8006558 <UART_SetConfig+0xd0>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d104      	bne.n	8006562 <UART_SetConfig+0xda>
 8006558:	f640 21c4 	movw	r1, #2756	; 0xac4
 800655c:	487b      	ldr	r0, [pc, #492]	; (800674c <UART_SetConfig+0x2c4>)
 800655e:	f7fa ffe8 	bl	8001532 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d013      	beq.n	8006592 <UART_SetConfig+0x10a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006572:	d00e      	beq.n	8006592 <UART_SetConfig+0x10a>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800657c:	d009      	beq.n	8006592 <UART_SetConfig+0x10a>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006586:	d004      	beq.n	8006592 <UART_SetConfig+0x10a>
 8006588:	f640 21c5 	movw	r1, #2757	; 0xac5
 800658c:	486f      	ldr	r0, [pc, #444]	; (800674c <UART_SetConfig+0x2c4>)
 800658e:	f7fa ffd0 	bl	8001532 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d009      	beq.n	80065ae <UART_SetConfig+0x126>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065a2:	d004      	beq.n	80065ae <UART_SetConfig+0x126>
 80065a4:	f640 21c6 	movw	r1, #2758	; 0xac6
 80065a8:	4868      	ldr	r0, [pc, #416]	; (800674c <UART_SetConfig+0x2c4>)
 80065aa:	f7fa ffc2 	bl	8001532 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	431a      	orrs	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	431a      	orrs	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	4b60      	ldr	r3, [pc, #384]	; (8006750 <UART_SetConfig+0x2c8>)
 80065ce:	4013      	ands	r3, r2
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	6812      	ldr	r2, [r2, #0]
 80065d4:	6939      	ldr	r1, [r7, #16]
 80065d6:	430b      	orrs	r3, r1
 80065d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68da      	ldr	r2, [r3, #12]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	430a      	orrs	r2, r1
 80065ee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	430a      	orrs	r2, r1
 8006612:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a4e      	ldr	r2, [pc, #312]	; (8006754 <UART_SetConfig+0x2cc>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d122      	bne.n	8006664 <UART_SetConfig+0x1dc>
 800661e:	4b4e      	ldr	r3, [pc, #312]	; (8006758 <UART_SetConfig+0x2d0>)
 8006620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006624:	f003 0303 	and.w	r3, r3, #3
 8006628:	2b03      	cmp	r3, #3
 800662a:	d817      	bhi.n	800665c <UART_SetConfig+0x1d4>
 800662c:	a201      	add	r2, pc, #4	; (adr r2, 8006634 <UART_SetConfig+0x1ac>)
 800662e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006632:	bf00      	nop
 8006634:	08006645 	.word	0x08006645
 8006638:	08006651 	.word	0x08006651
 800663c:	0800664b 	.word	0x0800664b
 8006640:	08006657 	.word	0x08006657
 8006644:	2301      	movs	r3, #1
 8006646:	77fb      	strb	r3, [r7, #31]
 8006648:	e14d      	b.n	80068e6 <UART_SetConfig+0x45e>
 800664a:	2302      	movs	r3, #2
 800664c:	77fb      	strb	r3, [r7, #31]
 800664e:	e14a      	b.n	80068e6 <UART_SetConfig+0x45e>
 8006650:	2304      	movs	r3, #4
 8006652:	77fb      	strb	r3, [r7, #31]
 8006654:	e147      	b.n	80068e6 <UART_SetConfig+0x45e>
 8006656:	2308      	movs	r3, #8
 8006658:	77fb      	strb	r3, [r7, #31]
 800665a:	e144      	b.n	80068e6 <UART_SetConfig+0x45e>
 800665c:	2310      	movs	r3, #16
 800665e:	77fb      	strb	r3, [r7, #31]
 8006660:	bf00      	nop
 8006662:	e140      	b.n	80068e6 <UART_SetConfig+0x45e>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a3c      	ldr	r2, [pc, #240]	; (800675c <UART_SetConfig+0x2d4>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d134      	bne.n	80066d8 <UART_SetConfig+0x250>
 800666e:	4b3a      	ldr	r3, [pc, #232]	; (8006758 <UART_SetConfig+0x2d0>)
 8006670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006674:	f003 030c 	and.w	r3, r3, #12
 8006678:	2b0c      	cmp	r3, #12
 800667a:	d829      	bhi.n	80066d0 <UART_SetConfig+0x248>
 800667c:	a201      	add	r2, pc, #4	; (adr r2, 8006684 <UART_SetConfig+0x1fc>)
 800667e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006682:	bf00      	nop
 8006684:	080066b9 	.word	0x080066b9
 8006688:	080066d1 	.word	0x080066d1
 800668c:	080066d1 	.word	0x080066d1
 8006690:	080066d1 	.word	0x080066d1
 8006694:	080066c5 	.word	0x080066c5
 8006698:	080066d1 	.word	0x080066d1
 800669c:	080066d1 	.word	0x080066d1
 80066a0:	080066d1 	.word	0x080066d1
 80066a4:	080066bf 	.word	0x080066bf
 80066a8:	080066d1 	.word	0x080066d1
 80066ac:	080066d1 	.word	0x080066d1
 80066b0:	080066d1 	.word	0x080066d1
 80066b4:	080066cb 	.word	0x080066cb
 80066b8:	2300      	movs	r3, #0
 80066ba:	77fb      	strb	r3, [r7, #31]
 80066bc:	e113      	b.n	80068e6 <UART_SetConfig+0x45e>
 80066be:	2302      	movs	r3, #2
 80066c0:	77fb      	strb	r3, [r7, #31]
 80066c2:	e110      	b.n	80068e6 <UART_SetConfig+0x45e>
 80066c4:	2304      	movs	r3, #4
 80066c6:	77fb      	strb	r3, [r7, #31]
 80066c8:	e10d      	b.n	80068e6 <UART_SetConfig+0x45e>
 80066ca:	2308      	movs	r3, #8
 80066cc:	77fb      	strb	r3, [r7, #31]
 80066ce:	e10a      	b.n	80068e6 <UART_SetConfig+0x45e>
 80066d0:	2310      	movs	r3, #16
 80066d2:	77fb      	strb	r3, [r7, #31]
 80066d4:	bf00      	nop
 80066d6:	e106      	b.n	80068e6 <UART_SetConfig+0x45e>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a20      	ldr	r2, [pc, #128]	; (8006760 <UART_SetConfig+0x2d8>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d120      	bne.n	8006724 <UART_SetConfig+0x29c>
 80066e2:	4b1d      	ldr	r3, [pc, #116]	; (8006758 <UART_SetConfig+0x2d0>)
 80066e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80066ec:	2b10      	cmp	r3, #16
 80066ee:	d00f      	beq.n	8006710 <UART_SetConfig+0x288>
 80066f0:	2b10      	cmp	r3, #16
 80066f2:	d802      	bhi.n	80066fa <UART_SetConfig+0x272>
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d005      	beq.n	8006704 <UART_SetConfig+0x27c>
 80066f8:	e010      	b.n	800671c <UART_SetConfig+0x294>
 80066fa:	2b20      	cmp	r3, #32
 80066fc:	d005      	beq.n	800670a <UART_SetConfig+0x282>
 80066fe:	2b30      	cmp	r3, #48	; 0x30
 8006700:	d009      	beq.n	8006716 <UART_SetConfig+0x28e>
 8006702:	e00b      	b.n	800671c <UART_SetConfig+0x294>
 8006704:	2300      	movs	r3, #0
 8006706:	77fb      	strb	r3, [r7, #31]
 8006708:	e0ed      	b.n	80068e6 <UART_SetConfig+0x45e>
 800670a:	2302      	movs	r3, #2
 800670c:	77fb      	strb	r3, [r7, #31]
 800670e:	e0ea      	b.n	80068e6 <UART_SetConfig+0x45e>
 8006710:	2304      	movs	r3, #4
 8006712:	77fb      	strb	r3, [r7, #31]
 8006714:	e0e7      	b.n	80068e6 <UART_SetConfig+0x45e>
 8006716:	2308      	movs	r3, #8
 8006718:	77fb      	strb	r3, [r7, #31]
 800671a:	e0e4      	b.n	80068e6 <UART_SetConfig+0x45e>
 800671c:	2310      	movs	r3, #16
 800671e:	77fb      	strb	r3, [r7, #31]
 8006720:	bf00      	nop
 8006722:	e0e0      	b.n	80068e6 <UART_SetConfig+0x45e>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a0e      	ldr	r2, [pc, #56]	; (8006764 <UART_SetConfig+0x2dc>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d131      	bne.n	8006792 <UART_SetConfig+0x30a>
 800672e:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <UART_SetConfig+0x2d0>)
 8006730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006734:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006738:	2b40      	cmp	r3, #64	; 0x40
 800673a:	d020      	beq.n	800677e <UART_SetConfig+0x2f6>
 800673c:	2b40      	cmp	r3, #64	; 0x40
 800673e:	d813      	bhi.n	8006768 <UART_SetConfig+0x2e0>
 8006740:	2b00      	cmp	r3, #0
 8006742:	d016      	beq.n	8006772 <UART_SetConfig+0x2ea>
 8006744:	e021      	b.n	800678a <UART_SetConfig+0x302>
 8006746:	bf00      	nop
 8006748:	019bfcc0 	.word	0x019bfcc0
 800674c:	08007b60 	.word	0x08007b60
 8006750:	efff69f3 	.word	0xefff69f3
 8006754:	40011000 	.word	0x40011000
 8006758:	40023800 	.word	0x40023800
 800675c:	40004400 	.word	0x40004400
 8006760:	40004800 	.word	0x40004800
 8006764:	40004c00 	.word	0x40004c00
 8006768:	2b80      	cmp	r3, #128	; 0x80
 800676a:	d005      	beq.n	8006778 <UART_SetConfig+0x2f0>
 800676c:	2bc0      	cmp	r3, #192	; 0xc0
 800676e:	d009      	beq.n	8006784 <UART_SetConfig+0x2fc>
 8006770:	e00b      	b.n	800678a <UART_SetConfig+0x302>
 8006772:	2300      	movs	r3, #0
 8006774:	77fb      	strb	r3, [r7, #31]
 8006776:	e0b6      	b.n	80068e6 <UART_SetConfig+0x45e>
 8006778:	2302      	movs	r3, #2
 800677a:	77fb      	strb	r3, [r7, #31]
 800677c:	e0b3      	b.n	80068e6 <UART_SetConfig+0x45e>
 800677e:	2304      	movs	r3, #4
 8006780:	77fb      	strb	r3, [r7, #31]
 8006782:	e0b0      	b.n	80068e6 <UART_SetConfig+0x45e>
 8006784:	2308      	movs	r3, #8
 8006786:	77fb      	strb	r3, [r7, #31]
 8006788:	e0ad      	b.n	80068e6 <UART_SetConfig+0x45e>
 800678a:	2310      	movs	r3, #16
 800678c:	77fb      	strb	r3, [r7, #31]
 800678e:	bf00      	nop
 8006790:	e0a9      	b.n	80068e6 <UART_SetConfig+0x45e>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4aaa      	ldr	r2, [pc, #680]	; (8006a40 <UART_SetConfig+0x5b8>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d124      	bne.n	80067e6 <UART_SetConfig+0x35e>
 800679c:	4ba9      	ldr	r3, [pc, #676]	; (8006a44 <UART_SetConfig+0x5bc>)
 800679e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067aa:	d012      	beq.n	80067d2 <UART_SetConfig+0x34a>
 80067ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067b0:	d802      	bhi.n	80067b8 <UART_SetConfig+0x330>
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d007      	beq.n	80067c6 <UART_SetConfig+0x33e>
 80067b6:	e012      	b.n	80067de <UART_SetConfig+0x356>
 80067b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067bc:	d006      	beq.n	80067cc <UART_SetConfig+0x344>
 80067be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067c2:	d009      	beq.n	80067d8 <UART_SetConfig+0x350>
 80067c4:	e00b      	b.n	80067de <UART_SetConfig+0x356>
 80067c6:	2300      	movs	r3, #0
 80067c8:	77fb      	strb	r3, [r7, #31]
 80067ca:	e08c      	b.n	80068e6 <UART_SetConfig+0x45e>
 80067cc:	2302      	movs	r3, #2
 80067ce:	77fb      	strb	r3, [r7, #31]
 80067d0:	e089      	b.n	80068e6 <UART_SetConfig+0x45e>
 80067d2:	2304      	movs	r3, #4
 80067d4:	77fb      	strb	r3, [r7, #31]
 80067d6:	e086      	b.n	80068e6 <UART_SetConfig+0x45e>
 80067d8:	2308      	movs	r3, #8
 80067da:	77fb      	strb	r3, [r7, #31]
 80067dc:	e083      	b.n	80068e6 <UART_SetConfig+0x45e>
 80067de:	2310      	movs	r3, #16
 80067e0:	77fb      	strb	r3, [r7, #31]
 80067e2:	bf00      	nop
 80067e4:	e07f      	b.n	80068e6 <UART_SetConfig+0x45e>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a97      	ldr	r2, [pc, #604]	; (8006a48 <UART_SetConfig+0x5c0>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d124      	bne.n	800683a <UART_SetConfig+0x3b2>
 80067f0:	4b94      	ldr	r3, [pc, #592]	; (8006a44 <UART_SetConfig+0x5bc>)
 80067f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067fe:	d012      	beq.n	8006826 <UART_SetConfig+0x39e>
 8006800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006804:	d802      	bhi.n	800680c <UART_SetConfig+0x384>
 8006806:	2b00      	cmp	r3, #0
 8006808:	d007      	beq.n	800681a <UART_SetConfig+0x392>
 800680a:	e012      	b.n	8006832 <UART_SetConfig+0x3aa>
 800680c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006810:	d006      	beq.n	8006820 <UART_SetConfig+0x398>
 8006812:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006816:	d009      	beq.n	800682c <UART_SetConfig+0x3a4>
 8006818:	e00b      	b.n	8006832 <UART_SetConfig+0x3aa>
 800681a:	2301      	movs	r3, #1
 800681c:	77fb      	strb	r3, [r7, #31]
 800681e:	e062      	b.n	80068e6 <UART_SetConfig+0x45e>
 8006820:	2302      	movs	r3, #2
 8006822:	77fb      	strb	r3, [r7, #31]
 8006824:	e05f      	b.n	80068e6 <UART_SetConfig+0x45e>
 8006826:	2304      	movs	r3, #4
 8006828:	77fb      	strb	r3, [r7, #31]
 800682a:	e05c      	b.n	80068e6 <UART_SetConfig+0x45e>
 800682c:	2308      	movs	r3, #8
 800682e:	77fb      	strb	r3, [r7, #31]
 8006830:	e059      	b.n	80068e6 <UART_SetConfig+0x45e>
 8006832:	2310      	movs	r3, #16
 8006834:	77fb      	strb	r3, [r7, #31]
 8006836:	bf00      	nop
 8006838:	e055      	b.n	80068e6 <UART_SetConfig+0x45e>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a83      	ldr	r2, [pc, #524]	; (8006a4c <UART_SetConfig+0x5c4>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d124      	bne.n	800688e <UART_SetConfig+0x406>
 8006844:	4b7f      	ldr	r3, [pc, #508]	; (8006a44 <UART_SetConfig+0x5bc>)
 8006846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800684a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800684e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006852:	d012      	beq.n	800687a <UART_SetConfig+0x3f2>
 8006854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006858:	d802      	bhi.n	8006860 <UART_SetConfig+0x3d8>
 800685a:	2b00      	cmp	r3, #0
 800685c:	d007      	beq.n	800686e <UART_SetConfig+0x3e6>
 800685e:	e012      	b.n	8006886 <UART_SetConfig+0x3fe>
 8006860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006864:	d006      	beq.n	8006874 <UART_SetConfig+0x3ec>
 8006866:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800686a:	d009      	beq.n	8006880 <UART_SetConfig+0x3f8>
 800686c:	e00b      	b.n	8006886 <UART_SetConfig+0x3fe>
 800686e:	2300      	movs	r3, #0
 8006870:	77fb      	strb	r3, [r7, #31]
 8006872:	e038      	b.n	80068e6 <UART_SetConfig+0x45e>
 8006874:	2302      	movs	r3, #2
 8006876:	77fb      	strb	r3, [r7, #31]
 8006878:	e035      	b.n	80068e6 <UART_SetConfig+0x45e>
 800687a:	2304      	movs	r3, #4
 800687c:	77fb      	strb	r3, [r7, #31]
 800687e:	e032      	b.n	80068e6 <UART_SetConfig+0x45e>
 8006880:	2308      	movs	r3, #8
 8006882:	77fb      	strb	r3, [r7, #31]
 8006884:	e02f      	b.n	80068e6 <UART_SetConfig+0x45e>
 8006886:	2310      	movs	r3, #16
 8006888:	77fb      	strb	r3, [r7, #31]
 800688a:	bf00      	nop
 800688c:	e02b      	b.n	80068e6 <UART_SetConfig+0x45e>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a6f      	ldr	r2, [pc, #444]	; (8006a50 <UART_SetConfig+0x5c8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d124      	bne.n	80068e2 <UART_SetConfig+0x45a>
 8006898:	4b6a      	ldr	r3, [pc, #424]	; (8006a44 <UART_SetConfig+0x5bc>)
 800689a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800689e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80068a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068a6:	d012      	beq.n	80068ce <UART_SetConfig+0x446>
 80068a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068ac:	d802      	bhi.n	80068b4 <UART_SetConfig+0x42c>
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d007      	beq.n	80068c2 <UART_SetConfig+0x43a>
 80068b2:	e012      	b.n	80068da <UART_SetConfig+0x452>
 80068b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068b8:	d006      	beq.n	80068c8 <UART_SetConfig+0x440>
 80068ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80068be:	d009      	beq.n	80068d4 <UART_SetConfig+0x44c>
 80068c0:	e00b      	b.n	80068da <UART_SetConfig+0x452>
 80068c2:	2300      	movs	r3, #0
 80068c4:	77fb      	strb	r3, [r7, #31]
 80068c6:	e00e      	b.n	80068e6 <UART_SetConfig+0x45e>
 80068c8:	2302      	movs	r3, #2
 80068ca:	77fb      	strb	r3, [r7, #31]
 80068cc:	e00b      	b.n	80068e6 <UART_SetConfig+0x45e>
 80068ce:	2304      	movs	r3, #4
 80068d0:	77fb      	strb	r3, [r7, #31]
 80068d2:	e008      	b.n	80068e6 <UART_SetConfig+0x45e>
 80068d4:	2308      	movs	r3, #8
 80068d6:	77fb      	strb	r3, [r7, #31]
 80068d8:	e005      	b.n	80068e6 <UART_SetConfig+0x45e>
 80068da:	2310      	movs	r3, #16
 80068dc:	77fb      	strb	r3, [r7, #31]
 80068de:	bf00      	nop
 80068e0:	e001      	b.n	80068e6 <UART_SetConfig+0x45e>
 80068e2:	2310      	movs	r3, #16
 80068e4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068ee:	d17f      	bne.n	80069f0 <UART_SetConfig+0x568>
  {
    switch (clocksource)
 80068f0:	7ffb      	ldrb	r3, [r7, #31]
 80068f2:	2b08      	cmp	r3, #8
 80068f4:	d85c      	bhi.n	80069b0 <UART_SetConfig+0x528>
 80068f6:	a201      	add	r2, pc, #4	; (adr r2, 80068fc <UART_SetConfig+0x474>)
 80068f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fc:	08006921 	.word	0x08006921
 8006900:	08006941 	.word	0x08006941
 8006904:	08006961 	.word	0x08006961
 8006908:	080069b1 	.word	0x080069b1
 800690c:	08006979 	.word	0x08006979
 8006910:	080069b1 	.word	0x080069b1
 8006914:	080069b1 	.word	0x080069b1
 8006918:	080069b1 	.word	0x080069b1
 800691c:	08006999 	.word	0x08006999
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006920:	f7fd f8a4 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8006924:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	005a      	lsls	r2, r3, #1
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	085b      	lsrs	r3, r3, #1
 8006930:	441a      	add	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	fbb2 f3f3 	udiv	r3, r2, r3
 800693a:	b29b      	uxth	r3, r3
 800693c:	61bb      	str	r3, [r7, #24]
        break;
 800693e:	e03a      	b.n	80069b6 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006940:	f7fd f8a8 	bl	8003a94 <HAL_RCC_GetPCLK2Freq>
 8006944:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	005a      	lsls	r2, r3, #1
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	085b      	lsrs	r3, r3, #1
 8006950:	441a      	add	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	fbb2 f3f3 	udiv	r3, r2, r3
 800695a:	b29b      	uxth	r3, r3
 800695c:	61bb      	str	r3, [r7, #24]
        break;
 800695e:	e02a      	b.n	80069b6 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	085a      	lsrs	r2, r3, #1
 8006966:	4b3b      	ldr	r3, [pc, #236]	; (8006a54 <UART_SetConfig+0x5cc>)
 8006968:	4413      	add	r3, r2
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	6852      	ldr	r2, [r2, #4]
 800696e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006972:	b29b      	uxth	r3, r3
 8006974:	61bb      	str	r3, [r7, #24]
        break;
 8006976:	e01e      	b.n	80069b6 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006978:	f7fc ffba 	bl	80038f0 <HAL_RCC_GetSysClockFreq>
 800697c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	005a      	lsls	r2, r3, #1
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	085b      	lsrs	r3, r3, #1
 8006988:	441a      	add	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006992:	b29b      	uxth	r3, r3
 8006994:	61bb      	str	r3, [r7, #24]
        break;
 8006996:	e00e      	b.n	80069b6 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	085b      	lsrs	r3, r3, #1
 800699e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	61bb      	str	r3, [r7, #24]
        break;
 80069ae:	e002      	b.n	80069b6 <UART_SetConfig+0x52e>
      default:
        ret = HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	75fb      	strb	r3, [r7, #23]
        break;
 80069b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	2b0f      	cmp	r3, #15
 80069ba:	d916      	bls.n	80069ea <UART_SetConfig+0x562>
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069c2:	d212      	bcs.n	80069ea <UART_SetConfig+0x562>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	f023 030f 	bic.w	r3, r3, #15
 80069cc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	085b      	lsrs	r3, r3, #1
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	f003 0307 	and.w	r3, r3, #7
 80069d8:	b29a      	uxth	r2, r3
 80069da:	897b      	ldrh	r3, [r7, #10]
 80069dc:	4313      	orrs	r3, r2
 80069de:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	897a      	ldrh	r2, [r7, #10]
 80069e6:	60da      	str	r2, [r3, #12]
 80069e8:	e07d      	b.n	8006ae6 <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	75fb      	strb	r3, [r7, #23]
 80069ee:	e07a      	b.n	8006ae6 <UART_SetConfig+0x65e>
    }
  }
  else
  {
    switch (clocksource)
 80069f0:	7ffb      	ldrb	r3, [r7, #31]
 80069f2:	2b08      	cmp	r3, #8
 80069f4:	d866      	bhi.n	8006ac4 <UART_SetConfig+0x63c>
 80069f6:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <UART_SetConfig+0x574>)
 80069f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fc:	08006a21 	.word	0x08006a21
 8006a00:	08006a59 	.word	0x08006a59
 8006a04:	08006a77 	.word	0x08006a77
 8006a08:	08006ac5 	.word	0x08006ac5
 8006a0c:	08006a8f 	.word	0x08006a8f
 8006a10:	08006ac5 	.word	0x08006ac5
 8006a14:	08006ac5 	.word	0x08006ac5
 8006a18:	08006ac5 	.word	0x08006ac5
 8006a1c:	08006aad 	.word	0x08006aad
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a20:	f7fd f824 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8006a24:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	085a      	lsrs	r2, r3, #1
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	441a      	add	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	61bb      	str	r3, [r7, #24]
        break;
 8006a3c:	e045      	b.n	8006aca <UART_SetConfig+0x642>
 8006a3e:	bf00      	nop
 8006a40:	40005000 	.word	0x40005000
 8006a44:	40023800 	.word	0x40023800
 8006a48:	40011400 	.word	0x40011400
 8006a4c:	40007800 	.word	0x40007800
 8006a50:	40007c00 	.word	0x40007c00
 8006a54:	01e84800 	.word	0x01e84800
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a58:	f7fd f81c 	bl	8003a94 <HAL_RCC_GetPCLK2Freq>
 8006a5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	085a      	lsrs	r2, r3, #1
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	441a      	add	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	61bb      	str	r3, [r7, #24]
        break;
 8006a74:	e029      	b.n	8006aca <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	085a      	lsrs	r2, r3, #1
 8006a7c:	4b1f      	ldr	r3, [pc, #124]	; (8006afc <UART_SetConfig+0x674>)
 8006a7e:	4413      	add	r3, r2
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	6852      	ldr	r2, [r2, #4]
 8006a84:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	61bb      	str	r3, [r7, #24]
        break;
 8006a8c:	e01d      	b.n	8006aca <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a8e:	f7fc ff2f 	bl	80038f0 <HAL_RCC_GetSysClockFreq>
 8006a92:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	085a      	lsrs	r2, r3, #1
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	441a      	add	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	61bb      	str	r3, [r7, #24]
        break;
 8006aaa:	e00e      	b.n	8006aca <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	085b      	lsrs	r3, r3, #1
 8006ab2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	61bb      	str	r3, [r7, #24]
        break;
 8006ac2:	e002      	b.n	8006aca <UART_SetConfig+0x642>
      default:
        ret = HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	75fb      	strb	r3, [r7, #23]
        break;
 8006ac8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	2b0f      	cmp	r3, #15
 8006ace:	d908      	bls.n	8006ae2 <UART_SetConfig+0x65a>
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad6:	d204      	bcs.n	8006ae2 <UART_SetConfig+0x65a>
    {
      huart->Instance->BRR = usartdiv;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	60da      	str	r2, [r3, #12]
 8006ae0:	e001      	b.n	8006ae6 <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3720      	adds	r7, #32
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	00f42400 	.word	0x00f42400

08006b00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0c:	2bff      	cmp	r3, #255	; 0xff
 8006b0e:	d904      	bls.n	8006b1a <UART_AdvFeatureConfig+0x1a>
 8006b10:	f640 3143 	movw	r1, #2883	; 0xb43
 8006b14:	489f      	ldr	r0, [pc, #636]	; (8006d94 <UART_AdvFeatureConfig+0x294>)
 8006b16:	f7fa fd0c 	bl	8001532 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d018      	beq.n	8006b58 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d009      	beq.n	8006b42 <UART_AdvFeatureConfig+0x42>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b36:	d004      	beq.n	8006b42 <UART_AdvFeatureConfig+0x42>
 8006b38:	f640 3148 	movw	r1, #2888	; 0xb48
 8006b3c:	4895      	ldr	r0, [pc, #596]	; (8006d94 <UART_AdvFeatureConfig+0x294>)
 8006b3e:	f7fa fcf8 	bl	8001532 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	430a      	orrs	r2, r1
 8006b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d018      	beq.n	8006b96 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d009      	beq.n	8006b80 <UART_AdvFeatureConfig+0x80>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b74:	d004      	beq.n	8006b80 <UART_AdvFeatureConfig+0x80>
 8006b76:	f640 314f 	movw	r1, #2895	; 0xb4f
 8006b7a:	4886      	ldr	r0, [pc, #536]	; (8006d94 <UART_AdvFeatureConfig+0x294>)
 8006b7c:	f7fa fcd9 	bl	8001532 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	f003 0304 	and.w	r3, r3, #4
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d018      	beq.n	8006bd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d009      	beq.n	8006bbe <UART_AdvFeatureConfig+0xbe>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006bb2:	d004      	beq.n	8006bbe <UART_AdvFeatureConfig+0xbe>
 8006bb4:	f640 3156 	movw	r1, #2902	; 0xb56
 8006bb8:	4876      	ldr	r0, [pc, #472]	; (8006d94 <UART_AdvFeatureConfig+0x294>)
 8006bba:	f7fa fcba 	bl	8001532 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd8:	f003 0308 	and.w	r3, r3, #8
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d018      	beq.n	8006c12 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d009      	beq.n	8006bfc <UART_AdvFeatureConfig+0xfc>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bf0:	d004      	beq.n	8006bfc <UART_AdvFeatureConfig+0xfc>
 8006bf2:	f640 315d 	movw	r1, #2909	; 0xb5d
 8006bf6:	4867      	ldr	r0, [pc, #412]	; (8006d94 <UART_AdvFeatureConfig+0x294>)
 8006bf8:	f7fa fc9b 	bl	8001532 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c16:	f003 0310 	and.w	r3, r3, #16
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d018      	beq.n	8006c50 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d009      	beq.n	8006c3a <UART_AdvFeatureConfig+0x13a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c2e:	d004      	beq.n	8006c3a <UART_AdvFeatureConfig+0x13a>
 8006c30:	f640 3164 	movw	r1, #2916	; 0xb64
 8006c34:	4857      	ldr	r0, [pc, #348]	; (8006d94 <UART_AdvFeatureConfig+0x294>)
 8006c36:	f7fa fc7c 	bl	8001532 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c54:	f003 0320 	and.w	r3, r3, #32
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d018      	beq.n	8006c8e <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d009      	beq.n	8006c78 <UART_AdvFeatureConfig+0x178>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c6c:	d004      	beq.n	8006c78 <UART_AdvFeatureConfig+0x178>
 8006c6e:	f640 316b 	movw	r1, #2923	; 0xb6b
 8006c72:	4848      	ldr	r0, [pc, #288]	; (8006d94 <UART_AdvFeatureConfig+0x294>)
 8006c74:	f7fa fc5d 	bl	8001532 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d059      	beq.n	8006d4e <UART_AdvFeatureConfig+0x24e>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a3e      	ldr	r2, [pc, #248]	; (8006d98 <UART_AdvFeatureConfig+0x298>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d013      	beq.n	8006ccc <UART_AdvFeatureConfig+0x1cc>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a3c      	ldr	r2, [pc, #240]	; (8006d9c <UART_AdvFeatureConfig+0x29c>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d00e      	beq.n	8006ccc <UART_AdvFeatureConfig+0x1cc>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a3b      	ldr	r2, [pc, #236]	; (8006da0 <UART_AdvFeatureConfig+0x2a0>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d009      	beq.n	8006ccc <UART_AdvFeatureConfig+0x1cc>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a39      	ldr	r2, [pc, #228]	; (8006da4 <UART_AdvFeatureConfig+0x2a4>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d004      	beq.n	8006ccc <UART_AdvFeatureConfig+0x1cc>
 8006cc2:	f640 3172 	movw	r1, #2930	; 0xb72
 8006cc6:	4833      	ldr	r0, [pc, #204]	; (8006d94 <UART_AdvFeatureConfig+0x294>)
 8006cc8:	f7fa fc33 	bl	8001532 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d009      	beq.n	8006ce8 <UART_AdvFeatureConfig+0x1e8>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cdc:	d004      	beq.n	8006ce8 <UART_AdvFeatureConfig+0x1e8>
 8006cde:	f640 3173 	movw	r1, #2931	; 0xb73
 8006ce2:	482c      	ldr	r0, [pc, #176]	; (8006d94 <UART_AdvFeatureConfig+0x294>)
 8006ce4:	f7fa fc25 	bl	8001532 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d06:	d122      	bne.n	8006d4e <UART_AdvFeatureConfig+0x24e>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d013      	beq.n	8006d38 <UART_AdvFeatureConfig+0x238>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d18:	d00e      	beq.n	8006d38 <UART_AdvFeatureConfig+0x238>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d22:	d009      	beq.n	8006d38 <UART_AdvFeatureConfig+0x238>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d2c:	d004      	beq.n	8006d38 <UART_AdvFeatureConfig+0x238>
 8006d2e:	f640 3178 	movw	r1, #2936	; 0xb78
 8006d32:	4818      	ldr	r0, [pc, #96]	; (8006d94 <UART_AdvFeatureConfig+0x294>)
 8006d34:	f7fa fbfd 	bl	8001532 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d018      	beq.n	8006d8c <UART_AdvFeatureConfig+0x28c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d009      	beq.n	8006d76 <UART_AdvFeatureConfig+0x276>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006d6a:	d004      	beq.n	8006d76 <UART_AdvFeatureConfig+0x276>
 8006d6c:	f44f 6138 	mov.w	r1, #2944	; 0xb80
 8006d70:	4808      	ldr	r0, [pc, #32]	; (8006d94 <UART_AdvFeatureConfig+0x294>)
 8006d72:	f7fa fbde 	bl	8001532 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	605a      	str	r2, [r3, #4]
  }
}
 8006d8c:	bf00      	nop
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	08007b60 	.word	0x08007b60
 8006d98:	40011000 	.word	0x40011000
 8006d9c:	40004400 	.word	0x40004400
 8006da0:	40004800 	.word	0x40004800
 8006da4:	40011400 	.word	0x40011400

08006da8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af02      	add	r7, sp, #8
 8006dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006db6:	f7fb f955 	bl	8002064 <HAL_GetTick>
 8006dba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0308 	and.w	r3, r3, #8
 8006dc6:	2b08      	cmp	r3, #8
 8006dc8:	d10e      	bne.n	8006de8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f82a 	bl	8006e32 <UART_WaitOnFlagUntilTimeout>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e020      	b.n	8006e2a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0304 	and.w	r3, r3, #4
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	d10e      	bne.n	8006e14 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006df6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f814 	bl	8006e32 <UART_WaitOnFlagUntilTimeout>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d001      	beq.n	8006e14 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e00a      	b.n	8006e2a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2220      	movs	r2, #32
 8006e18:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b084      	sub	sp, #16
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	60f8      	str	r0, [r7, #12]
 8006e3a:	60b9      	str	r1, [r7, #8]
 8006e3c:	603b      	str	r3, [r7, #0]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e42:	e05d      	b.n	8006f00 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4a:	d059      	beq.n	8006f00 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e4c:	f7fb f90a 	bl	8002064 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	69ba      	ldr	r2, [r7, #24]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d302      	bcc.n	8006e62 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d11b      	bne.n	8006e9a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e70:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	689a      	ldr	r2, [r3, #8]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 0201 	bic.w	r2, r2, #1
 8006e80:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2220      	movs	r2, #32
 8006e86:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e042      	b.n	8006f20 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0304 	and.w	r3, r3, #4
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d02b      	beq.n	8006f00 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eb6:	d123      	bne.n	8006f00 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ec0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ed0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	689a      	ldr	r2, [r3, #8]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f022 0201 	bic.w	r2, r2, #1
 8006ee0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2220      	movs	r2, #32
 8006ee6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2220      	movs	r2, #32
 8006eec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e00f      	b.n	8006f20 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	69da      	ldr	r2, [r3, #28]
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	4013      	ands	r3, r2
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	bf0c      	ite	eq
 8006f10:	2301      	moveq	r3, #1
 8006f12:	2300      	movne	r3, #0
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	461a      	mov	r2, r3
 8006f18:	79fb      	ldrb	r3, [r7, #7]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d092      	beq.n	8006e44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f3e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	689a      	ldr	r2, [r3, #8]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f022 0201 	bic.w	r2, r2, #1
 8006f4e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2220      	movs	r2, #32
 8006f54:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f7ff fa6a 	bl	8006460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f8c:	bf00      	nop
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006faa:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f7ff fa47 	bl	800644c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fbe:	bf00      	nop
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
	...

08006fc8 <__errno>:
 8006fc8:	4b01      	ldr	r3, [pc, #4]	; (8006fd0 <__errno+0x8>)
 8006fca:	6818      	ldr	r0, [r3, #0]
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	2000000c 	.word	0x2000000c

08006fd4 <__libc_init_array>:
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	4e0d      	ldr	r6, [pc, #52]	; (800700c <__libc_init_array+0x38>)
 8006fd8:	4c0d      	ldr	r4, [pc, #52]	; (8007010 <__libc_init_array+0x3c>)
 8006fda:	1ba4      	subs	r4, r4, r6
 8006fdc:	10a4      	asrs	r4, r4, #2
 8006fde:	2500      	movs	r5, #0
 8006fe0:	42a5      	cmp	r5, r4
 8006fe2:	d109      	bne.n	8006ff8 <__libc_init_array+0x24>
 8006fe4:	4e0b      	ldr	r6, [pc, #44]	; (8007014 <__libc_init_array+0x40>)
 8006fe6:	4c0c      	ldr	r4, [pc, #48]	; (8007018 <__libc_init_array+0x44>)
 8006fe8:	f000 fc28 	bl	800783c <_init>
 8006fec:	1ba4      	subs	r4, r4, r6
 8006fee:	10a4      	asrs	r4, r4, #2
 8006ff0:	2500      	movs	r5, #0
 8006ff2:	42a5      	cmp	r5, r4
 8006ff4:	d105      	bne.n	8007002 <__libc_init_array+0x2e>
 8006ff6:	bd70      	pop	{r4, r5, r6, pc}
 8006ff8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ffc:	4798      	blx	r3
 8006ffe:	3501      	adds	r5, #1
 8007000:	e7ee      	b.n	8006fe0 <__libc_init_array+0xc>
 8007002:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007006:	4798      	blx	r3
 8007008:	3501      	adds	r5, #1
 800700a:	e7f2      	b.n	8006ff2 <__libc_init_array+0x1e>
 800700c:	08007bf0 	.word	0x08007bf0
 8007010:	08007bf0 	.word	0x08007bf0
 8007014:	08007bf0 	.word	0x08007bf0
 8007018:	08007bf4 	.word	0x08007bf4

0800701c <memcpy>:
 800701c:	b510      	push	{r4, lr}
 800701e:	1e43      	subs	r3, r0, #1
 8007020:	440a      	add	r2, r1
 8007022:	4291      	cmp	r1, r2
 8007024:	d100      	bne.n	8007028 <memcpy+0xc>
 8007026:	bd10      	pop	{r4, pc}
 8007028:	f811 4b01 	ldrb.w	r4, [r1], #1
 800702c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007030:	e7f7      	b.n	8007022 <memcpy+0x6>

08007032 <memset>:
 8007032:	4402      	add	r2, r0
 8007034:	4603      	mov	r3, r0
 8007036:	4293      	cmp	r3, r2
 8007038:	d100      	bne.n	800703c <memset+0xa>
 800703a:	4770      	bx	lr
 800703c:	f803 1b01 	strb.w	r1, [r3], #1
 8007040:	e7f9      	b.n	8007036 <memset+0x4>
	...

08007044 <siprintf>:
 8007044:	b40e      	push	{r1, r2, r3}
 8007046:	b500      	push	{lr}
 8007048:	b09c      	sub	sp, #112	; 0x70
 800704a:	ab1d      	add	r3, sp, #116	; 0x74
 800704c:	9002      	str	r0, [sp, #8]
 800704e:	9006      	str	r0, [sp, #24]
 8007050:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007054:	4809      	ldr	r0, [pc, #36]	; (800707c <siprintf+0x38>)
 8007056:	9107      	str	r1, [sp, #28]
 8007058:	9104      	str	r1, [sp, #16]
 800705a:	4909      	ldr	r1, [pc, #36]	; (8007080 <siprintf+0x3c>)
 800705c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007060:	9105      	str	r1, [sp, #20]
 8007062:	6800      	ldr	r0, [r0, #0]
 8007064:	9301      	str	r3, [sp, #4]
 8007066:	a902      	add	r1, sp, #8
 8007068:	f000 f866 	bl	8007138 <_svfiprintf_r>
 800706c:	9b02      	ldr	r3, [sp, #8]
 800706e:	2200      	movs	r2, #0
 8007070:	701a      	strb	r2, [r3, #0]
 8007072:	b01c      	add	sp, #112	; 0x70
 8007074:	f85d eb04 	ldr.w	lr, [sp], #4
 8007078:	b003      	add	sp, #12
 800707a:	4770      	bx	lr
 800707c:	2000000c 	.word	0x2000000c
 8007080:	ffff0208 	.word	0xffff0208

08007084 <__ssputs_r>:
 8007084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007088:	688e      	ldr	r6, [r1, #8]
 800708a:	429e      	cmp	r6, r3
 800708c:	4682      	mov	sl, r0
 800708e:	460c      	mov	r4, r1
 8007090:	4690      	mov	r8, r2
 8007092:	4699      	mov	r9, r3
 8007094:	d837      	bhi.n	8007106 <__ssputs_r+0x82>
 8007096:	898a      	ldrh	r2, [r1, #12]
 8007098:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800709c:	d031      	beq.n	8007102 <__ssputs_r+0x7e>
 800709e:	6825      	ldr	r5, [r4, #0]
 80070a0:	6909      	ldr	r1, [r1, #16]
 80070a2:	1a6f      	subs	r7, r5, r1
 80070a4:	6965      	ldr	r5, [r4, #20]
 80070a6:	2302      	movs	r3, #2
 80070a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070ac:	fb95 f5f3 	sdiv	r5, r5, r3
 80070b0:	f109 0301 	add.w	r3, r9, #1
 80070b4:	443b      	add	r3, r7
 80070b6:	429d      	cmp	r5, r3
 80070b8:	bf38      	it	cc
 80070ba:	461d      	movcc	r5, r3
 80070bc:	0553      	lsls	r3, r2, #21
 80070be:	d530      	bpl.n	8007122 <__ssputs_r+0x9e>
 80070c0:	4629      	mov	r1, r5
 80070c2:	f000 fb21 	bl	8007708 <_malloc_r>
 80070c6:	4606      	mov	r6, r0
 80070c8:	b950      	cbnz	r0, 80070e0 <__ssputs_r+0x5c>
 80070ca:	230c      	movs	r3, #12
 80070cc:	f8ca 3000 	str.w	r3, [sl]
 80070d0:	89a3      	ldrh	r3, [r4, #12]
 80070d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070d6:	81a3      	strh	r3, [r4, #12]
 80070d8:	f04f 30ff 	mov.w	r0, #4294967295
 80070dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070e0:	463a      	mov	r2, r7
 80070e2:	6921      	ldr	r1, [r4, #16]
 80070e4:	f7ff ff9a 	bl	800701c <memcpy>
 80070e8:	89a3      	ldrh	r3, [r4, #12]
 80070ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f2:	81a3      	strh	r3, [r4, #12]
 80070f4:	6126      	str	r6, [r4, #16]
 80070f6:	6165      	str	r5, [r4, #20]
 80070f8:	443e      	add	r6, r7
 80070fa:	1bed      	subs	r5, r5, r7
 80070fc:	6026      	str	r6, [r4, #0]
 80070fe:	60a5      	str	r5, [r4, #8]
 8007100:	464e      	mov	r6, r9
 8007102:	454e      	cmp	r6, r9
 8007104:	d900      	bls.n	8007108 <__ssputs_r+0x84>
 8007106:	464e      	mov	r6, r9
 8007108:	4632      	mov	r2, r6
 800710a:	4641      	mov	r1, r8
 800710c:	6820      	ldr	r0, [r4, #0]
 800710e:	f000 fa93 	bl	8007638 <memmove>
 8007112:	68a3      	ldr	r3, [r4, #8]
 8007114:	1b9b      	subs	r3, r3, r6
 8007116:	60a3      	str	r3, [r4, #8]
 8007118:	6823      	ldr	r3, [r4, #0]
 800711a:	441e      	add	r6, r3
 800711c:	6026      	str	r6, [r4, #0]
 800711e:	2000      	movs	r0, #0
 8007120:	e7dc      	b.n	80070dc <__ssputs_r+0x58>
 8007122:	462a      	mov	r2, r5
 8007124:	f000 fb4a 	bl	80077bc <_realloc_r>
 8007128:	4606      	mov	r6, r0
 800712a:	2800      	cmp	r0, #0
 800712c:	d1e2      	bne.n	80070f4 <__ssputs_r+0x70>
 800712e:	6921      	ldr	r1, [r4, #16]
 8007130:	4650      	mov	r0, sl
 8007132:	f000 fa9b 	bl	800766c <_free_r>
 8007136:	e7c8      	b.n	80070ca <__ssputs_r+0x46>

08007138 <_svfiprintf_r>:
 8007138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800713c:	461d      	mov	r5, r3
 800713e:	898b      	ldrh	r3, [r1, #12]
 8007140:	061f      	lsls	r7, r3, #24
 8007142:	b09d      	sub	sp, #116	; 0x74
 8007144:	4680      	mov	r8, r0
 8007146:	460c      	mov	r4, r1
 8007148:	4616      	mov	r6, r2
 800714a:	d50f      	bpl.n	800716c <_svfiprintf_r+0x34>
 800714c:	690b      	ldr	r3, [r1, #16]
 800714e:	b96b      	cbnz	r3, 800716c <_svfiprintf_r+0x34>
 8007150:	2140      	movs	r1, #64	; 0x40
 8007152:	f000 fad9 	bl	8007708 <_malloc_r>
 8007156:	6020      	str	r0, [r4, #0]
 8007158:	6120      	str	r0, [r4, #16]
 800715a:	b928      	cbnz	r0, 8007168 <_svfiprintf_r+0x30>
 800715c:	230c      	movs	r3, #12
 800715e:	f8c8 3000 	str.w	r3, [r8]
 8007162:	f04f 30ff 	mov.w	r0, #4294967295
 8007166:	e0c8      	b.n	80072fa <_svfiprintf_r+0x1c2>
 8007168:	2340      	movs	r3, #64	; 0x40
 800716a:	6163      	str	r3, [r4, #20]
 800716c:	2300      	movs	r3, #0
 800716e:	9309      	str	r3, [sp, #36]	; 0x24
 8007170:	2320      	movs	r3, #32
 8007172:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007176:	2330      	movs	r3, #48	; 0x30
 8007178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800717c:	9503      	str	r5, [sp, #12]
 800717e:	f04f 0b01 	mov.w	fp, #1
 8007182:	4637      	mov	r7, r6
 8007184:	463d      	mov	r5, r7
 8007186:	f815 3b01 	ldrb.w	r3, [r5], #1
 800718a:	b10b      	cbz	r3, 8007190 <_svfiprintf_r+0x58>
 800718c:	2b25      	cmp	r3, #37	; 0x25
 800718e:	d13e      	bne.n	800720e <_svfiprintf_r+0xd6>
 8007190:	ebb7 0a06 	subs.w	sl, r7, r6
 8007194:	d00b      	beq.n	80071ae <_svfiprintf_r+0x76>
 8007196:	4653      	mov	r3, sl
 8007198:	4632      	mov	r2, r6
 800719a:	4621      	mov	r1, r4
 800719c:	4640      	mov	r0, r8
 800719e:	f7ff ff71 	bl	8007084 <__ssputs_r>
 80071a2:	3001      	adds	r0, #1
 80071a4:	f000 80a4 	beq.w	80072f0 <_svfiprintf_r+0x1b8>
 80071a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071aa:	4453      	add	r3, sl
 80071ac:	9309      	str	r3, [sp, #36]	; 0x24
 80071ae:	783b      	ldrb	r3, [r7, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 809d 	beq.w	80072f0 <_svfiprintf_r+0x1b8>
 80071b6:	2300      	movs	r3, #0
 80071b8:	f04f 32ff 	mov.w	r2, #4294967295
 80071bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071c0:	9304      	str	r3, [sp, #16]
 80071c2:	9307      	str	r3, [sp, #28]
 80071c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071c8:	931a      	str	r3, [sp, #104]	; 0x68
 80071ca:	462f      	mov	r7, r5
 80071cc:	2205      	movs	r2, #5
 80071ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 80071d2:	4850      	ldr	r0, [pc, #320]	; (8007314 <_svfiprintf_r+0x1dc>)
 80071d4:	f7f9 f83c 	bl	8000250 <memchr>
 80071d8:	9b04      	ldr	r3, [sp, #16]
 80071da:	b9d0      	cbnz	r0, 8007212 <_svfiprintf_r+0xda>
 80071dc:	06d9      	lsls	r1, r3, #27
 80071de:	bf44      	itt	mi
 80071e0:	2220      	movmi	r2, #32
 80071e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071e6:	071a      	lsls	r2, r3, #28
 80071e8:	bf44      	itt	mi
 80071ea:	222b      	movmi	r2, #43	; 0x2b
 80071ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071f0:	782a      	ldrb	r2, [r5, #0]
 80071f2:	2a2a      	cmp	r2, #42	; 0x2a
 80071f4:	d015      	beq.n	8007222 <_svfiprintf_r+0xea>
 80071f6:	9a07      	ldr	r2, [sp, #28]
 80071f8:	462f      	mov	r7, r5
 80071fa:	2000      	movs	r0, #0
 80071fc:	250a      	movs	r5, #10
 80071fe:	4639      	mov	r1, r7
 8007200:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007204:	3b30      	subs	r3, #48	; 0x30
 8007206:	2b09      	cmp	r3, #9
 8007208:	d94d      	bls.n	80072a6 <_svfiprintf_r+0x16e>
 800720a:	b1b8      	cbz	r0, 800723c <_svfiprintf_r+0x104>
 800720c:	e00f      	b.n	800722e <_svfiprintf_r+0xf6>
 800720e:	462f      	mov	r7, r5
 8007210:	e7b8      	b.n	8007184 <_svfiprintf_r+0x4c>
 8007212:	4a40      	ldr	r2, [pc, #256]	; (8007314 <_svfiprintf_r+0x1dc>)
 8007214:	1a80      	subs	r0, r0, r2
 8007216:	fa0b f000 	lsl.w	r0, fp, r0
 800721a:	4318      	orrs	r0, r3
 800721c:	9004      	str	r0, [sp, #16]
 800721e:	463d      	mov	r5, r7
 8007220:	e7d3      	b.n	80071ca <_svfiprintf_r+0x92>
 8007222:	9a03      	ldr	r2, [sp, #12]
 8007224:	1d11      	adds	r1, r2, #4
 8007226:	6812      	ldr	r2, [r2, #0]
 8007228:	9103      	str	r1, [sp, #12]
 800722a:	2a00      	cmp	r2, #0
 800722c:	db01      	blt.n	8007232 <_svfiprintf_r+0xfa>
 800722e:	9207      	str	r2, [sp, #28]
 8007230:	e004      	b.n	800723c <_svfiprintf_r+0x104>
 8007232:	4252      	negs	r2, r2
 8007234:	f043 0302 	orr.w	r3, r3, #2
 8007238:	9207      	str	r2, [sp, #28]
 800723a:	9304      	str	r3, [sp, #16]
 800723c:	783b      	ldrb	r3, [r7, #0]
 800723e:	2b2e      	cmp	r3, #46	; 0x2e
 8007240:	d10c      	bne.n	800725c <_svfiprintf_r+0x124>
 8007242:	787b      	ldrb	r3, [r7, #1]
 8007244:	2b2a      	cmp	r3, #42	; 0x2a
 8007246:	d133      	bne.n	80072b0 <_svfiprintf_r+0x178>
 8007248:	9b03      	ldr	r3, [sp, #12]
 800724a:	1d1a      	adds	r2, r3, #4
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	9203      	str	r2, [sp, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	bfb8      	it	lt
 8007254:	f04f 33ff 	movlt.w	r3, #4294967295
 8007258:	3702      	adds	r7, #2
 800725a:	9305      	str	r3, [sp, #20]
 800725c:	4d2e      	ldr	r5, [pc, #184]	; (8007318 <_svfiprintf_r+0x1e0>)
 800725e:	7839      	ldrb	r1, [r7, #0]
 8007260:	2203      	movs	r2, #3
 8007262:	4628      	mov	r0, r5
 8007264:	f7f8 fff4 	bl	8000250 <memchr>
 8007268:	b138      	cbz	r0, 800727a <_svfiprintf_r+0x142>
 800726a:	2340      	movs	r3, #64	; 0x40
 800726c:	1b40      	subs	r0, r0, r5
 800726e:	fa03 f000 	lsl.w	r0, r3, r0
 8007272:	9b04      	ldr	r3, [sp, #16]
 8007274:	4303      	orrs	r3, r0
 8007276:	3701      	adds	r7, #1
 8007278:	9304      	str	r3, [sp, #16]
 800727a:	7839      	ldrb	r1, [r7, #0]
 800727c:	4827      	ldr	r0, [pc, #156]	; (800731c <_svfiprintf_r+0x1e4>)
 800727e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007282:	2206      	movs	r2, #6
 8007284:	1c7e      	adds	r6, r7, #1
 8007286:	f7f8 ffe3 	bl	8000250 <memchr>
 800728a:	2800      	cmp	r0, #0
 800728c:	d038      	beq.n	8007300 <_svfiprintf_r+0x1c8>
 800728e:	4b24      	ldr	r3, [pc, #144]	; (8007320 <_svfiprintf_r+0x1e8>)
 8007290:	bb13      	cbnz	r3, 80072d8 <_svfiprintf_r+0x1a0>
 8007292:	9b03      	ldr	r3, [sp, #12]
 8007294:	3307      	adds	r3, #7
 8007296:	f023 0307 	bic.w	r3, r3, #7
 800729a:	3308      	adds	r3, #8
 800729c:	9303      	str	r3, [sp, #12]
 800729e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a0:	444b      	add	r3, r9
 80072a2:	9309      	str	r3, [sp, #36]	; 0x24
 80072a4:	e76d      	b.n	8007182 <_svfiprintf_r+0x4a>
 80072a6:	fb05 3202 	mla	r2, r5, r2, r3
 80072aa:	2001      	movs	r0, #1
 80072ac:	460f      	mov	r7, r1
 80072ae:	e7a6      	b.n	80071fe <_svfiprintf_r+0xc6>
 80072b0:	2300      	movs	r3, #0
 80072b2:	3701      	adds	r7, #1
 80072b4:	9305      	str	r3, [sp, #20]
 80072b6:	4619      	mov	r1, r3
 80072b8:	250a      	movs	r5, #10
 80072ba:	4638      	mov	r0, r7
 80072bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072c0:	3a30      	subs	r2, #48	; 0x30
 80072c2:	2a09      	cmp	r2, #9
 80072c4:	d903      	bls.n	80072ce <_svfiprintf_r+0x196>
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d0c8      	beq.n	800725c <_svfiprintf_r+0x124>
 80072ca:	9105      	str	r1, [sp, #20]
 80072cc:	e7c6      	b.n	800725c <_svfiprintf_r+0x124>
 80072ce:	fb05 2101 	mla	r1, r5, r1, r2
 80072d2:	2301      	movs	r3, #1
 80072d4:	4607      	mov	r7, r0
 80072d6:	e7f0      	b.n	80072ba <_svfiprintf_r+0x182>
 80072d8:	ab03      	add	r3, sp, #12
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	4622      	mov	r2, r4
 80072de:	4b11      	ldr	r3, [pc, #68]	; (8007324 <_svfiprintf_r+0x1ec>)
 80072e0:	a904      	add	r1, sp, #16
 80072e2:	4640      	mov	r0, r8
 80072e4:	f3af 8000 	nop.w
 80072e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80072ec:	4681      	mov	r9, r0
 80072ee:	d1d6      	bne.n	800729e <_svfiprintf_r+0x166>
 80072f0:	89a3      	ldrh	r3, [r4, #12]
 80072f2:	065b      	lsls	r3, r3, #25
 80072f4:	f53f af35 	bmi.w	8007162 <_svfiprintf_r+0x2a>
 80072f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072fa:	b01d      	add	sp, #116	; 0x74
 80072fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007300:	ab03      	add	r3, sp, #12
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	4622      	mov	r2, r4
 8007306:	4b07      	ldr	r3, [pc, #28]	; (8007324 <_svfiprintf_r+0x1ec>)
 8007308:	a904      	add	r1, sp, #16
 800730a:	4640      	mov	r0, r8
 800730c:	f000 f882 	bl	8007414 <_printf_i>
 8007310:	e7ea      	b.n	80072e8 <_svfiprintf_r+0x1b0>
 8007312:	bf00      	nop
 8007314:	08007bb4 	.word	0x08007bb4
 8007318:	08007bba 	.word	0x08007bba
 800731c:	08007bbe 	.word	0x08007bbe
 8007320:	00000000 	.word	0x00000000
 8007324:	08007085 	.word	0x08007085

08007328 <_printf_common>:
 8007328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800732c:	4691      	mov	r9, r2
 800732e:	461f      	mov	r7, r3
 8007330:	688a      	ldr	r2, [r1, #8]
 8007332:	690b      	ldr	r3, [r1, #16]
 8007334:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007338:	4293      	cmp	r3, r2
 800733a:	bfb8      	it	lt
 800733c:	4613      	movlt	r3, r2
 800733e:	f8c9 3000 	str.w	r3, [r9]
 8007342:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007346:	4606      	mov	r6, r0
 8007348:	460c      	mov	r4, r1
 800734a:	b112      	cbz	r2, 8007352 <_printf_common+0x2a>
 800734c:	3301      	adds	r3, #1
 800734e:	f8c9 3000 	str.w	r3, [r9]
 8007352:	6823      	ldr	r3, [r4, #0]
 8007354:	0699      	lsls	r1, r3, #26
 8007356:	bf42      	ittt	mi
 8007358:	f8d9 3000 	ldrmi.w	r3, [r9]
 800735c:	3302      	addmi	r3, #2
 800735e:	f8c9 3000 	strmi.w	r3, [r9]
 8007362:	6825      	ldr	r5, [r4, #0]
 8007364:	f015 0506 	ands.w	r5, r5, #6
 8007368:	d107      	bne.n	800737a <_printf_common+0x52>
 800736a:	f104 0a19 	add.w	sl, r4, #25
 800736e:	68e3      	ldr	r3, [r4, #12]
 8007370:	f8d9 2000 	ldr.w	r2, [r9]
 8007374:	1a9b      	subs	r3, r3, r2
 8007376:	42ab      	cmp	r3, r5
 8007378:	dc28      	bgt.n	80073cc <_printf_common+0xa4>
 800737a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800737e:	6822      	ldr	r2, [r4, #0]
 8007380:	3300      	adds	r3, #0
 8007382:	bf18      	it	ne
 8007384:	2301      	movne	r3, #1
 8007386:	0692      	lsls	r2, r2, #26
 8007388:	d42d      	bmi.n	80073e6 <_printf_common+0xbe>
 800738a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800738e:	4639      	mov	r1, r7
 8007390:	4630      	mov	r0, r6
 8007392:	47c0      	blx	r8
 8007394:	3001      	adds	r0, #1
 8007396:	d020      	beq.n	80073da <_printf_common+0xb2>
 8007398:	6823      	ldr	r3, [r4, #0]
 800739a:	68e5      	ldr	r5, [r4, #12]
 800739c:	f8d9 2000 	ldr.w	r2, [r9]
 80073a0:	f003 0306 	and.w	r3, r3, #6
 80073a4:	2b04      	cmp	r3, #4
 80073a6:	bf08      	it	eq
 80073a8:	1aad      	subeq	r5, r5, r2
 80073aa:	68a3      	ldr	r3, [r4, #8]
 80073ac:	6922      	ldr	r2, [r4, #16]
 80073ae:	bf0c      	ite	eq
 80073b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073b4:	2500      	movne	r5, #0
 80073b6:	4293      	cmp	r3, r2
 80073b8:	bfc4      	itt	gt
 80073ba:	1a9b      	subgt	r3, r3, r2
 80073bc:	18ed      	addgt	r5, r5, r3
 80073be:	f04f 0900 	mov.w	r9, #0
 80073c2:	341a      	adds	r4, #26
 80073c4:	454d      	cmp	r5, r9
 80073c6:	d11a      	bne.n	80073fe <_printf_common+0xd6>
 80073c8:	2000      	movs	r0, #0
 80073ca:	e008      	b.n	80073de <_printf_common+0xb6>
 80073cc:	2301      	movs	r3, #1
 80073ce:	4652      	mov	r2, sl
 80073d0:	4639      	mov	r1, r7
 80073d2:	4630      	mov	r0, r6
 80073d4:	47c0      	blx	r8
 80073d6:	3001      	adds	r0, #1
 80073d8:	d103      	bne.n	80073e2 <_printf_common+0xba>
 80073da:	f04f 30ff 	mov.w	r0, #4294967295
 80073de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e2:	3501      	adds	r5, #1
 80073e4:	e7c3      	b.n	800736e <_printf_common+0x46>
 80073e6:	18e1      	adds	r1, r4, r3
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	2030      	movs	r0, #48	; 0x30
 80073ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073f0:	4422      	add	r2, r4
 80073f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073fa:	3302      	adds	r3, #2
 80073fc:	e7c5      	b.n	800738a <_printf_common+0x62>
 80073fe:	2301      	movs	r3, #1
 8007400:	4622      	mov	r2, r4
 8007402:	4639      	mov	r1, r7
 8007404:	4630      	mov	r0, r6
 8007406:	47c0      	blx	r8
 8007408:	3001      	adds	r0, #1
 800740a:	d0e6      	beq.n	80073da <_printf_common+0xb2>
 800740c:	f109 0901 	add.w	r9, r9, #1
 8007410:	e7d8      	b.n	80073c4 <_printf_common+0x9c>
	...

08007414 <_printf_i>:
 8007414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007418:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800741c:	460c      	mov	r4, r1
 800741e:	7e09      	ldrb	r1, [r1, #24]
 8007420:	b085      	sub	sp, #20
 8007422:	296e      	cmp	r1, #110	; 0x6e
 8007424:	4617      	mov	r7, r2
 8007426:	4606      	mov	r6, r0
 8007428:	4698      	mov	r8, r3
 800742a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800742c:	f000 80b3 	beq.w	8007596 <_printf_i+0x182>
 8007430:	d822      	bhi.n	8007478 <_printf_i+0x64>
 8007432:	2963      	cmp	r1, #99	; 0x63
 8007434:	d036      	beq.n	80074a4 <_printf_i+0x90>
 8007436:	d80a      	bhi.n	800744e <_printf_i+0x3a>
 8007438:	2900      	cmp	r1, #0
 800743a:	f000 80b9 	beq.w	80075b0 <_printf_i+0x19c>
 800743e:	2958      	cmp	r1, #88	; 0x58
 8007440:	f000 8083 	beq.w	800754a <_printf_i+0x136>
 8007444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007448:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800744c:	e032      	b.n	80074b4 <_printf_i+0xa0>
 800744e:	2964      	cmp	r1, #100	; 0x64
 8007450:	d001      	beq.n	8007456 <_printf_i+0x42>
 8007452:	2969      	cmp	r1, #105	; 0x69
 8007454:	d1f6      	bne.n	8007444 <_printf_i+0x30>
 8007456:	6820      	ldr	r0, [r4, #0]
 8007458:	6813      	ldr	r3, [r2, #0]
 800745a:	0605      	lsls	r5, r0, #24
 800745c:	f103 0104 	add.w	r1, r3, #4
 8007460:	d52a      	bpl.n	80074b8 <_printf_i+0xa4>
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6011      	str	r1, [r2, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	da03      	bge.n	8007472 <_printf_i+0x5e>
 800746a:	222d      	movs	r2, #45	; 0x2d
 800746c:	425b      	negs	r3, r3
 800746e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007472:	486f      	ldr	r0, [pc, #444]	; (8007630 <_printf_i+0x21c>)
 8007474:	220a      	movs	r2, #10
 8007476:	e039      	b.n	80074ec <_printf_i+0xd8>
 8007478:	2973      	cmp	r1, #115	; 0x73
 800747a:	f000 809d 	beq.w	80075b8 <_printf_i+0x1a4>
 800747e:	d808      	bhi.n	8007492 <_printf_i+0x7e>
 8007480:	296f      	cmp	r1, #111	; 0x6f
 8007482:	d020      	beq.n	80074c6 <_printf_i+0xb2>
 8007484:	2970      	cmp	r1, #112	; 0x70
 8007486:	d1dd      	bne.n	8007444 <_printf_i+0x30>
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	f043 0320 	orr.w	r3, r3, #32
 800748e:	6023      	str	r3, [r4, #0]
 8007490:	e003      	b.n	800749a <_printf_i+0x86>
 8007492:	2975      	cmp	r1, #117	; 0x75
 8007494:	d017      	beq.n	80074c6 <_printf_i+0xb2>
 8007496:	2978      	cmp	r1, #120	; 0x78
 8007498:	d1d4      	bne.n	8007444 <_printf_i+0x30>
 800749a:	2378      	movs	r3, #120	; 0x78
 800749c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074a0:	4864      	ldr	r0, [pc, #400]	; (8007634 <_printf_i+0x220>)
 80074a2:	e055      	b.n	8007550 <_printf_i+0x13c>
 80074a4:	6813      	ldr	r3, [r2, #0]
 80074a6:	1d19      	adds	r1, r3, #4
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6011      	str	r1, [r2, #0]
 80074ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074b4:	2301      	movs	r3, #1
 80074b6:	e08c      	b.n	80075d2 <_printf_i+0x1be>
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6011      	str	r1, [r2, #0]
 80074bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074c0:	bf18      	it	ne
 80074c2:	b21b      	sxthne	r3, r3
 80074c4:	e7cf      	b.n	8007466 <_printf_i+0x52>
 80074c6:	6813      	ldr	r3, [r2, #0]
 80074c8:	6825      	ldr	r5, [r4, #0]
 80074ca:	1d18      	adds	r0, r3, #4
 80074cc:	6010      	str	r0, [r2, #0]
 80074ce:	0628      	lsls	r0, r5, #24
 80074d0:	d501      	bpl.n	80074d6 <_printf_i+0xc2>
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	e002      	b.n	80074dc <_printf_i+0xc8>
 80074d6:	0668      	lsls	r0, r5, #25
 80074d8:	d5fb      	bpl.n	80074d2 <_printf_i+0xbe>
 80074da:	881b      	ldrh	r3, [r3, #0]
 80074dc:	4854      	ldr	r0, [pc, #336]	; (8007630 <_printf_i+0x21c>)
 80074de:	296f      	cmp	r1, #111	; 0x6f
 80074e0:	bf14      	ite	ne
 80074e2:	220a      	movne	r2, #10
 80074e4:	2208      	moveq	r2, #8
 80074e6:	2100      	movs	r1, #0
 80074e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074ec:	6865      	ldr	r5, [r4, #4]
 80074ee:	60a5      	str	r5, [r4, #8]
 80074f0:	2d00      	cmp	r5, #0
 80074f2:	f2c0 8095 	blt.w	8007620 <_printf_i+0x20c>
 80074f6:	6821      	ldr	r1, [r4, #0]
 80074f8:	f021 0104 	bic.w	r1, r1, #4
 80074fc:	6021      	str	r1, [r4, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d13d      	bne.n	800757e <_printf_i+0x16a>
 8007502:	2d00      	cmp	r5, #0
 8007504:	f040 808e 	bne.w	8007624 <_printf_i+0x210>
 8007508:	4665      	mov	r5, ip
 800750a:	2a08      	cmp	r2, #8
 800750c:	d10b      	bne.n	8007526 <_printf_i+0x112>
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	07db      	lsls	r3, r3, #31
 8007512:	d508      	bpl.n	8007526 <_printf_i+0x112>
 8007514:	6923      	ldr	r3, [r4, #16]
 8007516:	6862      	ldr	r2, [r4, #4]
 8007518:	429a      	cmp	r2, r3
 800751a:	bfde      	ittt	le
 800751c:	2330      	movle	r3, #48	; 0x30
 800751e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007522:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007526:	ebac 0305 	sub.w	r3, ip, r5
 800752a:	6123      	str	r3, [r4, #16]
 800752c:	f8cd 8000 	str.w	r8, [sp]
 8007530:	463b      	mov	r3, r7
 8007532:	aa03      	add	r2, sp, #12
 8007534:	4621      	mov	r1, r4
 8007536:	4630      	mov	r0, r6
 8007538:	f7ff fef6 	bl	8007328 <_printf_common>
 800753c:	3001      	adds	r0, #1
 800753e:	d14d      	bne.n	80075dc <_printf_i+0x1c8>
 8007540:	f04f 30ff 	mov.w	r0, #4294967295
 8007544:	b005      	add	sp, #20
 8007546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800754a:	4839      	ldr	r0, [pc, #228]	; (8007630 <_printf_i+0x21c>)
 800754c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007550:	6813      	ldr	r3, [r2, #0]
 8007552:	6821      	ldr	r1, [r4, #0]
 8007554:	1d1d      	adds	r5, r3, #4
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6015      	str	r5, [r2, #0]
 800755a:	060a      	lsls	r2, r1, #24
 800755c:	d50b      	bpl.n	8007576 <_printf_i+0x162>
 800755e:	07ca      	lsls	r2, r1, #31
 8007560:	bf44      	itt	mi
 8007562:	f041 0120 	orrmi.w	r1, r1, #32
 8007566:	6021      	strmi	r1, [r4, #0]
 8007568:	b91b      	cbnz	r3, 8007572 <_printf_i+0x15e>
 800756a:	6822      	ldr	r2, [r4, #0]
 800756c:	f022 0220 	bic.w	r2, r2, #32
 8007570:	6022      	str	r2, [r4, #0]
 8007572:	2210      	movs	r2, #16
 8007574:	e7b7      	b.n	80074e6 <_printf_i+0xd2>
 8007576:	064d      	lsls	r5, r1, #25
 8007578:	bf48      	it	mi
 800757a:	b29b      	uxthmi	r3, r3
 800757c:	e7ef      	b.n	800755e <_printf_i+0x14a>
 800757e:	4665      	mov	r5, ip
 8007580:	fbb3 f1f2 	udiv	r1, r3, r2
 8007584:	fb02 3311 	mls	r3, r2, r1, r3
 8007588:	5cc3      	ldrb	r3, [r0, r3]
 800758a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800758e:	460b      	mov	r3, r1
 8007590:	2900      	cmp	r1, #0
 8007592:	d1f5      	bne.n	8007580 <_printf_i+0x16c>
 8007594:	e7b9      	b.n	800750a <_printf_i+0xf6>
 8007596:	6813      	ldr	r3, [r2, #0]
 8007598:	6825      	ldr	r5, [r4, #0]
 800759a:	6961      	ldr	r1, [r4, #20]
 800759c:	1d18      	adds	r0, r3, #4
 800759e:	6010      	str	r0, [r2, #0]
 80075a0:	0628      	lsls	r0, r5, #24
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	d501      	bpl.n	80075aa <_printf_i+0x196>
 80075a6:	6019      	str	r1, [r3, #0]
 80075a8:	e002      	b.n	80075b0 <_printf_i+0x19c>
 80075aa:	066a      	lsls	r2, r5, #25
 80075ac:	d5fb      	bpl.n	80075a6 <_printf_i+0x192>
 80075ae:	8019      	strh	r1, [r3, #0]
 80075b0:	2300      	movs	r3, #0
 80075b2:	6123      	str	r3, [r4, #16]
 80075b4:	4665      	mov	r5, ip
 80075b6:	e7b9      	b.n	800752c <_printf_i+0x118>
 80075b8:	6813      	ldr	r3, [r2, #0]
 80075ba:	1d19      	adds	r1, r3, #4
 80075bc:	6011      	str	r1, [r2, #0]
 80075be:	681d      	ldr	r5, [r3, #0]
 80075c0:	6862      	ldr	r2, [r4, #4]
 80075c2:	2100      	movs	r1, #0
 80075c4:	4628      	mov	r0, r5
 80075c6:	f7f8 fe43 	bl	8000250 <memchr>
 80075ca:	b108      	cbz	r0, 80075d0 <_printf_i+0x1bc>
 80075cc:	1b40      	subs	r0, r0, r5
 80075ce:	6060      	str	r0, [r4, #4]
 80075d0:	6863      	ldr	r3, [r4, #4]
 80075d2:	6123      	str	r3, [r4, #16]
 80075d4:	2300      	movs	r3, #0
 80075d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075da:	e7a7      	b.n	800752c <_printf_i+0x118>
 80075dc:	6923      	ldr	r3, [r4, #16]
 80075de:	462a      	mov	r2, r5
 80075e0:	4639      	mov	r1, r7
 80075e2:	4630      	mov	r0, r6
 80075e4:	47c0      	blx	r8
 80075e6:	3001      	adds	r0, #1
 80075e8:	d0aa      	beq.n	8007540 <_printf_i+0x12c>
 80075ea:	6823      	ldr	r3, [r4, #0]
 80075ec:	079b      	lsls	r3, r3, #30
 80075ee:	d413      	bmi.n	8007618 <_printf_i+0x204>
 80075f0:	68e0      	ldr	r0, [r4, #12]
 80075f2:	9b03      	ldr	r3, [sp, #12]
 80075f4:	4298      	cmp	r0, r3
 80075f6:	bfb8      	it	lt
 80075f8:	4618      	movlt	r0, r3
 80075fa:	e7a3      	b.n	8007544 <_printf_i+0x130>
 80075fc:	2301      	movs	r3, #1
 80075fe:	464a      	mov	r2, r9
 8007600:	4639      	mov	r1, r7
 8007602:	4630      	mov	r0, r6
 8007604:	47c0      	blx	r8
 8007606:	3001      	adds	r0, #1
 8007608:	d09a      	beq.n	8007540 <_printf_i+0x12c>
 800760a:	3501      	adds	r5, #1
 800760c:	68e3      	ldr	r3, [r4, #12]
 800760e:	9a03      	ldr	r2, [sp, #12]
 8007610:	1a9b      	subs	r3, r3, r2
 8007612:	42ab      	cmp	r3, r5
 8007614:	dcf2      	bgt.n	80075fc <_printf_i+0x1e8>
 8007616:	e7eb      	b.n	80075f0 <_printf_i+0x1dc>
 8007618:	2500      	movs	r5, #0
 800761a:	f104 0919 	add.w	r9, r4, #25
 800761e:	e7f5      	b.n	800760c <_printf_i+0x1f8>
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1ac      	bne.n	800757e <_printf_i+0x16a>
 8007624:	7803      	ldrb	r3, [r0, #0]
 8007626:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800762a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800762e:	e76c      	b.n	800750a <_printf_i+0xf6>
 8007630:	08007bc5 	.word	0x08007bc5
 8007634:	08007bd6 	.word	0x08007bd6

08007638 <memmove>:
 8007638:	4288      	cmp	r0, r1
 800763a:	b510      	push	{r4, lr}
 800763c:	eb01 0302 	add.w	r3, r1, r2
 8007640:	d807      	bhi.n	8007652 <memmove+0x1a>
 8007642:	1e42      	subs	r2, r0, #1
 8007644:	4299      	cmp	r1, r3
 8007646:	d00a      	beq.n	800765e <memmove+0x26>
 8007648:	f811 4b01 	ldrb.w	r4, [r1], #1
 800764c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007650:	e7f8      	b.n	8007644 <memmove+0xc>
 8007652:	4283      	cmp	r3, r0
 8007654:	d9f5      	bls.n	8007642 <memmove+0xa>
 8007656:	1881      	adds	r1, r0, r2
 8007658:	1ad2      	subs	r2, r2, r3
 800765a:	42d3      	cmn	r3, r2
 800765c:	d100      	bne.n	8007660 <memmove+0x28>
 800765e:	bd10      	pop	{r4, pc}
 8007660:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007664:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007668:	e7f7      	b.n	800765a <memmove+0x22>
	...

0800766c <_free_r>:
 800766c:	b538      	push	{r3, r4, r5, lr}
 800766e:	4605      	mov	r5, r0
 8007670:	2900      	cmp	r1, #0
 8007672:	d045      	beq.n	8007700 <_free_r+0x94>
 8007674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007678:	1f0c      	subs	r4, r1, #4
 800767a:	2b00      	cmp	r3, #0
 800767c:	bfb8      	it	lt
 800767e:	18e4      	addlt	r4, r4, r3
 8007680:	f000 f8d2 	bl	8007828 <__malloc_lock>
 8007684:	4a1f      	ldr	r2, [pc, #124]	; (8007704 <_free_r+0x98>)
 8007686:	6813      	ldr	r3, [r2, #0]
 8007688:	4610      	mov	r0, r2
 800768a:	b933      	cbnz	r3, 800769a <_free_r+0x2e>
 800768c:	6063      	str	r3, [r4, #4]
 800768e:	6014      	str	r4, [r2, #0]
 8007690:	4628      	mov	r0, r5
 8007692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007696:	f000 b8c8 	b.w	800782a <__malloc_unlock>
 800769a:	42a3      	cmp	r3, r4
 800769c:	d90c      	bls.n	80076b8 <_free_r+0x4c>
 800769e:	6821      	ldr	r1, [r4, #0]
 80076a0:	1862      	adds	r2, r4, r1
 80076a2:	4293      	cmp	r3, r2
 80076a4:	bf04      	itt	eq
 80076a6:	681a      	ldreq	r2, [r3, #0]
 80076a8:	685b      	ldreq	r3, [r3, #4]
 80076aa:	6063      	str	r3, [r4, #4]
 80076ac:	bf04      	itt	eq
 80076ae:	1852      	addeq	r2, r2, r1
 80076b0:	6022      	streq	r2, [r4, #0]
 80076b2:	6004      	str	r4, [r0, #0]
 80076b4:	e7ec      	b.n	8007690 <_free_r+0x24>
 80076b6:	4613      	mov	r3, r2
 80076b8:	685a      	ldr	r2, [r3, #4]
 80076ba:	b10a      	cbz	r2, 80076c0 <_free_r+0x54>
 80076bc:	42a2      	cmp	r2, r4
 80076be:	d9fa      	bls.n	80076b6 <_free_r+0x4a>
 80076c0:	6819      	ldr	r1, [r3, #0]
 80076c2:	1858      	adds	r0, r3, r1
 80076c4:	42a0      	cmp	r0, r4
 80076c6:	d10b      	bne.n	80076e0 <_free_r+0x74>
 80076c8:	6820      	ldr	r0, [r4, #0]
 80076ca:	4401      	add	r1, r0
 80076cc:	1858      	adds	r0, r3, r1
 80076ce:	4282      	cmp	r2, r0
 80076d0:	6019      	str	r1, [r3, #0]
 80076d2:	d1dd      	bne.n	8007690 <_free_r+0x24>
 80076d4:	6810      	ldr	r0, [r2, #0]
 80076d6:	6852      	ldr	r2, [r2, #4]
 80076d8:	605a      	str	r2, [r3, #4]
 80076da:	4401      	add	r1, r0
 80076dc:	6019      	str	r1, [r3, #0]
 80076de:	e7d7      	b.n	8007690 <_free_r+0x24>
 80076e0:	d902      	bls.n	80076e8 <_free_r+0x7c>
 80076e2:	230c      	movs	r3, #12
 80076e4:	602b      	str	r3, [r5, #0]
 80076e6:	e7d3      	b.n	8007690 <_free_r+0x24>
 80076e8:	6820      	ldr	r0, [r4, #0]
 80076ea:	1821      	adds	r1, r4, r0
 80076ec:	428a      	cmp	r2, r1
 80076ee:	bf04      	itt	eq
 80076f0:	6811      	ldreq	r1, [r2, #0]
 80076f2:	6852      	ldreq	r2, [r2, #4]
 80076f4:	6062      	str	r2, [r4, #4]
 80076f6:	bf04      	itt	eq
 80076f8:	1809      	addeq	r1, r1, r0
 80076fa:	6021      	streq	r1, [r4, #0]
 80076fc:	605c      	str	r4, [r3, #4]
 80076fe:	e7c7      	b.n	8007690 <_free_r+0x24>
 8007700:	bd38      	pop	{r3, r4, r5, pc}
 8007702:	bf00      	nop
 8007704:	20000090 	.word	0x20000090

08007708 <_malloc_r>:
 8007708:	b570      	push	{r4, r5, r6, lr}
 800770a:	1ccd      	adds	r5, r1, #3
 800770c:	f025 0503 	bic.w	r5, r5, #3
 8007710:	3508      	adds	r5, #8
 8007712:	2d0c      	cmp	r5, #12
 8007714:	bf38      	it	cc
 8007716:	250c      	movcc	r5, #12
 8007718:	2d00      	cmp	r5, #0
 800771a:	4606      	mov	r6, r0
 800771c:	db01      	blt.n	8007722 <_malloc_r+0x1a>
 800771e:	42a9      	cmp	r1, r5
 8007720:	d903      	bls.n	800772a <_malloc_r+0x22>
 8007722:	230c      	movs	r3, #12
 8007724:	6033      	str	r3, [r6, #0]
 8007726:	2000      	movs	r0, #0
 8007728:	bd70      	pop	{r4, r5, r6, pc}
 800772a:	f000 f87d 	bl	8007828 <__malloc_lock>
 800772e:	4a21      	ldr	r2, [pc, #132]	; (80077b4 <_malloc_r+0xac>)
 8007730:	6814      	ldr	r4, [r2, #0]
 8007732:	4621      	mov	r1, r4
 8007734:	b991      	cbnz	r1, 800775c <_malloc_r+0x54>
 8007736:	4c20      	ldr	r4, [pc, #128]	; (80077b8 <_malloc_r+0xb0>)
 8007738:	6823      	ldr	r3, [r4, #0]
 800773a:	b91b      	cbnz	r3, 8007744 <_malloc_r+0x3c>
 800773c:	4630      	mov	r0, r6
 800773e:	f000 f863 	bl	8007808 <_sbrk_r>
 8007742:	6020      	str	r0, [r4, #0]
 8007744:	4629      	mov	r1, r5
 8007746:	4630      	mov	r0, r6
 8007748:	f000 f85e 	bl	8007808 <_sbrk_r>
 800774c:	1c43      	adds	r3, r0, #1
 800774e:	d124      	bne.n	800779a <_malloc_r+0x92>
 8007750:	230c      	movs	r3, #12
 8007752:	6033      	str	r3, [r6, #0]
 8007754:	4630      	mov	r0, r6
 8007756:	f000 f868 	bl	800782a <__malloc_unlock>
 800775a:	e7e4      	b.n	8007726 <_malloc_r+0x1e>
 800775c:	680b      	ldr	r3, [r1, #0]
 800775e:	1b5b      	subs	r3, r3, r5
 8007760:	d418      	bmi.n	8007794 <_malloc_r+0x8c>
 8007762:	2b0b      	cmp	r3, #11
 8007764:	d90f      	bls.n	8007786 <_malloc_r+0x7e>
 8007766:	600b      	str	r3, [r1, #0]
 8007768:	50cd      	str	r5, [r1, r3]
 800776a:	18cc      	adds	r4, r1, r3
 800776c:	4630      	mov	r0, r6
 800776e:	f000 f85c 	bl	800782a <__malloc_unlock>
 8007772:	f104 000b 	add.w	r0, r4, #11
 8007776:	1d23      	adds	r3, r4, #4
 8007778:	f020 0007 	bic.w	r0, r0, #7
 800777c:	1ac3      	subs	r3, r0, r3
 800777e:	d0d3      	beq.n	8007728 <_malloc_r+0x20>
 8007780:	425a      	negs	r2, r3
 8007782:	50e2      	str	r2, [r4, r3]
 8007784:	e7d0      	b.n	8007728 <_malloc_r+0x20>
 8007786:	428c      	cmp	r4, r1
 8007788:	684b      	ldr	r3, [r1, #4]
 800778a:	bf16      	itet	ne
 800778c:	6063      	strne	r3, [r4, #4]
 800778e:	6013      	streq	r3, [r2, #0]
 8007790:	460c      	movne	r4, r1
 8007792:	e7eb      	b.n	800776c <_malloc_r+0x64>
 8007794:	460c      	mov	r4, r1
 8007796:	6849      	ldr	r1, [r1, #4]
 8007798:	e7cc      	b.n	8007734 <_malloc_r+0x2c>
 800779a:	1cc4      	adds	r4, r0, #3
 800779c:	f024 0403 	bic.w	r4, r4, #3
 80077a0:	42a0      	cmp	r0, r4
 80077a2:	d005      	beq.n	80077b0 <_malloc_r+0xa8>
 80077a4:	1a21      	subs	r1, r4, r0
 80077a6:	4630      	mov	r0, r6
 80077a8:	f000 f82e 	bl	8007808 <_sbrk_r>
 80077ac:	3001      	adds	r0, #1
 80077ae:	d0cf      	beq.n	8007750 <_malloc_r+0x48>
 80077b0:	6025      	str	r5, [r4, #0]
 80077b2:	e7db      	b.n	800776c <_malloc_r+0x64>
 80077b4:	20000090 	.word	0x20000090
 80077b8:	20000094 	.word	0x20000094

080077bc <_realloc_r>:
 80077bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077be:	4607      	mov	r7, r0
 80077c0:	4614      	mov	r4, r2
 80077c2:	460e      	mov	r6, r1
 80077c4:	b921      	cbnz	r1, 80077d0 <_realloc_r+0x14>
 80077c6:	4611      	mov	r1, r2
 80077c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80077cc:	f7ff bf9c 	b.w	8007708 <_malloc_r>
 80077d0:	b922      	cbnz	r2, 80077dc <_realloc_r+0x20>
 80077d2:	f7ff ff4b 	bl	800766c <_free_r>
 80077d6:	4625      	mov	r5, r4
 80077d8:	4628      	mov	r0, r5
 80077da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077dc:	f000 f826 	bl	800782c <_malloc_usable_size_r>
 80077e0:	42a0      	cmp	r0, r4
 80077e2:	d20f      	bcs.n	8007804 <_realloc_r+0x48>
 80077e4:	4621      	mov	r1, r4
 80077e6:	4638      	mov	r0, r7
 80077e8:	f7ff ff8e 	bl	8007708 <_malloc_r>
 80077ec:	4605      	mov	r5, r0
 80077ee:	2800      	cmp	r0, #0
 80077f0:	d0f2      	beq.n	80077d8 <_realloc_r+0x1c>
 80077f2:	4631      	mov	r1, r6
 80077f4:	4622      	mov	r2, r4
 80077f6:	f7ff fc11 	bl	800701c <memcpy>
 80077fa:	4631      	mov	r1, r6
 80077fc:	4638      	mov	r0, r7
 80077fe:	f7ff ff35 	bl	800766c <_free_r>
 8007802:	e7e9      	b.n	80077d8 <_realloc_r+0x1c>
 8007804:	4635      	mov	r5, r6
 8007806:	e7e7      	b.n	80077d8 <_realloc_r+0x1c>

08007808 <_sbrk_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	4c06      	ldr	r4, [pc, #24]	; (8007824 <_sbrk_r+0x1c>)
 800780c:	2300      	movs	r3, #0
 800780e:	4605      	mov	r5, r0
 8007810:	4608      	mov	r0, r1
 8007812:	6023      	str	r3, [r4, #0]
 8007814:	f7fa f9d2 	bl	8001bbc <_sbrk>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	d102      	bne.n	8007822 <_sbrk_r+0x1a>
 800781c:	6823      	ldr	r3, [r4, #0]
 800781e:	b103      	cbz	r3, 8007822 <_sbrk_r+0x1a>
 8007820:	602b      	str	r3, [r5, #0]
 8007822:	bd38      	pop	{r3, r4, r5, pc}
 8007824:	20000438 	.word	0x20000438

08007828 <__malloc_lock>:
 8007828:	4770      	bx	lr

0800782a <__malloc_unlock>:
 800782a:	4770      	bx	lr

0800782c <_malloc_usable_size_r>:
 800782c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007830:	1f18      	subs	r0, r3, #4
 8007832:	2b00      	cmp	r3, #0
 8007834:	bfbc      	itt	lt
 8007836:	580b      	ldrlt	r3, [r1, r0]
 8007838:	18c0      	addlt	r0, r0, r3
 800783a:	4770      	bx	lr

0800783c <_init>:
 800783c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783e:	bf00      	nop
 8007840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007842:	bc08      	pop	{r3}
 8007844:	469e      	mov	lr, r3
 8007846:	4770      	bx	lr

08007848 <_fini>:
 8007848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784a:	bf00      	nop
 800784c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800784e:	bc08      	pop	{r3}
 8007850:	469e      	mov	lr, r3
 8007852:	4770      	bx	lr
