
CubeRev21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b88  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08006d80  08006d80  00016d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f6c  08006f6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f6c  08006f6c  00016f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f74  08006f74  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f74  08006f74  00016f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f78  08006f78  00016f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  2000000c  08006f88  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08006f88  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5fd  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002231  00000000  00000000  0002d637  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb8  00000000  00000000  0002f868  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a80  00000000  00000000  00030420  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d996  00000000  00000000  00030ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c76e  00000000  00000000  0005e836  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010fbb4  00000000  00000000  0006afa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017ab58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dd4  00000000  00000000  0017abd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006d68 	.word	0x08006d68

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08006d68 	.word	0x08006d68

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800053c:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <MX_CRC_Init+0x3c>)
 800053e:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <MX_CRC_Init+0x40>)
 8000540:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_CRC_Init+0x3c>)
 8000544:	2200      	movs	r2, #0
 8000546:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000548:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <MX_CRC_Init+0x3c>)
 800054a:	2200      	movs	r2, #0
 800054c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_CRC_Init+0x3c>)
 8000550:	2200      	movs	r2, #0
 8000552:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <MX_CRC_Init+0x3c>)
 8000556:	2200      	movs	r2, #0
 8000558:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <MX_CRC_Init+0x3c>)
 800055c:	2203      	movs	r2, #3
 800055e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <MX_CRC_Init+0x3c>)
 8000562:	f001 feef 	bl	8002344 <HAL_CRC_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800056c:	f001 f812 	bl	8001594 <Error_Handler>
  }

}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	2000002c 	.word	0x2000002c
 8000578:	40023000 	.word	0x40023000

0800057c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <HAL_CRC_MspInit+0x38>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d10b      	bne.n	80005a6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <HAL_CRC_MspInit+0x3c>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a09      	ldr	r2, [pc, #36]	; (80005b8 <HAL_CRC_MspInit+0x3c>)
 8000594:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <HAL_CRC_MspInit+0x3c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	40023000 	.word	0x40023000
 80005b8:	40023800 	.word	0x40023800

080005bc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b090      	sub	sp, #64	; 0x40
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005d2:	4bb2      	ldr	r3, [pc, #712]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4ab1      	ldr	r2, [pc, #708]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005d8:	f043 0310 	orr.w	r3, r3, #16
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4baf      	ldr	r3, [pc, #700]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0310 	and.w	r3, r3, #16
 80005e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80005e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80005ea:	4bac      	ldr	r3, [pc, #688]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4aab      	ldr	r2, [pc, #684]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4ba9      	ldr	r3, [pc, #676]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4ba6      	ldr	r3, [pc, #664]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4aa5      	ldr	r2, [pc, #660]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4ba3      	ldr	r3, [pc, #652]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	623b      	str	r3, [r7, #32]
 8000618:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800061a:	4ba0      	ldr	r3, [pc, #640]	; (800089c <MX_GPIO_Init+0x2e0>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a9f      	ldr	r2, [pc, #636]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000620:	f043 0320 	orr.w	r3, r3, #32
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b9d      	ldr	r3, [pc, #628]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0320 	and.w	r3, r3, #32
 800062e:	61fb      	str	r3, [r7, #28]
 8000630:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000632:	4b9a      	ldr	r3, [pc, #616]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a99      	ldr	r2, [pc, #612]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b97      	ldr	r3, [pc, #604]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000646:	61bb      	str	r3, [r7, #24]
 8000648:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b94      	ldr	r3, [pc, #592]	; (800089c <MX_GPIO_Init+0x2e0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a93      	ldr	r2, [pc, #588]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b91      	ldr	r3, [pc, #580]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b8e      	ldr	r3, [pc, #568]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a8d      	ldr	r2, [pc, #564]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b8b      	ldr	r3, [pc, #556]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800067a:	4b88      	ldr	r3, [pc, #544]	; (800089c <MX_GPIO_Init+0x2e0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a87      	ldr	r2, [pc, #540]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000680:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b85      	ldr	r3, [pc, #532]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000692:	4b82      	ldr	r3, [pc, #520]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a81      	ldr	r2, [pc, #516]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b7f      	ldr	r3, [pc, #508]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006aa:	4b7c      	ldr	r3, [pc, #496]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a7b      	ldr	r2, [pc, #492]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006b0:	f043 0308 	orr.w	r3, r3, #8
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b79      	ldr	r3, [pc, #484]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0308 	and.w	r3, r3, #8
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80006c2:	4b76      	ldr	r3, [pc, #472]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a75      	ldr	r2, [pc, #468]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b73      	ldr	r3, [pc, #460]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED_4_Pin|LWL_OUT_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	f244 0108 	movw	r1, #16392	; 0x4008
 80006e0:	486f      	ldr	r0, [pc, #444]	; (80008a0 <MX_GPIO_Init+0x2e4>)
 80006e2:	f002 fb4f 	bl	8002d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_3_Pin|LED_2_Pin|LED_1_Pin|SD_CS_Pin
 80006e6:	2200      	movs	r2, #0
 80006e8:	f24e 4138 	movw	r1, #58424	; 0xe438
 80006ec:	486d      	ldr	r0, [pc, #436]	; (80008a4 <MX_GPIO_Init+0x2e8>)
 80006ee:	f002 fb49 	bl	8002d84 <HAL_GPIO_WritePin>
                          |nCS_DMS1_Pin|nCS_DMS2_Pin|nCS_DMS3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, nCS_DMS4_Pin|nCS_DMS5_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2103      	movs	r1, #3
 80006f6:	486c      	ldr	r0, [pc, #432]	; (80008a8 <MX_GPIO_Init+0x2ec>)
 80006f8:	f002 fb44 	bl	8002d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCS_DMS6_GPIO_Port, nCS_DMS6_Pin, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2180      	movs	r1, #128	; 0x80
 8000700:	486a      	ldr	r0, [pc, #424]	; (80008ac <MX_GPIO_Init+0x2f0>)
 8000702:	f002 fb3f 	bl	8002d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, FL1_HLD_Pin|FL1_WP_Pin|FL1_RES_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800070c:	4868      	ldr	r0, [pc, #416]	; (80008b0 <MX_GPIO_Init+0x2f4>)
 800070e:	f002 fb39 	bl	8002d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL1_CS2_GPIO_Port, FL1_CS2_Pin, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000718:	4865      	ldr	r0, [pc, #404]	; (80008b0 <MX_GPIO_Init+0x2f4>)
 800071a:	f002 fb33 	bl	8002d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL1_CS1_GPIO_Port, FL1_CS1_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000724:	4863      	ldr	r0, [pc, #396]	; (80008b4 <MX_GPIO_Init+0x2f8>)
 8000726:	f002 fb2d 	bl	8002d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, nCS_PT3_Pin|FL2_HLD_Pin|FL2_RES_Pin|FL2_WP_Pin
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 4167 	mov.w	r1, #59136	; 0xe700
 8000730:	4861      	ldr	r0, [pc, #388]	; (80008b8 <MX_GPIO_Init+0x2fc>)
 8000732:	f002 fb27 	bl	8002d84 <HAL_GPIO_WritePin>
                          |nCS_PT2_Pin|nCS_PT1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FL2_CS2_Pin|FL2_CS1_Pin, GPIO_PIN_SET);
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800073c:	485e      	ldr	r0, [pc, #376]	; (80008b8 <MX_GPIO_Init+0x2fc>)
 800073e:	f002 fb21 	bl	8002d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
 8000742:	f64f 7318 	movw	r3, #65304	; 0xff18
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000748:	2303      	movs	r3, #3
 800074a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000754:	4619      	mov	r1, r3
 8000756:	4855      	ldr	r0, [pc, #340]	; (80008ac <MX_GPIO_Init+0x2f0>)
 8000758:	f001 ff66 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LWL_IN_Pin;
 800075c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000760:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000762:	2300      	movs	r3, #0
 8000764:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LWL_IN_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800076e:	4619      	mov	r1, r3
 8000770:	484b      	ldr	r0, [pc, #300]	; (80008a0 <MX_GPIO_Init+0x2e4>)
 8000772:	f001 ff59 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000776:	f24e 33ff 	movw	r3, #58367	; 0xe3ff
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800077c:	2303      	movs	r3, #3
 800077e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000784:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000788:	4619      	mov	r1, r3
 800078a:	484c      	ldr	r0, [pc, #304]	; (80008bc <MX_GPIO_Init+0x300>)
 800078c:	f001 ff4c 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI10 PI11 PI12 PI13
                           PI15 PI0 PI1 PI2
                           PI4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000790:	f64b 4317 	movw	r3, #48151	; 0xbc17
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000796:	2303      	movs	r3, #3
 8000798:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800079e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007a2:	4619      	mov	r1, r3
 80007a4:	483e      	ldr	r0, [pc, #248]	; (80008a0 <MX_GPIO_Init+0x2e4>)
 80007a6:	f001 ff3f 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF6
                           PF11 PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 80007aa:	f641 0347 	movw	r3, #6215	; 0x1847
 80007ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b0:	2303      	movs	r3, #3
 80007b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007bc:	4619      	mov	r1, r3
 80007be:	4839      	ldr	r0, [pc, #228]	; (80008a4 <MX_GPIO_Init+0x2e8>)
 80007c0:	f001 ff32 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LED_4_Pin|LWL_OUT_Pin;
 80007c4:	f244 0308 	movw	r3, #16392	; 0x4008
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80007d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007da:	4619      	mov	r1, r3
 80007dc:	4830      	ldr	r0, [pc, #192]	; (80008a0 <MX_GPIO_Init+0x2e4>)
 80007de:	f001 ff23 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LED_1_Pin|SD_CS_Pin
 80007e2:	f24e 4338 	movw	r3, #58424	; 0xe438
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |nCS_DMS1_Pin|nCS_DMS2_Pin|nCS_DMS3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f8:	4619      	mov	r1, r3
 80007fa:	482a      	ldr	r0, [pc, #168]	; (80008a4 <MX_GPIO_Init+0x2e8>)
 80007fc:	f001 ff14 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH2 PH3
                           PH4 PH5 PH6 PH7
                           PH8 PH13 PH14 PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000800:	f24e 13ff 	movw	r3, #57855	; 0xe1ff
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000806:	2303      	movs	r3, #3
 8000808:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800080e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000812:	4619      	mov	r1, r3
 8000814:	4826      	ldr	r0, [pc, #152]	; (80008b0 <MX_GPIO_Init+0x2f4>)
 8000816:	f001 ff07 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800081a:	231e      	movs	r3, #30
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800081e:	2303      	movs	r3, #3
 8000820:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800082a:	4619      	mov	r1, r3
 800082c:	4824      	ldr	r0, [pc, #144]	; (80008c0 <MX_GPIO_Init+0x304>)
 800082e:	f001 fefb 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000832:	f640 73e3 	movw	r3, #4067	; 0xfe3
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000838:	2303      	movs	r3, #3
 800083a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000840:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000844:	4619      	mov	r1, r3
 8000846:	481b      	ldr	r0, [pc, #108]	; (80008b4 <MX_GPIO_Init+0x2f8>)
 8000848:	f001 feee 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ0 PJ1 PJ2 PJ3
                           PJ4 PJ5 PJ12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800084c:	f241 033f 	movw	r3, #4159	; 0x103f
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000852:	2303      	movs	r3, #3
 8000854:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800085a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800085e:	4619      	mov	r1, r3
 8000860:	4818      	ldr	r0, [pc, #96]	; (80008c4 <MX_GPIO_Init+0x308>)
 8000862:	f001 fee1 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = nCS_DMS4_Pin|nCS_DMS5_Pin;
 8000866:	2303      	movs	r3, #3
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800087a:	4619      	mov	r1, r3
 800087c:	480a      	ldr	r0, [pc, #40]	; (80008a8 <MX_GPIO_Init+0x2ec>)
 800087e:	f001 fed3 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nCS_DMS6_Pin;
 8000882:	2380      	movs	r3, #128	; 0x80
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(nCS_DMS6_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000896:	4619      	mov	r1, r3
 8000898:	e016      	b.n	80008c8 <MX_GPIO_Init+0x30c>
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	40022000 	.word	0x40022000
 80008a4:	40021400 	.word	0x40021400
 80008a8:	40021800 	.word	0x40021800
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40021c00 	.word	0x40021c00
 80008b4:	40020400 	.word	0x40020400
 80008b8:	40020c00 	.word	0x40020c00
 80008bc:	40020800 	.word	0x40020800
 80008c0:	40020000 	.word	0x40020000
 80008c4:	40022400 	.word	0x40022400
 80008c8:	485d      	ldr	r0, [pc, #372]	; (8000a40 <MX_GPIO_Init+0x484>)
 80008ca:	f001 fead 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = FL1_HLD_Pin|FL1_WP_Pin|FL1_RES_Pin|FL1_CS2_Pin;
 80008ce:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e4:	4619      	mov	r1, r3
 80008e6:	4857      	ldr	r0, [pc, #348]	; (8000a44 <MX_GPIO_Init+0x488>)
 80008e8:	f001 fe9e 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FL1_CS1_Pin;
 80008ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FL1_CS1_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000902:	4619      	mov	r1, r3
 8000904:	4850      	ldr	r0, [pc, #320]	; (8000a48 <MX_GPIO_Init+0x48c>)
 8000906:	f001 fe8f 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = nCS_PT3_Pin|FL2_HLD_Pin|FL2_RES_Pin|FL2_CS2_Pin
 800090a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FL2_CS1_Pin|FL2_WP_Pin|nCS_PT2_Pin|nCS_PT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800091c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000920:	4619      	mov	r1, r3
 8000922:	484a      	ldr	r0, [pc, #296]	; (8000a4c <MX_GPIO_Init+0x490>)
 8000924:	f001 fe80 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MS_SEL_Pin;
 8000928:	2304      	movs	r3, #4
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MS_SEL_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000938:	4619      	mov	r1, r3
 800093a:	4845      	ldr	r0, [pc, #276]	; (8000a50 <MX_GPIO_Init+0x494>)
 800093c:	f001 fe74 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG5 PG6 PG7
                           PG8 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000940:	f64f 73e8 	movw	r3, #65512	; 0xffe8
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000946:	2303      	movs	r3, #3
 8000948:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800094e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000952:	4619      	mov	r1, r3
 8000954:	483e      	ldr	r0, [pc, #248]	; (8000a50 <MX_GPIO_Init+0x494>)
 8000956:	f001 fe67 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDRDY_DMS1_Pin;
 800095a:	2310      	movs	r3, #16
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095e:	4b3d      	ldr	r3, [pc, #244]	; (8000a54 <MX_GPIO_Init+0x498>)
 8000960:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(nDRDY_DMS1_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800096a:	4619      	mov	r1, r3
 800096c:	4838      	ldr	r0, [pc, #224]	; (8000a50 <MX_GPIO_Init+0x494>)
 800096e:	f001 fe5b 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = nDRDY_DMS2_Pin|nDRDY_DMS3_Pin|nDRDY_DMS5_Pin|nDRDY_DMS6_Pin;
 8000972:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000978:	4b36      	ldr	r3, [pc, #216]	; (8000a54 <MX_GPIO_Init+0x498>)
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000984:	4619      	mov	r1, r3
 8000986:	4834      	ldr	r0, [pc, #208]	; (8000a58 <MX_GPIO_Init+0x49c>)
 8000988:	f001 fe4e 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDRDY_DMS4_Pin;
 800098c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000992:	2300      	movs	r3, #0
 8000994:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(nDRDY_DMS4_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800099e:	4619      	mov	r1, r3
 80009a0:	482d      	ldr	r0, [pc, #180]	; (8000a58 <MX_GPIO_Init+0x49c>)
 80009a2:	f001 fe41 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80009a6:	23fb      	movs	r3, #251	; 0xfb
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009aa:	2303      	movs	r3, #3
 80009ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009b6:	4619      	mov	r1, r3
 80009b8:	4824      	ldr	r0, [pc, #144]	; (8000a4c <MX_GPIO_Init+0x490>)
 80009ba:	f001 fe35 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = nDRDY_PT3_Pin|nDRDY_PT2_Pin|nDRDY_PT1_Pin;
 80009be:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c4:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <MX_GPIO_Init+0x498>)
 80009c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80009cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d0:	4619      	mov	r1, r3
 80009d2:	4822      	ldr	r0, [pc, #136]	; (8000a5c <MX_GPIO_Init+0x4a0>)
 80009d4:	f001 fe28 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK3 PK4 PK5 PK6
                           PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80009d8:	23f8      	movs	r3, #248	; 0xf8
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009dc:	2303      	movs	r3, #3
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80009e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e8:	4619      	mov	r1, r3
 80009ea:	481d      	ldr	r0, [pc, #116]	; (8000a60 <MX_GPIO_Init+0x4a4>)
 80009ec:	f001 fe1c 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SODS_OPT_Pin|SOE_OPT_Pin|LO_OPT_Pin;
 80009f0:	23e0      	movs	r3, #224	; 0xe0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_GPIO_Init+0x498>)
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a00:	4619      	mov	r1, r3
 8000a02:	4818      	ldr	r0, [pc, #96]	; (8000a64 <MX_GPIO_Init+0x4a8>)
 8000a04:	f001 fe10 	bl	8002628 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2105      	movs	r1, #5
 8000a0c:	200a      	movs	r0, #10
 8000a0e:	f001 fc49 	bl	80022a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000a12:	200a      	movs	r0, #10
 8000a14:	f001 fc72 	bl	80022fc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2105      	movs	r1, #5
 8000a1c:	2017      	movs	r0, #23
 8000a1e:	f001 fc41 	bl	80022a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a22:	2017      	movs	r0, #23
 8000a24:	f001 fc6a 	bl	80022fc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2105      	movs	r1, #5
 8000a2c:	2028      	movs	r0, #40	; 0x28
 8000a2e:	f001 fc39 	bl	80022a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a32:	2028      	movs	r0, #40	; 0x28
 8000a34:	f001 fc62 	bl	80022fc <HAL_NVIC_EnableIRQ>

}
 8000a38:	bf00      	nop
 8000a3a:	3740      	adds	r7, #64	; 0x40
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40021c00 	.word	0x40021c00
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	40021800 	.word	0x40021800
 8000a54:	10110000 	.word	0x10110000
 8000a58:	40020000 	.word	0x40020000
 8000a5c:	40022400 	.word	0x40022400
 8000a60:	40022800 	.word	0x40022800
 8000a64:	40022000 	.word	0x40022000

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6c:	f001 faab 	bl	8001fc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a70:	f000 f83c 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a74:	f7ff fda2 	bl	80005bc <MX_GPIO_Init>
  MX_SPI2_Init();
 8000a78:	f000 fd9e 	bl	80015b8 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000a7c:	f000 fdda 	bl	8001634 <MX_SPI3_Init>
  MX_SPI6_Init();
 8000a80:	f000 fe92 	bl	80017a8 <MX_SPI6_Init>
  MX_UART4_Init();
 8000a84:	f001 f8e8 	bl	8001c58 <MX_UART4_Init>
  MX_UART8_Init();
 8000a88:	f001 f946 	bl	8001d18 <MX_UART8_Init>
  MX_UART5_Init();
 8000a8c:	f001 f914 	bl	8001cb8 <MX_UART5_Init>
  MX_CRC_Init();
 8000a90:	f7ff fd52 	bl	8000538 <MX_CRC_Init>
  MX_SPI4_Init();
 8000a94:	f000 fe0c 	bl	80016b0 <MX_SPI4_Init>
  MX_SPI5_Init();
 8000a98:	f000 fe48 	bl	800172c <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);  //clear all LEDs
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2120      	movs	r1, #32
 8000aa0:	480f      	ldr	r0, [pc, #60]	; (8000ae0 <main+0x78>)
 8000aa2:	f002 f96f 	bl	8002d84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2110      	movs	r1, #16
 8000aaa:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <main+0x78>)
 8000aac:	f002 f96a 	bl	8002d84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2108      	movs	r1, #8
 8000ab4:	480a      	ldr	r0, [pc, #40]	; (8000ae0 <main+0x78>)
 8000ab6:	f002 f965 	bl	8002d84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac0:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <main+0x7c>)
 8000ac2:	f002 f95f 	bl	8002d84 <HAL_GPIO_WritePin>

  if (!HAL_GPIO_ReadPin(MS_SEL_GPIO_Port, MS_SEL_Pin)) {
 8000ac6:	2104      	movs	r1, #4
 8000ac8:	4807      	ldr	r0, [pc, #28]	; (8000ae8 <main+0x80>)
 8000aca:	f002 f93b 	bl	8002d44 <HAL_GPIO_ReadPin>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d102      	bne.n	8000ada <main+0x72>
    main_master();
 8000ad4:	f000 f89e 	bl	8000c14 <main_master>
 8000ad8:	e001      	b.n	8000ade <main+0x76>
  } else { //Slave loop
    main_slave();
 8000ada:	f000 f933 	bl	8000d44 <main_slave>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <main+0x76>
 8000ae0:	40021400 	.word	0x40021400
 8000ae4:	40022000 	.word	0x40022000
 8000ae8:	40021800 	.word	0x40021800

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b0b8      	sub	sp, #224	; 0xe0
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000af6:	2234      	movs	r2, #52	; 0x34
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f006 f92c 	bl	8006d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b10:	f107 0308 	add.w	r3, r7, #8
 8000b14:	2290      	movs	r2, #144	; 0x90
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f006 f91d 	bl	8006d58 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	4b3b      	ldr	r3, [pc, #236]	; (8000c0c <SystemClock_Config+0x120>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a3a      	ldr	r2, [pc, #232]	; (8000c0c <SystemClock_Config+0x120>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b38      	ldr	r3, [pc, #224]	; (8000c0c <SystemClock_Config+0x120>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b36:	4b36      	ldr	r3, [pc, #216]	; (8000c10 <SystemClock_Config+0x124>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a35      	ldr	r2, [pc, #212]	; (8000c10 <SystemClock_Config+0x124>)
 8000b3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b40:	6013      	str	r3, [r2, #0]
 8000b42:	4b33      	ldr	r3, [pc, #204]	; (8000c10 <SystemClock_Config+0x124>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b54:	2301      	movs	r3, #1
 8000b56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b5a:	2310      	movs	r3, #16
 8000b5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b60:	2302      	movs	r3, #2
 8000b62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b72:	23c0      	movs	r3, #192	; 0xc0
 8000b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b84:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f002 f9bd 	bl	8002f08 <HAL_RCC_OscConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000b94:	f000 fcfe 	bl	8001594 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b98:	f002 f966 	bl	8002e68 <HAL_PWREx_EnableOverDrive>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000ba2:	f000 fcf7 	bl	8001594 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba6:	230f      	movs	r3, #15
 8000ba8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bac:	2302      	movs	r3, #2
 8000bae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bb8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000bc0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000bc8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000bcc:	2106      	movs	r1, #6
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f002 fd0a 	bl	80035e8 <HAL_RCC_ClockConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000bda:	f000 fcdb 	bl	8001594 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART5
 8000bde:	f44f 5318 	mov.w	r3, #9728	; 0x2600
 8000be2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART8;
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f002 ff85 	bl	8003b04 <HAL_RCCEx_PeriphCLKConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000c00:	f000 fcc8 	bl	8001594 <Error_Handler>
  }
}
 8000c04:	bf00      	nop
 8000c06:	37e0      	adds	r7, #224	; 0xe0
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40007000 	.word	0x40007000

08000c14 <main_master>:

/* USER CODE BEGIN 4 */
void main_master(void) {
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
  //HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);  //ON = MS set to Master
  //uint8_t bufferOff[3] = {0x01, 0x03, 0x05};
  //uint8_t bufferOn[3] = {0x02, 0x04, 0x06};

  uint32_t lastInit = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
  uint32_t lastBlinky = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]

  uint8_t readSensor = 3; //DMS: 0-5, PT100: 6-8
 8000c22:	2303      	movs	r3, #3
 8000c24:	70fb      	strb	r3, [r7, #3]

  for(int sensors = 0; sensors <=8 ; sensors++){
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	e016      	b.n	8000c5a <main_master+0x46>
	  if(sensors <= 5)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b05      	cmp	r3, #5
 8000c30:	dc08      	bgt.n	8000c44 <main_master+0x30>
		  adc_scan_start(sensors, 2000, 128, 0);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	b258      	sxtb	r0, r3
 8000c36:	2300      	movs	r3, #0
 8000c38:	2280      	movs	r2, #128	; 0x80
 8000c3a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000c3e:	f000 f933 	bl	8000ea8 <adc_scan_start>
 8000c42:	e007      	b.n	8000c54 <main_master+0x40>
	  else
		  adc_scan_start(sensors, 2000, 1, 0);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	b258      	sxtb	r0, r3
 8000c48:	2300      	movs	r3, #0
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000c50:	f000 f92a 	bl	8000ea8 <adc_scan_start>
  for(int sensors = 0; sensors <=8 ; sensors++){
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3301      	adds	r3, #1
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b08      	cmp	r3, #8
 8000c5e:	dde5      	ble.n	8000c2c <main_master+0x18>
  }

  HAL_Delay(1000);
 8000c60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c64:	f001 fa0c 	bl	8002080 <HAL_Delay>

  uint8_t softgain = 1;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	70bb      	strb	r3, [r7, #2]
  uint8_t offset = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	707b      	strb	r3, [r7, #1]
  uint8_t dout = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	703b      	strb	r3, [r7, #0]
  HAL_UART_Transmit(&huart4, (uint8_t *)&dout, sizeof(dout), HAL_MAX_DELAY);
 8000c74:	4639      	mov	r1, r7
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	482d      	ldr	r0, [pc, #180]	; (8000d34 <main_master+0x120>)
 8000c7e:	f004 ffe5 	bl	8005c4c <HAL_UART_Transmit>

  while (1) { //Master loop


	  data = adc_scan(readSensor, 0x01);
 8000c82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c86:	2101      	movs	r1, #1
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 f8fb 	bl	8000e84 <adc_scan>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b29      	ldr	r3, [pc, #164]	; (8000d38 <main_master+0x124>)
 8000c94:	801a      	strh	r2, [r3, #0]
	  dout = data * softgain + offset;
 8000c96:	4b28      	ldr	r3, [pc, #160]	; (8000d38 <main_master+0x124>)
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	78ba      	ldrb	r2, [r7, #2]
 8000c9e:	fb12 f303 	smulbb	r3, r2, r3
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	787b      	ldrb	r3, [r7, #1]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	703b      	strb	r3, [r7, #0]
	  write_DAPI(&dout);
 8000cac:	463b      	mov	r3, r7
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fc5e 	bl	8001570 <write_DAPI>
	  write_EXP(&dout);
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 fc48 	bl	800154c <write_EXP>


	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, HAL_GPIO_ReadPin(SODS_OPT_GPIO_Port, SODS_OPT_Pin));
 8000cbc:	2120      	movs	r1, #32
 8000cbe:	481f      	ldr	r0, [pc, #124]	; (8000d3c <main_master+0x128>)
 8000cc0:	f002 f840 	bl	8002d44 <HAL_GPIO_ReadPin>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	2110      	movs	r1, #16
 8000cca:	481d      	ldr	r0, [pc, #116]	; (8000d40 <main_master+0x12c>)
 8000ccc:	f002 f85a 	bl	8002d84 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, HAL_GPIO_ReadPin(LO_OPT_GPIO_Port, LO_OPT_Pin));
 8000cd0:	2180      	movs	r1, #128	; 0x80
 8000cd2:	481a      	ldr	r0, [pc, #104]	; (8000d3c <main_master+0x128>)
 8000cd4:	f002 f836 	bl	8002d44 <HAL_GPIO_ReadPin>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	2108      	movs	r1, #8
 8000cde:	4818      	ldr	r0, [pc, #96]	; (8000d40 <main_master+0x12c>)
 8000ce0:	f002 f850 	bl	8002d84 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, HAL_GPIO_ReadPin(SOE_OPT_GPIO_Port, SOE_OPT_Pin));
 8000ce4:	2140      	movs	r1, #64	; 0x40
 8000ce6:	4815      	ldr	r0, [pc, #84]	; (8000d3c <main_master+0x128>)
 8000ce8:	f002 f82c 	bl	8002d44 <HAL_GPIO_ReadPin>
 8000cec:	4603      	mov	r3, r0
 8000cee:	461a      	mov	r2, r3
 8000cf0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cf4:	4811      	ldr	r0, [pc, #68]	; (8000d3c <main_master+0x128>)
 8000cf6:	f002 f845 	bl	8002d84 <HAL_GPIO_WritePin>




	  if(lastInit + 5000 < HAL_GetTick()){
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	f241 3488 	movw	r4, #5000	; 0x1388
 8000d00:	441c      	add	r4, r3
 8000d02:	f001 f9b1 	bl	8002068 <HAL_GetTick>
 8000d06:	4603      	mov	r3, r0
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d202      	bcs.n	8000d12 <main_master+0xfe>
		  lastInit = HAL_GetTick();
 8000d0c:	f001 f9ac 	bl	8002068 <HAL_GetTick>
 8000d10:	60f8      	str	r0, [r7, #12]
		    }
		   */

	   }

	  if(lastBlinky + 1000 < HAL_GetTick()){
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	f503 747a 	add.w	r4, r3, #1000	; 0x3e8
 8000d18:	f001 f9a6 	bl	8002068 <HAL_GetTick>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	429c      	cmp	r4, r3
 8000d20:	d2af      	bcs.n	8000c82 <main_master+0x6e>
	  		  lastBlinky = HAL_GetTick();
 8000d22:	f001 f9a1 	bl	8002068 <HAL_GetTick>
 8000d26:	60b8      	str	r0, [r7, #8]
	  		  HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000d28:	2120      	movs	r1, #32
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <main_master+0x12c>)
 8000d2c:	f002 f856 	bl	8002ddc <HAL_GPIO_TogglePin>
	  data = adc_scan(readSensor, 0x01);
 8000d30:	e7a7      	b.n	8000c82 <main_master+0x6e>
 8000d32:	bf00      	nop
 8000d34:	20000344 	.word	0x20000344
 8000d38:	20000028 	.word	0x20000028
 8000d3c:	40022000 	.word	0x40022000
 8000d40:	40021400 	.word	0x40021400

08000d44 <main_slave>:
    HAL_Delay(100);
    */
  }
}

void main_slave(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
  uint8_t buffer[1] = {0x00};
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	713b      	strb	r3, [r7, #4]
  while (1) {
    HAL_UART_Receive(&huart5, buffer, sizeof(buffer), 5);
 8000d4e:	1d39      	adds	r1, r7, #4
 8000d50:	2305      	movs	r3, #5
 8000d52:	2201      	movs	r2, #1
 8000d54:	481e      	ldr	r0, [pc, #120]	; (8000dd0 <main_slave+0x8c>)
 8000d56:	f005 f80a 	bl	8005d6e <HAL_UART_Receive>
    if (buffer[0] == 0x01) {
 8000d5a:	793b      	ldrb	r3, [r7, #4]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d105      	bne.n	8000d6c <main_slave+0x28>
      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2110      	movs	r1, #16
 8000d64:	481b      	ldr	r0, [pc, #108]	; (8000dd4 <main_slave+0x90>)
 8000d66:	f002 f80d 	bl	8002d84 <HAL_GPIO_WritePin>
 8000d6a:	e02d      	b.n	8000dc8 <main_slave+0x84>
    } else if (buffer[0] == 0x02) {
 8000d6c:	793b      	ldrb	r3, [r7, #4]
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d105      	bne.n	8000d7e <main_slave+0x3a>
      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	2110      	movs	r1, #16
 8000d76:	4817      	ldr	r0, [pc, #92]	; (8000dd4 <main_slave+0x90>)
 8000d78:	f002 f804 	bl	8002d84 <HAL_GPIO_WritePin>
 8000d7c:	e024      	b.n	8000dc8 <main_slave+0x84>
    } else if (buffer[0] == 0x03) {
 8000d7e:	793b      	ldrb	r3, [r7, #4]
 8000d80:	2b03      	cmp	r3, #3
 8000d82:	d105      	bne.n	8000d90 <main_slave+0x4c>
      HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2108      	movs	r1, #8
 8000d88:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <main_slave+0x90>)
 8000d8a:	f001 fffb 	bl	8002d84 <HAL_GPIO_WritePin>
 8000d8e:	e01b      	b.n	8000dc8 <main_slave+0x84>
    } else if (buffer[0] == 0x04) {
 8000d90:	793b      	ldrb	r3, [r7, #4]
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d105      	bne.n	8000da2 <main_slave+0x5e>
      HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	2108      	movs	r1, #8
 8000d9a:	480e      	ldr	r0, [pc, #56]	; (8000dd4 <main_slave+0x90>)
 8000d9c:	f001 fff2 	bl	8002d84 <HAL_GPIO_WritePin>
 8000da0:	e012      	b.n	8000dc8 <main_slave+0x84>
    }  else if (buffer[0] == 0x05) {
 8000da2:	793b      	ldrb	r3, [r7, #4]
 8000da4:	2b05      	cmp	r3, #5
 8000da6:	d106      	bne.n	8000db6 <main_slave+0x72>
      HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dae:	480a      	ldr	r0, [pc, #40]	; (8000dd8 <main_slave+0x94>)
 8000db0:	f001 ffe8 	bl	8002d84 <HAL_GPIO_WritePin>
 8000db4:	e008      	b.n	8000dc8 <main_slave+0x84>
    } else if (buffer[0] == 0x06) {
 8000db6:	793b      	ldrb	r3, [r7, #4]
 8000db8:	2b06      	cmp	r3, #6
 8000dba:	d105      	bne.n	8000dc8 <main_slave+0x84>
      HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <main_slave+0x94>)
 8000dc4:	f001 ffde 	bl	8002d84 <HAL_GPIO_WritePin>
    }
    buffer[1] = 0x00;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	717b      	strb	r3, [r7, #5]
    HAL_UART_Receive(&huart5, buffer, sizeof(buffer), 5);
 8000dcc:	e7bf      	b.n	8000d4e <main_slave+0xa>
 8000dce:	bf00      	nop
 8000dd0:	20000244 	.word	0x20000244
 8000dd4:	40021400 	.word	0x40021400
 8000dd8:	40022000 	.word	0x40022000

08000ddc <cs_enable>:
  }
}

int cs_enable(int8_t id){
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(port_from_id(id), pin_from_id(id), GPIO_PIN_RESET);
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 fa3a 	bl	8001264 <port_from_id>
 8000df0:	4604      	mov	r4, r0
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f9f6 	bl	80011e8 <pin_from_id>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2200      	movs	r2, #0
 8000e00:	4619      	mov	r1, r3
 8000e02:	4620      	mov	r0, r4
 8000e04:	f001 ffbe 	bl	8002d84 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f001 f939 	bl	8002080 <HAL_Delay>
	return 0;
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd90      	pop	{r4, r7, pc}

08000e18 <cs_disable>:

int cs_disable(int8_t id){
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(port_from_id(id), pin_from_id(id), GPIO_PIN_SET);
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 fa1c 	bl	8001264 <port_from_id>
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f9d8 	bl	80011e8 <pin_from_id>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4620      	mov	r0, r4
 8000e40:	f001 ffa0 	bl	8002d84 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e44:	2001      	movs	r0, #1
 8000e46:	f001 f91b 	bl	8002080 <HAL_Delay>
	return 0;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd90      	pop	{r4, r7, pc}

08000e54 <wr_spi>:

int wr_spi(int8_t id, uint8_t cmd){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	460a      	mov	r2, r1
 8000e5e:	71fb      	strb	r3, [r7, #7]
 8000e60:	4613      	mov	r3, r2
 8000e62:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Transmit(get_hspi_from_id(id), &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 fab9 	bl	80013e0 <get_hspi_from_id>
 8000e6e:	1db9      	adds	r1, r7, #6
 8000e70:	f04f 33ff 	mov.w	r3, #4294967295
 8000e74:	2201      	movs	r2, #1
 8000e76:	f004 f859 	bl	8004f2c <HAL_SPI_Transmit>
	return 0;
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <adc_scan>:

uint16_t adc_scan(int8_t id, uint8_t chn){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	460a      	mov	r2, r1
 8000e8e:	71fb      	strb	r3, [r7, #7]
 8000e90:	4613      	mov	r3, r2
 8000e92:	71bb      	strb	r3, [r7, #6]
	return rd_data(id);
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 f947 	bl	800112c <rd_data>
 8000e9e:	4603      	mov	r3, r0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <adc_scan_start>:

int16_t adc_scan_start(int8_t id, uint_least16_t drate, uint_least8_t gain, uint_least16_t current){
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4604      	mov	r4, r0
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	71fb      	strb	r3, [r7, #7]
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80bb      	strh	r3, [r7, #4]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	71bb      	strb	r3, [r7, #6]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	807b      	strh	r3, [r7, #2]
	int16_t r = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	81fb      	strh	r3, [r7, #14]
	switch(drate)
 8000eca:	88bb      	ldrh	r3, [r7, #4]
 8000ecc:	2ba0      	cmp	r3, #160	; 0xa0
 8000ece:	d02d      	beq.n	8000f2c <adc_scan_start+0x84>
 8000ed0:	2ba0      	cmp	r3, #160	; 0xa0
 8000ed2:	dc0b      	bgt.n	8000eec <adc_scan_start+0x44>
 8000ed4:	2b0a      	cmp	r3, #10
 8000ed6:	d01d      	beq.n	8000f14 <adc_scan_start+0x6c>
 8000ed8:	2b0a      	cmp	r3, #10
 8000eda:	dc02      	bgt.n	8000ee2 <adc_scan_start+0x3a>
 8000edc:	2b05      	cmp	r3, #5
 8000ede:	d016      	beq.n	8000f0e <adc_scan_start+0x66>
 8000ee0:	e01e      	b.n	8000f20 <adc_scan_start+0x78>
 8000ee2:	2b14      	cmp	r3, #20
 8000ee4:	d019      	beq.n	8000f1a <adc_scan_start+0x72>
 8000ee6:	2b50      	cmp	r3, #80	; 0x50
 8000ee8:	d01d      	beq.n	8000f26 <adc_scan_start+0x7e>
 8000eea:	e019      	b.n	8000f20 <adc_scan_start+0x78>
 8000eec:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000ef0:	d022      	beq.n	8000f38 <adc_scan_start+0x90>
 8000ef2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000ef6:	dc03      	bgt.n	8000f00 <adc_scan_start+0x58>
 8000ef8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000efc:	d019      	beq.n	8000f32 <adc_scan_start+0x8a>
 8000efe:	e00f      	b.n	8000f20 <adc_scan_start+0x78>
 8000f00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f04:	d01b      	beq.n	8000f3e <adc_scan_start+0x96>
 8000f06:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f0a:	d01b      	beq.n	8000f44 <adc_scan_start+0x9c>
 8000f0c:	e008      	b.n	8000f20 <adc_scan_start+0x78>
	  {
	    case    5: drate = SYS0_DOR5;    break;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	80bb      	strh	r3, [r7, #4]
 8000f12:	e01a      	b.n	8000f4a <adc_scan_start+0xa2>
	    case   10: drate = SYS0_DOR10;   break;
 8000f14:	2301      	movs	r3, #1
 8000f16:	80bb      	strh	r3, [r7, #4]
 8000f18:	e017      	b.n	8000f4a <adc_scan_start+0xa2>
	    case   20: drate = SYS0_DOR20;   break;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	80bb      	strh	r3, [r7, #4]
 8000f1e:	e014      	b.n	8000f4a <adc_scan_start+0xa2>
	    default:
	    case   40: drate = SYS0_DOR40;   break;
 8000f20:	2303      	movs	r3, #3
 8000f22:	80bb      	strh	r3, [r7, #4]
 8000f24:	e011      	b.n	8000f4a <adc_scan_start+0xa2>
	    case   80: drate = SYS0_DOR80;   break;
 8000f26:	2304      	movs	r3, #4
 8000f28:	80bb      	strh	r3, [r7, #4]
 8000f2a:	e00e      	b.n	8000f4a <adc_scan_start+0xa2>
	    case  160: drate = SYS0_DOR160;  break;
 8000f2c:	2305      	movs	r3, #5
 8000f2e:	80bb      	strh	r3, [r7, #4]
 8000f30:	e00b      	b.n	8000f4a <adc_scan_start+0xa2>
	    case  320: drate = SYS0_DOR320;  break;
 8000f32:	2306      	movs	r3, #6
 8000f34:	80bb      	strh	r3, [r7, #4]
 8000f36:	e008      	b.n	8000f4a <adc_scan_start+0xa2>
	    case  640: drate = SYS0_DOR640;  break;
 8000f38:	2307      	movs	r3, #7
 8000f3a:	80bb      	strh	r3, [r7, #4]
 8000f3c:	e005      	b.n	8000f4a <adc_scan_start+0xa2>
	    case 1000: drate = SYS0_DOR1000; break;
 8000f3e:	2308      	movs	r3, #8
 8000f40:	80bb      	strh	r3, [r7, #4]
 8000f42:	e002      	b.n	8000f4a <adc_scan_start+0xa2>
	    case 2000: drate = SYS0_DOR2000; break;
 8000f44:	2309      	movs	r3, #9
 8000f46:	80bb      	strh	r3, [r7, #4]
 8000f48:	bf00      	nop
	  }

	  switch(gain)
 8000f4a:	79bb      	ldrb	r3, [r7, #6]
 8000f4c:	2b10      	cmp	r3, #16
 8000f4e:	d01a      	beq.n	8000f86 <adc_scan_start+0xde>
 8000f50:	2b10      	cmp	r3, #16
 8000f52:	dc06      	bgt.n	8000f62 <adc_scan_start+0xba>
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	d010      	beq.n	8000f7a <adc_scan_start+0xd2>
 8000f58:	2b08      	cmp	r3, #8
 8000f5a:	d011      	beq.n	8000f80 <adc_scan_start+0xd8>
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d009      	beq.n	8000f74 <adc_scan_start+0xcc>
 8000f60:	e005      	b.n	8000f6e <adc_scan_start+0xc6>
 8000f62:	2b40      	cmp	r3, #64	; 0x40
 8000f64:	d015      	beq.n	8000f92 <adc_scan_start+0xea>
 8000f66:	2b80      	cmp	r3, #128	; 0x80
 8000f68:	d016      	beq.n	8000f98 <adc_scan_start+0xf0>
 8000f6a:	2b20      	cmp	r3, #32
 8000f6c:	d00e      	beq.n	8000f8c <adc_scan_start+0xe4>
	  {
	    default:
	    case   1: gain = SYS0_PGA1;   break;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	71bb      	strb	r3, [r7, #6]
 8000f72:	e014      	b.n	8000f9e <adc_scan_start+0xf6>
	    case   2: gain = SYS0_PGA2;   break;
 8000f74:	2310      	movs	r3, #16
 8000f76:	71bb      	strb	r3, [r7, #6]
 8000f78:	e011      	b.n	8000f9e <adc_scan_start+0xf6>
	    case   4: gain = SYS0_PGA4;   break;
 8000f7a:	2320      	movs	r3, #32
 8000f7c:	71bb      	strb	r3, [r7, #6]
 8000f7e:	e00e      	b.n	8000f9e <adc_scan_start+0xf6>
	    case   8: gain = SYS0_PGA8;   break;
 8000f80:	2330      	movs	r3, #48	; 0x30
 8000f82:	71bb      	strb	r3, [r7, #6]
 8000f84:	e00b      	b.n	8000f9e <adc_scan_start+0xf6>
	    case  16: gain = SYS0_PGA16;  break;
 8000f86:	2340      	movs	r3, #64	; 0x40
 8000f88:	71bb      	strb	r3, [r7, #6]
 8000f8a:	e008      	b.n	8000f9e <adc_scan_start+0xf6>
	    case  32: gain = SYS0_PGA32;  break;
 8000f8c:	2350      	movs	r3, #80	; 0x50
 8000f8e:	71bb      	strb	r3, [r7, #6]
 8000f90:	e005      	b.n	8000f9e <adc_scan_start+0xf6>
	    case  64: gain = SYS0_PGA64;  break;
 8000f92:	2360      	movs	r3, #96	; 0x60
 8000f94:	71bb      	strb	r3, [r7, #6]
 8000f96:	e002      	b.n	8000f9e <adc_scan_start+0xf6>
	    case 128: gain = SYS0_PGA128; break;
 8000f98:	2370      	movs	r3, #112	; 0x70
 8000f9a:	71bb      	strb	r3, [r7, #6]
 8000f9c:	bf00      	nop
	  }

	  switch(current)
 8000f9e:	887b      	ldrh	r3, [r7, #2]
 8000fa0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fa4:	d020      	beq.n	8000fe8 <adc_scan_start+0x140>
 8000fa6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000faa:	dc06      	bgt.n	8000fba <adc_scan_start+0x112>
 8000fac:	2b64      	cmp	r3, #100	; 0x64
 8000fae:	d015      	beq.n	8000fdc <adc_scan_start+0x134>
 8000fb0:	2bfa      	cmp	r3, #250	; 0xfa
 8000fb2:	d016      	beq.n	8000fe2 <adc_scan_start+0x13a>
 8000fb4:	2b32      	cmp	r3, #50	; 0x32
 8000fb6:	d00e      	beq.n	8000fd6 <adc_scan_start+0x12e>
 8000fb8:	e00a      	b.n	8000fd0 <adc_scan_start+0x128>
 8000fba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fbe:	d019      	beq.n	8000ff4 <adc_scan_start+0x14c>
 8000fc0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d018      	beq.n	8000ffa <adc_scan_start+0x152>
 8000fc8:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d00e      	beq.n	8000fee <adc_scan_start+0x146>
	  {
	    default:
	    case    0: current = IDAC0_MAGOFF;    break;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	807b      	strh	r3, [r7, #2]
 8000fd4:	e014      	b.n	8001000 <adc_scan_start+0x158>
	    case   50: current = IDAC0_MAG50UA;   break;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	807b      	strh	r3, [r7, #2]
 8000fda:	e011      	b.n	8001000 <adc_scan_start+0x158>
	    case  100: current = IDAC0_MAG100UA;  break;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	807b      	strh	r3, [r7, #2]
 8000fe0:	e00e      	b.n	8001000 <adc_scan_start+0x158>
	    case  250: current = IDAC0_MAG250UA;  break;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	807b      	strh	r3, [r7, #2]
 8000fe6:	e00b      	b.n	8001000 <adc_scan_start+0x158>
	    case  500: current = IDAC0_MAG500UA;  break;
 8000fe8:	2304      	movs	r3, #4
 8000fea:	807b      	strh	r3, [r7, #2]
 8000fec:	e008      	b.n	8001000 <adc_scan_start+0x158>
	    case  750: current = IDAC0_MAG750UA;  break;
 8000fee:	2305      	movs	r3, #5
 8000ff0:	807b      	strh	r3, [r7, #2]
 8000ff2:	e005      	b.n	8001000 <adc_scan_start+0x158>
	    case 1000: current = IDAC0_MAG1000UA; break;
 8000ff4:	2306      	movs	r3, #6
 8000ff6:	807b      	strh	r3, [r7, #2]
 8000ff8:	e002      	b.n	8001000 <adc_scan_start+0x158>
	    case 1500: current = IDAC0_MAG1500UA; break;
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	807b      	strh	r3, [r7, #2]
 8000ffe:	bf00      	nop
	  }


	  cs_enable(id);
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fee9 	bl	8000ddc <cs_enable>

	  if(id <= 5){	//DMS
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	2b05      	cmp	r3, #5
 8001010:	dc40      	bgt.n	8001094 <adc_scan_start+0x1ec>

		  wr_cmd(id, CMD_RESET);
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	2106      	movs	r1, #6
 8001018:	4618      	mov	r0, r3
 800101a:	f000 fa1d 	bl	8001458 <wr_cmd>
		  wr_cmd(id, CMD_SDATAC);
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	2116      	movs	r1, #22
 8001024:	4618      	mov	r0, r3
 8001026:	f000 fa17 	bl	8001458 <wr_cmd>
		  wr_reg(id, REG_MUX0, 0b00000001);
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	2201      	movs	r2, #1
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f000 fa50 	bl	80014d8 <wr_reg>
		  wr_reg(id, REG_VBIAS, 0x00);
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	2200      	movs	r2, #0
 800103e:	2101      	movs	r1, #1
 8001040:	4618      	mov	r0, r3
 8001042:	f000 fa49 	bl	80014d8 <wr_reg>
		  wr_reg(id, REG_MUX1, 0b00110000);
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2230      	movs	r2, #48	; 0x30
 800104c:	2102      	movs	r1, #2
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fa42 	bl	80014d8 <wr_reg>
		  wr_reg(id, REG_SYS0, gain | drate);
 8001054:	88bb      	ldrh	r3, [r7, #4]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	79bb      	ldrb	r3, [r7, #6]
 800105a:	4313      	orrs	r3, r2
 800105c:	b2da      	uxtb	r2, r3
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	2103      	movs	r1, #3
 8001064:	4618      	mov	r0, r3
 8001066:	f000 fa37 	bl	80014d8 <wr_reg>
		  wr_reg(id, REG_IDAC0, 0x00);
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	2200      	movs	r2, #0
 8001070:	210a      	movs	r1, #10
 8001072:	4618      	mov	r0, r3
 8001074:	f000 fa30 	bl	80014d8 <wr_reg>
		  wr_reg(id, REG_IDAC1, 0b11001100);
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	22cc      	movs	r2, #204	; 0xcc
 800107e:	210b      	movs	r1, #11
 8001080:	4618      	mov	r0, r3
 8001082:	f000 fa29 	bl	80014d8 <wr_reg>
		  wr_cmd(id, CMD_SYNC);
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	2104      	movs	r1, #4
 800108c:	4618      	mov	r0, r3
 800108e:	f000 f9e3 	bl	8001458 <wr_cmd>
 8001092:	e040      	b.n	8001116 <adc_scan_start+0x26e>
		  //uint8_t rdata = CMD_RDATAC;
		  //HAL_SPI_Transmit(get_hspi_from_id(id), &rdata, 2, HAL_MAX_DELAY);

	  } else {	//PT100

		  wr_cmd(id, CMD_RESET);
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	2106      	movs	r1, #6
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f9dc 	bl	8001458 <wr_cmd>
		  wr_cmd(id, CMD_SDATAC);
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	2116      	movs	r1, #22
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f9d6 	bl	8001458 <wr_cmd>
		  wr_reg(id, REG_VBIAS, 0x00);
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	2200      	movs	r2, #0
 80010b2:	2101      	movs	r1, #1
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fa0f 	bl	80014d8 <wr_reg>
		  wr_reg(id, REG_MUX0, 0x01); //?
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	2201      	movs	r2, #1
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 fa08 	bl	80014d8 <wr_reg>
		  wr_reg(id, REG_MUX1, 0b00100000); //int ref on, REFP0/REFN0 ref inp selected
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	2220      	movs	r2, #32
 80010ce:	2102      	movs	r1, #2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 fa01 	bl	80014d8 <wr_reg>
		  //wr_reg(id, REG_VBIAS, 0x00);
		  //wr_reg(id, REG_MUX1, 0b00110000);
		  wr_reg(id, REG_SYS0, gain | drate); //Gain 4, SPS 20
 80010d6:	88bb      	ldrh	r3, [r7, #4]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	79bb      	ldrb	r3, [r7, #6]
 80010dc:	4313      	orrs	r3, r2
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	2103      	movs	r1, #3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f9f6 	bl	80014d8 <wr_reg>
		  wr_reg(id, REG_IDAC0, current); //1mA;
 80010ec:	887b      	ldrh	r3, [r7, #2]
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	210a      	movs	r1, #10
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f9ee 	bl	80014d8 <wr_reg>
		  wr_reg(id, REG_IDAC1, 0b00000010); //IDAC1 = AIN0, IDAC2 = AIN3
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	2202      	movs	r2, #2
 8001102:	210b      	movs	r1, #11
 8001104:	4618      	mov	r0, r3
 8001106:	f000 f9e7 	bl	80014d8 <wr_reg>
		  wr_cmd(id, CMD_SYNC);
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	2104      	movs	r1, #4
 8001110:	4618      	mov	r0, r3
 8001112:	f000 f9a1 	bl	8001458 <wr_cmd>
		  //uint8_t rdata = CMD_RDATAC;
		  //HAL_SPI_Transmit(get_hspi_from_id(id), &rdata, 2, HAL_MAX_DELAY);
	  }


	  cs_disable(id);
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fe7c 	bl	8000e18 <cs_disable>

	  return r;
 8001120:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8001124:	4618      	mov	r0, r3
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	bd90      	pop	{r4, r7, pc}

0800112c <rd_data>:

uint16_t rd_data(int8_t id){
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b087      	sub	sp, #28
 8001130:	af02      	add	r7, sp, #8
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	uint8_t d1, d3;
	uint16_t dR;

	while(HAL_GPIO_ReadPin(port_drdy_from_id(id), pin_drdy_from_id(id)) == GPIO_PIN_SET);
 8001136:	bf00      	nop
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	4618      	mov	r0, r3
 800113e:	f000 f911 	bl	8001364 <port_drdy_from_id>
 8001142:	4604      	mov	r4, r0
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f8cb 	bl	80012e4 <pin_drdy_from_id>
 800114e:	4603      	mov	r3, r0
 8001150:	4619      	mov	r1, r3
 8001152:	4620      	mov	r0, r4
 8001154:	f001 fdf6 	bl	8002d44 <HAL_GPIO_ReadPin>
 8001158:	4603      	mov	r3, r0
 800115a:	2b01      	cmp	r3, #1
 800115c:	d0ec      	beq.n	8001138 <rd_data+0xc>
	cs_enable(id);
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fe3a 	bl	8000ddc <cs_enable>

	uint8_t rdata = CMD_RDATA;
 8001168:	2312      	movs	r3, #18
 800116a:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_Transmit(get_hspi_from_id(id), &rdata, 2, HAL_MAX_DELAY);
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	4618      	mov	r0, r3
 8001172:	f000 f935 	bl	80013e0 <get_hspi_from_id>
 8001176:	f107 010b 	add.w	r1, r7, #11
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
 800117e:	2202      	movs	r2, #2
 8001180:	f003 fed4 	bl	8004f2c <HAL_SPI_Transmit>
	//HAL_Delay(1);

	uint8_t nope = CMD_NOP;
 8001184:	23ff      	movs	r3, #255	; 0xff
 8001186:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_TransmitReceive(get_hspi_from_id(id), &nope, &d1, 2, HAL_MAX_DELAY);
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f927 	bl	80013e0 <get_hspi_from_id>
 8001192:	f107 020d 	add.w	r2, r7, #13
 8001196:	f107 010a 	add.w	r1, r7, #10
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2302      	movs	r3, #2
 80011a2:	f004 f839 	bl	8005218 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(get_hspi_from_id(id), &nope, &d3, 2, HAL_MAX_DELAY);
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f918 	bl	80013e0 <get_hspi_from_id>
 80011b0:	f107 020c 	add.w	r2, r7, #12
 80011b4:	f107 010a 	add.w	r1, r7, #10
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2302      	movs	r3, #2
 80011c0:	f004 f82a 	bl	8005218 <HAL_SPI_TransmitReceive>
	dR = (d1 << 8) | d3;
 80011c4:	7b7b      	ldrb	r3, [r7, #13]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	7b3b      	ldrb	r3, [r7, #12]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	81fb      	strh	r3, [r7, #14]
	cs_disable(id);
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fe1d 	bl	8000e18 <cs_disable>

	return dR;
 80011de:	89fb      	ldrh	r3, [r7, #14]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd90      	pop	{r4, r7, pc}

080011e8 <pin_from_id>:
	//cs_disable(id);
	return d1;
}

//
uint16_t pin_from_id(int8_t id){
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
	switch(id){
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	2b08      	cmp	r3, #8
 80011f8:	d82c      	bhi.n	8001254 <pin_from_id+0x6c>
 80011fa:	a201      	add	r2, pc, #4	; (adr r2, 8001200 <pin_from_id+0x18>)
 80011fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001200:	08001225 	.word	0x08001225
 8001204:	0800122b 	.word	0x0800122b
 8001208:	08001231 	.word	0x08001231
 800120c:	08001237 	.word	0x08001237
 8001210:	0800123b 	.word	0x0800123b
 8001214:	0800123f 	.word	0x0800123f
 8001218:	08001243 	.word	0x08001243
 800121c:	08001249 	.word	0x08001249
 8001220:	0800124f 	.word	0x0800124f
			case 0: //DMS 1
				return nCS_DMS1_Pin;
 8001224:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001228:	e016      	b.n	8001258 <pin_from_id+0x70>
			case 1: //DMS 2
				return nCS_DMS2_Pin;
 800122a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800122e:	e013      	b.n	8001258 <pin_from_id+0x70>
			case 2: //DMS 3
				return nCS_DMS3_Pin;
 8001230:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001234:	e010      	b.n	8001258 <pin_from_id+0x70>
			case 3: //DMS 4
				return nCS_DMS4_Pin;
 8001236:	2301      	movs	r3, #1
 8001238:	e00e      	b.n	8001258 <pin_from_id+0x70>
			case 4: //DMS 5
				return nCS_DMS5_Pin;
 800123a:	2302      	movs	r3, #2
 800123c:	e00c      	b.n	8001258 <pin_from_id+0x70>
			case 5: //DMS 6
				return nCS_DMS6_Pin;
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	e00a      	b.n	8001258 <pin_from_id+0x70>
			case 6: //PT 1
				return nCS_PT1_Pin;
 8001242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001246:	e007      	b.n	8001258 <pin_from_id+0x70>
			case 7: //PT 2
				return nCS_PT2_Pin;
 8001248:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800124c:	e004      	b.n	8001258 <pin_from_id+0x70>
			case 8: //PT 3
				return nCS_PT3_Pin;
 800124e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001252:	e001      	b.n	8001258 <pin_from_id+0x70>
			default: //DMS 1
				return nCS_DMS1_Pin;
 8001254:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		}
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <port_from_id>:

//
GPIO_TypeDef* port_from_id(int8_t id){
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
	switch(id){
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	2b08      	cmp	r3, #8
 8001274:	d826      	bhi.n	80012c4 <port_from_id+0x60>
 8001276:	a201      	add	r2, pc, #4	; (adr r2, 800127c <port_from_id+0x18>)
 8001278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127c:	080012a1 	.word	0x080012a1
 8001280:	080012a5 	.word	0x080012a5
 8001284:	080012a9 	.word	0x080012a9
 8001288:	080012ad 	.word	0x080012ad
 800128c:	080012b1 	.word	0x080012b1
 8001290:	080012b5 	.word	0x080012b5
 8001294:	080012b9 	.word	0x080012b9
 8001298:	080012bd 	.word	0x080012bd
 800129c:	080012c1 	.word	0x080012c1
		case 0: //DMS 1
			return nCS_DMS1_GPIO_Port;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <port_from_id+0x70>)
 80012a2:	e010      	b.n	80012c6 <port_from_id+0x62>
		case 1: //DMS 2
			return nCS_DMS2_GPIO_Port;
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <port_from_id+0x70>)
 80012a6:	e00e      	b.n	80012c6 <port_from_id+0x62>
		case 2: //DMS 3
			return nCS_DMS3_GPIO_Port;
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <port_from_id+0x70>)
 80012aa:	e00c      	b.n	80012c6 <port_from_id+0x62>
		case 3: //DMS 4
			return nCS_DMS4_GPIO_Port;
 80012ac:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <port_from_id+0x74>)
 80012ae:	e00a      	b.n	80012c6 <port_from_id+0x62>
		case 4: //DMS 5
			return nCS_DMS5_GPIO_Port;
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <port_from_id+0x74>)
 80012b2:	e008      	b.n	80012c6 <port_from_id+0x62>
		case 5: //DMS 6
			return nCS_DMS6_GPIO_Port;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <port_from_id+0x78>)
 80012b6:	e006      	b.n	80012c6 <port_from_id+0x62>
		case 6: //PT 1
			return nCS_PT1_GPIO_Port;
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <port_from_id+0x7c>)
 80012ba:	e004      	b.n	80012c6 <port_from_id+0x62>
		case 7: //PT 2
			return nCS_PT2_GPIO_Port;
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <port_from_id+0x7c>)
 80012be:	e002      	b.n	80012c6 <port_from_id+0x62>
		case 8: //PT 3
			return nCS_PT3_GPIO_Port;
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <port_from_id+0x7c>)
 80012c2:	e000      	b.n	80012c6 <port_from_id+0x62>
		default: //DMS 1
			return nCS_DMS1_GPIO_Port;
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <port_from_id+0x70>)
	}
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40021400 	.word	0x40021400
 80012d8:	40021800 	.word	0x40021800
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40020c00 	.word	0x40020c00

080012e4 <pin_drdy_from_id>:

//
uint16_t pin_drdy_from_id(int8_t id){
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
	switch(id){
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d82e      	bhi.n	8001354 <pin_drdy_from_id+0x70>
 80012f6:	a201      	add	r2, pc, #4	; (adr r2, 80012fc <pin_drdy_from_id+0x18>)
 80012f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fc:	08001321 	.word	0x08001321
 8001300:	08001325 	.word	0x08001325
 8001304:	0800132b 	.word	0x0800132b
 8001308:	08001331 	.word	0x08001331
 800130c:	08001337 	.word	0x08001337
 8001310:	0800133d 	.word	0x0800133d
 8001314:	08001343 	.word	0x08001343
 8001318:	08001349 	.word	0x08001349
 800131c:	0800134f 	.word	0x0800134f
			case 0: //DMS 1
				return nDRDY_DMS1_Pin;
 8001320:	2310      	movs	r3, #16
 8001322:	e018      	b.n	8001356 <pin_drdy_from_id+0x72>
			case 1: //DMS 2
				return nDRDY_DMS2_Pin;
 8001324:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001328:	e015      	b.n	8001356 <pin_drdy_from_id+0x72>
			case 2: //DMS 3
				return nDRDY_DMS3_Pin;
 800132a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800132e:	e012      	b.n	8001356 <pin_drdy_from_id+0x72>
			case 3: //DMS 4
				return nDRDY_DMS4_Pin;
 8001330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001334:	e00f      	b.n	8001356 <pin_drdy_from_id+0x72>
			case 4: //DMS 5
				return nDRDY_DMS5_Pin;
 8001336:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800133a:	e00c      	b.n	8001356 <pin_drdy_from_id+0x72>
			case 5: //DMS 6
				return nDRDY_DMS6_Pin;
 800133c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001340:	e009      	b.n	8001356 <pin_drdy_from_id+0x72>
			case 6: //PT 1
				return nDRDY_PT1_Pin;
 8001342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001346:	e006      	b.n	8001356 <pin_drdy_from_id+0x72>
			case 7: //PT 2
				return nDRDY_PT2_Pin;
 8001348:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800134c:	e003      	b.n	8001356 <pin_drdy_from_id+0x72>
			case 8: //PT 3
				return nDRDY_PT3_Pin;
 800134e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001352:	e000      	b.n	8001356 <pin_drdy_from_id+0x72>
			default: //DMS 1
				return nDRDY_DMS1_Pin;
 8001354:	2310      	movs	r3, #16
		}
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop

08001364 <port_drdy_from_id>:

//
GPIO_TypeDef* port_drdy_from_id(int8_t id){
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
	switch(id){
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	2b08      	cmp	r3, #8
 8001374:	d826      	bhi.n	80013c4 <port_drdy_from_id+0x60>
 8001376:	a201      	add	r2, pc, #4	; (adr r2, 800137c <port_drdy_from_id+0x18>)
 8001378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137c:	080013a1 	.word	0x080013a1
 8001380:	080013a5 	.word	0x080013a5
 8001384:	080013a9 	.word	0x080013a9
 8001388:	080013ad 	.word	0x080013ad
 800138c:	080013b1 	.word	0x080013b1
 8001390:	080013b5 	.word	0x080013b5
 8001394:	080013b9 	.word	0x080013b9
 8001398:	080013bd 	.word	0x080013bd
 800139c:	080013c1 	.word	0x080013c1
		case 0: //DMS 1
			return nDRDY_DMS1_GPIO_Port;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <port_drdy_from_id+0x70>)
 80013a2:	e010      	b.n	80013c6 <port_drdy_from_id+0x62>
		case 1: //DMS 2
			return nDRDY_DMS2_GPIO_Port;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <port_drdy_from_id+0x74>)
 80013a6:	e00e      	b.n	80013c6 <port_drdy_from_id+0x62>
		case 2: //DMS 3
			return nDRDY_DMS3_GPIO_Port;
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <port_drdy_from_id+0x74>)
 80013aa:	e00c      	b.n	80013c6 <port_drdy_from_id+0x62>
		case 3: //DMS 4
			return nDRDY_DMS4_GPIO_Port;
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <port_drdy_from_id+0x74>)
 80013ae:	e00a      	b.n	80013c6 <port_drdy_from_id+0x62>
		case 4: //DMS 5
			return nDRDY_DMS5_GPIO_Port;
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <port_drdy_from_id+0x74>)
 80013b2:	e008      	b.n	80013c6 <port_drdy_from_id+0x62>
		case 5: //DMS 6
			return nDRDY_DMS6_GPIO_Port;
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <port_drdy_from_id+0x74>)
 80013b6:	e006      	b.n	80013c6 <port_drdy_from_id+0x62>
		case 6: //PT 1
			return nDRDY_PT1_GPIO_Port;
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <port_drdy_from_id+0x78>)
 80013ba:	e004      	b.n	80013c6 <port_drdy_from_id+0x62>
		case 7: //PT 2
			return nDRDY_PT2_GPIO_Port;
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <port_drdy_from_id+0x78>)
 80013be:	e002      	b.n	80013c6 <port_drdy_from_id+0x62>
		case 8: //PT 3
			return nDRDY_PT3_GPIO_Port;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <port_drdy_from_id+0x78>)
 80013c2:	e000      	b.n	80013c6 <port_drdy_from_id+0x62>
		default: //DMS 1
			return nDRDY_DMS1_GPIO_Port;
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <port_drdy_from_id+0x70>)
	}
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40021800 	.word	0x40021800
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40022400 	.word	0x40022400

080013e0 <get_hspi_from_id>:

//
SPI_HandleTypeDef *get_hspi_from_id(int8_t id){
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
	switch(id){
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d826      	bhi.n	8001440 <get_hspi_from_id+0x60>
 80013f2:	a201      	add	r2, pc, #4	; (adr r2, 80013f8 <get_hspi_from_id+0x18>)
 80013f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f8:	0800141d 	.word	0x0800141d
 80013fc:	08001421 	.word	0x08001421
 8001400:	08001425 	.word	0x08001425
 8001404:	08001429 	.word	0x08001429
 8001408:	0800142d 	.word	0x0800142d
 800140c:	08001431 	.word	0x08001431
 8001410:	08001435 	.word	0x08001435
 8001414:	08001439 	.word	0x08001439
 8001418:	0800143d 	.word	0x0800143d
		case 0: //DMS 1
			return &hspi4;
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <get_hspi_from_id+0x70>)
 800141e:	e010      	b.n	8001442 <get_hspi_from_id+0x62>
		case 1: //DMS 2
			return &hspi4;
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <get_hspi_from_id+0x70>)
 8001422:	e00e      	b.n	8001442 <get_hspi_from_id+0x62>
		case 2: //DMS 3
			return &hspi4;
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <get_hspi_from_id+0x70>)
 8001426:	e00c      	b.n	8001442 <get_hspi_from_id+0x62>
		case 3: //DMS 4
			return &hspi4;
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <get_hspi_from_id+0x70>)
 800142a:	e00a      	b.n	8001442 <get_hspi_from_id+0x62>
		case 4: //DMS 5
			return &hspi4;
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <get_hspi_from_id+0x70>)
 800142e:	e008      	b.n	8001442 <get_hspi_from_id+0x62>
		case 5: //DMS 6
			return &hspi4;
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <get_hspi_from_id+0x70>)
 8001432:	e006      	b.n	8001442 <get_hspi_from_id+0x62>
		case 6: //PT 1
			return &hspi3;
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <get_hspi_from_id+0x74>)
 8001436:	e004      	b.n	8001442 <get_hspi_from_id+0x62>
		case 7: //PT 2
			return &hspi3;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <get_hspi_from_id+0x74>)
 800143a:	e002      	b.n	8001442 <get_hspi_from_id+0x62>
		case 8: //PT 3
			return &hspi3;
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <get_hspi_from_id+0x74>)
 800143e:	e000      	b.n	8001442 <get_hspi_from_id+0x62>
		default: //DMS 1
			return &hspi4;
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <get_hspi_from_id+0x70>)
	}
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	200001e0 	.word	0x200001e0
 8001454:	2000017c 	.word	0x2000017c

08001458 <wr_cmd>:



//
int wr_cmd(int8_t id, uint8_t cmd){
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	460a      	mov	r2, r1
 8001462:	71fb      	strb	r3, [r7, #7]
 8001464:	4613      	mov	r3, r2
 8001466:	71bb      	strb	r3, [r7, #6]
	int8_t status = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	73fb      	strb	r3, [r7, #15]
	//status+= cs_enable(id);
	status+= wr_spi(id, cmd);
 800146c:	79ba      	ldrb	r2, [r7, #6]
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fced 	bl	8000e54 <wr_spi>
 800147a:	4603      	mov	r3, r0
 800147c:	b2da      	uxtb	r2, r3
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	4413      	add	r3, r2
 8001482:	b2db      	uxtb	r3, r3
 8001484:	73fb      	strb	r3, [r7, #15]
	if(cmd == CMD_SYNC)
 8001486:	79bb      	ldrb	r3, [r7, #6]
 8001488:	2b04      	cmp	r3, #4
 800148a:	d10c      	bne.n	80014a6 <wr_cmd+0x4e>
	{
		status+= wr_spi(id, cmd);
 800148c:	79ba      	ldrb	r2, [r7, #6]
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fcdd 	bl	8000e54 <wr_spi>
 800149a:	4603      	mov	r3, r0
 800149c:	b2da      	uxtb	r2, r3
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	4413      	add	r3, r2
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	73fb      	strb	r3, [r7, #15]
    }
	//status+= cs_disable(id);
	if(cmd == CMD_RESET)
 80014a6:	79bb      	ldrb	r3, [r7, #6]
 80014a8:	2b06      	cmp	r3, #6
 80014aa:	d103      	bne.n	80014b4 <wr_cmd+0x5c>
	{
		HAL_Delay(1); //1ms
 80014ac:	2001      	movs	r0, #1
 80014ae:	f000 fde7 	bl	8002080 <HAL_Delay>
 80014b2:	e00c      	b.n	80014ce <wr_cmd+0x76>
	}
	else if(cmd == CMD_SELFOCAL)
 80014b4:	79bb      	ldrb	r3, [r7, #6]
 80014b6:	2b62      	cmp	r3, #98	; 0x62
 80014b8:	d103      	bne.n	80014c2 <wr_cmd+0x6a>
	{
		HAL_Delay(10); //10ms
 80014ba:	200a      	movs	r0, #10
 80014bc:	f000 fde0 	bl	8002080 <HAL_Delay>
 80014c0:	e005      	b.n	80014ce <wr_cmd+0x76>
	}
	else if(cmd == CMD_SDATAC)
 80014c2:	79bb      	ldrb	r3, [r7, #6]
 80014c4:	2b16      	cmp	r3, #22
 80014c6:	d102      	bne.n	80014ce <wr_cmd+0x76>
	{
		HAL_Delay(1); //1ms
 80014c8:	2001      	movs	r0, #1
 80014ca:	f000 fdd9 	bl	8002080 <HAL_Delay>
	}
	return 0;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <wr_reg>:

int wr_reg(int8_t id, uint8_t reg, uint8_t data){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
 80014e2:	460b      	mov	r3, r1
 80014e4:	71bb      	strb	r3, [r7, #6]
 80014e6:	4613      	mov	r3, r2
 80014e8:	717b      	strb	r3, [r7, #5]
	int8_t status = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, CMD_WREG | reg);
 80014ee:	79bb      	ldrb	r3, [r7, #6]
 80014f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fca9 	bl	8000e54 <wr_spi>
 8001502:	4603      	mov	r3, r0
 8001504:	b2da      	uxtb	r2, r3
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	4413      	add	r3, r2
 800150a:	b2db      	uxtb	r3, r3
 800150c:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, 0);
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fc9d 	bl	8000e54 <wr_spi>
 800151a:	4603      	mov	r3, r0
 800151c:	b2da      	uxtb	r2, r3
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	4413      	add	r3, r2
 8001522:	b2db      	uxtb	r3, r3
 8001524:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, data);
 8001526:	797a      	ldrb	r2, [r7, #5]
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	4611      	mov	r1, r2
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fc90 	bl	8000e54 <wr_spi>
 8001534:	4603      	mov	r3, r0
 8001536:	b2da      	uxtb	r2, r3
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	4413      	add	r3, r2
 800153c:	b2db      	uxtb	r3, r3
 800153e:	73fb      	strb	r3, [r7, #15]
	return 0;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <write_EXP>:
	data = rd_spi(id);
	//status += cs_disable(id);
	return data;
}

int write_EXP(uint8_t *dout){
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart8, &dout, sizeof(dout), HAL_MAX_DELAY);
 8001554:	1d39      	adds	r1, r7, #4
 8001556:	f04f 33ff 	mov.w	r3, #4294967295
 800155a:	2204      	movs	r2, #4
 800155c:	4803      	ldr	r0, [pc, #12]	; (800156c <write_EXP+0x20>)
 800155e:	f004 fb75 	bl	8005c4c <HAL_UART_Transmit>
	return 0;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200002c4 	.word	0x200002c4

08001570 <write_DAPI>:

int write_DAPI(uint8_t *dout){
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, &dout, sizeof(dout), HAL_MAX_DELAY);
 8001578:	1d39      	adds	r1, r7, #4
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
 800157e:	2204      	movs	r2, #4
 8001580:	4803      	ldr	r0, [pc, #12]	; (8001590 <write_DAPI+0x20>)
 8001582:	f004 fb63 	bl	8005c4c <HAL_UART_Transmit>
	return 0;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000344 	.word	0x20000344

08001594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi5;
SPI_HandleTypeDef hspi6;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <MX_SPI2_Init+0x74>)
 80015be:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <MX_SPI2_Init+0x78>)
 80015c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	; (800162c <MX_SPI2_Init+0x74>)
 80015c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <MX_SPI2_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <MX_SPI2_Init+0x74>)
 80015d2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015d6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_SPI2_Init+0x74>)
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <MX_SPI2_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_SPI2_Init+0x74>)
 80015e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <MX_SPI2_Init+0x74>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <MX_SPI2_Init+0x74>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <MX_SPI2_Init+0x74>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <MX_SPI2_Init+0x74>)
 8001600:	2200      	movs	r2, #0
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <MX_SPI2_Init+0x74>)
 8001606:	2207      	movs	r2, #7
 8001608:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <MX_SPI2_Init+0x74>)
 800160c:	2200      	movs	r2, #0
 800160e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <MX_SPI2_Init+0x74>)
 8001612:	2208      	movs	r2, #8
 8001614:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_SPI2_Init+0x74>)
 8001618:	f003 fae0 	bl	8004bdc <HAL_SPI_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001622:	f7ff ffb7 	bl	8001594 <Error_Handler>
  }

}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000050 	.word	0x20000050
 8001630:	40003800 	.word	0x40003800

08001634 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <MX_SPI3_Init+0x74>)
 800163a:	4a1c      	ldr	r2, [pc, #112]	; (80016ac <MX_SPI3_Init+0x78>)
 800163c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800163e:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <MX_SPI3_Init+0x74>)
 8001640:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001644:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <MX_SPI3_Init+0x74>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <MX_SPI3_Init+0x74>)
 800164e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001652:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <MX_SPI3_Init+0x74>)
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <MX_SPI3_Init+0x74>)
 800165c:	2200      	movs	r2, #0
 800165e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <MX_SPI3_Init+0x74>)
 8001662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001666:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <MX_SPI3_Init+0x74>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <MX_SPI3_Init+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <MX_SPI3_Init+0x74>)
 8001676:	2200      	movs	r2, #0
 8001678:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <MX_SPI3_Init+0x74>)
 800167c:	2200      	movs	r2, #0
 800167e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <MX_SPI3_Init+0x74>)
 8001682:	2207      	movs	r2, #7
 8001684:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <MX_SPI3_Init+0x74>)
 8001688:	2200      	movs	r2, #0
 800168a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <MX_SPI3_Init+0x74>)
 800168e:	2208      	movs	r2, #8
 8001690:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <MX_SPI3_Init+0x74>)
 8001694:	f003 faa2 	bl	8004bdc <HAL_SPI_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800169e:	f7ff ff79 	bl	8001594 <Error_Handler>
  }

}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000017c 	.word	0x2000017c
 80016ac:	40003c00 	.word	0x40003c00

080016b0 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <MX_SPI4_Init+0x74>)
 80016b6:	4a1c      	ldr	r2, [pc, #112]	; (8001728 <MX_SPI4_Init+0x78>)
 80016b8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80016ba:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <MX_SPI4_Init+0x74>)
 80016bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016c0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <MX_SPI4_Init+0x74>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80016c8:	4b16      	ldr	r3, [pc, #88]	; (8001724 <MX_SPI4_Init+0x74>)
 80016ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016ce:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <MX_SPI4_Init+0x74>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016d6:	4b13      	ldr	r3, [pc, #76]	; (8001724 <MX_SPI4_Init+0x74>)
 80016d8:	2201      	movs	r2, #1
 80016da:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <MX_SPI4_Init+0x74>)
 80016de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <MX_SPI4_Init+0x74>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <MX_SPI4_Init+0x74>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <MX_SPI4_Init+0x74>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <MX_SPI4_Init+0x74>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <MX_SPI4_Init+0x74>)
 80016fe:	2207      	movs	r2, #7
 8001700:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <MX_SPI4_Init+0x74>)
 8001704:	2200      	movs	r2, #0
 8001706:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <MX_SPI4_Init+0x74>)
 800170a:	2200      	movs	r2, #0
 800170c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800170e:	4805      	ldr	r0, [pc, #20]	; (8001724 <MX_SPI4_Init+0x74>)
 8001710:	f003 fa64 	bl	8004bdc <HAL_SPI_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800171a:	f7ff ff3b 	bl	8001594 <Error_Handler>
  }

}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200001e0 	.word	0x200001e0
 8001728:	40013400 	.word	0x40013400

0800172c <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001730:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <MX_SPI5_Init+0x74>)
 8001732:	4a1c      	ldr	r2, [pc, #112]	; (80017a4 <MX_SPI5_Init+0x78>)
 8001734:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001736:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <MX_SPI5_Init+0x74>)
 8001738:	f44f 7282 	mov.w	r2, #260	; 0x104
 800173c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800173e:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <MX_SPI5_Init+0x74>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8001744:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <MX_SPI5_Init+0x74>)
 8001746:	f44f 7240 	mov.w	r2, #768	; 0x300
 800174a:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <MX_SPI5_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <MX_SPI5_Init+0x74>)
 8001754:	2200      	movs	r2, #0
 8001756:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <MX_SPI5_Init+0x74>)
 800175a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800175e:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <MX_SPI5_Init+0x74>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <MX_SPI5_Init+0x74>)
 8001768:	2200      	movs	r2, #0
 800176a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <MX_SPI5_Init+0x74>)
 800176e:	2200      	movs	r2, #0
 8001770:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <MX_SPI5_Init+0x74>)
 8001774:	2200      	movs	r2, #0
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001778:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <MX_SPI5_Init+0x74>)
 800177a:	2207      	movs	r2, #7
 800177c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <MX_SPI5_Init+0x74>)
 8001780:	2200      	movs	r2, #0
 8001782:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <MX_SPI5_Init+0x74>)
 8001786:	2208      	movs	r2, #8
 8001788:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <MX_SPI5_Init+0x74>)
 800178c:	f003 fa26 	bl	8004bdc <HAL_SPI_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001796:	f7ff fefd 	bl	8001594 <Error_Handler>
  }

}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200000b4 	.word	0x200000b4
 80017a4:	40015000 	.word	0x40015000

080017a8 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
 80017ac:	4b1b      	ldr	r3, [pc, #108]	; (800181c <MX_SPI6_Init+0x74>)
 80017ae:	4a1c      	ldr	r2, [pc, #112]	; (8001820 <MX_SPI6_Init+0x78>)
 80017b0:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <MX_SPI6_Init+0x74>)
 80017b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017b8:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 80017ba:	4b18      	ldr	r3, [pc, #96]	; (800181c <MX_SPI6_Init+0x74>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 80017c0:	4b16      	ldr	r3, [pc, #88]	; (800181c <MX_SPI6_Init+0x74>)
 80017c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80017c6:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <MX_SPI6_Init+0x74>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ce:	4b13      	ldr	r3, [pc, #76]	; (800181c <MX_SPI6_Init+0x74>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_SPI6_Init+0x74>)
 80017d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017da:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <MX_SPI6_Init+0x74>)
 80017de:	2200      	movs	r2, #0
 80017e0:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_SPI6_Init+0x74>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_SPI6_Init+0x74>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <MX_SPI6_Init+0x74>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_SPI6_Init+0x74>)
 80017f6:	2207      	movs	r2, #7
 80017f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <MX_SPI6_Init+0x74>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_SPI6_Init+0x74>)
 8001802:	2208      	movs	r2, #8
 8001804:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_SPI6_Init+0x74>)
 8001808:	f003 f9e8 	bl	8004bdc <HAL_SPI_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_SPI6_Init+0x6e>
  {
    Error_Handler();
 8001812:	f7ff febf 	bl	8001594 <Error_Handler>
  }

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000118 	.word	0x20000118
 8001820:	40015400 	.word	0x40015400

08001824 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b092      	sub	sp, #72	; 0x48
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a8e      	ldr	r2, [pc, #568]	; (8001a7c <HAL_SPI_MspInit+0x258>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d131      	bne.n	80018aa <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001846:	4b8e      	ldr	r3, [pc, #568]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a8d      	ldr	r2, [pc, #564]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 800184c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	4b8b      	ldr	r3, [pc, #556]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
 800185c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	4b88      	ldr	r3, [pc, #544]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a87      	ldr	r2, [pc, #540]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b85      	ldr	r3, [pc, #532]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001876:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800187a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001888:	2305      	movs	r3, #5
 800188a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001890:	4619      	mov	r1, r3
 8001892:	487c      	ldr	r0, [pc, #496]	; (8001a84 <HAL_SPI_MspInit+0x260>)
 8001894:	f000 fec8 	bl	8002628 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 6, 0);
 8001898:	2200      	movs	r2, #0
 800189a:	2106      	movs	r1, #6
 800189c:	2024      	movs	r0, #36	; 0x24
 800189e:	f000 fd01 	bl	80022a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80018a2:	2024      	movs	r0, #36	; 0x24
 80018a4:	f000 fd2a 	bl	80022fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 80018a8:	e0e4      	b.n	8001a74 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI3)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a76      	ldr	r2, [pc, #472]	; (8001a88 <HAL_SPI_MspInit+0x264>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d145      	bne.n	8001940 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018b4:	4b72      	ldr	r3, [pc, #456]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	4a71      	ldr	r2, [pc, #452]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 80018ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018be:	6413      	str	r3, [r2, #64]	; 0x40
 80018c0:	4b6f      	ldr	r3, [pc, #444]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80018ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018cc:	4b6c      	ldr	r3, [pc, #432]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	4a6b      	ldr	r2, [pc, #428]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 80018d2:	f043 0302 	orr.w	r3, r3, #2
 80018d6:	6313      	str	r3, [r2, #48]	; 0x30
 80018d8:	4b69      	ldr	r3, [pc, #420]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e4:	4b66      	ldr	r3, [pc, #408]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	4a65      	ldr	r2, [pc, #404]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 80018ea:	f043 0304 	orr.w	r3, r3, #4
 80018ee:	6313      	str	r3, [r2, #48]	; 0x30
 80018f0:	4b63      	ldr	r3, [pc, #396]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	623b      	str	r3, [r7, #32]
 80018fa:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018fc:	2304      	movs	r3, #4
 80018fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001908:	2303      	movs	r3, #3
 800190a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800190c:	2307      	movs	r3, #7
 800190e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001910:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001914:	4619      	mov	r1, r3
 8001916:	485b      	ldr	r0, [pc, #364]	; (8001a84 <HAL_SPI_MspInit+0x260>)
 8001918:	f000 fe86 	bl	8002628 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800191c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001920:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192a:	2303      	movs	r3, #3
 800192c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800192e:	2306      	movs	r3, #6
 8001930:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001932:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001936:	4619      	mov	r1, r3
 8001938:	4854      	ldr	r0, [pc, #336]	; (8001a8c <HAL_SPI_MspInit+0x268>)
 800193a:	f000 fe75 	bl	8002628 <HAL_GPIO_Init>
}
 800193e:	e099      	b.n	8001a74 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI4)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a52      	ldr	r2, [pc, #328]	; (8001a90 <HAL_SPI_MspInit+0x26c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d130      	bne.n	80019ac <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800194a:	4b4d      	ldr	r3, [pc, #308]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	4a4c      	ldr	r2, [pc, #304]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 8001950:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001954:	6453      	str	r3, [r2, #68]	; 0x44
 8001956:	4b4a      	ldr	r3, [pc, #296]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800195e:	61fb      	str	r3, [r7, #28]
 8001960:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001962:	4b47      	ldr	r3, [pc, #284]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a46      	ldr	r2, [pc, #280]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 8001968:	f043 0310 	orr.w	r3, r3, #16
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b44      	ldr	r3, [pc, #272]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0310 	and.w	r3, r3, #16
 8001976:	61bb      	str	r3, [r7, #24]
 8001978:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800197a:	2364      	movs	r3, #100	; 0x64
 800197c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001986:	2303      	movs	r3, #3
 8001988:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800198a:	2305      	movs	r3, #5
 800198c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800198e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001992:	4619      	mov	r1, r3
 8001994:	483f      	ldr	r0, [pc, #252]	; (8001a94 <HAL_SPI_MspInit+0x270>)
 8001996:	f000 fe47 	bl	8002628 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 6, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2106      	movs	r1, #6
 800199e:	2054      	movs	r0, #84	; 0x54
 80019a0:	f000 fc80 	bl	80022a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80019a4:	2054      	movs	r0, #84	; 0x54
 80019a6:	f000 fca9 	bl	80022fc <HAL_NVIC_EnableIRQ>
}
 80019aa:	e063      	b.n	8001a74 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI5)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a39      	ldr	r2, [pc, #228]	; (8001a98 <HAL_SPI_MspInit+0x274>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d129      	bne.n	8001a0a <HAL_SPI_MspInit+0x1e6>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80019b6:	4b32      	ldr	r3, [pc, #200]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	4a31      	ldr	r2, [pc, #196]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 80019bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019c0:	6453      	str	r3, [r2, #68]	; 0x44
 80019c2:	4b2f      	ldr	r3, [pc, #188]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019ce:	4b2c      	ldr	r3, [pc, #176]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a2b      	ldr	r2, [pc, #172]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 80019d4:	f043 0320 	orr.w	r3, r3, #32
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0320 	and.w	r3, r3, #32
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80019e6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80019ea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ec:	2302      	movs	r3, #2
 80019ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f4:	2303      	movs	r3, #3
 80019f6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80019f8:	2305      	movs	r3, #5
 80019fa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a00:	4619      	mov	r1, r3
 8001a02:	4826      	ldr	r0, [pc, #152]	; (8001a9c <HAL_SPI_MspInit+0x278>)
 8001a04:	f000 fe10 	bl	8002628 <HAL_GPIO_Init>
}
 8001a08:	e034      	b.n	8001a74 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI6)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a24      	ldr	r2, [pc, #144]	; (8001aa0 <HAL_SPI_MspInit+0x27c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d12f      	bne.n	8001a74 <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001a14:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 8001a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a18:	4a19      	ldr	r2, [pc, #100]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 8001a1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a1e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a20:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 8001a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a30:	4a13      	ldr	r2, [pc, #76]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	6313      	str	r3, [r2, #48]	; 0x30
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_SPI_MspInit+0x25c>)
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a44:	23e0      	movs	r3, #224	; 0xe0
 8001a46:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a50:	2303      	movs	r3, #3
 8001a52:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8001a54:	2308      	movs	r3, #8
 8001a56:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4811      	ldr	r0, [pc, #68]	; (8001aa4 <HAL_SPI_MspInit+0x280>)
 8001a60:	f000 fde2 	bl	8002628 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 6, 0);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2106      	movs	r1, #6
 8001a68:	2056      	movs	r0, #86	; 0x56
 8001a6a:	f000 fc1b 	bl	80022a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 8001a6e:	2056      	movs	r0, #86	; 0x56
 8001a70:	f000 fc44 	bl	80022fc <HAL_NVIC_EnableIRQ>
}
 8001a74:	bf00      	nop
 8001a76:	3748      	adds	r7, #72	; 0x48
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40003800 	.word	0x40003800
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020400 	.word	0x40020400
 8001a88:	40003c00 	.word	0x40003c00
 8001a8c:	40020800 	.word	0x40020800
 8001a90:	40013400 	.word	0x40013400
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40015000 	.word	0x40015000
 8001a9c:	40021400 	.word	0x40021400
 8001aa0:	40015400 	.word	0x40015400
 8001aa4:	40020000 	.word	0x40020000

08001aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <HAL_MspInit+0x44>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	4a0e      	ldr	r2, [pc, #56]	; (8001aec <HAL_MspInit+0x44>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aba:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <HAL_MspInit+0x44>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_MspInit+0x44>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	4a08      	ldr	r2, [pc, #32]	; (8001aec <HAL_MspInit+0x44>)
 8001acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_MspInit+0x44>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800

08001af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <HardFault_Handler+0x4>

08001b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <MemManage_Handler+0x4>

08001b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0e:	e7fe      	b.n	8001b0e <BusFault_Handler+0x4>

08001b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b14:	e7fe      	b.n	8001b14 <UsageFault_Handler+0x4>

08001b16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001b44:	2010      	movs	r0, #16
 8001b46:	f001 f96b 	bl	8002e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001b52:	2020      	movs	r0, #32
 8001b54:	f001 f964 	bl	8002e20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001b58:	2040      	movs	r0, #64	; 0x40
 8001b5a:	f001 f961 	bl	8002e20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001b5e:	2080      	movs	r0, #128	; 0x80
 8001b60:	f001 f95e 	bl	8002e20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001b64:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b68:	f001 f95a 	bl	8002e20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001b6c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b70:	f001 f956 	bl	8002e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <SPI2_IRQHandler+0x10>)
 8001b7e:	f003 fd69 	bl	8005654 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000050 	.word	0x20000050

08001b8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001b90:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b94:	f001 f944 	bl	8002e20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001b98:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b9c:	f001 f940 	bl	8002e20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001ba0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ba4:	f001 f93c 	bl	8002e20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001ba8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001bac:	f001 f938 	bl	8002e20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001bb0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001bb4:	f001 f934 	bl	8002e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <UART4_IRQHandler+0x10>)
 8001bc2:	f004 f9a1 	bl	8005f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000344 	.word	0x20000344

08001bd0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <UART5_IRQHandler+0x10>)
 8001bd6:	f004 f997 	bl	8005f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000244 	.word	0x20000244

08001be4 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <UART8_IRQHandler+0x10>)
 8001bea:	f004 f98d 	bl	8005f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200002c4 	.word	0x200002c4

08001bf8 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <SPI4_IRQHandler+0x10>)
 8001bfe:	f003 fd29 	bl	8005654 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200001e0 	.word	0x200001e0

08001c0c <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <SPI6_IRQHandler+0x10>)
 8001c12:	f003 fd1f 	bl	8005654 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000118 	.word	0x20000118

08001c20 <SysTick_Handler>:

/* USER CODE BEGIN 1 */
void SysTick_Handler(void) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001c24:	f000 fa0c 	bl	8002040 <HAL_IncTick>
}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <SystemInit+0x28>)
 8001c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c36:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <SystemInit+0x28>)
 8001c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <SystemInit+0x28>)
 8001c42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c46:	609a      	str	r2, [r3, #8]
#endif
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart8;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <MX_UART4_Init+0x58>)
 8001c5e:	4a15      	ldr	r2, [pc, #84]	; (8001cb4 <MX_UART4_Init+0x5c>)
 8001c60:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001c62:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <MX_UART4_Init+0x58>)
 8001c64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c68:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <MX_UART4_Init+0x58>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c70:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <MX_UART4_Init+0x58>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <MX_UART4_Init+0x58>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <MX_UART4_Init+0x58>)
 8001c7e:	220c      	movs	r2, #12
 8001c80:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <MX_UART4_Init+0x58>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <MX_UART4_Init+0x58>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c8e:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <MX_UART4_Init+0x58>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <MX_UART4_Init+0x58>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c9a:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <MX_UART4_Init+0x58>)
 8001c9c:	f003 ff16 	bl	8005acc <HAL_UART_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001ca6:	f7ff fc75 	bl	8001594 <Error_Handler>
  }

}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000344 	.word	0x20000344
 8001cb4:	40004c00 	.word	0x40004c00

08001cb8 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8001cbc:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <MX_UART5_Init+0x58>)
 8001cbe:	4a15      	ldr	r2, [pc, #84]	; (8001d14 <MX_UART5_Init+0x5c>)
 8001cc0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001cc2:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <MX_UART5_Init+0x58>)
 8001cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cc8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <MX_UART5_Init+0x58>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <MX_UART5_Init+0x58>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <MX_UART5_Init+0x58>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <MX_UART5_Init+0x58>)
 8001cde:	220c      	movs	r2, #12
 8001ce0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <MX_UART5_Init+0x58>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_UART5_Init+0x58>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <MX_UART5_Init+0x58>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <MX_UART5_Init+0x58>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <MX_UART5_Init+0x58>)
 8001cfc:	f003 fee6 	bl	8005acc <HAL_UART_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001d06:	f7ff fc45 	bl	8001594 <Error_Handler>
  }

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000244 	.word	0x20000244
 8001d14:	40005000 	.word	0x40005000

08001d18 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 8001d1c:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <MX_UART8_Init+0x58>)
 8001d1e:	4a15      	ldr	r2, [pc, #84]	; (8001d74 <MX_UART8_Init+0x5c>)
 8001d20:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 30000;
 8001d22:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <MX_UART8_Init+0x58>)
 8001d24:	f247 5230 	movw	r2, #30000	; 0x7530
 8001d28:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <MX_UART8_Init+0x58>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <MX_UART8_Init+0x58>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <MX_UART8_Init+0x58>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <MX_UART8_Init+0x58>)
 8001d3e:	220c      	movs	r2, #12
 8001d40:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <MX_UART8_Init+0x58>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <MX_UART8_Init+0x58>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <MX_UART8_Init+0x58>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <MX_UART8_Init+0x58>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MX_UART8_Init+0x58>)
 8001d5c:	f003 feb6 	bl	8005acc <HAL_UART_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_UART8_Init+0x52>
  {
    Error_Handler();
 8001d66:	f7ff fc15 	bl	8001594 <Error_Handler>
  }

}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200002c4 	.word	0x200002c4
 8001d74:	40007c00 	.word	0x40007c00

08001d78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b090      	sub	sp, #64	; 0x40
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a6e      	ldr	r2, [pc, #440]	; (8001f50 <HAL_UART_MspInit+0x1d8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d14d      	bne.n	8001e36 <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d9a:	4b6e      	ldr	r3, [pc, #440]	; (8001f54 <HAL_UART_MspInit+0x1dc>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	4a6d      	ldr	r2, [pc, #436]	; (8001f54 <HAL_UART_MspInit+0x1dc>)
 8001da0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001da4:	6413      	str	r3, [r2, #64]	; 0x40
 8001da6:	4b6b      	ldr	r3, [pc, #428]	; (8001f54 <HAL_UART_MspInit+0x1dc>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8001db0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001db2:	4b68      	ldr	r3, [pc, #416]	; (8001f54 <HAL_UART_MspInit+0x1dc>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a67      	ldr	r2, [pc, #412]	; (8001f54 <HAL_UART_MspInit+0x1dc>)
 8001db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b65      	ldr	r3, [pc, #404]	; (8001f54 <HAL_UART_MspInit+0x1dc>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	4b62      	ldr	r3, [pc, #392]	; (8001f54 <HAL_UART_MspInit+0x1dc>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a61      	ldr	r2, [pc, #388]	; (8001f54 <HAL_UART_MspInit+0x1dc>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b5f      	ldr	r3, [pc, #380]	; (8001f54 <HAL_UART_MspInit+0x1dc>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	623b      	str	r3, [r7, #32]
 8001de0:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PI9     ------> UART4_RX
    PA0/WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = DAPI_RX_Pin;
 8001de2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001df4:	2308      	movs	r3, #8
 8001df6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(DAPI_RX_GPIO_Port, &GPIO_InitStruct);
 8001df8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4856      	ldr	r0, [pc, #344]	; (8001f58 <HAL_UART_MspInit+0x1e0>)
 8001e00:	f000 fc12 	bl	8002628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DAPI_TX_Pin;
 8001e04:	2301      	movs	r3, #1
 8001e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e14:	2308      	movs	r3, #8
 8001e16:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(DAPI_TX_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	484f      	ldr	r0, [pc, #316]	; (8001f5c <HAL_UART_MspInit+0x1e4>)
 8001e20:	f000 fc02 	bl	8002628 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2106      	movs	r1, #6
 8001e28:	2034      	movs	r0, #52	; 0x34
 8001e2a:	f000 fa3b 	bl	80022a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001e2e:	2034      	movs	r0, #52	; 0x34
 8001e30:	f000 fa64 	bl	80022fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 8001e34:	e087      	b.n	8001f46 <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==UART5)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a49      	ldr	r2, [pc, #292]	; (8001f60 <HAL_UART_MspInit+0x1e8>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d14d      	bne.n	8001edc <HAL_UART_MspInit+0x164>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001e40:	4b44      	ldr	r3, [pc, #272]	; (8001f54 <HAL_UART_MspInit+0x1dc>)
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	4a43      	ldr	r2, [pc, #268]	; (8001f54 <HAL_UART_MspInit+0x1dc>)
 8001e46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4c:	4b41      	ldr	r3, [pc, #260]	; (8001f54 <HAL_UART_MspInit+0x1dc>)
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e58:	4b3e      	ldr	r3, [pc, #248]	; (8001f54 <HAL_UART_MspInit+0x1dc>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	4a3d      	ldr	r2, [pc, #244]	; (8001f54 <HAL_UART_MspInit+0x1dc>)
 8001e5e:	f043 0304 	orr.w	r3, r3, #4
 8001e62:	6313      	str	r3, [r2, #48]	; 0x30
 8001e64:	4b3b      	ldr	r3, [pc, #236]	; (8001f54 <HAL_UART_MspInit+0x1dc>)
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e70:	4b38      	ldr	r3, [pc, #224]	; (8001f54 <HAL_UART_MspInit+0x1dc>)
 8001e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e74:	4a37      	ldr	r2, [pc, #220]	; (8001f54 <HAL_UART_MspInit+0x1dc>)
 8001e76:	f043 0308 	orr.w	r3, r3, #8
 8001e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7c:	4b35      	ldr	r3, [pc, #212]	; (8001f54 <HAL_UART_MspInit+0x1dc>)
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = INTERSPU_TX_Pin;
 8001e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e96:	2303      	movs	r3, #3
 8001e98:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001e9a:	2308      	movs	r3, #8
 8001e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(INTERSPU_TX_GPIO_Port, &GPIO_InitStruct);
 8001e9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	482f      	ldr	r0, [pc, #188]	; (8001f64 <HAL_UART_MspInit+0x1ec>)
 8001ea6:	f000 fbbf 	bl	8002628 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = INTERSPU_RX_Pin;
 8001eaa:	2304      	movs	r3, #4
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001eba:	2308      	movs	r3, #8
 8001ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(INTERSPU_RX_GPIO_Port, &GPIO_InitStruct);
 8001ebe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4828      	ldr	r0, [pc, #160]	; (8001f68 <HAL_UART_MspInit+0x1f0>)
 8001ec6:	f000 fbaf 	bl	8002628 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 6, 0);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2106      	movs	r1, #6
 8001ece:	2035      	movs	r0, #53	; 0x35
 8001ed0:	f000 f9e8 	bl	80022a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001ed4:	2035      	movs	r0, #53	; 0x35
 8001ed6:	f000 fa11 	bl	80022fc <HAL_NVIC_EnableIRQ>
}
 8001eda:	e034      	b.n	8001f46 <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==UART8)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a22      	ldr	r2, [pc, #136]	; (8001f6c <HAL_UART_MspInit+0x1f4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d12f      	bne.n	8001f46 <HAL_UART_MspInit+0x1ce>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <HAL_UART_MspInit+0x1dc>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	4a1a      	ldr	r2, [pc, #104]	; (8001f54 <HAL_UART_MspInit+0x1dc>)
 8001eec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef2:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <HAL_UART_MspInit+0x1dc>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <HAL_UART_MspInit+0x1dc>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a14      	ldr	r2, [pc, #80]	; (8001f54 <HAL_UART_MspInit+0x1dc>)
 8001f04:	f043 0310 	orr.w	r3, r3, #16
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_UART_MspInit+0x1dc>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0310 	and.w	r3, r3, #16
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EXP_IN_Pin|EXP_OUT_Pin;
 8001f16:	2303      	movs	r3, #3
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f22:	2303      	movs	r3, #3
 8001f24:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001f26:	2308      	movs	r3, #8
 8001f28:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f2e:	4619      	mov	r1, r3
 8001f30:	480f      	ldr	r0, [pc, #60]	; (8001f70 <HAL_UART_MspInit+0x1f8>)
 8001f32:	f000 fb79 	bl	8002628 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 6, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2106      	movs	r1, #6
 8001f3a:	2053      	movs	r0, #83	; 0x53
 8001f3c:	f000 f9b2 	bl	80022a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001f40:	2053      	movs	r0, #83	; 0x53
 8001f42:	f000 f9db 	bl	80022fc <HAL_NVIC_EnableIRQ>
}
 8001f46:	bf00      	nop
 8001f48:	3740      	adds	r7, #64	; 0x40
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40004c00 	.word	0x40004c00
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40022000 	.word	0x40022000
 8001f5c:	40020000 	.word	0x40020000
 8001f60:	40005000 	.word	0x40005000
 8001f64:	40020800 	.word	0x40020800
 8001f68:	40020c00 	.word	0x40020c00
 8001f6c:	40007c00 	.word	0x40007c00
 8001f70:	40021000 	.word	0x40021000

08001f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f7a:	e003      	b.n	8001f84 <LoopCopyDataInit>

08001f7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f82:	3104      	adds	r1, #4

08001f84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f84:	480b      	ldr	r0, [pc, #44]	; (8001fb4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f8c:	d3f6      	bcc.n	8001f7c <CopyDataInit>
  ldr  r2, =_sbss
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f90:	e002      	b.n	8001f98 <LoopFillZerobss>

08001f92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f94:	f842 3b04 	str.w	r3, [r2], #4

08001f98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f9c:	d3f9      	bcc.n	8001f92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f9e:	f7ff fe45 	bl	8001c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fa2:	f004 feb5 	bl	8006d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fa6:	f7fe fd5f 	bl	8000a68 <main>
  bx  lr    
 8001faa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fac:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001fb0:	08006f7c 	.word	0x08006f7c
  ldr  r0, =_sdata
 8001fb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fb8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001fbc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001fc0:	200003c8 	.word	0x200003c8

08001fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc4:	e7fe      	b.n	8001fc4 <ADC_IRQHandler>

08001fc6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fca:	2003      	movs	r0, #3
 8001fcc:	f000 f94a 	bl	8002264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f000 f805 	bl	8001fe0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001fd6:	f7ff fd67 	bl	8001aa8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_InitTick+0x54>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_InitTick+0x58>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 f994 	bl	800232c <HAL_SYSTICK_Config>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e00e      	b.n	800202c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b0f      	cmp	r3, #15
 8002012:	d80a      	bhi.n	800202a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002014:	2200      	movs	r2, #0
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	f000 f942 	bl	80022a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002020:	4a06      	ldr	r2, [pc, #24]	; (800203c <HAL_InitTick+0x5c>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	e000      	b.n	800202c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000000 	.word	0x20000000
 8002038:	20000008 	.word	0x20000008
 800203c:	20000004 	.word	0x20000004

08002040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_IncTick+0x20>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_IncTick+0x24>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4413      	add	r3, r2
 8002050:	4a04      	ldr	r2, [pc, #16]	; (8002064 <HAL_IncTick+0x24>)
 8002052:	6013      	str	r3, [r2, #0]
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000008 	.word	0x20000008
 8002064:	200003c4 	.word	0x200003c4

08002068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return uwTick;
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <HAL_GetTick+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	200003c4 	.word	0x200003c4

08002080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002088:	f7ff ffee 	bl	8002068 <HAL_GetTick>
 800208c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002098:	d005      	beq.n	80020a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <HAL_Delay+0x40>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4413      	add	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020a6:	bf00      	nop
 80020a8:	f7ff ffde 	bl	8002068 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d8f7      	bhi.n	80020a8 <HAL_Delay+0x28>
  {
  }
}
 80020b8:	bf00      	nop
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000008 	.word	0x20000008

080020c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <__NVIC_SetPriorityGrouping+0x40>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020e0:	4013      	ands	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f2:	4a04      	ldr	r2, [pc, #16]	; (8002104 <__NVIC_SetPriorityGrouping+0x40>)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	60d3      	str	r3, [r2, #12]
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00
 8002108:	05fa0000 	.word	0x05fa0000

0800210c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002110:	4b04      	ldr	r3, [pc, #16]	; (8002124 <__NVIC_GetPriorityGrouping+0x18>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	0a1b      	lsrs	r3, r3, #8
 8002116:	f003 0307 	and.w	r3, r3, #7
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	2b00      	cmp	r3, #0
 8002138:	db0b      	blt.n	8002152 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	f003 021f 	and.w	r2, r3, #31
 8002140:	4907      	ldr	r1, [pc, #28]	; (8002160 <__NVIC_EnableIRQ+0x38>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	2001      	movs	r0, #1
 800214a:	fa00 f202 	lsl.w	r2, r0, r2
 800214e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000e100 	.word	0xe000e100

08002164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	6039      	str	r1, [r7, #0]
 800216e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002174:	2b00      	cmp	r3, #0
 8002176:	db0a      	blt.n	800218e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	b2da      	uxtb	r2, r3
 800217c:	490c      	ldr	r1, [pc, #48]	; (80021b0 <__NVIC_SetPriority+0x4c>)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	0112      	lsls	r2, r2, #4
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	440b      	add	r3, r1
 8002188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800218c:	e00a      	b.n	80021a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4908      	ldr	r1, [pc, #32]	; (80021b4 <__NVIC_SetPriority+0x50>)
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	3b04      	subs	r3, #4
 800219c:	0112      	lsls	r2, r2, #4
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	440b      	add	r3, r1
 80021a2:	761a      	strb	r2, [r3, #24]
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000e100 	.word	0xe000e100
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b089      	sub	sp, #36	; 0x24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f1c3 0307 	rsb	r3, r3, #7
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	bf28      	it	cs
 80021d6:	2304      	movcs	r3, #4
 80021d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3304      	adds	r3, #4
 80021de:	2b06      	cmp	r3, #6
 80021e0:	d902      	bls.n	80021e8 <NVIC_EncodePriority+0x30>
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3b03      	subs	r3, #3
 80021e6:	e000      	b.n	80021ea <NVIC_EncodePriority+0x32>
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ec:	f04f 32ff 	mov.w	r2, #4294967295
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43da      	mvns	r2, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	401a      	ands	r2, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002200:	f04f 31ff 	mov.w	r1, #4294967295
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	43d9      	mvns	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002210:	4313      	orrs	r3, r2
         );
}
 8002212:	4618      	mov	r0, r3
 8002214:	3724      	adds	r7, #36	; 0x24
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3b01      	subs	r3, #1
 800222c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002230:	d301      	bcc.n	8002236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002232:	2301      	movs	r3, #1
 8002234:	e00f      	b.n	8002256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002236:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <SysTick_Config+0x40>)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3b01      	subs	r3, #1
 800223c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800223e:	210f      	movs	r1, #15
 8002240:	f04f 30ff 	mov.w	r0, #4294967295
 8002244:	f7ff ff8e 	bl	8002164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <SysTick_Config+0x40>)
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800224e:	4b04      	ldr	r3, [pc, #16]	; (8002260 <SysTick_Config+0x40>)
 8002250:	2207      	movs	r2, #7
 8002252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	e000e010 	.word	0xe000e010

08002264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b07      	cmp	r3, #7
 8002270:	d00f      	beq.n	8002292 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b06      	cmp	r3, #6
 8002276:	d00c      	beq.n	8002292 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b05      	cmp	r3, #5
 800227c:	d009      	beq.n	8002292 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b04      	cmp	r3, #4
 8002282:	d006      	beq.n	8002292 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b03      	cmp	r3, #3
 8002288:	d003      	beq.n	8002292 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800228a:	2192      	movs	r1, #146	; 0x92
 800228c:	4804      	ldr	r0, [pc, #16]	; (80022a0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800228e:	f7ff f988 	bl	80015a2 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff ff16 	bl	80020c4 <__NVIC_SetPriorityGrouping>
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	08006d80 	.word	0x08006d80

080022a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b0f      	cmp	r3, #15
 80022ba:	d903      	bls.n	80022c4 <HAL_NVIC_SetPriority+0x20>
 80022bc:	21aa      	movs	r1, #170	; 0xaa
 80022be:	480e      	ldr	r0, [pc, #56]	; (80022f8 <HAL_NVIC_SetPriority+0x54>)
 80022c0:	f7ff f96f 	bl	80015a2 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b0f      	cmp	r3, #15
 80022c8:	d903      	bls.n	80022d2 <HAL_NVIC_SetPriority+0x2e>
 80022ca:	21ab      	movs	r1, #171	; 0xab
 80022cc:	480a      	ldr	r0, [pc, #40]	; (80022f8 <HAL_NVIC_SetPriority+0x54>)
 80022ce:	f7ff f968 	bl	80015a2 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d2:	f7ff ff1b 	bl	800210c <__NVIC_GetPriorityGrouping>
 80022d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	68b9      	ldr	r1, [r7, #8]
 80022dc:	6978      	ldr	r0, [r7, #20]
 80022de:	f7ff ff6b 	bl	80021b8 <NVIC_EncodePriority>
 80022e2:	4602      	mov	r2, r0
 80022e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ff3a 	bl	8002164 <__NVIC_SetPriority>
}
 80022f0:	bf00      	nop
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	08006d80 	.word	0x08006d80

080022fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	2b00      	cmp	r3, #0
 800230c:	da03      	bge.n	8002316 <HAL_NVIC_EnableIRQ+0x1a>
 800230e:	21be      	movs	r1, #190	; 0xbe
 8002310:	4805      	ldr	r0, [pc, #20]	; (8002328 <HAL_NVIC_EnableIRQ+0x2c>)
 8002312:	f7ff f946 	bl	80015a2 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ff04 	bl	8002128 <__NVIC_EnableIRQ>
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	08006d80 	.word	0x08006d80

0800232c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff ff73 	bl	8002220 <SysTick_Config>
 800233a:	4603      	mov	r3, r0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e0a5      	b.n	80024a2 <HAL_CRC_Init+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a54      	ldr	r2, [pc, #336]	; (80024ac <HAL_CRC_Init+0x168>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d003      	beq.n	8002368 <HAL_CRC_Init+0x24>
 8002360:	2170      	movs	r1, #112	; 0x70
 8002362:	4853      	ldr	r0, [pc, #332]	; (80024b0 <HAL_CRC_Init+0x16c>)
 8002364:	f7ff f91d 	bl	80015a2 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	7f5b      	ldrb	r3, [r3, #29]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d105      	bne.n	800237e <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7fe f8ff 	bl	800057c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2202      	movs	r2, #2
 8002382:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	791b      	ldrb	r3, [r3, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d007      	beq.n	800239c <HAL_CRC_Init+0x58>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	791b      	ldrb	r3, [r3, #4]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d003      	beq.n	800239c <HAL_CRC_Init+0x58>
 8002394:	217e      	movs	r1, #126	; 0x7e
 8002396:	4846      	ldr	r0, [pc, #280]	; (80024b0 <HAL_CRC_Init+0x16c>)
 8002398:	f7ff f903 	bl	80015a2 <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	791b      	ldrb	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10c      	bne.n	80023be <HAL_CRC_Init+0x7a>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a42      	ldr	r2, [pc, #264]	; (80024b4 <HAL_CRC_Init+0x170>)
 80023aa:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0218 	bic.w	r2, r2, #24
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	e00c      	b.n	80023d8 <HAL_CRC_Init+0x94>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6899      	ldr	r1, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	461a      	mov	r2, r3
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f875 	bl	80024b8 <HAL_CRCEx_Polynomial_Set>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_CRC_Init+0x94>
    {
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e064      	b.n	80024a2 <HAL_CRC_Init+0x15e>
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	795b      	ldrb	r3, [r3, #5]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d007      	beq.n	80023f0 <HAL_CRC_Init+0xac>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	795b      	ldrb	r3, [r3, #5]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d003      	beq.n	80023f0 <HAL_CRC_Init+0xac>
 80023e8:	2190      	movs	r1, #144	; 0x90
 80023ea:	4831      	ldr	r0, [pc, #196]	; (80024b0 <HAL_CRC_Init+0x16c>)
 80023ec:	f7ff f8d9 	bl	80015a2 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	795b      	ldrb	r3, [r3, #5]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d105      	bne.n	8002404 <HAL_CRC_Init+0xc0>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002400:	611a      	str	r2, [r3, #16]
 8002402:	e004      	b.n	800240e <HAL_CRC_Init+0xca>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6912      	ldr	r2, [r2, #16]
 800240c:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00f      	beq.n	8002436 <HAL_CRC_Init+0xf2>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	2b20      	cmp	r3, #32
 800241c:	d00b      	beq.n	8002436 <HAL_CRC_Init+0xf2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	2b40      	cmp	r3, #64	; 0x40
 8002424:	d007      	beq.n	8002436 <HAL_CRC_Init+0xf2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	2b60      	cmp	r3, #96	; 0x60
 800242c:	d003      	beq.n	8002436 <HAL_CRC_Init+0xf2>
 800242e:	219c      	movs	r1, #156	; 0x9c
 8002430:	481f      	ldr	r0, [pc, #124]	; (80024b0 <HAL_CRC_Init+0x16c>)
 8002432:	f7ff f8b6 	bl	80015a2 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	695a      	ldr	r2, [r3, #20]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <HAL_CRC_Init+0x120>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	2b80      	cmp	r3, #128	; 0x80
 800245a:	d003      	beq.n	8002464 <HAL_CRC_Init+0x120>
 800245c:	21a0      	movs	r1, #160	; 0xa0
 800245e:	4814      	ldr	r0, [pc, #80]	; (80024b0 <HAL_CRC_Init+0x16c>)
 8002460:	f7ff f89f 	bl	80015a2 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699a      	ldr	r2, [r3, #24]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	609a      	str	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d00b      	beq.n	800249a <HAL_CRC_Init+0x156>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d007      	beq.n	800249a <HAL_CRC_Init+0x156>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	2b03      	cmp	r3, #3
 8002490:	d003      	beq.n	800249a <HAL_CRC_Init+0x156>
 8002492:	21a5      	movs	r1, #165	; 0xa5
 8002494:	4806      	ldr	r0, [pc, #24]	; (80024b0 <HAL_CRC_Init+0x16c>)
 8002496:	f7ff f884 	bl	80015a2 <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40023000 	.word	0x40023000
 80024b0:	08006dbc 	.word	0x08006dbc
 80024b4:	04c11db7 	.word	0x04c11db7

080024b8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80024c8:	231f      	movs	r3, #31
 80024ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00c      	beq.n	80024ec <HAL_CRCEx_Polynomial_Set+0x34>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d009      	beq.n	80024ec <HAL_CRCEx_Polynomial_Set+0x34>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b10      	cmp	r3, #16
 80024dc:	d006      	beq.n	80024ec <HAL_CRCEx_Polynomial_Set+0x34>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b18      	cmp	r3, #24
 80024e2:	d003      	beq.n	80024ec <HAL_CRCEx_Polynomial_Set+0x34>
 80024e4:	215f      	movs	r1, #95	; 0x5f
 80024e6:	483e      	ldr	r0, [pc, #248]	; (80025e0 <HAL_CRCEx_Polynomial_Set+0x128>)
 80024e8:	f7ff f85b 	bl	80015a2 <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80024ec:	bf00      	nop
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1e5a      	subs	r2, r3, #1
 80024f2:	613a      	str	r2, [r7, #16]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d009      	beq.n	800250c <HAL_CRCEx_Polynomial_Set+0x54>
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_CRCEx_Polynomial_Set+0x36>
  {
  }

  switch (PolyLength)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b18      	cmp	r3, #24
 8002510:	d846      	bhi.n	80025a0 <HAL_CRCEx_Polynomial_Set+0xe8>
 8002512:	a201      	add	r2, pc, #4	; (adr r2, 8002518 <HAL_CRCEx_Polynomial_Set+0x60>)
 8002514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002518:	080025a7 	.word	0x080025a7
 800251c:	080025a1 	.word	0x080025a1
 8002520:	080025a1 	.word	0x080025a1
 8002524:	080025a1 	.word	0x080025a1
 8002528:	080025a1 	.word	0x080025a1
 800252c:	080025a1 	.word	0x080025a1
 8002530:	080025a1 	.word	0x080025a1
 8002534:	080025a1 	.word	0x080025a1
 8002538:	08002595 	.word	0x08002595
 800253c:	080025a1 	.word	0x080025a1
 8002540:	080025a1 	.word	0x080025a1
 8002544:	080025a1 	.word	0x080025a1
 8002548:	080025a1 	.word	0x080025a1
 800254c:	080025a1 	.word	0x080025a1
 8002550:	080025a1 	.word	0x080025a1
 8002554:	080025a1 	.word	0x080025a1
 8002558:	08002589 	.word	0x08002589
 800255c:	080025a1 	.word	0x080025a1
 8002560:	080025a1 	.word	0x080025a1
 8002564:	080025a1 	.word	0x080025a1
 8002568:	080025a1 	.word	0x080025a1
 800256c:	080025a1 	.word	0x080025a1
 8002570:	080025a1 	.word	0x080025a1
 8002574:	080025a1 	.word	0x080025a1
 8002578:	0800257d 	.word	0x0800257d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	2b06      	cmp	r3, #6
 8002580:	d913      	bls.n	80025aa <HAL_CRCEx_Polynomial_Set+0xf2>
      {
        status =   HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002586:	e010      	b.n	80025aa <HAL_CRCEx_Polynomial_Set+0xf2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	2b07      	cmp	r3, #7
 800258c:	d90f      	bls.n	80025ae <HAL_CRCEx_Polynomial_Set+0xf6>
      {
        status =   HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002592:	e00c      	b.n	80025ae <HAL_CRCEx_Polynomial_Set+0xf6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	2b0f      	cmp	r3, #15
 8002598:	d90b      	bls.n	80025b2 <HAL_CRCEx_Polynomial_Set+0xfa>
      {
        status =   HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800259e:	e008      	b.n	80025b2 <HAL_CRCEx_Polynomial_Set+0xfa>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	75fb      	strb	r3, [r7, #23]
      break;
 80025a4:	e006      	b.n	80025b4 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 80025a6:	bf00      	nop
 80025a8:	e004      	b.n	80025b4 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 80025aa:	bf00      	nop
 80025ac:	e002      	b.n	80025b4 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 80025ae:	bf00      	nop
 80025b0:	e000      	b.n	80025b4 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 80025b2:	bf00      	nop
  }
  if (status == HAL_OK)
 80025b4:	7dfb      	ldrb	r3, [r7, #23]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10d      	bne.n	80025d6 <HAL_CRCEx_Polynomial_Set+0x11e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f023 0118 	bic.w	r1, r3, #24
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80025d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	08006df4 	.word	0x08006df4

080025e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d004      	beq.n	8002602 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2280      	movs	r2, #128	; 0x80
 80025fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e00c      	b.n	800261c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2205      	movs	r2, #5
 8002606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0201 	bic.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800263e:	2300      	movs	r3, #0
 8002640:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a42      	ldr	r2, [pc, #264]	; (8002750 <HAL_GPIO_Init+0x128>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d02b      	beq.n	80026a2 <HAL_GPIO_Init+0x7a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a41      	ldr	r2, [pc, #260]	; (8002754 <HAL_GPIO_Init+0x12c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d027      	beq.n	80026a2 <HAL_GPIO_Init+0x7a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a40      	ldr	r2, [pc, #256]	; (8002758 <HAL_GPIO_Init+0x130>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d023      	beq.n	80026a2 <HAL_GPIO_Init+0x7a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a3f      	ldr	r2, [pc, #252]	; (800275c <HAL_GPIO_Init+0x134>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d01f      	beq.n	80026a2 <HAL_GPIO_Init+0x7a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a3e      	ldr	r2, [pc, #248]	; (8002760 <HAL_GPIO_Init+0x138>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d01b      	beq.n	80026a2 <HAL_GPIO_Init+0x7a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a3d      	ldr	r2, [pc, #244]	; (8002764 <HAL_GPIO_Init+0x13c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d017      	beq.n	80026a2 <HAL_GPIO_Init+0x7a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a3c      	ldr	r2, [pc, #240]	; (8002768 <HAL_GPIO_Init+0x140>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d013      	beq.n	80026a2 <HAL_GPIO_Init+0x7a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a3b      	ldr	r2, [pc, #236]	; (800276c <HAL_GPIO_Init+0x144>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00f      	beq.n	80026a2 <HAL_GPIO_Init+0x7a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a3a      	ldr	r2, [pc, #232]	; (8002770 <HAL_GPIO_Init+0x148>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00b      	beq.n	80026a2 <HAL_GPIO_Init+0x7a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a39      	ldr	r2, [pc, #228]	; (8002774 <HAL_GPIO_Init+0x14c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d007      	beq.n	80026a2 <HAL_GPIO_Init+0x7a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a38      	ldr	r2, [pc, #224]	; (8002778 <HAL_GPIO_Init+0x150>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x7a>
 800269a:	21b1      	movs	r1, #177	; 0xb1
 800269c:	4837      	ldr	r0, [pc, #220]	; (800277c <HAL_GPIO_Init+0x154>)
 800269e:	f7fe ff80 	bl	80015a2 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d103      	bne.n	80026b4 <HAL_GPIO_Init+0x8c>
 80026ac:	21b2      	movs	r1, #178	; 0xb2
 80026ae:	4833      	ldr	r0, [pc, #204]	; (800277c <HAL_GPIO_Init+0x154>)
 80026b0:	f7fe ff77 	bl	80015a2 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d035      	beq.n	8002728 <HAL_GPIO_Init+0x100>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d031      	beq.n	8002728 <HAL_GPIO_Init+0x100>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b11      	cmp	r3, #17
 80026ca:	d02d      	beq.n	8002728 <HAL_GPIO_Init+0x100>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d029      	beq.n	8002728 <HAL_GPIO_Init+0x100>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b12      	cmp	r3, #18
 80026da:	d025      	beq.n	8002728 <HAL_GPIO_Init+0x100>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	4a27      	ldr	r2, [pc, #156]	; (8002780 <HAL_GPIO_Init+0x158>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d020      	beq.n	8002728 <HAL_GPIO_Init+0x100>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	4a26      	ldr	r2, [pc, #152]	; (8002784 <HAL_GPIO_Init+0x15c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d01b      	beq.n	8002728 <HAL_GPIO_Init+0x100>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4a24      	ldr	r2, [pc, #144]	; (8002788 <HAL_GPIO_Init+0x160>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d016      	beq.n	8002728 <HAL_GPIO_Init+0x100>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4a23      	ldr	r2, [pc, #140]	; (800278c <HAL_GPIO_Init+0x164>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d011      	beq.n	8002728 <HAL_GPIO_Init+0x100>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4a21      	ldr	r2, [pc, #132]	; (8002790 <HAL_GPIO_Init+0x168>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00c      	beq.n	8002728 <HAL_GPIO_Init+0x100>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4a20      	ldr	r2, [pc, #128]	; (8002794 <HAL_GPIO_Init+0x16c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d007      	beq.n	8002728 <HAL_GPIO_Init+0x100>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b03      	cmp	r3, #3
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x100>
 8002720:	21b3      	movs	r1, #179	; 0xb3
 8002722:	4816      	ldr	r0, [pc, #88]	; (800277c <HAL_GPIO_Init+0x154>)
 8002724:	f7fe ff3d 	bl	80015a2 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00b      	beq.n	8002748 <HAL_GPIO_Init+0x120>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d007      	beq.n	8002748 <HAL_GPIO_Init+0x120>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x120>
 8002740:	21b4      	movs	r1, #180	; 0xb4
 8002742:	480e      	ldr	r0, [pc, #56]	; (800277c <HAL_GPIO_Init+0x154>)
 8002744:	f7fe ff2d 	bl	80015a2 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002748:	2300      	movs	r3, #0
 800274a:	61fb      	str	r3, [r7, #28]
 800274c:	e2d6      	b.n	8002cfc <HAL_GPIO_Init+0x6d4>
 800274e:	bf00      	nop
 8002750:	40020000 	.word	0x40020000
 8002754:	40020400 	.word	0x40020400
 8002758:	40020800 	.word	0x40020800
 800275c:	40020c00 	.word	0x40020c00
 8002760:	40021000 	.word	0x40021000
 8002764:	40021400 	.word	0x40021400
 8002768:	40021800 	.word	0x40021800
 800276c:	40021c00 	.word	0x40021c00
 8002770:	40022000 	.word	0x40022000
 8002774:	40022400 	.word	0x40022400
 8002778:	40022800 	.word	0x40022800
 800277c:	08006e30 	.word	0x08006e30
 8002780:	10110000 	.word	0x10110000
 8002784:	10210000 	.word	0x10210000
 8002788:	10310000 	.word	0x10310000
 800278c:	10120000 	.word	0x10120000
 8002790:	10220000 	.word	0x10220000
 8002794:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002798:	2201      	movs	r2, #1
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4013      	ands	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	f040 82a0 	bne.w	8002cf6 <HAL_GPIO_Init+0x6ce>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d00b      	beq.n	80027d6 <HAL_GPIO_Init+0x1ae>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d007      	beq.n	80027d6 <HAL_GPIO_Init+0x1ae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027ca:	2b11      	cmp	r3, #17
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_Init+0x1ae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b12      	cmp	r3, #18
 80027d4:	d144      	bne.n	8002860 <HAL_GPIO_Init+0x238>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00f      	beq.n	80027fe <HAL_GPIO_Init+0x1d6>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d00b      	beq.n	80027fe <HAL_GPIO_Init+0x1d6>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d007      	beq.n	80027fe <HAL_GPIO_Init+0x1d6>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_Init+0x1d6>
 80027f6:	21c6      	movs	r1, #198	; 0xc6
 80027f8:	482a      	ldr	r0, [pc, #168]	; (80028a4 <HAL_GPIO_Init+0x27c>)
 80027fa:	f7fe fed2 	bl	80015a2 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	2203      	movs	r2, #3
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002834:	2201      	movs	r2, #1
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	091b      	lsrs	r3, r3, #4
 800284a:	f003 0201 	and.w	r2, r3, #1
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2203      	movs	r2, #3
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d007      	beq.n	80028a8 <HAL_GPIO_Init+0x280>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b12      	cmp	r3, #18
 800289e:	f040 814b 	bne.w	8002b38 <HAL_GPIO_Init+0x510>
 80028a2:	e001      	b.n	80028a8 <HAL_GPIO_Init+0x280>
 80028a4:	08006e30 	.word	0x08006e30
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 811f 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	f000 811a 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8115 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 8110 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 810b 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	f000 8106 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	f000 8101 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	f000 80fc 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	f000 80f7 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	2b03      	cmp	r3, #3
 8002908:	f000 80f2 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	2b03      	cmp	r3, #3
 8002912:	f000 80ed 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	2b03      	cmp	r3, #3
 800291c:	f000 80e8 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	2b03      	cmp	r3, #3
 8002926:	f000 80e3 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	2b03      	cmp	r3, #3
 8002930:	f000 80de 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	2b03      	cmp	r3, #3
 800293a:	f000 80d9 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	2b04      	cmp	r3, #4
 8002944:	f000 80d4 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	2b04      	cmp	r3, #4
 800294e:	f000 80cf 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	2b04      	cmp	r3, #4
 8002958:	f000 80ca 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	2b04      	cmp	r3, #4
 8002962:	f000 80c5 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2b04      	cmp	r3, #4
 800296c:	f000 80c0 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	2b05      	cmp	r3, #5
 8002976:	f000 80bb 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	2b05      	cmp	r3, #5
 8002980:	f000 80b6 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	2b05      	cmp	r3, #5
 800298a:	f000 80b1 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	2b05      	cmp	r3, #5
 8002994:	f000 80ac 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	2b05      	cmp	r3, #5
 800299e:	f000 80a7 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	2b05      	cmp	r3, #5
 80029a8:	f000 80a2 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	2b06      	cmp	r3, #6
 80029b2:	f000 809d 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	2b06      	cmp	r3, #6
 80029bc:	f000 8098 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	2b07      	cmp	r3, #7
 80029c6:	f000 8093 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	2b07      	cmp	r3, #7
 80029d0:	f000 808e 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	2b07      	cmp	r3, #7
 80029da:	f000 8089 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	2b07      	cmp	r3, #7
 80029e4:	f000 8084 	beq.w	8002af0 <HAL_GPIO_Init+0x4c8>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	2b07      	cmp	r3, #7
 80029ee:	d07f      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	2b07      	cmp	r3, #7
 80029f6:	d07b      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	2b07      	cmp	r3, #7
 80029fe:	d077      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d073      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d06f      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d06b      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d067      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d063      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d05f      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d05b      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	2b09      	cmp	r3, #9
 8002a3e:	d057      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	2b09      	cmp	r3, #9
 8002a46:	d053      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	2b09      	cmp	r3, #9
 8002a4e:	d04f      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	2b09      	cmp	r3, #9
 8002a56:	d04b      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	2b09      	cmp	r3, #9
 8002a5e:	d047      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	2b09      	cmp	r3, #9
 8002a66:	d043      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	2b09      	cmp	r3, #9
 8002a6e:	d03f      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	2b0a      	cmp	r3, #10
 8002a76:	d03b      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	2b0a      	cmp	r3, #10
 8002a7e:	d037      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	2b0a      	cmp	r3, #10
 8002a86:	d033      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	2b0a      	cmp	r3, #10
 8002a8e:	d02f      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	2b0b      	cmp	r3, #11
 8002a96:	d02b      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	2b0a      	cmp	r3, #10
 8002a9e:	d027      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	2b0b      	cmp	r3, #11
 8002aa6:	d023      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	2b0b      	cmp	r3, #11
 8002aae:	d01f      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	2b0c      	cmp	r3, #12
 8002ab6:	d01b      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b0c      	cmp	r3, #12
 8002abe:	d017      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	2b0c      	cmp	r3, #12
 8002ac6:	d013      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	2b0f      	cmp	r3, #15
 8002ace:	d00f      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	2b0d      	cmp	r3, #13
 8002ad6:	d00b      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	2b0e      	cmp	r3, #14
 8002ade:	d007      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	2b0d      	cmp	r3, #13
 8002ae6:	d003      	beq.n	8002af0 <HAL_GPIO_Init+0x4c8>
 8002ae8:	21de      	movs	r1, #222	; 0xde
 8002aea:	4888      	ldr	r0, [pc, #544]	; (8002d0c <HAL_GPIO_Init+0x6e4>)
 8002aec:	f7fe fd59 	bl	80015a2 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	08da      	lsrs	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3208      	adds	r2, #8
 8002af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	220f      	movs	r2, #15
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	08da      	lsrs	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3208      	adds	r2, #8
 8002b32:	69b9      	ldr	r1, [r7, #24]
 8002b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	2203      	movs	r2, #3
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 0203 	and.w	r2, r3, #3
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80be 	beq.w	8002cf6 <HAL_GPIO_Init+0x6ce>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b7a:	4b65      	ldr	r3, [pc, #404]	; (8002d10 <HAL_GPIO_Init+0x6e8>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	4a64      	ldr	r2, [pc, #400]	; (8002d10 <HAL_GPIO_Init+0x6e8>)
 8002b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b84:	6453      	str	r3, [r2, #68]	; 0x44
 8002b86:	4b62      	ldr	r3, [pc, #392]	; (8002d10 <HAL_GPIO_Init+0x6e8>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b92:	4a60      	ldr	r2, [pc, #384]	; (8002d14 <HAL_GPIO_Init+0x6ec>)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	089b      	lsrs	r3, r3, #2
 8002b98:	3302      	adds	r3, #2
 8002b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	220f      	movs	r2, #15
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a57      	ldr	r2, [pc, #348]	; (8002d18 <HAL_GPIO_Init+0x6f0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d037      	beq.n	8002c2e <HAL_GPIO_Init+0x606>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a56      	ldr	r2, [pc, #344]	; (8002d1c <HAL_GPIO_Init+0x6f4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d031      	beq.n	8002c2a <HAL_GPIO_Init+0x602>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a55      	ldr	r2, [pc, #340]	; (8002d20 <HAL_GPIO_Init+0x6f8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d02b      	beq.n	8002c26 <HAL_GPIO_Init+0x5fe>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a54      	ldr	r2, [pc, #336]	; (8002d24 <HAL_GPIO_Init+0x6fc>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d025      	beq.n	8002c22 <HAL_GPIO_Init+0x5fa>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a53      	ldr	r2, [pc, #332]	; (8002d28 <HAL_GPIO_Init+0x700>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d01f      	beq.n	8002c1e <HAL_GPIO_Init+0x5f6>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a52      	ldr	r2, [pc, #328]	; (8002d2c <HAL_GPIO_Init+0x704>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d019      	beq.n	8002c1a <HAL_GPIO_Init+0x5f2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a51      	ldr	r2, [pc, #324]	; (8002d30 <HAL_GPIO_Init+0x708>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d013      	beq.n	8002c16 <HAL_GPIO_Init+0x5ee>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a50      	ldr	r2, [pc, #320]	; (8002d34 <HAL_GPIO_Init+0x70c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d00d      	beq.n	8002c12 <HAL_GPIO_Init+0x5ea>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a4f      	ldr	r2, [pc, #316]	; (8002d38 <HAL_GPIO_Init+0x710>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d007      	beq.n	8002c0e <HAL_GPIO_Init+0x5e6>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a4e      	ldr	r2, [pc, #312]	; (8002d3c <HAL_GPIO_Init+0x714>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d101      	bne.n	8002c0a <HAL_GPIO_Init+0x5e2>
 8002c06:	2309      	movs	r3, #9
 8002c08:	e012      	b.n	8002c30 <HAL_GPIO_Init+0x608>
 8002c0a:	230a      	movs	r3, #10
 8002c0c:	e010      	b.n	8002c30 <HAL_GPIO_Init+0x608>
 8002c0e:	2308      	movs	r3, #8
 8002c10:	e00e      	b.n	8002c30 <HAL_GPIO_Init+0x608>
 8002c12:	2307      	movs	r3, #7
 8002c14:	e00c      	b.n	8002c30 <HAL_GPIO_Init+0x608>
 8002c16:	2306      	movs	r3, #6
 8002c18:	e00a      	b.n	8002c30 <HAL_GPIO_Init+0x608>
 8002c1a:	2305      	movs	r3, #5
 8002c1c:	e008      	b.n	8002c30 <HAL_GPIO_Init+0x608>
 8002c1e:	2304      	movs	r3, #4
 8002c20:	e006      	b.n	8002c30 <HAL_GPIO_Init+0x608>
 8002c22:	2303      	movs	r3, #3
 8002c24:	e004      	b.n	8002c30 <HAL_GPIO_Init+0x608>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e002      	b.n	8002c30 <HAL_GPIO_Init+0x608>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <HAL_GPIO_Init+0x608>
 8002c2e:	2300      	movs	r3, #0
 8002c30:	69fa      	ldr	r2, [r7, #28]
 8002c32:	f002 0203 	and.w	r2, r2, #3
 8002c36:	0092      	lsls	r2, r2, #2
 8002c38:	4093      	lsls	r3, r2
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c40:	4934      	ldr	r1, [pc, #208]	; (8002d14 <HAL_GPIO_Init+0x6ec>)
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	089b      	lsrs	r3, r3, #2
 8002c46:	3302      	adds	r3, #2
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c4e:	4b3c      	ldr	r3, [pc, #240]	; (8002d40 <HAL_GPIO_Init+0x718>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	43db      	mvns	r3, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_GPIO_Init+0x64a>
        {
          temp |= iocurrent;
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c72:	4a33      	ldr	r2, [pc, #204]	; (8002d40 <HAL_GPIO_Init+0x718>)
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c78:	4b31      	ldr	r3, [pc, #196]	; (8002d40 <HAL_GPIO_Init+0x718>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_GPIO_Init+0x674>
        {
          temp |= iocurrent;
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c9c:	4a28      	ldr	r2, [pc, #160]	; (8002d40 <HAL_GPIO_Init+0x718>)
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ca2:	4b27      	ldr	r3, [pc, #156]	; (8002d40 <HAL_GPIO_Init+0x718>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_Init+0x69e>
        {
          temp |= iocurrent;
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cc6:	4a1e      	ldr	r2, [pc, #120]	; (8002d40 <HAL_GPIO_Init+0x718>)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ccc:	4b1c      	ldr	r3, [pc, #112]	; (8002d40 <HAL_GPIO_Init+0x718>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_GPIO_Init+0x6c8>
        {
          temp |= iocurrent;
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cf0:	4a13      	ldr	r2, [pc, #76]	; (8002d40 <HAL_GPIO_Init+0x718>)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	61fb      	str	r3, [r7, #28]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	2b0f      	cmp	r3, #15
 8002d00:	f67f ad4a 	bls.w	8002798 <HAL_GPIO_Init+0x170>
      }
    }
  }
}
 8002d04:	bf00      	nop
 8002d06:	3720      	adds	r7, #32
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	08006e30 	.word	0x08006e30
 8002d10:	40023800 	.word	0x40023800
 8002d14:	40013800 	.word	0x40013800
 8002d18:	40020000 	.word	0x40020000
 8002d1c:	40020400 	.word	0x40020400
 8002d20:	40020800 	.word	0x40020800
 8002d24:	40020c00 	.word	0x40020c00
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40021400 	.word	0x40021400
 8002d30:	40021800 	.word	0x40021800
 8002d34:	40021c00 	.word	0x40021c00
 8002d38:	40022000 	.word	0x40022000
 8002d3c:	40022400 	.word	0x40022400
 8002d40:	40013c00 	.word	0x40013c00

08002d44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002d50:	887b      	ldrh	r3, [r7, #2]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d104      	bne.n	8002d60 <HAL_GPIO_ReadPin+0x1c>
 8002d56:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8002d5a:	4809      	ldr	r0, [pc, #36]	; (8002d80 <HAL_GPIO_ReadPin+0x3c>)
 8002d5c:	f7fe fc21 	bl	80015a2 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	887b      	ldrh	r3, [r7, #2]
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
 8002d70:	e001      	b.n	8002d76 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d72:	2300      	movs	r3, #0
 8002d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	08006e30 	.word	0x08006e30

08002d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	807b      	strh	r3, [r7, #2]
 8002d90:	4613      	mov	r3, r2
 8002d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002d94:	887b      	ldrh	r3, [r7, #2]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d104      	bne.n	8002da4 <HAL_GPIO_WritePin+0x20>
 8002d9a:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8002d9e:	480e      	ldr	r0, [pc, #56]	; (8002dd8 <HAL_GPIO_WritePin+0x54>)
 8002da0:	f7fe fbff 	bl	80015a2 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002da4:	787b      	ldrb	r3, [r7, #1]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d007      	beq.n	8002dba <HAL_GPIO_WritePin+0x36>
 8002daa:	787b      	ldrb	r3, [r7, #1]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d004      	beq.n	8002dba <HAL_GPIO_WritePin+0x36>
 8002db0:	f240 119b 	movw	r1, #411	; 0x19b
 8002db4:	4808      	ldr	r0, [pc, #32]	; (8002dd8 <HAL_GPIO_WritePin+0x54>)
 8002db6:	f7fe fbf4 	bl	80015a2 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002dba:	787b      	ldrb	r3, [r7, #1]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dc0:	887a      	ldrh	r2, [r7, #2]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002dc6:	e003      	b.n	8002dd0 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002dc8:	887b      	ldrh	r3, [r7, #2]
 8002dca:	041a      	lsls	r2, r3, #16
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	619a      	str	r2, [r3, #24]
}
 8002dd0:	bf00      	nop
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	08006e30 	.word	0x08006e30

08002ddc <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002de8:	887b      	ldrh	r3, [r7, #2]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d104      	bne.n	8002df8 <HAL_GPIO_TogglePin+0x1c>
 8002dee:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8002df2:	480a      	ldr	r0, [pc, #40]	; (8002e1c <HAL_GPIO_TogglePin+0x40>)
 8002df4:	f7fe fbd5 	bl	80015a2 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695a      	ldr	r2, [r3, #20]
 8002dfc:	887b      	ldrh	r3, [r7, #2]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d004      	beq.n	8002e0e <HAL_GPIO_TogglePin+0x32>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e04:	887b      	ldrh	r3, [r7, #2]
 8002e06:	041a      	lsls	r2, r3, #16
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002e0c:	e002      	b.n	8002e14 <HAL_GPIO_TogglePin+0x38>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e0e:	887a      	ldrh	r2, [r7, #2]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	619a      	str	r2, [r3, #24]
}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	08006e30 	.word	0x08006e30

08002e20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e2a:	4b08      	ldr	r3, [pc, #32]	; (8002e4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	4013      	ands	r3, r2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d006      	beq.n	8002e44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e36:	4a05      	ldr	r2, [pc, #20]	; (8002e4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e38:	88fb      	ldrh	r3, [r7, #6]
 8002e3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e3c:	88fb      	ldrh	r3, [r7, #6]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 f806 	bl	8002e50 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40013c00 	.word	0x40013c00

08002e50 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
	...

08002e68 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e72:	4b23      	ldr	r3, [pc, #140]	; (8002f00 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	4a22      	ldr	r2, [pc, #136]	; (8002f00 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e7e:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e8a:	4b1e      	ldr	r3, [pc, #120]	; (8002f04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1d      	ldr	r2, [pc, #116]	; (8002f04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e94:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e96:	f7ff f8e7 	bl	8002068 <HAL_GetTick>
 8002e9a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e9c:	e009      	b.n	8002eb2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e9e:	f7ff f8e3 	bl	8002068 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eac:	d901      	bls.n	8002eb2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e022      	b.n	8002ef8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002eb2:	4b14      	ldr	r3, [pc, #80]	; (8002f04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ebe:	d1ee      	bne.n	8002e9e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ec0:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a0f      	ldr	r2, [pc, #60]	; (8002f04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ecc:	f7ff f8cc 	bl	8002068 <HAL_GetTick>
 8002ed0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ed2:	e009      	b.n	8002ee8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ed4:	f7ff f8c8 	bl	8002068 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ee2:	d901      	bls.n	8002ee8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e007      	b.n	8002ef8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ef4:	d1ee      	bne.n	8002ed4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40007000 	.word	0x40007000

08002f08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f10:	2300      	movs	r3, #0
 8002f12:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e35c      	b.n	80035d8 <HAL_RCC_OscConfig+0x6d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b0f      	cmp	r3, #15
 8002f24:	d904      	bls.n	8002f30 <HAL_RCC_OscConfig+0x28>
 8002f26:	f240 1165 	movw	r1, #357	; 0x165
 8002f2a:	4892      	ldr	r0, [pc, #584]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	f7fe fb39 	bl	80015a2 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 809a 	beq.w	8003072 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00e      	beq.n	8002f64 <HAL_RCC_OscConfig+0x5c>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4e:	d009      	beq.n	8002f64 <HAL_RCC_OscConfig+0x5c>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f58:	d004      	beq.n	8002f64 <HAL_RCC_OscConfig+0x5c>
 8002f5a:	f240 116b 	movw	r1, #363	; 0x16b
 8002f5e:	4885      	ldr	r0, [pc, #532]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8002f60:	f7fe fb1f 	bl	80015a2 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f64:	4b84      	ldr	r3, [pc, #528]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 030c 	and.w	r3, r3, #12
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d00c      	beq.n	8002f8a <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f70:	4b81      	ldr	r3, [pc, #516]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 030c 	and.w	r3, r3, #12
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d112      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x9a>
 8002f7c:	4b7e      	ldr	r3, [pc, #504]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f88:	d10b      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8a:	4b7b      	ldr	r3, [pc, #492]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d06c      	beq.n	8003070 <HAL_RCC_OscConfig+0x168>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d168      	bne.n	8003070 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e31a      	b.n	80035d8 <HAL_RCC_OscConfig+0x6d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002faa:	d106      	bne.n	8002fba <HAL_RCC_OscConfig+0xb2>
 8002fac:	4b72      	ldr	r3, [pc, #456]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a71      	ldr	r2, [pc, #452]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	e02e      	b.n	8003018 <HAL_RCC_OscConfig+0x110>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10c      	bne.n	8002fdc <HAL_RCC_OscConfig+0xd4>
 8002fc2:	4b6d      	ldr	r3, [pc, #436]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a6c      	ldr	r2, [pc, #432]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	4b6a      	ldr	r3, [pc, #424]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a69      	ldr	r2, [pc, #420]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002fd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	e01d      	b.n	8003018 <HAL_RCC_OscConfig+0x110>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fe4:	d10c      	bne.n	8003000 <HAL_RCC_OscConfig+0xf8>
 8002fe6:	4b64      	ldr	r3, [pc, #400]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a63      	ldr	r2, [pc, #396]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	4b61      	ldr	r3, [pc, #388]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a60      	ldr	r2, [pc, #384]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8002ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	e00b      	b.n	8003018 <HAL_RCC_OscConfig+0x110>
 8003000:	4b5d      	ldr	r3, [pc, #372]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a5c      	ldr	r2, [pc, #368]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8003006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	4b5a      	ldr	r3, [pc, #360]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a59      	ldr	r2, [pc, #356]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8003012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d013      	beq.n	8003048 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003020:	f7ff f822 	bl	8002068 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003028:	f7ff f81e 	bl	8002068 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b64      	cmp	r3, #100	; 0x64
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e2ce      	b.n	80035d8 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303a:	4b4f      	ldr	r3, [pc, #316]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0x120>
 8003046:	e014      	b.n	8003072 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003048:	f7ff f80e 	bl	8002068 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003050:	f7ff f80a 	bl	8002068 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b64      	cmp	r3, #100	; 0x64
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e2ba      	b.n	80035d8 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003062:	4b45      	ldr	r3, [pc, #276]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f0      	bne.n	8003050 <HAL_RCC_OscConfig+0x148>
 800306e:	e000      	b.n	8003072 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 8084 	beq.w	8003188 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <HAL_RCC_OscConfig+0x192>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d004      	beq.n	800309a <HAL_RCC_OscConfig+0x192>
 8003090:	f240 119d 	movw	r1, #413	; 0x19d
 8003094:	4837      	ldr	r0, [pc, #220]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 8003096:	f7fe fa84 	bl	80015a2 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	2b1f      	cmp	r3, #31
 80030a0:	d904      	bls.n	80030ac <HAL_RCC_OscConfig+0x1a4>
 80030a2:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80030a6:	4833      	ldr	r0, [pc, #204]	; (8003174 <HAL_RCC_OscConfig+0x26c>)
 80030a8:	f7fe fa7b 	bl	80015a2 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030ac:	4b32      	ldr	r3, [pc, #200]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 030c 	and.w	r3, r3, #12
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00b      	beq.n	80030d0 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030b8:	4b2f      	ldr	r3, [pc, #188]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 030c 	and.w	r3, r3, #12
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d11c      	bne.n	80030fe <HAL_RCC_OscConfig+0x1f6>
 80030c4:	4b2c      	ldr	r3, [pc, #176]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d116      	bne.n	80030fe <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030d0:	4b29      	ldr	r3, [pc, #164]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_OscConfig+0x1e0>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e277      	b.n	80035d8 <HAL_RCC_OscConfig+0x6d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e8:	4b23      	ldr	r3, [pc, #140]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	4920      	ldr	r1, [pc, #128]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fc:	e044      	b.n	8003188 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d023      	beq.n	800314e <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003106:	4b1c      	ldr	r3, [pc, #112]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1b      	ldr	r2, [pc, #108]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003112:	f7fe ffa9 	bl	8002068 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800311a:	f7fe ffa5 	bl	8002068 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e255      	b.n	80035d8 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312c:	4b12      	ldr	r3, [pc, #72]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003138:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	490c      	ldr	r1, [pc, #48]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8003148:	4313      	orrs	r3, r2
 800314a:	600b      	str	r3, [r1, #0]
 800314c:	e01c      	b.n	8003188 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a09      	ldr	r2, [pc, #36]	; (8003178 <HAL_RCC_OscConfig+0x270>)
 8003154:	f023 0301 	bic.w	r3, r3, #1
 8003158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315a:	f7fe ff85 	bl	8002068 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003160:	e00c      	b.n	800317c <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003162:	f7fe ff81 	bl	8002068 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d905      	bls.n	800317c <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e231      	b.n	80035d8 <HAL_RCC_OscConfig+0x6d0>
 8003174:	08006e6c 	.word	0x08006e6c
 8003178:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317c:	4b7e      	ldr	r3, [pc, #504]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1ec      	bne.n	8003162 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0308 	and.w	r3, r3, #8
 8003190:	2b00      	cmp	r3, #0
 8003192:	d043      	beq.n	800321c <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_RCC_OscConfig+0x2a6>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d004      	beq.n	80031ae <HAL_RCC_OscConfig+0x2a6>
 80031a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80031a8:	4874      	ldr	r0, [pc, #464]	; (800337c <HAL_RCC_OscConfig+0x474>)
 80031aa:	f7fe f9fa 	bl	80015a2 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d019      	beq.n	80031ea <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b6:	4b70      	ldr	r3, [pc, #448]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 80031b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ba:	4a6f      	ldr	r2, [pc, #444]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c2:	f7fe ff51 	bl	8002068 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ca:	f7fe ff4d 	bl	8002068 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e1fd      	b.n	80035d8 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031dc:	4b66      	ldr	r3, [pc, #408]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 80031de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f0      	beq.n	80031ca <HAL_RCC_OscConfig+0x2c2>
 80031e8:	e018      	b.n	800321c <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ea:	4b63      	ldr	r3, [pc, #396]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 80031ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ee:	4a62      	ldr	r2, [pc, #392]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 80031f0:	f023 0301 	bic.w	r3, r3, #1
 80031f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f6:	f7fe ff37 	bl	8002068 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031fe:	f7fe ff33 	bl	8002068 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e1e3      	b.n	80035d8 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003210:	4b59      	ldr	r3, [pc, #356]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 8003212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1f0      	bne.n	80031fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80bc 	beq.w	80033a2 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00c      	beq.n	800324c <HAL_RCC_OscConfig+0x344>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d008      	beq.n	800324c <HAL_RCC_OscConfig+0x344>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b05      	cmp	r3, #5
 8003240:	d004      	beq.n	800324c <HAL_RCC_OscConfig+0x344>
 8003242:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003246:	484d      	ldr	r0, [pc, #308]	; (800337c <HAL_RCC_OscConfig+0x474>)
 8003248:	f7fe f9ab 	bl	80015a2 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800324c:	4b4a      	ldr	r3, [pc, #296]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10d      	bne.n	8003274 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003258:	4b47      	ldr	r3, [pc, #284]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	4a46      	ldr	r2, [pc, #280]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 800325e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003262:	6413      	str	r3, [r2, #64]	; 0x40
 8003264:	4b44      	ldr	r3, [pc, #272]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003270:	2301      	movs	r3, #1
 8003272:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003274:	4b42      	ldr	r3, [pc, #264]	; (8003380 <HAL_RCC_OscConfig+0x478>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327c:	2b00      	cmp	r3, #0
 800327e:	d118      	bne.n	80032b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003280:	4b3f      	ldr	r3, [pc, #252]	; (8003380 <HAL_RCC_OscConfig+0x478>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a3e      	ldr	r2, [pc, #248]	; (8003380 <HAL_RCC_OscConfig+0x478>)
 8003286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800328a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800328c:	f7fe feec 	bl	8002068 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003294:	f7fe fee8 	bl	8002068 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b64      	cmp	r3, #100	; 0x64
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e198      	b.n	80035d8 <HAL_RCC_OscConfig+0x6d0>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032a6:	4b36      	ldr	r3, [pc, #216]	; (8003380 <HAL_RCC_OscConfig+0x478>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0f0      	beq.n	8003294 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d106      	bne.n	80032c8 <HAL_RCC_OscConfig+0x3c0>
 80032ba:	4b2f      	ldr	r3, [pc, #188]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	4a2e      	ldr	r2, [pc, #184]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	6713      	str	r3, [r2, #112]	; 0x70
 80032c6:	e02d      	b.n	8003324 <HAL_RCC_OscConfig+0x41c>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10c      	bne.n	80032ea <HAL_RCC_OscConfig+0x3e2>
 80032d0:	4b29      	ldr	r3, [pc, #164]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 80032d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d4:	4a28      	ldr	r2, [pc, #160]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 80032d6:	f023 0301 	bic.w	r3, r3, #1
 80032da:	6713      	str	r3, [r2, #112]	; 0x70
 80032dc:	4b26      	ldr	r3, [pc, #152]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	4a25      	ldr	r2, [pc, #148]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 80032e2:	f023 0304 	bic.w	r3, r3, #4
 80032e6:	6713      	str	r3, [r2, #112]	; 0x70
 80032e8:	e01c      	b.n	8003324 <HAL_RCC_OscConfig+0x41c>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b05      	cmp	r3, #5
 80032f0:	d10c      	bne.n	800330c <HAL_RCC_OscConfig+0x404>
 80032f2:	4b21      	ldr	r3, [pc, #132]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 80032f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f6:	4a20      	ldr	r2, [pc, #128]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 80032f8:	f043 0304 	orr.w	r3, r3, #4
 80032fc:	6713      	str	r3, [r2, #112]	; 0x70
 80032fe:	4b1e      	ldr	r3, [pc, #120]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	4a1d      	ldr	r2, [pc, #116]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	6713      	str	r3, [r2, #112]	; 0x70
 800330a:	e00b      	b.n	8003324 <HAL_RCC_OscConfig+0x41c>
 800330c:	4b1a      	ldr	r3, [pc, #104]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 800330e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003310:	4a19      	ldr	r2, [pc, #100]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 8003312:	f023 0301 	bic.w	r3, r3, #1
 8003316:	6713      	str	r3, [r2, #112]	; 0x70
 8003318:	4b17      	ldr	r3, [pc, #92]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 800331a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331c:	4a16      	ldr	r2, [pc, #88]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 800331e:	f023 0304 	bic.w	r3, r3, #4
 8003322:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d015      	beq.n	8003358 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332c:	f7fe fe9c 	bl	8002068 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003332:	e00a      	b.n	800334a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003334:	f7fe fe98 	bl	8002068 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003342:	4293      	cmp	r3, r2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e146      	b.n	80035d8 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334a:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0ee      	beq.n	8003334 <HAL_RCC_OscConfig+0x42c>
 8003356:	e01b      	b.n	8003390 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003358:	f7fe fe86 	bl	8002068 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800335e:	e011      	b.n	8003384 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003360:	f7fe fe82 	bl	8002068 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	f241 3288 	movw	r2, #5000	; 0x1388
 800336e:	4293      	cmp	r3, r2
 8003370:	d908      	bls.n	8003384 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e130      	b.n	80035d8 <HAL_RCC_OscConfig+0x6d0>
 8003376:	bf00      	nop
 8003378:	40023800 	.word	0x40023800
 800337c:	08006e6c 	.word	0x08006e6c
 8003380:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003384:	4b96      	ldr	r3, [pc, #600]	; (80035e0 <HAL_RCC_OscConfig+0x6d8>)
 8003386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1e7      	bne.n	8003360 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003390:	7dfb      	ldrb	r3, [r7, #23]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d105      	bne.n	80033a2 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003396:	4b92      	ldr	r3, [pc, #584]	; (80035e0 <HAL_RCC_OscConfig+0x6d8>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	4a91      	ldr	r2, [pc, #580]	; (80035e0 <HAL_RCC_OscConfig+0x6d8>)
 800339c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00c      	beq.n	80033c4 <HAL_RCC_OscConfig+0x4bc>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d008      	beq.n	80033c4 <HAL_RCC_OscConfig+0x4bc>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d004      	beq.n	80033c4 <HAL_RCC_OscConfig+0x4bc>
 80033ba:	f44f 7113 	mov.w	r1, #588	; 0x24c
 80033be:	4889      	ldr	r0, [pc, #548]	; (80035e4 <HAL_RCC_OscConfig+0x6dc>)
 80033c0:	f7fe f8ef 	bl	80015a2 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 8104 	beq.w	80035d6 <HAL_RCC_OscConfig+0x6ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ce:	4b84      	ldr	r3, [pc, #528]	; (80035e0 <HAL_RCC_OscConfig+0x6d8>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	f000 80c3 	beq.w	8003562 <HAL_RCC_OscConfig+0x65a>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	f040 80a4 	bne.w	800352e <HAL_RCC_OscConfig+0x626>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d009      	beq.n	8003402 <HAL_RCC_OscConfig+0x4fa>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033f6:	d004      	beq.n	8003402 <HAL_RCC_OscConfig+0x4fa>
 80033f8:	f240 2155 	movw	r1, #597	; 0x255
 80033fc:	4879      	ldr	r0, [pc, #484]	; (80035e4 <HAL_RCC_OscConfig+0x6dc>)
 80033fe:	f7fe f8d0 	bl	80015a2 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d903      	bls.n	8003412 <HAL_RCC_OscConfig+0x50a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	2b3f      	cmp	r3, #63	; 0x3f
 8003410:	d904      	bls.n	800341c <HAL_RCC_OscConfig+0x514>
 8003412:	f240 2156 	movw	r1, #598	; 0x256
 8003416:	4873      	ldr	r0, [pc, #460]	; (80035e4 <HAL_RCC_OscConfig+0x6dc>)
 8003418:	f7fe f8c3 	bl	80015a2 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	2b31      	cmp	r3, #49	; 0x31
 8003422:	d904      	bls.n	800342e <HAL_RCC_OscConfig+0x526>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800342c:	d904      	bls.n	8003438 <HAL_RCC_OscConfig+0x530>
 800342e:	f240 2157 	movw	r1, #599	; 0x257
 8003432:	486c      	ldr	r0, [pc, #432]	; (80035e4 <HAL_RCC_OscConfig+0x6dc>)
 8003434:	f7fe f8b5 	bl	80015a2 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	2b02      	cmp	r3, #2
 800343e:	d010      	beq.n	8003462 <HAL_RCC_OscConfig+0x55a>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	2b04      	cmp	r3, #4
 8003446:	d00c      	beq.n	8003462 <HAL_RCC_OscConfig+0x55a>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344c:	2b06      	cmp	r3, #6
 800344e:	d008      	beq.n	8003462 <HAL_RCC_OscConfig+0x55a>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003454:	2b08      	cmp	r3, #8
 8003456:	d004      	beq.n	8003462 <HAL_RCC_OscConfig+0x55a>
 8003458:	f44f 7116 	mov.w	r1, #600	; 0x258
 800345c:	4861      	ldr	r0, [pc, #388]	; (80035e4 <HAL_RCC_OscConfig+0x6dc>)
 800345e:	f7fe f8a0 	bl	80015a2 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	2b01      	cmp	r3, #1
 8003468:	d903      	bls.n	8003472 <HAL_RCC_OscConfig+0x56a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	2b0f      	cmp	r3, #15
 8003470:	d904      	bls.n	800347c <HAL_RCC_OscConfig+0x574>
 8003472:	f240 2159 	movw	r1, #601	; 0x259
 8003476:	485b      	ldr	r0, [pc, #364]	; (80035e4 <HAL_RCC_OscConfig+0x6dc>)
 8003478:	f7fe f893 	bl	80015a2 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	2b01      	cmp	r3, #1
 8003482:	d903      	bls.n	800348c <HAL_RCC_OscConfig+0x584>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	2b07      	cmp	r3, #7
 800348a:	d904      	bls.n	8003496 <HAL_RCC_OscConfig+0x58e>
 800348c:	f240 215b 	movw	r1, #603	; 0x25b
 8003490:	4854      	ldr	r0, [pc, #336]	; (80035e4 <HAL_RCC_OscConfig+0x6dc>)
 8003492:	f7fe f886 	bl	80015a2 <assert_failed>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003496:	4b52      	ldr	r3, [pc, #328]	; (80035e0 <HAL_RCC_OscConfig+0x6d8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a51      	ldr	r2, [pc, #324]	; (80035e0 <HAL_RCC_OscConfig+0x6d8>)
 800349c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a2:	f7fe fde1 	bl	8002068 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x5b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034aa:	f7fe fddd 	bl	8002068 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x5b4>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e08d      	b.n	80035d8 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034bc:	4b48      	ldr	r3, [pc, #288]	; (80035e0 <HAL_RCC_OscConfig+0x6d8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f0      	bne.n	80034aa <HAL_RCC_OscConfig+0x5a2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	69da      	ldr	r2, [r3, #28]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	019b      	lsls	r3, r3, #6
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	085b      	lsrs	r3, r3, #1
 80034e0:	3b01      	subs	r3, #1
 80034e2:	041b      	lsls	r3, r3, #16
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	061b      	lsls	r3, r3, #24
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	071b      	lsls	r3, r3, #28
 80034f4:	493a      	ldr	r1, [pc, #232]	; (80035e0 <HAL_RCC_OscConfig+0x6d8>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034fa:	4b39      	ldr	r3, [pc, #228]	; (80035e0 <HAL_RCC_OscConfig+0x6d8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a38      	ldr	r2, [pc, #224]	; (80035e0 <HAL_RCC_OscConfig+0x6d8>)
 8003500:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003506:	f7fe fdaf 	bl	8002068 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x618>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350e:	f7fe fdab 	bl	8002068 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e05b      	b.n	80035d8 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003520:	4b2f      	ldr	r3, [pc, #188]	; (80035e0 <HAL_RCC_OscConfig+0x6d8>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCC_OscConfig+0x606>
 800352c:	e053      	b.n	80035d6 <HAL_RCC_OscConfig+0x6ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800352e:	4b2c      	ldr	r3, [pc, #176]	; (80035e0 <HAL_RCC_OscConfig+0x6d8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a2b      	ldr	r2, [pc, #172]	; (80035e0 <HAL_RCC_OscConfig+0x6d8>)
 8003534:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353a:	f7fe fd95 	bl	8002068 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x64c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003542:	f7fe fd91 	bl	8002068 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e041      	b.n	80035d8 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003554:	4b22      	ldr	r3, [pc, #136]	; (80035e0 <HAL_RCC_OscConfig+0x6d8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1f0      	bne.n	8003542 <HAL_RCC_OscConfig+0x63a>
 8003560:	e039      	b.n	80035d6 <HAL_RCC_OscConfig+0x6ce>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003562:	4b1f      	ldr	r3, [pc, #124]	; (80035e0 <HAL_RCC_OscConfig+0x6d8>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d030      	beq.n	80035d2 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800357a:	429a      	cmp	r2, r3
 800357c:	d129      	bne.n	80035d2 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003588:	429a      	cmp	r2, r3
 800358a:	d122      	bne.n	80035d2 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003592:	4013      	ands	r3, r2
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003598:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800359a:	4293      	cmp	r3, r2
 800359c:	d119      	bne.n	80035d2 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a8:	085b      	lsrs	r3, r3, #1
 80035aa:	3b01      	subs	r3, #1
 80035ac:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d10f      	bne.n	80035d2 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035be:	429a      	cmp	r2, r3
 80035c0:	d107      	bne.n	80035d2 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d001      	beq.n	80035d6 <HAL_RCC_OscConfig+0x6ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <HAL_RCC_OscConfig+0x6d0>
      }
    }
  }
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40023800 	.word	0x40023800
 80035e4:	08006e6c 	.word	0x08006e6c

080035e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e18c      	b.n	800391a <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_RCC_ClockConfig+0x28>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b0f      	cmp	r3, #15
 800360e:	d904      	bls.n	800361a <HAL_RCC_ClockConfig+0x32>
 8003610:	f240 21df 	movw	r1, #735	; 0x2df
 8003614:	4887      	ldr	r0, [pc, #540]	; (8003834 <HAL_RCC_ClockConfig+0x24c>)
 8003616:	f7fd ffc4 	bl	80015a2 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d031      	beq.n	8003684 <HAL_RCC_ClockConfig+0x9c>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d02e      	beq.n	8003684 <HAL_RCC_ClockConfig+0x9c>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b02      	cmp	r3, #2
 800362a:	d02b      	beq.n	8003684 <HAL_RCC_ClockConfig+0x9c>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b03      	cmp	r3, #3
 8003630:	d028      	beq.n	8003684 <HAL_RCC_ClockConfig+0x9c>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b04      	cmp	r3, #4
 8003636:	d025      	beq.n	8003684 <HAL_RCC_ClockConfig+0x9c>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	2b05      	cmp	r3, #5
 800363c:	d022      	beq.n	8003684 <HAL_RCC_ClockConfig+0x9c>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b06      	cmp	r3, #6
 8003642:	d01f      	beq.n	8003684 <HAL_RCC_ClockConfig+0x9c>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b07      	cmp	r3, #7
 8003648:	d01c      	beq.n	8003684 <HAL_RCC_ClockConfig+0x9c>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b08      	cmp	r3, #8
 800364e:	d019      	beq.n	8003684 <HAL_RCC_ClockConfig+0x9c>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	2b09      	cmp	r3, #9
 8003654:	d016      	beq.n	8003684 <HAL_RCC_ClockConfig+0x9c>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b0a      	cmp	r3, #10
 800365a:	d013      	beq.n	8003684 <HAL_RCC_ClockConfig+0x9c>
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	2b0b      	cmp	r3, #11
 8003660:	d010      	beq.n	8003684 <HAL_RCC_ClockConfig+0x9c>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b0c      	cmp	r3, #12
 8003666:	d00d      	beq.n	8003684 <HAL_RCC_ClockConfig+0x9c>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	2b0d      	cmp	r3, #13
 800366c:	d00a      	beq.n	8003684 <HAL_RCC_ClockConfig+0x9c>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b0e      	cmp	r3, #14
 8003672:	d007      	beq.n	8003684 <HAL_RCC_ClockConfig+0x9c>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b0f      	cmp	r3, #15
 8003678:	d004      	beq.n	8003684 <HAL_RCC_ClockConfig+0x9c>
 800367a:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 800367e:	486d      	ldr	r0, [pc, #436]	; (8003834 <HAL_RCC_ClockConfig+0x24c>)
 8003680:	f7fd ff8f 	bl	80015a2 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003684:	4b6c      	ldr	r3, [pc, #432]	; (8003838 <HAL_RCC_ClockConfig+0x250>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 030f 	and.w	r3, r3, #15
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d910      	bls.n	80036b4 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003692:	4b69      	ldr	r3, [pc, #420]	; (8003838 <HAL_RCC_ClockConfig+0x250>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f023 020f 	bic.w	r2, r3, #15
 800369a:	4967      	ldr	r1, [pc, #412]	; (8003838 <HAL_RCC_ClockConfig+0x250>)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	4313      	orrs	r3, r2
 80036a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a2:	4b65      	ldr	r3, [pc, #404]	; (8003838 <HAL_RCC_ClockConfig+0x250>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d001      	beq.n	80036b4 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e132      	b.n	800391a <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d049      	beq.n	8003754 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036cc:	4b5b      	ldr	r3, [pc, #364]	; (800383c <HAL_RCC_ClockConfig+0x254>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	4a5a      	ldr	r2, [pc, #360]	; (800383c <HAL_RCC_ClockConfig+0x254>)
 80036d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036e4:	4b55      	ldr	r3, [pc, #340]	; (800383c <HAL_RCC_ClockConfig+0x254>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	4a54      	ldr	r2, [pc, #336]	; (800383c <HAL_RCC_ClockConfig+0x254>)
 80036ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d024      	beq.n	8003742 <HAL_RCC_ClockConfig+0x15a>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b80      	cmp	r3, #128	; 0x80
 80036fe:	d020      	beq.n	8003742 <HAL_RCC_ClockConfig+0x15a>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2b90      	cmp	r3, #144	; 0x90
 8003706:	d01c      	beq.n	8003742 <HAL_RCC_ClockConfig+0x15a>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2ba0      	cmp	r3, #160	; 0xa0
 800370e:	d018      	beq.n	8003742 <HAL_RCC_ClockConfig+0x15a>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	2bb0      	cmp	r3, #176	; 0xb0
 8003716:	d014      	beq.n	8003742 <HAL_RCC_ClockConfig+0x15a>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2bc0      	cmp	r3, #192	; 0xc0
 800371e:	d010      	beq.n	8003742 <HAL_RCC_ClockConfig+0x15a>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	2bd0      	cmp	r3, #208	; 0xd0
 8003726:	d00c      	beq.n	8003742 <HAL_RCC_ClockConfig+0x15a>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2be0      	cmp	r3, #224	; 0xe0
 800372e:	d008      	beq.n	8003742 <HAL_RCC_ClockConfig+0x15a>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	2bf0      	cmp	r3, #240	; 0xf0
 8003736:	d004      	beq.n	8003742 <HAL_RCC_ClockConfig+0x15a>
 8003738:	f44f 7141 	mov.w	r1, #772	; 0x304
 800373c:	483d      	ldr	r0, [pc, #244]	; (8003834 <HAL_RCC_ClockConfig+0x24c>)
 800373e:	f7fd ff30 	bl	80015a2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003742:	4b3e      	ldr	r3, [pc, #248]	; (800383c <HAL_RCC_ClockConfig+0x254>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	493b      	ldr	r1, [pc, #236]	; (800383c <HAL_RCC_ClockConfig+0x254>)
 8003750:	4313      	orrs	r3, r2
 8003752:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d051      	beq.n	8003804 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00c      	beq.n	8003782 <HAL_RCC_ClockConfig+0x19a>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d008      	beq.n	8003782 <HAL_RCC_ClockConfig+0x19a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b02      	cmp	r3, #2
 8003776:	d004      	beq.n	8003782 <HAL_RCC_ClockConfig+0x19a>
 8003778:	f240 310b 	movw	r1, #779	; 0x30b
 800377c:	482d      	ldr	r0, [pc, #180]	; (8003834 <HAL_RCC_ClockConfig+0x24c>)
 800377e:	f7fd ff10 	bl	80015a2 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d107      	bne.n	800379a <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378a:	4b2c      	ldr	r3, [pc, #176]	; (800383c <HAL_RCC_ClockConfig+0x254>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d115      	bne.n	80037c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e0bf      	b.n	800391a <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d107      	bne.n	80037b2 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a2:	4b26      	ldr	r3, [pc, #152]	; (800383c <HAL_RCC_ClockConfig+0x254>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e0b3      	b.n	800391a <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b2:	4b22      	ldr	r3, [pc, #136]	; (800383c <HAL_RCC_ClockConfig+0x254>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e0ab      	b.n	800391a <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037c2:	4b1e      	ldr	r3, [pc, #120]	; (800383c <HAL_RCC_ClockConfig+0x254>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f023 0203 	bic.w	r2, r3, #3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	491b      	ldr	r1, [pc, #108]	; (800383c <HAL_RCC_ClockConfig+0x254>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d4:	f7fe fc48 	bl	8002068 <HAL_GetTick>
 80037d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037da:	e00a      	b.n	80037f2 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037dc:	f7fe fc44 	bl	8002068 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e093      	b.n	800391a <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f2:	4b12      	ldr	r3, [pc, #72]	; (800383c <HAL_RCC_ClockConfig+0x254>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 020c 	and.w	r2, r3, #12
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	429a      	cmp	r2, r3
 8003802:	d1eb      	bne.n	80037dc <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003804:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <HAL_RCC_ClockConfig+0x250>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d216      	bcs.n	8003840 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003812:	4b09      	ldr	r3, [pc, #36]	; (8003838 <HAL_RCC_ClockConfig+0x250>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 020f 	bic.w	r2, r3, #15
 800381a:	4907      	ldr	r1, [pc, #28]	; (8003838 <HAL_RCC_ClockConfig+0x250>)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	4313      	orrs	r3, r2
 8003820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b05      	ldr	r3, [pc, #20]	; (8003838 <HAL_RCC_ClockConfig+0x250>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d007      	beq.n	8003840 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e072      	b.n	800391a <HAL_RCC_ClockConfig+0x332>
 8003834:	08006e6c 	.word	0x08006e6c
 8003838:	40023c00 	.word	0x40023c00
 800383c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d025      	beq.n	8003898 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d018      	beq.n	8003886 <HAL_RCC_ClockConfig+0x29e>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800385c:	d013      	beq.n	8003886 <HAL_RCC_ClockConfig+0x29e>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003866:	d00e      	beq.n	8003886 <HAL_RCC_ClockConfig+0x29e>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003870:	d009      	beq.n	8003886 <HAL_RCC_ClockConfig+0x29e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800387a:	d004      	beq.n	8003886 <HAL_RCC_ClockConfig+0x29e>
 800387c:	f44f 7152 	mov.w	r1, #840	; 0x348
 8003880:	4828      	ldr	r0, [pc, #160]	; (8003924 <HAL_RCC_ClockConfig+0x33c>)
 8003882:	f7fd fe8e 	bl	80015a2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003886:	4b28      	ldr	r3, [pc, #160]	; (8003928 <HAL_RCC_ClockConfig+0x340>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	4925      	ldr	r1, [pc, #148]	; (8003928 <HAL_RCC_ClockConfig+0x340>)
 8003894:	4313      	orrs	r3, r2
 8003896:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d026      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d018      	beq.n	80038de <HAL_RCC_ClockConfig+0x2f6>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b4:	d013      	beq.n	80038de <HAL_RCC_ClockConfig+0x2f6>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80038be:	d00e      	beq.n	80038de <HAL_RCC_ClockConfig+0x2f6>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80038c8:	d009      	beq.n	80038de <HAL_RCC_ClockConfig+0x2f6>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80038d2:	d004      	beq.n	80038de <HAL_RCC_ClockConfig+0x2f6>
 80038d4:	f240 314f 	movw	r1, #847	; 0x34f
 80038d8:	4812      	ldr	r0, [pc, #72]	; (8003924 <HAL_RCC_ClockConfig+0x33c>)
 80038da:	f7fd fe62 	bl	80015a2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038de:	4b12      	ldr	r3, [pc, #72]	; (8003928 <HAL_RCC_ClockConfig+0x340>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	490e      	ldr	r1, [pc, #56]	; (8003928 <HAL_RCC_ClockConfig+0x340>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038f2:	f000 f821 	bl	8003938 <HAL_RCC_GetSysClockFreq>
 80038f6:	4601      	mov	r1, r0
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_RCC_ClockConfig+0x340>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	091b      	lsrs	r3, r3, #4
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	4a0a      	ldr	r2, [pc, #40]	; (800392c <HAL_RCC_ClockConfig+0x344>)
 8003904:	5cd3      	ldrb	r3, [r2, r3]
 8003906:	fa21 f303 	lsr.w	r3, r1, r3
 800390a:	4a09      	ldr	r2, [pc, #36]	; (8003930 <HAL_RCC_ClockConfig+0x348>)
 800390c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800390e:	4b09      	ldr	r3, [pc, #36]	; (8003934 <HAL_RCC_ClockConfig+0x34c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe fb64 	bl	8001fe0 <HAL_InitTick>

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	08006e6c 	.word	0x08006e6c
 8003928:	40023800 	.word	0x40023800
 800392c:	08006f54 	.word	0x08006f54
 8003930:	20000000 	.word	0x20000000
 8003934:	20000004 	.word	0x20000004

08003938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800393e:	2300      	movs	r3, #0
 8003940:	607b      	str	r3, [r7, #4]
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	2300      	movs	r3, #0
 8003948:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800394a:	2300      	movs	r3, #0
 800394c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800394e:	4b50      	ldr	r3, [pc, #320]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x158>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	2b04      	cmp	r3, #4
 8003958:	d007      	beq.n	800396a <HAL_RCC_GetSysClockFreq+0x32>
 800395a:	2b08      	cmp	r3, #8
 800395c:	d008      	beq.n	8003970 <HAL_RCC_GetSysClockFreq+0x38>
 800395e:	2b00      	cmp	r3, #0
 8003960:	f040 808d 	bne.w	8003a7e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003964:	4b4b      	ldr	r3, [pc, #300]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003966:	60bb      	str	r3, [r7, #8]
      break;
 8003968:	e08c      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800396a:	4b4b      	ldr	r3, [pc, #300]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x160>)
 800396c:	60bb      	str	r3, [r7, #8]
      break;
 800396e:	e089      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003970:	4b47      	ldr	r3, [pc, #284]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x158>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003978:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800397a:	4b45      	ldr	r3, [pc, #276]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x158>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d023      	beq.n	80039ce <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003986:	4b42      	ldr	r3, [pc, #264]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x158>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	099b      	lsrs	r3, r3, #6
 800398c:	f04f 0400 	mov.w	r4, #0
 8003990:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	ea03 0501 	and.w	r5, r3, r1
 800399c:	ea04 0602 	and.w	r6, r4, r2
 80039a0:	4a3d      	ldr	r2, [pc, #244]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x160>)
 80039a2:	fb02 f106 	mul.w	r1, r2, r6
 80039a6:	2200      	movs	r2, #0
 80039a8:	fb02 f205 	mul.w	r2, r2, r5
 80039ac:	440a      	add	r2, r1
 80039ae:	493a      	ldr	r1, [pc, #232]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x160>)
 80039b0:	fba5 0101 	umull	r0, r1, r5, r1
 80039b4:	1853      	adds	r3, r2, r1
 80039b6:	4619      	mov	r1, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f04f 0400 	mov.w	r4, #0
 80039be:	461a      	mov	r2, r3
 80039c0:	4623      	mov	r3, r4
 80039c2:	f7fc fc39 	bl	8000238 <__aeabi_uldivmod>
 80039c6:	4603      	mov	r3, r0
 80039c8:	460c      	mov	r4, r1
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	e049      	b.n	8003a62 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ce:	4b30      	ldr	r3, [pc, #192]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x158>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	099b      	lsrs	r3, r3, #6
 80039d4:	f04f 0400 	mov.w	r4, #0
 80039d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	ea03 0501 	and.w	r5, r3, r1
 80039e4:	ea04 0602 	and.w	r6, r4, r2
 80039e8:	4629      	mov	r1, r5
 80039ea:	4632      	mov	r2, r6
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	f04f 0400 	mov.w	r4, #0
 80039f4:	0154      	lsls	r4, r2, #5
 80039f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80039fa:	014b      	lsls	r3, r1, #5
 80039fc:	4619      	mov	r1, r3
 80039fe:	4622      	mov	r2, r4
 8003a00:	1b49      	subs	r1, r1, r5
 8003a02:	eb62 0206 	sbc.w	r2, r2, r6
 8003a06:	f04f 0300 	mov.w	r3, #0
 8003a0a:	f04f 0400 	mov.w	r4, #0
 8003a0e:	0194      	lsls	r4, r2, #6
 8003a10:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a14:	018b      	lsls	r3, r1, #6
 8003a16:	1a5b      	subs	r3, r3, r1
 8003a18:	eb64 0402 	sbc.w	r4, r4, r2
 8003a1c:	f04f 0100 	mov.w	r1, #0
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	00e2      	lsls	r2, r4, #3
 8003a26:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a2a:	00d9      	lsls	r1, r3, #3
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4614      	mov	r4, r2
 8003a30:	195b      	adds	r3, r3, r5
 8003a32:	eb44 0406 	adc.w	r4, r4, r6
 8003a36:	f04f 0100 	mov.w	r1, #0
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	02a2      	lsls	r2, r4, #10
 8003a40:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003a44:	0299      	lsls	r1, r3, #10
 8003a46:	460b      	mov	r3, r1
 8003a48:	4614      	mov	r4, r2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	4621      	mov	r1, r4
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f04f 0400 	mov.w	r4, #0
 8003a54:	461a      	mov	r2, r3
 8003a56:	4623      	mov	r3, r4
 8003a58:	f7fc fbee 	bl	8000238 <__aeabi_uldivmod>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	460c      	mov	r4, r1
 8003a60:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a62:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	0c1b      	lsrs	r3, r3, #16
 8003a68:	f003 0303 	and.w	r3, r3, #3
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7a:	60bb      	str	r3, [r7, #8]
      break;
 8003a7c:	e002      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a7e:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003a80:	60bb      	str	r3, [r7, #8]
      break;
 8003a82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a84:	68bb      	ldr	r3, [r7, #8]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40023800 	.word	0x40023800
 8003a94:	00f42400 	.word	0x00f42400
 8003a98:	017d7840 	.word	0x017d7840

08003a9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aa0:	4b03      	ldr	r3, [pc, #12]	; (8003ab0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	20000000 	.word	0x20000000

08003ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ab8:	f7ff fff0 	bl	8003a9c <HAL_RCC_GetHCLKFreq>
 8003abc:	4601      	mov	r1, r0
 8003abe:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	0a9b      	lsrs	r3, r3, #10
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	4a03      	ldr	r2, [pc, #12]	; (8003ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aca:	5cd3      	ldrb	r3, [r2, r3]
 8003acc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	08006f64 	.word	0x08006f64

08003adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ae0:	f7ff ffdc 	bl	8003a9c <HAL_RCC_GetHCLKFreq>
 8003ae4:	4601      	mov	r1, r0
 8003ae6:	4b05      	ldr	r3, [pc, #20]	; (8003afc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	0b5b      	lsrs	r3, r3, #13
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	4a03      	ldr	r2, [pc, #12]	; (8003b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003af2:	5cd3      	ldrb	r3, [r2, r3]
 8003af4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40023800 	.word	0x40023800
 8003b00:	08006f64 	.word	0x08006f64

08003b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f040 809e 	bne.w	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f040 8097 	bne.w	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f040 8090 	bne.w	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f040 8089 	bne.w	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f040 8082 	bne.w	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d17b      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d175      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d16f      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d169      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d163      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d15d      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d157      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d151      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d14b      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d145      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d13f      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d139      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d133      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d12d      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d127      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d121      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d11b      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d115      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10f      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d109      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d103      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c62:	2174      	movs	r1, #116	; 0x74
 8003c64:	48a2      	ldr	r0, [pc, #648]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003c66:	f7fd fc9c 	bl	80015a2 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d01f      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d008      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c86:	d003      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003c88:	217a      	movs	r1, #122	; 0x7a
 8003c8a:	4899      	ldr	r0, [pc, #612]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003c8c:	f7fd fc89 	bl	80015a2 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c90:	4b98      	ldr	r3, [pc, #608]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	4a97      	ldr	r2, [pc, #604]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003c96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c9a:	6093      	str	r3, [r2, #8]
 8003c9c:	4b95      	ldr	r3, [pc, #596]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca4:	4993      	ldr	r1, [pc, #588]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      plli2sused = 1;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d02e      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d012      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cd2:	d00d      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cdc:	d008      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ce6:	d003      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003ce8:	218a      	movs	r1, #138	; 0x8a
 8003cea:	4881      	ldr	r0, [pc, #516]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003cec:	f7fd fc59 	bl	80015a2 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cf0:	4b80      	ldr	r3, [pc, #512]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cf6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfe:	497d      	ldr	r1, [pc, #500]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d0e:	d101      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x210>
    {
      plli2sused = 1;
 8003d10:	2301      	movs	r3, #1
 8003d12:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      pllsaiused = 1;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d02e      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d012      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d3c:	d00d      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d46:	d008      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d50:	d003      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003d52:	219e      	movs	r1, #158	; 0x9e
 8003d54:	4866      	ldr	r0, [pc, #408]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003d56:	f7fd fc24 	bl	80015a2 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d5a:	4b66      	ldr	r3, [pc, #408]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	4962      	ldr	r1, [pc, #392]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d78:	d101      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      plli2sused = 1;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      pllsaiused = 1;
 8003d86:	2301      	movs	r3, #1
 8003d88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
      plli2sused = 1;
 8003d96:	2301      	movs	r3, #1
 8003d98:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 8187 	beq.w	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003db0:	f000 80eb 	beq.w	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dbc:	f000 80e5 	beq.w	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	4a4c      	ldr	r2, [pc, #304]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	f000 80df 	beq.w	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	4a4a      	ldr	r2, [pc, #296]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	f000 80d9 	beq.w	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	4a48      	ldr	r2, [pc, #288]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	f000 80d3 	beq.w	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	4a46      	ldr	r2, [pc, #280]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	f000 80cd 	beq.w	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	4a44      	ldr	r2, [pc, #272]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	f000 80c7 	beq.w	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	4a42      	ldr	r2, [pc, #264]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	f000 80c1 	beq.w	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0c:	4a40      	ldr	r2, [pc, #256]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	f000 80bb 	beq.w	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e18:	4a3e      	ldr	r2, [pc, #248]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x410>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	f000 80b5 	beq.w	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	4a3c      	ldr	r2, [pc, #240]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x414>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	f000 80af 	beq.w	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e30:	4a3a      	ldr	r2, [pc, #232]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x418>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	f000 80a9 	beq.w	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3c:	4a38      	ldr	r2, [pc, #224]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	f000 80a3 	beq.w	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	4a36      	ldr	r2, [pc, #216]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	f000 809d 	beq.w	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	4a34      	ldr	r2, [pc, #208]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	f000 8097 	beq.w	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	4a32      	ldr	r2, [pc, #200]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	f000 8091 	beq.w	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6c:	4a30      	ldr	r2, [pc, #192]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	f000 808b 	beq.w	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	4a2e      	ldr	r2, [pc, #184]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	f000 8085 	beq.w	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	4a2c      	ldr	r2, [pc, #176]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d07f      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	4a2b      	ldr	r2, [pc, #172]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d07a      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	4a29      	ldr	r2, [pc, #164]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d075      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	4a28      	ldr	r2, [pc, #160]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d070      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	4a26      	ldr	r2, [pc, #152]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d06b      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	4a25      	ldr	r2, [pc, #148]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d066      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	4a23      	ldr	r2, [pc, #140]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d061      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	4a22      	ldr	r2, [pc, #136]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d05c      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed4:	4a20      	ldr	r2, [pc, #128]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d057      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	4a1f      	ldr	r2, [pc, #124]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d052      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	4a1d      	ldr	r2, [pc, #116]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d04d      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003eee:	e039      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003ef0:	08006ea4 	.word	0x08006ea4
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	00020300 	.word	0x00020300
 8003efc:	00030300 	.word	0x00030300
 8003f00:	00040300 	.word	0x00040300
 8003f04:	00050300 	.word	0x00050300
 8003f08:	00060300 	.word	0x00060300
 8003f0c:	00070300 	.word	0x00070300
 8003f10:	00080300 	.word	0x00080300
 8003f14:	00090300 	.word	0x00090300
 8003f18:	000a0300 	.word	0x000a0300
 8003f1c:	000b0300 	.word	0x000b0300
 8003f20:	000c0300 	.word	0x000c0300
 8003f24:	000d0300 	.word	0x000d0300
 8003f28:	000e0300 	.word	0x000e0300
 8003f2c:	000f0300 	.word	0x000f0300
 8003f30:	00100300 	.word	0x00100300
 8003f34:	00110300 	.word	0x00110300
 8003f38:	00120300 	.word	0x00120300
 8003f3c:	00130300 	.word	0x00130300
 8003f40:	00140300 	.word	0x00140300
 8003f44:	00150300 	.word	0x00150300
 8003f48:	00160300 	.word	0x00160300
 8003f4c:	00170300 	.word	0x00170300
 8003f50:	00180300 	.word	0x00180300
 8003f54:	00190300 	.word	0x00190300
 8003f58:	001a0300 	.word	0x001a0300
 8003f5c:	001b0300 	.word	0x001b0300
 8003f60:	001c0300 	.word	0x001c0300
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f68:	4a44      	ldr	r2, [pc, #272]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x578>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00d      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	4a43      	ldr	r2, [pc, #268]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d008      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7c:	4a41      	ldr	r2, [pc, #260]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d003      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f82:	21b9      	movs	r1, #185	; 0xb9
 8003f84:	4840      	ldr	r0, [pc, #256]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8003f86:	f7fd fb0c 	bl	80015a2 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f8a:	4b40      	ldr	r3, [pc, #256]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	4a3f      	ldr	r2, [pc, #252]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f94:	6413      	str	r3, [r2, #64]	; 0x40
 8003f96:	4b3d      	ldr	r3, [pc, #244]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fa2:	4b3b      	ldr	r3, [pc, #236]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a3a      	ldr	r2, [pc, #232]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fae:	f7fe f85b 	bl	8002068 <HAL_GetTick>
 8003fb2:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fb4:	e009      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb6:	f7fe f857 	bl	8002068 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b64      	cmp	r3, #100	; 0x64
 8003fc2:	d902      	bls.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x4c6>
      {
        return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	f000 be00 	b.w	8004bca <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fca:	4b31      	ldr	r3, [pc, #196]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0ef      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fd6:	4b2d      	ldr	r3, [pc, #180]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fde:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d036      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d02f      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ff4:	4b25      	ldr	r3, [pc, #148]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ffc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ffe:	4b23      	ldr	r3, [pc, #140]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004002:	4a22      	ldr	r2, [pc, #136]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004008:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800400a:	4b20      	ldr	r3, [pc, #128]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400e:	4a1f      	ldr	r2, [pc, #124]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004014:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004016:	4a1d      	ldr	r2, [pc, #116]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800401c:	4b1b      	ldr	r3, [pc, #108]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800401e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b01      	cmp	r3, #1
 8004026:	d115      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x550>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fe f81e 	bl	8002068 <HAL_GetTick>
 800402c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800402e:	e00b      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x544>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004030:	f7fe f81a 	bl	8002068 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	f241 3288 	movw	r2, #5000	; 0x1388
 800403e:	4293      	cmp	r3, r2
 8004040:	d902      	bls.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x544>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	f000 bdc1 	b.w	8004bca <HAL_RCCEx_PeriphCLKConfig+0x10c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004048:	4b10      	ldr	r3, [pc, #64]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800404a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0ed      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x52c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004060:	d11a      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004062:	4b0a      	ldr	r3, [pc, #40]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800406e:	4b09      	ldr	r3, [pc, #36]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004070:	400b      	ands	r3, r1
 8004072:	4906      	ldr	r1, [pc, #24]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004074:	4313      	orrs	r3, r2
 8004076:	608b      	str	r3, [r1, #8]
 8004078:	e014      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 800407a:	bf00      	nop
 800407c:	001d0300 	.word	0x001d0300
 8004080:	001e0300 	.word	0x001e0300
 8004084:	001f0300 	.word	0x001f0300
 8004088:	08006ea4 	.word	0x08006ea4
 800408c:	40023800 	.word	0x40023800
 8004090:	40007000 	.word	0x40007000
 8004094:	0ffffcff 	.word	0x0ffffcff
 8004098:	4ba7      	ldr	r3, [pc, #668]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	4aa6      	ldr	r2, [pc, #664]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800409e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040a2:	6093      	str	r3, [r2, #8]
 80040a4:	4ba4      	ldr	r3, [pc, #656]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b0:	49a1      	ldr	r1, [pc, #644]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0310 	and.w	r3, r3, #16
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d01d      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d008      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040d2:	d003      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 80040d4:	21f3      	movs	r1, #243	; 0xf3
 80040d6:	4899      	ldr	r0, [pc, #612]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80040d8:	f7fd fa63 	bl	80015a2 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040dc:	4b96      	ldr	r3, [pc, #600]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040e2:	4a95      	ldr	r2, [pc, #596]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040e8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80040ec:	4b92      	ldr	r3, [pc, #584]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040ee:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	4990      	ldr	r1, [pc, #576]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d01c      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00d      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x62a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800411a:	d008      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x62a>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004124:	d003      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x62a>
 8004126:	21fd      	movs	r1, #253	; 0xfd
 8004128:	4884      	ldr	r0, [pc, #528]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800412a:	f7fd fa3a 	bl	80015a2 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800412e:	4b82      	ldr	r3, [pc, #520]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004134:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800413c:	497e      	ldr	r1, [pc, #504]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d01d      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00e      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800415c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004160:	d009      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004166:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800416a:	d004      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800416c:	f240 1107 	movw	r1, #263	; 0x107
 8004170:	4872      	ldr	r0, [pc, #456]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004172:	f7fd fa16 	bl	80015a2 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004176:	4b70      	ldr	r3, [pc, #448]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004184:	496c      	ldr	r1, [pc, #432]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01d      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00e      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041a8:	d009      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041b2:	d004      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 80041b4:	f240 1111 	movw	r1, #273	; 0x111
 80041b8:	4860      	ldr	r0, [pc, #384]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80041ba:	f7fd f9f2 	bl	80015a2 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041be:	4b5e      	ldr	r3, [pc, #376]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041cc:	495a      	ldr	r1, [pc, #360]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d01d      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x718>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00e      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x702>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041f0:	d009      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x702>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041fa:	d004      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x702>
 80041fc:	f240 111b 	movw	r1, #283	; 0x11b
 8004200:	484e      	ldr	r0, [pc, #312]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004202:	f7fd f9ce 	bl	80015a2 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004206:	4b4c      	ldr	r3, [pc, #304]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004214:	4948      	ldr	r1, [pc, #288]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004224:	2b00      	cmp	r3, #0
 8004226:	d01f      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x764>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422c:	2b00      	cmp	r3, #0
 800422e:	d010      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004234:	2b01      	cmp	r3, #1
 8004236:	d00c      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423c:	2b03      	cmp	r3, #3
 800423e:	d008      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004244:	2b02      	cmp	r3, #2
 8004246:	d004      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004248:	f240 1125 	movw	r1, #293	; 0x125
 800424c:	483b      	ldr	r0, [pc, #236]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800424e:	f7fd f9a8 	bl	80015a2 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004252:	4b39      	ldr	r3, [pc, #228]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004258:	f023 0203 	bic.w	r2, r3, #3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004260:	4935      	ldr	r1, [pc, #212]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004270:	2b00      	cmp	r3, #0
 8004272:	d01f      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004278:	2b00      	cmp	r3, #0
 800427a:	d010      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x79a>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004280:	2b04      	cmp	r3, #4
 8004282:	d00c      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004288:	2b0c      	cmp	r3, #12
 800428a:	d008      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x79a>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004290:	2b08      	cmp	r3, #8
 8004292:	d004      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8004294:	f240 112f 	movw	r1, #303	; 0x12f
 8004298:	4828      	ldr	r0, [pc, #160]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800429a:	f7fd f982 	bl	80015a2 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800429e:	4b26      	ldr	r3, [pc, #152]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a4:	f023 020c 	bic.w	r2, r3, #12
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ac:	4922      	ldr	r1, [pc, #136]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01f      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d010      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042cc:	2b10      	cmp	r3, #16
 80042ce:	d00c      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d4:	2b30      	cmp	r3, #48	; 0x30
 80042d6:	d008      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042dc:	2b20      	cmp	r3, #32
 80042de:	d004      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80042e0:	f240 1139 	movw	r1, #313	; 0x139
 80042e4:	4815      	ldr	r0, [pc, #84]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80042e6:	f7fd f95c 	bl	80015a2 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042ea:	4b13      	ldr	r3, [pc, #76]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f8:	490f      	ldr	r1, [pc, #60]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004308:	2b00      	cmp	r3, #0
 800430a:	d024      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004310:	2b00      	cmp	r3, #0
 8004312:	d015      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004318:	2b40      	cmp	r3, #64	; 0x40
 800431a:	d011      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004320:	2bc0      	cmp	r3, #192	; 0xc0
 8004322:	d00d      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004328:	2b80      	cmp	r3, #128	; 0x80
 800432a:	d009      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800432c:	f240 1143 	movw	r1, #323	; 0x143
 8004330:	4802      	ldr	r0, [pc, #8]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004332:	f7fd f936 	bl	80015a2 <assert_failed>
 8004336:	e003      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004338:	40023800 	.word	0x40023800
 800433c:	08006ea4 	.word	0x08006ea4

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004340:	4bae      	ldr	r3, [pc, #696]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800434e:	49ab      	ldr	r1, [pc, #684]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800435e:	2b00      	cmp	r3, #0
 8004360:	d022      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004366:	2b00      	cmp	r3, #0
 8004368:	d013      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004372:	d00e      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004378:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800437c:	d009      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004386:	d004      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004388:	f240 114d 	movw	r1, #333	; 0x14d
 800438c:	489c      	ldr	r0, [pc, #624]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 800438e:	f7fd f908 	bl	80015a2 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004392:	4b9a      	ldr	r3, [pc, #616]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004398:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a0:	4996      	ldr	r1, [pc, #600]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d022      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d013      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c4:	d00e      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043ce:	d009      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043d8:	d004      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 80043da:	f240 1157 	movw	r1, #343	; 0x157
 80043de:	4888      	ldr	r0, [pc, #544]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80043e0:	f7fd f8df 	bl	80015a2 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80043e4:	4b85      	ldr	r3, [pc, #532]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80043e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f2:	4982      	ldr	r1, [pc, #520]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d022      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440a:	2b00      	cmp	r3, #0
 800440c:	d013      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x932>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004416:	d00e      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x932>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004420:	d009      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x932>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800442a:	d004      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x932>
 800442c:	f240 1161 	movw	r1, #353	; 0x161
 8004430:	4873      	ldr	r0, [pc, #460]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004432:	f7fd f8b6 	bl	80015a2 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004436:	4b71      	ldr	r3, [pc, #452]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004444:	496d      	ldr	r1, [pc, #436]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d022      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800445c:	2b00      	cmp	r3, #0
 800445e:	d013      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004464:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004468:	d00e      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004472:	d009      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800447c:	d004      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800447e:	f240 116b 	movw	r1, #363	; 0x16b
 8004482:	485f      	ldr	r0, [pc, #380]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004484:	f7fd f88d 	bl	80015a2 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004488:	4b5c      	ldr	r3, [pc, #368]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004496:	4959      	ldr	r1, [pc, #356]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d018      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x9d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044b2:	d008      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d004      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80044bc:	f240 1175 	movw	r1, #373	; 0x175
 80044c0:	484f      	ldr	r0, [pc, #316]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80044c2:	f7fd f86e 	bl	80015a2 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044c6:	4b4d      	ldr	r3, [pc, #308]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044cc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044d4:	4949      	ldr	r1, [pc, #292]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01f      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044f0:	d008      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d004      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80044fa:	f240 117f 	movw	r1, #383	; 0x17f
 80044fe:	4840      	ldr	r0, [pc, #256]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004500:	f7fd f84f 	bl	80015a2 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004504:	4b3d      	ldr	r3, [pc, #244]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004512:	493a      	ldr	r1, [pc, #232]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004514:	4313      	orrs	r3, r2
 8004516:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800451e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004522:	d101      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      pllsaiused = 1;
 8004524:	2301      	movs	r3, #1
 8004526:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    pllsaiused = 1;
 8004534:	2301      	movs	r3, #1
 8004536:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d022      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xa86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004548:	2b00      	cmp	r3, #0
 800454a:	d013      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004554:	d00e      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800455a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800455e:	d009      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004564:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004568:	d004      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800456a:	f240 1197 	movw	r1, #407	; 0x197
 800456e:	4824      	ldr	r0, [pc, #144]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004570:	f7fd f817 	bl	80015a2 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004574:	4b21      	ldr	r3, [pc, #132]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004582:	491e      	ldr	r1, [pc, #120]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d01b      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xaca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800459c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045a0:	d009      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d004      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80045ac:	f240 11a1 	movw	r1, #417	; 0x1a1
 80045b0:	4813      	ldr	r0, [pc, #76]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80045b2:	f7fc fff6 	bl	80015a2 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045b6:	4b11      	ldr	r3, [pc, #68]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80045b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045bc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045c6:	490d      	ldr	r1, [pc, #52]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d020      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045e4:	d00e      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d009      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 80045f0:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80045f4:	4802      	ldr	r0, [pc, #8]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80045f6:	f7fc ffd4 	bl	80015a2 <assert_failed>
 80045fa:	e003      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 80045fc:	40023800 	.word	0x40023800
 8004600:	08006ea4 	.word	0x08006ea4

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004604:	4b35      	ldr	r3, [pc, #212]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004614:	4931      	ldr	r1, [pc, #196]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01b      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004638:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800463c:	d004      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 800463e:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8004642:	4827      	ldr	r0, [pc, #156]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004644:	f7fc ffad 	bl	80015a2 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004648:	4b24      	ldr	r3, [pc, #144]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800464a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800464e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004658:	4920      	ldr	r1, [pc, #128]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d01b      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800467c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004680:	d004      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004682:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004686:	4816      	ldr	r0, [pc, #88]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004688:	f7fc ff8b 	bl	80015a2 <assert_failed>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800468c:	4b13      	ldr	r3, [pc, #76]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800468e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004692:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800469c:	490f      	ldr	r1, [pc, #60]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d005      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046b2:	f040 8153 	bne.w	800495c <HAL_RCCEx_PeriphCLKConfig+0xe58>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046b6:	4b09      	ldr	r3, [pc, #36]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a08      	ldr	r2, [pc, #32]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80046bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c2:	f7fd fcd1 	bl	8002068 <HAL_GetTick>
 80046c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046c8:	e00c      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046ca:	f7fd fccd 	bl	8002068 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b64      	cmp	r3, #100	; 0x64
 80046d6:	d905      	bls.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e276      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 80046dc:	40023800 	.word	0x40023800
 80046e0:	08006ea4 	.word	0x08006ea4
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046e4:	4ba9      	ldr	r3, [pc, #676]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1ec      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xbc6>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b31      	cmp	r3, #49	; 0x31
 80046f6:	d904      	bls.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004700:	d904      	bls.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004702:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8004706:	48a2      	ldr	r0, [pc, #648]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004708:	f7fc ff4b 	bl	80015a2 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d02e      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471c:	2b00      	cmp	r3, #0
 800471e:	d12a      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d903      	bls.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2b07      	cmp	r3, #7
 800472e:	d904      	bls.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8004730:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8004734:	4896      	ldr	r0, [pc, #600]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004736:	f7fc ff34 	bl	80015a2 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800473a:	4b94      	ldr	r3, [pc, #592]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800473c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004740:	0c1b      	lsrs	r3, r3, #16
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004748:	4b90      	ldr	r3, [pc, #576]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800474a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800474e:	0e1b      	lsrs	r3, r3, #24
 8004750:	f003 030f 	and.w	r3, r3, #15
 8004754:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	019a      	lsls	r2, r3, #6
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	041b      	lsls	r3, r3, #16
 8004760:	431a      	orrs	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	061b      	lsls	r3, r3, #24
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	071b      	lsls	r3, r3, #28
 800476e:	4987      	ldr	r1, [pc, #540]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004770:	4313      	orrs	r3, r2
 8004772:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d004      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xc88>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800478a:	d00a      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004794:	2b00      	cmp	r3, #0
 8004796:	d048      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xd26>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047a0:	d143      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d903      	bls.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xcae>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	2b0f      	cmp	r3, #15
 80047b0:	d904      	bls.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 80047b2:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 80047b6:	4876      	ldr	r0, [pc, #472]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80047b8:	f7fc fef3 	bl	80015a2 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d904      	bls.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 80047cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80047d0:	486f      	ldr	r0, [pc, #444]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80047d2:	f7fc fee6 	bl	80015a2 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047d6:	4b6d      	ldr	r3, [pc, #436]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80047d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047dc:	0c1b      	lsrs	r3, r3, #16
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047e4:	4b69      	ldr	r3, [pc, #420]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80047e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ea:	0f1b      	lsrs	r3, r3, #28
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	019a      	lsls	r2, r3, #6
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	041b      	lsls	r3, r3, #16
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	061b      	lsls	r3, r3, #24
 8004804:	431a      	orrs	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	071b      	lsls	r3, r3, #28
 800480a:	4960      	ldr	r1, [pc, #384]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800480c:	4313      	orrs	r3, r2
 800480e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004812:	4b5e      	ldr	r3, [pc, #376]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004818:	f023 021f 	bic.w	r2, r3, #31
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	3b01      	subs	r3, #1
 8004822:	495a      	ldr	r1, [pc, #360]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004824:	4313      	orrs	r3, r2
 8004826:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d032      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xd98>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d010      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d00c      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d008      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	2b03      	cmp	r3, #3
 8004854:	d004      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8004856:	f240 2107 	movw	r1, #519	; 0x207
 800485a:	484d      	ldr	r0, [pc, #308]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 800485c:	f7fc fea1 	bl	80015a2 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004860:	4b4a      	ldr	r3, [pc, #296]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004866:	0e1b      	lsrs	r3, r3, #24
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800486e:	4b47      	ldr	r3, [pc, #284]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004874:	0f1b      	lsrs	r3, r3, #28
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	019a      	lsls	r2, r3, #6
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	041b      	lsls	r3, r3, #16
 8004888:	431a      	orrs	r2, r3
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	061b      	lsls	r3, r3, #24
 800488e:	431a      	orrs	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	071b      	lsls	r3, r3, #28
 8004894:	493d      	ldr	r1, [pc, #244]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d040      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0xe26>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d010      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d00c      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d008      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	2b03      	cmp	r3, #3
 80048c6:	d004      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 80048c8:	f240 2116 	movw	r1, #534	; 0x216
 80048cc:	4830      	ldr	r0, [pc, #192]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80048ce:	f7fc fe68 	bl	80015a2 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d903      	bls.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	2b07      	cmp	r3, #7
 80048e0:	d904      	bls.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
 80048e2:	f240 2117 	movw	r1, #535	; 0x217
 80048e6:	482a      	ldr	r0, [pc, #168]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80048e8:	f7fc fe5b 	bl	80015a2 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d903      	bls.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	2b0f      	cmp	r3, #15
 80048fa:	d904      	bls.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xe02>
 80048fc:	f44f 7106 	mov.w	r1, #536	; 0x218
 8004900:	4823      	ldr	r0, [pc, #140]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004902:	f7fc fe4e 	bl	80015a2 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	019a      	lsls	r2, r3, #6
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	041b      	lsls	r3, r3, #16
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	061b      	lsls	r3, r3, #24
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	071b      	lsls	r3, r3, #28
 8004922:	491a      	ldr	r1, [pc, #104]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800492a:	4b18      	ldr	r3, [pc, #96]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a17      	ldr	r2, [pc, #92]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004930:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004934:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004936:	f7fd fb97 	bl	8002068 <HAL_GetTick>
 800493a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800493c:	e008      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800493e:	f7fd fb93 	bl	8002068 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b64      	cmp	r3, #100	; 0x64
 800494a:	d901      	bls.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e13c      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004950:	4b0e      	ldr	r3, [pc, #56]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0f0      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	2b01      	cmp	r3, #1
 8004960:	f040 8132 	bne.w	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004964:	4b09      	ldr	r3, [pc, #36]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a08      	ldr	r2, [pc, #32]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800496a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800496e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004970:	f7fd fb7a 	bl	8002068 <HAL_GetTick>
 8004974:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004976:	e00d      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xe90>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004978:	f7fd fb76 	bl	8002068 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b64      	cmp	r3, #100	; 0x64
 8004984:	d906      	bls.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xe90>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e11f      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 800498a:	bf00      	nop
 800498c:	40023800 	.word	0x40023800
 8004990:	08006ea4 	.word	0x08006ea4
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004994:	4b8f      	ldr	r3, [pc, #572]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800499c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049a0:	d0ea      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xe74>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	2b31      	cmp	r3, #49	; 0x31
 80049a8:	d904      	bls.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xeb0>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80049b2:	d904      	bls.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xeba>
 80049b4:	f240 2146 	movw	r1, #582	; 0x246
 80049b8:	4887      	ldr	r0, [pc, #540]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 80049ba:	f7fc fdf2 	bl	80015a2 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xece>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d009      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xee2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d048      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d144      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d903      	bls.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xef2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	2b0f      	cmp	r3, #15
 80049f4:	d904      	bls.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xefc>
 80049f6:	f240 214d 	movw	r1, #589	; 0x24d
 80049fa:	4877      	ldr	r0, [pc, #476]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 80049fc:	f7fc fdd1 	bl	80015a2 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d904      	bls.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004a10:	f240 214f 	movw	r1, #591	; 0x24f
 8004a14:	4870      	ldr	r0, [pc, #448]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004a16:	f7fc fdc4 	bl	80015a2 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a1a:	4b6e      	ldr	r3, [pc, #440]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a20:	0c1b      	lsrs	r3, r3, #16
 8004a22:	f003 0303 	and.w	r3, r3, #3
 8004a26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a28:	4b6a      	ldr	r3, [pc, #424]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2e:	0f1b      	lsrs	r3, r3, #28
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	019a      	lsls	r2, r3, #6
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	041b      	lsls	r3, r3, #16
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	061b      	lsls	r3, r3, #24
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	071b      	lsls	r3, r3, #28
 8004a4e:	4961      	ldr	r1, [pc, #388]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a56:	4b5f      	ldr	r3, [pc, #380]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a64:	3b01      	subs	r3, #1
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	495a      	ldr	r1, [pc, #360]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d037      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a84:	d132      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xfe8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d010      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d00c      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d008      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d004      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004aa6:	f240 2162 	movw	r1, #610	; 0x262
 8004aaa:	484b      	ldr	r0, [pc, #300]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004aac:	f7fc fd79 	bl	80015a2 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ab0:	4b48      	ldr	r3, [pc, #288]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab6:	0e1b      	lsrs	r3, r3, #24
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004abe:	4b45      	ldr	r3, [pc, #276]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac4:	0f1b      	lsrs	r3, r3, #28
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	019a      	lsls	r2, r3, #6
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	041b      	lsls	r3, r3, #16
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	061b      	lsls	r3, r3, #24
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	071b      	lsls	r3, r3, #28
 8004ae4:	493b      	ldr	r1, [pc, #236]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d04d      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1090>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d903      	bls.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1004>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	2b07      	cmp	r3, #7
 8004b06:	d904      	bls.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x100e>
 8004b08:	f240 2171 	movw	r1, #625	; 0x271
 8004b0c:	4832      	ldr	r0, [pc, #200]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004b0e:	f7fc fd48 	bl	80015a2 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d013      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b22:	d00e      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b2c:	d009      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b36:	d004      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8004b38:	f240 2172 	movw	r1, #626	; 0x272
 8004b3c:	4826      	ldr	r0, [pc, #152]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004b3e:	f7fc fd30 	bl	80015a2 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b42:	4b24      	ldr	r3, [pc, #144]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b48:	0e1b      	lsrs	r3, r3, #24
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b50:	4b20      	ldr	r3, [pc, #128]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b56:	0c1b      	lsrs	r3, r3, #16
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	019a      	lsls	r2, r3, #6
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	041b      	lsls	r3, r3, #16
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	061b      	lsls	r3, r3, #24
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	071b      	lsls	r3, r3, #28
 8004b76:	4917      	ldr	r1, [pc, #92]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b7e:	4b15      	ldr	r3, [pc, #84]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8c:	4911      	ldr	r1, [pc, #68]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b94:	4b0f      	ldr	r3, [pc, #60]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a0e      	ldr	r2, [pc, #56]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba0:	f7fd fa62 	bl	8002068 <HAL_GetTick>
 8004ba4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ba6:	e008      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ba8:	f7fd fa5e 	bl	8002068 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b64      	cmp	r3, #100	; 0x64
 8004bb4:	d901      	bls.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x10b6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e007      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bc6:	d1ef      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
      }
    }
  }
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3720      	adds	r7, #32
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	08006ea4 	.word	0x08006ea4

08004bdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e199      	b.n	8004f22 <HAL_SPI_Init+0x346>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a94      	ldr	r2, [pc, #592]	; (8004e44 <HAL_SPI_Init+0x268>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d01d      	beq.n	8004c34 <HAL_SPI_Init+0x58>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a92      	ldr	r2, [pc, #584]	; (8004e48 <HAL_SPI_Init+0x26c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d018      	beq.n	8004c34 <HAL_SPI_Init+0x58>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a91      	ldr	r2, [pc, #580]	; (8004e4c <HAL_SPI_Init+0x270>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d013      	beq.n	8004c34 <HAL_SPI_Init+0x58>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a8f      	ldr	r2, [pc, #572]	; (8004e50 <HAL_SPI_Init+0x274>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d00e      	beq.n	8004c34 <HAL_SPI_Init+0x58>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a8e      	ldr	r2, [pc, #568]	; (8004e54 <HAL_SPI_Init+0x278>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d009      	beq.n	8004c34 <HAL_SPI_Init+0x58>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a8c      	ldr	r2, [pc, #560]	; (8004e58 <HAL_SPI_Init+0x27c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d004      	beq.n	8004c34 <HAL_SPI_Init+0x58>
 8004c2a:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004c2e:	488b      	ldr	r0, [pc, #556]	; (8004e5c <HAL_SPI_Init+0x280>)
 8004c30:	f7fc fcb7 	bl	80015a2 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d009      	beq.n	8004c50 <HAL_SPI_Init+0x74>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c44:	d004      	beq.n	8004c50 <HAL_SPI_Init+0x74>
 8004c46:	f240 1145 	movw	r1, #325	; 0x145
 8004c4a:	4884      	ldr	r0, [pc, #528]	; (8004e5c <HAL_SPI_Init+0x280>)
 8004c4c:	f7fc fca9 	bl	80015a2 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00e      	beq.n	8004c76 <HAL_SPI_Init+0x9a>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c60:	d009      	beq.n	8004c76 <HAL_SPI_Init+0x9a>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c6a:	d004      	beq.n	8004c76 <HAL_SPI_Init+0x9a>
 8004c6c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004c70:	487a      	ldr	r0, [pc, #488]	; (8004e5c <HAL_SPI_Init+0x280>)
 8004c72:	f7fc fc96 	bl	80015a2 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c7e:	d040      	beq.n	8004d02 <HAL_SPI_Init+0x126>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8004c88:	d03b      	beq.n	8004d02 <HAL_SPI_Init+0x126>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004c92:	d036      	beq.n	8004d02 <HAL_SPI_Init+0x126>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c9c:	d031      	beq.n	8004d02 <HAL_SPI_Init+0x126>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004ca6:	d02c      	beq.n	8004d02 <HAL_SPI_Init+0x126>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004cb0:	d027      	beq.n	8004d02 <HAL_SPI_Init+0x126>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004cba:	d022      	beq.n	8004d02 <HAL_SPI_Init+0x126>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cc4:	d01d      	beq.n	8004d02 <HAL_SPI_Init+0x126>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cce:	d018      	beq.n	8004d02 <HAL_SPI_Init+0x126>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004cd8:	d013      	beq.n	8004d02 <HAL_SPI_Init+0x126>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004ce2:	d00e      	beq.n	8004d02 <HAL_SPI_Init+0x126>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cec:	d009      	beq.n	8004d02 <HAL_SPI_Init+0x126>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cf6:	d004      	beq.n	8004d02 <HAL_SPI_Init+0x126>
 8004cf8:	f240 1147 	movw	r1, #327	; 0x147
 8004cfc:	4857      	ldr	r0, [pc, #348]	; (8004e5c <HAL_SPI_Init+0x280>)
 8004cfe:	f7fc fc50 	bl	80015a2 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d0a:	d00d      	beq.n	8004d28 <HAL_SPI_Init+0x14c>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d009      	beq.n	8004d28 <HAL_SPI_Init+0x14c>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d1c:	d004      	beq.n	8004d28 <HAL_SPI_Init+0x14c>
 8004d1e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004d22:	484e      	ldr	r0, [pc, #312]	; (8004e5c <HAL_SPI_Init+0x280>)
 8004d24:	f7fc fc3d 	bl	80015a2 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d008      	beq.n	8004d42 <HAL_SPI_Init+0x166>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d004      	beq.n	8004d42 <HAL_SPI_Init+0x166>
 8004d38:	f240 1149 	movw	r1, #329	; 0x149
 8004d3c:	4847      	ldr	r0, [pc, #284]	; (8004e5c <HAL_SPI_Init+0x280>)
 8004d3e:	f7fc fc30 	bl	80015a2 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d020      	beq.n	8004d8c <HAL_SPI_Init+0x1b0>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	2b08      	cmp	r3, #8
 8004d50:	d01c      	beq.n	8004d8c <HAL_SPI_Init+0x1b0>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	2b10      	cmp	r3, #16
 8004d58:	d018      	beq.n	8004d8c <HAL_SPI_Init+0x1b0>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	2b18      	cmp	r3, #24
 8004d60:	d014      	beq.n	8004d8c <HAL_SPI_Init+0x1b0>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	d010      	beq.n	8004d8c <HAL_SPI_Init+0x1b0>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	2b28      	cmp	r3, #40	; 0x28
 8004d70:	d00c      	beq.n	8004d8c <HAL_SPI_Init+0x1b0>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	2b30      	cmp	r3, #48	; 0x30
 8004d78:	d008      	beq.n	8004d8c <HAL_SPI_Init+0x1b0>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	2b38      	cmp	r3, #56	; 0x38
 8004d80:	d004      	beq.n	8004d8c <HAL_SPI_Init+0x1b0>
 8004d82:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004d86:	4835      	ldr	r0, [pc, #212]	; (8004e5c <HAL_SPI_Init+0x280>)
 8004d88:	f7fc fc0b 	bl	80015a2 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d008      	beq.n	8004da6 <HAL_SPI_Init+0x1ca>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	2b80      	cmp	r3, #128	; 0x80
 8004d9a:	d004      	beq.n	8004da6 <HAL_SPI_Init+0x1ca>
 8004d9c:	f240 114b 	movw	r1, #331	; 0x14b
 8004da0:	482e      	ldr	r0, [pc, #184]	; (8004e5c <HAL_SPI_Init+0x280>)
 8004da2:	f7fc fbfe 	bl	80015a2 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d008      	beq.n	8004dc0 <HAL_SPI_Init+0x1e4>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	2b10      	cmp	r3, #16
 8004db4:	d004      	beq.n	8004dc0 <HAL_SPI_Init+0x1e4>
 8004db6:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004dba:	4828      	ldr	r0, [pc, #160]	; (8004e5c <HAL_SPI_Init+0x280>)
 8004dbc:	f7fc fbf1 	bl	80015a2 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d119      	bne.n	8004dfc <HAL_SPI_Init+0x220>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d008      	beq.n	8004de2 <HAL_SPI_Init+0x206>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d004      	beq.n	8004de2 <HAL_SPI_Init+0x206>
 8004dd8:	f240 114f 	movw	r1, #335	; 0x14f
 8004ddc:	481f      	ldr	r0, [pc, #124]	; (8004e5c <HAL_SPI_Init+0x280>)
 8004dde:	f7fc fbe0 	bl	80015a2 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d008      	beq.n	8004dfc <HAL_SPI_Init+0x220>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d004      	beq.n	8004dfc <HAL_SPI_Init+0x220>
 8004df2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004df6:	4819      	ldr	r0, [pc, #100]	; (8004e5c <HAL_SPI_Init+0x280>)
 8004df8:	f7fc fbd3 	bl	80015a2 <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d106      	bne.n	8004e1c <HAL_SPI_Init+0x240>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7fc fd04 	bl	8001824 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e3c:	d910      	bls.n	8004e60 <HAL_SPI_Init+0x284>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	e010      	b.n	8004e66 <HAL_SPI_Init+0x28a>
 8004e44:	40013000 	.word	0x40013000
 8004e48:	40003800 	.word	0x40003800
 8004e4c:	40003c00 	.word	0x40003c00
 8004e50:	40013400 	.word	0x40013400
 8004e54:	40015000 	.word	0x40015000
 8004e58:	40015400 	.word	0x40015400
 8004e5c:	08006ee0 	.word	0x08006ee0
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e64:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e6e:	d007      	beq.n	8004e80 <HAL_SPI_Init+0x2a4>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e78:	d002      	beq.n	8004e80 <HAL_SPI_Init+0x2a4>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10b      	bne.n	8004ea0 <HAL_SPI_Init+0x2c4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e90:	d903      	bls.n	8004e9a <HAL_SPI_Init+0x2be>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2202      	movs	r2, #2
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30
 8004e98:	e002      	b.n	8004ea0 <HAL_SPI_Init+0x2c4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	ea42 0103 	orr.w	r1, r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	0c1b      	lsrs	r3, r3, #16
 8004ee0:	f003 0204 	and.w	r2, r3, #4
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	ea42 0103 	orr.w	r1, r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69da      	ldr	r2, [r3, #28]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop

08004f2c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	603b      	str	r3, [r7, #0]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d009      	beq.n	8004f5c <HAL_SPI_Transmit+0x30>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f50:	d004      	beq.n	8004f5c <HAL_SPI_Transmit+0x30>
 8004f52:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8004f56:	4895      	ldr	r0, [pc, #596]	; (80051ac <HAL_SPI_Transmit+0x280>)
 8004f58:	f7fc fb23 	bl	80015a2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d101      	bne.n	8004f6a <HAL_SPI_Transmit+0x3e>
 8004f66:	2302      	movs	r3, #2
 8004f68:	e152      	b.n	8005210 <HAL_SPI_Transmit+0x2e4>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f72:	f7fd f879 	bl	8002068 <HAL_GetTick>
 8004f76:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f78:	88fb      	ldrh	r3, [r7, #6]
 8004f7a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d002      	beq.n	8004f8e <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8004f88:	2302      	movs	r3, #2
 8004f8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f8c:	e137      	b.n	80051fe <HAL_SPI_Transmit+0x2d2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <HAL_SPI_Transmit+0x6e>
 8004f94:	88fb      	ldrh	r3, [r7, #6]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d102      	bne.n	8004fa0 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f9e:	e12e      	b.n	80051fe <HAL_SPI_Transmit+0x2d2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2203      	movs	r2, #3
 8004fa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	88fa      	ldrh	r2, [r7, #6]
 8004fb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	88fa      	ldrh	r2, [r7, #6]
 8004fbe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fea:	d107      	bne.n	8004ffc <HAL_SPI_Transmit+0xd0>
  {
    SPI_1LINE_TX(hspi);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ffa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005006:	2b40      	cmp	r3, #64	; 0x40
 8005008:	d007      	beq.n	800501a <HAL_SPI_Transmit+0xee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005018:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005022:	d94b      	bls.n	80050bc <HAL_SPI_Transmit+0x190>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <HAL_SPI_Transmit+0x106>
 800502c:	8afb      	ldrh	r3, [r7, #22]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d13e      	bne.n	80050b0 <HAL_SPI_Transmit+0x184>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	881a      	ldrh	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	1c9a      	adds	r2, r3, #2
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005056:	e02b      	b.n	80050b0 <HAL_SPI_Transmit+0x184>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b02      	cmp	r3, #2
 8005064:	d112      	bne.n	800508c <HAL_SPI_Transmit+0x160>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506a:	881a      	ldrh	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005076:	1c9a      	adds	r2, r3, #2
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005080:	b29b      	uxth	r3, r3
 8005082:	3b01      	subs	r3, #1
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	87da      	strh	r2, [r3, #62]	; 0x3e
 800508a:	e011      	b.n	80050b0 <HAL_SPI_Transmit+0x184>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800508c:	f7fc ffec 	bl	8002068 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	429a      	cmp	r2, r3
 800509a:	d803      	bhi.n	80050a4 <HAL_SPI_Transmit+0x178>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a2:	d102      	bne.n	80050aa <HAL_SPI_Transmit+0x17e>
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d102      	bne.n	80050b0 <HAL_SPI_Transmit+0x184>
        {
          errorcode = HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80050ae:	e0a6      	b.n	80051fe <HAL_SPI_Transmit+0x2d2>
    while (hspi->TxXferCount > 0U)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1ce      	bne.n	8005058 <HAL_SPI_Transmit+0x12c>
 80050ba:	e07e      	b.n	80051ba <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <HAL_SPI_Transmit+0x19e>
 80050c4:	8afb      	ldrh	r3, [r7, #22]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d172      	bne.n	80051b0 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d912      	bls.n	80050fa <HAL_SPI_Transmit+0x1ce>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d8:	881a      	ldrh	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e4:	1c9a      	adds	r2, r3, #2
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	3b02      	subs	r3, #2
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050f8:	e05a      	b.n	80051b0 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	330c      	adds	r3, #12
 8005104:	7812      	ldrb	r2, [r2, #0]
 8005106:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005116:	b29b      	uxth	r3, r3
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005120:	e046      	b.n	80051b0 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b02      	cmp	r3, #2
 800512e:	d12b      	bne.n	8005188 <HAL_SPI_Transmit+0x25c>
      {
        if (hspi->TxXferCount > 1U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b01      	cmp	r3, #1
 8005138:	d912      	bls.n	8005160 <HAL_SPI_Transmit+0x234>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	881a      	ldrh	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514a:	1c9a      	adds	r2, r3, #2
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b02      	subs	r3, #2
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800515e:	e027      	b.n	80051b0 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	330c      	adds	r3, #12
 800516a:	7812      	ldrb	r2, [r2, #0]
 800516c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800517c:	b29b      	uxth	r3, r3
 800517e:	3b01      	subs	r3, #1
 8005180:	b29a      	uxth	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005186:	e013      	b.n	80051b0 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005188:	f7fc ff6e 	bl	8002068 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	429a      	cmp	r2, r3
 8005196:	d803      	bhi.n	80051a0 <HAL_SPI_Transmit+0x274>
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519e:	d102      	bne.n	80051a6 <HAL_SPI_Transmit+0x27a>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d104      	bne.n	80051b0 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051aa:	e028      	b.n	80051fe <HAL_SPI_Transmit+0x2d2>
 80051ac:	08006ee0 	.word	0x08006ee0
    while (hspi->TxXferCount > 0U)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1b3      	bne.n	8005122 <HAL_SPI_Transmit+0x1f6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	6839      	ldr	r1, [r7, #0]
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 fc3e 	bl	8005a40 <SPI_EndRxTxTransaction>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2220      	movs	r2, #32
 80051ce:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10a      	bne.n	80051ee <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051d8:	2300      	movs	r3, #0
 80051da:	613b      	str	r3, [r7, #16]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	613b      	str	r3, [r7, #16]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	613b      	str	r3, [r7, #16]
 80051ec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d002      	beq.n	80051fc <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	77fb      	strb	r3, [r7, #31]
 80051fa:	e000      	b.n	80051fe <HAL_SPI_Transmit+0x2d2>
  }

error:
 80051fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800520e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3720      	adds	r7, #32
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08a      	sub	sp, #40	; 0x28
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
 8005224:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005226:	2301      	movs	r3, #1
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d004      	beq.n	8005242 <HAL_SPI_TransmitReceive+0x2a>
 8005238:	f240 41bf 	movw	r1, #1215	; 0x4bf
 800523c:	4895      	ldr	r0, [pc, #596]	; (8005494 <HAL_SPI_TransmitReceive+0x27c>)
 800523e:	f7fc f9b0 	bl	80015a2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <HAL_SPI_TransmitReceive+0x38>
 800524c:	2302      	movs	r3, #2
 800524e:	e1fd      	b.n	800564c <HAL_SPI_TransmitReceive+0x434>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005258:	f7fc ff06 	bl	8002068 <HAL_GetTick>
 800525c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005264:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800526c:	887b      	ldrh	r3, [r7, #2]
 800526e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005270:	887b      	ldrh	r3, [r7, #2]
 8005272:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005274:	7efb      	ldrb	r3, [r7, #27]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d00e      	beq.n	8005298 <HAL_SPI_TransmitReceive+0x80>
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005280:	d106      	bne.n	8005290 <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d102      	bne.n	8005290 <HAL_SPI_TransmitReceive+0x78>
 800528a:	7efb      	ldrb	r3, [r7, #27]
 800528c:	2b04      	cmp	r3, #4
 800528e:	d003      	beq.n	8005298 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 8005290:	2302      	movs	r3, #2
 8005292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005296:	e1cf      	b.n	8005638 <HAL_SPI_TransmitReceive+0x420>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d005      	beq.n	80052aa <HAL_SPI_TransmitReceive+0x92>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d002      	beq.n	80052aa <HAL_SPI_TransmitReceive+0x92>
 80052a4:	887b      	ldrh	r3, [r7, #2]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d103      	bne.n	80052b2 <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80052b0:	e1c2      	b.n	8005638 <HAL_SPI_TransmitReceive+0x420>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	d003      	beq.n	80052c6 <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2205      	movs	r2, #5
 80052c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	887a      	ldrh	r2, [r7, #2]
 80052d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	887a      	ldrh	r2, [r7, #2]
 80052de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	887a      	ldrh	r2, [r7, #2]
 80052ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	887a      	ldrh	r2, [r7, #2]
 80052f2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005308:	d802      	bhi.n	8005310 <HAL_SPI_TransmitReceive+0xf8>
 800530a:	8a3b      	ldrh	r3, [r7, #16]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d908      	bls.n	8005322 <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800531e:	605a      	str	r2, [r3, #4]
 8005320:	e007      	b.n	8005332 <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005330:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533c:	2b40      	cmp	r3, #64	; 0x40
 800533e:	d007      	beq.n	8005350 <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800534e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005358:	d97c      	bls.n	8005454 <HAL_SPI_TransmitReceive+0x23c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <HAL_SPI_TransmitReceive+0x150>
 8005362:	8a7b      	ldrh	r3, [r7, #18]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d169      	bne.n	800543c <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	881a      	ldrh	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005378:	1c9a      	adds	r2, r3, #2
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005382:	b29b      	uxth	r3, r3
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800538c:	e056      	b.n	800543c <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b02      	cmp	r3, #2
 800539a:	d11b      	bne.n	80053d4 <HAL_SPI_TransmitReceive+0x1bc>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d016      	beq.n	80053d4 <HAL_SPI_TransmitReceive+0x1bc>
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d113      	bne.n	80053d4 <HAL_SPI_TransmitReceive+0x1bc>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b0:	881a      	ldrh	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	1c9a      	adds	r2, r3, #2
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d11c      	bne.n	800541c <HAL_SPI_TransmitReceive+0x204>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d016      	beq.n	800541c <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f8:	b292      	uxth	r2, r2
 80053fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	1c9a      	adds	r2, r3, #2
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005418:	2301      	movs	r3, #1
 800541a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800541c:	f7fc fe24 	bl	8002068 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005428:	429a      	cmp	r2, r3
 800542a:	d807      	bhi.n	800543c <HAL_SPI_TransmitReceive+0x224>
 800542c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005432:	d003      	beq.n	800543c <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800543a:	e0fd      	b.n	8005638 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005440:	b29b      	uxth	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1a3      	bne.n	800538e <HAL_SPI_TransmitReceive+0x176>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800544c:	b29b      	uxth	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d19d      	bne.n	800538e <HAL_SPI_TransmitReceive+0x176>
 8005452:	e0e1      	b.n	8005618 <HAL_SPI_TransmitReceive+0x400>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <HAL_SPI_TransmitReceive+0x24c>
 800545c:	8a7b      	ldrh	r3, [r7, #18]
 800545e:	2b01      	cmp	r3, #1
 8005460:	f040 80cd 	bne.w	80055fe <HAL_SPI_TransmitReceive+0x3e6>
    {
      if (hspi->TxXferCount > 1U)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005468:	b29b      	uxth	r3, r3
 800546a:	2b01      	cmp	r3, #1
 800546c:	d914      	bls.n	8005498 <HAL_SPI_TransmitReceive+0x280>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005472:	881a      	ldrh	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547e:	1c9a      	adds	r2, r3, #2
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005488:	b29b      	uxth	r3, r3
 800548a:	3b02      	subs	r3, #2
 800548c:	b29a      	uxth	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005492:	e0b4      	b.n	80055fe <HAL_SPI_TransmitReceive+0x3e6>
 8005494:	08006ee0 	.word	0x08006ee0
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	330c      	adds	r3, #12
 80054a2:	7812      	ldrb	r2, [r2, #0]
 80054a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054aa:	1c5a      	adds	r2, r3, #1
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	3b01      	subs	r3, #1
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054be:	e09e      	b.n	80055fe <HAL_SPI_TransmitReceive+0x3e6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d134      	bne.n	8005538 <HAL_SPI_TransmitReceive+0x320>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d02f      	beq.n	8005538 <HAL_SPI_TransmitReceive+0x320>
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d12c      	bne.n	8005538 <HAL_SPI_TransmitReceive+0x320>
      {
        if (hspi->TxXferCount > 1U)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d912      	bls.n	800550e <HAL_SPI_TransmitReceive+0x2f6>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ec:	881a      	ldrh	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f8:	1c9a      	adds	r2, r3, #2
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005502:	b29b      	uxth	r3, r3
 8005504:	3b02      	subs	r3, #2
 8005506:	b29a      	uxth	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800550c:	e012      	b.n	8005534 <HAL_SPI_TransmitReceive+0x31c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	330c      	adds	r3, #12
 8005518:	7812      	ldrb	r2, [r2, #0]
 800551a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800552a:	b29b      	uxth	r3, r3
 800552c:	3b01      	subs	r3, #1
 800552e:	b29a      	uxth	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005534:	2300      	movs	r3, #0
 8005536:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b01      	cmp	r3, #1
 8005544:	d148      	bne.n	80055d8 <HAL_SPI_TransmitReceive+0x3c0>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800554c:	b29b      	uxth	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d042      	beq.n	80055d8 <HAL_SPI_TransmitReceive+0x3c0>
      {
        if (hspi->RxXferCount > 1U)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005558:	b29b      	uxth	r3, r3
 800555a:	2b01      	cmp	r3, #1
 800555c:	d923      	bls.n	80055a6 <HAL_SPI_TransmitReceive+0x38e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68da      	ldr	r2, [r3, #12]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005568:	b292      	uxth	r2, r2
 800556a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005570:	1c9a      	adds	r2, r3, #2
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800557c:	b29b      	uxth	r3, r3
 800557e:	3b02      	subs	r3, #2
 8005580:	b29a      	uxth	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b01      	cmp	r3, #1
 8005592:	d81f      	bhi.n	80055d4 <HAL_SPI_TransmitReceive+0x3bc>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055a2:	605a      	str	r2, [r3, #4]
 80055a4:	e016      	b.n	80055d4 <HAL_SPI_TransmitReceive+0x3bc>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f103 020c 	add.w	r2, r3, #12
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	7812      	ldrb	r2, [r2, #0]
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	3b01      	subs	r3, #1
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055d4:	2301      	movs	r3, #1
 80055d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055d8:	f7fc fd46 	bl	8002068 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d803      	bhi.n	80055f0 <HAL_SPI_TransmitReceive+0x3d8>
 80055e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ee:	d102      	bne.n	80055f6 <HAL_SPI_TransmitReceive+0x3de>
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d103      	bne.n	80055fe <HAL_SPI_TransmitReceive+0x3e6>
      {
        errorcode = HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80055fc:	e01c      	b.n	8005638 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	f47f af5b 	bne.w	80054c0 <HAL_SPI_TransmitReceive+0x2a8>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005610:	b29b      	uxth	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	f47f af54 	bne.w	80054c0 <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005618:	69fa      	ldr	r2, [r7, #28]
 800561a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 fa0f 	bl	8005a40 <SPI_EndRxTxTransaction>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d006      	beq.n	8005636 <HAL_SPI_TransmitReceive+0x41e>
  {
    errorcode = HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2220      	movs	r2, #32
 8005632:	661a      	str	r2, [r3, #96]	; 0x60
 8005634:	e000      	b.n	8005638 <HAL_SPI_TransmitReceive+0x420>
  }

error :
 8005636:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005648:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800564c:	4618      	mov	r0, r3
 800564e:	3728      	adds	r7, #40	; 0x28
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	099b      	lsrs	r3, r3, #6
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10f      	bne.n	8005698 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00a      	beq.n	8005698 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	099b      	lsrs	r3, r3, #6
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d004      	beq.n	8005698 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	4798      	blx	r3
    return;
 8005696:	e0d8      	b.n	800584a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	085b      	lsrs	r3, r3, #1
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00a      	beq.n	80056ba <HAL_SPI_IRQHandler+0x66>
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	09db      	lsrs	r3, r3, #7
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d004      	beq.n	80056ba <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	4798      	blx	r3
    return;
 80056b8:	e0c7      	b.n	800584a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	095b      	lsrs	r3, r3, #5
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10c      	bne.n	80056e0 <HAL_SPI_IRQHandler+0x8c>
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	099b      	lsrs	r3, r3, #6
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d106      	bne.n	80056e0 <HAL_SPI_IRQHandler+0x8c>
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	0a1b      	lsrs	r3, r3, #8
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 80b5 	beq.w	800584a <HAL_SPI_IRQHandler+0x1f6>
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 80ae 	beq.w	800584a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	099b      	lsrs	r3, r3, #6
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d023      	beq.n	8005742 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b03      	cmp	r3, #3
 8005704:	d011      	beq.n	800572a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800570a:	f043 0204 	orr.w	r2, r3, #4
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005712:	2300      	movs	r3, #0
 8005714:	617b      	str	r3, [r7, #20]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	617b      	str	r3, [r7, #20]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	617b      	str	r3, [r7, #20]
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	e00b      	b.n	8005742 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800572a:	2300      	movs	r3, #0
 800572c:	613b      	str	r3, [r7, #16]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	613b      	str	r3, [r7, #16]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	613b      	str	r3, [r7, #16]
 800573e:	693b      	ldr	r3, [r7, #16]
        return;
 8005740:	e083      	b.n	800584a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	095b      	lsrs	r3, r3, #5
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d014      	beq.n	8005778 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005752:	f043 0201 	orr.w	r2, r3, #1
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	0a1b      	lsrs	r3, r3, #8
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00c      	beq.n	800579e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005788:	f043 0208 	orr.w	r2, r3, #8
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005790:	2300      	movs	r3, #0
 8005792:	60bb      	str	r3, [r7, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	60bb      	str	r3, [r7, #8]
 800579c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d050      	beq.n	8005848 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057b4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d104      	bne.n	80057d2 <HAL_SPI_IRQHandler+0x17e>
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d034      	beq.n	800583c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 0203 	bic.w	r2, r2, #3
 80057e0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d011      	beq.n	800580e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ee:	4a18      	ldr	r2, [pc, #96]	; (8005850 <HAL_SPI_IRQHandler+0x1fc>)
 80057f0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fc fef4 	bl	80025e4 <HAL_DMA_Abort_IT>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d005      	beq.n	800580e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005806:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005812:	2b00      	cmp	r3, #0
 8005814:	d016      	beq.n	8005844 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581a:	4a0d      	ldr	r2, [pc, #52]	; (8005850 <HAL_SPI_IRQHandler+0x1fc>)
 800581c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005822:	4618      	mov	r0, r3
 8005824:	f7fc fede 	bl	80025e4 <HAL_DMA_Abort_IT>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005832:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800583a:	e003      	b.n	8005844 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f809 	bl	8005854 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005842:	e000      	b.n	8005846 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005844:	bf00      	nop
    return;
 8005846:	bf00      	nop
 8005848:	bf00      	nop
  }
}
 800584a:	3720      	adds	r7, #32
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	08005869 	.word	0x08005869

08005854 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005874:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f7ff ffe5 	bl	8005854 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800588a:	bf00      	nop
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b084      	sub	sp, #16
 8005896:	af00      	add	r7, sp, #0
 8005898:	60f8      	str	r0, [r7, #12]
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	603b      	str	r3, [r7, #0]
 800589e:	4613      	mov	r3, r2
 80058a0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058a2:	e04c      	b.n	800593e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058aa:	d048      	beq.n	800593e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80058ac:	f7fc fbdc 	bl	8002068 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d902      	bls.n	80058c2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d13d      	bne.n	800593e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058da:	d111      	bne.n	8005900 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058e4:	d004      	beq.n	80058f0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ee:	d107      	bne.n	8005900 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005908:	d10f      	bne.n	800592a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005928:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e00f      	b.n	800595e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	4013      	ands	r3, r2
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	429a      	cmp	r2, r3
 800594c:	bf0c      	ite	eq
 800594e:	2301      	moveq	r3, #1
 8005950:	2300      	movne	r3, #0
 8005952:	b2db      	uxtb	r3, r3
 8005954:	461a      	mov	r2, r3
 8005956:	79fb      	ldrb	r3, [r7, #7]
 8005958:	429a      	cmp	r2, r3
 800595a:	d1a3      	bne.n	80058a4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b084      	sub	sp, #16
 800596a:	af00      	add	r7, sp, #0
 800596c:	60f8      	str	r0, [r7, #12]
 800596e:	60b9      	str	r1, [r7, #8]
 8005970:	607a      	str	r2, [r7, #4]
 8005972:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005974:	e057      	b.n	8005a26 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800597c:	d106      	bne.n	800598c <SPI_WaitFifoStateUntilTimeout+0x26>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d103      	bne.n	800598c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	330c      	adds	r3, #12
 800598a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005992:	d048      	beq.n	8005a26 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005994:	f7fc fb68 	bl	8002068 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d902      	bls.n	80059aa <SPI_WaitFifoStateUntilTimeout+0x44>
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d13d      	bne.n	8005a26 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059c2:	d111      	bne.n	80059e8 <SPI_WaitFifoStateUntilTimeout+0x82>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059cc:	d004      	beq.n	80059d8 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d6:	d107      	bne.n	80059e8 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f0:	d10f      	bne.n	8005a12 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e008      	b.n	8005a38 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d19f      	bne.n	8005976 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af02      	add	r7, sp, #8
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f7ff ff84 	bl	8005966 <SPI_WaitFifoStateUntilTimeout>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d007      	beq.n	8005a74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a68:	f043 0220 	orr.w	r2, r3, #32
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e027      	b.n	8005ac4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	2180      	movs	r1, #128	; 0x80
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f7ff ff07 	bl	8005892 <SPI_WaitFlagStateUntilTimeout>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d007      	beq.n	8005a9a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a8e:	f043 0220 	orr.w	r2, r3, #32
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e014      	b.n	8005ac4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f7ff ff5d 	bl	8005966 <SPI_WaitFifoStateUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d007      	beq.n	8005ac2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ab6:	f043 0220 	orr.w	r2, r3, #32
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e000      	b.n	8005ac4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e09f      	b.n	8005c1e <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d02d      	beq.n	8005b42 <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a4f      	ldr	r2, [pc, #316]	; (8005c28 <HAL_UART_Init+0x15c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d055      	beq.n	8005b9c <HAL_UART_Init+0xd0>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a4d      	ldr	r2, [pc, #308]	; (8005c2c <HAL_UART_Init+0x160>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d050      	beq.n	8005b9c <HAL_UART_Init+0xd0>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a4c      	ldr	r2, [pc, #304]	; (8005c30 <HAL_UART_Init+0x164>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d04b      	beq.n	8005b9c <HAL_UART_Init+0xd0>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a4a      	ldr	r2, [pc, #296]	; (8005c34 <HAL_UART_Init+0x168>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d046      	beq.n	8005b9c <HAL_UART_Init+0xd0>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a49      	ldr	r2, [pc, #292]	; (8005c38 <HAL_UART_Init+0x16c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d041      	beq.n	8005b9c <HAL_UART_Init+0xd0>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a47      	ldr	r2, [pc, #284]	; (8005c3c <HAL_UART_Init+0x170>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d03c      	beq.n	8005b9c <HAL_UART_Init+0xd0>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a46      	ldr	r2, [pc, #280]	; (8005c40 <HAL_UART_Init+0x174>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d037      	beq.n	8005b9c <HAL_UART_Init+0xd0>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a44      	ldr	r2, [pc, #272]	; (8005c44 <HAL_UART_Init+0x178>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d032      	beq.n	8005b9c <HAL_UART_Init+0xd0>
 8005b36:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8005b3a:	4843      	ldr	r0, [pc, #268]	; (8005c48 <HAL_UART_Init+0x17c>)
 8005b3c:	f7fb fd31 	bl	80015a2 <assert_failed>
 8005b40:	e02c      	b.n	8005b9c <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a38      	ldr	r2, [pc, #224]	; (8005c28 <HAL_UART_Init+0x15c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d027      	beq.n	8005b9c <HAL_UART_Init+0xd0>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a36      	ldr	r2, [pc, #216]	; (8005c2c <HAL_UART_Init+0x160>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d022      	beq.n	8005b9c <HAL_UART_Init+0xd0>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a35      	ldr	r2, [pc, #212]	; (8005c30 <HAL_UART_Init+0x164>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d01d      	beq.n	8005b9c <HAL_UART_Init+0xd0>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a33      	ldr	r2, [pc, #204]	; (8005c34 <HAL_UART_Init+0x168>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d018      	beq.n	8005b9c <HAL_UART_Init+0xd0>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a32      	ldr	r2, [pc, #200]	; (8005c38 <HAL_UART_Init+0x16c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d013      	beq.n	8005b9c <HAL_UART_Init+0xd0>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a30      	ldr	r2, [pc, #192]	; (8005c3c <HAL_UART_Init+0x170>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d00e      	beq.n	8005b9c <HAL_UART_Init+0xd0>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a2f      	ldr	r2, [pc, #188]	; (8005c40 <HAL_UART_Init+0x174>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d009      	beq.n	8005b9c <HAL_UART_Init+0xd0>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a2d      	ldr	r2, [pc, #180]	; (8005c44 <HAL_UART_Init+0x178>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d004      	beq.n	8005b9c <HAL_UART_Init+0xd0>
 8005b92:	f240 112f 	movw	r1, #303	; 0x12f
 8005b96:	482c      	ldr	r0, [pc, #176]	; (8005c48 <HAL_UART_Init+0x17c>)
 8005b98:	f7fb fd03 	bl	80015a2 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d106      	bne.n	8005bb2 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7fc f8e3 	bl	8001d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2224      	movs	r2, #36	; 0x24
 8005bb6:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0201 	bic.w	r2, r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fb01 	bl	80061d0 <UART_SetConfig>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d101      	bne.n	8005bd8 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e022      	b.n	8005c1e <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 fe31 	bl	8006848 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bf4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f042 0201 	orr.w	r2, r2, #1
 8005c14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 ff6a 	bl	8006af0 <UART_CheckIdleState>
 8005c1c:	4603      	mov	r3, r0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	40011000 	.word	0x40011000
 8005c2c:	40004400 	.word	0x40004400
 8005c30:	40004800 	.word	0x40004800
 8005c34:	40004c00 	.word	0x40004c00
 8005c38:	40005000 	.word	0x40005000
 8005c3c:	40011400 	.word	0x40011400
 8005c40:	40007800 	.word	0x40007800
 8005c44:	40007c00 	.word	0x40007c00
 8005c48:	08006f18 	.word	0x08006f18

08005c4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08a      	sub	sp, #40	; 0x28
 8005c50:	af02      	add	r7, sp, #8
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	603b      	str	r3, [r7, #0]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c60:	2b20      	cmp	r3, #32
 8005c62:	d17f      	bne.n	8005d64 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <HAL_UART_Transmit+0x24>
 8005c6a:	88fb      	ldrh	r3, [r7, #6]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e078      	b.n	8005d66 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <HAL_UART_Transmit+0x36>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e071      	b.n	8005d66 <HAL_UART_Transmit+0x11a>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2221      	movs	r2, #33	; 0x21
 8005c94:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005c96:	f7fc f9e7 	bl	8002068 <HAL_GetTick>
 8005c9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	88fa      	ldrh	r2, [r7, #6]
 8005ca0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	88fa      	ldrh	r2, [r7, #6]
 8005ca8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb4:	d108      	bne.n	8005cc8 <HAL_UART_Transmit+0x7c>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d104      	bne.n	8005cc8 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	61bb      	str	r3, [r7, #24]
 8005cc6:	e003      	b.n	8005cd0 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005cd8:	e02c      	b.n	8005d34 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2180      	movs	r1, #128	; 0x80
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 ff48 	bl	8006b7a <UART_WaitOnFlagUntilTimeout>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e038      	b.n	8005d66 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10b      	bne.n	8005d12 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d08:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	3302      	adds	r3, #2
 8005d0e:	61bb      	str	r3, [r7, #24]
 8005d10:	e007      	b.n	8005d22 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	781a      	ldrb	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1cc      	bne.n	8005cda <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	2200      	movs	r2, #0
 8005d48:	2140      	movs	r1, #64	; 0x40
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f000 ff15 	bl	8006b7a <UART_WaitOnFlagUntilTimeout>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d001      	beq.n	8005d5a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e005      	b.n	8005d66 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	e000      	b.n	8005d66 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8005d64:	2302      	movs	r3, #2
  }
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3720      	adds	r7, #32
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b08a      	sub	sp, #40	; 0x28
 8005d72:	af02      	add	r7, sp, #8
 8005d74:	60f8      	str	r0, [r7, #12]
 8005d76:	60b9      	str	r1, [r7, #8]
 8005d78:	603b      	str	r3, [r7, #0]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d82:	2b20      	cmp	r3, #32
 8005d84:	f040 80ba 	bne.w	8005efc <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d002      	beq.n	8005d94 <HAL_UART_Receive+0x26>
 8005d8e:	88fb      	ldrh	r3, [r7, #6]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e0b2      	b.n	8005efe <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <HAL_UART_Receive+0x38>
 8005da2:	2302      	movs	r3, #2
 8005da4:	e0ab      	b.n	8005efe <HAL_UART_Receive+0x190>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2222      	movs	r2, #34	; 0x22
 8005db8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005dba:	f7fc f955 	bl	8002068 <HAL_GetTick>
 8005dbe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	88fa      	ldrh	r2, [r7, #6]
 8005dc4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	88fa      	ldrh	r2, [r7, #6]
 8005dcc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd8:	d10e      	bne.n	8005df8 <HAL_UART_Receive+0x8a>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d105      	bne.n	8005dee <HAL_UART_Receive+0x80>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005de8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dec:	e02d      	b.n	8005e4a <HAL_UART_Receive+0xdc>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	22ff      	movs	r2, #255	; 0xff
 8005df2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005df6:	e028      	b.n	8005e4a <HAL_UART_Receive+0xdc>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10d      	bne.n	8005e1c <HAL_UART_Receive+0xae>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d104      	bne.n	8005e12 <HAL_UART_Receive+0xa4>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	22ff      	movs	r2, #255	; 0xff
 8005e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e10:	e01b      	b.n	8005e4a <HAL_UART_Receive+0xdc>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	227f      	movs	r2, #127	; 0x7f
 8005e16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e1a:	e016      	b.n	8005e4a <HAL_UART_Receive+0xdc>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e24:	d10d      	bne.n	8005e42 <HAL_UART_Receive+0xd4>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d104      	bne.n	8005e38 <HAL_UART_Receive+0xca>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	227f      	movs	r2, #127	; 0x7f
 8005e32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e36:	e008      	b.n	8005e4a <HAL_UART_Receive+0xdc>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	223f      	movs	r2, #63	; 0x3f
 8005e3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e40:	e003      	b.n	8005e4a <HAL_UART_Receive+0xdc>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e50:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e5a:	d108      	bne.n	8005e6e <HAL_UART_Receive+0x100>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d104      	bne.n	8005e6e <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8005e64:	2300      	movs	r3, #0
 8005e66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	61bb      	str	r3, [r7, #24]
 8005e6c:	e003      	b.n	8005e76 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e72:	2300      	movs	r3, #0
 8005e74:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005e7e:	e032      	b.n	8005ee6 <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	2200      	movs	r2, #0
 8005e88:	2120      	movs	r1, #32
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 fe75 	bl	8006b7a <UART_WaitOnFlagUntilTimeout>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e031      	b.n	8005efe <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10c      	bne.n	8005eba <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	8a7b      	ldrh	r3, [r7, #18]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	3302      	adds	r3, #2
 8005eb6:	61bb      	str	r3, [r7, #24]
 8005eb8:	e00c      	b.n	8005ed4 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	8a7b      	ldrh	r3, [r7, #18]
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	3b01      	subs	r3, #1
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1c6      	bne.n	8005e80 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	e000      	b.n	8005efe <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 8005efc:	2302      	movs	r3, #2
  }
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3720      	adds	r7, #32
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
	...

08005f08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b088      	sub	sp, #32
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f28:	69fa      	ldr	r2, [r7, #28]
 8005f2a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005f2e:	4013      	ands	r3, r2
 8005f30:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d113      	bne.n	8005f60 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	f003 0320 	and.w	r3, r3, #32
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00e      	beq.n	8005f60 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	f003 0320 	and.w	r3, r3, #32
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d009      	beq.n	8005f60 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 8114 	beq.w	800617e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	4798      	blx	r3
      }
      return;
 8005f5e:	e10e      	b.n	800617e <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 80d6 	beq.w	8006114 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d105      	bne.n	8005f7e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 80cb 	beq.w	8006114 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00e      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x9e>
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d009      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2201      	movs	r2, #1
 8005f98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f9e:	f043 0201 	orr.w	r2, r3, #1
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00e      	beq.n	8005fce <HAL_UART_IRQHandler+0xc6>
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d009      	beq.n	8005fce <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fc6:	f043 0204 	orr.w	r2, r3, #4
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00e      	beq.n	8005ff6 <HAL_UART_IRQHandler+0xee>
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d009      	beq.n	8005ff6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2204      	movs	r2, #4
 8005fe8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fee:	f043 0202 	orr.w	r2, r3, #2
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	f003 0308 	and.w	r3, r3, #8
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d013      	beq.n	8006028 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	f003 0320 	and.w	r3, r3, #32
 8006006:	2b00      	cmp	r3, #0
 8006008:	d104      	bne.n	8006014 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006010:	2b00      	cmp	r3, #0
 8006012:	d009      	beq.n	8006028 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2208      	movs	r2, #8
 800601a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006020:	f043 0208 	orr.w	r2, r3, #8
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00f      	beq.n	8006052 <HAL_UART_IRQHandler+0x14a>
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00a      	beq.n	8006052 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006044:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800604a:	f043 0220 	orr.w	r2, r3, #32
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 8093 	beq.w	8006182 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	f003 0320 	and.w	r3, r3, #32
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00c      	beq.n	8006080 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	f003 0320 	and.w	r3, r3, #32
 800606c:	2b00      	cmp	r3, #0
 800606e:	d007      	beq.n	8006080 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006084:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006090:	2b40      	cmp	r3, #64	; 0x40
 8006092:	d004      	beq.n	800609e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800609a:	2b00      	cmp	r3, #0
 800609c:	d031      	beq.n	8006102 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fde6 	bl	8006c70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ae:	2b40      	cmp	r3, #64	; 0x40
 80060b0:	d123      	bne.n	80060fa <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060c0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d013      	beq.n	80060f2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060ce:	4a30      	ldr	r2, [pc, #192]	; (8006190 <HAL_UART_IRQHandler+0x288>)
 80060d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fc fa84 	bl	80025e4 <HAL_DMA_Abort_IT>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d016      	beq.n	8006110 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80060ec:	4610      	mov	r0, r2
 80060ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f0:	e00e      	b.n	8006110 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f858 	bl	80061a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f8:	e00a      	b.n	8006110 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f854 	bl	80061a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006100:	e006      	b.n	8006110 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f850 	bl	80061a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800610e:	e038      	b.n	8006182 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006110:	bf00      	nop
    return;
 8006112:	e036      	b.n	8006182 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00d      	beq.n	800613a <HAL_UART_IRQHandler+0x232>
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d008      	beq.n	800613a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006130:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f842 	bl	80061bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006138:	e026      	b.n	8006188 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00d      	beq.n	8006160 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614a:	2b00      	cmp	r3, #0
 800614c:	d008      	beq.n	8006160 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006152:	2b00      	cmp	r3, #0
 8006154:	d017      	beq.n	8006186 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	4798      	blx	r3
    }
    return;
 800615e:	e012      	b.n	8006186 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00e      	beq.n	8006188 <HAL_UART_IRQHandler+0x280>
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006170:	2b00      	cmp	r3, #0
 8006172:	d009      	beq.n	8006188 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fdb1 	bl	8006cdc <UART_EndTransmit_IT>
    return;
 800617a:	bf00      	nop
 800617c:	e004      	b.n	8006188 <HAL_UART_IRQHandler+0x280>
      return;
 800617e:	bf00      	nop
 8006180:	e002      	b.n	8006188 <HAL_UART_IRQHandler+0x280>
    return;
 8006182:	bf00      	nop
 8006184:	e000      	b.n	8006188 <HAL_UART_IRQHandler+0x280>
    return;
 8006186:	bf00      	nop
  }

}
 8006188:	3720      	adds	r7, #32
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	08006cb1 	.word	0x08006cb1

08006194 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b088      	sub	sp, #32
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80061d8:	2300      	movs	r3, #0
 80061da:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80061dc:	2300      	movs	r3, #0
 80061de:	75fb      	strb	r3, [r7, #23]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	4aaa      	ldr	r2, [pc, #680]	; (8006490 <UART_SetConfig+0x2c0>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d904      	bls.n	80061f4 <UART_SetConfig+0x24>
 80061ea:	f640 21be 	movw	r1, #2750	; 0xabe
 80061ee:	48a9      	ldr	r0, [pc, #676]	; (8006494 <UART_SetConfig+0x2c4>)
 80061f0:	f7fb f9d7 	bl	80015a2 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061fc:	d00d      	beq.n	800621a <UART_SetConfig+0x4a>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d009      	beq.n	800621a <UART_SetConfig+0x4a>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800620e:	d004      	beq.n	800621a <UART_SetConfig+0x4a>
 8006210:	f640 21bf 	movw	r1, #2751	; 0xabf
 8006214:	489f      	ldr	r0, [pc, #636]	; (8006494 <UART_SetConfig+0x2c4>)
 8006216:	f7fb f9c4 	bl	80015a2 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006222:	d012      	beq.n	800624a <UART_SetConfig+0x7a>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00e      	beq.n	800624a <UART_SetConfig+0x7a>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006234:	d009      	beq.n	800624a <UART_SetConfig+0x7a>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800623e:	d004      	beq.n	800624a <UART_SetConfig+0x7a>
 8006240:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 8006244:	4893      	ldr	r0, [pc, #588]	; (8006494 <UART_SetConfig+0x2c4>)
 8006246:	f7fb f9ac 	bl	80015a2 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d009      	beq.n	8006266 <UART_SetConfig+0x96>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800625a:	d004      	beq.n	8006266 <UART_SetConfig+0x96>
 800625c:	f640 21c1 	movw	r1, #2753	; 0xac1
 8006260:	488c      	ldr	r0, [pc, #560]	; (8006494 <UART_SetConfig+0x2c4>)
 8006262:	f7fb f99e 	bl	80015a2 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00e      	beq.n	800628c <UART_SetConfig+0xbc>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006276:	d009      	beq.n	800628c <UART_SetConfig+0xbc>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006280:	d004      	beq.n	800628c <UART_SetConfig+0xbc>
 8006282:	f640 21c3 	movw	r1, #2755	; 0xac3
 8006286:	4883      	ldr	r0, [pc, #524]	; (8006494 <UART_SetConfig+0x2c4>)
 8006288:	f7fb f98b 	bl	80015a2 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	f023 030c 	bic.w	r3, r3, #12
 8006294:	2b00      	cmp	r3, #0
 8006296:	d103      	bne.n	80062a0 <UART_SetConfig+0xd0>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d104      	bne.n	80062aa <UART_SetConfig+0xda>
 80062a0:	f640 21c4 	movw	r1, #2756	; 0xac4
 80062a4:	487b      	ldr	r0, [pc, #492]	; (8006494 <UART_SetConfig+0x2c4>)
 80062a6:	f7fb f97c 	bl	80015a2 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d013      	beq.n	80062da <UART_SetConfig+0x10a>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ba:	d00e      	beq.n	80062da <UART_SetConfig+0x10a>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062c4:	d009      	beq.n	80062da <UART_SetConfig+0x10a>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062ce:	d004      	beq.n	80062da <UART_SetConfig+0x10a>
 80062d0:	f640 21c5 	movw	r1, #2757	; 0xac5
 80062d4:	486f      	ldr	r0, [pc, #444]	; (8006494 <UART_SetConfig+0x2c4>)
 80062d6:	f7fb f964 	bl	80015a2 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d009      	beq.n	80062f6 <UART_SetConfig+0x126>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ea:	d004      	beq.n	80062f6 <UART_SetConfig+0x126>
 80062ec:	f640 21c6 	movw	r1, #2758	; 0xac6
 80062f0:	4868      	ldr	r0, [pc, #416]	; (8006494 <UART_SetConfig+0x2c4>)
 80062f2:	f7fb f956 	bl	80015a2 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	431a      	orrs	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	4313      	orrs	r3, r2
 800630c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	4b60      	ldr	r3, [pc, #384]	; (8006498 <UART_SetConfig+0x2c8>)
 8006316:	4013      	ands	r3, r2
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6812      	ldr	r2, [r2, #0]
 800631c:	6939      	ldr	r1, [r7, #16]
 800631e:	430b      	orrs	r3, r1
 8006320:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68da      	ldr	r2, [r3, #12]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	4313      	orrs	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	430a      	orrs	r2, r1
 800635a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a4e      	ldr	r2, [pc, #312]	; (800649c <UART_SetConfig+0x2cc>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d122      	bne.n	80063ac <UART_SetConfig+0x1dc>
 8006366:	4b4e      	ldr	r3, [pc, #312]	; (80064a0 <UART_SetConfig+0x2d0>)
 8006368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636c:	f003 0303 	and.w	r3, r3, #3
 8006370:	2b03      	cmp	r3, #3
 8006372:	d817      	bhi.n	80063a4 <UART_SetConfig+0x1d4>
 8006374:	a201      	add	r2, pc, #4	; (adr r2, 800637c <UART_SetConfig+0x1ac>)
 8006376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637a:	bf00      	nop
 800637c:	0800638d 	.word	0x0800638d
 8006380:	08006399 	.word	0x08006399
 8006384:	08006393 	.word	0x08006393
 8006388:	0800639f 	.word	0x0800639f
 800638c:	2301      	movs	r3, #1
 800638e:	77fb      	strb	r3, [r7, #31]
 8006390:	e14d      	b.n	800662e <UART_SetConfig+0x45e>
 8006392:	2302      	movs	r3, #2
 8006394:	77fb      	strb	r3, [r7, #31]
 8006396:	e14a      	b.n	800662e <UART_SetConfig+0x45e>
 8006398:	2304      	movs	r3, #4
 800639a:	77fb      	strb	r3, [r7, #31]
 800639c:	e147      	b.n	800662e <UART_SetConfig+0x45e>
 800639e:	2308      	movs	r3, #8
 80063a0:	77fb      	strb	r3, [r7, #31]
 80063a2:	e144      	b.n	800662e <UART_SetConfig+0x45e>
 80063a4:	2310      	movs	r3, #16
 80063a6:	77fb      	strb	r3, [r7, #31]
 80063a8:	bf00      	nop
 80063aa:	e140      	b.n	800662e <UART_SetConfig+0x45e>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a3c      	ldr	r2, [pc, #240]	; (80064a4 <UART_SetConfig+0x2d4>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d134      	bne.n	8006420 <UART_SetConfig+0x250>
 80063b6:	4b3a      	ldr	r3, [pc, #232]	; (80064a0 <UART_SetConfig+0x2d0>)
 80063b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063bc:	f003 030c 	and.w	r3, r3, #12
 80063c0:	2b0c      	cmp	r3, #12
 80063c2:	d829      	bhi.n	8006418 <UART_SetConfig+0x248>
 80063c4:	a201      	add	r2, pc, #4	; (adr r2, 80063cc <UART_SetConfig+0x1fc>)
 80063c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ca:	bf00      	nop
 80063cc:	08006401 	.word	0x08006401
 80063d0:	08006419 	.word	0x08006419
 80063d4:	08006419 	.word	0x08006419
 80063d8:	08006419 	.word	0x08006419
 80063dc:	0800640d 	.word	0x0800640d
 80063e0:	08006419 	.word	0x08006419
 80063e4:	08006419 	.word	0x08006419
 80063e8:	08006419 	.word	0x08006419
 80063ec:	08006407 	.word	0x08006407
 80063f0:	08006419 	.word	0x08006419
 80063f4:	08006419 	.word	0x08006419
 80063f8:	08006419 	.word	0x08006419
 80063fc:	08006413 	.word	0x08006413
 8006400:	2300      	movs	r3, #0
 8006402:	77fb      	strb	r3, [r7, #31]
 8006404:	e113      	b.n	800662e <UART_SetConfig+0x45e>
 8006406:	2302      	movs	r3, #2
 8006408:	77fb      	strb	r3, [r7, #31]
 800640a:	e110      	b.n	800662e <UART_SetConfig+0x45e>
 800640c:	2304      	movs	r3, #4
 800640e:	77fb      	strb	r3, [r7, #31]
 8006410:	e10d      	b.n	800662e <UART_SetConfig+0x45e>
 8006412:	2308      	movs	r3, #8
 8006414:	77fb      	strb	r3, [r7, #31]
 8006416:	e10a      	b.n	800662e <UART_SetConfig+0x45e>
 8006418:	2310      	movs	r3, #16
 800641a:	77fb      	strb	r3, [r7, #31]
 800641c:	bf00      	nop
 800641e:	e106      	b.n	800662e <UART_SetConfig+0x45e>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a20      	ldr	r2, [pc, #128]	; (80064a8 <UART_SetConfig+0x2d8>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d120      	bne.n	800646c <UART_SetConfig+0x29c>
 800642a:	4b1d      	ldr	r3, [pc, #116]	; (80064a0 <UART_SetConfig+0x2d0>)
 800642c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006430:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006434:	2b10      	cmp	r3, #16
 8006436:	d00f      	beq.n	8006458 <UART_SetConfig+0x288>
 8006438:	2b10      	cmp	r3, #16
 800643a:	d802      	bhi.n	8006442 <UART_SetConfig+0x272>
 800643c:	2b00      	cmp	r3, #0
 800643e:	d005      	beq.n	800644c <UART_SetConfig+0x27c>
 8006440:	e010      	b.n	8006464 <UART_SetConfig+0x294>
 8006442:	2b20      	cmp	r3, #32
 8006444:	d005      	beq.n	8006452 <UART_SetConfig+0x282>
 8006446:	2b30      	cmp	r3, #48	; 0x30
 8006448:	d009      	beq.n	800645e <UART_SetConfig+0x28e>
 800644a:	e00b      	b.n	8006464 <UART_SetConfig+0x294>
 800644c:	2300      	movs	r3, #0
 800644e:	77fb      	strb	r3, [r7, #31]
 8006450:	e0ed      	b.n	800662e <UART_SetConfig+0x45e>
 8006452:	2302      	movs	r3, #2
 8006454:	77fb      	strb	r3, [r7, #31]
 8006456:	e0ea      	b.n	800662e <UART_SetConfig+0x45e>
 8006458:	2304      	movs	r3, #4
 800645a:	77fb      	strb	r3, [r7, #31]
 800645c:	e0e7      	b.n	800662e <UART_SetConfig+0x45e>
 800645e:	2308      	movs	r3, #8
 8006460:	77fb      	strb	r3, [r7, #31]
 8006462:	e0e4      	b.n	800662e <UART_SetConfig+0x45e>
 8006464:	2310      	movs	r3, #16
 8006466:	77fb      	strb	r3, [r7, #31]
 8006468:	bf00      	nop
 800646a:	e0e0      	b.n	800662e <UART_SetConfig+0x45e>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a0e      	ldr	r2, [pc, #56]	; (80064ac <UART_SetConfig+0x2dc>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d131      	bne.n	80064da <UART_SetConfig+0x30a>
 8006476:	4b0a      	ldr	r3, [pc, #40]	; (80064a0 <UART_SetConfig+0x2d0>)
 8006478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006480:	2b40      	cmp	r3, #64	; 0x40
 8006482:	d020      	beq.n	80064c6 <UART_SetConfig+0x2f6>
 8006484:	2b40      	cmp	r3, #64	; 0x40
 8006486:	d813      	bhi.n	80064b0 <UART_SetConfig+0x2e0>
 8006488:	2b00      	cmp	r3, #0
 800648a:	d016      	beq.n	80064ba <UART_SetConfig+0x2ea>
 800648c:	e021      	b.n	80064d2 <UART_SetConfig+0x302>
 800648e:	bf00      	nop
 8006490:	019bfcc0 	.word	0x019bfcc0
 8006494:	08006f18 	.word	0x08006f18
 8006498:	efff69f3 	.word	0xefff69f3
 800649c:	40011000 	.word	0x40011000
 80064a0:	40023800 	.word	0x40023800
 80064a4:	40004400 	.word	0x40004400
 80064a8:	40004800 	.word	0x40004800
 80064ac:	40004c00 	.word	0x40004c00
 80064b0:	2b80      	cmp	r3, #128	; 0x80
 80064b2:	d005      	beq.n	80064c0 <UART_SetConfig+0x2f0>
 80064b4:	2bc0      	cmp	r3, #192	; 0xc0
 80064b6:	d009      	beq.n	80064cc <UART_SetConfig+0x2fc>
 80064b8:	e00b      	b.n	80064d2 <UART_SetConfig+0x302>
 80064ba:	2300      	movs	r3, #0
 80064bc:	77fb      	strb	r3, [r7, #31]
 80064be:	e0b6      	b.n	800662e <UART_SetConfig+0x45e>
 80064c0:	2302      	movs	r3, #2
 80064c2:	77fb      	strb	r3, [r7, #31]
 80064c4:	e0b3      	b.n	800662e <UART_SetConfig+0x45e>
 80064c6:	2304      	movs	r3, #4
 80064c8:	77fb      	strb	r3, [r7, #31]
 80064ca:	e0b0      	b.n	800662e <UART_SetConfig+0x45e>
 80064cc:	2308      	movs	r3, #8
 80064ce:	77fb      	strb	r3, [r7, #31]
 80064d0:	e0ad      	b.n	800662e <UART_SetConfig+0x45e>
 80064d2:	2310      	movs	r3, #16
 80064d4:	77fb      	strb	r3, [r7, #31]
 80064d6:	bf00      	nop
 80064d8:	e0a9      	b.n	800662e <UART_SetConfig+0x45e>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4aaa      	ldr	r2, [pc, #680]	; (8006788 <UART_SetConfig+0x5b8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d124      	bne.n	800652e <UART_SetConfig+0x35e>
 80064e4:	4ba9      	ldr	r3, [pc, #676]	; (800678c <UART_SetConfig+0x5bc>)
 80064e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064f2:	d012      	beq.n	800651a <UART_SetConfig+0x34a>
 80064f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064f8:	d802      	bhi.n	8006500 <UART_SetConfig+0x330>
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d007      	beq.n	800650e <UART_SetConfig+0x33e>
 80064fe:	e012      	b.n	8006526 <UART_SetConfig+0x356>
 8006500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006504:	d006      	beq.n	8006514 <UART_SetConfig+0x344>
 8006506:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800650a:	d009      	beq.n	8006520 <UART_SetConfig+0x350>
 800650c:	e00b      	b.n	8006526 <UART_SetConfig+0x356>
 800650e:	2300      	movs	r3, #0
 8006510:	77fb      	strb	r3, [r7, #31]
 8006512:	e08c      	b.n	800662e <UART_SetConfig+0x45e>
 8006514:	2302      	movs	r3, #2
 8006516:	77fb      	strb	r3, [r7, #31]
 8006518:	e089      	b.n	800662e <UART_SetConfig+0x45e>
 800651a:	2304      	movs	r3, #4
 800651c:	77fb      	strb	r3, [r7, #31]
 800651e:	e086      	b.n	800662e <UART_SetConfig+0x45e>
 8006520:	2308      	movs	r3, #8
 8006522:	77fb      	strb	r3, [r7, #31]
 8006524:	e083      	b.n	800662e <UART_SetConfig+0x45e>
 8006526:	2310      	movs	r3, #16
 8006528:	77fb      	strb	r3, [r7, #31]
 800652a:	bf00      	nop
 800652c:	e07f      	b.n	800662e <UART_SetConfig+0x45e>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a97      	ldr	r2, [pc, #604]	; (8006790 <UART_SetConfig+0x5c0>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d124      	bne.n	8006582 <UART_SetConfig+0x3b2>
 8006538:	4b94      	ldr	r3, [pc, #592]	; (800678c <UART_SetConfig+0x5bc>)
 800653a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006546:	d012      	beq.n	800656e <UART_SetConfig+0x39e>
 8006548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800654c:	d802      	bhi.n	8006554 <UART_SetConfig+0x384>
 800654e:	2b00      	cmp	r3, #0
 8006550:	d007      	beq.n	8006562 <UART_SetConfig+0x392>
 8006552:	e012      	b.n	800657a <UART_SetConfig+0x3aa>
 8006554:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006558:	d006      	beq.n	8006568 <UART_SetConfig+0x398>
 800655a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800655e:	d009      	beq.n	8006574 <UART_SetConfig+0x3a4>
 8006560:	e00b      	b.n	800657a <UART_SetConfig+0x3aa>
 8006562:	2301      	movs	r3, #1
 8006564:	77fb      	strb	r3, [r7, #31]
 8006566:	e062      	b.n	800662e <UART_SetConfig+0x45e>
 8006568:	2302      	movs	r3, #2
 800656a:	77fb      	strb	r3, [r7, #31]
 800656c:	e05f      	b.n	800662e <UART_SetConfig+0x45e>
 800656e:	2304      	movs	r3, #4
 8006570:	77fb      	strb	r3, [r7, #31]
 8006572:	e05c      	b.n	800662e <UART_SetConfig+0x45e>
 8006574:	2308      	movs	r3, #8
 8006576:	77fb      	strb	r3, [r7, #31]
 8006578:	e059      	b.n	800662e <UART_SetConfig+0x45e>
 800657a:	2310      	movs	r3, #16
 800657c:	77fb      	strb	r3, [r7, #31]
 800657e:	bf00      	nop
 8006580:	e055      	b.n	800662e <UART_SetConfig+0x45e>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a83      	ldr	r2, [pc, #524]	; (8006794 <UART_SetConfig+0x5c4>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d124      	bne.n	80065d6 <UART_SetConfig+0x406>
 800658c:	4b7f      	ldr	r3, [pc, #508]	; (800678c <UART_SetConfig+0x5bc>)
 800658e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006592:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800659a:	d012      	beq.n	80065c2 <UART_SetConfig+0x3f2>
 800659c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a0:	d802      	bhi.n	80065a8 <UART_SetConfig+0x3d8>
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d007      	beq.n	80065b6 <UART_SetConfig+0x3e6>
 80065a6:	e012      	b.n	80065ce <UART_SetConfig+0x3fe>
 80065a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ac:	d006      	beq.n	80065bc <UART_SetConfig+0x3ec>
 80065ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065b2:	d009      	beq.n	80065c8 <UART_SetConfig+0x3f8>
 80065b4:	e00b      	b.n	80065ce <UART_SetConfig+0x3fe>
 80065b6:	2300      	movs	r3, #0
 80065b8:	77fb      	strb	r3, [r7, #31]
 80065ba:	e038      	b.n	800662e <UART_SetConfig+0x45e>
 80065bc:	2302      	movs	r3, #2
 80065be:	77fb      	strb	r3, [r7, #31]
 80065c0:	e035      	b.n	800662e <UART_SetConfig+0x45e>
 80065c2:	2304      	movs	r3, #4
 80065c4:	77fb      	strb	r3, [r7, #31]
 80065c6:	e032      	b.n	800662e <UART_SetConfig+0x45e>
 80065c8:	2308      	movs	r3, #8
 80065ca:	77fb      	strb	r3, [r7, #31]
 80065cc:	e02f      	b.n	800662e <UART_SetConfig+0x45e>
 80065ce:	2310      	movs	r3, #16
 80065d0:	77fb      	strb	r3, [r7, #31]
 80065d2:	bf00      	nop
 80065d4:	e02b      	b.n	800662e <UART_SetConfig+0x45e>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a6f      	ldr	r2, [pc, #444]	; (8006798 <UART_SetConfig+0x5c8>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d124      	bne.n	800662a <UART_SetConfig+0x45a>
 80065e0:	4b6a      	ldr	r3, [pc, #424]	; (800678c <UART_SetConfig+0x5bc>)
 80065e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80065ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065ee:	d012      	beq.n	8006616 <UART_SetConfig+0x446>
 80065f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065f4:	d802      	bhi.n	80065fc <UART_SetConfig+0x42c>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d007      	beq.n	800660a <UART_SetConfig+0x43a>
 80065fa:	e012      	b.n	8006622 <UART_SetConfig+0x452>
 80065fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006600:	d006      	beq.n	8006610 <UART_SetConfig+0x440>
 8006602:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006606:	d009      	beq.n	800661c <UART_SetConfig+0x44c>
 8006608:	e00b      	b.n	8006622 <UART_SetConfig+0x452>
 800660a:	2300      	movs	r3, #0
 800660c:	77fb      	strb	r3, [r7, #31]
 800660e:	e00e      	b.n	800662e <UART_SetConfig+0x45e>
 8006610:	2302      	movs	r3, #2
 8006612:	77fb      	strb	r3, [r7, #31]
 8006614:	e00b      	b.n	800662e <UART_SetConfig+0x45e>
 8006616:	2304      	movs	r3, #4
 8006618:	77fb      	strb	r3, [r7, #31]
 800661a:	e008      	b.n	800662e <UART_SetConfig+0x45e>
 800661c:	2308      	movs	r3, #8
 800661e:	77fb      	strb	r3, [r7, #31]
 8006620:	e005      	b.n	800662e <UART_SetConfig+0x45e>
 8006622:	2310      	movs	r3, #16
 8006624:	77fb      	strb	r3, [r7, #31]
 8006626:	bf00      	nop
 8006628:	e001      	b.n	800662e <UART_SetConfig+0x45e>
 800662a:	2310      	movs	r3, #16
 800662c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006636:	d17f      	bne.n	8006738 <UART_SetConfig+0x568>
  {
    switch (clocksource)
 8006638:	7ffb      	ldrb	r3, [r7, #31]
 800663a:	2b08      	cmp	r3, #8
 800663c:	d85c      	bhi.n	80066f8 <UART_SetConfig+0x528>
 800663e:	a201      	add	r2, pc, #4	; (adr r2, 8006644 <UART_SetConfig+0x474>)
 8006640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006644:	08006669 	.word	0x08006669
 8006648:	08006689 	.word	0x08006689
 800664c:	080066a9 	.word	0x080066a9
 8006650:	080066f9 	.word	0x080066f9
 8006654:	080066c1 	.word	0x080066c1
 8006658:	080066f9 	.word	0x080066f9
 800665c:	080066f9 	.word	0x080066f9
 8006660:	080066f9 	.word	0x080066f9
 8006664:	080066e1 	.word	0x080066e1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006668:	f7fd fa24 	bl	8003ab4 <HAL_RCC_GetPCLK1Freq>
 800666c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	005a      	lsls	r2, r3, #1
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	085b      	lsrs	r3, r3, #1
 8006678:	441a      	add	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006682:	b29b      	uxth	r3, r3
 8006684:	61bb      	str	r3, [r7, #24]
        break;
 8006686:	e03a      	b.n	80066fe <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006688:	f7fd fa28 	bl	8003adc <HAL_RCC_GetPCLK2Freq>
 800668c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	005a      	lsls	r2, r3, #1
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	085b      	lsrs	r3, r3, #1
 8006698:	441a      	add	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	61bb      	str	r3, [r7, #24]
        break;
 80066a6:	e02a      	b.n	80066fe <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	085a      	lsrs	r2, r3, #1
 80066ae:	4b3b      	ldr	r3, [pc, #236]	; (800679c <UART_SetConfig+0x5cc>)
 80066b0:	4413      	add	r3, r2
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	6852      	ldr	r2, [r2, #4]
 80066b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	61bb      	str	r3, [r7, #24]
        break;
 80066be:	e01e      	b.n	80066fe <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066c0:	f7fd f93a 	bl	8003938 <HAL_RCC_GetSysClockFreq>
 80066c4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	005a      	lsls	r2, r3, #1
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	085b      	lsrs	r3, r3, #1
 80066d0:	441a      	add	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066da:	b29b      	uxth	r3, r3
 80066dc:	61bb      	str	r3, [r7, #24]
        break;
 80066de:	e00e      	b.n	80066fe <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	085b      	lsrs	r3, r3, #1
 80066e6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	61bb      	str	r3, [r7, #24]
        break;
 80066f6:	e002      	b.n	80066fe <UART_SetConfig+0x52e>
      default:
        ret = HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	75fb      	strb	r3, [r7, #23]
        break;
 80066fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	2b0f      	cmp	r3, #15
 8006702:	d916      	bls.n	8006732 <UART_SetConfig+0x562>
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800670a:	d212      	bcs.n	8006732 <UART_SetConfig+0x562>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	b29b      	uxth	r3, r3
 8006710:	f023 030f 	bic.w	r3, r3, #15
 8006714:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	085b      	lsrs	r3, r3, #1
 800671a:	b29b      	uxth	r3, r3
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	b29a      	uxth	r2, r3
 8006722:	897b      	ldrh	r3, [r7, #10]
 8006724:	4313      	orrs	r3, r2
 8006726:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	897a      	ldrh	r2, [r7, #10]
 800672e:	60da      	str	r2, [r3, #12]
 8006730:	e07d      	b.n	800682e <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	75fb      	strb	r3, [r7, #23]
 8006736:	e07a      	b.n	800682e <UART_SetConfig+0x65e>
    }
  }
  else
  {
    switch (clocksource)
 8006738:	7ffb      	ldrb	r3, [r7, #31]
 800673a:	2b08      	cmp	r3, #8
 800673c:	d866      	bhi.n	800680c <UART_SetConfig+0x63c>
 800673e:	a201      	add	r2, pc, #4	; (adr r2, 8006744 <UART_SetConfig+0x574>)
 8006740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006744:	08006769 	.word	0x08006769
 8006748:	080067a1 	.word	0x080067a1
 800674c:	080067bf 	.word	0x080067bf
 8006750:	0800680d 	.word	0x0800680d
 8006754:	080067d7 	.word	0x080067d7
 8006758:	0800680d 	.word	0x0800680d
 800675c:	0800680d 	.word	0x0800680d
 8006760:	0800680d 	.word	0x0800680d
 8006764:	080067f5 	.word	0x080067f5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006768:	f7fd f9a4 	bl	8003ab4 <HAL_RCC_GetPCLK1Freq>
 800676c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	085a      	lsrs	r2, r3, #1
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	441a      	add	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006780:	b29b      	uxth	r3, r3
 8006782:	61bb      	str	r3, [r7, #24]
        break;
 8006784:	e045      	b.n	8006812 <UART_SetConfig+0x642>
 8006786:	bf00      	nop
 8006788:	40005000 	.word	0x40005000
 800678c:	40023800 	.word	0x40023800
 8006790:	40011400 	.word	0x40011400
 8006794:	40007800 	.word	0x40007800
 8006798:	40007c00 	.word	0x40007c00
 800679c:	01e84800 	.word	0x01e84800
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067a0:	f7fd f99c 	bl	8003adc <HAL_RCC_GetPCLK2Freq>
 80067a4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	085a      	lsrs	r2, r3, #1
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	441a      	add	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	61bb      	str	r3, [r7, #24]
        break;
 80067bc:	e029      	b.n	8006812 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	085a      	lsrs	r2, r3, #1
 80067c4:	4b1f      	ldr	r3, [pc, #124]	; (8006844 <UART_SetConfig+0x674>)
 80067c6:	4413      	add	r3, r2
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	6852      	ldr	r2, [r2, #4]
 80067cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	61bb      	str	r3, [r7, #24]
        break;
 80067d4:	e01d      	b.n	8006812 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067d6:	f7fd f8af 	bl	8003938 <HAL_RCC_GetSysClockFreq>
 80067da:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	085a      	lsrs	r2, r3, #1
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	441a      	add	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	61bb      	str	r3, [r7, #24]
        break;
 80067f2:	e00e      	b.n	8006812 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	085b      	lsrs	r3, r3, #1
 80067fa:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	fbb2 f3f3 	udiv	r3, r2, r3
 8006806:	b29b      	uxth	r3, r3
 8006808:	61bb      	str	r3, [r7, #24]
        break;
 800680a:	e002      	b.n	8006812 <UART_SetConfig+0x642>
      default:
        ret = HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	75fb      	strb	r3, [r7, #23]
        break;
 8006810:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	2b0f      	cmp	r3, #15
 8006816:	d908      	bls.n	800682a <UART_SetConfig+0x65a>
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800681e:	d204      	bcs.n	800682a <UART_SetConfig+0x65a>
    {
      huart->Instance->BRR = usartdiv;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	60da      	str	r2, [r3, #12]
 8006828:	e001      	b.n	800682e <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800683a:	7dfb      	ldrb	r3, [r7, #23]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3720      	adds	r7, #32
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	00f42400 	.word	0x00f42400

08006848 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	2bff      	cmp	r3, #255	; 0xff
 8006856:	d904      	bls.n	8006862 <UART_AdvFeatureConfig+0x1a>
 8006858:	f640 3143 	movw	r1, #2883	; 0xb43
 800685c:	489f      	ldr	r0, [pc, #636]	; (8006adc <UART_AdvFeatureConfig+0x294>)
 800685e:	f7fa fea0 	bl	80015a2 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b00      	cmp	r3, #0
 800686c:	d018      	beq.n	80068a0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006872:	2b00      	cmp	r3, #0
 8006874:	d009      	beq.n	800688a <UART_AdvFeatureConfig+0x42>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800687e:	d004      	beq.n	800688a <UART_AdvFeatureConfig+0x42>
 8006880:	f640 3148 	movw	r1, #2888	; 0xb48
 8006884:	4895      	ldr	r0, [pc, #596]	; (8006adc <UART_AdvFeatureConfig+0x294>)
 8006886:	f7fa fe8c 	bl	80015a2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	430a      	orrs	r2, r1
 800689e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	f003 0302 	and.w	r3, r3, #2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d018      	beq.n	80068de <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d009      	beq.n	80068c8 <UART_AdvFeatureConfig+0x80>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068bc:	d004      	beq.n	80068c8 <UART_AdvFeatureConfig+0x80>
 80068be:	f640 314f 	movw	r1, #2895	; 0xb4f
 80068c2:	4886      	ldr	r0, [pc, #536]	; (8006adc <UART_AdvFeatureConfig+0x294>)
 80068c4:	f7fa fe6d 	bl	80015a2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e2:	f003 0304 	and.w	r3, r3, #4
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d018      	beq.n	800691c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d009      	beq.n	8006906 <UART_AdvFeatureConfig+0xbe>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068fa:	d004      	beq.n	8006906 <UART_AdvFeatureConfig+0xbe>
 80068fc:	f640 3156 	movw	r1, #2902	; 0xb56
 8006900:	4876      	ldr	r0, [pc, #472]	; (8006adc <UART_AdvFeatureConfig+0x294>)
 8006902:	f7fa fe4e 	bl	80015a2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	430a      	orrs	r2, r1
 800691a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006920:	f003 0308 	and.w	r3, r3, #8
 8006924:	2b00      	cmp	r3, #0
 8006926:	d018      	beq.n	800695a <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800692c:	2b00      	cmp	r3, #0
 800692e:	d009      	beq.n	8006944 <UART_AdvFeatureConfig+0xfc>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006938:	d004      	beq.n	8006944 <UART_AdvFeatureConfig+0xfc>
 800693a:	f640 315d 	movw	r1, #2909	; 0xb5d
 800693e:	4867      	ldr	r0, [pc, #412]	; (8006adc <UART_AdvFeatureConfig+0x294>)
 8006940:	f7fa fe2f 	bl	80015a2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	f003 0310 	and.w	r3, r3, #16
 8006962:	2b00      	cmp	r3, #0
 8006964:	d018      	beq.n	8006998 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696a:	2b00      	cmp	r3, #0
 800696c:	d009      	beq.n	8006982 <UART_AdvFeatureConfig+0x13a>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006976:	d004      	beq.n	8006982 <UART_AdvFeatureConfig+0x13a>
 8006978:	f640 3164 	movw	r1, #2916	; 0xb64
 800697c:	4857      	ldr	r0, [pc, #348]	; (8006adc <UART_AdvFeatureConfig+0x294>)
 800697e:	f7fa fe10 	bl	80015a2 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	430a      	orrs	r2, r1
 8006996:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699c:	f003 0320 	and.w	r3, r3, #32
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d018      	beq.n	80069d6 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d009      	beq.n	80069c0 <UART_AdvFeatureConfig+0x178>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069b4:	d004      	beq.n	80069c0 <UART_AdvFeatureConfig+0x178>
 80069b6:	f640 316b 	movw	r1, #2923	; 0xb6b
 80069ba:	4848      	ldr	r0, [pc, #288]	; (8006adc <UART_AdvFeatureConfig+0x294>)
 80069bc:	f7fa fdf1 	bl	80015a2 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d059      	beq.n	8006a96 <UART_AdvFeatureConfig+0x24e>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a3e      	ldr	r2, [pc, #248]	; (8006ae0 <UART_AdvFeatureConfig+0x298>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d013      	beq.n	8006a14 <UART_AdvFeatureConfig+0x1cc>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a3c      	ldr	r2, [pc, #240]	; (8006ae4 <UART_AdvFeatureConfig+0x29c>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d00e      	beq.n	8006a14 <UART_AdvFeatureConfig+0x1cc>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a3b      	ldr	r2, [pc, #236]	; (8006ae8 <UART_AdvFeatureConfig+0x2a0>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d009      	beq.n	8006a14 <UART_AdvFeatureConfig+0x1cc>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a39      	ldr	r2, [pc, #228]	; (8006aec <UART_AdvFeatureConfig+0x2a4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d004      	beq.n	8006a14 <UART_AdvFeatureConfig+0x1cc>
 8006a0a:	f640 3172 	movw	r1, #2930	; 0xb72
 8006a0e:	4833      	ldr	r0, [pc, #204]	; (8006adc <UART_AdvFeatureConfig+0x294>)
 8006a10:	f7fa fdc7 	bl	80015a2 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d009      	beq.n	8006a30 <UART_AdvFeatureConfig+0x1e8>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a24:	d004      	beq.n	8006a30 <UART_AdvFeatureConfig+0x1e8>
 8006a26:	f640 3173 	movw	r1, #2931	; 0xb73
 8006a2a:	482c      	ldr	r0, [pc, #176]	; (8006adc <UART_AdvFeatureConfig+0x294>)
 8006a2c:	f7fa fdb9 	bl	80015a2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a4e:	d122      	bne.n	8006a96 <UART_AdvFeatureConfig+0x24e>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d013      	beq.n	8006a80 <UART_AdvFeatureConfig+0x238>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a60:	d00e      	beq.n	8006a80 <UART_AdvFeatureConfig+0x238>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a6a:	d009      	beq.n	8006a80 <UART_AdvFeatureConfig+0x238>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a70:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006a74:	d004      	beq.n	8006a80 <UART_AdvFeatureConfig+0x238>
 8006a76:	f640 3178 	movw	r1, #2936	; 0xb78
 8006a7a:	4818      	ldr	r0, [pc, #96]	; (8006adc <UART_AdvFeatureConfig+0x294>)
 8006a7c:	f7fa fd91 	bl	80015a2 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d018      	beq.n	8006ad4 <UART_AdvFeatureConfig+0x28c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d009      	beq.n	8006abe <UART_AdvFeatureConfig+0x276>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006ab2:	d004      	beq.n	8006abe <UART_AdvFeatureConfig+0x276>
 8006ab4:	f44f 6138 	mov.w	r1, #2944	; 0xb80
 8006ab8:	4808      	ldr	r0, [pc, #32]	; (8006adc <UART_AdvFeatureConfig+0x294>)
 8006aba:	f7fa fd72 	bl	80015a2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	605a      	str	r2, [r3, #4]
  }
}
 8006ad4:	bf00      	nop
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	08006f18 	.word	0x08006f18
 8006ae0:	40011000 	.word	0x40011000
 8006ae4:	40004400 	.word	0x40004400
 8006ae8:	40004800 	.word	0x40004800
 8006aec:	40011400 	.word	0x40011400

08006af0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af02      	add	r7, sp, #8
 8006af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006afe:	f7fb fab3 	bl	8002068 <HAL_GetTick>
 8006b02:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0308 	and.w	r3, r3, #8
 8006b0e:	2b08      	cmp	r3, #8
 8006b10:	d10e      	bne.n	8006b30 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f82a 	bl	8006b7a <UART_WaitOnFlagUntilTimeout>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e020      	b.n	8006b72 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0304 	and.w	r3, r3, #4
 8006b3a:	2b04      	cmp	r3, #4
 8006b3c:	d10e      	bne.n	8006b5c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f814 	bl	8006b7a <UART_WaitOnFlagUntilTimeout>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d001      	beq.n	8006b5c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e00a      	b.n	8006b72 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2220      	movs	r2, #32
 8006b66:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b084      	sub	sp, #16
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	60f8      	str	r0, [r7, #12]
 8006b82:	60b9      	str	r1, [r7, #8]
 8006b84:	603b      	str	r3, [r7, #0]
 8006b86:	4613      	mov	r3, r2
 8006b88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b8a:	e05d      	b.n	8006c48 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b92:	d059      	beq.n	8006c48 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b94:	f7fb fa68 	bl	8002068 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d302      	bcc.n	8006baa <UART_WaitOnFlagUntilTimeout+0x30>
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d11b      	bne.n	8006be2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006bb8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689a      	ldr	r2, [r3, #8]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 0201 	bic.w	r2, r2, #1
 8006bc8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e042      	b.n	8006c68 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0304 	and.w	r3, r3, #4
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d02b      	beq.n	8006c48 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bfe:	d123      	bne.n	8006c48 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c08:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c18:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 0201 	bic.w	r2, r2, #1
 8006c28:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2220      	movs	r2, #32
 8006c34:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e00f      	b.n	8006c68 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	69da      	ldr	r2, [r3, #28]
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	4013      	ands	r3, r2
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	bf0c      	ite	eq
 8006c58:	2301      	moveq	r3, #1
 8006c5a:	2300      	movne	r3, #0
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	461a      	mov	r2, r3
 8006c60:	79fb      	ldrb	r3, [r7, #7]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d092      	beq.n	8006b8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c86:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689a      	ldr	r2, [r3, #8]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 0201 	bic.w	r2, r2, #1
 8006c96:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f7ff fa6a 	bl	80061a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cd4:	bf00      	nop
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cf2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7ff fa47 	bl	8006194 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d06:	bf00      	nop
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
	...

08006d10 <__libc_init_array>:
 8006d10:	b570      	push	{r4, r5, r6, lr}
 8006d12:	4e0d      	ldr	r6, [pc, #52]	; (8006d48 <__libc_init_array+0x38>)
 8006d14:	4c0d      	ldr	r4, [pc, #52]	; (8006d4c <__libc_init_array+0x3c>)
 8006d16:	1ba4      	subs	r4, r4, r6
 8006d18:	10a4      	asrs	r4, r4, #2
 8006d1a:	2500      	movs	r5, #0
 8006d1c:	42a5      	cmp	r5, r4
 8006d1e:	d109      	bne.n	8006d34 <__libc_init_array+0x24>
 8006d20:	4e0b      	ldr	r6, [pc, #44]	; (8006d50 <__libc_init_array+0x40>)
 8006d22:	4c0c      	ldr	r4, [pc, #48]	; (8006d54 <__libc_init_array+0x44>)
 8006d24:	f000 f820 	bl	8006d68 <_init>
 8006d28:	1ba4      	subs	r4, r4, r6
 8006d2a:	10a4      	asrs	r4, r4, #2
 8006d2c:	2500      	movs	r5, #0
 8006d2e:	42a5      	cmp	r5, r4
 8006d30:	d105      	bne.n	8006d3e <__libc_init_array+0x2e>
 8006d32:	bd70      	pop	{r4, r5, r6, pc}
 8006d34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d38:	4798      	blx	r3
 8006d3a:	3501      	adds	r5, #1
 8006d3c:	e7ee      	b.n	8006d1c <__libc_init_array+0xc>
 8006d3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d42:	4798      	blx	r3
 8006d44:	3501      	adds	r5, #1
 8006d46:	e7f2      	b.n	8006d2e <__libc_init_array+0x1e>
 8006d48:	08006f74 	.word	0x08006f74
 8006d4c:	08006f74 	.word	0x08006f74
 8006d50:	08006f74 	.word	0x08006f74
 8006d54:	08006f78 	.word	0x08006f78

08006d58 <memset>:
 8006d58:	4402      	add	r2, r0
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d100      	bne.n	8006d62 <memset+0xa>
 8006d60:	4770      	bx	lr
 8006d62:	f803 1b01 	strb.w	r1, [r3], #1
 8006d66:	e7f9      	b.n	8006d5c <memset+0x4>

08006d68 <_init>:
 8006d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6a:	bf00      	nop
 8006d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6e:	bc08      	pop	{r3}
 8006d70:	469e      	mov	lr, r3
 8006d72:	4770      	bx	lr

08006d74 <_fini>:
 8006d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d76:	bf00      	nop
 8006d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d7a:	bc08      	pop	{r3}
 8006d7c:	469e      	mov	lr, r3
 8006d7e:	4770      	bx	lr
