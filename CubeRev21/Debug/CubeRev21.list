
CubeRev21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000827c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0800847c  0800847c  0001847c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008854  08008854  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008854  08008854  00018854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800885c  0800885c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800885c  0800885c  0001885c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008860  08008860  00018860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  20000070  080088d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  080088d4  00020460  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e30  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a90  00000000  00000000  00030ece  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d50  00000000  00000000  00033960  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  000346b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f08a  00000000  00000000  00035278  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f7fa  00000000  00000000  00064302  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011814d  00000000  00000000  00073afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018bc49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036e4  00000000  00000000  0018bcc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08008464 	.word	0x08008464

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08008464 	.word	0x08008464

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <FastMemoryTest>:

/**
 * Performes a fast memory test, just writes one page and reads it
 *
 */
uint32_t FastMemoryTest(UART_HandleTypeDef huart) {
 80005f0:	b084      	sub	sp, #16
 80005f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005f4:	b0d3      	sub	sp, #332	; 0x14c
 80005f6:	af02      	add	r7, sp, #8
 80005f8:	f507 74ac 	add.w	r4, r7, #344	; 0x158
 80005fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	char writeBuffer[256] = "Starting FLASH Test...\r\n";
 8000600:	f107 0630 	add.w	r6, r7, #48	; 0x30
 8000604:	4bdb      	ldr	r3, [pc, #876]	; (8000974 <FastMemoryTest+0x384>)
 8000606:	4634      	mov	r4, r6
 8000608:	461d      	mov	r5, r3
 800060a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000612:	c403      	stmia	r4!, {r0, r1}
 8000614:	7022      	strb	r2, [r4, #0]
 8000616:	f106 0319 	add.w	r3, r6, #25
 800061a:	22e7      	movs	r2, #231	; 0xe7
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f007 fb1b 	bl	8007c5a <memset>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 8000624:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fe09 	bl	8000240 <strlen>
 800062e:	4603      	mov	r3, r0
 8000630:	b29a      	uxth	r2, r3
 8000632:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800063e:	f006 fa75 	bl	8006b2c <HAL_UART_Transmit>

	SPI_Values DUT0;
	DUT0.CS_Pin = FL2_CS1_Pin;
 8000642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000646:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800064a:	809a      	strh	r2, [r3, #4]
	DUT0.CS_Port = FL2_CS1_GPIO_Port;
 800064c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000650:	4ac9      	ldr	r2, [pc, #804]	; (8000978 <FastMemoryTest+0x388>)
 8000652:	609a      	str	r2, [r3, #8]
	DUT0.spihandle = &hspi2;
 8000654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000658:	4ac8      	ldr	r2, [pc, #800]	; (800097c <FastMemoryTest+0x38c>)
 800065a:	601a      	str	r2, [r3, #0]
	//
	SPI_Values DUT1;
	DUT1.CS_Pin = FL2_CS2_Pin;
 800065c:	f107 0318 	add.w	r3, r7, #24
 8000660:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000664:	809a      	strh	r2, [r3, #4]
	DUT1.CS_Port = FL2_CS2_GPIO_Port;
 8000666:	f107 0318 	add.w	r3, r7, #24
 800066a:	4ac3      	ldr	r2, [pc, #780]	; (8000978 <FastMemoryTest+0x388>)
 800066c:	609a      	str	r2, [r3, #8]
	DUT1.spihandle = &hspi2;
 800066e:	f107 0318 	add.w	r3, r7, #24
 8000672:	4ac2      	ldr	r2, [pc, #776]	; (800097c <FastMemoryTest+0x38c>)
 8000674:	601a      	str	r2, [r3, #0]
	//
	SPI_Values DUT2;
	DUT2.CS_Pin = FL1_CS1_Pin;
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800067e:	809a      	strh	r2, [r3, #4]
	DUT2.CS_Port = FL1_CS1_GPIO_Port;
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	4abe      	ldr	r2, [pc, #760]	; (8000980 <FastMemoryTest+0x390>)
 8000686:	609a      	str	r2, [r3, #8]
	DUT2.spihandle = &hspi6;
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	4abd      	ldr	r2, [pc, #756]	; (8000984 <FastMemoryTest+0x394>)
 800068e:	601a      	str	r2, [r3, #0]
	//
	SPI_Values DUT3;
	DUT3.CS_Pin = FL1_CS2_Pin;
 8000690:	463b      	mov	r3, r7
 8000692:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000696:	809a      	strh	r2, [r3, #4]
	DUT3.CS_Port = FL1_CS2_GPIO_Port;
 8000698:	463b      	mov	r3, r7
 800069a:	4abb      	ldr	r2, [pc, #748]	; (8000988 <FastMemoryTest+0x398>)
 800069c:	609a      	str	r2, [r3, #8]
	DUT3.spihandle = &hspi6;
 800069e:	463b      	mov	r3, r7
 80006a0:	4ab8      	ldr	r2, [pc, #736]	; (8000984 <FastMemoryTest+0x394>)
 80006a2:	601a      	str	r2, [r3, #0]


	uint32_t result = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	uint32_t startTime = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint32_t endTime = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	uint32_t kbits = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	sprintf(writeBuffer, "\t%s\n\r\0", "Checking FL2/1");
 80006bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006c0:	4ab2      	ldr	r2, [pc, #712]	; (800098c <FastMemoryTest+0x39c>)
 80006c2:	49b3      	ldr	r1, [pc, #716]	; (8000990 <FastMemoryTest+0x3a0>)
 80006c4:	4618      	mov	r0, r3
 80006c6:	f007 fad1 	bl	8007c6c <siprintf>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 80006ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fdb6 	bl	8000240 <strlen>
 80006d4:	4603      	mov	r3, r0
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80006dc:	f04f 33ff 	mov.w	r3, #4294967295
 80006e0:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 80006e4:	f006 fa22 	bl	8006b2c <HAL_UART_Transmit>
	startTime = HAL_GetTick();
 80006e8:	f002 f9aa 	bl	8002a40 <HAL_GetTick>
 80006ec:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	result = FastTest(DUT0);
 80006f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80006f8:	f000 f958 	bl	80009ac <FastTest>
 80006fc:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	endTime = HAL_GetTick() - startTime;
 8000700:	f002 f99e 	bl	8002a40 <HAL_GetTick>
 8000704:	4602      	mov	r2, r0
 8000706:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	kbits = ((256*8) / endTime);
 8000710:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000714:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000718:	fbb2 f3f3 	udiv	r3, r2, r3
 800071c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	sprintf(writeBuffer, "\t\tResult: %s, took %dms\r\n\t\t%d kbit/s\r\n\0", result == 1 ? "Passed" : "Failed", endTime, kbits);
 8000720:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000724:	2b01      	cmp	r3, #1
 8000726:	d101      	bne.n	800072c <FastMemoryTest+0x13c>
 8000728:	4a9a      	ldr	r2, [pc, #616]	; (8000994 <FastMemoryTest+0x3a4>)
 800072a:	e000      	b.n	800072e <FastMemoryTest+0x13e>
 800072c:	4a9a      	ldr	r2, [pc, #616]	; (8000998 <FastMemoryTest+0x3a8>)
 800072e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000732:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800073c:	4997      	ldr	r1, [pc, #604]	; (800099c <FastMemoryTest+0x3ac>)
 800073e:	f007 fa95 	bl	8007c6c <siprintf>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 8000742:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fd7a 	bl	8000240 <strlen>
 800074c:	4603      	mov	r3, r0
 800074e:	b29a      	uxth	r2, r3
 8000750:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000754:	f04f 33ff 	mov.w	r3, #4294967295
 8000758:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800075c:	f006 f9e6 	bl	8006b2c <HAL_UART_Transmit>
	HAL_Delay(50);
 8000760:	2032      	movs	r0, #50	; 0x32
 8000762:	f002 f979 	bl	8002a58 <HAL_Delay>


	sprintf(writeBuffer, "\t%s\n\r\0", "Checking FL2/2");
 8000766:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800076a:	4a8d      	ldr	r2, [pc, #564]	; (80009a0 <FastMemoryTest+0x3b0>)
 800076c:	4988      	ldr	r1, [pc, #544]	; (8000990 <FastMemoryTest+0x3a0>)
 800076e:	4618      	mov	r0, r3
 8000770:	f007 fa7c 	bl	8007c6c <siprintf>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 8000774:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fd61 	bl	8000240 <strlen>
 800077e:	4603      	mov	r3, r0
 8000780:	b29a      	uxth	r2, r3
 8000782:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800078e:	f006 f9cd 	bl	8006b2c <HAL_UART_Transmit>
	startTime = HAL_GetTick();
 8000792:	f002 f955 	bl	8002a40 <HAL_GetTick>
 8000796:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	result = FastTest(DUT1);
 800079a:	f107 0318 	add.w	r3, r7, #24
 800079e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80007a2:	f000 f903 	bl	80009ac <FastTest>
 80007a6:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	endTime = HAL_GetTick() - startTime;
 80007aa:	f002 f949 	bl	8002a40 <HAL_GetTick>
 80007ae:	4602      	mov	r2, r0
 80007b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	kbits = ((256*8) / endTime);
 80007ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	sprintf(writeBuffer, "\t\tResult: %s, took %dms\r\n\t\t%d kbit/s\r\n\0", result == 1 ? "Passed" : "Failed", endTime, kbits);
 80007ca:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d101      	bne.n	80007d6 <FastMemoryTest+0x1e6>
 80007d2:	4a70      	ldr	r2, [pc, #448]	; (8000994 <FastMemoryTest+0x3a4>)
 80007d4:	e000      	b.n	80007d8 <FastMemoryTest+0x1e8>
 80007d6:	4a70      	ldr	r2, [pc, #448]	; (8000998 <FastMemoryTest+0x3a8>)
 80007d8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80007dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007e6:	496d      	ldr	r1, [pc, #436]	; (800099c <FastMemoryTest+0x3ac>)
 80007e8:	f007 fa40 	bl	8007c6c <siprintf>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 80007ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fd25 	bl	8000240 <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8000806:	f006 f991 	bl	8006b2c <HAL_UART_Transmit>
	HAL_Delay(50);
 800080a:	2032      	movs	r0, #50	; 0x32
 800080c:	f002 f924 	bl	8002a58 <HAL_Delay>


	sprintf(writeBuffer, "\t%s\n\r\0", "Checking FL1/1");
 8000810:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000814:	4a63      	ldr	r2, [pc, #396]	; (80009a4 <FastMemoryTest+0x3b4>)
 8000816:	495e      	ldr	r1, [pc, #376]	; (8000990 <FastMemoryTest+0x3a0>)
 8000818:	4618      	mov	r0, r3
 800081a:	f007 fa27 	bl	8007c6c <siprintf>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 800081e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff fd0c 	bl	8000240 <strlen>
 8000828:	4603      	mov	r3, r0
 800082a:	b29a      	uxth	r2, r3
 800082c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000830:	f04f 33ff 	mov.w	r3, #4294967295
 8000834:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8000838:	f006 f978 	bl	8006b2c <HAL_UART_Transmit>
	startTime = HAL_GetTick();
 800083c:	f002 f900 	bl	8002a40 <HAL_GetTick>
 8000840:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	result = FastTest(DUT2);
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800084c:	f000 f8ae 	bl	80009ac <FastTest>
 8000850:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	endTime = HAL_GetTick() - startTime;
 8000854:	f002 f8f4 	bl	8002a40 <HAL_GetTick>
 8000858:	4602      	mov	r2, r0
 800085a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	kbits = ((256*8) / endTime);
 8000864:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000868:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800086c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000870:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	sprintf(writeBuffer, "\t\tResult: %s, took %dms\r\n\t\t%d kbit/s\r\n\0", result == 1 ? "Passed" : "Failed", endTime, kbits);
 8000874:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000878:	2b01      	cmp	r3, #1
 800087a:	d101      	bne.n	8000880 <FastMemoryTest+0x290>
 800087c:	4a45      	ldr	r2, [pc, #276]	; (8000994 <FastMemoryTest+0x3a4>)
 800087e:	e000      	b.n	8000882 <FastMemoryTest+0x292>
 8000880:	4a45      	ldr	r2, [pc, #276]	; (8000998 <FastMemoryTest+0x3a8>)
 8000882:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000886:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000890:	4942      	ldr	r1, [pc, #264]	; (800099c <FastMemoryTest+0x3ac>)
 8000892:	f007 f9eb 	bl	8007c6c <siprintf>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 8000896:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fcd0 	bl	8000240 <strlen>
 80008a0:	4603      	mov	r3, r0
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80008a8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ac:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 80008b0:	f006 f93c 	bl	8006b2c <HAL_UART_Transmit>
	HAL_Delay(50);
 80008b4:	2032      	movs	r0, #50	; 0x32
 80008b6:	f002 f8cf 	bl	8002a58 <HAL_Delay>


	sprintf(writeBuffer, "\t%s\n\r\0", "Checking FL1/2");
 80008ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008be:	4a3a      	ldr	r2, [pc, #232]	; (80009a8 <FastMemoryTest+0x3b8>)
 80008c0:	4933      	ldr	r1, [pc, #204]	; (8000990 <FastMemoryTest+0x3a0>)
 80008c2:	4618      	mov	r0, r3
 80008c4:	f007 f9d2 	bl	8007c6c <siprintf>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 80008c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fcb7 	bl	8000240 <strlen>
 80008d2:	4603      	mov	r3, r0
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
 80008de:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 80008e2:	f006 f923 	bl	8006b2c <HAL_UART_Transmit>
	startTime = HAL_GetTick();
 80008e6:	f002 f8ab 	bl	8002a40 <HAL_GetTick>
 80008ea:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	result = FastTest(DUT3);
 80008ee:	463b      	mov	r3, r7
 80008f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80008f4:	f000 f85a 	bl	80009ac <FastTest>
 80008f8:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	endTime = HAL_GetTick() - startTime;
 80008fc:	f002 f8a0 	bl	8002a40 <HAL_GetTick>
 8000900:	4602      	mov	r2, r0
 8000902:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	kbits = ((256*8) / endTime);
 800090c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000910:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000914:	fbb2 f3f3 	udiv	r3, r2, r3
 8000918:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	sprintf(writeBuffer, "\t\tResult: %s, took %dms\r\n\t\t%d kbit/s\r\n\0", result == 1 ? "Passed" : "Failed", endTime, kbits);
 800091c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000920:	2b01      	cmp	r3, #1
 8000922:	d101      	bne.n	8000928 <FastMemoryTest+0x338>
 8000924:	4a1b      	ldr	r2, [pc, #108]	; (8000994 <FastMemoryTest+0x3a4>)
 8000926:	e000      	b.n	800092a <FastMemoryTest+0x33a>
 8000928:	4a1b      	ldr	r2, [pc, #108]	; (8000998 <FastMemoryTest+0x3a8>)
 800092a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800092e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000938:	4918      	ldr	r1, [pc, #96]	; (800099c <FastMemoryTest+0x3ac>)
 800093a:	f007 f997 	bl	8007c6c <siprintf>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 800093e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fc7c 	bl	8000240 <strlen>
 8000948:	4603      	mov	r3, r0
 800094a:	b29a      	uxth	r2, r3
 800094c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000950:	f04f 33ff 	mov.w	r3, #4294967295
 8000954:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8000958:	f006 f8e8 	bl	8006b2c <HAL_UART_Transmit>
	HAL_Delay(50);
 800095c:	2032      	movs	r0, #50	; 0x32
 800095e:	f002 f87b 	bl	8002a58 <HAL_Delay>




	return 0;
 8000962:	2300      	movs	r3, #0
}
 8000964:	4618      	mov	r0, r3
 8000966:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800096a:	46bd      	mov	sp, r7
 800096c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000970:	b004      	add	sp, #16
 8000972:	4770      	bx	lr
 8000974:	080084fc 	.word	0x080084fc
 8000978:	40020c00 	.word	0x40020c00
 800097c:	200000e4 	.word	0x200000e4
 8000980:	40020400 	.word	0x40020400
 8000984:	200001ac 	.word	0x200001ac
 8000988:	40021c00 	.word	0x40021c00
 800098c:	0800847c 	.word	0x0800847c
 8000990:	0800848c 	.word	0x0800848c
 8000994:	08008494 	.word	0x08008494
 8000998:	0800849c 	.word	0x0800849c
 800099c:	080084a4 	.word	0x080084a4
 80009a0:	080084cc 	.word	0x080084cc
 80009a4:	080084dc 	.word	0x080084dc
 80009a8:	080084ec 	.word	0x080084ec

080009ac <FastTest>:

uint32_t FastTest(SPI_Values DUT) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 80009b2:	af02      	add	r7, sp, #8
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t writeBuffer[256] = { 0 };
 80009ba:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80009be:	4618      	mov	r0, r3
 80009c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009c4:	461a      	mov	r2, r3
 80009c6:	2100      	movs	r1, #0
 80009c8:	f007 f947 	bl	8007c5a <memset>
	uint8_t readBuffer[256] = { 0 };
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4618      	mov	r0, r3
 80009d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d6:	461a      	mov	r2, r3
 80009d8:	2100      	movs	r1, #0
 80009da:	f007 f93e 	bl	8007c5a <memset>
	uint32_t adresse = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	volatile uint8_t SR1;
	//Testdaten initialisieren
	for (int i = 0; i < 256; i++) {
 80009e4:	2300      	movs	r3, #0
 80009e6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80009ea:	e00e      	b.n	8000a0a <FastTest+0x5e>
		writeBuffer[i] = i;
 80009ec:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80009f0:	b2d9      	uxtb	r1, r3
 80009f2:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80009f6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80009fa:	4413      	add	r3, r2
 80009fc:	460a      	mov	r2, r1
 80009fe:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 256; i++) {
 8000a00:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000a04:	3301      	adds	r3, #1
 8000a06:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000a0a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000a0e:	2bff      	cmp	r3, #255	; 0xff
 8000a10:	ddec      	ble.n	80009ec <FastTest+0x40>

	//CHIP löschen
	//chipErase(DUT);
	//evtl Zusätzliche Schleife für die verschiedenen Chips und CS pins

	adresse = 0x0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	//Daten für eine Page schicken
	writePage(writeBuffer, adresse, DUT);
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8000a1e:	689a      	ldr	r2, [r3, #8]
 8000a20:	9200      	str	r2, [sp, #0]
 8000a22:	cb0c      	ldmia	r3, {r2, r3}
 8000a24:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8000a28:	f000 f931 	bl	8000c8e <writePage>
	//Warten bis fertig geschrieben wurde
	writeReady(DUT);
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a32:	f000 f9f1 	bl	8000e18 <writeReady>
	//Selbe page auslesen
	readPage(readBuffer, adresse, DUT);
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	f107 0014 	add.w	r0, r7, #20
 8000a3c:	689a      	ldr	r2, [r3, #8]
 8000a3e:	9200      	str	r2, [sp, #0]
 8000a40:	cb0c      	ldmia	r3, {r2, r3}
 8000a42:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8000a46:	f000 f98b 	bl	8000d60 <readPage>
	//Inhalt vergleichen
	for (int y = 0; y < 256; y++) {
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000a50:	e01e      	b.n	8000a90 <FastTest+0xe4>
		//Wenn inhalt nicht gleich
		if (writeBuffer[y] != readBuffer[y]) {
 8000a52:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8000a56:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000a5a:	4413      	add	r3, r2
 8000a5c:	781a      	ldrb	r2, [r3, #0]
 8000a5e:	f107 0114 	add.w	r1, r7, #20
 8000a62:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000a66:	440b      	add	r3, r1
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d00b      	beq.n	8000a86 <FastTest+0xda>
			SR1 = readStatus(DUT);
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a74:	f000 f8be 	bl	8000bf4 <readStatus>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	f107 0313 	add.w	r3, r7, #19
 8000a80:	701a      	strb	r2, [r3, #0]
			return 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	e009      	b.n	8000a9a <FastTest+0xee>
	for (int y = 0; y < 256; y++) {
 8000a86:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000a90:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000a94:	2bff      	cmp	r3, #255	; 0xff
 8000a96:	dddc      	ble.n	8000a52 <FastTest+0xa6>
		}
	}
	return 1;
 8000a98:	2301      	movs	r3, #1
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000aa8:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <MX_CRC_Init+0x3c>)
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <MX_CRC_Init+0x40>)
 8000aac:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_CRC_Init+0x3c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <MX_CRC_Init+0x3c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_CRC_Init+0x3c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000ac0:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <MX_CRC_Init+0x3c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_CRC_Init+0x3c>)
 8000ac8:	2203      	movs	r2, #3
 8000aca:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000acc:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <MX_CRC_Init+0x3c>)
 8000ace:	f002 f925 	bl	8002d1c <HAL_CRC_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000ad8:	f001 f9d2 	bl	8001e80 <Error_Handler>
  }

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	2000009c 	.word	0x2000009c
 8000ae4:	40023000 	.word	0x40023000

08000ae8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <HAL_CRC_MspInit+0x38>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d10b      	bne.n	8000b12 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_CRC_MspInit+0x3c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a09      	ldr	r2, [pc, #36]	; (8000b24 <HAL_CRC_MspInit+0x3c>)
 8000b00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <HAL_CRC_MspInit+0x3c>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000b12:	bf00      	nop
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40023000 	.word	0x40023000
 8000b24:	40023800 	.word	0x40023800

08000b28 <InitMemory>:

/**
 * Sets the pin to the right state
 * @returns 0: ok
 */
int32_t InitMemory(void) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FL1_CS1_GPIO_Port, FL1_CS1_Pin, GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b32:	482d      	ldr	r0, [pc, #180]	; (8000be8 <InitMemory+0xc0>)
 8000b34:	f002 fe12 	bl	800375c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL1_CS2_GPIO_Port, FL1_CS2_Pin, GPIO_PIN_SET);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b3e:	482b      	ldr	r0, [pc, #172]	; (8000bec <InitMemory+0xc4>)
 8000b40:	f002 fe0c 	bl	800375c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FL2_CS1_GPIO_Port, FL2_CS1_Pin, GPIO_PIN_SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b4a:	4829      	ldr	r0, [pc, #164]	; (8000bf0 <InitMemory+0xc8>)
 8000b4c:	f002 fe06 	bl	800375c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL2_CS2_GPIO_Port, FL2_CS2_Pin, GPIO_PIN_SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b56:	4826      	ldr	r0, [pc, #152]	; (8000bf0 <InitMemory+0xc8>)
 8000b58:	f002 fe00 	bl	800375c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FL1_HLD_GPIO_Port, FL1_HLD_Pin, GPIO_PIN_SET);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b62:	4822      	ldr	r0, [pc, #136]	; (8000bec <InitMemory+0xc4>)
 8000b64:	f002 fdfa 	bl	800375c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL2_HLD_GPIO_Port, FL2_HLD_Pin, GPIO_PIN_SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b6e:	4820      	ldr	r0, [pc, #128]	; (8000bf0 <InitMemory+0xc8>)
 8000b70:	f002 fdf4 	bl	800375c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FL1_WP_GPIO_Port, FL1_WP_Pin, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b7a:	481c      	ldr	r0, [pc, #112]	; (8000bec <InitMemory+0xc4>)
 8000b7c:	f002 fdee 	bl	800375c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL2_WP_GPIO_Port, FL2_WP_Pin, GPIO_PIN_SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b86:	481a      	ldr	r0, [pc, #104]	; (8000bf0 <InitMemory+0xc8>)
 8000b88:	f002 fde8 	bl	800375c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FL1_RES_GPIO_Port, FL1_RES_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b92:	4816      	ldr	r0, [pc, #88]	; (8000bec <InitMemory+0xc4>)
 8000b94:	f002 fde2 	bl	800375c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL2_RES_GPIO_Port, FL2_RES_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b9e:	4814      	ldr	r0, [pc, #80]	; (8000bf0 <InitMemory+0xc8>)
 8000ba0:	f002 fddc 	bl	800375c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ba4:	200a      	movs	r0, #10
 8000ba6:	f001 ff57 	bl	8002a58 <HAL_Delay>
	HAL_GPIO_WritePin(FL1_RES_GPIO_Port, FL1_RES_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bb0:	480e      	ldr	r0, [pc, #56]	; (8000bec <InitMemory+0xc4>)
 8000bb2:	f002 fdd3 	bl	800375c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL2_RES_GPIO_Port, FL2_RES_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bbc:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <InitMemory+0xc8>)
 8000bbe:	f002 fdcd 	bl	800375c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000bc2:	200a      	movs	r0, #10
 8000bc4:	f001 ff48 	bl	8002a58 <HAL_Delay>
	HAL_GPIO_WritePin(FL1_RES_GPIO_Port, FL1_RES_Pin, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bce:	4807      	ldr	r0, [pc, #28]	; (8000bec <InitMemory+0xc4>)
 8000bd0:	f002 fdc4 	bl	800375c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL2_RES_GPIO_Port, FL2_RES_Pin, GPIO_PIN_SET);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <InitMemory+0xc8>)
 8000bdc:	f002 fdbe 	bl	800375c <HAL_GPIO_WritePin>
	return 0;
 8000be0:	2300      	movs	r3, #0

}
 8000be2:	4618      	mov	r0, r3
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40020400 	.word	0x40020400
 8000bec:	40021c00 	.word	0x40021c00
 8000bf0:	40020c00 	.word	0x40020c00

08000bf4 <readStatus>:
 * Function Read Status
 * reads the status byte from the memory unit
 * @param: SPI_val
 * @return 8 bit status register
 */
uint8_t readStatus(SPI_Values SPI_val) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t data;
	uint8_t command = c_READSTATUSREG1;
 8000c00:	2305      	movs	r3, #5
 8000c02:	75bb      	strb	r3, [r7, #22]
	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	8939      	ldrh	r1, [r7, #8]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f002 fda6 	bl	800375c <HAL_GPIO_WritePin>

	HAL_Delay(1); //test
 8000c10:	2001      	movs	r0, #1
 8000c12:	f001 ff21 	bl	8002a58 <HAL_Delay>

	//send command
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f107 0116 	add.w	r1, r7, #22
 8000c1c:	230a      	movs	r3, #10
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f004 ff74 	bl	8005b0c <HAL_SPI_Transmit>
	//read data from status register
	HAL_SPI_Receive(SPI_val.spihandle, &data, 1, 10);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f107 0117 	add.w	r1, r7, #23
 8000c2a:	230a      	movs	r3, #10
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f005 f8e3 	bl	8005df8 <HAL_SPI_Receive>
	//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	8939      	ldrh	r1, [r7, #8]
 8000c36:	2201      	movs	r2, #1
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f002 fd8f 	bl	800375c <HAL_GPIO_WritePin>
	return data;
 8000c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <writeByte>:
 *  @brief Writes one byte so SPI
 *  @param uint8_t data: the one byte
 *  @param SPI_Val: the specifier of the SPI
 *  @return 0: Ok.
 */
int writeByte(uint8_t data, SPI_Values SPI_val) {
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b087      	sub	sp, #28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4604      	mov	r4, r0
 8000c50:	4638      	mov	r0, r7
 8000c52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000c56:	4623      	mov	r3, r4
 8000c58:	73fb      	strb	r3, [r7, #15]
	uint8_t command = data;
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	75fb      	strb	r3, [r7, #23]
	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	88b9      	ldrh	r1, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f002 fd79 	bl	800375c <HAL_GPIO_WritePin>
	//Ausgabe lesen
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 8000c6a:	6838      	ldr	r0, [r7, #0]
 8000c6c:	f107 0117 	add.w	r1, r7, #23
 8000c70:	230a      	movs	r3, #10
 8000c72:	2201      	movs	r2, #1
 8000c74:	f004 ff4a 	bl	8005b0c <HAL_SPI_Transmit>
	//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	88b9      	ldrh	r1, [r7, #4]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f002 fd6c 	bl	800375c <HAL_GPIO_WritePin>
	return 0;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	371c      	adds	r7, #28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd90      	pop	{r4, r7, pc}

08000c8e <writePage>:
 * @param uint8_t * data: Pointer to the data field
 * @param uint32_t address: the address on the memory chip
 * @param SPI_Values SPI_val
 * @return 0: ok
 */
int writePage(uint8_t *data, uint32_t address, SPI_Values SPI_val) {
 8000c8e:	b082      	sub	sp, #8
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	f107 0118 	add.w	r1, r7, #24
 8000c9e:	e881 000c 	stmia.w	r1, {r2, r3}

	uint8_t command = c_WRITEPAGE;
 8000ca2:	2312      	movs	r3, #18
 8000ca4:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp_add;

//Write enable
	writeByte(c_WREN, SPI_val);
 8000ca6:	f107 0318 	add.w	r3, r7, #24
 8000caa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cac:	2006      	movs	r0, #6
 8000cae:	f7ff ffcb 	bl	8000c48 <writeByte>

	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 8000cb2:	6a3b      	ldr	r3, [r7, #32]
 8000cb4:	8bb9      	ldrh	r1, [r7, #28]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f002 fd4f 	bl	800375c <HAL_GPIO_WritePin>

	//commando schicken
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 8000cbe:	69b8      	ldr	r0, [r7, #24]
 8000cc0:	f107 010f 	add.w	r1, r7, #15
 8000cc4:	230a      	movs	r3, #10
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f004 ff20 	bl	8005b0c <HAL_SPI_Transmit>
	HAL_Delay(10);
 8000ccc:	200a      	movs	r0, #10
 8000cce:	f001 fec3 	bl	8002a58 <HAL_Delay>
	//Addressse schicken MSB to LSB
//	HAL_SPI_Transmit(SPI_val.spihandle, (uint8_t*) (&address), 4, 40);

	tmp_add = (uint8_t) ((address >> 24) & 0x000000FF);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	0e1b      	lsrs	r3, r3, #24
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000cda:	69b8      	ldr	r0, [r7, #24]
 8000cdc:	f107 010e 	add.w	r1, r7, #14
 8000ce0:	230a      	movs	r3, #10
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f004 ff12 	bl	8005b0c <HAL_SPI_Transmit>
	tmp_add = (uint8_t) ((address >> 16) & 0x000000FF);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	0c1b      	lsrs	r3, r3, #16
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000cf0:	69b8      	ldr	r0, [r7, #24]
 8000cf2:	f107 010e 	add.w	r1, r7, #14
 8000cf6:	230a      	movs	r3, #10
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f004 ff07 	bl	8005b0c <HAL_SPI_Transmit>
	tmp_add = (uint8_t) ((address >> 8) & 0x000000FF);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000d06:	69b8      	ldr	r0, [r7, #24]
 8000d08:	f107 010e 	add.w	r1, r7, #14
 8000d0c:	230a      	movs	r3, #10
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f004 fefc 	bl	8005b0c <HAL_SPI_Transmit>
	tmp_add = (uint8_t) (address & 0x000000FF);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000d1a:	69b8      	ldr	r0, [r7, #24]
 8000d1c:	f107 010e 	add.w	r1, r7, #14
 8000d20:	230a      	movs	r3, #10
 8000d22:	2201      	movs	r2, #1
 8000d24:	f004 fef2 	bl	8005b0c <HAL_SPI_Transmit>

	//Daten schicken
	HAL_SPI_Transmit(SPI_val.spihandle, data, 256, 2560);
 8000d28:	69b8      	ldr	r0, [r7, #24]
 8000d2a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000d2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	f004 feea 	bl	8005b0c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(SPI_val.spihandle, &data[i], 1, 10);
	}
*/

	//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 8000d38:	6a3b      	ldr	r3, [r7, #32]
 8000d3a:	8bb9      	ldrh	r1, [r7, #28]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f002 fd0c 	bl	800375c <HAL_GPIO_WritePin>

	//Write disable
	writeByte(c_WRDI, SPI_val);
 8000d44:	f107 0318 	add.w	r3, r7, #24
 8000d48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d4a:	2004      	movs	r0, #4
 8000d4c:	f7ff ff7c 	bl	8000c48 <writeByte>
	return 0;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d5c:	b002      	add	sp, #8
 8000d5e:	4770      	bx	lr

08000d60 <readPage>:
 * @param uint8_t  * data: Pointer to the data array
 * @param uint32_t address: Address of the momory unit to be read
 * @param SPI_Values SPI_val: the corresponding SPI values
 * @return 0: ok
 */
int readPage(uint8_t *data, uint32_t address, SPI_Values SPI_val) {
 8000d60:	b082      	sub	sp, #8
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b084      	sub	sp, #16
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
 8000d6c:	f107 0118 	add.w	r1, r7, #24
 8000d70:	e881 000c 	stmia.w	r1, {r2, r3}

	uint8_t command = c_READ;
 8000d74:	2313      	movs	r3, #19
 8000d76:	73fb      	strb	r3, [r7, #15]

	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 8000d78:	6a3b      	ldr	r3, [r7, #32]
 8000d7a:	8bb9      	ldrh	r1, [r7, #28]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f002 fcec 	bl	800375c <HAL_GPIO_WritePin>

	//commando schicken
//	writeByte(c_READ, SPI_val);
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 8000d84:	69b8      	ldr	r0, [r7, #24]
 8000d86:	f107 010f 	add.w	r1, r7, #15
 8000d8a:	230a      	movs	r3, #10
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	f004 febd 	bl	8005b0c <HAL_SPI_Transmit>

//4 Byte Addressse schicken MSB to LSB
//	HAL_SPI_Transmit(SPI_val.spihandle, (uint8_t*) (&address), 4, 40);
	tmp_add = (uint8_t) ((address >> 24) & 0x000000FF);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	0e1b      	lsrs	r3, r3, #24
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <readPage+0xb4>)
 8000d9a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000d9c:	69b8      	ldr	r0, [r7, #24]
 8000d9e:	230a      	movs	r3, #10
 8000da0:	2201      	movs	r2, #1
 8000da2:	491c      	ldr	r1, [pc, #112]	; (8000e14 <readPage+0xb4>)
 8000da4:	f004 feb2 	bl	8005b0c <HAL_SPI_Transmit>
	tmp_add = (uint8_t) ((address >> 16) & 0x000000FF);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	0c1b      	lsrs	r3, r3, #16
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <readPage+0xb4>)
 8000db0:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000db2:	69b8      	ldr	r0, [r7, #24]
 8000db4:	230a      	movs	r3, #10
 8000db6:	2201      	movs	r2, #1
 8000db8:	4916      	ldr	r1, [pc, #88]	; (8000e14 <readPage+0xb4>)
 8000dba:	f004 fea7 	bl	8005b0c <HAL_SPI_Transmit>
	tmp_add = (uint8_t) ((address >> 8) & 0x000000FF);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <readPage+0xb4>)
 8000dc6:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000dc8:	69b8      	ldr	r0, [r7, #24]
 8000dca:	230a      	movs	r3, #10
 8000dcc:	2201      	movs	r2, #1
 8000dce:	4911      	ldr	r1, [pc, #68]	; (8000e14 <readPage+0xb4>)
 8000dd0:	f004 fe9c 	bl	8005b0c <HAL_SPI_Transmit>
	tmp_add = (uint8_t) (address & 0x000000FF);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <readPage+0xb4>)
 8000dda:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000ddc:	69b8      	ldr	r0, [r7, #24]
 8000dde:	230a      	movs	r3, #10
 8000de0:	2201      	movs	r2, #1
 8000de2:	490c      	ldr	r1, [pc, #48]	; (8000e14 <readPage+0xb4>)
 8000de4:	f004 fe92 	bl	8005b0c <HAL_SPI_Transmit>

//Daten lesen
	HAL_SPI_Receive(SPI_val.spihandle, data, 256, 2560);
 8000de8:	69b8      	ldr	r0, [r7, #24]
 8000dea:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000dee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	f005 f800 	bl	8005df8 <HAL_SPI_Receive>
//	for (int i = 0; i < 256; i++) {
//		HAL_SPI_Receive(SPI_val.spihandle, &data[i], 1, 10);
//	}

//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	8bb9      	ldrh	r1, [r7, #28]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f002 fcac 	bl	800375c <HAL_GPIO_WritePin>

	return 0;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e10:	b002      	add	sp, #8
 8000e12:	4770      	bx	lr
 8000e14:	200000c0 	.word	0x200000c0

08000e18 <writeReady>:

/**
 * Waits for the bit WIP (Write in Progress) bit to toggle
 * Reads SR1 register from memory
 */
void writeReady(SPI_Values SPI_val) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint32_t status = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
	uint8_t SR1 = 0xF;
 8000e28:	230f      	movs	r3, #15
 8000e2a:	74fb      	strb	r3, [r7, #19]
	while (status == 0) {
 8000e2c:	e00d      	b.n	8000e4a <writeReady+0x32>
		SR1 = readStatus(SPI_val);
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e34:	f7ff fede 	bl	8000bf4 <readStatus>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	74fb      	strb	r3, [r7, #19]
		if ((SR1 & 0x1) == 0)
 8000e3c:	7cfb      	ldrb	r3, [r7, #19]
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d101      	bne.n	8000e4a <writeReady+0x32>
			status = 1;
 8000e46:	2301      	movs	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
	while (status == 0) {
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0ee      	beq.n	8000e2e <writeReady+0x16>
	}
}
 8000e50:	bf00      	nop
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b090      	sub	sp, #64	; 0x40
 8000e5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6e:	4bb1      	ldr	r3, [pc, #708]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4ab0      	ldr	r2, [pc, #704]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000e74:	f043 0310 	orr.w	r3, r3, #16
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4bae      	ldr	r3, [pc, #696]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0310 	and.w	r3, r3, #16
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e86:	4bab      	ldr	r3, [pc, #684]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4aaa      	ldr	r2, [pc, #680]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4ba8      	ldr	r3, [pc, #672]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	4ba5      	ldr	r3, [pc, #660]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4aa4      	ldr	r2, [pc, #656]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4ba2      	ldr	r3, [pc, #648]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	623b      	str	r3, [r7, #32]
 8000eb4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eb6:	4b9f      	ldr	r3, [pc, #636]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a9e      	ldr	r2, [pc, #632]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000ebc:	f043 0320 	orr.w	r3, r3, #32
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b9c      	ldr	r3, [pc, #624]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0320 	and.w	r3, r3, #32
 8000eca:	61fb      	str	r3, [r7, #28]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ece:	4b99      	ldr	r3, [pc, #612]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a98      	ldr	r2, [pc, #608]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b96      	ldr	r3, [pc, #600]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee2:	61bb      	str	r3, [r7, #24]
 8000ee4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b93      	ldr	r3, [pc, #588]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a92      	ldr	r2, [pc, #584]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b90      	ldr	r3, [pc, #576]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	4b8d      	ldr	r3, [pc, #564]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a8c      	ldr	r2, [pc, #560]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b8a      	ldr	r3, [pc, #552]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000f16:	4b87      	ldr	r3, [pc, #540]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a86      	ldr	r2, [pc, #536]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b84      	ldr	r3, [pc, #528]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f2e:	4b81      	ldr	r3, [pc, #516]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a80      	ldr	r2, [pc, #512]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b7e      	ldr	r3, [pc, #504]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f46:	4b7b      	ldr	r3, [pc, #492]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a7a      	ldr	r2, [pc, #488]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f4c:	f043 0308 	orr.w	r3, r3, #8
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b78      	ldr	r3, [pc, #480]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000f5e:	4b75      	ldr	r3, [pc, #468]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a74      	ldr	r2, [pc, #464]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b72      	ldr	r3, [pc, #456]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED_4_Pin|LWL_OUT_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f244 0108 	movw	r1, #16392	; 0x4008
 8000f7c:	486e      	ldr	r0, [pc, #440]	; (8001138 <MX_GPIO_Init+0x2e0>)
 8000f7e:	f002 fbed 	bl	800375c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_3_Pin|LED_2_Pin|LED_1_Pin|SD_CS_Pin
 8000f82:	2200      	movs	r2, #0
 8000f84:	f24e 4138 	movw	r1, #58424	; 0xe438
 8000f88:	486c      	ldr	r0, [pc, #432]	; (800113c <MX_GPIO_Init+0x2e4>)
 8000f8a:	f002 fbe7 	bl	800375c <HAL_GPIO_WritePin>
                          |nCS_DMS1_Pin|nCS_DMS2_Pin|nCS_DMS3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, nCS_DMS4_Pin|nCS_DMS5_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2103      	movs	r1, #3
 8000f92:	486b      	ldr	r0, [pc, #428]	; (8001140 <MX_GPIO_Init+0x2e8>)
 8000f94:	f002 fbe2 	bl	800375c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCS_DMS6_GPIO_Port, nCS_DMS6_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2180      	movs	r1, #128	; 0x80
 8000f9c:	4869      	ldr	r0, [pc, #420]	; (8001144 <MX_GPIO_Init+0x2ec>)
 8000f9e:	f002 fbdd 	bl	800375c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, FL1_HLD_Pin|FL1_WP_Pin|FL1_RES_Pin|FL1_CS2_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8000fa8:	4867      	ldr	r0, [pc, #412]	; (8001148 <MX_GPIO_Init+0x2f0>)
 8000faa:	f002 fbd7 	bl	800375c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL1_CS1_GPIO_Port, FL1_CS1_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb4:	4865      	ldr	r0, [pc, #404]	; (800114c <MX_GPIO_Init+0x2f4>)
 8000fb6:	f002 fbd1 	bl	800375c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, nCS_PT3_Pin|FL2_HLD_Pin|FL2_RES_Pin|FL2_CS2_Pin
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000fc0:	4863      	ldr	r0, [pc, #396]	; (8001150 <MX_GPIO_Init+0x2f8>)
 8000fc2:	f002 fbcb 	bl	800375c <HAL_GPIO_WritePin>
                          |FL2_CS1_Pin|FL2_WP_Pin|nCS_PT2_Pin|nCS_PT1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE3 PE4 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
 8000fc6:	f64f 7318 	movw	r3, #65304	; 0xff18
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd8:	4619      	mov	r1, r3
 8000fda:	485a      	ldr	r0, [pc, #360]	; (8001144 <MX_GPIO_Init+0x2ec>)
 8000fdc:	f002 f810 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LWL_IN_Pin;
 8000fe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LWL_IN_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4850      	ldr	r0, [pc, #320]	; (8001138 <MX_GPIO_Init+0x2e0>)
 8000ff6:	f002 f803 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000ffa:	f24e 33ff 	movw	r3, #58367	; 0xe3ff
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001000:	2303      	movs	r3, #3
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001008:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800100c:	4619      	mov	r1, r3
 800100e:	4851      	ldr	r0, [pc, #324]	; (8001154 <MX_GPIO_Init+0x2fc>)
 8001010:	f001 fff6 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI10 PI11 PI12 PI13
                           PI15 PI0 PI1 PI2
                           PI4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001014:	f64b 4317 	movw	r3, #48151	; 0xbc17
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101a:	2303      	movs	r3, #3
 800101c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001022:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001026:	4619      	mov	r1, r3
 8001028:	4843      	ldr	r0, [pc, #268]	; (8001138 <MX_GPIO_Init+0x2e0>)
 800102a:	f001 ffe9 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF6
                           PF11 PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 800102e:	f641 0347 	movw	r3, #6215	; 0x1847
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001034:	2303      	movs	r3, #3
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800103c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001040:	4619      	mov	r1, r3
 8001042:	483e      	ldr	r0, [pc, #248]	; (800113c <MX_GPIO_Init+0x2e4>)
 8001044:	f001 ffdc 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LED_4_Pin|LWL_OUT_Pin;
 8001048:	f244 0308 	movw	r3, #16392	; 0x4008
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	2301      	movs	r3, #1
 8001050:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800105a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800105e:	4619      	mov	r1, r3
 8001060:	4835      	ldr	r0, [pc, #212]	; (8001138 <MX_GPIO_Init+0x2e0>)
 8001062:	f001 ffcd 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LED_1_Pin|SD_CS_Pin
 8001066:	f24e 4338 	movw	r3, #58424	; 0xe438
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |nCS_DMS1_Pin|nCS_DMS2_Pin|nCS_DMS3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001078:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800107c:	4619      	mov	r1, r3
 800107e:	482f      	ldr	r0, [pc, #188]	; (800113c <MX_GPIO_Init+0x2e4>)
 8001080:	f001 ffbe 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH2 PH3
                           PH4 PH5 PH6 PH7
                           PH8 PH13 PH14 PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001084:	f24e 13ff 	movw	r3, #57855	; 0xe1ff
 8001088:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108a:	2303      	movs	r3, #3
 800108c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001092:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001096:	4619      	mov	r1, r3
 8001098:	482b      	ldr	r0, [pc, #172]	; (8001148 <MX_GPIO_Init+0x2f0>)
 800109a:	f001 ffb1 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800109e:	231e      	movs	r3, #30
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a2:	2303      	movs	r3, #3
 80010a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ae:	4619      	mov	r1, r3
 80010b0:	4829      	ldr	r0, [pc, #164]	; (8001158 <MX_GPIO_Init+0x300>)
 80010b2:	f001 ffa5 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80010b6:	f640 73e3 	movw	r3, #4067	; 0xfe3
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010bc:	2303      	movs	r3, #3
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c8:	4619      	mov	r1, r3
 80010ca:	4820      	ldr	r0, [pc, #128]	; (800114c <MX_GPIO_Init+0x2f4>)
 80010cc:	f001 ff98 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ0 PJ1 PJ2 PJ3
                           PJ4 PJ5 PJ12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80010d0:	f241 033f 	movw	r3, #4159	; 0x103f
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d6:	2303      	movs	r3, #3
 80010d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80010de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e2:	4619      	mov	r1, r3
 80010e4:	481d      	ldr	r0, [pc, #116]	; (800115c <MX_GPIO_Init+0x304>)
 80010e6:	f001 ff8b 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = nCS_DMS4_Pin|nCS_DMS5_Pin;
 80010ea:	2303      	movs	r3, #3
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010fe:	4619      	mov	r1, r3
 8001100:	480f      	ldr	r0, [pc, #60]	; (8001140 <MX_GPIO_Init+0x2e8>)
 8001102:	f001 ff7d 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nCS_DMS6_Pin;
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(nCS_DMS6_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800111a:	4619      	mov	r1, r3
 800111c:	4809      	ldr	r0, [pc, #36]	; (8001144 <MX_GPIO_Init+0x2ec>)
 800111e:	f001 ff6f 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = FL1_HLD_Pin|FL1_WP_Pin|FL1_RES_Pin|FL1_CS2_Pin;
 8001122:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	e015      	b.n	8001160 <MX_GPIO_Init+0x308>
 8001134:	40023800 	.word	0x40023800
 8001138:	40022000 	.word	0x40022000
 800113c:	40021400 	.word	0x40021400
 8001140:	40021800 	.word	0x40021800
 8001144:	40021000 	.word	0x40021000
 8001148:	40021c00 	.word	0x40021c00
 800114c:	40020400 	.word	0x40020400
 8001150:	40020c00 	.word	0x40020c00
 8001154:	40020800 	.word	0x40020800
 8001158:	40020000 	.word	0x40020000
 800115c:	40022400 	.word	0x40022400
 8001160:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001162:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001166:	4619      	mov	r1, r3
 8001168:	4856      	ldr	r0, [pc, #344]	; (80012c4 <MX_GPIO_Init+0x46c>)
 800116a:	f001 ff49 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FL1_CS1_Pin;
 800116e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FL1_CS1_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001184:	4619      	mov	r1, r3
 8001186:	4850      	ldr	r0, [pc, #320]	; (80012c8 <MX_GPIO_Init+0x470>)
 8001188:	f001 ff3a 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = nCS_PT3_Pin|FL2_HLD_Pin|FL2_RES_Pin|FL2_CS2_Pin
 800118c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FL2_CS1_Pin|FL2_WP_Pin|nCS_PT2_Pin|nCS_PT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001192:	2301      	movs	r3, #1
 8001194:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800119e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a2:	4619      	mov	r1, r3
 80011a4:	4849      	ldr	r0, [pc, #292]	; (80012cc <MX_GPIO_Init+0x474>)
 80011a6:	f001 ff2b 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MS_SEL_Pin;
 80011aa:	2304      	movs	r3, #4
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ae:	2300      	movs	r3, #0
 80011b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MS_SEL_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ba:	4619      	mov	r1, r3
 80011bc:	4844      	ldr	r0, [pc, #272]	; (80012d0 <MX_GPIO_Init+0x478>)
 80011be:	f001 ff1f 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG5 PG6 PG7
                           PG8 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80011c2:	f64f 73e8 	movw	r3, #65512	; 0xffe8
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c8:	2303      	movs	r3, #3
 80011ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d4:	4619      	mov	r1, r3
 80011d6:	483e      	ldr	r0, [pc, #248]	; (80012d0 <MX_GPIO_Init+0x478>)
 80011d8:	f001 ff12 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDRDY_DMS1_Pin;
 80011dc:	2310      	movs	r3, #16
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011e0:	4b3c      	ldr	r3, [pc, #240]	; (80012d4 <MX_GPIO_Init+0x47c>)
 80011e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(nDRDY_DMS1_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ec:	4619      	mov	r1, r3
 80011ee:	4838      	ldr	r0, [pc, #224]	; (80012d0 <MX_GPIO_Init+0x478>)
 80011f0:	f001 ff06 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = nDRDY_DMS2_Pin|nDRDY_DMS3_Pin|nDRDY_DMS5_Pin|nDRDY_DMS6_Pin;
 80011f4:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011fa:	4b36      	ldr	r3, [pc, #216]	; (80012d4 <MX_GPIO_Init+0x47c>)
 80011fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001206:	4619      	mov	r1, r3
 8001208:	4833      	ldr	r0, [pc, #204]	; (80012d8 <MX_GPIO_Init+0x480>)
 800120a:	f001 fef9 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDRDY_DMS4_Pin;
 800120e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001214:	2300      	movs	r3, #0
 8001216:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(nDRDY_DMS4_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001220:	4619      	mov	r1, r3
 8001222:	482d      	ldr	r0, [pc, #180]	; (80012d8 <MX_GPIO_Init+0x480>)
 8001224:	f001 feec 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8001228:	23fb      	movs	r3, #251	; 0xfb
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122c:	2303      	movs	r3, #3
 800122e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001234:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001238:	4619      	mov	r1, r3
 800123a:	4824      	ldr	r0, [pc, #144]	; (80012cc <MX_GPIO_Init+0x474>)
 800123c:	f001 fee0 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = nDRDY_PT3_Pin|nDRDY_PT2_Pin|nDRDY_PT1_Pin;
 8001240:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001246:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <MX_GPIO_Init+0x47c>)
 8001248:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800124e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001252:	4619      	mov	r1, r3
 8001254:	4821      	ldr	r0, [pc, #132]	; (80012dc <MX_GPIO_Init+0x484>)
 8001256:	f001 fed3 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK3 PK4 PK5 PK6
                           PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800125a:	23f8      	movs	r3, #248	; 0xf8
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125e:	2303      	movs	r3, #3
 8001260:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001266:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800126a:	4619      	mov	r1, r3
 800126c:	481c      	ldr	r0, [pc, #112]	; (80012e0 <MX_GPIO_Init+0x488>)
 800126e:	f001 fec7 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SODS_OPT_Pin|SOE_OPT_Pin|LO_OPT_Pin;
 8001272:	23e0      	movs	r3, #224	; 0xe0
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <MX_GPIO_Init+0x47c>)
 8001278:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800127e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001282:	4619      	mov	r1, r3
 8001284:	4817      	ldr	r0, [pc, #92]	; (80012e4 <MX_GPIO_Init+0x48c>)
 8001286:	f001 febb 	bl	8003000 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2105      	movs	r1, #5
 800128e:	200a      	movs	r0, #10
 8001290:	f001 fcf4 	bl	8002c7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001294:	200a      	movs	r0, #10
 8001296:	f001 fd1d 	bl	8002cd4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2105      	movs	r1, #5
 800129e:	2017      	movs	r0, #23
 80012a0:	f001 fcec 	bl	8002c7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012a4:	2017      	movs	r0, #23
 80012a6:	f001 fd15 	bl	8002cd4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2105      	movs	r1, #5
 80012ae:	2028      	movs	r0, #40	; 0x28
 80012b0:	f001 fce4 	bl	8002c7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012b4:	2028      	movs	r0, #40	; 0x28
 80012b6:	f001 fd0d 	bl	8002cd4 <HAL_NVIC_EnableIRQ>

}
 80012ba:	bf00      	nop
 80012bc:	3740      	adds	r7, #64	; 0x40
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40021c00 	.word	0x40021c00
 80012c8:	40020400 	.word	0x40020400
 80012cc:	40020c00 	.word	0x40020c00
 80012d0:	40021800 	.word	0x40021800
 80012d4:	10110000 	.word	0x10110000
 80012d8:	40020000 	.word	0x40020000
 80012dc:	40022400 	.word	0x40022400
 80012e0:	40022800 	.word	0x40022800
 80012e4:	40022000 	.word	0x40022000

080012e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ec:	f001 fb57 	bl	800299e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f0:	f000 f83e 	bl	8001370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f4:	f7ff fdb0 	bl	8000e58 <MX_GPIO_Init>
  MX_SPI2_Init();
 80012f8:	f000 fe14 	bl	8001f24 <MX_SPI2_Init>
  MX_SPI3_Init();
 80012fc:	f000 fe50 	bl	8001fa0 <MX_SPI3_Init>
  MX_SPI6_Init();
 8001300:	f000 ff08 	bl	8002114 <MX_SPI6_Init>
  MX_UART4_Init();
 8001304:	f001 f994 	bl	8002630 <MX_UART4_Init>
  MX_UART8_Init();
 8001308:	f001 f9f2 	bl	80026f0 <MX_UART8_Init>
  MX_UART5_Init();
 800130c:	f001 f9c0 	bl	8002690 <MX_UART5_Init>
  MX_CRC_Init();
 8001310:	f7ff fbc8 	bl	8000aa4 <MX_CRC_Init>
  MX_SPI4_Init();
 8001314:	f000 fe82 	bl	800201c <MX_SPI4_Init>
  MX_SPI5_Init();
 8001318:	f000 febe 	bl	8002098 <MX_SPI5_Init>
  MX_RTC_Init();
 800131c:	f000 fdc2 	bl	8001ea4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET); //clear all LEDs
 8001320:	2200      	movs	r2, #0
 8001322:	2120      	movs	r1, #32
 8001324:	480f      	ldr	r0, [pc, #60]	; (8001364 <main+0x7c>)
 8001326:	f002 fa19 	bl	800375c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	2110      	movs	r1, #16
 800132e:	480d      	ldr	r0, [pc, #52]	; (8001364 <main+0x7c>)
 8001330:	f002 fa14 	bl	800375c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	2108      	movs	r1, #8
 8001338:	480a      	ldr	r0, [pc, #40]	; (8001364 <main+0x7c>)
 800133a:	f002 fa0f 	bl	800375c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001344:	4808      	ldr	r0, [pc, #32]	; (8001368 <main+0x80>)
 8001346:	f002 fa09 	bl	800375c <HAL_GPIO_WritePin>

	if (!HAL_GPIO_ReadPin(MS_SEL_GPIO_Port, MS_SEL_Pin)) {
 800134a:	2104      	movs	r1, #4
 800134c:	4807      	ldr	r0, [pc, #28]	; (800136c <main+0x84>)
 800134e:	f002 f9e5 	bl	800371c <HAL_GPIO_ReadPin>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <main+0x76>
		main_master();
 8001358:	f000 f8a4 	bl	80014a4 <main_master>
 800135c:	e001      	b.n	8001362 <main+0x7a>
	} else { //Slave loop
		main_slave();
 800135e:	f000 f967 	bl	8001630 <main_slave>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001362:	e7fe      	b.n	8001362 <main+0x7a>
 8001364:	40021400 	.word	0x40021400
 8001368:	40022000 	.word	0x40022000
 800136c:	40021800 	.word	0x40021800

08001370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b0b8      	sub	sp, #224	; 0xe0
 8001374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001376:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800137a:	2234      	movs	r2, #52	; 0x34
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f006 fc6b 	bl	8007c5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001384:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001394:	f107 0308 	add.w	r3, r7, #8
 8001398:	2290      	movs	r2, #144	; 0x90
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f006 fc5c 	bl	8007c5a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	4b3e      	ldr	r3, [pc, #248]	; (800149c <SystemClock_Config+0x12c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a3d      	ldr	r2, [pc, #244]	; (800149c <SystemClock_Config+0x12c>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b3b      	ldr	r3, [pc, #236]	; (800149c <SystemClock_Config+0x12c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ba:	4b39      	ldr	r3, [pc, #228]	; (80014a0 <SystemClock_Config+0x130>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a38      	ldr	r2, [pc, #224]	; (80014a0 <SystemClock_Config+0x130>)
 80013c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <SystemClock_Config+0x130>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80013d2:	230a      	movs	r3, #10
 80013d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d8:	2301      	movs	r3, #1
 80013da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013de:	2310      	movs	r3, #16
 80013e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013e4:	2301      	movs	r3, #1
 80013e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ea:	2302      	movs	r3, #2
 80013ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013f6:	2308      	movs	r3, #8
 80013f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 80013fc:	23c0      	movs	r3, #192	; 0xc0
 80013fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001402:	2302      	movs	r3, #2
 8001404:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001408:	2302      	movs	r3, #2
 800140a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001412:	4618      	mov	r0, r3
 8001414:	f002 fa64 	bl	80038e0 <HAL_RCC_OscConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800141e:	f000 fd2f 	bl	8001e80 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001422:	f002 fa0d 	bl	8003840 <HAL_PWREx_EnableOverDrive>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800142c:	f000 fd28 	bl	8001e80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001430:	230f      	movs	r3, #15
 8001432:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001436:	2302      	movs	r3, #2
 8001438:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001442:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001446:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800144a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800144e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001452:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001456:	2106      	movs	r1, #6
 8001458:	4618      	mov	r0, r3
 800145a:	f002 fdb1 	bl	8003fc0 <HAL_RCC_ClockConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001464:	f000 fd0c 	bl	8001e80 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 8001468:	f242 6320 	movw	r3, #9760	; 0x2620
 800146c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART8;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800146e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001472:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001474:	2300      	movs	r3, #0
 8001476:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001478:	2300      	movs	r3, #0
 800147a:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 800147c:	2300      	movs	r3, #0
 800147e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	4618      	mov	r0, r3
 8001486:	f003 f829 	bl	80044dc <HAL_RCCEx_PeriphCLKConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <SystemClock_Config+0x124>
  {
    Error_Handler();
 8001490:	f000 fcf6 	bl	8001e80 <Error_Handler>
  }
}
 8001494:	bf00      	nop
 8001496:	37e0      	adds	r7, #224	; 0xe0
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40023800 	.word	0x40023800
 80014a0:	40007000 	.word	0x40007000

080014a4 <main_master>:

/* USER CODE BEGIN 4 */
void main_master(void) {
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b0e5      	sub	sp, #404	; 0x194
 80014a8:	af1c      	add	r7, sp, #112	; 0x70
	//HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);  //ON = MS set to Master
	//uint8_t bufferOff[3] = {0x01, 0x03, 0x05};
	//uint8_t bufferOn[3] = {0x02, 0x04, 0x06};

	uint32_t lastInit = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	uint32_t lastBlinky = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	uint8_t writeBuffer[256] = {0};
 80014b6:	f107 0308 	add.w	r3, r7, #8
 80014ba:	4618      	mov	r0, r3
 80014bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c0:	461a      	mov	r2, r3
 80014c2:	2100      	movs	r1, #0
 80014c4:	f006 fbc9 	bl	8007c5a <memset>

	uint8_t readSensor = 3; //DMS: 0-5, PT100: 6-8
 80014c8:	2303      	movs	r3, #3
 80014ca:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	}
*/


	/* Performing the memory test */
	InitMemory();
 80014ce:	f7ff fb2b 	bl	8000b28 <InitMemory>
	uint32_t memoryTest = FastMemoryTest(huart4);
 80014d2:	4c53      	ldr	r4, [pc, #332]	; (8001620 <main_master+0x17c>)
 80014d4:	4668      	mov	r0, sp
 80014d6:	f104 0310 	add.w	r3, r4, #16
 80014da:	2270      	movs	r2, #112	; 0x70
 80014dc:	4619      	mov	r1, r3
 80014de:	f006 fbb1 	bl	8007c44 <memcpy>
 80014e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014e6:	f7ff f883 	bl	80005f0 <FastMemoryTest>
 80014ea:	4603      	mov	r3, r0
 80014ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	//while(1);



	for (int sensors = 0; sensors <= 8; sensors++) {
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80014f6:	e01b      	b.n	8001530 <main_master+0x8c>
		if (sensors <= 5)
 80014f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014fc:	2b05      	cmp	r3, #5
 80014fe:	dc09      	bgt.n	8001514 <main_master+0x70>
			adc_scan_start(sensors, 2000, 128, 0);
 8001500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001504:	b258      	sxtb	r0, r3
 8001506:	2300      	movs	r3, #0
 8001508:	2280      	movs	r2, #128	; 0x80
 800150a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800150e:	f000 f941 	bl	8001794 <adc_scan_start>
 8001512:	e008      	b.n	8001526 <main_master+0x82>
		else
			adc_scan_start(sensors, 2000, 1, 0);
 8001514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001518:	b258      	sxtb	r0, r3
 800151a:	2300      	movs	r3, #0
 800151c:	2201      	movs	r2, #1
 800151e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001522:	f000 f937 	bl	8001794 <adc_scan_start>
	for (int sensors = 0; sensors <= 8; sensors++) {
 8001526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800152a:	3301      	adds	r3, #1
 800152c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001534:	2b08      	cmp	r3, #8
 8001536:	dddf      	ble.n	80014f8 <main_master+0x54>
	}

	HAL_Delay(1000);
 8001538:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800153c:	f001 fa8c 	bl	8002a58 <HAL_Delay>

	uint8_t softgain = 1;
 8001540:	2301      	movs	r3, #1
 8001542:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint8_t offset = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
	uint8_t dout = 0;
 800154c:	1dfb      	adds	r3, r7, #7
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart4, (uint8_t*) &dout, sizeof(dout), HAL_MAX_DELAY);
 8001552:	1df9      	adds	r1, r7, #7
 8001554:	f04f 33ff 	mov.w	r3, #4294967295
 8001558:	2201      	movs	r2, #1
 800155a:	4831      	ldr	r0, [pc, #196]	; (8001620 <main_master+0x17c>)
 800155c:	f005 fae6 	bl	8006b2c <HAL_UART_Transmit>

	while (1) { //Master loop

		data = adc_scan(readSensor, 0x01);
 8001560:	f997 3113 	ldrsb.w	r3, [r7, #275]	; 0x113
 8001564:	2101      	movs	r1, #1
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f902 	bl	8001770 <adc_scan>
 800156c:	4603      	mov	r3, r0
 800156e:	461a      	mov	r2, r3
 8001570:	4b2c      	ldr	r3, [pc, #176]	; (8001624 <main_master+0x180>)
 8001572:	801a      	strh	r2, [r3, #0]
		dout = data * softgain + offset;
 8001574:	4b2b      	ldr	r3, [pc, #172]	; (8001624 <main_master+0x180>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 800157e:	fb12 f303 	smulbb	r3, r2, r3
 8001582:	b2da      	uxtb	r2, r3
 8001584:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8001588:	4413      	add	r3, r2
 800158a:	b2da      	uxtb	r2, r3
 800158c:	1dfb      	adds	r3, r7, #7
 800158e:	701a      	strb	r2, [r3, #0]
		write_DAPI(&dout);
 8001590:	1dfb      	adds	r3, r7, #7
 8001592:	4618      	mov	r0, r3
 8001594:	f000 fc62 	bl	8001e5c <write_DAPI>
		write_EXP(&dout);
 8001598:	1dfb      	adds	r3, r7, #7
 800159a:	4618      	mov	r0, r3
 800159c:	f000 fc4c 	bl	8001e38 <write_EXP>

		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin,
 80015a0:	2120      	movs	r1, #32
 80015a2:	4821      	ldr	r0, [pc, #132]	; (8001628 <main_master+0x184>)
 80015a4:	f002 f8ba 	bl	800371c <HAL_GPIO_ReadPin>
 80015a8:	4603      	mov	r3, r0
 80015aa:	461a      	mov	r2, r3
 80015ac:	2110      	movs	r1, #16
 80015ae:	481f      	ldr	r0, [pc, #124]	; (800162c <main_master+0x188>)
 80015b0:	f002 f8d4 	bl	800375c <HAL_GPIO_WritePin>
				HAL_GPIO_ReadPin(SODS_OPT_GPIO_Port, SODS_OPT_Pin));
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin,
 80015b4:	2180      	movs	r1, #128	; 0x80
 80015b6:	481c      	ldr	r0, [pc, #112]	; (8001628 <main_master+0x184>)
 80015b8:	f002 f8b0 	bl	800371c <HAL_GPIO_ReadPin>
 80015bc:	4603      	mov	r3, r0
 80015be:	461a      	mov	r2, r3
 80015c0:	2108      	movs	r1, #8
 80015c2:	481a      	ldr	r0, [pc, #104]	; (800162c <main_master+0x188>)
 80015c4:	f002 f8ca 	bl	800375c <HAL_GPIO_WritePin>
				HAL_GPIO_ReadPin(LO_OPT_GPIO_Port, LO_OPT_Pin));
		HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin,
 80015c8:	2140      	movs	r1, #64	; 0x40
 80015ca:	4817      	ldr	r0, [pc, #92]	; (8001628 <main_master+0x184>)
 80015cc:	f002 f8a6 	bl	800371c <HAL_GPIO_ReadPin>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015d8:	4813      	ldr	r0, [pc, #76]	; (8001628 <main_master+0x184>)
 80015da:	f002 f8bf 	bl	800375c <HAL_GPIO_WritePin>
				HAL_GPIO_ReadPin(SOE_OPT_GPIO_Port, SOE_OPT_Pin));

		if (lastInit + 5000 < HAL_GetTick()) {
 80015de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80015e2:	f241 3488 	movw	r4, #5000	; 0x1388
 80015e6:	441c      	add	r4, r3
 80015e8:	f001 fa2a 	bl	8002a40 <HAL_GetTick>
 80015ec:	4603      	mov	r3, r0
 80015ee:	429c      	cmp	r4, r3
 80015f0:	d203      	bcs.n	80015fa <main_master+0x156>
			lastInit = HAL_GetTick();
 80015f2:	f001 fa25 	bl	8002a40 <HAL_GetTick>
 80015f6:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
			 }
			 */

		}

		if (lastBlinky + 1000 < HAL_GetTick()) {
 80015fa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80015fe:	f503 747a 	add.w	r4, r3, #1000	; 0x3e8
 8001602:	f001 fa1d 	bl	8002a40 <HAL_GetTick>
 8001606:	4603      	mov	r3, r0
 8001608:	429c      	cmp	r4, r3
 800160a:	d2a9      	bcs.n	8001560 <main_master+0xbc>
			lastBlinky = HAL_GetTick();
 800160c:	f001 fa18 	bl	8002a40 <HAL_GetTick>
 8001610:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
			HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8001614:	2120      	movs	r1, #32
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <main_master+0x188>)
 8001618:	f002 f8cc 	bl	80037b4 <HAL_GPIO_TogglePin>
		data = adc_scan(readSensor, 0x01);
 800161c:	e7a0      	b.n	8001560 <main_master+0xbc>
 800161e:	bf00      	nop
 8001620:	200003d8 	.word	0x200003d8
 8001624:	2000008c 	.word	0x2000008c
 8001628:	40022000 	.word	0x40022000
 800162c:	40021400 	.word	0x40021400

08001630 <main_slave>:
		 HAL_Delay(100);
		 */
	}
}

void main_slave(void) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
	uint8_t buffer[1] = { 0x00 };
 8001636:	2300      	movs	r3, #0
 8001638:	713b      	strb	r3, [r7, #4]
	while (1) {
		HAL_UART_Receive(&huart5, buffer, sizeof(buffer), 5);
 800163a:	1d39      	adds	r1, r7, #4
 800163c:	2305      	movs	r3, #5
 800163e:	2201      	movs	r2, #1
 8001640:	481e      	ldr	r0, [pc, #120]	; (80016bc <main_slave+0x8c>)
 8001642:	f005 fb04 	bl	8006c4e <HAL_UART_Receive>
		if (buffer[0] == 0x01) {
 8001646:	793b      	ldrb	r3, [r7, #4]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d105      	bne.n	8001658 <main_slave+0x28>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	2110      	movs	r1, #16
 8001650:	481b      	ldr	r0, [pc, #108]	; (80016c0 <main_slave+0x90>)
 8001652:	f002 f883 	bl	800375c <HAL_GPIO_WritePin>
 8001656:	e02d      	b.n	80016b4 <main_slave+0x84>
		} else if (buffer[0] == 0x02) {
 8001658:	793b      	ldrb	r3, [r7, #4]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d105      	bne.n	800166a <main_slave+0x3a>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 800165e:	2201      	movs	r2, #1
 8001660:	2110      	movs	r1, #16
 8001662:	4817      	ldr	r0, [pc, #92]	; (80016c0 <main_slave+0x90>)
 8001664:	f002 f87a 	bl	800375c <HAL_GPIO_WritePin>
 8001668:	e024      	b.n	80016b4 <main_slave+0x84>
		} else if (buffer[0] == 0x03) {
 800166a:	793b      	ldrb	r3, [r7, #4]
 800166c:	2b03      	cmp	r3, #3
 800166e:	d105      	bne.n	800167c <main_slave+0x4c>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	2108      	movs	r1, #8
 8001674:	4812      	ldr	r0, [pc, #72]	; (80016c0 <main_slave+0x90>)
 8001676:	f002 f871 	bl	800375c <HAL_GPIO_WritePin>
 800167a:	e01b      	b.n	80016b4 <main_slave+0x84>
		} else if (buffer[0] == 0x04) {
 800167c:	793b      	ldrb	r3, [r7, #4]
 800167e:	2b04      	cmp	r3, #4
 8001680:	d105      	bne.n	800168e <main_slave+0x5e>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001682:	2201      	movs	r2, #1
 8001684:	2108      	movs	r1, #8
 8001686:	480e      	ldr	r0, [pc, #56]	; (80016c0 <main_slave+0x90>)
 8001688:	f002 f868 	bl	800375c <HAL_GPIO_WritePin>
 800168c:	e012      	b.n	80016b4 <main_slave+0x84>
		} else if (buffer[0] == 0x05) {
 800168e:	793b      	ldrb	r3, [r7, #4]
 8001690:	2b05      	cmp	r3, #5
 8001692:	d106      	bne.n	80016a2 <main_slave+0x72>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001694:	2200      	movs	r2, #0
 8001696:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800169a:	480a      	ldr	r0, [pc, #40]	; (80016c4 <main_slave+0x94>)
 800169c:	f002 f85e 	bl	800375c <HAL_GPIO_WritePin>
 80016a0:	e008      	b.n	80016b4 <main_slave+0x84>
		} else if (buffer[0] == 0x06) {
 80016a2:	793b      	ldrb	r3, [r7, #4]
 80016a4:	2b06      	cmp	r3, #6
 80016a6:	d105      	bne.n	80016b4 <main_slave+0x84>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80016a8:	2201      	movs	r2, #1
 80016aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <main_slave+0x94>)
 80016b0:	f002 f854 	bl	800375c <HAL_GPIO_WritePin>
		}
		buffer[1] = 0x00;
 80016b4:	2300      	movs	r3, #0
 80016b6:	717b      	strb	r3, [r7, #5]
		HAL_UART_Receive(&huart5, buffer, sizeof(buffer), 5);
 80016b8:	e7bf      	b.n	800163a <main_slave+0xa>
 80016ba:	bf00      	nop
 80016bc:	200002d8 	.word	0x200002d8
 80016c0:	40021400 	.word	0x40021400
 80016c4:	40022000 	.word	0x40022000

080016c8 <cs_enable>:
	}
}

int cs_enable(int8_t id) {
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(port_from_id(id), pin_from_id(id), GPIO_PIN_RESET);
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 fa3a 	bl	8001b50 <port_from_id>
 80016dc:	4604      	mov	r4, r0
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f9f6 	bl	8001ad4 <pin_from_id>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2200      	movs	r2, #0
 80016ec:	4619      	mov	r1, r3
 80016ee:	4620      	mov	r0, r4
 80016f0:	f002 f834 	bl	800375c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80016f4:	2001      	movs	r0, #1
 80016f6:	f001 f9af 	bl	8002a58 <HAL_Delay>
	return 0;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bd90      	pop	{r4, r7, pc}

08001704 <cs_disable>:

int cs_disable(int8_t id) {
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(port_from_id(id), pin_from_id(id), GPIO_PIN_SET);
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	4618      	mov	r0, r3
 8001714:	f000 fa1c 	bl	8001b50 <port_from_id>
 8001718:	4604      	mov	r4, r0
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f9d8 	bl	8001ad4 <pin_from_id>
 8001724:	4603      	mov	r3, r0
 8001726:	2201      	movs	r2, #1
 8001728:	4619      	mov	r1, r3
 800172a:	4620      	mov	r0, r4
 800172c:	f002 f816 	bl	800375c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001730:	2001      	movs	r0, #1
 8001732:	f001 f991 	bl	8002a58 <HAL_Delay>
	return 0;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bd90      	pop	{r4, r7, pc}

08001740 <wr_spi>:

int wr_spi(int8_t id, uint8_t cmd) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	460a      	mov	r2, r1
 800174a:	71fb      	strb	r3, [r7, #7]
 800174c:	4613      	mov	r3, r2
 800174e:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Transmit(get_hspi_from_id(id), &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	4618      	mov	r0, r3
 8001756:	f000 fab9 	bl	8001ccc <get_hspi_from_id>
 800175a:	1db9      	adds	r1, r7, #6
 800175c:	f04f 33ff 	mov.w	r3, #4294967295
 8001760:	2201      	movs	r2, #1
 8001762:	f004 f9d3 	bl	8005b0c <HAL_SPI_Transmit>
	return 0;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <adc_scan>:

uint16_t adc_scan(int8_t id, uint8_t chn) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	460a      	mov	r2, r1
 800177a:	71fb      	strb	r3, [r7, #7]
 800177c:	4613      	mov	r3, r2
 800177e:	71bb      	strb	r3, [r7, #6]
	return rd_data(id);
 8001780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001784:	4618      	mov	r0, r3
 8001786:	f000 f947 	bl	8001a18 <rd_data>
 800178a:	4603      	mov	r3, r0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <adc_scan_start>:

int16_t adc_scan_start(int8_t id, uint_least16_t drate, uint_least8_t gain,
		uint_least16_t current) {
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	4604      	mov	r4, r0
 800179c:	4608      	mov	r0, r1
 800179e:	4611      	mov	r1, r2
 80017a0:	461a      	mov	r2, r3
 80017a2:	4623      	mov	r3, r4
 80017a4:	71fb      	strb	r3, [r7, #7]
 80017a6:	4603      	mov	r3, r0
 80017a8:	80bb      	strh	r3, [r7, #4]
 80017aa:	460b      	mov	r3, r1
 80017ac:	71bb      	strb	r3, [r7, #6]
 80017ae:	4613      	mov	r3, r2
 80017b0:	807b      	strh	r3, [r7, #2]
	int16_t r = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	81fb      	strh	r3, [r7, #14]
	switch (drate) {
 80017b6:	88bb      	ldrh	r3, [r7, #4]
 80017b8:	2ba0      	cmp	r3, #160	; 0xa0
 80017ba:	d02d      	beq.n	8001818 <adc_scan_start+0x84>
 80017bc:	2ba0      	cmp	r3, #160	; 0xa0
 80017be:	dc0b      	bgt.n	80017d8 <adc_scan_start+0x44>
 80017c0:	2b0a      	cmp	r3, #10
 80017c2:	d01d      	beq.n	8001800 <adc_scan_start+0x6c>
 80017c4:	2b0a      	cmp	r3, #10
 80017c6:	dc02      	bgt.n	80017ce <adc_scan_start+0x3a>
 80017c8:	2b05      	cmp	r3, #5
 80017ca:	d016      	beq.n	80017fa <adc_scan_start+0x66>
 80017cc:	e01e      	b.n	800180c <adc_scan_start+0x78>
 80017ce:	2b14      	cmp	r3, #20
 80017d0:	d019      	beq.n	8001806 <adc_scan_start+0x72>
 80017d2:	2b50      	cmp	r3, #80	; 0x50
 80017d4:	d01d      	beq.n	8001812 <adc_scan_start+0x7e>
 80017d6:	e019      	b.n	800180c <adc_scan_start+0x78>
 80017d8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80017dc:	d022      	beq.n	8001824 <adc_scan_start+0x90>
 80017de:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80017e2:	dc03      	bgt.n	80017ec <adc_scan_start+0x58>
 80017e4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80017e8:	d019      	beq.n	800181e <adc_scan_start+0x8a>
 80017ea:	e00f      	b.n	800180c <adc_scan_start+0x78>
 80017ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017f0:	d01b      	beq.n	800182a <adc_scan_start+0x96>
 80017f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80017f6:	d01b      	beq.n	8001830 <adc_scan_start+0x9c>
 80017f8:	e008      	b.n	800180c <adc_scan_start+0x78>
	case 5:
		drate = SYS0_DOR5;
 80017fa:	2300      	movs	r3, #0
 80017fc:	80bb      	strh	r3, [r7, #4]
		break;
 80017fe:	e01a      	b.n	8001836 <adc_scan_start+0xa2>
	case 10:
		drate = SYS0_DOR10;
 8001800:	2301      	movs	r3, #1
 8001802:	80bb      	strh	r3, [r7, #4]
		break;
 8001804:	e017      	b.n	8001836 <adc_scan_start+0xa2>
	case 20:
		drate = SYS0_DOR20;
 8001806:	2302      	movs	r3, #2
 8001808:	80bb      	strh	r3, [r7, #4]
		break;
 800180a:	e014      	b.n	8001836 <adc_scan_start+0xa2>
	default:
	case 40:
		drate = SYS0_DOR40;
 800180c:	2303      	movs	r3, #3
 800180e:	80bb      	strh	r3, [r7, #4]
		break;
 8001810:	e011      	b.n	8001836 <adc_scan_start+0xa2>
	case 80:
		drate = SYS0_DOR80;
 8001812:	2304      	movs	r3, #4
 8001814:	80bb      	strh	r3, [r7, #4]
		break;
 8001816:	e00e      	b.n	8001836 <adc_scan_start+0xa2>
	case 160:
		drate = SYS0_DOR160;
 8001818:	2305      	movs	r3, #5
 800181a:	80bb      	strh	r3, [r7, #4]
		break;
 800181c:	e00b      	b.n	8001836 <adc_scan_start+0xa2>
	case 320:
		drate = SYS0_DOR320;
 800181e:	2306      	movs	r3, #6
 8001820:	80bb      	strh	r3, [r7, #4]
		break;
 8001822:	e008      	b.n	8001836 <adc_scan_start+0xa2>
	case 640:
		drate = SYS0_DOR640;
 8001824:	2307      	movs	r3, #7
 8001826:	80bb      	strh	r3, [r7, #4]
		break;
 8001828:	e005      	b.n	8001836 <adc_scan_start+0xa2>
	case 1000:
		drate = SYS0_DOR1000;
 800182a:	2308      	movs	r3, #8
 800182c:	80bb      	strh	r3, [r7, #4]
		break;
 800182e:	e002      	b.n	8001836 <adc_scan_start+0xa2>
	case 2000:
		drate = SYS0_DOR2000;
 8001830:	2309      	movs	r3, #9
 8001832:	80bb      	strh	r3, [r7, #4]
		break;
 8001834:	bf00      	nop
	}

	switch (gain) {
 8001836:	79bb      	ldrb	r3, [r7, #6]
 8001838:	2b10      	cmp	r3, #16
 800183a:	d01a      	beq.n	8001872 <adc_scan_start+0xde>
 800183c:	2b10      	cmp	r3, #16
 800183e:	dc06      	bgt.n	800184e <adc_scan_start+0xba>
 8001840:	2b04      	cmp	r3, #4
 8001842:	d010      	beq.n	8001866 <adc_scan_start+0xd2>
 8001844:	2b08      	cmp	r3, #8
 8001846:	d011      	beq.n	800186c <adc_scan_start+0xd8>
 8001848:	2b02      	cmp	r3, #2
 800184a:	d009      	beq.n	8001860 <adc_scan_start+0xcc>
 800184c:	e005      	b.n	800185a <adc_scan_start+0xc6>
 800184e:	2b40      	cmp	r3, #64	; 0x40
 8001850:	d015      	beq.n	800187e <adc_scan_start+0xea>
 8001852:	2b80      	cmp	r3, #128	; 0x80
 8001854:	d016      	beq.n	8001884 <adc_scan_start+0xf0>
 8001856:	2b20      	cmp	r3, #32
 8001858:	d00e      	beq.n	8001878 <adc_scan_start+0xe4>
	default:
	case 1:
		gain = SYS0_PGA1;
 800185a:	2300      	movs	r3, #0
 800185c:	71bb      	strb	r3, [r7, #6]
		break;
 800185e:	e014      	b.n	800188a <adc_scan_start+0xf6>
	case 2:
		gain = SYS0_PGA2;
 8001860:	2310      	movs	r3, #16
 8001862:	71bb      	strb	r3, [r7, #6]
		break;
 8001864:	e011      	b.n	800188a <adc_scan_start+0xf6>
	case 4:
		gain = SYS0_PGA4;
 8001866:	2320      	movs	r3, #32
 8001868:	71bb      	strb	r3, [r7, #6]
		break;
 800186a:	e00e      	b.n	800188a <adc_scan_start+0xf6>
	case 8:
		gain = SYS0_PGA8;
 800186c:	2330      	movs	r3, #48	; 0x30
 800186e:	71bb      	strb	r3, [r7, #6]
		break;
 8001870:	e00b      	b.n	800188a <adc_scan_start+0xf6>
	case 16:
		gain = SYS0_PGA16;
 8001872:	2340      	movs	r3, #64	; 0x40
 8001874:	71bb      	strb	r3, [r7, #6]
		break;
 8001876:	e008      	b.n	800188a <adc_scan_start+0xf6>
	case 32:
		gain = SYS0_PGA32;
 8001878:	2350      	movs	r3, #80	; 0x50
 800187a:	71bb      	strb	r3, [r7, #6]
		break;
 800187c:	e005      	b.n	800188a <adc_scan_start+0xf6>
	case 64:
		gain = SYS0_PGA64;
 800187e:	2360      	movs	r3, #96	; 0x60
 8001880:	71bb      	strb	r3, [r7, #6]
		break;
 8001882:	e002      	b.n	800188a <adc_scan_start+0xf6>
	case 128:
		gain = SYS0_PGA128;
 8001884:	2370      	movs	r3, #112	; 0x70
 8001886:	71bb      	strb	r3, [r7, #6]
		break;
 8001888:	bf00      	nop
	}

	switch (current) {
 800188a:	887b      	ldrh	r3, [r7, #2]
 800188c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001890:	d020      	beq.n	80018d4 <adc_scan_start+0x140>
 8001892:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001896:	dc06      	bgt.n	80018a6 <adc_scan_start+0x112>
 8001898:	2b64      	cmp	r3, #100	; 0x64
 800189a:	d015      	beq.n	80018c8 <adc_scan_start+0x134>
 800189c:	2bfa      	cmp	r3, #250	; 0xfa
 800189e:	d016      	beq.n	80018ce <adc_scan_start+0x13a>
 80018a0:	2b32      	cmp	r3, #50	; 0x32
 80018a2:	d00e      	beq.n	80018c2 <adc_scan_start+0x12e>
 80018a4:	e00a      	b.n	80018bc <adc_scan_start+0x128>
 80018a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018aa:	d019      	beq.n	80018e0 <adc_scan_start+0x14c>
 80018ac:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d018      	beq.n	80018e6 <adc_scan_start+0x152>
 80018b4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d00e      	beq.n	80018da <adc_scan_start+0x146>
	default:
	case 0:
		current = IDAC0_MAGOFF;
 80018bc:	2300      	movs	r3, #0
 80018be:	807b      	strh	r3, [r7, #2]
		break;
 80018c0:	e014      	b.n	80018ec <adc_scan_start+0x158>
	case 50:
		current = IDAC0_MAG50UA;
 80018c2:	2301      	movs	r3, #1
 80018c4:	807b      	strh	r3, [r7, #2]
		break;
 80018c6:	e011      	b.n	80018ec <adc_scan_start+0x158>
	case 100:
		current = IDAC0_MAG100UA;
 80018c8:	2302      	movs	r3, #2
 80018ca:	807b      	strh	r3, [r7, #2]
		break;
 80018cc:	e00e      	b.n	80018ec <adc_scan_start+0x158>
	case 250:
		current = IDAC0_MAG250UA;
 80018ce:	2303      	movs	r3, #3
 80018d0:	807b      	strh	r3, [r7, #2]
		break;
 80018d2:	e00b      	b.n	80018ec <adc_scan_start+0x158>
	case 500:
		current = IDAC0_MAG500UA;
 80018d4:	2304      	movs	r3, #4
 80018d6:	807b      	strh	r3, [r7, #2]
		break;
 80018d8:	e008      	b.n	80018ec <adc_scan_start+0x158>
	case 750:
		current = IDAC0_MAG750UA;
 80018da:	2305      	movs	r3, #5
 80018dc:	807b      	strh	r3, [r7, #2]
		break;
 80018de:	e005      	b.n	80018ec <adc_scan_start+0x158>
	case 1000:
		current = IDAC0_MAG1000UA;
 80018e0:	2306      	movs	r3, #6
 80018e2:	807b      	strh	r3, [r7, #2]
		break;
 80018e4:	e002      	b.n	80018ec <adc_scan_start+0x158>
	case 1500:
		current = IDAC0_MAG1500UA;
 80018e6:	2307      	movs	r3, #7
 80018e8:	807b      	strh	r3, [r7, #2]
		break;
 80018ea:	bf00      	nop
	}

	cs_enable(id);
 80018ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fee9 	bl	80016c8 <cs_enable>

	if (id <= 5) {	//DMS
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	2b05      	cmp	r3, #5
 80018fc:	dc40      	bgt.n	8001980 <adc_scan_start+0x1ec>

		wr_cmd(id, CMD_RESET);
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	2106      	movs	r1, #6
 8001904:	4618      	mov	r0, r3
 8001906:	f000 fa1d 	bl	8001d44 <wr_cmd>
		wr_cmd(id, CMD_SDATAC);
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	2116      	movs	r1, #22
 8001910:	4618      	mov	r0, r3
 8001912:	f000 fa17 	bl	8001d44 <wr_cmd>
		wr_reg(id, REG_MUX0, 0b00000001);
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	2201      	movs	r2, #1
 800191c:	2100      	movs	r1, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f000 fa50 	bl	8001dc4 <wr_reg>
		wr_reg(id, REG_VBIAS, 0x00);
 8001924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001928:	2200      	movs	r2, #0
 800192a:	2101      	movs	r1, #1
 800192c:	4618      	mov	r0, r3
 800192e:	f000 fa49 	bl	8001dc4 <wr_reg>
		wr_reg(id, REG_MUX1, 0b00110000);
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	2230      	movs	r2, #48	; 0x30
 8001938:	2102      	movs	r1, #2
 800193a:	4618      	mov	r0, r3
 800193c:	f000 fa42 	bl	8001dc4 <wr_reg>
		wr_reg(id, REG_SYS0, gain | drate);
 8001940:	88bb      	ldrh	r3, [r7, #4]
 8001942:	b2da      	uxtb	r2, r3
 8001944:	79bb      	ldrb	r3, [r7, #6]
 8001946:	4313      	orrs	r3, r2
 8001948:	b2da      	uxtb	r2, r3
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	2103      	movs	r1, #3
 8001950:	4618      	mov	r0, r3
 8001952:	f000 fa37 	bl	8001dc4 <wr_reg>
		wr_reg(id, REG_IDAC0, 0x00);
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	2200      	movs	r2, #0
 800195c:	210a      	movs	r1, #10
 800195e:	4618      	mov	r0, r3
 8001960:	f000 fa30 	bl	8001dc4 <wr_reg>
		wr_reg(id, REG_IDAC1, 0b11001100);
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	22cc      	movs	r2, #204	; 0xcc
 800196a:	210b      	movs	r1, #11
 800196c:	4618      	mov	r0, r3
 800196e:	f000 fa29 	bl	8001dc4 <wr_reg>
		wr_cmd(id, CMD_SYNC);
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	2104      	movs	r1, #4
 8001978:	4618      	mov	r0, r3
 800197a:	f000 f9e3 	bl	8001d44 <wr_cmd>
 800197e:	e040      	b.n	8001a02 <adc_scan_start+0x26e>
		//uint8_t rdata = CMD_RDATAC;
		//HAL_SPI_Transmit(get_hspi_from_id(id), &rdata, 2, HAL_MAX_DELAY);

	} else {	//PT100

		wr_cmd(id, CMD_RESET);
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	2106      	movs	r1, #6
 8001986:	4618      	mov	r0, r3
 8001988:	f000 f9dc 	bl	8001d44 <wr_cmd>
		wr_cmd(id, CMD_SDATAC);
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	2116      	movs	r1, #22
 8001992:	4618      	mov	r0, r3
 8001994:	f000 f9d6 	bl	8001d44 <wr_cmd>
		wr_reg(id, REG_VBIAS, 0x00);
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	2200      	movs	r2, #0
 800199e:	2101      	movs	r1, #1
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 fa0f 	bl	8001dc4 <wr_reg>
		wr_reg(id, REG_MUX0, 0x01); //?
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	2201      	movs	r2, #1
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 fa08 	bl	8001dc4 <wr_reg>
		wr_reg(id, REG_MUX1, 0b00100000); //int ref on, REFP0/REFN0 ref inp selected
 80019b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b8:	2220      	movs	r2, #32
 80019ba:	2102      	movs	r1, #2
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 fa01 	bl	8001dc4 <wr_reg>
		//wr_reg(id, REG_VBIAS, 0x00);
		//wr_reg(id, REG_MUX1, 0b00110000);
		wr_reg(id, REG_SYS0, gain | drate); //Gain 4, SPS 20
 80019c2:	88bb      	ldrh	r3, [r7, #4]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	79bb      	ldrb	r3, [r7, #6]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	2103      	movs	r1, #3
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f9f6 	bl	8001dc4 <wr_reg>
		wr_reg(id, REG_IDAC0, current); //1mA;
 80019d8:	887b      	ldrh	r3, [r7, #2]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e0:	210a      	movs	r1, #10
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f9ee 	bl	8001dc4 <wr_reg>
		wr_reg(id, REG_IDAC1, 0b00000010); //IDAC1 = AIN0, IDAC2 = AIN3
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	2202      	movs	r2, #2
 80019ee:	210b      	movs	r1, #11
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 f9e7 	bl	8001dc4 <wr_reg>
		wr_cmd(id, CMD_SYNC);
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2104      	movs	r1, #4
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 f9a1 	bl	8001d44 <wr_cmd>
		//uint8_t rdata = CMD_RDATAC;
		//HAL_SPI_Transmit(get_hspi_from_id(id), &rdata, 2, HAL_MAX_DELAY);
	}

	cs_disable(id);
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fe7c 	bl	8001704 <cs_disable>

	return r;
 8001a0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd90      	pop	{r4, r7, pc}

08001a18 <rd_data>:

uint16_t rd_data(int8_t id) {
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af02      	add	r7, sp, #8
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
	uint8_t d1, d3;
	uint16_t dR;

	while (HAL_GPIO_ReadPin(port_drdy_from_id(id), pin_drdy_from_id(id))
 8001a22:	bf00      	nop
 8001a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 f911 	bl	8001c50 <port_drdy_from_id>
 8001a2e:	4604      	mov	r4, r0
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 f8cb 	bl	8001bd0 <pin_drdy_from_id>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4620      	mov	r0, r4
 8001a40:	f001 fe6c 	bl	800371c <HAL_GPIO_ReadPin>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d0ec      	beq.n	8001a24 <rd_data+0xc>
			== GPIO_PIN_SET)
		;
	cs_enable(id);
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fe3a 	bl	80016c8 <cs_enable>

	uint8_t rdata = CMD_RDATA;
 8001a54:	2312      	movs	r3, #18
 8001a56:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_Transmit(get_hspi_from_id(id), &rdata, 2, HAL_MAX_DELAY);
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 f935 	bl	8001ccc <get_hspi_from_id>
 8001a62:	f107 010b 	add.w	r1, r7, #11
 8001a66:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	f004 f84e 	bl	8005b0c <HAL_SPI_Transmit>
	//HAL_Delay(1);

	uint8_t nope = CMD_NOP;
 8001a70:	23ff      	movs	r3, #255	; 0xff
 8001a72:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_TransmitReceive(get_hspi_from_id(id), &nope, &d1, 2, HAL_MAX_DELAY);
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 f927 	bl	8001ccc <get_hspi_from_id>
 8001a7e:	f107 020d 	add.w	r2, r7, #13
 8001a82:	f107 010a 	add.w	r1, r7, #10
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	f004 fadb 	bl	8006048 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(get_hspi_from_id(id), &nope, &d3, 2, HAL_MAX_DELAY);
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f918 	bl	8001ccc <get_hspi_from_id>
 8001a9c:	f107 020c 	add.w	r2, r7, #12
 8001aa0:	f107 010a 	add.w	r1, r7, #10
 8001aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	2302      	movs	r3, #2
 8001aac:	f004 facc 	bl	8006048 <HAL_SPI_TransmitReceive>
	dR = (d1 << 8) | d3;
 8001ab0:	7b7b      	ldrb	r3, [r7, #13]
 8001ab2:	021b      	lsls	r3, r3, #8
 8001ab4:	b21a      	sxth	r2, r3
 8001ab6:	7b3b      	ldrb	r3, [r7, #12]
 8001ab8:	b21b      	sxth	r3, r3
 8001aba:	4313      	orrs	r3, r2
 8001abc:	b21b      	sxth	r3, r3
 8001abe:	81fb      	strh	r3, [r7, #14]
	cs_disable(id);
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fe1d 	bl	8001704 <cs_disable>

	return dR;
 8001aca:	89fb      	ldrh	r3, [r7, #14]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd90      	pop	{r4, r7, pc}

08001ad4 <pin_from_id>:
	//cs_disable(id);
	return d1;
}

//
uint16_t pin_from_id(int8_t id) {
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d82c      	bhi.n	8001b40 <pin_from_id+0x6c>
 8001ae6:	a201      	add	r2, pc, #4	; (adr r2, 8001aec <pin_from_id+0x18>)
 8001ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aec:	08001b11 	.word	0x08001b11
 8001af0:	08001b17 	.word	0x08001b17
 8001af4:	08001b1d 	.word	0x08001b1d
 8001af8:	08001b23 	.word	0x08001b23
 8001afc:	08001b27 	.word	0x08001b27
 8001b00:	08001b2b 	.word	0x08001b2b
 8001b04:	08001b2f 	.word	0x08001b2f
 8001b08:	08001b35 	.word	0x08001b35
 8001b0c:	08001b3b 	.word	0x08001b3b
	case 0: //DMS 1
		return nCS_DMS1_Pin;
 8001b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b14:	e016      	b.n	8001b44 <pin_from_id+0x70>
	case 1: //DMS 2
		return nCS_DMS2_Pin;
 8001b16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b1a:	e013      	b.n	8001b44 <pin_from_id+0x70>
	case 2: //DMS 3
		return nCS_DMS3_Pin;
 8001b1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b20:	e010      	b.n	8001b44 <pin_from_id+0x70>
	case 3: //DMS 4
		return nCS_DMS4_Pin;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e00e      	b.n	8001b44 <pin_from_id+0x70>
	case 4: //DMS 5
		return nCS_DMS5_Pin;
 8001b26:	2302      	movs	r3, #2
 8001b28:	e00c      	b.n	8001b44 <pin_from_id+0x70>
	case 5: //DMS 6
		return nCS_DMS6_Pin;
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	e00a      	b.n	8001b44 <pin_from_id+0x70>
	case 6: //PT 1
		return nCS_PT1_Pin;
 8001b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b32:	e007      	b.n	8001b44 <pin_from_id+0x70>
	case 7: //PT 2
		return nCS_PT2_Pin;
 8001b34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b38:	e004      	b.n	8001b44 <pin_from_id+0x70>
	case 8: //PT 3
		return nCS_PT3_Pin;
 8001b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b3e:	e001      	b.n	8001b44 <pin_from_id+0x70>
	default: //DMS 1
		return nCS_DMS1_Pin;
 8001b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	}
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <port_from_id>:

//
GPIO_TypeDef* port_from_id(int8_t id) {
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d826      	bhi.n	8001bb0 <port_from_id+0x60>
 8001b62:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <port_from_id+0x18>)
 8001b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b68:	08001b8d 	.word	0x08001b8d
 8001b6c:	08001b91 	.word	0x08001b91
 8001b70:	08001b95 	.word	0x08001b95
 8001b74:	08001b99 	.word	0x08001b99
 8001b78:	08001b9d 	.word	0x08001b9d
 8001b7c:	08001ba1 	.word	0x08001ba1
 8001b80:	08001ba5 	.word	0x08001ba5
 8001b84:	08001ba9 	.word	0x08001ba9
 8001b88:	08001bad 	.word	0x08001bad
	case 0: //DMS 1
		return nCS_DMS1_GPIO_Port;
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <port_from_id+0x70>)
 8001b8e:	e010      	b.n	8001bb2 <port_from_id+0x62>
	case 1: //DMS 2
		return nCS_DMS2_GPIO_Port;
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <port_from_id+0x70>)
 8001b92:	e00e      	b.n	8001bb2 <port_from_id+0x62>
	case 2: //DMS 3
		return nCS_DMS3_GPIO_Port;
 8001b94:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <port_from_id+0x70>)
 8001b96:	e00c      	b.n	8001bb2 <port_from_id+0x62>
	case 3: //DMS 4
		return nCS_DMS4_GPIO_Port;
 8001b98:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <port_from_id+0x74>)
 8001b9a:	e00a      	b.n	8001bb2 <port_from_id+0x62>
	case 4: //DMS 5
		return nCS_DMS5_GPIO_Port;
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <port_from_id+0x74>)
 8001b9e:	e008      	b.n	8001bb2 <port_from_id+0x62>
	case 5: //DMS 6
		return nCS_DMS6_GPIO_Port;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <port_from_id+0x78>)
 8001ba2:	e006      	b.n	8001bb2 <port_from_id+0x62>
	case 6: //PT 1
		return nCS_PT1_GPIO_Port;
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <port_from_id+0x7c>)
 8001ba6:	e004      	b.n	8001bb2 <port_from_id+0x62>
	case 7: //PT 2
		return nCS_PT2_GPIO_Port;
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <port_from_id+0x7c>)
 8001baa:	e002      	b.n	8001bb2 <port_from_id+0x62>
	case 8: //PT 3
		return nCS_PT3_GPIO_Port;
 8001bac:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <port_from_id+0x7c>)
 8001bae:	e000      	b.n	8001bb2 <port_from_id+0x62>
	default: //DMS 1
		return nCS_DMS1_GPIO_Port;
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <port_from_id+0x70>)
	}
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40021400 	.word	0x40021400
 8001bc4:	40021800 	.word	0x40021800
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40020c00 	.word	0x40020c00

08001bd0 <pin_drdy_from_id>:

//
uint16_t pin_drdy_from_id(int8_t id) {
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d82e      	bhi.n	8001c40 <pin_drdy_from_id+0x70>
 8001be2:	a201      	add	r2, pc, #4	; (adr r2, 8001be8 <pin_drdy_from_id+0x18>)
 8001be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be8:	08001c0d 	.word	0x08001c0d
 8001bec:	08001c11 	.word	0x08001c11
 8001bf0:	08001c17 	.word	0x08001c17
 8001bf4:	08001c1d 	.word	0x08001c1d
 8001bf8:	08001c23 	.word	0x08001c23
 8001bfc:	08001c29 	.word	0x08001c29
 8001c00:	08001c2f 	.word	0x08001c2f
 8001c04:	08001c35 	.word	0x08001c35
 8001c08:	08001c3b 	.word	0x08001c3b
	case 0: //DMS 1
		return nDRDY_DMS1_Pin;
 8001c0c:	2310      	movs	r3, #16
 8001c0e:	e018      	b.n	8001c42 <pin_drdy_from_id+0x72>
	case 1: //DMS 2
		return nDRDY_DMS2_Pin;
 8001c10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c14:	e015      	b.n	8001c42 <pin_drdy_from_id+0x72>
	case 2: //DMS 3
		return nDRDY_DMS3_Pin;
 8001c16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c1a:	e012      	b.n	8001c42 <pin_drdy_from_id+0x72>
	case 3: //DMS 4
		return nDRDY_DMS4_Pin;
 8001c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c20:	e00f      	b.n	8001c42 <pin_drdy_from_id+0x72>
	case 4: //DMS 5
		return nDRDY_DMS5_Pin;
 8001c22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c26:	e00c      	b.n	8001c42 <pin_drdy_from_id+0x72>
	case 5: //DMS 6
		return nDRDY_DMS6_Pin;
 8001c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2c:	e009      	b.n	8001c42 <pin_drdy_from_id+0x72>
	case 6: //PT 1
		return nDRDY_PT1_Pin;
 8001c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c32:	e006      	b.n	8001c42 <pin_drdy_from_id+0x72>
	case 7: //PT 2
		return nDRDY_PT2_Pin;
 8001c34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c38:	e003      	b.n	8001c42 <pin_drdy_from_id+0x72>
	case 8: //PT 3
		return nDRDY_PT3_Pin;
 8001c3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c3e:	e000      	b.n	8001c42 <pin_drdy_from_id+0x72>
	default: //DMS 1
		return nDRDY_DMS1_Pin;
 8001c40:	2310      	movs	r3, #16
	}
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop

08001c50 <port_drdy_from_id>:

//
GPIO_TypeDef* port_drdy_from_id(int8_t id) {
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d826      	bhi.n	8001cb0 <port_drdy_from_id+0x60>
 8001c62:	a201      	add	r2, pc, #4	; (adr r2, 8001c68 <port_drdy_from_id+0x18>)
 8001c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c68:	08001c8d 	.word	0x08001c8d
 8001c6c:	08001c91 	.word	0x08001c91
 8001c70:	08001c95 	.word	0x08001c95
 8001c74:	08001c99 	.word	0x08001c99
 8001c78:	08001c9d 	.word	0x08001c9d
 8001c7c:	08001ca1 	.word	0x08001ca1
 8001c80:	08001ca5 	.word	0x08001ca5
 8001c84:	08001ca9 	.word	0x08001ca9
 8001c88:	08001cad 	.word	0x08001cad
	case 0: //DMS 1
		return nDRDY_DMS1_GPIO_Port;
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <port_drdy_from_id+0x70>)
 8001c8e:	e010      	b.n	8001cb2 <port_drdy_from_id+0x62>
	case 1: //DMS 2
		return nDRDY_DMS2_GPIO_Port;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <port_drdy_from_id+0x74>)
 8001c92:	e00e      	b.n	8001cb2 <port_drdy_from_id+0x62>
	case 2: //DMS 3
		return nDRDY_DMS3_GPIO_Port;
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <port_drdy_from_id+0x74>)
 8001c96:	e00c      	b.n	8001cb2 <port_drdy_from_id+0x62>
	case 3: //DMS 4
		return nDRDY_DMS4_GPIO_Port;
 8001c98:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <port_drdy_from_id+0x74>)
 8001c9a:	e00a      	b.n	8001cb2 <port_drdy_from_id+0x62>
	case 4: //DMS 5
		return nDRDY_DMS5_GPIO_Port;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <port_drdy_from_id+0x74>)
 8001c9e:	e008      	b.n	8001cb2 <port_drdy_from_id+0x62>
	case 5: //DMS 6
		return nDRDY_DMS6_GPIO_Port;
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <port_drdy_from_id+0x74>)
 8001ca2:	e006      	b.n	8001cb2 <port_drdy_from_id+0x62>
	case 6: //PT 1
		return nDRDY_PT1_GPIO_Port;
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <port_drdy_from_id+0x78>)
 8001ca6:	e004      	b.n	8001cb2 <port_drdy_from_id+0x62>
	case 7: //PT 2
		return nDRDY_PT2_GPIO_Port;
 8001ca8:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <port_drdy_from_id+0x78>)
 8001caa:	e002      	b.n	8001cb2 <port_drdy_from_id+0x62>
	case 8: //PT 3
		return nDRDY_PT3_GPIO_Port;
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <port_drdy_from_id+0x78>)
 8001cae:	e000      	b.n	8001cb2 <port_drdy_from_id+0x62>
	default: //DMS 1
		return nDRDY_DMS1_GPIO_Port;
 8001cb0:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <port_drdy_from_id+0x70>)
	}
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40021800 	.word	0x40021800
 8001cc4:	40020000 	.word	0x40020000
 8001cc8:	40022400 	.word	0x40022400

08001ccc <get_hspi_from_id>:

//
SPI_HandleTypeDef* get_hspi_from_id(int8_t id) {
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d826      	bhi.n	8001d2c <get_hspi_from_id+0x60>
 8001cde:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <get_hspi_from_id+0x18>)
 8001ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce4:	08001d09 	.word	0x08001d09
 8001ce8:	08001d0d 	.word	0x08001d0d
 8001cec:	08001d11 	.word	0x08001d11
 8001cf0:	08001d15 	.word	0x08001d15
 8001cf4:	08001d19 	.word	0x08001d19
 8001cf8:	08001d1d 	.word	0x08001d1d
 8001cfc:	08001d21 	.word	0x08001d21
 8001d00:	08001d25 	.word	0x08001d25
 8001d04:	08001d29 	.word	0x08001d29
	case 0: //DMS 1
		return &hspi4;
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <get_hspi_from_id+0x70>)
 8001d0a:	e010      	b.n	8001d2e <get_hspi_from_id+0x62>
	case 1: //DMS 2
		return &hspi4;
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <get_hspi_from_id+0x70>)
 8001d0e:	e00e      	b.n	8001d2e <get_hspi_from_id+0x62>
	case 2: //DMS 3
		return &hspi4;
 8001d10:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <get_hspi_from_id+0x70>)
 8001d12:	e00c      	b.n	8001d2e <get_hspi_from_id+0x62>
	case 3: //DMS 4
		return &hspi4;
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <get_hspi_from_id+0x70>)
 8001d16:	e00a      	b.n	8001d2e <get_hspi_from_id+0x62>
	case 4: //DMS 5
		return &hspi4;
 8001d18:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <get_hspi_from_id+0x70>)
 8001d1a:	e008      	b.n	8001d2e <get_hspi_from_id+0x62>
	case 5: //DMS 6
		return &hspi4;
 8001d1c:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <get_hspi_from_id+0x70>)
 8001d1e:	e006      	b.n	8001d2e <get_hspi_from_id+0x62>
	case 6: //PT 1
		return &hspi3;
 8001d20:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <get_hspi_from_id+0x74>)
 8001d22:	e004      	b.n	8001d2e <get_hspi_from_id+0x62>
	case 7: //PT 2
		return &hspi3;
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <get_hspi_from_id+0x74>)
 8001d26:	e002      	b.n	8001d2e <get_hspi_from_id+0x62>
	case 8: //PT 3
		return &hspi3;
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <get_hspi_from_id+0x74>)
 8001d2a:	e000      	b.n	8001d2e <get_hspi_from_id+0x62>
	default: //DMS 1
		return &hspi4;
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <get_hspi_from_id+0x70>)
	}
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000274 	.word	0x20000274
 8001d40:	20000210 	.word	0x20000210

08001d44 <wr_cmd>:

//
int wr_cmd(int8_t id, uint8_t cmd) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	460a      	mov	r2, r1
 8001d4e:	71fb      	strb	r3, [r7, #7]
 8001d50:	4613      	mov	r3, r2
 8001d52:	71bb      	strb	r3, [r7, #6]
	int8_t status = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	73fb      	strb	r3, [r7, #15]
	//status+= cs_enable(id);
	status += wr_spi(id, cmd);
 8001d58:	79ba      	ldrb	r2, [r7, #6]
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fced 	bl	8001740 <wr_spi>
 8001d66:	4603      	mov	r3, r0
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD_SYNC) {
 8001d72:	79bb      	ldrb	r3, [r7, #6]
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d10c      	bne.n	8001d92 <wr_cmd+0x4e>
		status += wr_spi(id, cmd);
 8001d78:	79ba      	ldrb	r2, [r7, #6]
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	4611      	mov	r1, r2
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fcdd 	bl	8001740 <wr_spi>
 8001d86:	4603      	mov	r3, r0
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	73fb      	strb	r3, [r7, #15]
	}
	//status+= cs_disable(id);
	if (cmd == CMD_RESET) {
 8001d92:	79bb      	ldrb	r3, [r7, #6]
 8001d94:	2b06      	cmp	r3, #6
 8001d96:	d103      	bne.n	8001da0 <wr_cmd+0x5c>
		HAL_Delay(1); //1ms
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f000 fe5d 	bl	8002a58 <HAL_Delay>
 8001d9e:	e00c      	b.n	8001dba <wr_cmd+0x76>
	} else if (cmd == CMD_SELFOCAL) {
 8001da0:	79bb      	ldrb	r3, [r7, #6]
 8001da2:	2b62      	cmp	r3, #98	; 0x62
 8001da4:	d103      	bne.n	8001dae <wr_cmd+0x6a>
		HAL_Delay(10); //10ms
 8001da6:	200a      	movs	r0, #10
 8001da8:	f000 fe56 	bl	8002a58 <HAL_Delay>
 8001dac:	e005      	b.n	8001dba <wr_cmd+0x76>
	} else if (cmd == CMD_SDATAC) {
 8001dae:	79bb      	ldrb	r3, [r7, #6]
 8001db0:	2b16      	cmp	r3, #22
 8001db2:	d102      	bne.n	8001dba <wr_cmd+0x76>
		HAL_Delay(1); //1ms
 8001db4:	2001      	movs	r0, #1
 8001db6:	f000 fe4f 	bl	8002a58 <HAL_Delay>
	}
	return 0;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <wr_reg>:

int wr_reg(int8_t id, uint8_t reg, uint8_t data) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	71bb      	strb	r3, [r7, #6]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	717b      	strb	r3, [r7, #5]
	int8_t status = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, CMD_WREG | reg);
 8001dda:	79bb      	ldrb	r3, [r7, #6]
 8001ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fca9 	bl	8001740 <wr_spi>
 8001dee:	4603      	mov	r3, r0
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	4413      	add	r3, r2
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, 0);
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fc9d 	bl	8001740 <wr_spi>
 8001e06:	4603      	mov	r3, r0
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, data);
 8001e12:	797a      	ldrb	r2, [r7, #5]
 8001e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e18:	4611      	mov	r1, r2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fc90 	bl	8001740 <wr_spi>
 8001e20:	4603      	mov	r3, r0
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	4413      	add	r3, r2
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	73fb      	strb	r3, [r7, #15]
	return 0;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <write_EXP>:
	data = rd_spi(id);
	//status += cs_disable(id);
	return data;
}

int write_EXP(uint8_t *dout) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart8, &dout, sizeof(dout), HAL_MAX_DELAY);
 8001e40:	1d39      	adds	r1, r7, #4
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295
 8001e46:	2204      	movs	r2, #4
 8001e48:	4803      	ldr	r0, [pc, #12]	; (8001e58 <write_EXP+0x20>)
 8001e4a:	f004 fe6f 	bl	8006b2c <HAL_UART_Transmit>
	return 0;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000358 	.word	0x20000358

08001e5c <write_DAPI>:

int write_DAPI(uint8_t *dout) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, &dout, sizeof(dout), HAL_MAX_DELAY);
 8001e64:	1d39      	adds	r1, r7, #4
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6a:	2204      	movs	r2, #4
 8001e6c:	4803      	ldr	r0, [pc, #12]	; (8001e7c <write_DAPI+0x20>)
 8001e6e:	f004 fe5d 	bl	8006b2c <HAL_UART_Transmit>
	return 0;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	200003d8 	.word	0x200003d8

08001e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <MX_RTC_Init+0x44>)
 8001eaa:	4a10      	ldr	r2, [pc, #64]	; (8001eec <MX_RTC_Init+0x48>)
 8001eac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_RTC_Init+0x44>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <MX_RTC_Init+0x44>)
 8001eb6:	227f      	movs	r2, #127	; 0x7f
 8001eb8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <MX_RTC_Init+0x44>)
 8001ebc:	22ff      	movs	r2, #255	; 0xff
 8001ebe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_RTC_Init+0x44>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <MX_RTC_Init+0x44>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_RTC_Init+0x44>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_RTC_Init+0x44>)
 8001ed4:	f003 fb6e 	bl	80055b4 <HAL_RTC_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001ede:	f7ff ffcf 	bl	8001e80 <Error_Handler>
  }

}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	200000c4 	.word	0x200000c4
 8001eec:	40002800 	.word	0x40002800

08001ef0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <HAL_RTC_MspInit+0x2c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d105      	bne.n	8001f0e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f02:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <HAL_RTC_MspInit+0x30>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f06:	4a06      	ldr	r2, [pc, #24]	; (8001f20 <HAL_RTC_MspInit+0x30>)
 8001f08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f0c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40002800 	.word	0x40002800
 8001f20:	40023800 	.word	0x40023800

08001f24 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi5;
SPI_HandleTypeDef hspi6;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001f28:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <MX_SPI2_Init+0x74>)
 8001f2a:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <MX_SPI2_Init+0x78>)
 8001f2c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f2e:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <MX_SPI2_Init+0x74>)
 8001f30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f34:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f36:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <MX_SPI2_Init+0x74>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f3c:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <MX_SPI2_Init+0x74>)
 8001f3e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f42:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f44:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <MX_SPI2_Init+0x74>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f4a:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <MX_SPI2_Init+0x74>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f50:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <MX_SPI2_Init+0x74>)
 8001f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f56:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f58:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <MX_SPI2_Init+0x74>)
 8001f5a:	2208      	movs	r2, #8
 8001f5c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <MX_SPI2_Init+0x74>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <MX_SPI2_Init+0x74>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <MX_SPI2_Init+0x74>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001f70:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <MX_SPI2_Init+0x74>)
 8001f72:	2207      	movs	r2, #7
 8001f74:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f76:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <MX_SPI2_Init+0x74>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <MX_SPI2_Init+0x74>)
 8001f7e:	2208      	movs	r2, #8
 8001f80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f82:	4805      	ldr	r0, [pc, #20]	; (8001f98 <MX_SPI2_Init+0x74>)
 8001f84:	f003 fc1a 	bl	80057bc <HAL_SPI_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001f8e:	f7ff ff77 	bl	8001e80 <Error_Handler>
  }

}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200000e4 	.word	0x200000e4
 8001f9c:	40003800 	.word	0x40003800

08001fa0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <MX_SPI3_Init+0x74>)
 8001fa6:	4a1c      	ldr	r2, [pc, #112]	; (8002018 <MX_SPI3_Init+0x78>)
 8001fa8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001faa:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <MX_SPI3_Init+0x74>)
 8001fac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fb0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001fb2:	4b18      	ldr	r3, [pc, #96]	; (8002014 <MX_SPI3_Init+0x74>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fb8:	4b16      	ldr	r3, [pc, #88]	; (8002014 <MX_SPI3_Init+0x74>)
 8001fba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001fbe:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fc0:	4b14      	ldr	r3, [pc, #80]	; (8002014 <MX_SPI3_Init+0x74>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fc6:	4b13      	ldr	r3, [pc, #76]	; (8002014 <MX_SPI3_Init+0x74>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <MX_SPI3_Init+0x74>)
 8001fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fd2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <MX_SPI3_Init+0x74>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <MX_SPI3_Init+0x74>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <MX_SPI3_Init+0x74>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <MX_SPI3_Init+0x74>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <MX_SPI3_Init+0x74>)
 8001fee:	2207      	movs	r2, #7
 8001ff0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <MX_SPI3_Init+0x74>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <MX_SPI3_Init+0x74>)
 8001ffa:	2208      	movs	r2, #8
 8001ffc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ffe:	4805      	ldr	r0, [pc, #20]	; (8002014 <MX_SPI3_Init+0x74>)
 8002000:	f003 fbdc 	bl	80057bc <HAL_SPI_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800200a:	f7ff ff39 	bl	8001e80 <Error_Handler>
  }

}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000210 	.word	0x20000210
 8002018:	40003c00 	.word	0x40003c00

0800201c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8002020:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <MX_SPI4_Init+0x74>)
 8002022:	4a1c      	ldr	r2, [pc, #112]	; (8002094 <MX_SPI4_Init+0x78>)
 8002024:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002026:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <MX_SPI4_Init+0x74>)
 8002028:	f44f 7282 	mov.w	r2, #260	; 0x104
 800202c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800202e:	4b18      	ldr	r3, [pc, #96]	; (8002090 <MX_SPI4_Init+0x74>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002034:	4b16      	ldr	r3, [pc, #88]	; (8002090 <MX_SPI4_Init+0x74>)
 8002036:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800203a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800203c:	4b14      	ldr	r3, [pc, #80]	; (8002090 <MX_SPI4_Init+0x74>)
 800203e:	2200      	movs	r2, #0
 8002040:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002042:	4b13      	ldr	r3, [pc, #76]	; (8002090 <MX_SPI4_Init+0x74>)
 8002044:	2201      	movs	r2, #1
 8002046:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <MX_SPI4_Init+0x74>)
 800204a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800204e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002050:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <MX_SPI4_Init+0x74>)
 8002052:	2200      	movs	r2, #0
 8002054:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002056:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <MX_SPI4_Init+0x74>)
 8002058:	2200      	movs	r2, #0
 800205a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <MX_SPI4_Init+0x74>)
 800205e:	2200      	movs	r2, #0
 8002060:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002062:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <MX_SPI4_Init+0x74>)
 8002064:	2200      	movs	r2, #0
 8002066:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <MX_SPI4_Init+0x74>)
 800206a:	2207      	movs	r2, #7
 800206c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800206e:	4b08      	ldr	r3, [pc, #32]	; (8002090 <MX_SPI4_Init+0x74>)
 8002070:	2200      	movs	r2, #0
 8002072:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <MX_SPI4_Init+0x74>)
 8002076:	2200      	movs	r2, #0
 8002078:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800207a:	4805      	ldr	r0, [pc, #20]	; (8002090 <MX_SPI4_Init+0x74>)
 800207c:	f003 fb9e 	bl	80057bc <HAL_SPI_Init>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002086:	f7ff fefb 	bl	8001e80 <Error_Handler>
  }

}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000274 	.word	0x20000274
 8002094:	40013400 	.word	0x40013400

08002098 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 800209c:	4b1b      	ldr	r3, [pc, #108]	; (800210c <MX_SPI5_Init+0x74>)
 800209e:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <MX_SPI5_Init+0x78>)
 80020a0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80020a2:	4b1a      	ldr	r3, [pc, #104]	; (800210c <MX_SPI5_Init+0x74>)
 80020a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020a8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80020aa:	4b18      	ldr	r3, [pc, #96]	; (800210c <MX_SPI5_Init+0x74>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 80020b0:	4b16      	ldr	r3, [pc, #88]	; (800210c <MX_SPI5_Init+0x74>)
 80020b2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80020b6:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020b8:	4b14      	ldr	r3, [pc, #80]	; (800210c <MX_SPI5_Init+0x74>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020be:	4b13      	ldr	r3, [pc, #76]	; (800210c <MX_SPI5_Init+0x74>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <MX_SPI5_Init+0x74>)
 80020c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ca:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020cc:	4b0f      	ldr	r3, [pc, #60]	; (800210c <MX_SPI5_Init+0x74>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <MX_SPI5_Init+0x74>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <MX_SPI5_Init+0x74>)
 80020da:	2200      	movs	r2, #0
 80020dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <MX_SPI5_Init+0x74>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 80020e4:	4b09      	ldr	r3, [pc, #36]	; (800210c <MX_SPI5_Init+0x74>)
 80020e6:	2207      	movs	r2, #7
 80020e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <MX_SPI5_Init+0x74>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <MX_SPI5_Init+0x74>)
 80020f2:	2208      	movs	r2, #8
 80020f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80020f6:	4805      	ldr	r0, [pc, #20]	; (800210c <MX_SPI5_Init+0x74>)
 80020f8:	f003 fb60 	bl	80057bc <HAL_SPI_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8002102:	f7ff febd 	bl	8001e80 <Error_Handler>
  }

}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000148 	.word	0x20000148
 8002110:	40015000 	.word	0x40015000

08002114 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
 8002118:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <MX_SPI6_Init+0x74>)
 800211a:	4a1c      	ldr	r2, [pc, #112]	; (800218c <MX_SPI6_Init+0x78>)
 800211c:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 800211e:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <MX_SPI6_Init+0x74>)
 8002120:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002124:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8002126:	4b18      	ldr	r3, [pc, #96]	; (8002188 <MX_SPI6_Init+0x74>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 800212c:	4b16      	ldr	r3, [pc, #88]	; (8002188 <MX_SPI6_Init+0x74>)
 800212e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002132:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002134:	4b14      	ldr	r3, [pc, #80]	; (8002188 <MX_SPI6_Init+0x74>)
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 800213a:	4b13      	ldr	r3, [pc, #76]	; (8002188 <MX_SPI6_Init+0x74>)
 800213c:	2200      	movs	r2, #0
 800213e:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <MX_SPI6_Init+0x74>)
 8002142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002146:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002148:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <MX_SPI6_Init+0x74>)
 800214a:	2208      	movs	r2, #8
 800214c:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <MX_SPI6_Init+0x74>)
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <MX_SPI6_Init+0x74>)
 8002156:	2200      	movs	r2, #0
 8002158:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <MX_SPI6_Init+0x74>)
 800215c:	2200      	movs	r2, #0
 800215e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
 8002160:	4b09      	ldr	r3, [pc, #36]	; (8002188 <MX_SPI6_Init+0x74>)
 8002162:	2207      	movs	r2, #7
 8002164:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <MX_SPI6_Init+0x74>)
 8002168:	2200      	movs	r2, #0
 800216a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <MX_SPI6_Init+0x74>)
 800216e:	2208      	movs	r2, #8
 8002170:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8002172:	4805      	ldr	r0, [pc, #20]	; (8002188 <MX_SPI6_Init+0x74>)
 8002174:	f003 fb22 	bl	80057bc <HAL_SPI_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_SPI6_Init+0x6e>
  {
    Error_Handler();
 800217e:	f7ff fe7f 	bl	8001e80 <Error_Handler>
  }

}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200001ac 	.word	0x200001ac
 800218c:	40015400 	.word	0x40015400

08002190 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b092      	sub	sp, #72	; 0x48
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a8e      	ldr	r2, [pc, #568]	; (80023e8 <HAL_SPI_MspInit+0x258>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d131      	bne.n	8002216 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021b2:	4b8e      	ldr	r3, [pc, #568]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	4a8d      	ldr	r2, [pc, #564]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 80021b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021bc:	6413      	str	r3, [r2, #64]	; 0x40
 80021be:	4b8b      	ldr	r3, [pc, #556]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c6:	633b      	str	r3, [r7, #48]	; 0x30
 80021c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ca:	4b88      	ldr	r3, [pc, #544]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	4a87      	ldr	r2, [pc, #540]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 80021d0:	f043 0302 	orr.w	r3, r3, #2
 80021d4:	6313      	str	r3, [r2, #48]	; 0x30
 80021d6:	4b85      	ldr	r3, [pc, #532]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80021e2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80021e6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f0:	2303      	movs	r3, #3
 80021f2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021f4:	2305      	movs	r3, #5
 80021f6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021fc:	4619      	mov	r1, r3
 80021fe:	487c      	ldr	r0, [pc, #496]	; (80023f0 <HAL_SPI_MspInit+0x260>)
 8002200:	f000 fefe 	bl	8003000 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 6, 0);
 8002204:	2200      	movs	r2, #0
 8002206:	2106      	movs	r1, #6
 8002208:	2024      	movs	r0, #36	; 0x24
 800220a:	f000 fd37 	bl	8002c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800220e:	2024      	movs	r0, #36	; 0x24
 8002210:	f000 fd60 	bl	8002cd4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8002214:	e0e4      	b.n	80023e0 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI3)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a76      	ldr	r2, [pc, #472]	; (80023f4 <HAL_SPI_MspInit+0x264>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d145      	bne.n	80022ac <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002220:	4b72      	ldr	r3, [pc, #456]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	4a71      	ldr	r2, [pc, #452]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 8002226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800222a:	6413      	str	r3, [r2, #64]	; 0x40
 800222c:	4b6f      	ldr	r3, [pc, #444]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002234:	62bb      	str	r3, [r7, #40]	; 0x28
 8002236:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002238:	4b6c      	ldr	r3, [pc, #432]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	4a6b      	ldr	r2, [pc, #428]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 800223e:	f043 0302 	orr.w	r3, r3, #2
 8002242:	6313      	str	r3, [r2, #48]	; 0x30
 8002244:	4b69      	ldr	r3, [pc, #420]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002250:	4b66      	ldr	r3, [pc, #408]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	4a65      	ldr	r2, [pc, #404]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 8002256:	f043 0304 	orr.w	r3, r3, #4
 800225a:	6313      	str	r3, [r2, #48]	; 0x30
 800225c:	4b63      	ldr	r3, [pc, #396]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	623b      	str	r3, [r7, #32]
 8002266:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002268:	2304      	movs	r3, #4
 800226a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226c:	2302      	movs	r3, #2
 800226e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002274:	2303      	movs	r3, #3
 8002276:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002278:	2307      	movs	r3, #7
 800227a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002280:	4619      	mov	r1, r3
 8002282:	485b      	ldr	r0, [pc, #364]	; (80023f0 <HAL_SPI_MspInit+0x260>)
 8002284:	f000 febc 	bl	8003000 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002288:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800228c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228e:	2302      	movs	r3, #2
 8002290:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002296:	2303      	movs	r3, #3
 8002298:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800229a:	2306      	movs	r3, #6
 800229c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800229e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022a2:	4619      	mov	r1, r3
 80022a4:	4854      	ldr	r0, [pc, #336]	; (80023f8 <HAL_SPI_MspInit+0x268>)
 80022a6:	f000 feab 	bl	8003000 <HAL_GPIO_Init>
}
 80022aa:	e099      	b.n	80023e0 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI4)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a52      	ldr	r2, [pc, #328]	; (80023fc <HAL_SPI_MspInit+0x26c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d130      	bne.n	8002318 <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80022b6:	4b4d      	ldr	r3, [pc, #308]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	4a4c      	ldr	r2, [pc, #304]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 80022bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022c0:	6453      	str	r3, [r2, #68]	; 0x44
 80022c2:	4b4a      	ldr	r3, [pc, #296]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022ce:	4b47      	ldr	r3, [pc, #284]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	4a46      	ldr	r2, [pc, #280]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 80022d4:	f043 0310 	orr.w	r3, r3, #16
 80022d8:	6313      	str	r3, [r2, #48]	; 0x30
 80022da:	4b44      	ldr	r3, [pc, #272]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	61bb      	str	r3, [r7, #24]
 80022e4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80022e6:	2364      	movs	r3, #100	; 0x64
 80022e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	2302      	movs	r3, #2
 80022ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f2:	2303      	movs	r3, #3
 80022f4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80022f6:	2305      	movs	r3, #5
 80022f8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022fe:	4619      	mov	r1, r3
 8002300:	483f      	ldr	r0, [pc, #252]	; (8002400 <HAL_SPI_MspInit+0x270>)
 8002302:	f000 fe7d 	bl	8003000 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 6, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2106      	movs	r1, #6
 800230a:	2054      	movs	r0, #84	; 0x54
 800230c:	f000 fcb6 	bl	8002c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002310:	2054      	movs	r0, #84	; 0x54
 8002312:	f000 fcdf 	bl	8002cd4 <HAL_NVIC_EnableIRQ>
}
 8002316:	e063      	b.n	80023e0 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI5)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a39      	ldr	r2, [pc, #228]	; (8002404 <HAL_SPI_MspInit+0x274>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d129      	bne.n	8002376 <HAL_SPI_MspInit+0x1e6>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002322:	4b32      	ldr	r3, [pc, #200]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	4a31      	ldr	r2, [pc, #196]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 8002328:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800232c:	6453      	str	r3, [r2, #68]	; 0x44
 800232e:	4b2f      	ldr	r3, [pc, #188]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800233a:	4b2c      	ldr	r3, [pc, #176]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a2b      	ldr	r2, [pc, #172]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 8002340:	f043 0320 	orr.w	r3, r3, #32
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b29      	ldr	r3, [pc, #164]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0320 	and.w	r3, r3, #32
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002352:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002356:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002360:	2303      	movs	r3, #3
 8002362:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002364:	2305      	movs	r3, #5
 8002366:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002368:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800236c:	4619      	mov	r1, r3
 800236e:	4826      	ldr	r0, [pc, #152]	; (8002408 <HAL_SPI_MspInit+0x278>)
 8002370:	f000 fe46 	bl	8003000 <HAL_GPIO_Init>
}
 8002374:	e034      	b.n	80023e0 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI6)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a24      	ldr	r2, [pc, #144]	; (800240c <HAL_SPI_MspInit+0x27c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d12f      	bne.n	80023e0 <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8002380:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 8002382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002384:	4a19      	ldr	r2, [pc, #100]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 8002386:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800238a:	6453      	str	r3, [r2, #68]	; 0x44
 800238c:	4b17      	ldr	r3, [pc, #92]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 800238e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002398:	4b14      	ldr	r3, [pc, #80]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	4a13      	ldr	r2, [pc, #76]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6313      	str	r3, [r2, #48]	; 0x30
 80023a4:	4b11      	ldr	r3, [pc, #68]	; (80023ec <HAL_SPI_MspInit+0x25c>)
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80023b0:	23e0      	movs	r3, #224	; 0xe0
 80023b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b4:	2302      	movs	r3, #2
 80023b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023bc:	2303      	movs	r3, #3
 80023be:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 80023c0:	2308      	movs	r3, #8
 80023c2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023c8:	4619      	mov	r1, r3
 80023ca:	4811      	ldr	r0, [pc, #68]	; (8002410 <HAL_SPI_MspInit+0x280>)
 80023cc:	f000 fe18 	bl	8003000 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 6, 0);
 80023d0:	2200      	movs	r2, #0
 80023d2:	2106      	movs	r1, #6
 80023d4:	2056      	movs	r0, #86	; 0x56
 80023d6:	f000 fc51 	bl	8002c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 80023da:	2056      	movs	r0, #86	; 0x56
 80023dc:	f000 fc7a 	bl	8002cd4 <HAL_NVIC_EnableIRQ>
}
 80023e0:	bf00      	nop
 80023e2:	3748      	adds	r7, #72	; 0x48
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40003800 	.word	0x40003800
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40020400 	.word	0x40020400
 80023f4:	40003c00 	.word	0x40003c00
 80023f8:	40020800 	.word	0x40020800
 80023fc:	40013400 	.word	0x40013400
 8002400:	40021000 	.word	0x40021000
 8002404:	40015000 	.word	0x40015000
 8002408:	40021400 	.word	0x40021400
 800240c:	40015400 	.word	0x40015400
 8002410:	40020000 	.word	0x40020000

08002414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800241a:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <HAL_MspInit+0x44>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <HAL_MspInit+0x44>)
 8002420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002424:	6413      	str	r3, [r2, #64]	; 0x40
 8002426:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <HAL_MspInit+0x44>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002432:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_MspInit+0x44>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	4a08      	ldr	r2, [pc, #32]	; (8002458 <HAL_MspInit+0x44>)
 8002438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800243c:	6453      	str	r3, [r2, #68]	; 0x44
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_MspInit+0x44>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800

0800245c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800246e:	e7fe      	b.n	800246e <HardFault_Handler+0x4>

08002470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002474:	e7fe      	b.n	8002474 <MemManage_Handler+0x4>

08002476 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800247a:	e7fe      	b.n	800247a <BusFault_Handler+0x4>

0800247c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002480:	e7fe      	b.n	8002480 <UsageFault_Handler+0x4>

08002482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80024b0:	2010      	movs	r0, #16
 80024b2:	f001 f9a1 	bl	80037f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}

080024ba <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80024be:	2020      	movs	r0, #32
 80024c0:	f001 f99a 	bl	80037f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80024c4:	2040      	movs	r0, #64	; 0x40
 80024c6:	f001 f997 	bl	80037f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80024ca:	2080      	movs	r0, #128	; 0x80
 80024cc:	f001 f994 	bl	80037f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80024d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80024d4:	f001 f990 	bl	80037f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80024d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80024dc:	f001 f98c 	bl	80037f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80024e8:	4802      	ldr	r0, [pc, #8]	; (80024f4 <SPI2_IRQHandler+0x10>)
 80024ea:	f003 ffcb 	bl	8006484 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200000e4 	.word	0x200000e4

080024f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80024fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002500:	f001 f97a 	bl	80037f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002504:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002508:	f001 f976 	bl	80037f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800250c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002510:	f001 f972 	bl	80037f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002514:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002518:	f001 f96e 	bl	80037f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800251c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002520:	f001 f96a 	bl	80037f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}

08002528 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800252c:	4802      	ldr	r0, [pc, #8]	; (8002538 <UART4_IRQHandler+0x10>)
 800252e:	f004 fc5b 	bl	8006de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	200003d8 	.word	0x200003d8

0800253c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002540:	4802      	ldr	r0, [pc, #8]	; (800254c <UART5_IRQHandler+0x10>)
 8002542:	f004 fc51 	bl	8006de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	200002d8 	.word	0x200002d8

08002550 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <UART8_IRQHandler+0x10>)
 8002556:	f004 fc47 	bl	8006de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000358 	.word	0x20000358

08002564 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <SPI4_IRQHandler+0x10>)
 800256a:	f003 ff8b 	bl	8006484 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000274 	.word	0x20000274

08002578 <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <SPI6_IRQHandler+0x10>)
 800257e:	f003 ff81 	bl	8006484 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	200001ac 	.word	0x200001ac

0800258c <SysTick_Handler>:

/* USER CODE BEGIN 1 */
void SysTick_Handler(void) {
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8002590:	f000 fa42 	bl	8002a18 <HAL_IncTick>
}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}

08002598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025a0:	4a14      	ldr	r2, [pc, #80]	; (80025f4 <_sbrk+0x5c>)
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <_sbrk+0x60>)
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025ac:	4b13      	ldr	r3, [pc, #76]	; (80025fc <_sbrk+0x64>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d102      	bne.n	80025ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <_sbrk+0x64>)
 80025b6:	4a12      	ldr	r2, [pc, #72]	; (8002600 <_sbrk+0x68>)
 80025b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <_sbrk+0x64>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d207      	bcs.n	80025d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c8:	f005 fb12 	bl	8007bf0 <__errno>
 80025cc:	4602      	mov	r2, r0
 80025ce:	230c      	movs	r3, #12
 80025d0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
 80025d6:	e009      	b.n	80025ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <_sbrk+0x64>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025de:	4b07      	ldr	r3, [pc, #28]	; (80025fc <_sbrk+0x64>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4413      	add	r3, r2
 80025e6:	4a05      	ldr	r2, [pc, #20]	; (80025fc <_sbrk+0x64>)
 80025e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ea:	68fb      	ldr	r3, [r7, #12]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20080000 	.word	0x20080000
 80025f8:	00000400 	.word	0x00000400
 80025fc:	20000090 	.word	0x20000090
 8002600:	20000460 	.word	0x20000460

08002604 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002608:	4b08      	ldr	r3, [pc, #32]	; (800262c <SystemInit+0x28>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260e:	4a07      	ldr	r2, [pc, #28]	; (800262c <SystemInit+0x28>)
 8002610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002618:	4b04      	ldr	r3, [pc, #16]	; (800262c <SystemInit+0x28>)
 800261a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800261e:	609a      	str	r2, [r3, #8]
#endif
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart8;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8002634:	4b14      	ldr	r3, [pc, #80]	; (8002688 <MX_UART4_Init+0x58>)
 8002636:	4a15      	ldr	r2, [pc, #84]	; (800268c <MX_UART4_Init+0x5c>)
 8002638:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800263a:	4b13      	ldr	r3, [pc, #76]	; (8002688 <MX_UART4_Init+0x58>)
 800263c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002640:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002642:	4b11      	ldr	r3, [pc, #68]	; (8002688 <MX_UART4_Init+0x58>)
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002648:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <MX_UART4_Init+0x58>)
 800264a:	2200      	movs	r2, #0
 800264c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <MX_UART4_Init+0x58>)
 8002650:	2200      	movs	r2, #0
 8002652:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <MX_UART4_Init+0x58>)
 8002656:	220c      	movs	r2, #12
 8002658:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <MX_UART4_Init+0x58>)
 800265c:	2200      	movs	r2, #0
 800265e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002660:	4b09      	ldr	r3, [pc, #36]	; (8002688 <MX_UART4_Init+0x58>)
 8002662:	2200      	movs	r2, #0
 8002664:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002666:	4b08      	ldr	r3, [pc, #32]	; (8002688 <MX_UART4_Init+0x58>)
 8002668:	2200      	movs	r2, #0
 800266a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <MX_UART4_Init+0x58>)
 800266e:	2200      	movs	r2, #0
 8002670:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002672:	4805      	ldr	r0, [pc, #20]	; (8002688 <MX_UART4_Init+0x58>)
 8002674:	f004 f99a 	bl	80069ac <HAL_UART_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800267e:	f7ff fbff 	bl	8001e80 <Error_Handler>
  }

}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	200003d8 	.word	0x200003d8
 800268c:	40004c00 	.word	0x40004c00

08002690 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <MX_UART5_Init+0x58>)
 8002696:	4a15      	ldr	r2, [pc, #84]	; (80026ec <MX_UART5_Init+0x5c>)
 8002698:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800269a:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <MX_UART5_Init+0x58>)
 800269c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026a0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80026a2:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <MX_UART5_Init+0x58>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80026a8:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <MX_UART5_Init+0x58>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <MX_UART5_Init+0x58>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <MX_UART5_Init+0x58>)
 80026b6:	220c      	movs	r2, #12
 80026b8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <MX_UART5_Init+0x58>)
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <MX_UART5_Init+0x58>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <MX_UART5_Init+0x58>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <MX_UART5_Init+0x58>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80026d2:	4805      	ldr	r0, [pc, #20]	; (80026e8 <MX_UART5_Init+0x58>)
 80026d4:	f004 f96a 	bl	80069ac <HAL_UART_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80026de:	f7ff fbcf 	bl	8001e80 <Error_Handler>
  }

}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200002d8 	.word	0x200002d8
 80026ec:	40005000 	.word	0x40005000

080026f0 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 80026f4:	4b14      	ldr	r3, [pc, #80]	; (8002748 <MX_UART8_Init+0x58>)
 80026f6:	4a15      	ldr	r2, [pc, #84]	; (800274c <MX_UART8_Init+0x5c>)
 80026f8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 30000;
 80026fa:	4b13      	ldr	r3, [pc, #76]	; (8002748 <MX_UART8_Init+0x58>)
 80026fc:	f247 5230 	movw	r2, #30000	; 0x7530
 8002700:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002702:	4b11      	ldr	r3, [pc, #68]	; (8002748 <MX_UART8_Init+0x58>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002708:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <MX_UART8_Init+0x58>)
 800270a:	2200      	movs	r2, #0
 800270c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <MX_UART8_Init+0x58>)
 8002710:	2200      	movs	r2, #0
 8002712:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <MX_UART8_Init+0x58>)
 8002716:	220c      	movs	r2, #12
 8002718:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800271a:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <MX_UART8_Init+0x58>)
 800271c:	2200      	movs	r2, #0
 800271e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002720:	4b09      	ldr	r3, [pc, #36]	; (8002748 <MX_UART8_Init+0x58>)
 8002722:	2200      	movs	r2, #0
 8002724:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002726:	4b08      	ldr	r3, [pc, #32]	; (8002748 <MX_UART8_Init+0x58>)
 8002728:	2200      	movs	r2, #0
 800272a:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <MX_UART8_Init+0x58>)
 800272e:	2200      	movs	r2, #0
 8002730:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002732:	4805      	ldr	r0, [pc, #20]	; (8002748 <MX_UART8_Init+0x58>)
 8002734:	f004 f93a 	bl	80069ac <HAL_UART_Init>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_UART8_Init+0x52>
  {
    Error_Handler();
 800273e:	f7ff fb9f 	bl	8001e80 <Error_Handler>
  }

}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000358 	.word	0x20000358
 800274c:	40007c00 	.word	0x40007c00

08002750 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b090      	sub	sp, #64	; 0x40
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a6e      	ldr	r2, [pc, #440]	; (8002928 <HAL_UART_MspInit+0x1d8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d14d      	bne.n	800280e <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002772:	4b6e      	ldr	r3, [pc, #440]	; (800292c <HAL_UART_MspInit+0x1dc>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	4a6d      	ldr	r2, [pc, #436]	; (800292c <HAL_UART_MspInit+0x1dc>)
 8002778:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800277c:	6413      	str	r3, [r2, #64]	; 0x40
 800277e:	4b6b      	ldr	r3, [pc, #428]	; (800292c <HAL_UART_MspInit+0x1dc>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002786:	62bb      	str	r3, [r7, #40]	; 0x28
 8002788:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800278a:	4b68      	ldr	r3, [pc, #416]	; (800292c <HAL_UART_MspInit+0x1dc>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a67      	ldr	r2, [pc, #412]	; (800292c <HAL_UART_MspInit+0x1dc>)
 8002790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b65      	ldr	r3, [pc, #404]	; (800292c <HAL_UART_MspInit+0x1dc>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a2:	4b62      	ldr	r3, [pc, #392]	; (800292c <HAL_UART_MspInit+0x1dc>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a61      	ldr	r2, [pc, #388]	; (800292c <HAL_UART_MspInit+0x1dc>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b5f      	ldr	r3, [pc, #380]	; (800292c <HAL_UART_MspInit+0x1dc>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	623b      	str	r3, [r7, #32]
 80027b8:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PI9     ------> UART4_RX
    PA0/WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = DAPI_RX_Pin;
 80027ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c0:	2302      	movs	r3, #2
 80027c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c8:	2303      	movs	r3, #3
 80027ca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80027cc:	2308      	movs	r3, #8
 80027ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(DAPI_RX_GPIO_Port, &GPIO_InitStruct);
 80027d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027d4:	4619      	mov	r1, r3
 80027d6:	4856      	ldr	r0, [pc, #344]	; (8002930 <HAL_UART_MspInit+0x1e0>)
 80027d8:	f000 fc12 	bl	8003000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DAPI_TX_Pin;
 80027dc:	2301      	movs	r3, #1
 80027de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e0:	2302      	movs	r3, #2
 80027e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e8:	2303      	movs	r3, #3
 80027ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80027ec:	2308      	movs	r3, #8
 80027ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(DAPI_TX_GPIO_Port, &GPIO_InitStruct);
 80027f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027f4:	4619      	mov	r1, r3
 80027f6:	484f      	ldr	r0, [pc, #316]	; (8002934 <HAL_UART_MspInit+0x1e4>)
 80027f8:	f000 fc02 	bl	8003000 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 80027fc:	2200      	movs	r2, #0
 80027fe:	2106      	movs	r1, #6
 8002800:	2034      	movs	r0, #52	; 0x34
 8002802:	f000 fa3b 	bl	8002c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002806:	2034      	movs	r0, #52	; 0x34
 8002808:	f000 fa64 	bl	8002cd4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 800280c:	e087      	b.n	800291e <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==UART5)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a49      	ldr	r2, [pc, #292]	; (8002938 <HAL_UART_MspInit+0x1e8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d14d      	bne.n	80028b4 <HAL_UART_MspInit+0x164>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002818:	4b44      	ldr	r3, [pc, #272]	; (800292c <HAL_UART_MspInit+0x1dc>)
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	4a43      	ldr	r2, [pc, #268]	; (800292c <HAL_UART_MspInit+0x1dc>)
 800281e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002822:	6413      	str	r3, [r2, #64]	; 0x40
 8002824:	4b41      	ldr	r3, [pc, #260]	; (800292c <HAL_UART_MspInit+0x1dc>)
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800282c:	61fb      	str	r3, [r7, #28]
 800282e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002830:	4b3e      	ldr	r3, [pc, #248]	; (800292c <HAL_UART_MspInit+0x1dc>)
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	4a3d      	ldr	r2, [pc, #244]	; (800292c <HAL_UART_MspInit+0x1dc>)
 8002836:	f043 0304 	orr.w	r3, r3, #4
 800283a:	6313      	str	r3, [r2, #48]	; 0x30
 800283c:	4b3b      	ldr	r3, [pc, #236]	; (800292c <HAL_UART_MspInit+0x1dc>)
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002848:	4b38      	ldr	r3, [pc, #224]	; (800292c <HAL_UART_MspInit+0x1dc>)
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	4a37      	ldr	r2, [pc, #220]	; (800292c <HAL_UART_MspInit+0x1dc>)
 800284e:	f043 0308 	orr.w	r3, r3, #8
 8002852:	6313      	str	r3, [r2, #48]	; 0x30
 8002854:	4b35      	ldr	r3, [pc, #212]	; (800292c <HAL_UART_MspInit+0x1dc>)
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = INTERSPU_TX_Pin;
 8002860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002864:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002866:	2302      	movs	r3, #2
 8002868:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286e:	2303      	movs	r3, #3
 8002870:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002872:	2308      	movs	r3, #8
 8002874:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(INTERSPU_TX_GPIO_Port, &GPIO_InitStruct);
 8002876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800287a:	4619      	mov	r1, r3
 800287c:	482f      	ldr	r0, [pc, #188]	; (800293c <HAL_UART_MspInit+0x1ec>)
 800287e:	f000 fbbf 	bl	8003000 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = INTERSPU_RX_Pin;
 8002882:	2304      	movs	r3, #4
 8002884:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002886:	2302      	movs	r3, #2
 8002888:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288e:	2303      	movs	r3, #3
 8002890:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002892:	2308      	movs	r3, #8
 8002894:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(INTERSPU_RX_GPIO_Port, &GPIO_InitStruct);
 8002896:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800289a:	4619      	mov	r1, r3
 800289c:	4828      	ldr	r0, [pc, #160]	; (8002940 <HAL_UART_MspInit+0x1f0>)
 800289e:	f000 fbaf 	bl	8003000 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 6, 0);
 80028a2:	2200      	movs	r2, #0
 80028a4:	2106      	movs	r1, #6
 80028a6:	2035      	movs	r0, #53	; 0x35
 80028a8:	f000 f9e8 	bl	8002c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80028ac:	2035      	movs	r0, #53	; 0x35
 80028ae:	f000 fa11 	bl	8002cd4 <HAL_NVIC_EnableIRQ>
}
 80028b2:	e034      	b.n	800291e <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==UART8)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a22      	ldr	r2, [pc, #136]	; (8002944 <HAL_UART_MspInit+0x1f4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d12f      	bne.n	800291e <HAL_UART_MspInit+0x1ce>
    __HAL_RCC_UART8_CLK_ENABLE();
 80028be:	4b1b      	ldr	r3, [pc, #108]	; (800292c <HAL_UART_MspInit+0x1dc>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	4a1a      	ldr	r2, [pc, #104]	; (800292c <HAL_UART_MspInit+0x1dc>)
 80028c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028c8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ca:	4b18      	ldr	r3, [pc, #96]	; (800292c <HAL_UART_MspInit+0x1dc>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028d6:	4b15      	ldr	r3, [pc, #84]	; (800292c <HAL_UART_MspInit+0x1dc>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	4a14      	ldr	r2, [pc, #80]	; (800292c <HAL_UART_MspInit+0x1dc>)
 80028dc:	f043 0310 	orr.w	r3, r3, #16
 80028e0:	6313      	str	r3, [r2, #48]	; 0x30
 80028e2:	4b12      	ldr	r3, [pc, #72]	; (800292c <HAL_UART_MspInit+0x1dc>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EXP_IN_Pin|EXP_OUT_Pin;
 80028ee:	2303      	movs	r3, #3
 80028f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f2:	2302      	movs	r3, #2
 80028f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fa:	2303      	movs	r3, #3
 80028fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80028fe:	2308      	movs	r3, #8
 8002900:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002902:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002906:	4619      	mov	r1, r3
 8002908:	480f      	ldr	r0, [pc, #60]	; (8002948 <HAL_UART_MspInit+0x1f8>)
 800290a:	f000 fb79 	bl	8003000 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 6, 0);
 800290e:	2200      	movs	r2, #0
 8002910:	2106      	movs	r1, #6
 8002912:	2053      	movs	r0, #83	; 0x53
 8002914:	f000 f9b2 	bl	8002c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002918:	2053      	movs	r0, #83	; 0x53
 800291a:	f000 f9db 	bl	8002cd4 <HAL_NVIC_EnableIRQ>
}
 800291e:	bf00      	nop
 8002920:	3740      	adds	r7, #64	; 0x40
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40004c00 	.word	0x40004c00
 800292c:	40023800 	.word	0x40023800
 8002930:	40022000 	.word	0x40022000
 8002934:	40020000 	.word	0x40020000
 8002938:	40005000 	.word	0x40005000
 800293c:	40020800 	.word	0x40020800
 8002940:	40020c00 	.word	0x40020c00
 8002944:	40007c00 	.word	0x40007c00
 8002948:	40021000 	.word	0x40021000

0800294c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800294c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002984 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002950:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002952:	e003      	b.n	800295c <LoopCopyDataInit>

08002954 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002956:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002958:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800295a:	3104      	adds	r1, #4

0800295c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800295c:	480b      	ldr	r0, [pc, #44]	; (800298c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800295e:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002960:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002962:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002964:	d3f6      	bcc.n	8002954 <CopyDataInit>
  ldr  r2, =_sbss
 8002966:	4a0b      	ldr	r2, [pc, #44]	; (8002994 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002968:	e002      	b.n	8002970 <LoopFillZerobss>

0800296a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800296a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800296c:	f842 3b04 	str.w	r3, [r2], #4

08002970 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002970:	4b09      	ldr	r3, [pc, #36]	; (8002998 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002972:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002974:	d3f9      	bcc.n	800296a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002976:	f7ff fe45 	bl	8002604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800297a:	f005 f93f 	bl	8007bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800297e:	f7fe fcb3 	bl	80012e8 <main>
  bx  lr    
 8002982:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002984:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002988:	08008864 	.word	0x08008864
  ldr  r0, =_sdata
 800298c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002990:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002994:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002998:	20000460 	.word	0x20000460

0800299c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800299c:	e7fe      	b.n	800299c <ADC_IRQHandler>

0800299e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029a2:	2003      	movs	r0, #3
 80029a4:	f000 f94a 	bl	8002c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029a8:	2000      	movs	r0, #0
 80029aa:	f000 f805 	bl	80029b8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80029ae:	f7ff fd31 	bl	8002414 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029c0:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <HAL_InitTick+0x54>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <HAL_InitTick+0x58>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	4619      	mov	r1, r3
 80029ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80029d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f994 	bl	8002d04 <HAL_SYSTICK_Config>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e00e      	b.n	8002a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b0f      	cmp	r3, #15
 80029ea:	d80a      	bhi.n	8002a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029ec:	2200      	movs	r2, #0
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	f04f 30ff 	mov.w	r0, #4294967295
 80029f4:	f000 f942 	bl	8002c7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029f8:	4a06      	ldr	r2, [pc, #24]	; (8002a14 <HAL_InitTick+0x5c>)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	e000      	b.n	8002a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20000000 	.word	0x20000000
 8002a10:	20000008 	.word	0x20000008
 8002a14:	20000004 	.word	0x20000004

08002a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_IncTick+0x20>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <HAL_IncTick+0x24>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4413      	add	r3, r2
 8002a28:	4a04      	ldr	r2, [pc, #16]	; (8002a3c <HAL_IncTick+0x24>)
 8002a2a:	6013      	str	r3, [r2, #0]
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	20000008 	.word	0x20000008
 8002a3c:	20000458 	.word	0x20000458

08002a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return uwTick;
 8002a44:	4b03      	ldr	r3, [pc, #12]	; (8002a54 <HAL_GetTick+0x14>)
 8002a46:	681b      	ldr	r3, [r3, #0]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	20000458 	.word	0x20000458

08002a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a60:	f7ff ffee 	bl	8002a40 <HAL_GetTick>
 8002a64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a70:	d005      	beq.n	8002a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <HAL_Delay+0x40>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	461a      	mov	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a7e:	bf00      	nop
 8002a80:	f7ff ffde 	bl	8002a40 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d8f7      	bhi.n	8002a80 <HAL_Delay+0x28>
  {
  }
}
 8002a90:	bf00      	nop
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20000008 	.word	0x20000008

08002a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aac:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <__NVIC_SetPriorityGrouping+0x40>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ab8:	4013      	ands	r3, r2
 8002aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aca:	4a04      	ldr	r2, [pc, #16]	; (8002adc <__NVIC_SetPriorityGrouping+0x40>)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	60d3      	str	r3, [r2, #12]
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000ed00 	.word	0xe000ed00
 8002ae0:	05fa0000 	.word	0x05fa0000

08002ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ae8:	4b04      	ldr	r3, [pc, #16]	; (8002afc <__NVIC_GetPriorityGrouping+0x18>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	0a1b      	lsrs	r3, r3, #8
 8002aee:	f003 0307 	and.w	r3, r3, #7
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	db0b      	blt.n	8002b2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	f003 021f 	and.w	r2, r3, #31
 8002b18:	4907      	ldr	r1, [pc, #28]	; (8002b38 <__NVIC_EnableIRQ+0x38>)
 8002b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	2001      	movs	r0, #1
 8002b22:	fa00 f202 	lsl.w	r2, r0, r2
 8002b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	e000e100 	.word	0xe000e100

08002b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	6039      	str	r1, [r7, #0]
 8002b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	db0a      	blt.n	8002b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	490c      	ldr	r1, [pc, #48]	; (8002b88 <__NVIC_SetPriority+0x4c>)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	0112      	lsls	r2, r2, #4
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	440b      	add	r3, r1
 8002b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b64:	e00a      	b.n	8002b7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	4908      	ldr	r1, [pc, #32]	; (8002b8c <__NVIC_SetPriority+0x50>)
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	3b04      	subs	r3, #4
 8002b74:	0112      	lsls	r2, r2, #4
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	440b      	add	r3, r1
 8002b7a:	761a      	strb	r2, [r3, #24]
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	e000e100 	.word	0xe000e100
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b089      	sub	sp, #36	; 0x24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f1c3 0307 	rsb	r3, r3, #7
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	bf28      	it	cs
 8002bae:	2304      	movcs	r3, #4
 8002bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	2b06      	cmp	r3, #6
 8002bb8:	d902      	bls.n	8002bc0 <NVIC_EncodePriority+0x30>
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	3b03      	subs	r3, #3
 8002bbe:	e000      	b.n	8002bc2 <NVIC_EncodePriority+0x32>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43da      	mvns	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	401a      	ands	r2, r3
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	fa01 f303 	lsl.w	r3, r1, r3
 8002be2:	43d9      	mvns	r1, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be8:	4313      	orrs	r3, r2
         );
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3724      	adds	r7, #36	; 0x24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
	...

08002bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c08:	d301      	bcc.n	8002c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e00f      	b.n	8002c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c0e:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <SysTick_Config+0x40>)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c16:	210f      	movs	r1, #15
 8002c18:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1c:	f7ff ff8e 	bl	8002b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <SysTick_Config+0x40>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c26:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <SysTick_Config+0x40>)
 8002c28:	2207      	movs	r2, #7
 8002c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	e000e010 	.word	0xe000e010

08002c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b07      	cmp	r3, #7
 8002c48:	d00f      	beq.n	8002c6a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b06      	cmp	r3, #6
 8002c4e:	d00c      	beq.n	8002c6a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b05      	cmp	r3, #5
 8002c54:	d009      	beq.n	8002c6a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d006      	beq.n	8002c6a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d003      	beq.n	8002c6a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002c62:	2192      	movs	r1, #146	; 0x92
 8002c64:	4804      	ldr	r0, [pc, #16]	; (8002c78 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002c66:	f7ff f912 	bl	8001e8e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff ff16 	bl	8002a9c <__NVIC_SetPriorityGrouping>
}
 8002c70:	bf00      	nop
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	080085fc 	.word	0x080085fc

08002c7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b0f      	cmp	r3, #15
 8002c92:	d903      	bls.n	8002c9c <HAL_NVIC_SetPriority+0x20>
 8002c94:	21aa      	movs	r1, #170	; 0xaa
 8002c96:	480e      	ldr	r0, [pc, #56]	; (8002cd0 <HAL_NVIC_SetPriority+0x54>)
 8002c98:	f7ff f8f9 	bl	8001e8e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b0f      	cmp	r3, #15
 8002ca0:	d903      	bls.n	8002caa <HAL_NVIC_SetPriority+0x2e>
 8002ca2:	21ab      	movs	r1, #171	; 0xab
 8002ca4:	480a      	ldr	r0, [pc, #40]	; (8002cd0 <HAL_NVIC_SetPriority+0x54>)
 8002ca6:	f7ff f8f2 	bl	8001e8e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002caa:	f7ff ff1b 	bl	8002ae4 <__NVIC_GetPriorityGrouping>
 8002cae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	68b9      	ldr	r1, [r7, #8]
 8002cb4:	6978      	ldr	r0, [r7, #20]
 8002cb6:	f7ff ff6b 	bl	8002b90 <NVIC_EncodePriority>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff ff3a 	bl	8002b3c <__NVIC_SetPriority>
}
 8002cc8:	bf00      	nop
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	080085fc 	.word	0x080085fc

08002cd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	da03      	bge.n	8002cee <HAL_NVIC_EnableIRQ+0x1a>
 8002ce6:	21be      	movs	r1, #190	; 0xbe
 8002ce8:	4805      	ldr	r0, [pc, #20]	; (8002d00 <HAL_NVIC_EnableIRQ+0x2c>)
 8002cea:	f7ff f8d0 	bl	8001e8e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff ff04 	bl	8002b00 <__NVIC_EnableIRQ>
}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	080085fc 	.word	0x080085fc

08002d04 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff ff73 	bl	8002bf8 <SysTick_Config>
 8002d12:	4603      	mov	r3, r0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e0a5      	b.n	8002e7a <HAL_CRC_Init+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a54      	ldr	r2, [pc, #336]	; (8002e84 <HAL_CRC_Init+0x168>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d003      	beq.n	8002d40 <HAL_CRC_Init+0x24>
 8002d38:	2170      	movs	r1, #112	; 0x70
 8002d3a:	4853      	ldr	r0, [pc, #332]	; (8002e88 <HAL_CRC_Init+0x16c>)
 8002d3c:	f7ff f8a7 	bl	8001e8e <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	7f5b      	ldrb	r3, [r3, #29]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d105      	bne.n	8002d56 <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7fd fec9 	bl	8000ae8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	791b      	ldrb	r3, [r3, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d007      	beq.n	8002d74 <HAL_CRC_Init+0x58>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	791b      	ldrb	r3, [r3, #4]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d003      	beq.n	8002d74 <HAL_CRC_Init+0x58>
 8002d6c:	217e      	movs	r1, #126	; 0x7e
 8002d6e:	4846      	ldr	r0, [pc, #280]	; (8002e88 <HAL_CRC_Init+0x16c>)
 8002d70:	f7ff f88d 	bl	8001e8e <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	791b      	ldrb	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10c      	bne.n	8002d96 <HAL_CRC_Init+0x7a>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a42      	ldr	r2, [pc, #264]	; (8002e8c <HAL_CRC_Init+0x170>)
 8002d82:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0218 	bic.w	r2, r2, #24
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	e00c      	b.n	8002db0 <HAL_CRC_Init+0x94>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6899      	ldr	r1, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f875 	bl	8002e90 <HAL_CRCEx_Polynomial_Set>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <HAL_CRC_Init+0x94>
    {
      return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e064      	b.n	8002e7a <HAL_CRC_Init+0x15e>
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	795b      	ldrb	r3, [r3, #5]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d007      	beq.n	8002dc8 <HAL_CRC_Init+0xac>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	795b      	ldrb	r3, [r3, #5]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d003      	beq.n	8002dc8 <HAL_CRC_Init+0xac>
 8002dc0:	2190      	movs	r1, #144	; 0x90
 8002dc2:	4831      	ldr	r0, [pc, #196]	; (8002e88 <HAL_CRC_Init+0x16c>)
 8002dc4:	f7ff f863 	bl	8001e8e <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	795b      	ldrb	r3, [r3, #5]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d105      	bne.n	8002ddc <HAL_CRC_Init+0xc0>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd8:	611a      	str	r2, [r3, #16]
 8002dda:	e004      	b.n	8002de6 <HAL_CRC_Init+0xca>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6912      	ldr	r2, [r2, #16]
 8002de4:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00f      	beq.n	8002e0e <HAL_CRC_Init+0xf2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	2b20      	cmp	r3, #32
 8002df4:	d00b      	beq.n	8002e0e <HAL_CRC_Init+0xf2>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	2b40      	cmp	r3, #64	; 0x40
 8002dfc:	d007      	beq.n	8002e0e <HAL_CRC_Init+0xf2>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	2b60      	cmp	r3, #96	; 0x60
 8002e04:	d003      	beq.n	8002e0e <HAL_CRC_Init+0xf2>
 8002e06:	219c      	movs	r1, #156	; 0x9c
 8002e08:	481f      	ldr	r0, [pc, #124]	; (8002e88 <HAL_CRC_Init+0x16c>)
 8002e0a:	f7ff f840 	bl	8001e8e <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	695a      	ldr	r2, [r3, #20]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d007      	beq.n	8002e3c <HAL_CRC_Init+0x120>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	2b80      	cmp	r3, #128	; 0x80
 8002e32:	d003      	beq.n	8002e3c <HAL_CRC_Init+0x120>
 8002e34:	21a0      	movs	r1, #160	; 0xa0
 8002e36:	4814      	ldr	r0, [pc, #80]	; (8002e88 <HAL_CRC_Init+0x16c>)
 8002e38:	f7ff f829 	bl	8001e8e <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699a      	ldr	r2, [r3, #24]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	609a      	str	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d00b      	beq.n	8002e72 <HAL_CRC_Init+0x156>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d007      	beq.n	8002e72 <HAL_CRC_Init+0x156>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d003      	beq.n	8002e72 <HAL_CRC_Init+0x156>
 8002e6a:	21a5      	movs	r1, #165	; 0xa5
 8002e6c:	4806      	ldr	r0, [pc, #24]	; (8002e88 <HAL_CRC_Init+0x16c>)
 8002e6e:	f7ff f80e 	bl	8001e8e <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40023000 	.word	0x40023000
 8002e88:	08008638 	.word	0x08008638
 8002e8c:	04c11db7 	.word	0x04c11db7

08002e90 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002ea0:	231f      	movs	r3, #31
 8002ea2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00c      	beq.n	8002ec4 <HAL_CRCEx_Polynomial_Set+0x34>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d009      	beq.n	8002ec4 <HAL_CRCEx_Polynomial_Set+0x34>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b10      	cmp	r3, #16
 8002eb4:	d006      	beq.n	8002ec4 <HAL_CRCEx_Polynomial_Set+0x34>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b18      	cmp	r3, #24
 8002eba:	d003      	beq.n	8002ec4 <HAL_CRCEx_Polynomial_Set+0x34>
 8002ebc:	215f      	movs	r1, #95	; 0x5f
 8002ebe:	483e      	ldr	r0, [pc, #248]	; (8002fb8 <HAL_CRCEx_Polynomial_Set+0x128>)
 8002ec0:	f7fe ffe5 	bl	8001e8e <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002ec4:	bf00      	nop
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1e5a      	subs	r2, r3, #1
 8002eca:	613a      	str	r2, [r7, #16]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d009      	beq.n	8002ee4 <HAL_CRCEx_Polynomial_Set+0x54>
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f003 031f 	and.w	r3, r3, #31
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f0      	beq.n	8002ec6 <HAL_CRCEx_Polynomial_Set+0x36>
  {
  }

  switch (PolyLength)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b18      	cmp	r3, #24
 8002ee8:	d846      	bhi.n	8002f78 <HAL_CRCEx_Polynomial_Set+0xe8>
 8002eea:	a201      	add	r2, pc, #4	; (adr r2, 8002ef0 <HAL_CRCEx_Polynomial_Set+0x60>)
 8002eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef0:	08002f7f 	.word	0x08002f7f
 8002ef4:	08002f79 	.word	0x08002f79
 8002ef8:	08002f79 	.word	0x08002f79
 8002efc:	08002f79 	.word	0x08002f79
 8002f00:	08002f79 	.word	0x08002f79
 8002f04:	08002f79 	.word	0x08002f79
 8002f08:	08002f79 	.word	0x08002f79
 8002f0c:	08002f79 	.word	0x08002f79
 8002f10:	08002f6d 	.word	0x08002f6d
 8002f14:	08002f79 	.word	0x08002f79
 8002f18:	08002f79 	.word	0x08002f79
 8002f1c:	08002f79 	.word	0x08002f79
 8002f20:	08002f79 	.word	0x08002f79
 8002f24:	08002f79 	.word	0x08002f79
 8002f28:	08002f79 	.word	0x08002f79
 8002f2c:	08002f79 	.word	0x08002f79
 8002f30:	08002f61 	.word	0x08002f61
 8002f34:	08002f79 	.word	0x08002f79
 8002f38:	08002f79 	.word	0x08002f79
 8002f3c:	08002f79 	.word	0x08002f79
 8002f40:	08002f79 	.word	0x08002f79
 8002f44:	08002f79 	.word	0x08002f79
 8002f48:	08002f79 	.word	0x08002f79
 8002f4c:	08002f79 	.word	0x08002f79
 8002f50:	08002f55 	.word	0x08002f55
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	2b06      	cmp	r3, #6
 8002f58:	d913      	bls.n	8002f82 <HAL_CRCEx_Polynomial_Set+0xf2>
      {
        status =   HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002f5e:	e010      	b.n	8002f82 <HAL_CRCEx_Polynomial_Set+0xf2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	2b07      	cmp	r3, #7
 8002f64:	d90f      	bls.n	8002f86 <HAL_CRCEx_Polynomial_Set+0xf6>
      {
        status =   HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002f6a:	e00c      	b.n	8002f86 <HAL_CRCEx_Polynomial_Set+0xf6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	2b0f      	cmp	r3, #15
 8002f70:	d90b      	bls.n	8002f8a <HAL_CRCEx_Polynomial_Set+0xfa>
      {
        status =   HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002f76:	e008      	b.n	8002f8a <HAL_CRCEx_Polynomial_Set+0xfa>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f7c:	e006      	b.n	8002f8c <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8002f7e:	bf00      	nop
 8002f80:	e004      	b.n	8002f8c <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8002f82:	bf00      	nop
 8002f84:	e002      	b.n	8002f8c <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8002f86:	bf00      	nop
 8002f88:	e000      	b.n	8002f8c <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8002f8a:	bf00      	nop
  }
  if (status == HAL_OK)
 8002f8c:	7dfb      	ldrb	r3, [r7, #23]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10d      	bne.n	8002fae <HAL_CRCEx_Polynomial_Set+0x11e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f023 0118 	bic.w	r1, r3, #24
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	08008670 	.word	0x08008670

08002fbc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d004      	beq.n	8002fda <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2280      	movs	r2, #128	; 0x80
 8002fd4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e00c      	b.n	8002ff4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2205      	movs	r2, #5
 8002fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0201 	bic.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003012:	2300      	movs	r3, #0
 8003014:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003016:	2300      	movs	r3, #0
 8003018:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a42      	ldr	r2, [pc, #264]	; (8003128 <HAL_GPIO_Init+0x128>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d02b      	beq.n	800307a <HAL_GPIO_Init+0x7a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a41      	ldr	r2, [pc, #260]	; (800312c <HAL_GPIO_Init+0x12c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d027      	beq.n	800307a <HAL_GPIO_Init+0x7a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a40      	ldr	r2, [pc, #256]	; (8003130 <HAL_GPIO_Init+0x130>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d023      	beq.n	800307a <HAL_GPIO_Init+0x7a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a3f      	ldr	r2, [pc, #252]	; (8003134 <HAL_GPIO_Init+0x134>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d01f      	beq.n	800307a <HAL_GPIO_Init+0x7a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a3e      	ldr	r2, [pc, #248]	; (8003138 <HAL_GPIO_Init+0x138>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d01b      	beq.n	800307a <HAL_GPIO_Init+0x7a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a3d      	ldr	r2, [pc, #244]	; (800313c <HAL_GPIO_Init+0x13c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d017      	beq.n	800307a <HAL_GPIO_Init+0x7a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a3c      	ldr	r2, [pc, #240]	; (8003140 <HAL_GPIO_Init+0x140>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d013      	beq.n	800307a <HAL_GPIO_Init+0x7a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a3b      	ldr	r2, [pc, #236]	; (8003144 <HAL_GPIO_Init+0x144>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00f      	beq.n	800307a <HAL_GPIO_Init+0x7a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a3a      	ldr	r2, [pc, #232]	; (8003148 <HAL_GPIO_Init+0x148>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00b      	beq.n	800307a <HAL_GPIO_Init+0x7a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a39      	ldr	r2, [pc, #228]	; (800314c <HAL_GPIO_Init+0x14c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d007      	beq.n	800307a <HAL_GPIO_Init+0x7a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a38      	ldr	r2, [pc, #224]	; (8003150 <HAL_GPIO_Init+0x150>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d003      	beq.n	800307a <HAL_GPIO_Init+0x7a>
 8003072:	21b1      	movs	r1, #177	; 0xb1
 8003074:	4837      	ldr	r0, [pc, #220]	; (8003154 <HAL_GPIO_Init+0x154>)
 8003076:	f7fe ff0a 	bl	8001e8e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	b29b      	uxth	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d103      	bne.n	800308c <HAL_GPIO_Init+0x8c>
 8003084:	21b2      	movs	r1, #178	; 0xb2
 8003086:	4833      	ldr	r0, [pc, #204]	; (8003154 <HAL_GPIO_Init+0x154>)
 8003088:	f7fe ff01 	bl	8001e8e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d035      	beq.n	8003100 <HAL_GPIO_Init+0x100>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d031      	beq.n	8003100 <HAL_GPIO_Init+0x100>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b11      	cmp	r3, #17
 80030a2:	d02d      	beq.n	8003100 <HAL_GPIO_Init+0x100>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d029      	beq.n	8003100 <HAL_GPIO_Init+0x100>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b12      	cmp	r3, #18
 80030b2:	d025      	beq.n	8003100 <HAL_GPIO_Init+0x100>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	4a27      	ldr	r2, [pc, #156]	; (8003158 <HAL_GPIO_Init+0x158>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d020      	beq.n	8003100 <HAL_GPIO_Init+0x100>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	4a26      	ldr	r2, [pc, #152]	; (800315c <HAL_GPIO_Init+0x15c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d01b      	beq.n	8003100 <HAL_GPIO_Init+0x100>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	4a24      	ldr	r2, [pc, #144]	; (8003160 <HAL_GPIO_Init+0x160>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d016      	beq.n	8003100 <HAL_GPIO_Init+0x100>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4a23      	ldr	r2, [pc, #140]	; (8003164 <HAL_GPIO_Init+0x164>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d011      	beq.n	8003100 <HAL_GPIO_Init+0x100>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	4a21      	ldr	r2, [pc, #132]	; (8003168 <HAL_GPIO_Init+0x168>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00c      	beq.n	8003100 <HAL_GPIO_Init+0x100>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	4a20      	ldr	r2, [pc, #128]	; (800316c <HAL_GPIO_Init+0x16c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d007      	beq.n	8003100 <HAL_GPIO_Init+0x100>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d003      	beq.n	8003100 <HAL_GPIO_Init+0x100>
 80030f8:	21b3      	movs	r1, #179	; 0xb3
 80030fa:	4816      	ldr	r0, [pc, #88]	; (8003154 <HAL_GPIO_Init+0x154>)
 80030fc:	f7fe fec7 	bl	8001e8e <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00b      	beq.n	8003120 <HAL_GPIO_Init+0x120>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d007      	beq.n	8003120 <HAL_GPIO_Init+0x120>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b02      	cmp	r3, #2
 8003116:	d003      	beq.n	8003120 <HAL_GPIO_Init+0x120>
 8003118:	21b4      	movs	r1, #180	; 0xb4
 800311a:	480e      	ldr	r0, [pc, #56]	; (8003154 <HAL_GPIO_Init+0x154>)
 800311c:	f7fe feb7 	bl	8001e8e <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003120:	2300      	movs	r3, #0
 8003122:	61fb      	str	r3, [r7, #28]
 8003124:	e2d6      	b.n	80036d4 <HAL_GPIO_Init+0x6d4>
 8003126:	bf00      	nop
 8003128:	40020000 	.word	0x40020000
 800312c:	40020400 	.word	0x40020400
 8003130:	40020800 	.word	0x40020800
 8003134:	40020c00 	.word	0x40020c00
 8003138:	40021000 	.word	0x40021000
 800313c:	40021400 	.word	0x40021400
 8003140:	40021800 	.word	0x40021800
 8003144:	40021c00 	.word	0x40021c00
 8003148:	40022000 	.word	0x40022000
 800314c:	40022400 	.word	0x40022400
 8003150:	40022800 	.word	0x40022800
 8003154:	080086ac 	.word	0x080086ac
 8003158:	10110000 	.word	0x10110000
 800315c:	10210000 	.word	0x10210000
 8003160:	10310000 	.word	0x10310000
 8003164:	10120000 	.word	0x10120000
 8003168:	10220000 	.word	0x10220000
 800316c:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003170:	2201      	movs	r2, #1
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	4013      	ands	r3, r2
 8003182:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	429a      	cmp	r2, r3
 800318a:	f040 82a0 	bne.w	80036ce <HAL_GPIO_Init+0x6ce>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d00b      	beq.n	80031ae <HAL_GPIO_Init+0x1ae>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d007      	beq.n	80031ae <HAL_GPIO_Init+0x1ae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031a2:	2b11      	cmp	r3, #17
 80031a4:	d003      	beq.n	80031ae <HAL_GPIO_Init+0x1ae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b12      	cmp	r3, #18
 80031ac:	d144      	bne.n	8003238 <HAL_GPIO_Init+0x238>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00f      	beq.n	80031d6 <HAL_GPIO_Init+0x1d6>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d00b      	beq.n	80031d6 <HAL_GPIO_Init+0x1d6>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d007      	beq.n	80031d6 <HAL_GPIO_Init+0x1d6>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d003      	beq.n	80031d6 <HAL_GPIO_Init+0x1d6>
 80031ce:	21c6      	movs	r1, #198	; 0xc6
 80031d0:	482a      	ldr	r0, [pc, #168]	; (800327c <HAL_GPIO_Init+0x27c>)
 80031d2:	f7fe fe5c 	bl	8001e8e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	2203      	movs	r2, #3
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43db      	mvns	r3, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4013      	ands	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800320c:	2201      	movs	r2, #1
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	43db      	mvns	r3, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4013      	ands	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	f003 0201 	and.w	r2, r3, #1
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	2203      	movs	r2, #3
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4013      	ands	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d007      	beq.n	8003280 <HAL_GPIO_Init+0x280>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b12      	cmp	r3, #18
 8003276:	f040 814b 	bne.w	8003510 <HAL_GPIO_Init+0x510>
 800327a:	e001      	b.n	8003280 <HAL_GPIO_Init+0x280>
 800327c:	080086ac 	.word	0x080086ac
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 811f 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	2b01      	cmp	r3, #1
 8003290:	f000 811a 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 8115 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 8110 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 810b 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	f000 8106 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	f000 8101 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	f000 80fc 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	f000 80f7 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	2b03      	cmp	r3, #3
 80032e0:	f000 80f2 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	2b03      	cmp	r3, #3
 80032ea:	f000 80ed 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	f000 80e8 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	f000 80e3 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	2b03      	cmp	r3, #3
 8003308:	f000 80de 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	2b03      	cmp	r3, #3
 8003312:	f000 80d9 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b04      	cmp	r3, #4
 800331c:	f000 80d4 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	2b04      	cmp	r3, #4
 8003326:	f000 80cf 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	2b04      	cmp	r3, #4
 8003330:	f000 80ca 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	2b04      	cmp	r3, #4
 800333a:	f000 80c5 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	2b04      	cmp	r3, #4
 8003344:	f000 80c0 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	2b05      	cmp	r3, #5
 800334e:	f000 80bb 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	2b05      	cmp	r3, #5
 8003358:	f000 80b6 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	2b05      	cmp	r3, #5
 8003362:	f000 80b1 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	2b05      	cmp	r3, #5
 800336c:	f000 80ac 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	2b05      	cmp	r3, #5
 8003376:	f000 80a7 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b05      	cmp	r3, #5
 8003380:	f000 80a2 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	2b06      	cmp	r3, #6
 800338a:	f000 809d 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b06      	cmp	r3, #6
 8003394:	f000 8098 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	2b07      	cmp	r3, #7
 800339e:	f000 8093 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	2b07      	cmp	r3, #7
 80033a8:	f000 808e 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	2b07      	cmp	r3, #7
 80033b2:	f000 8089 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	2b07      	cmp	r3, #7
 80033bc:	f000 8084 	beq.w	80034c8 <HAL_GPIO_Init+0x4c8>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	2b07      	cmp	r3, #7
 80033c6:	d07f      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	2b07      	cmp	r3, #7
 80033ce:	d07b      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	2b07      	cmp	r3, #7
 80033d6:	d077      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d073      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d06f      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d06b      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d067      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d063      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	2b08      	cmp	r3, #8
 8003406:	d05f      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	2b08      	cmp	r3, #8
 800340e:	d05b      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	2b09      	cmp	r3, #9
 8003416:	d057      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	2b09      	cmp	r3, #9
 800341e:	d053      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	2b09      	cmp	r3, #9
 8003426:	d04f      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	2b09      	cmp	r3, #9
 800342e:	d04b      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	2b09      	cmp	r3, #9
 8003436:	d047      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	2b09      	cmp	r3, #9
 800343e:	d043      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	2b09      	cmp	r3, #9
 8003446:	d03f      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	2b0a      	cmp	r3, #10
 800344e:	d03b      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	2b0a      	cmp	r3, #10
 8003456:	d037      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	2b0a      	cmp	r3, #10
 800345e:	d033      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	2b0a      	cmp	r3, #10
 8003466:	d02f      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	2b0b      	cmp	r3, #11
 800346e:	d02b      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	2b0a      	cmp	r3, #10
 8003476:	d027      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	2b0b      	cmp	r3, #11
 800347e:	d023      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	2b0b      	cmp	r3, #11
 8003486:	d01f      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	2b0c      	cmp	r3, #12
 800348e:	d01b      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	2b0c      	cmp	r3, #12
 8003496:	d017      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	2b0c      	cmp	r3, #12
 800349e:	d013      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	2b0f      	cmp	r3, #15
 80034a6:	d00f      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	2b0d      	cmp	r3, #13
 80034ae:	d00b      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	2b0e      	cmp	r3, #14
 80034b6:	d007      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	2b0d      	cmp	r3, #13
 80034be:	d003      	beq.n	80034c8 <HAL_GPIO_Init+0x4c8>
 80034c0:	21de      	movs	r1, #222	; 0xde
 80034c2:	4888      	ldr	r0, [pc, #544]	; (80036e4 <HAL_GPIO_Init+0x6e4>)
 80034c4:	f7fe fce3 	bl	8001e8e <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	08da      	lsrs	r2, r3, #3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3208      	adds	r2, #8
 80034d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	220f      	movs	r2, #15
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4313      	orrs	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	08da      	lsrs	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3208      	adds	r2, #8
 800350a:	69b9      	ldr	r1, [r7, #24]
 800350c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	2203      	movs	r2, #3
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f003 0203 	and.w	r2, r3, #3
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80be 	beq.w	80036ce <HAL_GPIO_Init+0x6ce>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003552:	4b65      	ldr	r3, [pc, #404]	; (80036e8 <HAL_GPIO_Init+0x6e8>)
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	4a64      	ldr	r2, [pc, #400]	; (80036e8 <HAL_GPIO_Init+0x6e8>)
 8003558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800355c:	6453      	str	r3, [r2, #68]	; 0x44
 800355e:	4b62      	ldr	r3, [pc, #392]	; (80036e8 <HAL_GPIO_Init+0x6e8>)
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800356a:	4a60      	ldr	r2, [pc, #384]	; (80036ec <HAL_GPIO_Init+0x6ec>)
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	089b      	lsrs	r3, r3, #2
 8003570:	3302      	adds	r3, #2
 8003572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003576:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	220f      	movs	r2, #15
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43db      	mvns	r3, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4013      	ands	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a57      	ldr	r2, [pc, #348]	; (80036f0 <HAL_GPIO_Init+0x6f0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d037      	beq.n	8003606 <HAL_GPIO_Init+0x606>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a56      	ldr	r2, [pc, #344]	; (80036f4 <HAL_GPIO_Init+0x6f4>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d031      	beq.n	8003602 <HAL_GPIO_Init+0x602>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a55      	ldr	r2, [pc, #340]	; (80036f8 <HAL_GPIO_Init+0x6f8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d02b      	beq.n	80035fe <HAL_GPIO_Init+0x5fe>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a54      	ldr	r2, [pc, #336]	; (80036fc <HAL_GPIO_Init+0x6fc>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d025      	beq.n	80035fa <HAL_GPIO_Init+0x5fa>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a53      	ldr	r2, [pc, #332]	; (8003700 <HAL_GPIO_Init+0x700>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d01f      	beq.n	80035f6 <HAL_GPIO_Init+0x5f6>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a52      	ldr	r2, [pc, #328]	; (8003704 <HAL_GPIO_Init+0x704>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d019      	beq.n	80035f2 <HAL_GPIO_Init+0x5f2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a51      	ldr	r2, [pc, #324]	; (8003708 <HAL_GPIO_Init+0x708>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d013      	beq.n	80035ee <HAL_GPIO_Init+0x5ee>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a50      	ldr	r2, [pc, #320]	; (800370c <HAL_GPIO_Init+0x70c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00d      	beq.n	80035ea <HAL_GPIO_Init+0x5ea>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a4f      	ldr	r2, [pc, #316]	; (8003710 <HAL_GPIO_Init+0x710>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d007      	beq.n	80035e6 <HAL_GPIO_Init+0x5e6>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a4e      	ldr	r2, [pc, #312]	; (8003714 <HAL_GPIO_Init+0x714>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d101      	bne.n	80035e2 <HAL_GPIO_Init+0x5e2>
 80035de:	2309      	movs	r3, #9
 80035e0:	e012      	b.n	8003608 <HAL_GPIO_Init+0x608>
 80035e2:	230a      	movs	r3, #10
 80035e4:	e010      	b.n	8003608 <HAL_GPIO_Init+0x608>
 80035e6:	2308      	movs	r3, #8
 80035e8:	e00e      	b.n	8003608 <HAL_GPIO_Init+0x608>
 80035ea:	2307      	movs	r3, #7
 80035ec:	e00c      	b.n	8003608 <HAL_GPIO_Init+0x608>
 80035ee:	2306      	movs	r3, #6
 80035f0:	e00a      	b.n	8003608 <HAL_GPIO_Init+0x608>
 80035f2:	2305      	movs	r3, #5
 80035f4:	e008      	b.n	8003608 <HAL_GPIO_Init+0x608>
 80035f6:	2304      	movs	r3, #4
 80035f8:	e006      	b.n	8003608 <HAL_GPIO_Init+0x608>
 80035fa:	2303      	movs	r3, #3
 80035fc:	e004      	b.n	8003608 <HAL_GPIO_Init+0x608>
 80035fe:	2302      	movs	r3, #2
 8003600:	e002      	b.n	8003608 <HAL_GPIO_Init+0x608>
 8003602:	2301      	movs	r3, #1
 8003604:	e000      	b.n	8003608 <HAL_GPIO_Init+0x608>
 8003606:	2300      	movs	r3, #0
 8003608:	69fa      	ldr	r2, [r7, #28]
 800360a:	f002 0203 	and.w	r2, r2, #3
 800360e:	0092      	lsls	r2, r2, #2
 8003610:	4093      	lsls	r3, r2
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4313      	orrs	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003618:	4934      	ldr	r1, [pc, #208]	; (80036ec <HAL_GPIO_Init+0x6ec>)
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	089b      	lsrs	r3, r3, #2
 800361e:	3302      	adds	r3, #2
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003626:	4b3c      	ldr	r3, [pc, #240]	; (8003718 <HAL_GPIO_Init+0x718>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	43db      	mvns	r3, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4013      	ands	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_GPIO_Init+0x64a>
        {
          temp |= iocurrent;
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800364a:	4a33      	ldr	r2, [pc, #204]	; (8003718 <HAL_GPIO_Init+0x718>)
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003650:	4b31      	ldr	r3, [pc, #196]	; (8003718 <HAL_GPIO_Init+0x718>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	43db      	mvns	r3, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4013      	ands	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_GPIO_Init+0x674>
        {
          temp |= iocurrent;
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003674:	4a28      	ldr	r2, [pc, #160]	; (8003718 <HAL_GPIO_Init+0x718>)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800367a:	4b27      	ldr	r3, [pc, #156]	; (8003718 <HAL_GPIO_Init+0x718>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	43db      	mvns	r3, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4013      	ands	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_GPIO_Init+0x69e>
        {
          temp |= iocurrent;
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	4313      	orrs	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800369e:	4a1e      	ldr	r2, [pc, #120]	; (8003718 <HAL_GPIO_Init+0x718>)
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036a4:	4b1c      	ldr	r3, [pc, #112]	; (8003718 <HAL_GPIO_Init+0x718>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	43db      	mvns	r3, r3
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4013      	ands	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_GPIO_Init+0x6c8>
        {
          temp |= iocurrent;
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036c8:	4a13      	ldr	r2, [pc, #76]	; (8003718 <HAL_GPIO_Init+0x718>)
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	3301      	adds	r3, #1
 80036d2:	61fb      	str	r3, [r7, #28]
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	2b0f      	cmp	r3, #15
 80036d8:	f67f ad4a 	bls.w	8003170 <HAL_GPIO_Init+0x170>
      }
    }
  }
}
 80036dc:	bf00      	nop
 80036de:	3720      	adds	r7, #32
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	080086ac 	.word	0x080086ac
 80036e8:	40023800 	.word	0x40023800
 80036ec:	40013800 	.word	0x40013800
 80036f0:	40020000 	.word	0x40020000
 80036f4:	40020400 	.word	0x40020400
 80036f8:	40020800 	.word	0x40020800
 80036fc:	40020c00 	.word	0x40020c00
 8003700:	40021000 	.word	0x40021000
 8003704:	40021400 	.word	0x40021400
 8003708:	40021800 	.word	0x40021800
 800370c:	40021c00 	.word	0x40021c00
 8003710:	40022000 	.word	0x40022000
 8003714:	40022400 	.word	0x40022400
 8003718:	40013c00 	.word	0x40013c00

0800371c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003728:	887b      	ldrh	r3, [r7, #2]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d104      	bne.n	8003738 <HAL_GPIO_ReadPin+0x1c>
 800372e:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8003732:	4809      	ldr	r0, [pc, #36]	; (8003758 <HAL_GPIO_ReadPin+0x3c>)
 8003734:	f7fe fbab 	bl	8001e8e <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	887b      	ldrh	r3, [r7, #2]
 800373e:	4013      	ands	r3, r2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
 8003748:	e001      	b.n	800374e <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800374a:	2300      	movs	r3, #0
 800374c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800374e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	080086ac 	.word	0x080086ac

0800375c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	807b      	strh	r3, [r7, #2]
 8003768:	4613      	mov	r3, r2
 800376a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800376c:	887b      	ldrh	r3, [r7, #2]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d104      	bne.n	800377c <HAL_GPIO_WritePin+0x20>
 8003772:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8003776:	480e      	ldr	r0, [pc, #56]	; (80037b0 <HAL_GPIO_WritePin+0x54>)
 8003778:	f7fe fb89 	bl	8001e8e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800377c:	787b      	ldrb	r3, [r7, #1]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <HAL_GPIO_WritePin+0x36>
 8003782:	787b      	ldrb	r3, [r7, #1]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d004      	beq.n	8003792 <HAL_GPIO_WritePin+0x36>
 8003788:	f240 119b 	movw	r1, #411	; 0x19b
 800378c:	4808      	ldr	r0, [pc, #32]	; (80037b0 <HAL_GPIO_WritePin+0x54>)
 800378e:	f7fe fb7e 	bl	8001e8e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003792:	787b      	ldrb	r3, [r7, #1]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003798:	887a      	ldrh	r2, [r7, #2]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800379e:	e003      	b.n	80037a8 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80037a0:	887b      	ldrh	r3, [r7, #2]
 80037a2:	041a      	lsls	r2, r3, #16
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	619a      	str	r2, [r3, #24]
}
 80037a8:	bf00      	nop
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	080086ac 	.word	0x080086ac

080037b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80037c0:	887b      	ldrh	r3, [r7, #2]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d104      	bne.n	80037d0 <HAL_GPIO_TogglePin+0x1c>
 80037c6:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80037ca:	480a      	ldr	r0, [pc, #40]	; (80037f4 <HAL_GPIO_TogglePin+0x40>)
 80037cc:	f7fe fb5f 	bl	8001e8e <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	887b      	ldrh	r3, [r7, #2]
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d004      	beq.n	80037e6 <HAL_GPIO_TogglePin+0x32>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80037dc:	887b      	ldrh	r3, [r7, #2]
 80037de:	041a      	lsls	r2, r3, #16
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80037e4:	e002      	b.n	80037ec <HAL_GPIO_TogglePin+0x38>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037e6:	887a      	ldrh	r2, [r7, #2]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	619a      	str	r2, [r3, #24]
}
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	080086ac 	.word	0x080086ac

080037f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003802:	4b08      	ldr	r3, [pc, #32]	; (8003824 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003804:	695a      	ldr	r2, [r3, #20]
 8003806:	88fb      	ldrh	r3, [r7, #6]
 8003808:	4013      	ands	r3, r2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d006      	beq.n	800381c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800380e:	4a05      	ldr	r2, [pc, #20]	; (8003824 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003810:	88fb      	ldrh	r3, [r7, #6]
 8003812:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003814:	88fb      	ldrh	r3, [r7, #6]
 8003816:	4618      	mov	r0, r3
 8003818:	f000 f806 	bl	8003828 <HAL_GPIO_EXTI_Callback>
  }
}
 800381c:	bf00      	nop
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40013c00 	.word	0x40013c00

08003828 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
	...

08003840 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003846:	2300      	movs	r3, #0
 8003848:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800384a:	4b23      	ldr	r3, [pc, #140]	; (80038d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	4a22      	ldr	r2, [pc, #136]	; (80038d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003854:	6413      	str	r3, [r2, #64]	; 0x40
 8003856:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385e:	603b      	str	r3, [r7, #0]
 8003860:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003862:	4b1e      	ldr	r3, [pc, #120]	; (80038dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a1d      	ldr	r2, [pc, #116]	; (80038dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800386e:	f7ff f8e7 	bl	8002a40 <HAL_GetTick>
 8003872:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003874:	e009      	b.n	800388a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003876:	f7ff f8e3 	bl	8002a40 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003884:	d901      	bls.n	800388a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e022      	b.n	80038d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800388a:	4b14      	ldr	r3, [pc, #80]	; (80038dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003896:	d1ee      	bne.n	8003876 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003898:	4b10      	ldr	r3, [pc, #64]	; (80038dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a0f      	ldr	r2, [pc, #60]	; (80038dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800389e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038a4:	f7ff f8cc 	bl	8002a40 <HAL_GetTick>
 80038a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038aa:	e009      	b.n	80038c0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038ac:	f7ff f8c8 	bl	8002a40 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038ba:	d901      	bls.n	80038c0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e007      	b.n	80038d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038c0:	4b06      	ldr	r3, [pc, #24]	; (80038dc <HAL_PWREx_EnableOverDrive+0x9c>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038cc:	d1ee      	bne.n	80038ac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40007000 	.word	0x40007000

080038e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80038e8:	2300      	movs	r3, #0
 80038ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e35c      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b0f      	cmp	r3, #15
 80038fc:	d904      	bls.n	8003908 <HAL_RCC_OscConfig+0x28>
 80038fe:	f240 1165 	movw	r1, #357	; 0x165
 8003902:	4892      	ldr	r0, [pc, #584]	; (8003b4c <HAL_RCC_OscConfig+0x26c>)
 8003904:	f7fe fac3 	bl	8001e8e <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 809a 	beq.w	8003a4a <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00e      	beq.n	800393c <HAL_RCC_OscConfig+0x5c>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003926:	d009      	beq.n	800393c <HAL_RCC_OscConfig+0x5c>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003930:	d004      	beq.n	800393c <HAL_RCC_OscConfig+0x5c>
 8003932:	f240 116b 	movw	r1, #363	; 0x16b
 8003936:	4885      	ldr	r0, [pc, #532]	; (8003b4c <HAL_RCC_OscConfig+0x26c>)
 8003938:	f7fe faa9 	bl	8001e8e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800393c:	4b84      	ldr	r3, [pc, #528]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 030c 	and.w	r3, r3, #12
 8003944:	2b04      	cmp	r3, #4
 8003946:	d00c      	beq.n	8003962 <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003948:	4b81      	ldr	r3, [pc, #516]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 030c 	and.w	r3, r3, #12
 8003950:	2b08      	cmp	r3, #8
 8003952:	d112      	bne.n	800397a <HAL_RCC_OscConfig+0x9a>
 8003954:	4b7e      	ldr	r3, [pc, #504]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003960:	d10b      	bne.n	800397a <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003962:	4b7b      	ldr	r3, [pc, #492]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d06c      	beq.n	8003a48 <HAL_RCC_OscConfig+0x168>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d168      	bne.n	8003a48 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e31a      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003982:	d106      	bne.n	8003992 <HAL_RCC_OscConfig+0xb2>
 8003984:	4b72      	ldr	r3, [pc, #456]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a71      	ldr	r2, [pc, #452]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 800398a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	e02e      	b.n	80039f0 <HAL_RCC_OscConfig+0x110>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10c      	bne.n	80039b4 <HAL_RCC_OscConfig+0xd4>
 800399a:	4b6d      	ldr	r3, [pc, #436]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a6c      	ldr	r2, [pc, #432]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	4b6a      	ldr	r3, [pc, #424]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a69      	ldr	r2, [pc, #420]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	e01d      	b.n	80039f0 <HAL_RCC_OscConfig+0x110>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039bc:	d10c      	bne.n	80039d8 <HAL_RCC_OscConfig+0xf8>
 80039be:	4b64      	ldr	r3, [pc, #400]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a63      	ldr	r2, [pc, #396]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	4b61      	ldr	r3, [pc, #388]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a60      	ldr	r2, [pc, #384]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	e00b      	b.n	80039f0 <HAL_RCC_OscConfig+0x110>
 80039d8:	4b5d      	ldr	r3, [pc, #372]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a5c      	ldr	r2, [pc, #368]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	4b5a      	ldr	r3, [pc, #360]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a59      	ldr	r2, [pc, #356]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 80039ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d013      	beq.n	8003a20 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7ff f822 	bl	8002a40 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a00:	f7ff f81e 	bl	8002a40 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b64      	cmp	r3, #100	; 0x64
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e2ce      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a12:	4b4f      	ldr	r3, [pc, #316]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f0      	beq.n	8003a00 <HAL_RCC_OscConfig+0x120>
 8003a1e:	e014      	b.n	8003a4a <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7ff f80e 	bl	8002a40 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a28:	f7ff f80a 	bl	8002a40 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b64      	cmp	r3, #100	; 0x64
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e2ba      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3a:	4b45      	ldr	r3, [pc, #276]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x148>
 8003a46:	e000      	b.n	8003a4a <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 8084 	beq.w	8003b60 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_RCC_OscConfig+0x192>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d004      	beq.n	8003a72 <HAL_RCC_OscConfig+0x192>
 8003a68:	f240 119d 	movw	r1, #413	; 0x19d
 8003a6c:	4837      	ldr	r0, [pc, #220]	; (8003b4c <HAL_RCC_OscConfig+0x26c>)
 8003a6e:	f7fe fa0e 	bl	8001e8e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	2b1f      	cmp	r3, #31
 8003a78:	d904      	bls.n	8003a84 <HAL_RCC_OscConfig+0x1a4>
 8003a7a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8003a7e:	4833      	ldr	r0, [pc, #204]	; (8003b4c <HAL_RCC_OscConfig+0x26c>)
 8003a80:	f7fe fa05 	bl	8001e8e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a84:	4b32      	ldr	r3, [pc, #200]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 030c 	and.w	r3, r3, #12
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00b      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a90:	4b2f      	ldr	r3, [pc, #188]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 030c 	and.w	r3, r3, #12
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d11c      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x1f6>
 8003a9c:	4b2c      	ldr	r3, [pc, #176]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d116      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa8:	4b29      	ldr	r3, [pc, #164]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x1e0>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e277      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac0:	4b23      	ldr	r3, [pc, #140]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	4920      	ldr	r1, [pc, #128]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad4:	e044      	b.n	8003b60 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d023      	beq.n	8003b26 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ade:	4b1c      	ldr	r3, [pc, #112]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1b      	ldr	r2, [pc, #108]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003ae4:	f043 0301 	orr.w	r3, r3, #1
 8003ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aea:	f7fe ffa9 	bl	8002a40 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af2:	f7fe ffa5 	bl	8002a40 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e255      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b04:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0f0      	beq.n	8003af2 <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b10:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	490c      	ldr	r1, [pc, #48]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	600b      	str	r3, [r1, #0]
 8003b24:	e01c      	b.n	8003b60 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b26:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a09      	ldr	r2, [pc, #36]	; (8003b50 <HAL_RCC_OscConfig+0x270>)
 8003b2c:	f023 0301 	bic.w	r3, r3, #1
 8003b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b32:	f7fe ff85 	bl	8002a40 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b38:	e00c      	b.n	8003b54 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b3a:	f7fe ff81 	bl	8002a40 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d905      	bls.n	8003b54 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e231      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6d0>
 8003b4c:	080086e8 	.word	0x080086e8
 8003b50:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b54:	4b7e      	ldr	r3, [pc, #504]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1ec      	bne.n	8003b3a <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d043      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_RCC_OscConfig+0x2a6>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d004      	beq.n	8003b86 <HAL_RCC_OscConfig+0x2a6>
 8003b7c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8003b80:	4874      	ldr	r0, [pc, #464]	; (8003d54 <HAL_RCC_OscConfig+0x474>)
 8003b82:	f7fe f984 	bl	8001e8e <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d019      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b8e:	4b70      	ldr	r3, [pc, #448]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b92:	4a6f      	ldr	r2, [pc, #444]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9a:	f7fe ff51 	bl	8002a40 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba2:	f7fe ff4d 	bl	8002a40 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e1fd      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb4:	4b66      	ldr	r3, [pc, #408]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f0      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x2c2>
 8003bc0:	e018      	b.n	8003bf4 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc2:	4b63      	ldr	r3, [pc, #396]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc6:	4a62      	ldr	r2, [pc, #392]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bce:	f7fe ff37 	bl	8002a40 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd6:	f7fe ff33 	bl	8002a40 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e1e3      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be8:	4b59      	ldr	r3, [pc, #356]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1f0      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 80bc 	beq.w	8003d7a <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00c      	beq.n	8003c24 <HAL_RCC_OscConfig+0x344>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d008      	beq.n	8003c24 <HAL_RCC_OscConfig+0x344>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b05      	cmp	r3, #5
 8003c18:	d004      	beq.n	8003c24 <HAL_RCC_OscConfig+0x344>
 8003c1a:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003c1e:	484d      	ldr	r0, [pc, #308]	; (8003d54 <HAL_RCC_OscConfig+0x474>)
 8003c20:	f7fe f935 	bl	8001e8e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c24:	4b4a      	ldr	r3, [pc, #296]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10d      	bne.n	8003c4c <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c30:	4b47      	ldr	r3, [pc, #284]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	4a46      	ldr	r2, [pc, #280]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3c:	4b44      	ldr	r3, [pc, #272]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c4c:	4b42      	ldr	r3, [pc, #264]	; (8003d58 <HAL_RCC_OscConfig+0x478>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d118      	bne.n	8003c8a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c58:	4b3f      	ldr	r3, [pc, #252]	; (8003d58 <HAL_RCC_OscConfig+0x478>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a3e      	ldr	r2, [pc, #248]	; (8003d58 <HAL_RCC_OscConfig+0x478>)
 8003c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c64:	f7fe feec 	bl	8002a40 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6c:	f7fe fee8 	bl	8002a40 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b64      	cmp	r3, #100	; 0x64
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e198      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6d0>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c7e:	4b36      	ldr	r3, [pc, #216]	; (8003d58 <HAL_RCC_OscConfig+0x478>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f0      	beq.n	8003c6c <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d106      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x3c0>
 8003c92:	4b2f      	ldr	r3, [pc, #188]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c96:	4a2e      	ldr	r2, [pc, #184]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c9e:	e02d      	b.n	8003cfc <HAL_RCC_OscConfig+0x41c>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10c      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x3e2>
 8003ca8:	4b29      	ldr	r3, [pc, #164]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cac:	4a28      	ldr	r2, [pc, #160]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003cae:	f023 0301 	bic.w	r3, r3, #1
 8003cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb4:	4b26      	ldr	r3, [pc, #152]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb8:	4a25      	ldr	r2, [pc, #148]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003cba:	f023 0304 	bic.w	r3, r3, #4
 8003cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc0:	e01c      	b.n	8003cfc <HAL_RCC_OscConfig+0x41c>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2b05      	cmp	r3, #5
 8003cc8:	d10c      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x404>
 8003cca:	4b21      	ldr	r3, [pc, #132]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	4a20      	ldr	r2, [pc, #128]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003cd0:	f043 0304 	orr.w	r3, r3, #4
 8003cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd6:	4b1e      	ldr	r3, [pc, #120]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cda:	4a1d      	ldr	r2, [pc, #116]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce2:	e00b      	b.n	8003cfc <HAL_RCC_OscConfig+0x41c>
 8003ce4:	4b1a      	ldr	r3, [pc, #104]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	4a19      	ldr	r2, [pc, #100]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf0:	4b17      	ldr	r3, [pc, #92]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf4:	4a16      	ldr	r2, [pc, #88]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003cf6:	f023 0304 	bic.w	r3, r3, #4
 8003cfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d015      	beq.n	8003d30 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d04:	f7fe fe9c 	bl	8002a40 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d0a:	e00a      	b.n	8003d22 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d0c:	f7fe fe98 	bl	8002a40 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e146      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d22:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <HAL_RCC_OscConfig+0x470>)
 8003d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0ee      	beq.n	8003d0c <HAL_RCC_OscConfig+0x42c>
 8003d2e:	e01b      	b.n	8003d68 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d30:	f7fe fe86 	bl	8002a40 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d36:	e011      	b.n	8003d5c <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d38:	f7fe fe82 	bl	8002a40 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d908      	bls.n	8003d5c <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e130      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6d0>
 8003d4e:	bf00      	nop
 8003d50:	40023800 	.word	0x40023800
 8003d54:	080086e8 	.word	0x080086e8
 8003d58:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d5c:	4b96      	ldr	r3, [pc, #600]	; (8003fb8 <HAL_RCC_OscConfig+0x6d8>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e7      	bne.n	8003d38 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d68:	7dfb      	ldrb	r3, [r7, #23]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d105      	bne.n	8003d7a <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d6e:	4b92      	ldr	r3, [pc, #584]	; (8003fb8 <HAL_RCC_OscConfig+0x6d8>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	4a91      	ldr	r2, [pc, #580]	; (8003fb8 <HAL_RCC_OscConfig+0x6d8>)
 8003d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00c      	beq.n	8003d9c <HAL_RCC_OscConfig+0x4bc>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d008      	beq.n	8003d9c <HAL_RCC_OscConfig+0x4bc>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d004      	beq.n	8003d9c <HAL_RCC_OscConfig+0x4bc>
 8003d92:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8003d96:	4889      	ldr	r0, [pc, #548]	; (8003fbc <HAL_RCC_OscConfig+0x6dc>)
 8003d98:	f7fe f879 	bl	8001e8e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 8104 	beq.w	8003fae <HAL_RCC_OscConfig+0x6ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003da6:	4b84      	ldr	r3, [pc, #528]	; (8003fb8 <HAL_RCC_OscConfig+0x6d8>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	f000 80c3 	beq.w	8003f3a <HAL_RCC_OscConfig+0x65a>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	f040 80a4 	bne.w	8003f06 <HAL_RCC_OscConfig+0x626>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d009      	beq.n	8003dda <HAL_RCC_OscConfig+0x4fa>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dce:	d004      	beq.n	8003dda <HAL_RCC_OscConfig+0x4fa>
 8003dd0:	f240 2155 	movw	r1, #597	; 0x255
 8003dd4:	4879      	ldr	r0, [pc, #484]	; (8003fbc <HAL_RCC_OscConfig+0x6dc>)
 8003dd6:	f7fe f85a 	bl	8001e8e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d903      	bls.n	8003dea <HAL_RCC_OscConfig+0x50a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	2b3f      	cmp	r3, #63	; 0x3f
 8003de8:	d904      	bls.n	8003df4 <HAL_RCC_OscConfig+0x514>
 8003dea:	f240 2156 	movw	r1, #598	; 0x256
 8003dee:	4873      	ldr	r0, [pc, #460]	; (8003fbc <HAL_RCC_OscConfig+0x6dc>)
 8003df0:	f7fe f84d 	bl	8001e8e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	2b31      	cmp	r3, #49	; 0x31
 8003dfa:	d904      	bls.n	8003e06 <HAL_RCC_OscConfig+0x526>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003e04:	d904      	bls.n	8003e10 <HAL_RCC_OscConfig+0x530>
 8003e06:	f240 2157 	movw	r1, #599	; 0x257
 8003e0a:	486c      	ldr	r0, [pc, #432]	; (8003fbc <HAL_RCC_OscConfig+0x6dc>)
 8003e0c:	f7fe f83f 	bl	8001e8e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d010      	beq.n	8003e3a <HAL_RCC_OscConfig+0x55a>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d00c      	beq.n	8003e3a <HAL_RCC_OscConfig+0x55a>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e24:	2b06      	cmp	r3, #6
 8003e26:	d008      	beq.n	8003e3a <HAL_RCC_OscConfig+0x55a>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d004      	beq.n	8003e3a <HAL_RCC_OscConfig+0x55a>
 8003e30:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003e34:	4861      	ldr	r0, [pc, #388]	; (8003fbc <HAL_RCC_OscConfig+0x6dc>)
 8003e36:	f7fe f82a 	bl	8001e8e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d903      	bls.n	8003e4a <HAL_RCC_OscConfig+0x56a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	2b0f      	cmp	r3, #15
 8003e48:	d904      	bls.n	8003e54 <HAL_RCC_OscConfig+0x574>
 8003e4a:	f240 2159 	movw	r1, #601	; 0x259
 8003e4e:	485b      	ldr	r0, [pc, #364]	; (8003fbc <HAL_RCC_OscConfig+0x6dc>)
 8003e50:	f7fe f81d 	bl	8001e8e <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d903      	bls.n	8003e64 <HAL_RCC_OscConfig+0x584>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	2b07      	cmp	r3, #7
 8003e62:	d904      	bls.n	8003e6e <HAL_RCC_OscConfig+0x58e>
 8003e64:	f240 215b 	movw	r1, #603	; 0x25b
 8003e68:	4854      	ldr	r0, [pc, #336]	; (8003fbc <HAL_RCC_OscConfig+0x6dc>)
 8003e6a:	f7fe f810 	bl	8001e8e <assert_failed>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6e:	4b52      	ldr	r3, [pc, #328]	; (8003fb8 <HAL_RCC_OscConfig+0x6d8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a51      	ldr	r2, [pc, #324]	; (8003fb8 <HAL_RCC_OscConfig+0x6d8>)
 8003e74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7a:	f7fe fde1 	bl	8002a40 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x5b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e82:	f7fe fddd 	bl	8002a40 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x5b4>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e08d      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e94:	4b48      	ldr	r3, [pc, #288]	; (8003fb8 <HAL_RCC_OscConfig+0x6d8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1f0      	bne.n	8003e82 <HAL_RCC_OscConfig+0x5a2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69da      	ldr	r2, [r3, #28]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	019b      	lsls	r3, r3, #6
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	085b      	lsrs	r3, r3, #1
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	041b      	lsls	r3, r3, #16
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	061b      	lsls	r3, r3, #24
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	071b      	lsls	r3, r3, #28
 8003ecc:	493a      	ldr	r1, [pc, #232]	; (8003fb8 <HAL_RCC_OscConfig+0x6d8>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ed2:	4b39      	ldr	r3, [pc, #228]	; (8003fb8 <HAL_RCC_OscConfig+0x6d8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a38      	ldr	r2, [pc, #224]	; (8003fb8 <HAL_RCC_OscConfig+0x6d8>)
 8003ed8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ede:	f7fe fdaf 	bl	8002a40 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x618>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee6:	f7fe fdab 	bl	8002a40 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e05b      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef8:	4b2f      	ldr	r3, [pc, #188]	; (8003fb8 <HAL_RCC_OscConfig+0x6d8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x606>
 8003f04:	e053      	b.n	8003fae <HAL_RCC_OscConfig+0x6ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f06:	4b2c      	ldr	r3, [pc, #176]	; (8003fb8 <HAL_RCC_OscConfig+0x6d8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a2b      	ldr	r2, [pc, #172]	; (8003fb8 <HAL_RCC_OscConfig+0x6d8>)
 8003f0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f12:	f7fe fd95 	bl	8002a40 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x64c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f1a:	f7fe fd91 	bl	8002a40 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e041      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f2c:	4b22      	ldr	r3, [pc, #136]	; (8003fb8 <HAL_RCC_OscConfig+0x6d8>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f0      	bne.n	8003f1a <HAL_RCC_OscConfig+0x63a>
 8003f38:	e039      	b.n	8003fae <HAL_RCC_OscConfig+0x6ce>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f3a:	4b1f      	ldr	r3, [pc, #124]	; (8003fb8 <HAL_RCC_OscConfig+0x6d8>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d030      	beq.n	8003faa <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d129      	bne.n	8003faa <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d122      	bne.n	8003faa <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f70:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d119      	bne.n	8003faa <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	085b      	lsrs	r3, r3, #1
 8003f82:	3b01      	subs	r3, #1
 8003f84:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d10f      	bne.n	8003faa <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d107      	bne.n	8003faa <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d001      	beq.n	8003fae <HAL_RCC_OscConfig+0x6ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <HAL_RCC_OscConfig+0x6d0>
      }
    }
  }
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	080086e8 	.word	0x080086e8

08003fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e18c      	b.n	80042f2 <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x28>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b0f      	cmp	r3, #15
 8003fe6:	d904      	bls.n	8003ff2 <HAL_RCC_ClockConfig+0x32>
 8003fe8:	f240 21df 	movw	r1, #735	; 0x2df
 8003fec:	4887      	ldr	r0, [pc, #540]	; (800420c <HAL_RCC_ClockConfig+0x24c>)
 8003fee:	f7fd ff4e 	bl	8001e8e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d031      	beq.n	800405c <HAL_RCC_ClockConfig+0x9c>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d02e      	beq.n	800405c <HAL_RCC_ClockConfig+0x9c>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b02      	cmp	r3, #2
 8004002:	d02b      	beq.n	800405c <HAL_RCC_ClockConfig+0x9c>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2b03      	cmp	r3, #3
 8004008:	d028      	beq.n	800405c <HAL_RCC_ClockConfig+0x9c>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b04      	cmp	r3, #4
 800400e:	d025      	beq.n	800405c <HAL_RCC_ClockConfig+0x9c>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	2b05      	cmp	r3, #5
 8004014:	d022      	beq.n	800405c <HAL_RCC_ClockConfig+0x9c>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b06      	cmp	r3, #6
 800401a:	d01f      	beq.n	800405c <HAL_RCC_ClockConfig+0x9c>
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2b07      	cmp	r3, #7
 8004020:	d01c      	beq.n	800405c <HAL_RCC_ClockConfig+0x9c>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b08      	cmp	r3, #8
 8004026:	d019      	beq.n	800405c <HAL_RCC_ClockConfig+0x9c>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2b09      	cmp	r3, #9
 800402c:	d016      	beq.n	800405c <HAL_RCC_ClockConfig+0x9c>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b0a      	cmp	r3, #10
 8004032:	d013      	beq.n	800405c <HAL_RCC_ClockConfig+0x9c>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b0b      	cmp	r3, #11
 8004038:	d010      	beq.n	800405c <HAL_RCC_ClockConfig+0x9c>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b0c      	cmp	r3, #12
 800403e:	d00d      	beq.n	800405c <HAL_RCC_ClockConfig+0x9c>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2b0d      	cmp	r3, #13
 8004044:	d00a      	beq.n	800405c <HAL_RCC_ClockConfig+0x9c>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b0e      	cmp	r3, #14
 800404a:	d007      	beq.n	800405c <HAL_RCC_ClockConfig+0x9c>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	2b0f      	cmp	r3, #15
 8004050:	d004      	beq.n	800405c <HAL_RCC_ClockConfig+0x9c>
 8004052:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8004056:	486d      	ldr	r0, [pc, #436]	; (800420c <HAL_RCC_ClockConfig+0x24c>)
 8004058:	f7fd ff19 	bl	8001e8e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800405c:	4b6c      	ldr	r3, [pc, #432]	; (8004210 <HAL_RCC_ClockConfig+0x250>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d910      	bls.n	800408c <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406a:	4b69      	ldr	r3, [pc, #420]	; (8004210 <HAL_RCC_ClockConfig+0x250>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f023 020f 	bic.w	r2, r3, #15
 8004072:	4967      	ldr	r1, [pc, #412]	; (8004210 <HAL_RCC_ClockConfig+0x250>)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	4313      	orrs	r3, r2
 8004078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800407a:	4b65      	ldr	r3, [pc, #404]	; (8004210 <HAL_RCC_ClockConfig+0x250>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d001      	beq.n	800408c <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e132      	b.n	80042f2 <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d049      	beq.n	800412c <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040a4:	4b5b      	ldr	r3, [pc, #364]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	4a5a      	ldr	r2, [pc, #360]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 80040aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040bc:	4b55      	ldr	r3, [pc, #340]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	4a54      	ldr	r2, [pc, #336]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 80040c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d024      	beq.n	800411a <HAL_RCC_ClockConfig+0x15a>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	2b80      	cmp	r3, #128	; 0x80
 80040d6:	d020      	beq.n	800411a <HAL_RCC_ClockConfig+0x15a>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	2b90      	cmp	r3, #144	; 0x90
 80040de:	d01c      	beq.n	800411a <HAL_RCC_ClockConfig+0x15a>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2ba0      	cmp	r3, #160	; 0xa0
 80040e6:	d018      	beq.n	800411a <HAL_RCC_ClockConfig+0x15a>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2bb0      	cmp	r3, #176	; 0xb0
 80040ee:	d014      	beq.n	800411a <HAL_RCC_ClockConfig+0x15a>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2bc0      	cmp	r3, #192	; 0xc0
 80040f6:	d010      	beq.n	800411a <HAL_RCC_ClockConfig+0x15a>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2bd0      	cmp	r3, #208	; 0xd0
 80040fe:	d00c      	beq.n	800411a <HAL_RCC_ClockConfig+0x15a>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2be0      	cmp	r3, #224	; 0xe0
 8004106:	d008      	beq.n	800411a <HAL_RCC_ClockConfig+0x15a>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2bf0      	cmp	r3, #240	; 0xf0
 800410e:	d004      	beq.n	800411a <HAL_RCC_ClockConfig+0x15a>
 8004110:	f44f 7141 	mov.w	r1, #772	; 0x304
 8004114:	483d      	ldr	r0, [pc, #244]	; (800420c <HAL_RCC_ClockConfig+0x24c>)
 8004116:	f7fd feba 	bl	8001e8e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800411a:	4b3e      	ldr	r3, [pc, #248]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	493b      	ldr	r1, [pc, #236]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8004128:	4313      	orrs	r3, r2
 800412a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	d051      	beq.n	80041dc <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00c      	beq.n	800415a <HAL_RCC_ClockConfig+0x19a>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d008      	beq.n	800415a <HAL_RCC_ClockConfig+0x19a>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b02      	cmp	r3, #2
 800414e:	d004      	beq.n	800415a <HAL_RCC_ClockConfig+0x19a>
 8004150:	f240 310b 	movw	r1, #779	; 0x30b
 8004154:	482d      	ldr	r0, [pc, #180]	; (800420c <HAL_RCC_ClockConfig+0x24c>)
 8004156:	f7fd fe9a 	bl	8001e8e <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d107      	bne.n	8004172 <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004162:	4b2c      	ldr	r3, [pc, #176]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d115      	bne.n	800419a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e0bf      	b.n	80042f2 <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d107      	bne.n	800418a <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800417a:	4b26      	ldr	r3, [pc, #152]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d109      	bne.n	800419a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e0b3      	b.n	80042f2 <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418a:	4b22      	ldr	r3, [pc, #136]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e0ab      	b.n	80042f2 <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800419a:	4b1e      	ldr	r3, [pc, #120]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f023 0203 	bic.w	r2, r3, #3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	491b      	ldr	r1, [pc, #108]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ac:	f7fe fc48 	bl	8002a40 <HAL_GetTick>
 80041b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b2:	e00a      	b.n	80041ca <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b4:	f7fe fc44 	bl	8002a40 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e093      	b.n	80042f2 <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ca:	4b12      	ldr	r3, [pc, #72]	; (8004214 <HAL_RCC_ClockConfig+0x254>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 020c 	and.w	r2, r3, #12
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	429a      	cmp	r2, r3
 80041da:	d1eb      	bne.n	80041b4 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041dc:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <HAL_RCC_ClockConfig+0x250>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 030f 	and.w	r3, r3, #15
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d216      	bcs.n	8004218 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ea:	4b09      	ldr	r3, [pc, #36]	; (8004210 <HAL_RCC_ClockConfig+0x250>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f023 020f 	bic.w	r2, r3, #15
 80041f2:	4907      	ldr	r1, [pc, #28]	; (8004210 <HAL_RCC_ClockConfig+0x250>)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fa:	4b05      	ldr	r3, [pc, #20]	; (8004210 <HAL_RCC_ClockConfig+0x250>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d007      	beq.n	8004218 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e072      	b.n	80042f2 <HAL_RCC_ClockConfig+0x332>
 800420c:	080086e8 	.word	0x080086e8
 8004210:	40023c00 	.word	0x40023c00
 8004214:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	d025      	beq.n	8004270 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d018      	beq.n	800425e <HAL_RCC_ClockConfig+0x29e>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004234:	d013      	beq.n	800425e <HAL_RCC_ClockConfig+0x29e>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800423e:	d00e      	beq.n	800425e <HAL_RCC_ClockConfig+0x29e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004248:	d009      	beq.n	800425e <HAL_RCC_ClockConfig+0x29e>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004252:	d004      	beq.n	800425e <HAL_RCC_ClockConfig+0x29e>
 8004254:	f44f 7152 	mov.w	r1, #840	; 0x348
 8004258:	4828      	ldr	r0, [pc, #160]	; (80042fc <HAL_RCC_ClockConfig+0x33c>)
 800425a:	f7fd fe18 	bl	8001e8e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800425e:	4b28      	ldr	r3, [pc, #160]	; (8004300 <HAL_RCC_ClockConfig+0x340>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	4925      	ldr	r1, [pc, #148]	; (8004300 <HAL_RCC_ClockConfig+0x340>)
 800426c:	4313      	orrs	r3, r2
 800426e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0308 	and.w	r3, r3, #8
 8004278:	2b00      	cmp	r3, #0
 800427a:	d026      	beq.n	80042ca <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d018      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x2f6>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800428c:	d013      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x2f6>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004296:	d00e      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x2f6>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80042a0:	d009      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x2f6>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80042aa:	d004      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x2f6>
 80042ac:	f240 314f 	movw	r1, #847	; 0x34f
 80042b0:	4812      	ldr	r0, [pc, #72]	; (80042fc <HAL_RCC_ClockConfig+0x33c>)
 80042b2:	f7fd fdec 	bl	8001e8e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042b6:	4b12      	ldr	r3, [pc, #72]	; (8004300 <HAL_RCC_ClockConfig+0x340>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	490e      	ldr	r1, [pc, #56]	; (8004300 <HAL_RCC_ClockConfig+0x340>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042ca:	f000 f821 	bl	8004310 <HAL_RCC_GetSysClockFreq>
 80042ce:	4601      	mov	r1, r0
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <HAL_RCC_ClockConfig+0x340>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	091b      	lsrs	r3, r3, #4
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	4a0a      	ldr	r2, [pc, #40]	; (8004304 <HAL_RCC_ClockConfig+0x344>)
 80042dc:	5cd3      	ldrb	r3, [r2, r3]
 80042de:	fa21 f303 	lsr.w	r3, r1, r3
 80042e2:	4a09      	ldr	r2, [pc, #36]	; (8004308 <HAL_RCC_ClockConfig+0x348>)
 80042e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042e6:	4b09      	ldr	r3, [pc, #36]	; (800430c <HAL_RCC_ClockConfig+0x34c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fe fb64 	bl	80029b8 <HAL_InitTick>

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	080086e8 	.word	0x080086e8
 8004300:	40023800 	.word	0x40023800
 8004304:	08008808 	.word	0x08008808
 8004308:	20000000 	.word	0x20000000
 800430c:	20000004 	.word	0x20000004

08004310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004316:	2300      	movs	r3, #0
 8004318:	607b      	str	r3, [r7, #4]
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	2300      	movs	r3, #0
 8004320:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004322:	2300      	movs	r3, #0
 8004324:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004326:	4b50      	ldr	r3, [pc, #320]	; (8004468 <HAL_RCC_GetSysClockFreq+0x158>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 030c 	and.w	r3, r3, #12
 800432e:	2b04      	cmp	r3, #4
 8004330:	d007      	beq.n	8004342 <HAL_RCC_GetSysClockFreq+0x32>
 8004332:	2b08      	cmp	r3, #8
 8004334:	d008      	beq.n	8004348 <HAL_RCC_GetSysClockFreq+0x38>
 8004336:	2b00      	cmp	r3, #0
 8004338:	f040 808d 	bne.w	8004456 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800433c:	4b4b      	ldr	r3, [pc, #300]	; (800446c <HAL_RCC_GetSysClockFreq+0x15c>)
 800433e:	60bb      	str	r3, [r7, #8]
      break;
 8004340:	e08c      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004342:	4b4b      	ldr	r3, [pc, #300]	; (8004470 <HAL_RCC_GetSysClockFreq+0x160>)
 8004344:	60bb      	str	r3, [r7, #8]
      break;
 8004346:	e089      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004348:	4b47      	ldr	r3, [pc, #284]	; (8004468 <HAL_RCC_GetSysClockFreq+0x158>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004350:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004352:	4b45      	ldr	r3, [pc, #276]	; (8004468 <HAL_RCC_GetSysClockFreq+0x158>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d023      	beq.n	80043a6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800435e:	4b42      	ldr	r3, [pc, #264]	; (8004468 <HAL_RCC_GetSysClockFreq+0x158>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	099b      	lsrs	r3, r3, #6
 8004364:	f04f 0400 	mov.w	r4, #0
 8004368:	f240 11ff 	movw	r1, #511	; 0x1ff
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	ea03 0501 	and.w	r5, r3, r1
 8004374:	ea04 0602 	and.w	r6, r4, r2
 8004378:	4a3d      	ldr	r2, [pc, #244]	; (8004470 <HAL_RCC_GetSysClockFreq+0x160>)
 800437a:	fb02 f106 	mul.w	r1, r2, r6
 800437e:	2200      	movs	r2, #0
 8004380:	fb02 f205 	mul.w	r2, r2, r5
 8004384:	440a      	add	r2, r1
 8004386:	493a      	ldr	r1, [pc, #232]	; (8004470 <HAL_RCC_GetSysClockFreq+0x160>)
 8004388:	fba5 0101 	umull	r0, r1, r5, r1
 800438c:	1853      	adds	r3, r2, r1
 800438e:	4619      	mov	r1, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f04f 0400 	mov.w	r4, #0
 8004396:	461a      	mov	r2, r3
 8004398:	4623      	mov	r3, r4
 800439a:	f7fb ffa9 	bl	80002f0 <__aeabi_uldivmod>
 800439e:	4603      	mov	r3, r0
 80043a0:	460c      	mov	r4, r1
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	e049      	b.n	800443a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043a6:	4b30      	ldr	r3, [pc, #192]	; (8004468 <HAL_RCC_GetSysClockFreq+0x158>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	099b      	lsrs	r3, r3, #6
 80043ac:	f04f 0400 	mov.w	r4, #0
 80043b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	ea03 0501 	and.w	r5, r3, r1
 80043bc:	ea04 0602 	and.w	r6, r4, r2
 80043c0:	4629      	mov	r1, r5
 80043c2:	4632      	mov	r2, r6
 80043c4:	f04f 0300 	mov.w	r3, #0
 80043c8:	f04f 0400 	mov.w	r4, #0
 80043cc:	0154      	lsls	r4, r2, #5
 80043ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80043d2:	014b      	lsls	r3, r1, #5
 80043d4:	4619      	mov	r1, r3
 80043d6:	4622      	mov	r2, r4
 80043d8:	1b49      	subs	r1, r1, r5
 80043da:	eb62 0206 	sbc.w	r2, r2, r6
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	f04f 0400 	mov.w	r4, #0
 80043e6:	0194      	lsls	r4, r2, #6
 80043e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80043ec:	018b      	lsls	r3, r1, #6
 80043ee:	1a5b      	subs	r3, r3, r1
 80043f0:	eb64 0402 	sbc.w	r4, r4, r2
 80043f4:	f04f 0100 	mov.w	r1, #0
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	00e2      	lsls	r2, r4, #3
 80043fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004402:	00d9      	lsls	r1, r3, #3
 8004404:	460b      	mov	r3, r1
 8004406:	4614      	mov	r4, r2
 8004408:	195b      	adds	r3, r3, r5
 800440a:	eb44 0406 	adc.w	r4, r4, r6
 800440e:	f04f 0100 	mov.w	r1, #0
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	02a2      	lsls	r2, r4, #10
 8004418:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800441c:	0299      	lsls	r1, r3, #10
 800441e:	460b      	mov	r3, r1
 8004420:	4614      	mov	r4, r2
 8004422:	4618      	mov	r0, r3
 8004424:	4621      	mov	r1, r4
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f04f 0400 	mov.w	r4, #0
 800442c:	461a      	mov	r2, r3
 800442e:	4623      	mov	r3, r4
 8004430:	f7fb ff5e 	bl	80002f0 <__aeabi_uldivmod>
 8004434:	4603      	mov	r3, r0
 8004436:	460c      	mov	r4, r1
 8004438:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800443a:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <HAL_RCC_GetSysClockFreq+0x158>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	0c1b      	lsrs	r3, r3, #16
 8004440:	f003 0303 	and.w	r3, r3, #3
 8004444:	3301      	adds	r3, #1
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004452:	60bb      	str	r3, [r7, #8]
      break;
 8004454:	e002      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004456:	4b05      	ldr	r3, [pc, #20]	; (800446c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004458:	60bb      	str	r3, [r7, #8]
      break;
 800445a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800445c:	68bb      	ldr	r3, [r7, #8]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004466:	bf00      	nop
 8004468:	40023800 	.word	0x40023800
 800446c:	00f42400 	.word	0x00f42400
 8004470:	017d7840 	.word	0x017d7840

08004474 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004478:	4b03      	ldr	r3, [pc, #12]	; (8004488 <HAL_RCC_GetHCLKFreq+0x14>)
 800447a:	681b      	ldr	r3, [r3, #0]
}
 800447c:	4618      	mov	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	20000000 	.word	0x20000000

0800448c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004490:	f7ff fff0 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 8004494:	4601      	mov	r1, r0
 8004496:	4b05      	ldr	r3, [pc, #20]	; (80044ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	0a9b      	lsrs	r3, r3, #10
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	4a03      	ldr	r2, [pc, #12]	; (80044b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044a2:	5cd3      	ldrb	r3, [r2, r3]
 80044a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40023800 	.word	0x40023800
 80044b0:	08008818 	.word	0x08008818

080044b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044b8:	f7ff ffdc 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 80044bc:	4601      	mov	r1, r0
 80044be:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	0b5b      	lsrs	r3, r3, #13
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	4a03      	ldr	r2, [pc, #12]	; (80044d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ca:	5cd3      	ldrb	r3, [r2, r3]
 80044cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40023800 	.word	0x40023800
 80044d8:	08008818 	.word	0x08008818

080044dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b088      	sub	sp, #32
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80044e8:	2300      	movs	r3, #0
 80044ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80044f0:	2300      	movs	r3, #0
 80044f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80044f4:	2300      	movs	r3, #0
 80044f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	f040 809e 	bne.w	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	f040 8097 	bne.w	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	2b00      	cmp	r3, #0
 800451e:	f040 8090 	bne.w	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	f040 8089 	bne.w	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004538:	2b00      	cmp	r3, #0
 800453a:	f040 8082 	bne.w	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004546:	2b00      	cmp	r3, #0
 8004548:	d17b      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004552:	2b00      	cmp	r3, #0
 8004554:	d175      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800455e:	2b00      	cmp	r3, #0
 8004560:	d16f      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800456a:	2b00      	cmp	r3, #0
 800456c:	d169      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d163      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d15d      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d157      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d151      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d14b      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d145      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d13f      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d139      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d133      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d12d      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d127      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d121      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d11b      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d115      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10f      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d109      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	d103      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800463a:	2174      	movs	r1, #116	; 0x74
 800463c:	48a2      	ldr	r0, [pc, #648]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800463e:	f7fd fc26 	bl	8001e8e <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d01f      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004652:	2b00      	cmp	r3, #0
 8004654:	d008      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800465e:	d003      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004660:	217a      	movs	r1, #122	; 0x7a
 8004662:	4899      	ldr	r0, [pc, #612]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004664:	f7fd fc13 	bl	8001e8e <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004668:	4b98      	ldr	r3, [pc, #608]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	4a97      	ldr	r2, [pc, #604]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 800466e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004672:	6093      	str	r3, [r2, #8]
 8004674:	4b95      	ldr	r3, [pc, #596]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467c:	4993      	ldr	r1, [pc, #588]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 800467e:	4313      	orrs	r3, r2
 8004680:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      plli2sused = 1;
 800468a:	2301      	movs	r3, #1
 800468c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d02e      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d012      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046aa:	d00d      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046b4:	d008      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046be:	d003      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80046c0:	218a      	movs	r1, #138	; 0x8a
 80046c2:	4881      	ldr	r0, [pc, #516]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80046c4:	f7fd fbe3 	bl	8001e8e <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046c8:	4b80      	ldr	r3, [pc, #512]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80046ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d6:	497d      	ldr	r1, [pc, #500]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046e6:	d101      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x210>
    {
      plli2sused = 1;
 80046e8:	2301      	movs	r3, #1
 80046ea:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      pllsaiused = 1;
 80046f4:	2301      	movs	r3, #1
 80046f6:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d02e      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	2b00      	cmp	r3, #0
 800470a:	d012      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004714:	d00d      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800471e:	d008      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004728:	d003      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800472a:	219e      	movs	r1, #158	; 0x9e
 800472c:	4866      	ldr	r0, [pc, #408]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800472e:	f7fd fbae 	bl	8001e8e <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004732:	4b66      	ldr	r3, [pc, #408]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8004734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004738:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004740:	4962      	ldr	r1, [pc, #392]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8004742:	4313      	orrs	r3, r2
 8004744:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004750:	d101      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      plli2sused = 1;
 8004752:	2301      	movs	r3, #1
 8004754:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      pllsaiused = 1;
 800475e:	2301      	movs	r3, #1
 8004760:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
      plli2sused = 1;
 800476e:	2301      	movs	r3, #1
 8004770:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 8187 	beq.w	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004788:	f000 80eb 	beq.w	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004794:	f000 80e5 	beq.w	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479c:	4a4c      	ldr	r2, [pc, #304]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	f000 80df 	beq.w	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a8:	4a4a      	ldr	r2, [pc, #296]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	f000 80d9 	beq.w	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	4a48      	ldr	r2, [pc, #288]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	f000 80d3 	beq.w	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	4a46      	ldr	r2, [pc, #280]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	f000 80cd 	beq.w	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047cc:	4a44      	ldr	r2, [pc, #272]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	f000 80c7 	beq.w	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	4a42      	ldr	r2, [pc, #264]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	f000 80c1 	beq.w	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e4:	4a40      	ldr	r2, [pc, #256]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	f000 80bb 	beq.w	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	4a3e      	ldr	r2, [pc, #248]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x410>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	f000 80b5 	beq.w	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	4a3c      	ldr	r2, [pc, #240]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x414>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	f000 80af 	beq.w	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004808:	4a3a      	ldr	r2, [pc, #232]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 800480a:	4293      	cmp	r3, r2
 800480c:	f000 80a9 	beq.w	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004814:	4a38      	ldr	r2, [pc, #224]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	f000 80a3 	beq.w	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004820:	4a36      	ldr	r2, [pc, #216]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8004822:	4293      	cmp	r3, r2
 8004824:	f000 809d 	beq.w	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	4a34      	ldr	r2, [pc, #208]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800482e:	4293      	cmp	r3, r2
 8004830:	f000 8097 	beq.w	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004838:	4a32      	ldr	r2, [pc, #200]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800483a:	4293      	cmp	r3, r2
 800483c:	f000 8091 	beq.w	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004844:	4a30      	ldr	r2, [pc, #192]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	f000 808b 	beq.w	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	4a2e      	ldr	r2, [pc, #184]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8004852:	4293      	cmp	r3, r2
 8004854:	f000 8085 	beq.w	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	4a2c      	ldr	r2, [pc, #176]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d07f      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	4a2b      	ldr	r2, [pc, #172]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d07a      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	4a29      	ldr	r2, [pc, #164]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d075      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	4a28      	ldr	r2, [pc, #160]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x440>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d070      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	4a26      	ldr	r2, [pc, #152]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d06b      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	4a25      	ldr	r2, [pc, #148]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d066      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	4a23      	ldr	r2, [pc, #140]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d061      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a2:	4a22      	ldr	r2, [pc, #136]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d05c      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ac:	4a20      	ldr	r2, [pc, #128]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d057      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	4a1f      	ldr	r2, [pc, #124]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d052      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c0:	4a1d      	ldr	r2, [pc, #116]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d04d      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80048c6:	e039      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x460>
 80048c8:	08008720 	.word	0x08008720
 80048cc:	40023800 	.word	0x40023800
 80048d0:	00020300 	.word	0x00020300
 80048d4:	00030300 	.word	0x00030300
 80048d8:	00040300 	.word	0x00040300
 80048dc:	00050300 	.word	0x00050300
 80048e0:	00060300 	.word	0x00060300
 80048e4:	00070300 	.word	0x00070300
 80048e8:	00080300 	.word	0x00080300
 80048ec:	00090300 	.word	0x00090300
 80048f0:	000a0300 	.word	0x000a0300
 80048f4:	000b0300 	.word	0x000b0300
 80048f8:	000c0300 	.word	0x000c0300
 80048fc:	000d0300 	.word	0x000d0300
 8004900:	000e0300 	.word	0x000e0300
 8004904:	000f0300 	.word	0x000f0300
 8004908:	00100300 	.word	0x00100300
 800490c:	00110300 	.word	0x00110300
 8004910:	00120300 	.word	0x00120300
 8004914:	00130300 	.word	0x00130300
 8004918:	00140300 	.word	0x00140300
 800491c:	00150300 	.word	0x00150300
 8004920:	00160300 	.word	0x00160300
 8004924:	00170300 	.word	0x00170300
 8004928:	00180300 	.word	0x00180300
 800492c:	00190300 	.word	0x00190300
 8004930:	001a0300 	.word	0x001a0300
 8004934:	001b0300 	.word	0x001b0300
 8004938:	001c0300 	.word	0x001c0300
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004940:	4a44      	ldr	r2, [pc, #272]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00d      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494a:	4a43      	ldr	r2, [pc, #268]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d008      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004954:	4a41      	ldr	r2, [pc, #260]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d003      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800495a:	21b9      	movs	r1, #185	; 0xb9
 800495c:	4840      	ldr	r0, [pc, #256]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800495e:	f7fd fa96 	bl	8001e8e <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004962:	4b40      	ldr	r3, [pc, #256]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	4a3f      	ldr	r2, [pc, #252]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800496c:	6413      	str	r3, [r2, #64]	; 0x40
 800496e:	4b3d      	ldr	r3, [pc, #244]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004976:	60bb      	str	r3, [r7, #8]
 8004978:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800497a:	4b3b      	ldr	r3, [pc, #236]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a3a      	ldr	r2, [pc, #232]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004984:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004986:	f7fe f85b 	bl	8002a40 <HAL_GetTick>
 800498a:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800498c:	e009      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800498e:	f7fe f857 	bl	8002a40 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b64      	cmp	r3, #100	; 0x64
 800499a:	d902      	bls.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
      {
        return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	f000 be00 	b.w	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80049a2:	4b31      	ldr	r3, [pc, #196]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0ef      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049ae:	4b2d      	ldr	r3, [pc, #180]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80049b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d036      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x550>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d02f      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049cc:	4b25      	ldr	r3, [pc, #148]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80049ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049d6:	4b23      	ldr	r3, [pc, #140]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80049d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049da:	4a22      	ldr	r2, [pc, #136]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80049dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049e2:	4b20      	ldr	r3, [pc, #128]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80049e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e6:	4a1f      	ldr	r2, [pc, #124]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80049e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80049ee:	4a1d      	ldr	r2, [pc, #116]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80049f4:	4b1b      	ldr	r3, [pc, #108]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80049f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d115      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x550>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a00:	f7fe f81e 	bl	8002a40 <HAL_GetTick>
 8004a04:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a06:	e00b      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x544>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a08:	f7fe f81a 	bl	8002a40 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d902      	bls.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x544>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	f000 bdc1 	b.w	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a20:	4b10      	ldr	r3, [pc, #64]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0ed      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x52c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a38:	d11a      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004a3a:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a46:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004a48:	400b      	ands	r3, r1
 8004a4a:	4906      	ldr	r1, [pc, #24]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	608b      	str	r3, [r1, #8]
 8004a50:	e014      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 8004a52:	bf00      	nop
 8004a54:	001d0300 	.word	0x001d0300
 8004a58:	001e0300 	.word	0x001e0300
 8004a5c:	001f0300 	.word	0x001f0300
 8004a60:	08008720 	.word	0x08008720
 8004a64:	40023800 	.word	0x40023800
 8004a68:	40007000 	.word	0x40007000
 8004a6c:	0ffffcff 	.word	0x0ffffcff
 8004a70:	4ba7      	ldr	r3, [pc, #668]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	4aa6      	ldr	r2, [pc, #664]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a76:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a7a:	6093      	str	r3, [r2, #8]
 8004a7c:	4ba4      	ldr	r3, [pc, #656]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a88:	49a1      	ldr	r1, [pc, #644]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0310 	and.w	r3, r3, #16
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d01d      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d008      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004aaa:	d003      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 8004aac:	21f3      	movs	r1, #243	; 0xf3
 8004aae:	4899      	ldr	r0, [pc, #612]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004ab0:	f7fd f9ed 	bl	8001e8e <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ab4:	4b96      	ldr	r3, [pc, #600]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aba:	4a95      	ldr	r2, [pc, #596]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004abc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ac0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004ac4:	4b92      	ldr	r3, [pc, #584]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ac6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ace:	4990      	ldr	r1, [pc, #576]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d01c      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00d      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af2:	d008      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004af8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004afc:	d003      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 8004afe:	21fd      	movs	r1, #253	; 0xfd
 8004b00:	4884      	ldr	r0, [pc, #528]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004b02:	f7fd f9c4 	bl	8001e8e <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b06:	4b82      	ldr	r3, [pc, #520]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b14:	497e      	ldr	r1, [pc, #504]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d01d      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00e      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b38:	d009      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b42:	d004      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004b44:	f240 1107 	movw	r1, #263	; 0x107
 8004b48:	4872      	ldr	r0, [pc, #456]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004b4a:	f7fd f9a0 	bl	8001e8e <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b4e:	4b70      	ldr	r3, [pc, #448]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b5c:	496c      	ldr	r1, [pc, #432]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01d      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00e      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b80:	d009      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b8a:	d004      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8004b8c:	f240 1111 	movw	r1, #273	; 0x111
 8004b90:	4860      	ldr	r0, [pc, #384]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004b92:	f7fd f97c 	bl	8001e8e <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b96:	4b5e      	ldr	r3, [pc, #376]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ba4:	495a      	ldr	r1, [pc, #360]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d01d      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x718>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00e      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x702>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bc8:	d009      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x702>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bd2:	d004      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x702>
 8004bd4:	f240 111b 	movw	r1, #283	; 0x11b
 8004bd8:	484e      	ldr	r0, [pc, #312]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004bda:	f7fd f958 	bl	8001e8e <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bde:	4b4c      	ldr	r3, [pc, #304]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bec:	4948      	ldr	r1, [pc, #288]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d01f      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x764>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d010      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d00c      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c14:	2b03      	cmp	r3, #3
 8004c16:	d008      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d004      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004c20:	f240 1125 	movw	r1, #293	; 0x125
 8004c24:	483b      	ldr	r0, [pc, #236]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004c26:	f7fd f932 	bl	8001e8e <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c2a:	4b39      	ldr	r3, [pc, #228]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c30:	f023 0203 	bic.w	r2, r3, #3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c38:	4935      	ldr	r1, [pc, #212]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d01f      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d010      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d00c      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c60:	2b0c      	cmp	r3, #12
 8004c62:	d008      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d004      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8004c6c:	f240 112f 	movw	r1, #303	; 0x12f
 8004c70:	4828      	ldr	r0, [pc, #160]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004c72:	f7fd f90c 	bl	8001e8e <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c76:	4b26      	ldr	r3, [pc, #152]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7c:	f023 020c 	bic.w	r2, r3, #12
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c84:	4922      	ldr	r1, [pc, #136]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01f      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d010      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca4:	2b10      	cmp	r3, #16
 8004ca6:	d00c      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cac:	2b30      	cmp	r3, #48	; 0x30
 8004cae:	d008      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	d004      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8004cb8:	f240 1139 	movw	r1, #313	; 0x139
 8004cbc:	4815      	ldr	r0, [pc, #84]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004cbe:	f7fd f8e6 	bl	8001e8e <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cc2:	4b13      	ldr	r3, [pc, #76]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd0:	490f      	ldr	r1, [pc, #60]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d024      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d015      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf0:	2b40      	cmp	r3, #64	; 0x40
 8004cf2:	d011      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf8:	2bc0      	cmp	r3, #192	; 0xc0
 8004cfa:	d00d      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d00:	2b80      	cmp	r3, #128	; 0x80
 8004d02:	d009      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004d04:	f240 1143 	movw	r1, #323	; 0x143
 8004d08:	4802      	ldr	r0, [pc, #8]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004d0a:	f7fd f8c0 	bl	8001e8e <assert_failed>
 8004d0e:	e003      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004d10:	40023800 	.word	0x40023800
 8004d14:	08008720 	.word	0x08008720

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d18:	4bae      	ldr	r3, [pc, #696]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d26:	49ab      	ldr	r1, [pc, #684]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d022      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d013      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d4a:	d00e      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d54:	d009      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d5e:	d004      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004d60:	f240 114d 	movw	r1, #333	; 0x14d
 8004d64:	489c      	ldr	r0, [pc, #624]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004d66:	f7fd f892 	bl	8001e8e <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d6a:	4b9a      	ldr	r3, [pc, #616]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d78:	4996      	ldr	r1, [pc, #600]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d022      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d013      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d9c:	d00e      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004da6:	d009      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004db0:	d004      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8004db2:	f240 1157 	movw	r1, #343	; 0x157
 8004db6:	4888      	ldr	r0, [pc, #544]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004db8:	f7fd f869 	bl	8001e8e <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004dbc:	4b85      	ldr	r3, [pc, #532]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dca:	4982      	ldr	r1, [pc, #520]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d022      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d013      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x932>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dee:	d00e      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x932>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004df8:	d009      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x932>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e02:	d004      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x932>
 8004e04:	f240 1161 	movw	r1, #353	; 0x161
 8004e08:	4873      	ldr	r0, [pc, #460]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004e0a:	f7fd f840 	bl	8001e8e <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004e0e:	4b71      	ldr	r3, [pc, #452]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e1c:	496d      	ldr	r1, [pc, #436]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d022      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d013      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e40:	d00e      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e46:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e4a:	d009      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e54:	d004      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004e56:	f240 116b 	movw	r1, #363	; 0x16b
 8004e5a:	485f      	ldr	r0, [pc, #380]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004e5c:	f7fd f817 	bl	8001e8e <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004e60:	4b5c      	ldr	r3, [pc, #368]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e6e:	4959      	ldr	r1, [pc, #356]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d018      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e8a:	d008      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d004      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8004e94:	f240 1175 	movw	r1, #373	; 0x175
 8004e98:	484f      	ldr	r0, [pc, #316]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004e9a:	f7fc fff8 	bl	8001e8e <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e9e:	4b4d      	ldr	r3, [pc, #308]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eac:	4949      	ldr	r1, [pc, #292]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d01f      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ec8:	d008      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d004      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004ed2:	f240 117f 	movw	r1, #383	; 0x17f
 8004ed6:	4840      	ldr	r0, [pc, #256]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004ed8:	f7fc ffd9 	bl	8001e8e <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004edc:	4b3d      	ldr	r3, [pc, #244]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eea:	493a      	ldr	r1, [pc, #232]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ef6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004efa:	d101      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      pllsaiused = 1;
 8004efc:	2301      	movs	r3, #1
 8004efe:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0308 	and.w	r3, r3, #8
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    pllsaiused = 1;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d022      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xa86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d013      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f2c:	d00e      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f36:	d009      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f40:	d004      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004f42:	f240 1197 	movw	r1, #407	; 0x197
 8004f46:	4824      	ldr	r0, [pc, #144]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004f48:	f7fc ffa1 	bl	8001e8e <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f4c:	4b21      	ldr	r3, [pc, #132]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f5a:	491e      	ldr	r1, [pc, #120]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d01b      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xaca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f78:	d009      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d004      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004f84:	f240 11a1 	movw	r1, #417	; 0x1a1
 8004f88:	4813      	ldr	r0, [pc, #76]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004f8a:	f7fc ff80 	bl	8001e8e <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f8e:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f94:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f9e:	490d      	ldr	r1, [pc, #52]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d020      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fbc:	d00e      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d009      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8004fc8:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8004fcc:	4802      	ldr	r0, [pc, #8]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004fce:	f7fc ff5e 	bl	8001e8e <assert_failed>
 8004fd2:	e003      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	08008720 	.word	0x08008720

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004fdc:	4b35      	ldr	r3, [pc, #212]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fec:	4931      	ldr	r1, [pc, #196]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d01b      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005010:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005014:	d004      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 8005016:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800501a:	4827      	ldr	r0, [pc, #156]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800501c:	f7fc ff37 	bl	8001e8e <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005020:	4b24      	ldr	r3, [pc, #144]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005026:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005030:	4920      	ldr	r1, [pc, #128]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d01b      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005054:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005058:	d004      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800505a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800505e:	4816      	ldr	r0, [pc, #88]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8005060:	f7fc ff15 	bl	8001e8e <assert_failed>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005064:	4b13      	ldr	r3, [pc, #76]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005066:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800506a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005074:	490f      	ldr	r1, [pc, #60]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d005      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800508a:	f040 8153 	bne.w	8005334 <HAL_RCCEx_PeriphCLKConfig+0xe58>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800508e:	4b09      	ldr	r3, [pc, #36]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a08      	ldr	r2, [pc, #32]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005094:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005098:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800509a:	f7fd fcd1 	bl	8002a40 <HAL_GetTick>
 800509e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050a0:	e00c      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050a2:	f7fd fccd 	bl	8002a40 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b64      	cmp	r3, #100	; 0x64
 80050ae:	d905      	bls.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e276      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 80050b4:	40023800 	.word	0x40023800
 80050b8:	08008720 	.word	0x08008720
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050bc:	4ba9      	ldr	r3, [pc, #676]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1ec      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2b31      	cmp	r3, #49	; 0x31
 80050ce:	d904      	bls.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80050d8:	d904      	bls.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80050da:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80050de:	48a2      	ldr	r0, [pc, #648]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80050e0:	f7fc fed5 	bl	8001e8e <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d02e      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d12a      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d903      	bls.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	2b07      	cmp	r3, #7
 8005106:	d904      	bls.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8005108:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800510c:	4896      	ldr	r0, [pc, #600]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 800510e:	f7fc febe 	bl	8001e8e <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005112:	4b94      	ldr	r3, [pc, #592]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005118:	0c1b      	lsrs	r3, r3, #16
 800511a:	f003 0303 	and.w	r3, r3, #3
 800511e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005120:	4b90      	ldr	r3, [pc, #576]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005126:	0e1b      	lsrs	r3, r3, #24
 8005128:	f003 030f 	and.w	r3, r3, #15
 800512c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	019a      	lsls	r2, r3, #6
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	041b      	lsls	r3, r3, #16
 8005138:	431a      	orrs	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	061b      	lsls	r3, r3, #24
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	071b      	lsls	r3, r3, #28
 8005146:	4987      	ldr	r1, [pc, #540]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005148:	4313      	orrs	r3, r2
 800514a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d004      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xc88>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005162:	d00a      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800516c:	2b00      	cmp	r3, #0
 800516e:	d048      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xd26>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005178:	d143      	bne.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d903      	bls.n	800518a <HAL_RCCEx_PeriphCLKConfig+0xcae>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	2b0f      	cmp	r3, #15
 8005188:	d904      	bls.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 800518a:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800518e:	4876      	ldr	r0, [pc, #472]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8005190:	f7fc fe7d 	bl	8001e8e <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	2b20      	cmp	r3, #32
 80051a2:	d904      	bls.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 80051a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80051a8:	486f      	ldr	r0, [pc, #444]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80051aa:	f7fc fe70 	bl	8001e8e <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051ae:	4b6d      	ldr	r3, [pc, #436]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051b4:	0c1b      	lsrs	r3, r3, #16
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051bc:	4b69      	ldr	r3, [pc, #420]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051c2:	0f1b      	lsrs	r3, r3, #28
 80051c4:	f003 0307 	and.w	r3, r3, #7
 80051c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	019a      	lsls	r2, r3, #6
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	041b      	lsls	r3, r3, #16
 80051d4:	431a      	orrs	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	061b      	lsls	r3, r3, #24
 80051dc:	431a      	orrs	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	071b      	lsls	r3, r3, #28
 80051e2:	4960      	ldr	r1, [pc, #384]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80051ea:	4b5e      	ldr	r3, [pc, #376]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051f0:	f023 021f 	bic.w	r2, r3, #31
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	3b01      	subs	r3, #1
 80051fa:	495a      	ldr	r1, [pc, #360]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d032      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xd98>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d010      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d00c      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	2b02      	cmp	r3, #2
 8005224:	d008      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b03      	cmp	r3, #3
 800522c:	d004      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 800522e:	f240 2107 	movw	r1, #519	; 0x207
 8005232:	484d      	ldr	r0, [pc, #308]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8005234:	f7fc fe2b 	bl	8001e8e <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005238:	4b4a      	ldr	r3, [pc, #296]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800523a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800523e:	0e1b      	lsrs	r3, r3, #24
 8005240:	f003 030f 	and.w	r3, r3, #15
 8005244:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005246:	4b47      	ldr	r3, [pc, #284]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800524c:	0f1b      	lsrs	r3, r3, #28
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	019a      	lsls	r2, r3, #6
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	041b      	lsls	r3, r3, #16
 8005260:	431a      	orrs	r2, r3
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	061b      	lsls	r3, r3, #24
 8005266:	431a      	orrs	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	071b      	lsls	r3, r3, #28
 800526c:	493d      	ldr	r1, [pc, #244]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d040      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d010      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d00c      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	2b02      	cmp	r3, #2
 8005296:	d008      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	2b03      	cmp	r3, #3
 800529e:	d004      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xdce>
 80052a0:	f240 2116 	movw	r1, #534	; 0x216
 80052a4:	4830      	ldr	r0, [pc, #192]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80052a6:	f7fc fdf2 	bl	8001e8e <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d903      	bls.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	2b07      	cmp	r3, #7
 80052b8:	d904      	bls.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
 80052ba:	f240 2117 	movw	r1, #535	; 0x217
 80052be:	482a      	ldr	r0, [pc, #168]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80052c0:	f7fc fde5 	bl	8001e8e <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d903      	bls.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	2b0f      	cmp	r3, #15
 80052d2:	d904      	bls.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xe02>
 80052d4:	f44f 7106 	mov.w	r1, #536	; 0x218
 80052d8:	4823      	ldr	r0, [pc, #140]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80052da:	f7fc fdd8 	bl	8001e8e <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	019a      	lsls	r2, r3, #6
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	041b      	lsls	r3, r3, #16
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	061b      	lsls	r3, r3, #24
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	071b      	lsls	r3, r3, #28
 80052fa:	491a      	ldr	r1, [pc, #104]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005302:	4b18      	ldr	r3, [pc, #96]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a17      	ldr	r2, [pc, #92]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005308:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800530c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800530e:	f7fd fb97 	bl	8002a40 <HAL_GetTick>
 8005312:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005314:	e008      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005316:	f7fd fb93 	bl	8002a40 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b64      	cmp	r3, #100	; 0x64
 8005322:	d901      	bls.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e13c      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005328:	4b0e      	ldr	r3, [pc, #56]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0f0      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	2b01      	cmp	r3, #1
 8005338:	f040 8132 	bne.w	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800533c:	4b09      	ldr	r3, [pc, #36]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a08      	ldr	r2, [pc, #32]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005346:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005348:	f7fd fb7a 	bl	8002a40 <HAL_GetTick>
 800534c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800534e:	e00d      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xe90>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005350:	f7fd fb76 	bl	8002a40 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b64      	cmp	r3, #100	; 0x64
 800535c:	d906      	bls.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xe90>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e11f      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 8005362:	bf00      	nop
 8005364:	40023800 	.word	0x40023800
 8005368:	08008720 	.word	0x08008720
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800536c:	4b8f      	ldr	r3, [pc, #572]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005378:	d0ea      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xe74>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	2b31      	cmp	r3, #49	; 0x31
 8005380:	d904      	bls.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xeb0>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800538a:	d904      	bls.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xeba>
 800538c:	f240 2146 	movw	r1, #582	; 0x246
 8005390:	4887      	ldr	r0, [pc, #540]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8005392:	f7fc fd7c 	bl	8001e8e <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0xece>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d009      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xee2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d048      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d144      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d903      	bls.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xef2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	2b0f      	cmp	r3, #15
 80053cc:	d904      	bls.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0xefc>
 80053ce:	f240 214d 	movw	r1, #589	; 0x24d
 80053d2:	4877      	ldr	r0, [pc, #476]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 80053d4:	f7fc fd5b 	bl	8001e8e <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e4:	2b20      	cmp	r3, #32
 80053e6:	d904      	bls.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80053e8:	f240 214f 	movw	r1, #591	; 0x24f
 80053ec:	4870      	ldr	r0, [pc, #448]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 80053ee:	f7fc fd4e 	bl	8001e8e <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80053f2:	4b6e      	ldr	r3, [pc, #440]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80053f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f8:	0c1b      	lsrs	r3, r3, #16
 80053fa:	f003 0303 	and.w	r3, r3, #3
 80053fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005400:	4b6a      	ldr	r3, [pc, #424]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005406:	0f1b      	lsrs	r3, r3, #28
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	019a      	lsls	r2, r3, #6
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	041b      	lsls	r3, r3, #16
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	061b      	lsls	r3, r3, #24
 8005420:	431a      	orrs	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	071b      	lsls	r3, r3, #28
 8005426:	4961      	ldr	r1, [pc, #388]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800542e:	4b5f      	ldr	r3, [pc, #380]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005434:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543c:	3b01      	subs	r3, #1
 800543e:	021b      	lsls	r3, r3, #8
 8005440:	495a      	ldr	r1, [pc, #360]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005442:	4313      	orrs	r3, r2
 8005444:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d037      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005458:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800545c:	d132      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d010      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d00c      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	2b02      	cmp	r3, #2
 8005474:	d008      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	2b03      	cmp	r3, #3
 800547c:	d004      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 800547e:	f240 2162 	movw	r1, #610	; 0x262
 8005482:	484b      	ldr	r0, [pc, #300]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8005484:	f7fc fd03 	bl	8001e8e <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005488:	4b48      	ldr	r3, [pc, #288]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800548a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548e:	0e1b      	lsrs	r3, r3, #24
 8005490:	f003 030f 	and.w	r3, r3, #15
 8005494:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005496:	4b45      	ldr	r3, [pc, #276]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549c:	0f1b      	lsrs	r3, r3, #28
 800549e:	f003 0307 	and.w	r3, r3, #7
 80054a2:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	019a      	lsls	r2, r3, #6
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	041b      	lsls	r3, r3, #16
 80054b0:	431a      	orrs	r2, r3
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	061b      	lsls	r3, r3, #24
 80054b6:	431a      	orrs	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	071b      	lsls	r3, r3, #28
 80054bc:	493b      	ldr	r1, [pc, #236]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0308 	and.w	r3, r3, #8
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d04d      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x1090>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d903      	bls.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x1004>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	2b07      	cmp	r3, #7
 80054de:	d904      	bls.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x100e>
 80054e0:	f240 2171 	movw	r1, #625	; 0x271
 80054e4:	4832      	ldr	r0, [pc, #200]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 80054e6:	f7fc fcd2 	bl	8001e8e <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d013      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x103e>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054fa:	d00e      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x103e>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005500:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005504:	d009      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800550e:	d004      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8005510:	f240 2172 	movw	r1, #626	; 0x272
 8005514:	4826      	ldr	r0, [pc, #152]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8005516:	f7fc fcba 	bl	8001e8e <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800551a:	4b24      	ldr	r3, [pc, #144]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800551c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005520:	0e1b      	lsrs	r3, r3, #24
 8005522:	f003 030f 	and.w	r3, r3, #15
 8005526:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005528:	4b20      	ldr	r3, [pc, #128]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800552a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552e:	0c1b      	lsrs	r3, r3, #16
 8005530:	f003 0303 	and.w	r3, r3, #3
 8005534:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	019a      	lsls	r2, r3, #6
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	041b      	lsls	r3, r3, #16
 8005540:	431a      	orrs	r2, r3
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	061b      	lsls	r3, r3, #24
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	071b      	lsls	r3, r3, #28
 800554e:	4917      	ldr	r1, [pc, #92]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005556:	4b15      	ldr	r3, [pc, #84]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800555c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	4911      	ldr	r1, [pc, #68]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005566:	4313      	orrs	r3, r2
 8005568:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800556c:	4b0f      	ldr	r3, [pc, #60]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a0e      	ldr	r2, [pc, #56]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005576:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005578:	f7fd fa62 	bl	8002a40 <HAL_GetTick>
 800557c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800557e:	e008      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005580:	f7fd fa5e 	bl	8002a40 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b64      	cmp	r3, #100	; 0x64
 800558c:	d901      	bls.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e007      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005592:	4b06      	ldr	r3, [pc, #24]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800559a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800559e:	d1ef      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
      }
    }
  }
  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3720      	adds	r7, #32
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	40023800 	.word	0x40023800
 80055b0:	08008720 	.word	0x08008720

080055b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e0c3      	b.n	800574e <HAL_RTC_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a63      	ldr	r2, [pc, #396]	; (8005758 <HAL_RTC_Init+0x1a4>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d003      	beq.n	80055d8 <HAL_RTC_Init+0x24>
 80055d0:	21fb      	movs	r1, #251	; 0xfb
 80055d2:	4862      	ldr	r0, [pc, #392]	; (800575c <HAL_RTC_Init+0x1a8>)
 80055d4:	f7fc fc5b 	bl	8001e8e <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	2b40      	cmp	r3, #64	; 0x40
 80055de:	d007      	beq.n	80055f0 <HAL_RTC_Init+0x3c>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <HAL_RTC_Init+0x3c>
 80055e8:	21fc      	movs	r1, #252	; 0xfc
 80055ea:	485c      	ldr	r0, [pc, #368]	; (800575c <HAL_RTC_Init+0x1a8>)
 80055ec:	f7fc fc4f 	bl	8001e8e <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	2b7f      	cmp	r3, #127	; 0x7f
 80055f6:	d903      	bls.n	8005600 <HAL_RTC_Init+0x4c>
 80055f8:	21fd      	movs	r1, #253	; 0xfd
 80055fa:	4858      	ldr	r0, [pc, #352]	; (800575c <HAL_RTC_Init+0x1a8>)
 80055fc:	f7fc fc47 	bl	8001e8e <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005608:	d303      	bcc.n	8005612 <HAL_RTC_Init+0x5e>
 800560a:	21fe      	movs	r1, #254	; 0xfe
 800560c:	4853      	ldr	r0, [pc, #332]	; (800575c <HAL_RTC_Init+0x1a8>)
 800560e:	f7fc fc3e 	bl	8001e8e <assert_failed>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d012      	beq.n	8005640 <HAL_RTC_Init+0x8c>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005622:	d00d      	beq.n	8005640 <HAL_RTC_Init+0x8c>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800562c:	d008      	beq.n	8005640 <HAL_RTC_Init+0x8c>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005636:	d003      	beq.n	8005640 <HAL_RTC_Init+0x8c>
 8005638:	21ff      	movs	r1, #255	; 0xff
 800563a:	4848      	ldr	r0, [pc, #288]	; (800575c <HAL_RTC_Init+0x1a8>)
 800563c:	f7fc fc27 	bl	8001e8e <assert_failed>
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d009      	beq.n	800565c <HAL_RTC_Init+0xa8>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005650:	d004      	beq.n	800565c <HAL_RTC_Init+0xa8>
 8005652:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005656:	4841      	ldr	r0, [pc, #260]	; (800575c <HAL_RTC_Init+0x1a8>)
 8005658:	f7fc fc19 	bl	8001e8e <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d008      	beq.n	8005676 <HAL_RTC_Init+0xc2>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	2b08      	cmp	r3, #8
 800566a:	d004      	beq.n	8005676 <HAL_RTC_Init+0xc2>
 800566c:	f240 1101 	movw	r1, #257	; 0x101
 8005670:	483a      	ldr	r0, [pc, #232]	; (800575c <HAL_RTC_Init+0x1a8>)
 8005672:	f7fc fc0c 	bl	8001e8e <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	7f5b      	ldrb	r3, [r3, #29]
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d105      	bne.n	800568c <HAL_RTC_Init+0xd8>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7fc fc32 	bl	8001ef0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	22ca      	movs	r2, #202	; 0xca
 8005698:	625a      	str	r2, [r3, #36]	; 0x24
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2253      	movs	r2, #83	; 0x53
 80056a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f85e 	bl	8005764 <RTC_EnterInitMode>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d008      	beq.n	80056c0 <HAL_RTC_Init+0x10c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	22ff      	movs	r2, #255	; 0xff
 80056b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2204      	movs	r2, #4
 80056ba:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e046      	b.n	800574e <HAL_RTC_Init+0x19a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6899      	ldr	r1, [r3, #8]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	4b25      	ldr	r3, [pc, #148]	; (8005760 <HAL_RTC_Init+0x1ac>)
 80056cc:	400b      	ands	r3, r1
 80056ce:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6899      	ldr	r1, [r3, #8]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	431a      	orrs	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	68d2      	ldr	r2, [r2, #12]
 80056f6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6919      	ldr	r1, [r3, #16]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	041a      	lsls	r2, r3, #16
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800571a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f022 0208 	bic.w	r2, r2, #8
 800572a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	699a      	ldr	r2, [r3, #24]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	22ff      	movs	r2, #255	; 0xff
 8005744:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800574c:	2300      	movs	r3, #0
  }
}
 800574e:	4618      	mov	r0, r3
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	40002800 	.word	0x40002800
 800575c:	0800875c 	.word	0x0800875c
 8005760:	ff8fffbf 	.word	0xff8fffbf

08005764 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800576c:	2300      	movs	r3, #0
 800576e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577a:	2b00      	cmp	r3, #0
 800577c:	d119      	bne.n	80057b2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f04f 32ff 	mov.w	r2, #4294967295
 8005786:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005788:	f7fd f95a 	bl	8002a40 <HAL_GetTick>
 800578c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800578e:	e009      	b.n	80057a4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005790:	f7fd f956 	bl	8002a40 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800579e:	d901      	bls.n	80057a4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e007      	b.n	80057b4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0ee      	beq.n	8005790 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e199      	b.n	8005b02 <HAL_SPI_Init+0x346>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a94      	ldr	r2, [pc, #592]	; (8005a24 <HAL_SPI_Init+0x268>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d01d      	beq.n	8005814 <HAL_SPI_Init+0x58>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a92      	ldr	r2, [pc, #584]	; (8005a28 <HAL_SPI_Init+0x26c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d018      	beq.n	8005814 <HAL_SPI_Init+0x58>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a91      	ldr	r2, [pc, #580]	; (8005a2c <HAL_SPI_Init+0x270>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d013      	beq.n	8005814 <HAL_SPI_Init+0x58>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a8f      	ldr	r2, [pc, #572]	; (8005a30 <HAL_SPI_Init+0x274>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d00e      	beq.n	8005814 <HAL_SPI_Init+0x58>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a8e      	ldr	r2, [pc, #568]	; (8005a34 <HAL_SPI_Init+0x278>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d009      	beq.n	8005814 <HAL_SPI_Init+0x58>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a8c      	ldr	r2, [pc, #560]	; (8005a38 <HAL_SPI_Init+0x27c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d004      	beq.n	8005814 <HAL_SPI_Init+0x58>
 800580a:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800580e:	488b      	ldr	r0, [pc, #556]	; (8005a3c <HAL_SPI_Init+0x280>)
 8005810:	f7fc fb3d 	bl	8001e8e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d009      	beq.n	8005830 <HAL_SPI_Init+0x74>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005824:	d004      	beq.n	8005830 <HAL_SPI_Init+0x74>
 8005826:	f240 1145 	movw	r1, #325	; 0x145
 800582a:	4884      	ldr	r0, [pc, #528]	; (8005a3c <HAL_SPI_Init+0x280>)
 800582c:	f7fc fb2f 	bl	8001e8e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00e      	beq.n	8005856 <HAL_SPI_Init+0x9a>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005840:	d009      	beq.n	8005856 <HAL_SPI_Init+0x9a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800584a:	d004      	beq.n	8005856 <HAL_SPI_Init+0x9a>
 800584c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005850:	487a      	ldr	r0, [pc, #488]	; (8005a3c <HAL_SPI_Init+0x280>)
 8005852:	f7fc fb1c 	bl	8001e8e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800585e:	d040      	beq.n	80058e2 <HAL_SPI_Init+0x126>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8005868:	d03b      	beq.n	80058e2 <HAL_SPI_Init+0x126>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8005872:	d036      	beq.n	80058e2 <HAL_SPI_Init+0x126>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800587c:	d031      	beq.n	80058e2 <HAL_SPI_Init+0x126>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8005886:	d02c      	beq.n	80058e2 <HAL_SPI_Init+0x126>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005890:	d027      	beq.n	80058e2 <HAL_SPI_Init+0x126>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800589a:	d022      	beq.n	80058e2 <HAL_SPI_Init+0x126>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058a4:	d01d      	beq.n	80058e2 <HAL_SPI_Init+0x126>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058ae:	d018      	beq.n	80058e2 <HAL_SPI_Init+0x126>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80058b8:	d013      	beq.n	80058e2 <HAL_SPI_Init+0x126>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80058c2:	d00e      	beq.n	80058e2 <HAL_SPI_Init+0x126>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058cc:	d009      	beq.n	80058e2 <HAL_SPI_Init+0x126>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058d6:	d004      	beq.n	80058e2 <HAL_SPI_Init+0x126>
 80058d8:	f240 1147 	movw	r1, #327	; 0x147
 80058dc:	4857      	ldr	r0, [pc, #348]	; (8005a3c <HAL_SPI_Init+0x280>)
 80058de:	f7fc fad6 	bl	8001e8e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058ea:	d00d      	beq.n	8005908 <HAL_SPI_Init+0x14c>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d009      	beq.n	8005908 <HAL_SPI_Init+0x14c>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058fc:	d004      	beq.n	8005908 <HAL_SPI_Init+0x14c>
 80058fe:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005902:	484e      	ldr	r0, [pc, #312]	; (8005a3c <HAL_SPI_Init+0x280>)
 8005904:	f7fc fac3 	bl	8001e8e <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800590c:	2b08      	cmp	r3, #8
 800590e:	d008      	beq.n	8005922 <HAL_SPI_Init+0x166>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005914:	2b00      	cmp	r3, #0
 8005916:	d004      	beq.n	8005922 <HAL_SPI_Init+0x166>
 8005918:	f240 1149 	movw	r1, #329	; 0x149
 800591c:	4847      	ldr	r0, [pc, #284]	; (8005a3c <HAL_SPI_Init+0x280>)
 800591e:	f7fc fab6 	bl	8001e8e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d020      	beq.n	800596c <HAL_SPI_Init+0x1b0>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	2b08      	cmp	r3, #8
 8005930:	d01c      	beq.n	800596c <HAL_SPI_Init+0x1b0>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	2b10      	cmp	r3, #16
 8005938:	d018      	beq.n	800596c <HAL_SPI_Init+0x1b0>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	2b18      	cmp	r3, #24
 8005940:	d014      	beq.n	800596c <HAL_SPI_Init+0x1b0>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	2b20      	cmp	r3, #32
 8005948:	d010      	beq.n	800596c <HAL_SPI_Init+0x1b0>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	2b28      	cmp	r3, #40	; 0x28
 8005950:	d00c      	beq.n	800596c <HAL_SPI_Init+0x1b0>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	2b30      	cmp	r3, #48	; 0x30
 8005958:	d008      	beq.n	800596c <HAL_SPI_Init+0x1b0>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	2b38      	cmp	r3, #56	; 0x38
 8005960:	d004      	beq.n	800596c <HAL_SPI_Init+0x1b0>
 8005962:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8005966:	4835      	ldr	r0, [pc, #212]	; (8005a3c <HAL_SPI_Init+0x280>)
 8005968:	f7fc fa91 	bl	8001e8e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d008      	beq.n	8005986 <HAL_SPI_Init+0x1ca>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	2b80      	cmp	r3, #128	; 0x80
 800597a:	d004      	beq.n	8005986 <HAL_SPI_Init+0x1ca>
 800597c:	f240 114b 	movw	r1, #331	; 0x14b
 8005980:	482e      	ldr	r0, [pc, #184]	; (8005a3c <HAL_SPI_Init+0x280>)
 8005982:	f7fc fa84 	bl	8001e8e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	2b00      	cmp	r3, #0
 800598c:	d008      	beq.n	80059a0 <HAL_SPI_Init+0x1e4>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	2b10      	cmp	r3, #16
 8005994:	d004      	beq.n	80059a0 <HAL_SPI_Init+0x1e4>
 8005996:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800599a:	4828      	ldr	r0, [pc, #160]	; (8005a3c <HAL_SPI_Init+0x280>)
 800599c:	f7fc fa77 	bl	8001e8e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d119      	bne.n	80059dc <HAL_SPI_Init+0x220>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <HAL_SPI_Init+0x206>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d004      	beq.n	80059c2 <HAL_SPI_Init+0x206>
 80059b8:	f240 114f 	movw	r1, #335	; 0x14f
 80059bc:	481f      	ldr	r0, [pc, #124]	; (8005a3c <HAL_SPI_Init+0x280>)
 80059be:	f7fc fa66 	bl	8001e8e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d008      	beq.n	80059dc <HAL_SPI_Init+0x220>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d004      	beq.n	80059dc <HAL_SPI_Init+0x220>
 80059d2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80059d6:	4819      	ldr	r0, [pc, #100]	; (8005a3c <HAL_SPI_Init+0x280>)
 80059d8:	f7fc fa59 	bl	8001e8e <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d106      	bne.n	80059fc <HAL_SPI_Init+0x240>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fc fbca 	bl	8002190 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a1c:	d910      	bls.n	8005a40 <HAL_SPI_Init+0x284>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60fb      	str	r3, [r7, #12]
 8005a22:	e010      	b.n	8005a46 <HAL_SPI_Init+0x28a>
 8005a24:	40013000 	.word	0x40013000
 8005a28:	40003800 	.word	0x40003800
 8005a2c:	40003c00 	.word	0x40003c00
 8005a30:	40013400 	.word	0x40013400
 8005a34:	40015000 	.word	0x40015000
 8005a38:	40015400 	.word	0x40015400
 8005a3c:	08008794 	.word	0x08008794
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a44:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a4e:	d007      	beq.n	8005a60 <HAL_SPI_Init+0x2a4>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a58:	d002      	beq.n	8005a60 <HAL_SPI_Init+0x2a4>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10b      	bne.n	8005a80 <HAL_SPI_Init+0x2c4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a70:	d903      	bls.n	8005a7a <HAL_SPI_Init+0x2be>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2202      	movs	r2, #2
 8005a76:	631a      	str	r2, [r3, #48]	; 0x30
 8005a78:	e002      	b.n	8005a80 <HAL_SPI_Init+0x2c4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	431a      	orrs	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	ea42 0103 	orr.w	r1, r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	0c1b      	lsrs	r3, r3, #16
 8005ac0:	f003 0204 	and.w	r2, r3, #4
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	ea42 0103 	orr.w	r1, r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	69da      	ldr	r2, [r3, #28]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005af0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop

08005b0c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b088      	sub	sp, #32
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	603b      	str	r3, [r7, #0]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d009      	beq.n	8005b3c <HAL_SPI_Transmit+0x30>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b30:	d004      	beq.n	8005b3c <HAL_SPI_Transmit+0x30>
 8005b32:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8005b36:	4895      	ldr	r0, [pc, #596]	; (8005d8c <HAL_SPI_Transmit+0x280>)
 8005b38:	f7fc f9a9 	bl	8001e8e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d101      	bne.n	8005b4a <HAL_SPI_Transmit+0x3e>
 8005b46:	2302      	movs	r3, #2
 8005b48:	e152      	b.n	8005df0 <HAL_SPI_Transmit+0x2e4>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b52:	f7fc ff75 	bl	8002a40 <HAL_GetTick>
 8005b56:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b58:	88fb      	ldrh	r3, [r7, #6]
 8005b5a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d002      	beq.n	8005b6e <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8005b68:	2302      	movs	r3, #2
 8005b6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b6c:	e137      	b.n	8005dde <HAL_SPI_Transmit+0x2d2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <HAL_SPI_Transmit+0x6e>
 8005b74:	88fb      	ldrh	r3, [r7, #6]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d102      	bne.n	8005b80 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b7e:	e12e      	b.n	8005dde <HAL_SPI_Transmit+0x2d2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2203      	movs	r2, #3
 8005b84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	88fa      	ldrh	r2, [r7, #6]
 8005b98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	88fa      	ldrh	r2, [r7, #6]
 8005b9e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bca:	d107      	bne.n	8005bdc <HAL_SPI_Transmit+0xd0>
  {
    SPI_1LINE_TX(hspi);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be6:	2b40      	cmp	r3, #64	; 0x40
 8005be8:	d007      	beq.n	8005bfa <HAL_SPI_Transmit+0xee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bf8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c02:	d94b      	bls.n	8005c9c <HAL_SPI_Transmit+0x190>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <HAL_SPI_Transmit+0x106>
 8005c0c:	8afb      	ldrh	r3, [r7, #22]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d13e      	bne.n	8005c90 <HAL_SPI_Transmit+0x184>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c16:	881a      	ldrh	r2, [r3, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c22:	1c9a      	adds	r2, r3, #2
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c36:	e02b      	b.n	8005c90 <HAL_SPI_Transmit+0x184>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d112      	bne.n	8005c6c <HAL_SPI_Transmit+0x160>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4a:	881a      	ldrh	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c56:	1c9a      	adds	r2, r3, #2
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c6a:	e011      	b.n	8005c90 <HAL_SPI_Transmit+0x184>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c6c:	f7fc fee8 	bl	8002a40 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d803      	bhi.n	8005c84 <HAL_SPI_Transmit+0x178>
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c82:	d102      	bne.n	8005c8a <HAL_SPI_Transmit+0x17e>
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d102      	bne.n	8005c90 <HAL_SPI_Transmit+0x184>
        {
          errorcode = HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c8e:	e0a6      	b.n	8005dde <HAL_SPI_Transmit+0x2d2>
    while (hspi->TxXferCount > 0U)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1ce      	bne.n	8005c38 <HAL_SPI_Transmit+0x12c>
 8005c9a:	e07e      	b.n	8005d9a <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <HAL_SPI_Transmit+0x19e>
 8005ca4:	8afb      	ldrh	r3, [r7, #22]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d172      	bne.n	8005d90 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d912      	bls.n	8005cda <HAL_SPI_Transmit+0x1ce>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb8:	881a      	ldrh	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	1c9a      	adds	r2, r3, #2
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	3b02      	subs	r3, #2
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cd8:	e05a      	b.n	8005d90 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	330c      	adds	r3, #12
 8005ce4:	7812      	ldrb	r2, [r2, #0]
 8005ce6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005d00:	e046      	b.n	8005d90 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d12b      	bne.n	8005d68 <HAL_SPI_Transmit+0x25c>
      {
        if (hspi->TxXferCount > 1U)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d912      	bls.n	8005d40 <HAL_SPI_Transmit+0x234>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1e:	881a      	ldrh	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	1c9a      	adds	r2, r3, #2
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	3b02      	subs	r3, #2
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d3e:	e027      	b.n	8005d90 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	330c      	adds	r3, #12
 8005d4a:	7812      	ldrb	r2, [r2, #0]
 8005d4c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d52:	1c5a      	adds	r2, r3, #1
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d66:	e013      	b.n	8005d90 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d68:	f7fc fe6a 	bl	8002a40 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d803      	bhi.n	8005d80 <HAL_SPI_Transmit+0x274>
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7e:	d102      	bne.n	8005d86 <HAL_SPI_Transmit+0x27a>
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d104      	bne.n	8005d90 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d8a:	e028      	b.n	8005dde <HAL_SPI_Transmit+0x2d2>
 8005d8c:	08008794 	.word	0x08008794
    while (hspi->TxXferCount > 0U)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1b3      	bne.n	8005d02 <HAL_SPI_Transmit+0x1f6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 fdbe 	bl	8006920 <SPI_EndRxTxTransaction>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2220      	movs	r2, #32
 8005dae:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10a      	bne.n	8005dce <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005db8:	2300      	movs	r3, #0
 8005dba:	613b      	str	r3, [r7, #16]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	613b      	str	r3, [r7, #16]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	613b      	str	r3, [r7, #16]
 8005dcc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	77fb      	strb	r3, [r7, #31]
 8005dda:	e000      	b.n	8005dde <HAL_SPI_Transmit+0x2d2>
  }

error:
 8005ddc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005dee:	7ffb      	ldrb	r3, [r7, #31]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3720      	adds	r7, #32
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b088      	sub	sp, #32
 8005dfc:	af02      	add	r7, sp, #8
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	603b      	str	r3, [r7, #0]
 8005e04:	4613      	mov	r3, r2
 8005e06:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e14:	d112      	bne.n	8005e3c <HAL_SPI_Receive+0x44>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10e      	bne.n	8005e3c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2204      	movs	r2, #4
 8005e22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005e26:	88fa      	ldrh	r2, [r7, #6]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	68b9      	ldr	r1, [r7, #8]
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 f908 	bl	8006048 <HAL_SPI_TransmitReceive>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	e101      	b.n	8006040 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d101      	bne.n	8005e4a <HAL_SPI_Receive+0x52>
 8005e46:	2302      	movs	r3, #2
 8005e48:	e0fa      	b.n	8006040 <HAL_SPI_Receive+0x248>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e52:	f7fc fdf5 	bl	8002a40 <HAL_GetTick>
 8005e56:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d002      	beq.n	8005e6a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005e64:	2302      	movs	r3, #2
 8005e66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e68:	e0e1      	b.n	800602e <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <HAL_SPI_Receive+0x7e>
 8005e70:	88fb      	ldrh	r3, [r7, #6]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d102      	bne.n	8005e7c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e7a:	e0d8      	b.n	800602e <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2204      	movs	r2, #4
 8005e80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	88fa      	ldrh	r2, [r7, #6]
 8005e94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	88fa      	ldrh	r2, [r7, #6]
 8005e9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ec6:	d908      	bls.n	8005eda <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ed6:	605a      	str	r2, [r3, #4]
 8005ed8:	e007      	b.n	8005eea <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ee8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ef2:	d107      	bne.n	8005f04 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f02:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0e:	2b40      	cmp	r3, #64	; 0x40
 8005f10:	d007      	beq.n	8005f22 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f20:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f2a:	d867      	bhi.n	8005ffc <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005f2c:	e030      	b.n	8005f90 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d117      	bne.n	8005f6c <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f103 020c 	add.w	r2, r3, #12
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f48:	7812      	ldrb	r2, [r2, #0]
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	3b01      	subs	r3, #1
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005f6a:	e011      	b.n	8005f90 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f6c:	f7fc fd68 	bl	8002a40 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d803      	bhi.n	8005f84 <HAL_SPI_Receive+0x18c>
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f82:	d102      	bne.n	8005f8a <HAL_SPI_Receive+0x192>
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d102      	bne.n	8005f90 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005f8e:	e04e      	b.n	800602e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1c8      	bne.n	8005f2e <HAL_SPI_Receive+0x136>
 8005f9c:	e034      	b.n	8006008 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d115      	bne.n	8005fd8 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	b292      	uxth	r2, r2
 8005fb8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	1c9a      	adds	r2, r3, #2
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005fd6:	e011      	b.n	8005ffc <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fd8:	f7fc fd32 	bl	8002a40 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d803      	bhi.n	8005ff0 <HAL_SPI_Receive+0x1f8>
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fee:	d102      	bne.n	8005ff6 <HAL_SPI_Receive+0x1fe>
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d102      	bne.n	8005ffc <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005ffa:	e018      	b.n	800602e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006002:	b29b      	uxth	r3, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1ca      	bne.n	8005f9e <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	6839      	ldr	r1, [r7, #0]
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 fc2f 	bl	8006870 <SPI_EndRxTransaction>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2220      	movs	r2, #32
 800601c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006022:	2b00      	cmp	r3, #0
 8006024:	d002      	beq.n	800602c <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	75fb      	strb	r3, [r7, #23]
 800602a:	e000      	b.n	800602e <HAL_SPI_Receive+0x236>
  }

error :
 800602c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800603e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b08a      	sub	sp, #40	; 0x28
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
 8006054:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006056:	2301      	movs	r3, #1
 8006058:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d004      	beq.n	8006072 <HAL_SPI_TransmitReceive+0x2a>
 8006068:	f240 41bf 	movw	r1, #1215	; 0x4bf
 800606c:	4895      	ldr	r0, [pc, #596]	; (80062c4 <HAL_SPI_TransmitReceive+0x27c>)
 800606e:	f7fb ff0e 	bl	8001e8e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_SPI_TransmitReceive+0x38>
 800607c:	2302      	movs	r3, #2
 800607e:	e1fd      	b.n	800647c <HAL_SPI_TransmitReceive+0x434>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006088:	f7fc fcda 	bl	8002a40 <HAL_GetTick>
 800608c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006094:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800609c:	887b      	ldrh	r3, [r7, #2]
 800609e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80060a0:	887b      	ldrh	r3, [r7, #2]
 80060a2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060a4:	7efb      	ldrb	r3, [r7, #27]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d00e      	beq.n	80060c8 <HAL_SPI_TransmitReceive+0x80>
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060b0:	d106      	bne.n	80060c0 <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d102      	bne.n	80060c0 <HAL_SPI_TransmitReceive+0x78>
 80060ba:	7efb      	ldrb	r3, [r7, #27]
 80060bc:	2b04      	cmp	r3, #4
 80060be:	d003      	beq.n	80060c8 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 80060c0:	2302      	movs	r3, #2
 80060c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80060c6:	e1cf      	b.n	8006468 <HAL_SPI_TransmitReceive+0x420>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d005      	beq.n	80060da <HAL_SPI_TransmitReceive+0x92>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d002      	beq.n	80060da <HAL_SPI_TransmitReceive+0x92>
 80060d4:	887b      	ldrh	r3, [r7, #2]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d103      	bne.n	80060e2 <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80060e0:	e1c2      	b.n	8006468 <HAL_SPI_TransmitReceive+0x420>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b04      	cmp	r3, #4
 80060ec:	d003      	beq.n	80060f6 <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2205      	movs	r2, #5
 80060f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	887a      	ldrh	r2, [r7, #2]
 8006106:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	887a      	ldrh	r2, [r7, #2]
 800610e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	887a      	ldrh	r2, [r7, #2]
 800611c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	887a      	ldrh	r2, [r7, #2]
 8006122:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006138:	d802      	bhi.n	8006140 <HAL_SPI_TransmitReceive+0xf8>
 800613a:	8a3b      	ldrh	r3, [r7, #16]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d908      	bls.n	8006152 <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800614e:	605a      	str	r2, [r3, #4]
 8006150:	e007      	b.n	8006162 <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006160:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616c:	2b40      	cmp	r3, #64	; 0x40
 800616e:	d007      	beq.n	8006180 <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800617e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006188:	d97c      	bls.n	8006284 <HAL_SPI_TransmitReceive+0x23c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d002      	beq.n	8006198 <HAL_SPI_TransmitReceive+0x150>
 8006192:	8a7b      	ldrh	r3, [r7, #18]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d169      	bne.n	800626c <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619c:	881a      	ldrh	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a8:	1c9a      	adds	r2, r3, #2
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	3b01      	subs	r3, #1
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061bc:	e056      	b.n	800626c <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d11b      	bne.n	8006204 <HAL_SPI_TransmitReceive+0x1bc>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d016      	beq.n	8006204 <HAL_SPI_TransmitReceive+0x1bc>
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d113      	bne.n	8006204 <HAL_SPI_TransmitReceive+0x1bc>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e0:	881a      	ldrh	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ec:	1c9a      	adds	r2, r3, #2
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	3b01      	subs	r3, #1
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006200:	2300      	movs	r3, #0
 8006202:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b01      	cmp	r3, #1
 8006210:	d11c      	bne.n	800624c <HAL_SPI_TransmitReceive+0x204>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006218:	b29b      	uxth	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d016      	beq.n	800624c <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68da      	ldr	r2, [r3, #12]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006228:	b292      	uxth	r2, r2
 800622a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006230:	1c9a      	adds	r2, r3, #2
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800623c:	b29b      	uxth	r3, r3
 800623e:	3b01      	subs	r3, #1
 8006240:	b29a      	uxth	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006248:	2301      	movs	r3, #1
 800624a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800624c:	f7fc fbf8 	bl	8002a40 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006258:	429a      	cmp	r2, r3
 800625a:	d807      	bhi.n	800626c <HAL_SPI_TransmitReceive+0x224>
 800625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006262:	d003      	beq.n	800626c <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800626a:	e0fd      	b.n	8006468 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006270:	b29b      	uxth	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1a3      	bne.n	80061be <HAL_SPI_TransmitReceive+0x176>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800627c:	b29b      	uxth	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d19d      	bne.n	80061be <HAL_SPI_TransmitReceive+0x176>
 8006282:	e0e1      	b.n	8006448 <HAL_SPI_TransmitReceive+0x400>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <HAL_SPI_TransmitReceive+0x24c>
 800628c:	8a7b      	ldrh	r3, [r7, #18]
 800628e:	2b01      	cmp	r3, #1
 8006290:	f040 80cd 	bne.w	800642e <HAL_SPI_TransmitReceive+0x3e6>
    {
      if (hspi->TxXferCount > 1U)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006298:	b29b      	uxth	r3, r3
 800629a:	2b01      	cmp	r3, #1
 800629c:	d914      	bls.n	80062c8 <HAL_SPI_TransmitReceive+0x280>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a2:	881a      	ldrh	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ae:	1c9a      	adds	r2, r3, #2
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	3b02      	subs	r3, #2
 80062bc:	b29a      	uxth	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062c2:	e0b4      	b.n	800642e <HAL_SPI_TransmitReceive+0x3e6>
 80062c4:	08008794 	.word	0x08008794
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	330c      	adds	r3, #12
 80062d2:	7812      	ldrb	r2, [r2, #0]
 80062d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	3b01      	subs	r3, #1
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062ee:	e09e      	b.n	800642e <HAL_SPI_TransmitReceive+0x3e6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d134      	bne.n	8006368 <HAL_SPI_TransmitReceive+0x320>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006302:	b29b      	uxth	r3, r3
 8006304:	2b00      	cmp	r3, #0
 8006306:	d02f      	beq.n	8006368 <HAL_SPI_TransmitReceive+0x320>
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	2b01      	cmp	r3, #1
 800630c:	d12c      	bne.n	8006368 <HAL_SPI_TransmitReceive+0x320>
      {
        if (hspi->TxXferCount > 1U)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006312:	b29b      	uxth	r3, r3
 8006314:	2b01      	cmp	r3, #1
 8006316:	d912      	bls.n	800633e <HAL_SPI_TransmitReceive+0x2f6>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631c:	881a      	ldrh	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006328:	1c9a      	adds	r2, r3, #2
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b02      	subs	r3, #2
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800633c:	e012      	b.n	8006364 <HAL_SPI_TransmitReceive+0x31c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	330c      	adds	r3, #12
 8006348:	7812      	ldrb	r2, [r2, #0]
 800634a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006350:	1c5a      	adds	r2, r3, #1
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800635a:	b29b      	uxth	r3, r3
 800635c:	3b01      	subs	r3, #1
 800635e:	b29a      	uxth	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b01      	cmp	r3, #1
 8006374:	d148      	bne.n	8006408 <HAL_SPI_TransmitReceive+0x3c0>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800637c:	b29b      	uxth	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d042      	beq.n	8006408 <HAL_SPI_TransmitReceive+0x3c0>
      {
        if (hspi->RxXferCount > 1U)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006388:	b29b      	uxth	r3, r3
 800638a:	2b01      	cmp	r3, #1
 800638c:	d923      	bls.n	80063d6 <HAL_SPI_TransmitReceive+0x38e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006398:	b292      	uxth	r2, r2
 800639a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a0:	1c9a      	adds	r2, r3, #2
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	3b02      	subs	r3, #2
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063be:	b29b      	uxth	r3, r3
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d81f      	bhi.n	8006404 <HAL_SPI_TransmitReceive+0x3bc>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063d2:	605a      	str	r2, [r3, #4]
 80063d4:	e016      	b.n	8006404 <HAL_SPI_TransmitReceive+0x3bc>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f103 020c 	add.w	r2, r3, #12
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	7812      	ldrb	r2, [r2, #0]
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	3b01      	subs	r3, #1
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006404:	2301      	movs	r3, #1
 8006406:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006408:	f7fc fb1a 	bl	8002a40 <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006414:	429a      	cmp	r2, r3
 8006416:	d803      	bhi.n	8006420 <HAL_SPI_TransmitReceive+0x3d8>
 8006418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641e:	d102      	bne.n	8006426 <HAL_SPI_TransmitReceive+0x3de>
 8006420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006422:	2b00      	cmp	r3, #0
 8006424:	d103      	bne.n	800642e <HAL_SPI_TransmitReceive+0x3e6>
      {
        errorcode = HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800642c:	e01c      	b.n	8006468 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006432:	b29b      	uxth	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	f47f af5b 	bne.w	80062f0 <HAL_SPI_TransmitReceive+0x2a8>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006440:	b29b      	uxth	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	f47f af54 	bne.w	80062f0 <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006448:	69fa      	ldr	r2, [r7, #28]
 800644a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f000 fa67 	bl	8006920 <SPI_EndRxTxTransaction>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d006      	beq.n	8006466 <HAL_SPI_TransmitReceive+0x41e>
  {
    errorcode = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2220      	movs	r2, #32
 8006462:	661a      	str	r2, [r3, #96]	; 0x60
 8006464:	e000      	b.n	8006468 <HAL_SPI_TransmitReceive+0x420>
  }

error :
 8006466:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006478:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800647c:	4618      	mov	r0, r3
 800647e:	3728      	adds	r7, #40	; 0x28
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b088      	sub	sp, #32
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	099b      	lsrs	r3, r3, #6
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10f      	bne.n	80064c8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	099b      	lsrs	r3, r3, #6
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d004      	beq.n	80064c8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	4798      	blx	r3
    return;
 80064c6:	e0d8      	b.n	800667a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	085b      	lsrs	r3, r3, #1
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00a      	beq.n	80064ea <HAL_SPI_IRQHandler+0x66>
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	09db      	lsrs	r3, r3, #7
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d004      	beq.n	80064ea <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	4798      	blx	r3
    return;
 80064e8:	e0c7      	b.n	800667a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	095b      	lsrs	r3, r3, #5
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10c      	bne.n	8006510 <HAL_SPI_IRQHandler+0x8c>
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	099b      	lsrs	r3, r3, #6
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d106      	bne.n	8006510 <HAL_SPI_IRQHandler+0x8c>
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	0a1b      	lsrs	r3, r3, #8
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 80b5 	beq.w	800667a <HAL_SPI_IRQHandler+0x1f6>
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	095b      	lsrs	r3, r3, #5
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 80ae 	beq.w	800667a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	099b      	lsrs	r3, r3, #6
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b00      	cmp	r3, #0
 8006528:	d023      	beq.n	8006572 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b03      	cmp	r3, #3
 8006534:	d011      	beq.n	800655a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800653a:	f043 0204 	orr.w	r2, r3, #4
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006542:	2300      	movs	r3, #0
 8006544:	617b      	str	r3, [r7, #20]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	617b      	str	r3, [r7, #20]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	617b      	str	r3, [r7, #20]
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	e00b      	b.n	8006572 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800655a:	2300      	movs	r3, #0
 800655c:	613b      	str	r3, [r7, #16]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	613b      	str	r3, [r7, #16]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	613b      	str	r3, [r7, #16]
 800656e:	693b      	ldr	r3, [r7, #16]
        return;
 8006570:	e083      	b.n	800667a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	095b      	lsrs	r3, r3, #5
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	d014      	beq.n	80065a8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006582:	f043 0201 	orr.w	r2, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800658a:	2300      	movs	r3, #0
 800658c:	60fb      	str	r3, [r7, #12]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	0a1b      	lsrs	r3, r3, #8
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00c      	beq.n	80065ce <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b8:	f043 0208 	orr.w	r2, r3, #8
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80065c0:	2300      	movs	r3, #0
 80065c2:	60bb      	str	r3, [r7, #8]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	60bb      	str	r3, [r7, #8]
 80065cc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d050      	beq.n	8006678 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065e4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d104      	bne.n	8006602 <HAL_SPI_IRQHandler+0x17e>
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d034      	beq.n	800666c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f022 0203 	bic.w	r2, r2, #3
 8006610:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006616:	2b00      	cmp	r3, #0
 8006618:	d011      	beq.n	800663e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661e:	4a18      	ldr	r2, [pc, #96]	; (8006680 <HAL_SPI_IRQHandler+0x1fc>)
 8006620:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006626:	4618      	mov	r0, r3
 8006628:	f7fc fcc8 	bl	8002fbc <HAL_DMA_Abort_IT>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d005      	beq.n	800663e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006636:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006642:	2b00      	cmp	r3, #0
 8006644:	d016      	beq.n	8006674 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664a:	4a0d      	ldr	r2, [pc, #52]	; (8006680 <HAL_SPI_IRQHandler+0x1fc>)
 800664c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006652:	4618      	mov	r0, r3
 8006654:	f7fc fcb2 	bl	8002fbc <HAL_DMA_Abort_IT>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00a      	beq.n	8006674 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006662:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800666a:	e003      	b.n	8006674 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f809 	bl	8006684 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006672:	e000      	b.n	8006676 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006674:	bf00      	nop
    return;
 8006676:	bf00      	nop
 8006678:	bf00      	nop
  }
}
 800667a:	3720      	adds	r7, #32
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	08006699 	.word	0x08006699

08006684 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f7ff ffe5 	bl	8006684 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066ba:	bf00      	nop
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b084      	sub	sp, #16
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	60f8      	str	r0, [r7, #12]
 80066ca:	60b9      	str	r1, [r7, #8]
 80066cc:	603b      	str	r3, [r7, #0]
 80066ce:	4613      	mov	r3, r2
 80066d0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066d2:	e04c      	b.n	800676e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066da:	d048      	beq.n	800676e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80066dc:	f7fc f9b0 	bl	8002a40 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d902      	bls.n	80066f2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d13d      	bne.n	800676e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006700:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800670a:	d111      	bne.n	8006730 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006714:	d004      	beq.n	8006720 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800671e:	d107      	bne.n	8006730 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800672e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006738:	d10f      	bne.n	800675a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006758:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e00f      	b.n	800678e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689a      	ldr	r2, [r3, #8]
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	4013      	ands	r3, r2
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	429a      	cmp	r2, r3
 800677c:	bf0c      	ite	eq
 800677e:	2301      	moveq	r3, #1
 8006780:	2300      	movne	r3, #0
 8006782:	b2db      	uxtb	r3, r3
 8006784:	461a      	mov	r2, r3
 8006786:	79fb      	ldrb	r3, [r7, #7]
 8006788:	429a      	cmp	r2, r3
 800678a:	d1a3      	bne.n	80066d4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b084      	sub	sp, #16
 800679a:	af00      	add	r7, sp, #0
 800679c:	60f8      	str	r0, [r7, #12]
 800679e:	60b9      	str	r1, [r7, #8]
 80067a0:	607a      	str	r2, [r7, #4]
 80067a2:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80067a4:	e057      	b.n	8006856 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80067ac:	d106      	bne.n	80067bc <SPI_WaitFifoStateUntilTimeout+0x26>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d103      	bne.n	80067bc <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	330c      	adds	r3, #12
 80067ba:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c2:	d048      	beq.n	8006856 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80067c4:	f7fc f93c 	bl	8002a40 <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d902      	bls.n	80067da <SPI_WaitFifoStateUntilTimeout+0x44>
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d13d      	bne.n	8006856 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067f2:	d111      	bne.n	8006818 <SPI_WaitFifoStateUntilTimeout+0x82>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067fc:	d004      	beq.n	8006808 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006806:	d107      	bne.n	8006818 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006816:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006820:	d10f      	bne.n	8006842 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006830:	601a      	str	r2, [r3, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006840:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e008      	b.n	8006868 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	4013      	ands	r3, r2
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	429a      	cmp	r2, r3
 8006864:	d19f      	bne.n	80067a6 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af02      	add	r7, sp, #8
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006884:	d111      	bne.n	80068aa <SPI_EndRxTransaction+0x3a>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800688e:	d004      	beq.n	800689a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006898:	d107      	bne.n	80068aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068a8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2200      	movs	r2, #0
 80068b2:	2180      	movs	r1, #128	; 0x80
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f7ff ff04 	bl	80066c2 <SPI_WaitFlagStateUntilTimeout>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d007      	beq.n	80068d0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068c4:	f043 0220 	orr.w	r2, r3, #32
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e023      	b.n	8006918 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068d8:	d11d      	bne.n	8006916 <SPI_EndRxTransaction+0xa6>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068e2:	d004      	beq.n	80068ee <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ec:	d113      	bne.n	8006916 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f7ff ff4b 	bl	8006796 <SPI_WaitFifoStateUntilTimeout>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d007      	beq.n	8006916 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800690a:	f043 0220 	orr.w	r2, r3, #32
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e000      	b.n	8006918 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af02      	add	r7, sp, #8
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2200      	movs	r2, #0
 8006934:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f7ff ff2c 	bl	8006796 <SPI_WaitFifoStateUntilTimeout>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d007      	beq.n	8006954 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006948:	f043 0220 	orr.w	r2, r3, #32
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e027      	b.n	80069a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2200      	movs	r2, #0
 800695c:	2180      	movs	r1, #128	; 0x80
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f7ff feaf 	bl	80066c2 <SPI_WaitFlagStateUntilTimeout>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d007      	beq.n	800697a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800696e:	f043 0220 	orr.w	r2, r3, #32
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e014      	b.n	80069a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	2200      	movs	r2, #0
 8006982:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f7ff ff05 	bl	8006796 <SPI_WaitFifoStateUntilTimeout>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d007      	beq.n	80069a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006996:	f043 0220 	orr.w	r2, r3, #32
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e000      	b.n	80069a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e09f      	b.n	8006afe <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d02d      	beq.n	8006a22 <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a4f      	ldr	r2, [pc, #316]	; (8006b08 <HAL_UART_Init+0x15c>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d055      	beq.n	8006a7c <HAL_UART_Init+0xd0>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a4d      	ldr	r2, [pc, #308]	; (8006b0c <HAL_UART_Init+0x160>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d050      	beq.n	8006a7c <HAL_UART_Init+0xd0>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a4c      	ldr	r2, [pc, #304]	; (8006b10 <HAL_UART_Init+0x164>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d04b      	beq.n	8006a7c <HAL_UART_Init+0xd0>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a4a      	ldr	r2, [pc, #296]	; (8006b14 <HAL_UART_Init+0x168>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d046      	beq.n	8006a7c <HAL_UART_Init+0xd0>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a49      	ldr	r2, [pc, #292]	; (8006b18 <HAL_UART_Init+0x16c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d041      	beq.n	8006a7c <HAL_UART_Init+0xd0>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a47      	ldr	r2, [pc, #284]	; (8006b1c <HAL_UART_Init+0x170>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d03c      	beq.n	8006a7c <HAL_UART_Init+0xd0>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a46      	ldr	r2, [pc, #280]	; (8006b20 <HAL_UART_Init+0x174>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d037      	beq.n	8006a7c <HAL_UART_Init+0xd0>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a44      	ldr	r2, [pc, #272]	; (8006b24 <HAL_UART_Init+0x178>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d032      	beq.n	8006a7c <HAL_UART_Init+0xd0>
 8006a16:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8006a1a:	4843      	ldr	r0, [pc, #268]	; (8006b28 <HAL_UART_Init+0x17c>)
 8006a1c:	f7fb fa37 	bl	8001e8e <assert_failed>
 8006a20:	e02c      	b.n	8006a7c <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a38      	ldr	r2, [pc, #224]	; (8006b08 <HAL_UART_Init+0x15c>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d027      	beq.n	8006a7c <HAL_UART_Init+0xd0>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a36      	ldr	r2, [pc, #216]	; (8006b0c <HAL_UART_Init+0x160>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d022      	beq.n	8006a7c <HAL_UART_Init+0xd0>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a35      	ldr	r2, [pc, #212]	; (8006b10 <HAL_UART_Init+0x164>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d01d      	beq.n	8006a7c <HAL_UART_Init+0xd0>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a33      	ldr	r2, [pc, #204]	; (8006b14 <HAL_UART_Init+0x168>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d018      	beq.n	8006a7c <HAL_UART_Init+0xd0>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a32      	ldr	r2, [pc, #200]	; (8006b18 <HAL_UART_Init+0x16c>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d013      	beq.n	8006a7c <HAL_UART_Init+0xd0>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a30      	ldr	r2, [pc, #192]	; (8006b1c <HAL_UART_Init+0x170>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d00e      	beq.n	8006a7c <HAL_UART_Init+0xd0>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a2f      	ldr	r2, [pc, #188]	; (8006b20 <HAL_UART_Init+0x174>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d009      	beq.n	8006a7c <HAL_UART_Init+0xd0>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a2d      	ldr	r2, [pc, #180]	; (8006b24 <HAL_UART_Init+0x178>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d004      	beq.n	8006a7c <HAL_UART_Init+0xd0>
 8006a72:	f240 112f 	movw	r1, #303	; 0x12f
 8006a76:	482c      	ldr	r0, [pc, #176]	; (8006b28 <HAL_UART_Init+0x17c>)
 8006a78:	f7fb fa09 	bl	8001e8e <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d106      	bne.n	8006a92 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f7fb fe5f 	bl	8002750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2224      	movs	r2, #36	; 0x24
 8006a96:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f022 0201 	bic.w	r2, r2, #1
 8006aa6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fb01 	bl	80070b0 <UART_SetConfig>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d101      	bne.n	8006ab8 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e022      	b.n	8006afe <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d002      	beq.n	8006ac6 <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fe31 	bl	8007728 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ad4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ae4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f042 0201 	orr.w	r2, r2, #1
 8006af4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 ff6a 	bl	80079d0 <UART_CheckIdleState>
 8006afc:	4603      	mov	r3, r0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	40011000 	.word	0x40011000
 8006b0c:	40004400 	.word	0x40004400
 8006b10:	40004800 	.word	0x40004800
 8006b14:	40004c00 	.word	0x40004c00
 8006b18:	40005000 	.word	0x40005000
 8006b1c:	40011400 	.word	0x40011400
 8006b20:	40007800 	.word	0x40007800
 8006b24:	40007c00 	.word	0x40007c00
 8006b28:	080087cc 	.word	0x080087cc

08006b2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08a      	sub	sp, #40	; 0x28
 8006b30:	af02      	add	r7, sp, #8
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	603b      	str	r3, [r7, #0]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b40:	2b20      	cmp	r3, #32
 8006b42:	d17f      	bne.n	8006c44 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d002      	beq.n	8006b50 <HAL_UART_Transmit+0x24>
 8006b4a:	88fb      	ldrh	r3, [r7, #6]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e078      	b.n	8006c46 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d101      	bne.n	8006b62 <HAL_UART_Transmit+0x36>
 8006b5e:	2302      	movs	r3, #2
 8006b60:	e071      	b.n	8006c46 <HAL_UART_Transmit+0x11a>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2221      	movs	r2, #33	; 0x21
 8006b74:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006b76:	f7fb ff63 	bl	8002a40 <HAL_GetTick>
 8006b7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	88fa      	ldrh	r2, [r7, #6]
 8006b80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	88fa      	ldrh	r2, [r7, #6]
 8006b88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b94:	d108      	bne.n	8006ba8 <HAL_UART_Transmit+0x7c>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d104      	bne.n	8006ba8 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	61bb      	str	r3, [r7, #24]
 8006ba6:	e003      	b.n	8006bb0 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bac:	2300      	movs	r3, #0
 8006bae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006bb8:	e02c      	b.n	8006c14 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	2180      	movs	r1, #128	; 0x80
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 ff48 	bl	8007a5a <UART_WaitOnFlagUntilTimeout>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d001      	beq.n	8006bd4 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e038      	b.n	8006c46 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10b      	bne.n	8006bf2 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	461a      	mov	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006be8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	3302      	adds	r3, #2
 8006bee:	61bb      	str	r3, [r7, #24]
 8006bf0:	e007      	b.n	8006c02 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	781a      	ldrb	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1cc      	bne.n	8006bba <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	2200      	movs	r2, #0
 8006c28:	2140      	movs	r1, #64	; 0x40
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 ff15 	bl	8007a5a <UART_WaitOnFlagUntilTimeout>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d001      	beq.n	8006c3a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e005      	b.n	8006c46 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006c40:	2300      	movs	r3, #0
 8006c42:	e000      	b.n	8006c46 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8006c44:	2302      	movs	r3, #2
  }
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3720      	adds	r7, #32
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b08a      	sub	sp, #40	; 0x28
 8006c52:	af02      	add	r7, sp, #8
 8006c54:	60f8      	str	r0, [r7, #12]
 8006c56:	60b9      	str	r1, [r7, #8]
 8006c58:	603b      	str	r3, [r7, #0]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c62:	2b20      	cmp	r3, #32
 8006c64:	f040 80ba 	bne.w	8006ddc <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <HAL_UART_Receive+0x26>
 8006c6e:	88fb      	ldrh	r3, [r7, #6]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e0b2      	b.n	8006dde <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d101      	bne.n	8006c86 <HAL_UART_Receive+0x38>
 8006c82:	2302      	movs	r3, #2
 8006c84:	e0ab      	b.n	8006dde <HAL_UART_Receive+0x190>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2222      	movs	r2, #34	; 0x22
 8006c98:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006c9a:	f7fb fed1 	bl	8002a40 <HAL_GetTick>
 8006c9e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	88fa      	ldrh	r2, [r7, #6]
 8006ca4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	88fa      	ldrh	r2, [r7, #6]
 8006cac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cb8:	d10e      	bne.n	8006cd8 <HAL_UART_Receive+0x8a>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d105      	bne.n	8006cce <HAL_UART_Receive+0x80>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006cc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ccc:	e02d      	b.n	8006d2a <HAL_UART_Receive+0xdc>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	22ff      	movs	r2, #255	; 0xff
 8006cd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006cd6:	e028      	b.n	8006d2a <HAL_UART_Receive+0xdc>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10d      	bne.n	8006cfc <HAL_UART_Receive+0xae>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d104      	bne.n	8006cf2 <HAL_UART_Receive+0xa4>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	22ff      	movs	r2, #255	; 0xff
 8006cec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006cf0:	e01b      	b.n	8006d2a <HAL_UART_Receive+0xdc>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	227f      	movs	r2, #127	; 0x7f
 8006cf6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006cfa:	e016      	b.n	8006d2a <HAL_UART_Receive+0xdc>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d04:	d10d      	bne.n	8006d22 <HAL_UART_Receive+0xd4>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d104      	bne.n	8006d18 <HAL_UART_Receive+0xca>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	227f      	movs	r2, #127	; 0x7f
 8006d12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d16:	e008      	b.n	8006d2a <HAL_UART_Receive+0xdc>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	223f      	movs	r2, #63	; 0x3f
 8006d1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d20:	e003      	b.n	8006d2a <HAL_UART_Receive+0xdc>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d30:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d3a:	d108      	bne.n	8006d4e <HAL_UART_Receive+0x100>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d104      	bne.n	8006d4e <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8006d44:	2300      	movs	r3, #0
 8006d46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	61bb      	str	r3, [r7, #24]
 8006d4c:	e003      	b.n	8006d56 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d52:	2300      	movs	r3, #0
 8006d54:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006d5e:	e032      	b.n	8006dc6 <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	2200      	movs	r2, #0
 8006d68:	2120      	movs	r1, #32
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f000 fe75 	bl	8007a5a <UART_WaitOnFlagUntilTimeout>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d001      	beq.n	8006d7a <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e031      	b.n	8006dde <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10c      	bne.n	8006d9a <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	8a7b      	ldrh	r3, [r7, #18]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	3302      	adds	r3, #2
 8006d96:	61bb      	str	r3, [r7, #24]
 8006d98:	e00c      	b.n	8006db4 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	8a7b      	ldrh	r3, [r7, #18]
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	4013      	ands	r3, r2
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	3301      	adds	r3, #1
 8006db2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1c6      	bne.n	8006d60 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	e000      	b.n	8006dde <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 8006ddc:	2302      	movs	r3, #2
  }
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3720      	adds	r7, #32
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
	...

08006de8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b088      	sub	sp, #32
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e08:	69fa      	ldr	r2, [r7, #28]
 8006e0a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006e0e:	4013      	ands	r3, r2
 8006e10:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d113      	bne.n	8006e40 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	f003 0320 	and.w	r3, r3, #32
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00e      	beq.n	8006e40 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	f003 0320 	and.w	r3, r3, #32
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d009      	beq.n	8006e40 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 8114 	beq.w	800705e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	4798      	blx	r3
      }
      return;
 8006e3e:	e10e      	b.n	800705e <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 80d6 	beq.w	8006ff4 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d105      	bne.n	8006e5e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 80cb 	beq.w	8006ff4 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00e      	beq.n	8006e86 <HAL_UART_IRQHandler+0x9e>
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d009      	beq.n	8006e86 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2201      	movs	r2, #1
 8006e78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e7e:	f043 0201 	orr.w	r2, r3, #1
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	f003 0302 	and.w	r3, r3, #2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00e      	beq.n	8006eae <HAL_UART_IRQHandler+0xc6>
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d009      	beq.n	8006eae <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ea6:	f043 0204 	orr.w	r2, r3, #4
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	f003 0304 	and.w	r3, r3, #4
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00e      	beq.n	8006ed6 <HAL_UART_IRQHandler+0xee>
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d009      	beq.n	8006ed6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2204      	movs	r2, #4
 8006ec8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ece:	f043 0202 	orr.w	r2, r3, #2
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	f003 0308 	and.w	r3, r3, #8
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d013      	beq.n	8006f08 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	f003 0320 	and.w	r3, r3, #32
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d104      	bne.n	8006ef4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d009      	beq.n	8006f08 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2208      	movs	r2, #8
 8006efa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f00:	f043 0208 	orr.w	r2, r3, #8
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00f      	beq.n	8006f32 <HAL_UART_IRQHandler+0x14a>
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00a      	beq.n	8006f32 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f2a:	f043 0220 	orr.w	r2, r3, #32
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f000 8093 	beq.w	8007062 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	f003 0320 	and.w	r3, r3, #32
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00c      	beq.n	8006f60 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	f003 0320 	and.w	r3, r3, #32
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d007      	beq.n	8006f60 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d003      	beq.n	8006f60 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f64:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f70:	2b40      	cmp	r3, #64	; 0x40
 8006f72:	d004      	beq.n	8006f7e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d031      	beq.n	8006fe2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fde6 	bl	8007b50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f8e:	2b40      	cmp	r3, #64	; 0x40
 8006f90:	d123      	bne.n	8006fda <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	689a      	ldr	r2, [r3, #8]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fa0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d013      	beq.n	8006fd2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fae:	4a30      	ldr	r2, [pc, #192]	; (8007070 <HAL_UART_IRQHandler+0x288>)
 8006fb0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fc f800 	bl	8002fbc <HAL_DMA_Abort_IT>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d016      	beq.n	8006ff0 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006fcc:	4610      	mov	r0, r2
 8006fce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd0:	e00e      	b.n	8006ff0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f858 	bl	8007088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd8:	e00a      	b.n	8006ff0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f854 	bl	8007088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fe0:	e006      	b.n	8006ff0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f850 	bl	8007088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006fee:	e038      	b.n	8007062 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff0:	bf00      	nop
    return;
 8006ff2:	e036      	b.n	8007062 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00d      	beq.n	800701a <HAL_UART_IRQHandler+0x232>
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d008      	beq.n	800701a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007010:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f842 	bl	800709c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007018:	e026      	b.n	8007068 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00d      	beq.n	8007040 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800702a:	2b00      	cmp	r3, #0
 800702c:	d008      	beq.n	8007040 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007032:	2b00      	cmp	r3, #0
 8007034:	d017      	beq.n	8007066 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	4798      	blx	r3
    }
    return;
 800703e:	e012      	b.n	8007066 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00e      	beq.n	8007068 <HAL_UART_IRQHandler+0x280>
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007050:	2b00      	cmp	r3, #0
 8007052:	d009      	beq.n	8007068 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fdb1 	bl	8007bbc <UART_EndTransmit_IT>
    return;
 800705a:	bf00      	nop
 800705c:	e004      	b.n	8007068 <HAL_UART_IRQHandler+0x280>
      return;
 800705e:	bf00      	nop
 8007060:	e002      	b.n	8007068 <HAL_UART_IRQHandler+0x280>
    return;
 8007062:	bf00      	nop
 8007064:	e000      	b.n	8007068 <HAL_UART_IRQHandler+0x280>
    return;
 8007066:	bf00      	nop
  }

}
 8007068:	3720      	adds	r7, #32
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	08007b91 	.word	0x08007b91

08007074 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b088      	sub	sp, #32
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	75fb      	strb	r3, [r7, #23]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	4aaa      	ldr	r2, [pc, #680]	; (8007370 <UART_SetConfig+0x2c0>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d904      	bls.n	80070d4 <UART_SetConfig+0x24>
 80070ca:	f640 21be 	movw	r1, #2750	; 0xabe
 80070ce:	48a9      	ldr	r0, [pc, #676]	; (8007374 <UART_SetConfig+0x2c4>)
 80070d0:	f7fa fedd 	bl	8001e8e <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070dc:	d00d      	beq.n	80070fa <UART_SetConfig+0x4a>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d009      	beq.n	80070fa <UART_SetConfig+0x4a>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ee:	d004      	beq.n	80070fa <UART_SetConfig+0x4a>
 80070f0:	f640 21bf 	movw	r1, #2751	; 0xabf
 80070f4:	489f      	ldr	r0, [pc, #636]	; (8007374 <UART_SetConfig+0x2c4>)
 80070f6:	f7fa feca 	bl	8001e8e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007102:	d012      	beq.n	800712a <UART_SetConfig+0x7a>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00e      	beq.n	800712a <UART_SetConfig+0x7a>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007114:	d009      	beq.n	800712a <UART_SetConfig+0x7a>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800711e:	d004      	beq.n	800712a <UART_SetConfig+0x7a>
 8007120:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 8007124:	4893      	ldr	r0, [pc, #588]	; (8007374 <UART_SetConfig+0x2c4>)
 8007126:	f7fa feb2 	bl	8001e8e <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d009      	beq.n	8007146 <UART_SetConfig+0x96>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800713a:	d004      	beq.n	8007146 <UART_SetConfig+0x96>
 800713c:	f640 21c1 	movw	r1, #2753	; 0xac1
 8007140:	488c      	ldr	r0, [pc, #560]	; (8007374 <UART_SetConfig+0x2c4>)
 8007142:	f7fa fea4 	bl	8001e8e <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00e      	beq.n	800716c <UART_SetConfig+0xbc>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007156:	d009      	beq.n	800716c <UART_SetConfig+0xbc>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007160:	d004      	beq.n	800716c <UART_SetConfig+0xbc>
 8007162:	f640 21c3 	movw	r1, #2755	; 0xac3
 8007166:	4883      	ldr	r0, [pc, #524]	; (8007374 <UART_SetConfig+0x2c4>)
 8007168:	f7fa fe91 	bl	8001e8e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	f023 030c 	bic.w	r3, r3, #12
 8007174:	2b00      	cmp	r3, #0
 8007176:	d103      	bne.n	8007180 <UART_SetConfig+0xd0>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d104      	bne.n	800718a <UART_SetConfig+0xda>
 8007180:	f640 21c4 	movw	r1, #2756	; 0xac4
 8007184:	487b      	ldr	r0, [pc, #492]	; (8007374 <UART_SetConfig+0x2c4>)
 8007186:	f7fa fe82 	bl	8001e8e <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d013      	beq.n	80071ba <UART_SetConfig+0x10a>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800719a:	d00e      	beq.n	80071ba <UART_SetConfig+0x10a>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071a4:	d009      	beq.n	80071ba <UART_SetConfig+0x10a>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071ae:	d004      	beq.n	80071ba <UART_SetConfig+0x10a>
 80071b0:	f640 21c5 	movw	r1, #2757	; 0xac5
 80071b4:	486f      	ldr	r0, [pc, #444]	; (8007374 <UART_SetConfig+0x2c4>)
 80071b6:	f7fa fe6a 	bl	8001e8e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d009      	beq.n	80071d6 <UART_SetConfig+0x126>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071ca:	d004      	beq.n	80071d6 <UART_SetConfig+0x126>
 80071cc:	f640 21c6 	movw	r1, #2758	; 0xac6
 80071d0:	4868      	ldr	r0, [pc, #416]	; (8007374 <UART_SetConfig+0x2c4>)
 80071d2:	f7fa fe5c 	bl	8001e8e <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	689a      	ldr	r2, [r3, #8]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	431a      	orrs	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	431a      	orrs	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	69db      	ldr	r3, [r3, #28]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	4b60      	ldr	r3, [pc, #384]	; (8007378 <UART_SetConfig+0x2c8>)
 80071f6:	4013      	ands	r3, r2
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	6812      	ldr	r2, [r2, #0]
 80071fc:	6939      	ldr	r1, [r7, #16]
 80071fe:	430b      	orrs	r3, r1
 8007200:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68da      	ldr	r2, [r3, #12]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	430a      	orrs	r2, r1
 8007216:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	4313      	orrs	r3, r2
 8007226:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	430a      	orrs	r2, r1
 800723a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a4e      	ldr	r2, [pc, #312]	; (800737c <UART_SetConfig+0x2cc>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d122      	bne.n	800728c <UART_SetConfig+0x1dc>
 8007246:	4b4e      	ldr	r3, [pc, #312]	; (8007380 <UART_SetConfig+0x2d0>)
 8007248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800724c:	f003 0303 	and.w	r3, r3, #3
 8007250:	2b03      	cmp	r3, #3
 8007252:	d817      	bhi.n	8007284 <UART_SetConfig+0x1d4>
 8007254:	a201      	add	r2, pc, #4	; (adr r2, 800725c <UART_SetConfig+0x1ac>)
 8007256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725a:	bf00      	nop
 800725c:	0800726d 	.word	0x0800726d
 8007260:	08007279 	.word	0x08007279
 8007264:	08007273 	.word	0x08007273
 8007268:	0800727f 	.word	0x0800727f
 800726c:	2301      	movs	r3, #1
 800726e:	77fb      	strb	r3, [r7, #31]
 8007270:	e14d      	b.n	800750e <UART_SetConfig+0x45e>
 8007272:	2302      	movs	r3, #2
 8007274:	77fb      	strb	r3, [r7, #31]
 8007276:	e14a      	b.n	800750e <UART_SetConfig+0x45e>
 8007278:	2304      	movs	r3, #4
 800727a:	77fb      	strb	r3, [r7, #31]
 800727c:	e147      	b.n	800750e <UART_SetConfig+0x45e>
 800727e:	2308      	movs	r3, #8
 8007280:	77fb      	strb	r3, [r7, #31]
 8007282:	e144      	b.n	800750e <UART_SetConfig+0x45e>
 8007284:	2310      	movs	r3, #16
 8007286:	77fb      	strb	r3, [r7, #31]
 8007288:	bf00      	nop
 800728a:	e140      	b.n	800750e <UART_SetConfig+0x45e>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a3c      	ldr	r2, [pc, #240]	; (8007384 <UART_SetConfig+0x2d4>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d134      	bne.n	8007300 <UART_SetConfig+0x250>
 8007296:	4b3a      	ldr	r3, [pc, #232]	; (8007380 <UART_SetConfig+0x2d0>)
 8007298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800729c:	f003 030c 	and.w	r3, r3, #12
 80072a0:	2b0c      	cmp	r3, #12
 80072a2:	d829      	bhi.n	80072f8 <UART_SetConfig+0x248>
 80072a4:	a201      	add	r2, pc, #4	; (adr r2, 80072ac <UART_SetConfig+0x1fc>)
 80072a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072aa:	bf00      	nop
 80072ac:	080072e1 	.word	0x080072e1
 80072b0:	080072f9 	.word	0x080072f9
 80072b4:	080072f9 	.word	0x080072f9
 80072b8:	080072f9 	.word	0x080072f9
 80072bc:	080072ed 	.word	0x080072ed
 80072c0:	080072f9 	.word	0x080072f9
 80072c4:	080072f9 	.word	0x080072f9
 80072c8:	080072f9 	.word	0x080072f9
 80072cc:	080072e7 	.word	0x080072e7
 80072d0:	080072f9 	.word	0x080072f9
 80072d4:	080072f9 	.word	0x080072f9
 80072d8:	080072f9 	.word	0x080072f9
 80072dc:	080072f3 	.word	0x080072f3
 80072e0:	2300      	movs	r3, #0
 80072e2:	77fb      	strb	r3, [r7, #31]
 80072e4:	e113      	b.n	800750e <UART_SetConfig+0x45e>
 80072e6:	2302      	movs	r3, #2
 80072e8:	77fb      	strb	r3, [r7, #31]
 80072ea:	e110      	b.n	800750e <UART_SetConfig+0x45e>
 80072ec:	2304      	movs	r3, #4
 80072ee:	77fb      	strb	r3, [r7, #31]
 80072f0:	e10d      	b.n	800750e <UART_SetConfig+0x45e>
 80072f2:	2308      	movs	r3, #8
 80072f4:	77fb      	strb	r3, [r7, #31]
 80072f6:	e10a      	b.n	800750e <UART_SetConfig+0x45e>
 80072f8:	2310      	movs	r3, #16
 80072fa:	77fb      	strb	r3, [r7, #31]
 80072fc:	bf00      	nop
 80072fe:	e106      	b.n	800750e <UART_SetConfig+0x45e>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a20      	ldr	r2, [pc, #128]	; (8007388 <UART_SetConfig+0x2d8>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d120      	bne.n	800734c <UART_SetConfig+0x29c>
 800730a:	4b1d      	ldr	r3, [pc, #116]	; (8007380 <UART_SetConfig+0x2d0>)
 800730c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007310:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007314:	2b10      	cmp	r3, #16
 8007316:	d00f      	beq.n	8007338 <UART_SetConfig+0x288>
 8007318:	2b10      	cmp	r3, #16
 800731a:	d802      	bhi.n	8007322 <UART_SetConfig+0x272>
 800731c:	2b00      	cmp	r3, #0
 800731e:	d005      	beq.n	800732c <UART_SetConfig+0x27c>
 8007320:	e010      	b.n	8007344 <UART_SetConfig+0x294>
 8007322:	2b20      	cmp	r3, #32
 8007324:	d005      	beq.n	8007332 <UART_SetConfig+0x282>
 8007326:	2b30      	cmp	r3, #48	; 0x30
 8007328:	d009      	beq.n	800733e <UART_SetConfig+0x28e>
 800732a:	e00b      	b.n	8007344 <UART_SetConfig+0x294>
 800732c:	2300      	movs	r3, #0
 800732e:	77fb      	strb	r3, [r7, #31]
 8007330:	e0ed      	b.n	800750e <UART_SetConfig+0x45e>
 8007332:	2302      	movs	r3, #2
 8007334:	77fb      	strb	r3, [r7, #31]
 8007336:	e0ea      	b.n	800750e <UART_SetConfig+0x45e>
 8007338:	2304      	movs	r3, #4
 800733a:	77fb      	strb	r3, [r7, #31]
 800733c:	e0e7      	b.n	800750e <UART_SetConfig+0x45e>
 800733e:	2308      	movs	r3, #8
 8007340:	77fb      	strb	r3, [r7, #31]
 8007342:	e0e4      	b.n	800750e <UART_SetConfig+0x45e>
 8007344:	2310      	movs	r3, #16
 8007346:	77fb      	strb	r3, [r7, #31]
 8007348:	bf00      	nop
 800734a:	e0e0      	b.n	800750e <UART_SetConfig+0x45e>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a0e      	ldr	r2, [pc, #56]	; (800738c <UART_SetConfig+0x2dc>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d131      	bne.n	80073ba <UART_SetConfig+0x30a>
 8007356:	4b0a      	ldr	r3, [pc, #40]	; (8007380 <UART_SetConfig+0x2d0>)
 8007358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800735c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007360:	2b40      	cmp	r3, #64	; 0x40
 8007362:	d020      	beq.n	80073a6 <UART_SetConfig+0x2f6>
 8007364:	2b40      	cmp	r3, #64	; 0x40
 8007366:	d813      	bhi.n	8007390 <UART_SetConfig+0x2e0>
 8007368:	2b00      	cmp	r3, #0
 800736a:	d016      	beq.n	800739a <UART_SetConfig+0x2ea>
 800736c:	e021      	b.n	80073b2 <UART_SetConfig+0x302>
 800736e:	bf00      	nop
 8007370:	019bfcc0 	.word	0x019bfcc0
 8007374:	080087cc 	.word	0x080087cc
 8007378:	efff69f3 	.word	0xefff69f3
 800737c:	40011000 	.word	0x40011000
 8007380:	40023800 	.word	0x40023800
 8007384:	40004400 	.word	0x40004400
 8007388:	40004800 	.word	0x40004800
 800738c:	40004c00 	.word	0x40004c00
 8007390:	2b80      	cmp	r3, #128	; 0x80
 8007392:	d005      	beq.n	80073a0 <UART_SetConfig+0x2f0>
 8007394:	2bc0      	cmp	r3, #192	; 0xc0
 8007396:	d009      	beq.n	80073ac <UART_SetConfig+0x2fc>
 8007398:	e00b      	b.n	80073b2 <UART_SetConfig+0x302>
 800739a:	2300      	movs	r3, #0
 800739c:	77fb      	strb	r3, [r7, #31]
 800739e:	e0b6      	b.n	800750e <UART_SetConfig+0x45e>
 80073a0:	2302      	movs	r3, #2
 80073a2:	77fb      	strb	r3, [r7, #31]
 80073a4:	e0b3      	b.n	800750e <UART_SetConfig+0x45e>
 80073a6:	2304      	movs	r3, #4
 80073a8:	77fb      	strb	r3, [r7, #31]
 80073aa:	e0b0      	b.n	800750e <UART_SetConfig+0x45e>
 80073ac:	2308      	movs	r3, #8
 80073ae:	77fb      	strb	r3, [r7, #31]
 80073b0:	e0ad      	b.n	800750e <UART_SetConfig+0x45e>
 80073b2:	2310      	movs	r3, #16
 80073b4:	77fb      	strb	r3, [r7, #31]
 80073b6:	bf00      	nop
 80073b8:	e0a9      	b.n	800750e <UART_SetConfig+0x45e>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4aaa      	ldr	r2, [pc, #680]	; (8007668 <UART_SetConfig+0x5b8>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d124      	bne.n	800740e <UART_SetConfig+0x35e>
 80073c4:	4ba9      	ldr	r3, [pc, #676]	; (800766c <UART_SetConfig+0x5bc>)
 80073c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073d2:	d012      	beq.n	80073fa <UART_SetConfig+0x34a>
 80073d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073d8:	d802      	bhi.n	80073e0 <UART_SetConfig+0x330>
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d007      	beq.n	80073ee <UART_SetConfig+0x33e>
 80073de:	e012      	b.n	8007406 <UART_SetConfig+0x356>
 80073e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073e4:	d006      	beq.n	80073f4 <UART_SetConfig+0x344>
 80073e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073ea:	d009      	beq.n	8007400 <UART_SetConfig+0x350>
 80073ec:	e00b      	b.n	8007406 <UART_SetConfig+0x356>
 80073ee:	2300      	movs	r3, #0
 80073f0:	77fb      	strb	r3, [r7, #31]
 80073f2:	e08c      	b.n	800750e <UART_SetConfig+0x45e>
 80073f4:	2302      	movs	r3, #2
 80073f6:	77fb      	strb	r3, [r7, #31]
 80073f8:	e089      	b.n	800750e <UART_SetConfig+0x45e>
 80073fa:	2304      	movs	r3, #4
 80073fc:	77fb      	strb	r3, [r7, #31]
 80073fe:	e086      	b.n	800750e <UART_SetConfig+0x45e>
 8007400:	2308      	movs	r3, #8
 8007402:	77fb      	strb	r3, [r7, #31]
 8007404:	e083      	b.n	800750e <UART_SetConfig+0x45e>
 8007406:	2310      	movs	r3, #16
 8007408:	77fb      	strb	r3, [r7, #31]
 800740a:	bf00      	nop
 800740c:	e07f      	b.n	800750e <UART_SetConfig+0x45e>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a97      	ldr	r2, [pc, #604]	; (8007670 <UART_SetConfig+0x5c0>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d124      	bne.n	8007462 <UART_SetConfig+0x3b2>
 8007418:	4b94      	ldr	r3, [pc, #592]	; (800766c <UART_SetConfig+0x5bc>)
 800741a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800741e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007426:	d012      	beq.n	800744e <UART_SetConfig+0x39e>
 8007428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800742c:	d802      	bhi.n	8007434 <UART_SetConfig+0x384>
 800742e:	2b00      	cmp	r3, #0
 8007430:	d007      	beq.n	8007442 <UART_SetConfig+0x392>
 8007432:	e012      	b.n	800745a <UART_SetConfig+0x3aa>
 8007434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007438:	d006      	beq.n	8007448 <UART_SetConfig+0x398>
 800743a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800743e:	d009      	beq.n	8007454 <UART_SetConfig+0x3a4>
 8007440:	e00b      	b.n	800745a <UART_SetConfig+0x3aa>
 8007442:	2301      	movs	r3, #1
 8007444:	77fb      	strb	r3, [r7, #31]
 8007446:	e062      	b.n	800750e <UART_SetConfig+0x45e>
 8007448:	2302      	movs	r3, #2
 800744a:	77fb      	strb	r3, [r7, #31]
 800744c:	e05f      	b.n	800750e <UART_SetConfig+0x45e>
 800744e:	2304      	movs	r3, #4
 8007450:	77fb      	strb	r3, [r7, #31]
 8007452:	e05c      	b.n	800750e <UART_SetConfig+0x45e>
 8007454:	2308      	movs	r3, #8
 8007456:	77fb      	strb	r3, [r7, #31]
 8007458:	e059      	b.n	800750e <UART_SetConfig+0x45e>
 800745a:	2310      	movs	r3, #16
 800745c:	77fb      	strb	r3, [r7, #31]
 800745e:	bf00      	nop
 8007460:	e055      	b.n	800750e <UART_SetConfig+0x45e>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a83      	ldr	r2, [pc, #524]	; (8007674 <UART_SetConfig+0x5c4>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d124      	bne.n	80074b6 <UART_SetConfig+0x406>
 800746c:	4b7f      	ldr	r3, [pc, #508]	; (800766c <UART_SetConfig+0x5bc>)
 800746e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007472:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800747a:	d012      	beq.n	80074a2 <UART_SetConfig+0x3f2>
 800747c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007480:	d802      	bhi.n	8007488 <UART_SetConfig+0x3d8>
 8007482:	2b00      	cmp	r3, #0
 8007484:	d007      	beq.n	8007496 <UART_SetConfig+0x3e6>
 8007486:	e012      	b.n	80074ae <UART_SetConfig+0x3fe>
 8007488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800748c:	d006      	beq.n	800749c <UART_SetConfig+0x3ec>
 800748e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007492:	d009      	beq.n	80074a8 <UART_SetConfig+0x3f8>
 8007494:	e00b      	b.n	80074ae <UART_SetConfig+0x3fe>
 8007496:	2300      	movs	r3, #0
 8007498:	77fb      	strb	r3, [r7, #31]
 800749a:	e038      	b.n	800750e <UART_SetConfig+0x45e>
 800749c:	2302      	movs	r3, #2
 800749e:	77fb      	strb	r3, [r7, #31]
 80074a0:	e035      	b.n	800750e <UART_SetConfig+0x45e>
 80074a2:	2304      	movs	r3, #4
 80074a4:	77fb      	strb	r3, [r7, #31]
 80074a6:	e032      	b.n	800750e <UART_SetConfig+0x45e>
 80074a8:	2308      	movs	r3, #8
 80074aa:	77fb      	strb	r3, [r7, #31]
 80074ac:	e02f      	b.n	800750e <UART_SetConfig+0x45e>
 80074ae:	2310      	movs	r3, #16
 80074b0:	77fb      	strb	r3, [r7, #31]
 80074b2:	bf00      	nop
 80074b4:	e02b      	b.n	800750e <UART_SetConfig+0x45e>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a6f      	ldr	r2, [pc, #444]	; (8007678 <UART_SetConfig+0x5c8>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d124      	bne.n	800750a <UART_SetConfig+0x45a>
 80074c0:	4b6a      	ldr	r3, [pc, #424]	; (800766c <UART_SetConfig+0x5bc>)
 80074c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80074ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074ce:	d012      	beq.n	80074f6 <UART_SetConfig+0x446>
 80074d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074d4:	d802      	bhi.n	80074dc <UART_SetConfig+0x42c>
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d007      	beq.n	80074ea <UART_SetConfig+0x43a>
 80074da:	e012      	b.n	8007502 <UART_SetConfig+0x452>
 80074dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074e0:	d006      	beq.n	80074f0 <UART_SetConfig+0x440>
 80074e2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80074e6:	d009      	beq.n	80074fc <UART_SetConfig+0x44c>
 80074e8:	e00b      	b.n	8007502 <UART_SetConfig+0x452>
 80074ea:	2300      	movs	r3, #0
 80074ec:	77fb      	strb	r3, [r7, #31]
 80074ee:	e00e      	b.n	800750e <UART_SetConfig+0x45e>
 80074f0:	2302      	movs	r3, #2
 80074f2:	77fb      	strb	r3, [r7, #31]
 80074f4:	e00b      	b.n	800750e <UART_SetConfig+0x45e>
 80074f6:	2304      	movs	r3, #4
 80074f8:	77fb      	strb	r3, [r7, #31]
 80074fa:	e008      	b.n	800750e <UART_SetConfig+0x45e>
 80074fc:	2308      	movs	r3, #8
 80074fe:	77fb      	strb	r3, [r7, #31]
 8007500:	e005      	b.n	800750e <UART_SetConfig+0x45e>
 8007502:	2310      	movs	r3, #16
 8007504:	77fb      	strb	r3, [r7, #31]
 8007506:	bf00      	nop
 8007508:	e001      	b.n	800750e <UART_SetConfig+0x45e>
 800750a:	2310      	movs	r3, #16
 800750c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007516:	d17f      	bne.n	8007618 <UART_SetConfig+0x568>
  {
    switch (clocksource)
 8007518:	7ffb      	ldrb	r3, [r7, #31]
 800751a:	2b08      	cmp	r3, #8
 800751c:	d85c      	bhi.n	80075d8 <UART_SetConfig+0x528>
 800751e:	a201      	add	r2, pc, #4	; (adr r2, 8007524 <UART_SetConfig+0x474>)
 8007520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007524:	08007549 	.word	0x08007549
 8007528:	08007569 	.word	0x08007569
 800752c:	08007589 	.word	0x08007589
 8007530:	080075d9 	.word	0x080075d9
 8007534:	080075a1 	.word	0x080075a1
 8007538:	080075d9 	.word	0x080075d9
 800753c:	080075d9 	.word	0x080075d9
 8007540:	080075d9 	.word	0x080075d9
 8007544:	080075c1 	.word	0x080075c1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007548:	f7fc ffa0 	bl	800448c <HAL_RCC_GetPCLK1Freq>
 800754c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	005a      	lsls	r2, r3, #1
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	085b      	lsrs	r3, r3, #1
 8007558:	441a      	add	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007562:	b29b      	uxth	r3, r3
 8007564:	61bb      	str	r3, [r7, #24]
        break;
 8007566:	e03a      	b.n	80075de <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007568:	f7fc ffa4 	bl	80044b4 <HAL_RCC_GetPCLK2Freq>
 800756c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	005a      	lsls	r2, r3, #1
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	085b      	lsrs	r3, r3, #1
 8007578:	441a      	add	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007582:	b29b      	uxth	r3, r3
 8007584:	61bb      	str	r3, [r7, #24]
        break;
 8007586:	e02a      	b.n	80075de <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	085a      	lsrs	r2, r3, #1
 800758e:	4b3b      	ldr	r3, [pc, #236]	; (800767c <UART_SetConfig+0x5cc>)
 8007590:	4413      	add	r3, r2
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	6852      	ldr	r2, [r2, #4]
 8007596:	fbb3 f3f2 	udiv	r3, r3, r2
 800759a:	b29b      	uxth	r3, r3
 800759c:	61bb      	str	r3, [r7, #24]
        break;
 800759e:	e01e      	b.n	80075de <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075a0:	f7fc feb6 	bl	8004310 <HAL_RCC_GetSysClockFreq>
 80075a4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	005a      	lsls	r2, r3, #1
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	085b      	lsrs	r3, r3, #1
 80075b0:	441a      	add	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	61bb      	str	r3, [r7, #24]
        break;
 80075be:	e00e      	b.n	80075de <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	085b      	lsrs	r3, r3, #1
 80075c6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	61bb      	str	r3, [r7, #24]
        break;
 80075d6:	e002      	b.n	80075de <UART_SetConfig+0x52e>
      default:
        ret = HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	75fb      	strb	r3, [r7, #23]
        break;
 80075dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	2b0f      	cmp	r3, #15
 80075e2:	d916      	bls.n	8007612 <UART_SetConfig+0x562>
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ea:	d212      	bcs.n	8007612 <UART_SetConfig+0x562>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	f023 030f 	bic.w	r3, r3, #15
 80075f4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	085b      	lsrs	r3, r3, #1
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	f003 0307 	and.w	r3, r3, #7
 8007600:	b29a      	uxth	r2, r3
 8007602:	897b      	ldrh	r3, [r7, #10]
 8007604:	4313      	orrs	r3, r2
 8007606:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	897a      	ldrh	r2, [r7, #10]
 800760e:	60da      	str	r2, [r3, #12]
 8007610:	e07d      	b.n	800770e <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	75fb      	strb	r3, [r7, #23]
 8007616:	e07a      	b.n	800770e <UART_SetConfig+0x65e>
    }
  }
  else
  {
    switch (clocksource)
 8007618:	7ffb      	ldrb	r3, [r7, #31]
 800761a:	2b08      	cmp	r3, #8
 800761c:	d866      	bhi.n	80076ec <UART_SetConfig+0x63c>
 800761e:	a201      	add	r2, pc, #4	; (adr r2, 8007624 <UART_SetConfig+0x574>)
 8007620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007624:	08007649 	.word	0x08007649
 8007628:	08007681 	.word	0x08007681
 800762c:	0800769f 	.word	0x0800769f
 8007630:	080076ed 	.word	0x080076ed
 8007634:	080076b7 	.word	0x080076b7
 8007638:	080076ed 	.word	0x080076ed
 800763c:	080076ed 	.word	0x080076ed
 8007640:	080076ed 	.word	0x080076ed
 8007644:	080076d5 	.word	0x080076d5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007648:	f7fc ff20 	bl	800448c <HAL_RCC_GetPCLK1Freq>
 800764c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	085a      	lsrs	r2, r3, #1
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	441a      	add	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007660:	b29b      	uxth	r3, r3
 8007662:	61bb      	str	r3, [r7, #24]
        break;
 8007664:	e045      	b.n	80076f2 <UART_SetConfig+0x642>
 8007666:	bf00      	nop
 8007668:	40005000 	.word	0x40005000
 800766c:	40023800 	.word	0x40023800
 8007670:	40011400 	.word	0x40011400
 8007674:	40007800 	.word	0x40007800
 8007678:	40007c00 	.word	0x40007c00
 800767c:	01e84800 	.word	0x01e84800
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007680:	f7fc ff18 	bl	80044b4 <HAL_RCC_GetPCLK2Freq>
 8007684:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	085a      	lsrs	r2, r3, #1
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	441a      	add	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	fbb2 f3f3 	udiv	r3, r2, r3
 8007698:	b29b      	uxth	r3, r3
 800769a:	61bb      	str	r3, [r7, #24]
        break;
 800769c:	e029      	b.n	80076f2 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	085a      	lsrs	r2, r3, #1
 80076a4:	4b1f      	ldr	r3, [pc, #124]	; (8007724 <UART_SetConfig+0x674>)
 80076a6:	4413      	add	r3, r2
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	6852      	ldr	r2, [r2, #4]
 80076ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	61bb      	str	r3, [r7, #24]
        break;
 80076b4:	e01d      	b.n	80076f2 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076b6:	f7fc fe2b 	bl	8004310 <HAL_RCC_GetSysClockFreq>
 80076ba:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	085a      	lsrs	r2, r3, #1
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	441a      	add	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	61bb      	str	r3, [r7, #24]
        break;
 80076d2:	e00e      	b.n	80076f2 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	085b      	lsrs	r3, r3, #1
 80076da:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	61bb      	str	r3, [r7, #24]
        break;
 80076ea:	e002      	b.n	80076f2 <UART_SetConfig+0x642>
      default:
        ret = HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	75fb      	strb	r3, [r7, #23]
        break;
 80076f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	2b0f      	cmp	r3, #15
 80076f6:	d908      	bls.n	800770a <UART_SetConfig+0x65a>
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076fe:	d204      	bcs.n	800770a <UART_SetConfig+0x65a>
    {
      huart->Instance->BRR = usartdiv;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	60da      	str	r2, [r3, #12]
 8007708:	e001      	b.n	800770e <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800771a:	7dfb      	ldrb	r3, [r7, #23]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3720      	adds	r7, #32
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	00f42400 	.word	0x00f42400

08007728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007734:	2bff      	cmp	r3, #255	; 0xff
 8007736:	d904      	bls.n	8007742 <UART_AdvFeatureConfig+0x1a>
 8007738:	f640 3143 	movw	r1, #2883	; 0xb43
 800773c:	489f      	ldr	r0, [pc, #636]	; (80079bc <UART_AdvFeatureConfig+0x294>)
 800773e:	f7fa fba6 	bl	8001e8e <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b00      	cmp	r3, #0
 800774c:	d018      	beq.n	8007780 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007752:	2b00      	cmp	r3, #0
 8007754:	d009      	beq.n	800776a <UART_AdvFeatureConfig+0x42>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800775e:	d004      	beq.n	800776a <UART_AdvFeatureConfig+0x42>
 8007760:	f640 3148 	movw	r1, #2888	; 0xb48
 8007764:	4895      	ldr	r0, [pc, #596]	; (80079bc <UART_AdvFeatureConfig+0x294>)
 8007766:	f7fa fb92 	bl	8001e8e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	430a      	orrs	r2, r1
 800777e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007784:	f003 0302 	and.w	r3, r3, #2
 8007788:	2b00      	cmp	r3, #0
 800778a:	d018      	beq.n	80077be <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007790:	2b00      	cmp	r3, #0
 8007792:	d009      	beq.n	80077a8 <UART_AdvFeatureConfig+0x80>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800779c:	d004      	beq.n	80077a8 <UART_AdvFeatureConfig+0x80>
 800779e:	f640 314f 	movw	r1, #2895	; 0xb4f
 80077a2:	4886      	ldr	r0, [pc, #536]	; (80079bc <UART_AdvFeatureConfig+0x294>)
 80077a4:	f7fa fb73 	bl	8001e8e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	430a      	orrs	r2, r1
 80077bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c2:	f003 0304 	and.w	r3, r3, #4
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d018      	beq.n	80077fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d009      	beq.n	80077e6 <UART_AdvFeatureConfig+0xbe>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077da:	d004      	beq.n	80077e6 <UART_AdvFeatureConfig+0xbe>
 80077dc:	f640 3156 	movw	r1, #2902	; 0xb56
 80077e0:	4876      	ldr	r0, [pc, #472]	; (80079bc <UART_AdvFeatureConfig+0x294>)
 80077e2:	f7fa fb54 	bl	8001e8e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007800:	f003 0308 	and.w	r3, r3, #8
 8007804:	2b00      	cmp	r3, #0
 8007806:	d018      	beq.n	800783a <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800780c:	2b00      	cmp	r3, #0
 800780e:	d009      	beq.n	8007824 <UART_AdvFeatureConfig+0xfc>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007818:	d004      	beq.n	8007824 <UART_AdvFeatureConfig+0xfc>
 800781a:	f640 315d 	movw	r1, #2909	; 0xb5d
 800781e:	4867      	ldr	r0, [pc, #412]	; (80079bc <UART_AdvFeatureConfig+0x294>)
 8007820:	f7fa fb35 	bl	8001e8e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	430a      	orrs	r2, r1
 8007838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783e:	f003 0310 	and.w	r3, r3, #16
 8007842:	2b00      	cmp	r3, #0
 8007844:	d018      	beq.n	8007878 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784a:	2b00      	cmp	r3, #0
 800784c:	d009      	beq.n	8007862 <UART_AdvFeatureConfig+0x13a>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007856:	d004      	beq.n	8007862 <UART_AdvFeatureConfig+0x13a>
 8007858:	f640 3164 	movw	r1, #2916	; 0xb64
 800785c:	4857      	ldr	r0, [pc, #348]	; (80079bc <UART_AdvFeatureConfig+0x294>)
 800785e:	f7fa fb16 	bl	8001e8e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787c:	f003 0320 	and.w	r3, r3, #32
 8007880:	2b00      	cmp	r3, #0
 8007882:	d018      	beq.n	80078b6 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007888:	2b00      	cmp	r3, #0
 800788a:	d009      	beq.n	80078a0 <UART_AdvFeatureConfig+0x178>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007894:	d004      	beq.n	80078a0 <UART_AdvFeatureConfig+0x178>
 8007896:	f640 316b 	movw	r1, #2923	; 0xb6b
 800789a:	4848      	ldr	r0, [pc, #288]	; (80079bc <UART_AdvFeatureConfig+0x294>)
 800789c:	f7fa faf7 	bl	8001e8e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	430a      	orrs	r2, r1
 80078b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d059      	beq.n	8007976 <UART_AdvFeatureConfig+0x24e>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a3e      	ldr	r2, [pc, #248]	; (80079c0 <UART_AdvFeatureConfig+0x298>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d013      	beq.n	80078f4 <UART_AdvFeatureConfig+0x1cc>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a3c      	ldr	r2, [pc, #240]	; (80079c4 <UART_AdvFeatureConfig+0x29c>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d00e      	beq.n	80078f4 <UART_AdvFeatureConfig+0x1cc>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a3b      	ldr	r2, [pc, #236]	; (80079c8 <UART_AdvFeatureConfig+0x2a0>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d009      	beq.n	80078f4 <UART_AdvFeatureConfig+0x1cc>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a39      	ldr	r2, [pc, #228]	; (80079cc <UART_AdvFeatureConfig+0x2a4>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d004      	beq.n	80078f4 <UART_AdvFeatureConfig+0x1cc>
 80078ea:	f640 3172 	movw	r1, #2930	; 0xb72
 80078ee:	4833      	ldr	r0, [pc, #204]	; (80079bc <UART_AdvFeatureConfig+0x294>)
 80078f0:	f7fa facd 	bl	8001e8e <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d009      	beq.n	8007910 <UART_AdvFeatureConfig+0x1e8>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007900:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007904:	d004      	beq.n	8007910 <UART_AdvFeatureConfig+0x1e8>
 8007906:	f640 3173 	movw	r1, #2931	; 0xb73
 800790a:	482c      	ldr	r0, [pc, #176]	; (80079bc <UART_AdvFeatureConfig+0x294>)
 800790c:	f7fa fabf 	bl	8001e8e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	430a      	orrs	r2, r1
 8007924:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800792e:	d122      	bne.n	8007976 <UART_AdvFeatureConfig+0x24e>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007934:	2b00      	cmp	r3, #0
 8007936:	d013      	beq.n	8007960 <UART_AdvFeatureConfig+0x238>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800793c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007940:	d00e      	beq.n	8007960 <UART_AdvFeatureConfig+0x238>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800794a:	d009      	beq.n	8007960 <UART_AdvFeatureConfig+0x238>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007950:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007954:	d004      	beq.n	8007960 <UART_AdvFeatureConfig+0x238>
 8007956:	f640 3178 	movw	r1, #2936	; 0xb78
 800795a:	4818      	ldr	r0, [pc, #96]	; (80079bc <UART_AdvFeatureConfig+0x294>)
 800795c:	f7fa fa97 	bl	8001e8e <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	430a      	orrs	r2, r1
 8007974:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800797e:	2b00      	cmp	r3, #0
 8007980:	d018      	beq.n	80079b4 <UART_AdvFeatureConfig+0x28c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007986:	2b00      	cmp	r3, #0
 8007988:	d009      	beq.n	800799e <UART_AdvFeatureConfig+0x276>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800798e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007992:	d004      	beq.n	800799e <UART_AdvFeatureConfig+0x276>
 8007994:	f44f 6138 	mov.w	r1, #2944	; 0xb80
 8007998:	4808      	ldr	r0, [pc, #32]	; (80079bc <UART_AdvFeatureConfig+0x294>)
 800799a:	f7fa fa78 	bl	8001e8e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	430a      	orrs	r2, r1
 80079b2:	605a      	str	r2, [r3, #4]
  }
}
 80079b4:	bf00      	nop
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	080087cc 	.word	0x080087cc
 80079c0:	40011000 	.word	0x40011000
 80079c4:	40004400 	.word	0x40004400
 80079c8:	40004800 	.word	0x40004800
 80079cc:	40011400 	.word	0x40011400

080079d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af02      	add	r7, sp, #8
 80079d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80079de:	f7fb f82f 	bl	8002a40 <HAL_GetTick>
 80079e2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0308 	and.w	r3, r3, #8
 80079ee:	2b08      	cmp	r3, #8
 80079f0:	d10e      	bne.n	8007a10 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f82a 	bl	8007a5a <UART_WaitOnFlagUntilTimeout>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e020      	b.n	8007a52 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 0304 	and.w	r3, r3, #4
 8007a1a:	2b04      	cmp	r3, #4
 8007a1c:	d10e      	bne.n	8007a3c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a1e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f814 	bl	8007a5a <UART_WaitOnFlagUntilTimeout>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e00a      	b.n	8007a52 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2220      	movs	r2, #32
 8007a40:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2220      	movs	r2, #32
 8007a46:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b084      	sub	sp, #16
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	60f8      	str	r0, [r7, #12]
 8007a62:	60b9      	str	r1, [r7, #8]
 8007a64:	603b      	str	r3, [r7, #0]
 8007a66:	4613      	mov	r3, r2
 8007a68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a6a:	e05d      	b.n	8007b28 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a72:	d059      	beq.n	8007b28 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a74:	f7fa ffe4 	bl	8002a40 <HAL_GetTick>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	69ba      	ldr	r2, [r7, #24]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d302      	bcc.n	8007a8a <UART_WaitOnFlagUntilTimeout+0x30>
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d11b      	bne.n	8007ac2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a98:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	689a      	ldr	r2, [r3, #8]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f022 0201 	bic.w	r2, r2, #1
 8007aa8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2220      	movs	r2, #32
 8007aae:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e042      	b.n	8007b48 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0304 	and.w	r3, r3, #4
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d02b      	beq.n	8007b28 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	69db      	ldr	r3, [r3, #28]
 8007ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ade:	d123      	bne.n	8007b28 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ae8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007af8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	689a      	ldr	r2, [r3, #8]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 0201 	bic.w	r2, r2, #1
 8007b08:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2220      	movs	r2, #32
 8007b0e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2220      	movs	r2, #32
 8007b14:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2220      	movs	r2, #32
 8007b1a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e00f      	b.n	8007b48 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	69da      	ldr	r2, [r3, #28]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	4013      	ands	r3, r2
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	bf0c      	ite	eq
 8007b38:	2301      	moveq	r3, #1
 8007b3a:	2300      	movne	r3, #0
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	461a      	mov	r2, r3
 8007b40:	79fb      	ldrb	r3, [r7, #7]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d092      	beq.n	8007a6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007b66:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689a      	ldr	r2, [r3, #8]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f022 0201 	bic.w	r2, r2, #1
 8007b76:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2220      	movs	r2, #32
 8007b7c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f7ff fa6a 	bl	8007088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bb4:	bf00      	nop
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bd2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7ff fa47 	bl	8007074 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007be6:	bf00      	nop
 8007be8:	3708      	adds	r7, #8
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
	...

08007bf0 <__errno>:
 8007bf0:	4b01      	ldr	r3, [pc, #4]	; (8007bf8 <__errno+0x8>)
 8007bf2:	6818      	ldr	r0, [r3, #0]
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	2000000c 	.word	0x2000000c

08007bfc <__libc_init_array>:
 8007bfc:	b570      	push	{r4, r5, r6, lr}
 8007bfe:	4e0d      	ldr	r6, [pc, #52]	; (8007c34 <__libc_init_array+0x38>)
 8007c00:	4c0d      	ldr	r4, [pc, #52]	; (8007c38 <__libc_init_array+0x3c>)
 8007c02:	1ba4      	subs	r4, r4, r6
 8007c04:	10a4      	asrs	r4, r4, #2
 8007c06:	2500      	movs	r5, #0
 8007c08:	42a5      	cmp	r5, r4
 8007c0a:	d109      	bne.n	8007c20 <__libc_init_array+0x24>
 8007c0c:	4e0b      	ldr	r6, [pc, #44]	; (8007c3c <__libc_init_array+0x40>)
 8007c0e:	4c0c      	ldr	r4, [pc, #48]	; (8007c40 <__libc_init_array+0x44>)
 8007c10:	f000 fc28 	bl	8008464 <_init>
 8007c14:	1ba4      	subs	r4, r4, r6
 8007c16:	10a4      	asrs	r4, r4, #2
 8007c18:	2500      	movs	r5, #0
 8007c1a:	42a5      	cmp	r5, r4
 8007c1c:	d105      	bne.n	8007c2a <__libc_init_array+0x2e>
 8007c1e:	bd70      	pop	{r4, r5, r6, pc}
 8007c20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c24:	4798      	blx	r3
 8007c26:	3501      	adds	r5, #1
 8007c28:	e7ee      	b.n	8007c08 <__libc_init_array+0xc>
 8007c2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c2e:	4798      	blx	r3
 8007c30:	3501      	adds	r5, #1
 8007c32:	e7f2      	b.n	8007c1a <__libc_init_array+0x1e>
 8007c34:	0800885c 	.word	0x0800885c
 8007c38:	0800885c 	.word	0x0800885c
 8007c3c:	0800885c 	.word	0x0800885c
 8007c40:	08008860 	.word	0x08008860

08007c44 <memcpy>:
 8007c44:	b510      	push	{r4, lr}
 8007c46:	1e43      	subs	r3, r0, #1
 8007c48:	440a      	add	r2, r1
 8007c4a:	4291      	cmp	r1, r2
 8007c4c:	d100      	bne.n	8007c50 <memcpy+0xc>
 8007c4e:	bd10      	pop	{r4, pc}
 8007c50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c58:	e7f7      	b.n	8007c4a <memcpy+0x6>

08007c5a <memset>:
 8007c5a:	4402      	add	r2, r0
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d100      	bne.n	8007c64 <memset+0xa>
 8007c62:	4770      	bx	lr
 8007c64:	f803 1b01 	strb.w	r1, [r3], #1
 8007c68:	e7f9      	b.n	8007c5e <memset+0x4>
	...

08007c6c <siprintf>:
 8007c6c:	b40e      	push	{r1, r2, r3}
 8007c6e:	b500      	push	{lr}
 8007c70:	b09c      	sub	sp, #112	; 0x70
 8007c72:	ab1d      	add	r3, sp, #116	; 0x74
 8007c74:	9002      	str	r0, [sp, #8]
 8007c76:	9006      	str	r0, [sp, #24]
 8007c78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c7c:	4809      	ldr	r0, [pc, #36]	; (8007ca4 <siprintf+0x38>)
 8007c7e:	9107      	str	r1, [sp, #28]
 8007c80:	9104      	str	r1, [sp, #16]
 8007c82:	4909      	ldr	r1, [pc, #36]	; (8007ca8 <siprintf+0x3c>)
 8007c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c88:	9105      	str	r1, [sp, #20]
 8007c8a:	6800      	ldr	r0, [r0, #0]
 8007c8c:	9301      	str	r3, [sp, #4]
 8007c8e:	a902      	add	r1, sp, #8
 8007c90:	f000 f866 	bl	8007d60 <_svfiprintf_r>
 8007c94:	9b02      	ldr	r3, [sp, #8]
 8007c96:	2200      	movs	r2, #0
 8007c98:	701a      	strb	r2, [r3, #0]
 8007c9a:	b01c      	add	sp, #112	; 0x70
 8007c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ca0:	b003      	add	sp, #12
 8007ca2:	4770      	bx	lr
 8007ca4:	2000000c 	.word	0x2000000c
 8007ca8:	ffff0208 	.word	0xffff0208

08007cac <__ssputs_r>:
 8007cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cb0:	688e      	ldr	r6, [r1, #8]
 8007cb2:	429e      	cmp	r6, r3
 8007cb4:	4682      	mov	sl, r0
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	4690      	mov	r8, r2
 8007cba:	4699      	mov	r9, r3
 8007cbc:	d837      	bhi.n	8007d2e <__ssputs_r+0x82>
 8007cbe:	898a      	ldrh	r2, [r1, #12]
 8007cc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007cc4:	d031      	beq.n	8007d2a <__ssputs_r+0x7e>
 8007cc6:	6825      	ldr	r5, [r4, #0]
 8007cc8:	6909      	ldr	r1, [r1, #16]
 8007cca:	1a6f      	subs	r7, r5, r1
 8007ccc:	6965      	ldr	r5, [r4, #20]
 8007cce:	2302      	movs	r3, #2
 8007cd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cd4:	fb95 f5f3 	sdiv	r5, r5, r3
 8007cd8:	f109 0301 	add.w	r3, r9, #1
 8007cdc:	443b      	add	r3, r7
 8007cde:	429d      	cmp	r5, r3
 8007ce0:	bf38      	it	cc
 8007ce2:	461d      	movcc	r5, r3
 8007ce4:	0553      	lsls	r3, r2, #21
 8007ce6:	d530      	bpl.n	8007d4a <__ssputs_r+0x9e>
 8007ce8:	4629      	mov	r1, r5
 8007cea:	f000 fb21 	bl	8008330 <_malloc_r>
 8007cee:	4606      	mov	r6, r0
 8007cf0:	b950      	cbnz	r0, 8007d08 <__ssputs_r+0x5c>
 8007cf2:	230c      	movs	r3, #12
 8007cf4:	f8ca 3000 	str.w	r3, [sl]
 8007cf8:	89a3      	ldrh	r3, [r4, #12]
 8007cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cfe:	81a3      	strh	r3, [r4, #12]
 8007d00:	f04f 30ff 	mov.w	r0, #4294967295
 8007d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d08:	463a      	mov	r2, r7
 8007d0a:	6921      	ldr	r1, [r4, #16]
 8007d0c:	f7ff ff9a 	bl	8007c44 <memcpy>
 8007d10:	89a3      	ldrh	r3, [r4, #12]
 8007d12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d1a:	81a3      	strh	r3, [r4, #12]
 8007d1c:	6126      	str	r6, [r4, #16]
 8007d1e:	6165      	str	r5, [r4, #20]
 8007d20:	443e      	add	r6, r7
 8007d22:	1bed      	subs	r5, r5, r7
 8007d24:	6026      	str	r6, [r4, #0]
 8007d26:	60a5      	str	r5, [r4, #8]
 8007d28:	464e      	mov	r6, r9
 8007d2a:	454e      	cmp	r6, r9
 8007d2c:	d900      	bls.n	8007d30 <__ssputs_r+0x84>
 8007d2e:	464e      	mov	r6, r9
 8007d30:	4632      	mov	r2, r6
 8007d32:	4641      	mov	r1, r8
 8007d34:	6820      	ldr	r0, [r4, #0]
 8007d36:	f000 fa93 	bl	8008260 <memmove>
 8007d3a:	68a3      	ldr	r3, [r4, #8]
 8007d3c:	1b9b      	subs	r3, r3, r6
 8007d3e:	60a3      	str	r3, [r4, #8]
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	441e      	add	r6, r3
 8007d44:	6026      	str	r6, [r4, #0]
 8007d46:	2000      	movs	r0, #0
 8007d48:	e7dc      	b.n	8007d04 <__ssputs_r+0x58>
 8007d4a:	462a      	mov	r2, r5
 8007d4c:	f000 fb4a 	bl	80083e4 <_realloc_r>
 8007d50:	4606      	mov	r6, r0
 8007d52:	2800      	cmp	r0, #0
 8007d54:	d1e2      	bne.n	8007d1c <__ssputs_r+0x70>
 8007d56:	6921      	ldr	r1, [r4, #16]
 8007d58:	4650      	mov	r0, sl
 8007d5a:	f000 fa9b 	bl	8008294 <_free_r>
 8007d5e:	e7c8      	b.n	8007cf2 <__ssputs_r+0x46>

08007d60 <_svfiprintf_r>:
 8007d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d64:	461d      	mov	r5, r3
 8007d66:	898b      	ldrh	r3, [r1, #12]
 8007d68:	061f      	lsls	r7, r3, #24
 8007d6a:	b09d      	sub	sp, #116	; 0x74
 8007d6c:	4680      	mov	r8, r0
 8007d6e:	460c      	mov	r4, r1
 8007d70:	4616      	mov	r6, r2
 8007d72:	d50f      	bpl.n	8007d94 <_svfiprintf_r+0x34>
 8007d74:	690b      	ldr	r3, [r1, #16]
 8007d76:	b96b      	cbnz	r3, 8007d94 <_svfiprintf_r+0x34>
 8007d78:	2140      	movs	r1, #64	; 0x40
 8007d7a:	f000 fad9 	bl	8008330 <_malloc_r>
 8007d7e:	6020      	str	r0, [r4, #0]
 8007d80:	6120      	str	r0, [r4, #16]
 8007d82:	b928      	cbnz	r0, 8007d90 <_svfiprintf_r+0x30>
 8007d84:	230c      	movs	r3, #12
 8007d86:	f8c8 3000 	str.w	r3, [r8]
 8007d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d8e:	e0c8      	b.n	8007f22 <_svfiprintf_r+0x1c2>
 8007d90:	2340      	movs	r3, #64	; 0x40
 8007d92:	6163      	str	r3, [r4, #20]
 8007d94:	2300      	movs	r3, #0
 8007d96:	9309      	str	r3, [sp, #36]	; 0x24
 8007d98:	2320      	movs	r3, #32
 8007d9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d9e:	2330      	movs	r3, #48	; 0x30
 8007da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007da4:	9503      	str	r5, [sp, #12]
 8007da6:	f04f 0b01 	mov.w	fp, #1
 8007daa:	4637      	mov	r7, r6
 8007dac:	463d      	mov	r5, r7
 8007dae:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007db2:	b10b      	cbz	r3, 8007db8 <_svfiprintf_r+0x58>
 8007db4:	2b25      	cmp	r3, #37	; 0x25
 8007db6:	d13e      	bne.n	8007e36 <_svfiprintf_r+0xd6>
 8007db8:	ebb7 0a06 	subs.w	sl, r7, r6
 8007dbc:	d00b      	beq.n	8007dd6 <_svfiprintf_r+0x76>
 8007dbe:	4653      	mov	r3, sl
 8007dc0:	4632      	mov	r2, r6
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	4640      	mov	r0, r8
 8007dc6:	f7ff ff71 	bl	8007cac <__ssputs_r>
 8007dca:	3001      	adds	r0, #1
 8007dcc:	f000 80a4 	beq.w	8007f18 <_svfiprintf_r+0x1b8>
 8007dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dd2:	4453      	add	r3, sl
 8007dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8007dd6:	783b      	ldrb	r3, [r7, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 809d 	beq.w	8007f18 <_svfiprintf_r+0x1b8>
 8007dde:	2300      	movs	r3, #0
 8007de0:	f04f 32ff 	mov.w	r2, #4294967295
 8007de4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007de8:	9304      	str	r3, [sp, #16]
 8007dea:	9307      	str	r3, [sp, #28]
 8007dec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007df0:	931a      	str	r3, [sp, #104]	; 0x68
 8007df2:	462f      	mov	r7, r5
 8007df4:	2205      	movs	r2, #5
 8007df6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007dfa:	4850      	ldr	r0, [pc, #320]	; (8007f3c <_svfiprintf_r+0x1dc>)
 8007dfc:	f7f8 fa28 	bl	8000250 <memchr>
 8007e00:	9b04      	ldr	r3, [sp, #16]
 8007e02:	b9d0      	cbnz	r0, 8007e3a <_svfiprintf_r+0xda>
 8007e04:	06d9      	lsls	r1, r3, #27
 8007e06:	bf44      	itt	mi
 8007e08:	2220      	movmi	r2, #32
 8007e0a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007e0e:	071a      	lsls	r2, r3, #28
 8007e10:	bf44      	itt	mi
 8007e12:	222b      	movmi	r2, #43	; 0x2b
 8007e14:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007e18:	782a      	ldrb	r2, [r5, #0]
 8007e1a:	2a2a      	cmp	r2, #42	; 0x2a
 8007e1c:	d015      	beq.n	8007e4a <_svfiprintf_r+0xea>
 8007e1e:	9a07      	ldr	r2, [sp, #28]
 8007e20:	462f      	mov	r7, r5
 8007e22:	2000      	movs	r0, #0
 8007e24:	250a      	movs	r5, #10
 8007e26:	4639      	mov	r1, r7
 8007e28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e2c:	3b30      	subs	r3, #48	; 0x30
 8007e2e:	2b09      	cmp	r3, #9
 8007e30:	d94d      	bls.n	8007ece <_svfiprintf_r+0x16e>
 8007e32:	b1b8      	cbz	r0, 8007e64 <_svfiprintf_r+0x104>
 8007e34:	e00f      	b.n	8007e56 <_svfiprintf_r+0xf6>
 8007e36:	462f      	mov	r7, r5
 8007e38:	e7b8      	b.n	8007dac <_svfiprintf_r+0x4c>
 8007e3a:	4a40      	ldr	r2, [pc, #256]	; (8007f3c <_svfiprintf_r+0x1dc>)
 8007e3c:	1a80      	subs	r0, r0, r2
 8007e3e:	fa0b f000 	lsl.w	r0, fp, r0
 8007e42:	4318      	orrs	r0, r3
 8007e44:	9004      	str	r0, [sp, #16]
 8007e46:	463d      	mov	r5, r7
 8007e48:	e7d3      	b.n	8007df2 <_svfiprintf_r+0x92>
 8007e4a:	9a03      	ldr	r2, [sp, #12]
 8007e4c:	1d11      	adds	r1, r2, #4
 8007e4e:	6812      	ldr	r2, [r2, #0]
 8007e50:	9103      	str	r1, [sp, #12]
 8007e52:	2a00      	cmp	r2, #0
 8007e54:	db01      	blt.n	8007e5a <_svfiprintf_r+0xfa>
 8007e56:	9207      	str	r2, [sp, #28]
 8007e58:	e004      	b.n	8007e64 <_svfiprintf_r+0x104>
 8007e5a:	4252      	negs	r2, r2
 8007e5c:	f043 0302 	orr.w	r3, r3, #2
 8007e60:	9207      	str	r2, [sp, #28]
 8007e62:	9304      	str	r3, [sp, #16]
 8007e64:	783b      	ldrb	r3, [r7, #0]
 8007e66:	2b2e      	cmp	r3, #46	; 0x2e
 8007e68:	d10c      	bne.n	8007e84 <_svfiprintf_r+0x124>
 8007e6a:	787b      	ldrb	r3, [r7, #1]
 8007e6c:	2b2a      	cmp	r3, #42	; 0x2a
 8007e6e:	d133      	bne.n	8007ed8 <_svfiprintf_r+0x178>
 8007e70:	9b03      	ldr	r3, [sp, #12]
 8007e72:	1d1a      	adds	r2, r3, #4
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	9203      	str	r2, [sp, #12]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	bfb8      	it	lt
 8007e7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e80:	3702      	adds	r7, #2
 8007e82:	9305      	str	r3, [sp, #20]
 8007e84:	4d2e      	ldr	r5, [pc, #184]	; (8007f40 <_svfiprintf_r+0x1e0>)
 8007e86:	7839      	ldrb	r1, [r7, #0]
 8007e88:	2203      	movs	r2, #3
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	f7f8 f9e0 	bl	8000250 <memchr>
 8007e90:	b138      	cbz	r0, 8007ea2 <_svfiprintf_r+0x142>
 8007e92:	2340      	movs	r3, #64	; 0x40
 8007e94:	1b40      	subs	r0, r0, r5
 8007e96:	fa03 f000 	lsl.w	r0, r3, r0
 8007e9a:	9b04      	ldr	r3, [sp, #16]
 8007e9c:	4303      	orrs	r3, r0
 8007e9e:	3701      	adds	r7, #1
 8007ea0:	9304      	str	r3, [sp, #16]
 8007ea2:	7839      	ldrb	r1, [r7, #0]
 8007ea4:	4827      	ldr	r0, [pc, #156]	; (8007f44 <_svfiprintf_r+0x1e4>)
 8007ea6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eaa:	2206      	movs	r2, #6
 8007eac:	1c7e      	adds	r6, r7, #1
 8007eae:	f7f8 f9cf 	bl	8000250 <memchr>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	d038      	beq.n	8007f28 <_svfiprintf_r+0x1c8>
 8007eb6:	4b24      	ldr	r3, [pc, #144]	; (8007f48 <_svfiprintf_r+0x1e8>)
 8007eb8:	bb13      	cbnz	r3, 8007f00 <_svfiprintf_r+0x1a0>
 8007eba:	9b03      	ldr	r3, [sp, #12]
 8007ebc:	3307      	adds	r3, #7
 8007ebe:	f023 0307 	bic.w	r3, r3, #7
 8007ec2:	3308      	adds	r3, #8
 8007ec4:	9303      	str	r3, [sp, #12]
 8007ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec8:	444b      	add	r3, r9
 8007eca:	9309      	str	r3, [sp, #36]	; 0x24
 8007ecc:	e76d      	b.n	8007daa <_svfiprintf_r+0x4a>
 8007ece:	fb05 3202 	mla	r2, r5, r2, r3
 8007ed2:	2001      	movs	r0, #1
 8007ed4:	460f      	mov	r7, r1
 8007ed6:	e7a6      	b.n	8007e26 <_svfiprintf_r+0xc6>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	3701      	adds	r7, #1
 8007edc:	9305      	str	r3, [sp, #20]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	250a      	movs	r5, #10
 8007ee2:	4638      	mov	r0, r7
 8007ee4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ee8:	3a30      	subs	r2, #48	; 0x30
 8007eea:	2a09      	cmp	r2, #9
 8007eec:	d903      	bls.n	8007ef6 <_svfiprintf_r+0x196>
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d0c8      	beq.n	8007e84 <_svfiprintf_r+0x124>
 8007ef2:	9105      	str	r1, [sp, #20]
 8007ef4:	e7c6      	b.n	8007e84 <_svfiprintf_r+0x124>
 8007ef6:	fb05 2101 	mla	r1, r5, r1, r2
 8007efa:	2301      	movs	r3, #1
 8007efc:	4607      	mov	r7, r0
 8007efe:	e7f0      	b.n	8007ee2 <_svfiprintf_r+0x182>
 8007f00:	ab03      	add	r3, sp, #12
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	4622      	mov	r2, r4
 8007f06:	4b11      	ldr	r3, [pc, #68]	; (8007f4c <_svfiprintf_r+0x1ec>)
 8007f08:	a904      	add	r1, sp, #16
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	f3af 8000 	nop.w
 8007f10:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007f14:	4681      	mov	r9, r0
 8007f16:	d1d6      	bne.n	8007ec6 <_svfiprintf_r+0x166>
 8007f18:	89a3      	ldrh	r3, [r4, #12]
 8007f1a:	065b      	lsls	r3, r3, #25
 8007f1c:	f53f af35 	bmi.w	8007d8a <_svfiprintf_r+0x2a>
 8007f20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f22:	b01d      	add	sp, #116	; 0x74
 8007f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f28:	ab03      	add	r3, sp, #12
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	4622      	mov	r2, r4
 8007f2e:	4b07      	ldr	r3, [pc, #28]	; (8007f4c <_svfiprintf_r+0x1ec>)
 8007f30:	a904      	add	r1, sp, #16
 8007f32:	4640      	mov	r0, r8
 8007f34:	f000 f882 	bl	800803c <_printf_i>
 8007f38:	e7ea      	b.n	8007f10 <_svfiprintf_r+0x1b0>
 8007f3a:	bf00      	nop
 8007f3c:	08008820 	.word	0x08008820
 8007f40:	08008826 	.word	0x08008826
 8007f44:	0800882a 	.word	0x0800882a
 8007f48:	00000000 	.word	0x00000000
 8007f4c:	08007cad 	.word	0x08007cad

08007f50 <_printf_common>:
 8007f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f54:	4691      	mov	r9, r2
 8007f56:	461f      	mov	r7, r3
 8007f58:	688a      	ldr	r2, [r1, #8]
 8007f5a:	690b      	ldr	r3, [r1, #16]
 8007f5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f60:	4293      	cmp	r3, r2
 8007f62:	bfb8      	it	lt
 8007f64:	4613      	movlt	r3, r2
 8007f66:	f8c9 3000 	str.w	r3, [r9]
 8007f6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f6e:	4606      	mov	r6, r0
 8007f70:	460c      	mov	r4, r1
 8007f72:	b112      	cbz	r2, 8007f7a <_printf_common+0x2a>
 8007f74:	3301      	adds	r3, #1
 8007f76:	f8c9 3000 	str.w	r3, [r9]
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	0699      	lsls	r1, r3, #26
 8007f7e:	bf42      	ittt	mi
 8007f80:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007f84:	3302      	addmi	r3, #2
 8007f86:	f8c9 3000 	strmi.w	r3, [r9]
 8007f8a:	6825      	ldr	r5, [r4, #0]
 8007f8c:	f015 0506 	ands.w	r5, r5, #6
 8007f90:	d107      	bne.n	8007fa2 <_printf_common+0x52>
 8007f92:	f104 0a19 	add.w	sl, r4, #25
 8007f96:	68e3      	ldr	r3, [r4, #12]
 8007f98:	f8d9 2000 	ldr.w	r2, [r9]
 8007f9c:	1a9b      	subs	r3, r3, r2
 8007f9e:	42ab      	cmp	r3, r5
 8007fa0:	dc28      	bgt.n	8007ff4 <_printf_common+0xa4>
 8007fa2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007fa6:	6822      	ldr	r2, [r4, #0]
 8007fa8:	3300      	adds	r3, #0
 8007faa:	bf18      	it	ne
 8007fac:	2301      	movne	r3, #1
 8007fae:	0692      	lsls	r2, r2, #26
 8007fb0:	d42d      	bmi.n	800800e <_printf_common+0xbe>
 8007fb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fb6:	4639      	mov	r1, r7
 8007fb8:	4630      	mov	r0, r6
 8007fba:	47c0      	blx	r8
 8007fbc:	3001      	adds	r0, #1
 8007fbe:	d020      	beq.n	8008002 <_printf_common+0xb2>
 8007fc0:	6823      	ldr	r3, [r4, #0]
 8007fc2:	68e5      	ldr	r5, [r4, #12]
 8007fc4:	f8d9 2000 	ldr.w	r2, [r9]
 8007fc8:	f003 0306 	and.w	r3, r3, #6
 8007fcc:	2b04      	cmp	r3, #4
 8007fce:	bf08      	it	eq
 8007fd0:	1aad      	subeq	r5, r5, r2
 8007fd2:	68a3      	ldr	r3, [r4, #8]
 8007fd4:	6922      	ldr	r2, [r4, #16]
 8007fd6:	bf0c      	ite	eq
 8007fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fdc:	2500      	movne	r5, #0
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	bfc4      	itt	gt
 8007fe2:	1a9b      	subgt	r3, r3, r2
 8007fe4:	18ed      	addgt	r5, r5, r3
 8007fe6:	f04f 0900 	mov.w	r9, #0
 8007fea:	341a      	adds	r4, #26
 8007fec:	454d      	cmp	r5, r9
 8007fee:	d11a      	bne.n	8008026 <_printf_common+0xd6>
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	e008      	b.n	8008006 <_printf_common+0xb6>
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	4652      	mov	r2, sl
 8007ff8:	4639      	mov	r1, r7
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	47c0      	blx	r8
 8007ffe:	3001      	adds	r0, #1
 8008000:	d103      	bne.n	800800a <_printf_common+0xba>
 8008002:	f04f 30ff 	mov.w	r0, #4294967295
 8008006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800800a:	3501      	adds	r5, #1
 800800c:	e7c3      	b.n	8007f96 <_printf_common+0x46>
 800800e:	18e1      	adds	r1, r4, r3
 8008010:	1c5a      	adds	r2, r3, #1
 8008012:	2030      	movs	r0, #48	; 0x30
 8008014:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008018:	4422      	add	r2, r4
 800801a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800801e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008022:	3302      	adds	r3, #2
 8008024:	e7c5      	b.n	8007fb2 <_printf_common+0x62>
 8008026:	2301      	movs	r3, #1
 8008028:	4622      	mov	r2, r4
 800802a:	4639      	mov	r1, r7
 800802c:	4630      	mov	r0, r6
 800802e:	47c0      	blx	r8
 8008030:	3001      	adds	r0, #1
 8008032:	d0e6      	beq.n	8008002 <_printf_common+0xb2>
 8008034:	f109 0901 	add.w	r9, r9, #1
 8008038:	e7d8      	b.n	8007fec <_printf_common+0x9c>
	...

0800803c <_printf_i>:
 800803c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008040:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008044:	460c      	mov	r4, r1
 8008046:	7e09      	ldrb	r1, [r1, #24]
 8008048:	b085      	sub	sp, #20
 800804a:	296e      	cmp	r1, #110	; 0x6e
 800804c:	4617      	mov	r7, r2
 800804e:	4606      	mov	r6, r0
 8008050:	4698      	mov	r8, r3
 8008052:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008054:	f000 80b3 	beq.w	80081be <_printf_i+0x182>
 8008058:	d822      	bhi.n	80080a0 <_printf_i+0x64>
 800805a:	2963      	cmp	r1, #99	; 0x63
 800805c:	d036      	beq.n	80080cc <_printf_i+0x90>
 800805e:	d80a      	bhi.n	8008076 <_printf_i+0x3a>
 8008060:	2900      	cmp	r1, #0
 8008062:	f000 80b9 	beq.w	80081d8 <_printf_i+0x19c>
 8008066:	2958      	cmp	r1, #88	; 0x58
 8008068:	f000 8083 	beq.w	8008172 <_printf_i+0x136>
 800806c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008070:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008074:	e032      	b.n	80080dc <_printf_i+0xa0>
 8008076:	2964      	cmp	r1, #100	; 0x64
 8008078:	d001      	beq.n	800807e <_printf_i+0x42>
 800807a:	2969      	cmp	r1, #105	; 0x69
 800807c:	d1f6      	bne.n	800806c <_printf_i+0x30>
 800807e:	6820      	ldr	r0, [r4, #0]
 8008080:	6813      	ldr	r3, [r2, #0]
 8008082:	0605      	lsls	r5, r0, #24
 8008084:	f103 0104 	add.w	r1, r3, #4
 8008088:	d52a      	bpl.n	80080e0 <_printf_i+0xa4>
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	6011      	str	r1, [r2, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	da03      	bge.n	800809a <_printf_i+0x5e>
 8008092:	222d      	movs	r2, #45	; 0x2d
 8008094:	425b      	negs	r3, r3
 8008096:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800809a:	486f      	ldr	r0, [pc, #444]	; (8008258 <_printf_i+0x21c>)
 800809c:	220a      	movs	r2, #10
 800809e:	e039      	b.n	8008114 <_printf_i+0xd8>
 80080a0:	2973      	cmp	r1, #115	; 0x73
 80080a2:	f000 809d 	beq.w	80081e0 <_printf_i+0x1a4>
 80080a6:	d808      	bhi.n	80080ba <_printf_i+0x7e>
 80080a8:	296f      	cmp	r1, #111	; 0x6f
 80080aa:	d020      	beq.n	80080ee <_printf_i+0xb2>
 80080ac:	2970      	cmp	r1, #112	; 0x70
 80080ae:	d1dd      	bne.n	800806c <_printf_i+0x30>
 80080b0:	6823      	ldr	r3, [r4, #0]
 80080b2:	f043 0320 	orr.w	r3, r3, #32
 80080b6:	6023      	str	r3, [r4, #0]
 80080b8:	e003      	b.n	80080c2 <_printf_i+0x86>
 80080ba:	2975      	cmp	r1, #117	; 0x75
 80080bc:	d017      	beq.n	80080ee <_printf_i+0xb2>
 80080be:	2978      	cmp	r1, #120	; 0x78
 80080c0:	d1d4      	bne.n	800806c <_printf_i+0x30>
 80080c2:	2378      	movs	r3, #120	; 0x78
 80080c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080c8:	4864      	ldr	r0, [pc, #400]	; (800825c <_printf_i+0x220>)
 80080ca:	e055      	b.n	8008178 <_printf_i+0x13c>
 80080cc:	6813      	ldr	r3, [r2, #0]
 80080ce:	1d19      	adds	r1, r3, #4
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6011      	str	r1, [r2, #0]
 80080d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080dc:	2301      	movs	r3, #1
 80080de:	e08c      	b.n	80081fa <_printf_i+0x1be>
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	6011      	str	r1, [r2, #0]
 80080e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80080e8:	bf18      	it	ne
 80080ea:	b21b      	sxthne	r3, r3
 80080ec:	e7cf      	b.n	800808e <_printf_i+0x52>
 80080ee:	6813      	ldr	r3, [r2, #0]
 80080f0:	6825      	ldr	r5, [r4, #0]
 80080f2:	1d18      	adds	r0, r3, #4
 80080f4:	6010      	str	r0, [r2, #0]
 80080f6:	0628      	lsls	r0, r5, #24
 80080f8:	d501      	bpl.n	80080fe <_printf_i+0xc2>
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	e002      	b.n	8008104 <_printf_i+0xc8>
 80080fe:	0668      	lsls	r0, r5, #25
 8008100:	d5fb      	bpl.n	80080fa <_printf_i+0xbe>
 8008102:	881b      	ldrh	r3, [r3, #0]
 8008104:	4854      	ldr	r0, [pc, #336]	; (8008258 <_printf_i+0x21c>)
 8008106:	296f      	cmp	r1, #111	; 0x6f
 8008108:	bf14      	ite	ne
 800810a:	220a      	movne	r2, #10
 800810c:	2208      	moveq	r2, #8
 800810e:	2100      	movs	r1, #0
 8008110:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008114:	6865      	ldr	r5, [r4, #4]
 8008116:	60a5      	str	r5, [r4, #8]
 8008118:	2d00      	cmp	r5, #0
 800811a:	f2c0 8095 	blt.w	8008248 <_printf_i+0x20c>
 800811e:	6821      	ldr	r1, [r4, #0]
 8008120:	f021 0104 	bic.w	r1, r1, #4
 8008124:	6021      	str	r1, [r4, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d13d      	bne.n	80081a6 <_printf_i+0x16a>
 800812a:	2d00      	cmp	r5, #0
 800812c:	f040 808e 	bne.w	800824c <_printf_i+0x210>
 8008130:	4665      	mov	r5, ip
 8008132:	2a08      	cmp	r2, #8
 8008134:	d10b      	bne.n	800814e <_printf_i+0x112>
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	07db      	lsls	r3, r3, #31
 800813a:	d508      	bpl.n	800814e <_printf_i+0x112>
 800813c:	6923      	ldr	r3, [r4, #16]
 800813e:	6862      	ldr	r2, [r4, #4]
 8008140:	429a      	cmp	r2, r3
 8008142:	bfde      	ittt	le
 8008144:	2330      	movle	r3, #48	; 0x30
 8008146:	f805 3c01 	strble.w	r3, [r5, #-1]
 800814a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800814e:	ebac 0305 	sub.w	r3, ip, r5
 8008152:	6123      	str	r3, [r4, #16]
 8008154:	f8cd 8000 	str.w	r8, [sp]
 8008158:	463b      	mov	r3, r7
 800815a:	aa03      	add	r2, sp, #12
 800815c:	4621      	mov	r1, r4
 800815e:	4630      	mov	r0, r6
 8008160:	f7ff fef6 	bl	8007f50 <_printf_common>
 8008164:	3001      	adds	r0, #1
 8008166:	d14d      	bne.n	8008204 <_printf_i+0x1c8>
 8008168:	f04f 30ff 	mov.w	r0, #4294967295
 800816c:	b005      	add	sp, #20
 800816e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008172:	4839      	ldr	r0, [pc, #228]	; (8008258 <_printf_i+0x21c>)
 8008174:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008178:	6813      	ldr	r3, [r2, #0]
 800817a:	6821      	ldr	r1, [r4, #0]
 800817c:	1d1d      	adds	r5, r3, #4
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6015      	str	r5, [r2, #0]
 8008182:	060a      	lsls	r2, r1, #24
 8008184:	d50b      	bpl.n	800819e <_printf_i+0x162>
 8008186:	07ca      	lsls	r2, r1, #31
 8008188:	bf44      	itt	mi
 800818a:	f041 0120 	orrmi.w	r1, r1, #32
 800818e:	6021      	strmi	r1, [r4, #0]
 8008190:	b91b      	cbnz	r3, 800819a <_printf_i+0x15e>
 8008192:	6822      	ldr	r2, [r4, #0]
 8008194:	f022 0220 	bic.w	r2, r2, #32
 8008198:	6022      	str	r2, [r4, #0]
 800819a:	2210      	movs	r2, #16
 800819c:	e7b7      	b.n	800810e <_printf_i+0xd2>
 800819e:	064d      	lsls	r5, r1, #25
 80081a0:	bf48      	it	mi
 80081a2:	b29b      	uxthmi	r3, r3
 80081a4:	e7ef      	b.n	8008186 <_printf_i+0x14a>
 80081a6:	4665      	mov	r5, ip
 80081a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80081ac:	fb02 3311 	mls	r3, r2, r1, r3
 80081b0:	5cc3      	ldrb	r3, [r0, r3]
 80081b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80081b6:	460b      	mov	r3, r1
 80081b8:	2900      	cmp	r1, #0
 80081ba:	d1f5      	bne.n	80081a8 <_printf_i+0x16c>
 80081bc:	e7b9      	b.n	8008132 <_printf_i+0xf6>
 80081be:	6813      	ldr	r3, [r2, #0]
 80081c0:	6825      	ldr	r5, [r4, #0]
 80081c2:	6961      	ldr	r1, [r4, #20]
 80081c4:	1d18      	adds	r0, r3, #4
 80081c6:	6010      	str	r0, [r2, #0]
 80081c8:	0628      	lsls	r0, r5, #24
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	d501      	bpl.n	80081d2 <_printf_i+0x196>
 80081ce:	6019      	str	r1, [r3, #0]
 80081d0:	e002      	b.n	80081d8 <_printf_i+0x19c>
 80081d2:	066a      	lsls	r2, r5, #25
 80081d4:	d5fb      	bpl.n	80081ce <_printf_i+0x192>
 80081d6:	8019      	strh	r1, [r3, #0]
 80081d8:	2300      	movs	r3, #0
 80081da:	6123      	str	r3, [r4, #16]
 80081dc:	4665      	mov	r5, ip
 80081de:	e7b9      	b.n	8008154 <_printf_i+0x118>
 80081e0:	6813      	ldr	r3, [r2, #0]
 80081e2:	1d19      	adds	r1, r3, #4
 80081e4:	6011      	str	r1, [r2, #0]
 80081e6:	681d      	ldr	r5, [r3, #0]
 80081e8:	6862      	ldr	r2, [r4, #4]
 80081ea:	2100      	movs	r1, #0
 80081ec:	4628      	mov	r0, r5
 80081ee:	f7f8 f82f 	bl	8000250 <memchr>
 80081f2:	b108      	cbz	r0, 80081f8 <_printf_i+0x1bc>
 80081f4:	1b40      	subs	r0, r0, r5
 80081f6:	6060      	str	r0, [r4, #4]
 80081f8:	6863      	ldr	r3, [r4, #4]
 80081fa:	6123      	str	r3, [r4, #16]
 80081fc:	2300      	movs	r3, #0
 80081fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008202:	e7a7      	b.n	8008154 <_printf_i+0x118>
 8008204:	6923      	ldr	r3, [r4, #16]
 8008206:	462a      	mov	r2, r5
 8008208:	4639      	mov	r1, r7
 800820a:	4630      	mov	r0, r6
 800820c:	47c0      	blx	r8
 800820e:	3001      	adds	r0, #1
 8008210:	d0aa      	beq.n	8008168 <_printf_i+0x12c>
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	079b      	lsls	r3, r3, #30
 8008216:	d413      	bmi.n	8008240 <_printf_i+0x204>
 8008218:	68e0      	ldr	r0, [r4, #12]
 800821a:	9b03      	ldr	r3, [sp, #12]
 800821c:	4298      	cmp	r0, r3
 800821e:	bfb8      	it	lt
 8008220:	4618      	movlt	r0, r3
 8008222:	e7a3      	b.n	800816c <_printf_i+0x130>
 8008224:	2301      	movs	r3, #1
 8008226:	464a      	mov	r2, r9
 8008228:	4639      	mov	r1, r7
 800822a:	4630      	mov	r0, r6
 800822c:	47c0      	blx	r8
 800822e:	3001      	adds	r0, #1
 8008230:	d09a      	beq.n	8008168 <_printf_i+0x12c>
 8008232:	3501      	adds	r5, #1
 8008234:	68e3      	ldr	r3, [r4, #12]
 8008236:	9a03      	ldr	r2, [sp, #12]
 8008238:	1a9b      	subs	r3, r3, r2
 800823a:	42ab      	cmp	r3, r5
 800823c:	dcf2      	bgt.n	8008224 <_printf_i+0x1e8>
 800823e:	e7eb      	b.n	8008218 <_printf_i+0x1dc>
 8008240:	2500      	movs	r5, #0
 8008242:	f104 0919 	add.w	r9, r4, #25
 8008246:	e7f5      	b.n	8008234 <_printf_i+0x1f8>
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1ac      	bne.n	80081a6 <_printf_i+0x16a>
 800824c:	7803      	ldrb	r3, [r0, #0]
 800824e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008252:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008256:	e76c      	b.n	8008132 <_printf_i+0xf6>
 8008258:	08008831 	.word	0x08008831
 800825c:	08008842 	.word	0x08008842

08008260 <memmove>:
 8008260:	4288      	cmp	r0, r1
 8008262:	b510      	push	{r4, lr}
 8008264:	eb01 0302 	add.w	r3, r1, r2
 8008268:	d807      	bhi.n	800827a <memmove+0x1a>
 800826a:	1e42      	subs	r2, r0, #1
 800826c:	4299      	cmp	r1, r3
 800826e:	d00a      	beq.n	8008286 <memmove+0x26>
 8008270:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008274:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008278:	e7f8      	b.n	800826c <memmove+0xc>
 800827a:	4283      	cmp	r3, r0
 800827c:	d9f5      	bls.n	800826a <memmove+0xa>
 800827e:	1881      	adds	r1, r0, r2
 8008280:	1ad2      	subs	r2, r2, r3
 8008282:	42d3      	cmn	r3, r2
 8008284:	d100      	bne.n	8008288 <memmove+0x28>
 8008286:	bd10      	pop	{r4, pc}
 8008288:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800828c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008290:	e7f7      	b.n	8008282 <memmove+0x22>
	...

08008294 <_free_r>:
 8008294:	b538      	push	{r3, r4, r5, lr}
 8008296:	4605      	mov	r5, r0
 8008298:	2900      	cmp	r1, #0
 800829a:	d045      	beq.n	8008328 <_free_r+0x94>
 800829c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082a0:	1f0c      	subs	r4, r1, #4
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	bfb8      	it	lt
 80082a6:	18e4      	addlt	r4, r4, r3
 80082a8:	f000 f8d2 	bl	8008450 <__malloc_lock>
 80082ac:	4a1f      	ldr	r2, [pc, #124]	; (800832c <_free_r+0x98>)
 80082ae:	6813      	ldr	r3, [r2, #0]
 80082b0:	4610      	mov	r0, r2
 80082b2:	b933      	cbnz	r3, 80082c2 <_free_r+0x2e>
 80082b4:	6063      	str	r3, [r4, #4]
 80082b6:	6014      	str	r4, [r2, #0]
 80082b8:	4628      	mov	r0, r5
 80082ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082be:	f000 b8c8 	b.w	8008452 <__malloc_unlock>
 80082c2:	42a3      	cmp	r3, r4
 80082c4:	d90c      	bls.n	80082e0 <_free_r+0x4c>
 80082c6:	6821      	ldr	r1, [r4, #0]
 80082c8:	1862      	adds	r2, r4, r1
 80082ca:	4293      	cmp	r3, r2
 80082cc:	bf04      	itt	eq
 80082ce:	681a      	ldreq	r2, [r3, #0]
 80082d0:	685b      	ldreq	r3, [r3, #4]
 80082d2:	6063      	str	r3, [r4, #4]
 80082d4:	bf04      	itt	eq
 80082d6:	1852      	addeq	r2, r2, r1
 80082d8:	6022      	streq	r2, [r4, #0]
 80082da:	6004      	str	r4, [r0, #0]
 80082dc:	e7ec      	b.n	80082b8 <_free_r+0x24>
 80082de:	4613      	mov	r3, r2
 80082e0:	685a      	ldr	r2, [r3, #4]
 80082e2:	b10a      	cbz	r2, 80082e8 <_free_r+0x54>
 80082e4:	42a2      	cmp	r2, r4
 80082e6:	d9fa      	bls.n	80082de <_free_r+0x4a>
 80082e8:	6819      	ldr	r1, [r3, #0]
 80082ea:	1858      	adds	r0, r3, r1
 80082ec:	42a0      	cmp	r0, r4
 80082ee:	d10b      	bne.n	8008308 <_free_r+0x74>
 80082f0:	6820      	ldr	r0, [r4, #0]
 80082f2:	4401      	add	r1, r0
 80082f4:	1858      	adds	r0, r3, r1
 80082f6:	4282      	cmp	r2, r0
 80082f8:	6019      	str	r1, [r3, #0]
 80082fa:	d1dd      	bne.n	80082b8 <_free_r+0x24>
 80082fc:	6810      	ldr	r0, [r2, #0]
 80082fe:	6852      	ldr	r2, [r2, #4]
 8008300:	605a      	str	r2, [r3, #4]
 8008302:	4401      	add	r1, r0
 8008304:	6019      	str	r1, [r3, #0]
 8008306:	e7d7      	b.n	80082b8 <_free_r+0x24>
 8008308:	d902      	bls.n	8008310 <_free_r+0x7c>
 800830a:	230c      	movs	r3, #12
 800830c:	602b      	str	r3, [r5, #0]
 800830e:	e7d3      	b.n	80082b8 <_free_r+0x24>
 8008310:	6820      	ldr	r0, [r4, #0]
 8008312:	1821      	adds	r1, r4, r0
 8008314:	428a      	cmp	r2, r1
 8008316:	bf04      	itt	eq
 8008318:	6811      	ldreq	r1, [r2, #0]
 800831a:	6852      	ldreq	r2, [r2, #4]
 800831c:	6062      	str	r2, [r4, #4]
 800831e:	bf04      	itt	eq
 8008320:	1809      	addeq	r1, r1, r0
 8008322:	6021      	streq	r1, [r4, #0]
 8008324:	605c      	str	r4, [r3, #4]
 8008326:	e7c7      	b.n	80082b8 <_free_r+0x24>
 8008328:	bd38      	pop	{r3, r4, r5, pc}
 800832a:	bf00      	nop
 800832c:	20000094 	.word	0x20000094

08008330 <_malloc_r>:
 8008330:	b570      	push	{r4, r5, r6, lr}
 8008332:	1ccd      	adds	r5, r1, #3
 8008334:	f025 0503 	bic.w	r5, r5, #3
 8008338:	3508      	adds	r5, #8
 800833a:	2d0c      	cmp	r5, #12
 800833c:	bf38      	it	cc
 800833e:	250c      	movcc	r5, #12
 8008340:	2d00      	cmp	r5, #0
 8008342:	4606      	mov	r6, r0
 8008344:	db01      	blt.n	800834a <_malloc_r+0x1a>
 8008346:	42a9      	cmp	r1, r5
 8008348:	d903      	bls.n	8008352 <_malloc_r+0x22>
 800834a:	230c      	movs	r3, #12
 800834c:	6033      	str	r3, [r6, #0]
 800834e:	2000      	movs	r0, #0
 8008350:	bd70      	pop	{r4, r5, r6, pc}
 8008352:	f000 f87d 	bl	8008450 <__malloc_lock>
 8008356:	4a21      	ldr	r2, [pc, #132]	; (80083dc <_malloc_r+0xac>)
 8008358:	6814      	ldr	r4, [r2, #0]
 800835a:	4621      	mov	r1, r4
 800835c:	b991      	cbnz	r1, 8008384 <_malloc_r+0x54>
 800835e:	4c20      	ldr	r4, [pc, #128]	; (80083e0 <_malloc_r+0xb0>)
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	b91b      	cbnz	r3, 800836c <_malloc_r+0x3c>
 8008364:	4630      	mov	r0, r6
 8008366:	f000 f863 	bl	8008430 <_sbrk_r>
 800836a:	6020      	str	r0, [r4, #0]
 800836c:	4629      	mov	r1, r5
 800836e:	4630      	mov	r0, r6
 8008370:	f000 f85e 	bl	8008430 <_sbrk_r>
 8008374:	1c43      	adds	r3, r0, #1
 8008376:	d124      	bne.n	80083c2 <_malloc_r+0x92>
 8008378:	230c      	movs	r3, #12
 800837a:	6033      	str	r3, [r6, #0]
 800837c:	4630      	mov	r0, r6
 800837e:	f000 f868 	bl	8008452 <__malloc_unlock>
 8008382:	e7e4      	b.n	800834e <_malloc_r+0x1e>
 8008384:	680b      	ldr	r3, [r1, #0]
 8008386:	1b5b      	subs	r3, r3, r5
 8008388:	d418      	bmi.n	80083bc <_malloc_r+0x8c>
 800838a:	2b0b      	cmp	r3, #11
 800838c:	d90f      	bls.n	80083ae <_malloc_r+0x7e>
 800838e:	600b      	str	r3, [r1, #0]
 8008390:	50cd      	str	r5, [r1, r3]
 8008392:	18cc      	adds	r4, r1, r3
 8008394:	4630      	mov	r0, r6
 8008396:	f000 f85c 	bl	8008452 <__malloc_unlock>
 800839a:	f104 000b 	add.w	r0, r4, #11
 800839e:	1d23      	adds	r3, r4, #4
 80083a0:	f020 0007 	bic.w	r0, r0, #7
 80083a4:	1ac3      	subs	r3, r0, r3
 80083a6:	d0d3      	beq.n	8008350 <_malloc_r+0x20>
 80083a8:	425a      	negs	r2, r3
 80083aa:	50e2      	str	r2, [r4, r3]
 80083ac:	e7d0      	b.n	8008350 <_malloc_r+0x20>
 80083ae:	428c      	cmp	r4, r1
 80083b0:	684b      	ldr	r3, [r1, #4]
 80083b2:	bf16      	itet	ne
 80083b4:	6063      	strne	r3, [r4, #4]
 80083b6:	6013      	streq	r3, [r2, #0]
 80083b8:	460c      	movne	r4, r1
 80083ba:	e7eb      	b.n	8008394 <_malloc_r+0x64>
 80083bc:	460c      	mov	r4, r1
 80083be:	6849      	ldr	r1, [r1, #4]
 80083c0:	e7cc      	b.n	800835c <_malloc_r+0x2c>
 80083c2:	1cc4      	adds	r4, r0, #3
 80083c4:	f024 0403 	bic.w	r4, r4, #3
 80083c8:	42a0      	cmp	r0, r4
 80083ca:	d005      	beq.n	80083d8 <_malloc_r+0xa8>
 80083cc:	1a21      	subs	r1, r4, r0
 80083ce:	4630      	mov	r0, r6
 80083d0:	f000 f82e 	bl	8008430 <_sbrk_r>
 80083d4:	3001      	adds	r0, #1
 80083d6:	d0cf      	beq.n	8008378 <_malloc_r+0x48>
 80083d8:	6025      	str	r5, [r4, #0]
 80083da:	e7db      	b.n	8008394 <_malloc_r+0x64>
 80083dc:	20000094 	.word	0x20000094
 80083e0:	20000098 	.word	0x20000098

080083e4 <_realloc_r>:
 80083e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e6:	4607      	mov	r7, r0
 80083e8:	4614      	mov	r4, r2
 80083ea:	460e      	mov	r6, r1
 80083ec:	b921      	cbnz	r1, 80083f8 <_realloc_r+0x14>
 80083ee:	4611      	mov	r1, r2
 80083f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80083f4:	f7ff bf9c 	b.w	8008330 <_malloc_r>
 80083f8:	b922      	cbnz	r2, 8008404 <_realloc_r+0x20>
 80083fa:	f7ff ff4b 	bl	8008294 <_free_r>
 80083fe:	4625      	mov	r5, r4
 8008400:	4628      	mov	r0, r5
 8008402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008404:	f000 f826 	bl	8008454 <_malloc_usable_size_r>
 8008408:	42a0      	cmp	r0, r4
 800840a:	d20f      	bcs.n	800842c <_realloc_r+0x48>
 800840c:	4621      	mov	r1, r4
 800840e:	4638      	mov	r0, r7
 8008410:	f7ff ff8e 	bl	8008330 <_malloc_r>
 8008414:	4605      	mov	r5, r0
 8008416:	2800      	cmp	r0, #0
 8008418:	d0f2      	beq.n	8008400 <_realloc_r+0x1c>
 800841a:	4631      	mov	r1, r6
 800841c:	4622      	mov	r2, r4
 800841e:	f7ff fc11 	bl	8007c44 <memcpy>
 8008422:	4631      	mov	r1, r6
 8008424:	4638      	mov	r0, r7
 8008426:	f7ff ff35 	bl	8008294 <_free_r>
 800842a:	e7e9      	b.n	8008400 <_realloc_r+0x1c>
 800842c:	4635      	mov	r5, r6
 800842e:	e7e7      	b.n	8008400 <_realloc_r+0x1c>

08008430 <_sbrk_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	4c06      	ldr	r4, [pc, #24]	; (800844c <_sbrk_r+0x1c>)
 8008434:	2300      	movs	r3, #0
 8008436:	4605      	mov	r5, r0
 8008438:	4608      	mov	r0, r1
 800843a:	6023      	str	r3, [r4, #0]
 800843c:	f7fa f8ac 	bl	8002598 <_sbrk>
 8008440:	1c43      	adds	r3, r0, #1
 8008442:	d102      	bne.n	800844a <_sbrk_r+0x1a>
 8008444:	6823      	ldr	r3, [r4, #0]
 8008446:	b103      	cbz	r3, 800844a <_sbrk_r+0x1a>
 8008448:	602b      	str	r3, [r5, #0]
 800844a:	bd38      	pop	{r3, r4, r5, pc}
 800844c:	2000045c 	.word	0x2000045c

08008450 <__malloc_lock>:
 8008450:	4770      	bx	lr

08008452 <__malloc_unlock>:
 8008452:	4770      	bx	lr

08008454 <_malloc_usable_size_r>:
 8008454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008458:	1f18      	subs	r0, r3, #4
 800845a:	2b00      	cmp	r3, #0
 800845c:	bfbc      	itt	lt
 800845e:	580b      	ldrlt	r3, [r1, r0]
 8008460:	18c0      	addlt	r0, r0, r3
 8008462:	4770      	bx	lr

08008464 <_init>:
 8008464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008466:	bf00      	nop
 8008468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800846a:	bc08      	pop	{r3}
 800846c:	469e      	mov	lr, r3
 800846e:	4770      	bx	lr

08008470 <_fini>:
 8008470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008472:	bf00      	nop
 8008474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008476:	bc08      	pop	{r3}
 8008478:	469e      	mov	lr, r3
 800847a:	4770      	bx	lr
