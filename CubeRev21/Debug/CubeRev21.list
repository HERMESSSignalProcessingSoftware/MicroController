
CubeRev21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007948  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08007b48  08007b48  00017b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f20  08007f20  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007f20  08007f20  00017f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f28  08007f28  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f28  08007f28  00017f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f2c  08007f2c  00017f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007f30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  20000070  08007fa0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08007fa0  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e1f  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002aa2  00000000  00000000  00030ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d50  00000000  00000000  00033960  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  000346b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f08a  00000000  00000000  00035278  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f7d9  00000000  00000000  00064302  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00118144  00000000  00000000  00073adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018bc1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036e4  00000000  00000000  0018bc9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08007b30 	.word	0x08007b30

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08007b30 	.word	0x08007b30

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <FastMemoryTest>:

/**
 * Performes a fast memory test, just writes one page and reads it
 *
 */
uint32_t FastMemoryTest(UART_HandleTypeDef huart) {
 80005f0:	b084      	sub	sp, #16
 80005f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005f4:	b0d3      	sub	sp, #332	; 0x14c
 80005f6:	af02      	add	r7, sp, #8
 80005f8:	f507 74ac 	add.w	r4, r7, #344	; 0x158
 80005fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	char writeBuffer[256] = "Starting FLASH Test...\r\n";
 8000600:	f107 0630 	add.w	r6, r7, #48	; 0x30
 8000604:	4bdb      	ldr	r3, [pc, #876]	; (8000974 <FastMemoryTest+0x384>)
 8000606:	4634      	mov	r4, r6
 8000608:	461d      	mov	r5, r3
 800060a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000612:	c403      	stmia	r4!, {r0, r1}
 8000614:	7022      	strb	r2, [r4, #0]
 8000616:	f106 0319 	add.w	r3, r6, #25
 800061a:	22e7      	movs	r2, #231	; 0xe7
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f006 fe81 	bl	8007326 <memset>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 8000624:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fe09 	bl	8000240 <strlen>
 800062e:	4603      	mov	r3, r0
 8000630:	b29a      	uxth	r2, r3
 8000632:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800063e:	f005 fddb 	bl	80061f8 <HAL_UART_Transmit>

	SPI_Values DUT0;
	DUT0.CS_Pin = FL2_CS1_Pin;
 8000642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000646:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800064a:	809a      	strh	r2, [r3, #4]
	DUT0.CS_Port = FL2_CS1_GPIO_Port;
 800064c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000650:	4ac9      	ldr	r2, [pc, #804]	; (8000978 <FastMemoryTest+0x388>)
 8000652:	609a      	str	r2, [r3, #8]
	DUT0.spihandle = &hspi2;
 8000654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000658:	4ac8      	ldr	r2, [pc, #800]	; (800097c <FastMemoryTest+0x38c>)
 800065a:	601a      	str	r2, [r3, #0]
	//
	SPI_Values DUT1;
	DUT1.CS_Pin = FL2_CS2_Pin;
 800065c:	f107 0318 	add.w	r3, r7, #24
 8000660:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000664:	809a      	strh	r2, [r3, #4]
	DUT1.CS_Port = FL2_CS2_GPIO_Port;
 8000666:	f107 0318 	add.w	r3, r7, #24
 800066a:	4ac3      	ldr	r2, [pc, #780]	; (8000978 <FastMemoryTest+0x388>)
 800066c:	609a      	str	r2, [r3, #8]
	DUT1.spihandle = &hspi2;
 800066e:	f107 0318 	add.w	r3, r7, #24
 8000672:	4ac2      	ldr	r2, [pc, #776]	; (800097c <FastMemoryTest+0x38c>)
 8000674:	601a      	str	r2, [r3, #0]
	//
	SPI_Values DUT2;
	DUT2.CS_Pin = FL1_CS1_Pin;
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800067e:	809a      	strh	r2, [r3, #4]
	DUT2.CS_Port = FL1_CS1_GPIO_Port;
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	4abe      	ldr	r2, [pc, #760]	; (8000980 <FastMemoryTest+0x390>)
 8000686:	609a      	str	r2, [r3, #8]
	DUT2.spihandle = &hspi6;
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	4abd      	ldr	r2, [pc, #756]	; (8000984 <FastMemoryTest+0x394>)
 800068e:	601a      	str	r2, [r3, #0]
	//
	SPI_Values DUT3;
	DUT3.CS_Pin = FL1_CS2_Pin;
 8000690:	463b      	mov	r3, r7
 8000692:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000696:	809a      	strh	r2, [r3, #4]
	DUT3.CS_Port = FL1_CS2_GPIO_Port;
 8000698:	463b      	mov	r3, r7
 800069a:	4abb      	ldr	r2, [pc, #748]	; (8000988 <FastMemoryTest+0x398>)
 800069c:	609a      	str	r2, [r3, #8]
	DUT3.spihandle = &hspi6;
 800069e:	463b      	mov	r3, r7
 80006a0:	4ab8      	ldr	r2, [pc, #736]	; (8000984 <FastMemoryTest+0x394>)
 80006a2:	601a      	str	r2, [r3, #0]


	uint32_t result = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	uint32_t startTime = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint32_t endTime = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	uint32_t kbits = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	sprintf(writeBuffer, "\t%s\n\r\0", "Checking FL2/1");
 80006bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006c0:	4ab2      	ldr	r2, [pc, #712]	; (800098c <FastMemoryTest+0x39c>)
 80006c2:	49b3      	ldr	r1, [pc, #716]	; (8000990 <FastMemoryTest+0x3a0>)
 80006c4:	4618      	mov	r0, r3
 80006c6:	f006 fe37 	bl	8007338 <siprintf>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 80006ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fdb6 	bl	8000240 <strlen>
 80006d4:	4603      	mov	r3, r0
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80006dc:	f04f 33ff 	mov.w	r3, #4294967295
 80006e0:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 80006e4:	f005 fd88 	bl	80061f8 <HAL_UART_Transmit>
	startTime = HAL_GetTick();
 80006e8:	f001 fd32 	bl	8002150 <HAL_GetTick>
 80006ec:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	result = FastTest(DUT0);
 80006f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80006f8:	f000 f958 	bl	80009ac <FastTest>
 80006fc:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	endTime = HAL_GetTick() - startTime;
 8000700:	f001 fd26 	bl	8002150 <HAL_GetTick>
 8000704:	4602      	mov	r2, r0
 8000706:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	kbits = ((256*8) / endTime);
 8000710:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000714:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000718:	fbb2 f3f3 	udiv	r3, r2, r3
 800071c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	sprintf(writeBuffer, "\t\tResult: %s, took %dms\r\n\t\t%d kbit/s\r\n\0", result == 1 ? "Passed" : "Failed", endTime, kbits);
 8000720:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000724:	2b01      	cmp	r3, #1
 8000726:	d101      	bne.n	800072c <FastMemoryTest+0x13c>
 8000728:	4a9a      	ldr	r2, [pc, #616]	; (8000994 <FastMemoryTest+0x3a4>)
 800072a:	e000      	b.n	800072e <FastMemoryTest+0x13e>
 800072c:	4a9a      	ldr	r2, [pc, #616]	; (8000998 <FastMemoryTest+0x3a8>)
 800072e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000732:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800073c:	4997      	ldr	r1, [pc, #604]	; (800099c <FastMemoryTest+0x3ac>)
 800073e:	f006 fdfb 	bl	8007338 <siprintf>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 8000742:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fd7a 	bl	8000240 <strlen>
 800074c:	4603      	mov	r3, r0
 800074e:	b29a      	uxth	r2, r3
 8000750:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000754:	f04f 33ff 	mov.w	r3, #4294967295
 8000758:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800075c:	f005 fd4c 	bl	80061f8 <HAL_UART_Transmit>
	HAL_Delay(50);
 8000760:	2032      	movs	r0, #50	; 0x32
 8000762:	f001 fd01 	bl	8002168 <HAL_Delay>


	sprintf(writeBuffer, "\t%s\n\r\0", "Checking FL2/2");
 8000766:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800076a:	4a8d      	ldr	r2, [pc, #564]	; (80009a0 <FastMemoryTest+0x3b0>)
 800076c:	4988      	ldr	r1, [pc, #544]	; (8000990 <FastMemoryTest+0x3a0>)
 800076e:	4618      	mov	r0, r3
 8000770:	f006 fde2 	bl	8007338 <siprintf>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 8000774:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fd61 	bl	8000240 <strlen>
 800077e:	4603      	mov	r3, r0
 8000780:	b29a      	uxth	r2, r3
 8000782:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800078e:	f005 fd33 	bl	80061f8 <HAL_UART_Transmit>
	startTime = HAL_GetTick();
 8000792:	f001 fcdd 	bl	8002150 <HAL_GetTick>
 8000796:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	result = FastTest(DUT1);
 800079a:	f107 0318 	add.w	r3, r7, #24
 800079e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80007a2:	f000 f903 	bl	80009ac <FastTest>
 80007a6:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	endTime = HAL_GetTick() - startTime;
 80007aa:	f001 fcd1 	bl	8002150 <HAL_GetTick>
 80007ae:	4602      	mov	r2, r0
 80007b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	kbits = ((256*8) / endTime);
 80007ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	sprintf(writeBuffer, "\t\tResult: %s, took %dms\r\n\t\t%d kbit/s\r\n\0", result == 1 ? "Passed" : "Failed", endTime, kbits);
 80007ca:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d101      	bne.n	80007d6 <FastMemoryTest+0x1e6>
 80007d2:	4a70      	ldr	r2, [pc, #448]	; (8000994 <FastMemoryTest+0x3a4>)
 80007d4:	e000      	b.n	80007d8 <FastMemoryTest+0x1e8>
 80007d6:	4a70      	ldr	r2, [pc, #448]	; (8000998 <FastMemoryTest+0x3a8>)
 80007d8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80007dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007e6:	496d      	ldr	r1, [pc, #436]	; (800099c <FastMemoryTest+0x3ac>)
 80007e8:	f006 fda6 	bl	8007338 <siprintf>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 80007ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fd25 	bl	8000240 <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8000806:	f005 fcf7 	bl	80061f8 <HAL_UART_Transmit>
	HAL_Delay(50);
 800080a:	2032      	movs	r0, #50	; 0x32
 800080c:	f001 fcac 	bl	8002168 <HAL_Delay>


	sprintf(writeBuffer, "\t%s\n\r\0", "Checking FL1/1");
 8000810:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000814:	4a63      	ldr	r2, [pc, #396]	; (80009a4 <FastMemoryTest+0x3b4>)
 8000816:	495e      	ldr	r1, [pc, #376]	; (8000990 <FastMemoryTest+0x3a0>)
 8000818:	4618      	mov	r0, r3
 800081a:	f006 fd8d 	bl	8007338 <siprintf>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 800081e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff fd0c 	bl	8000240 <strlen>
 8000828:	4603      	mov	r3, r0
 800082a:	b29a      	uxth	r2, r3
 800082c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000830:	f04f 33ff 	mov.w	r3, #4294967295
 8000834:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8000838:	f005 fcde 	bl	80061f8 <HAL_UART_Transmit>
	startTime = HAL_GetTick();
 800083c:	f001 fc88 	bl	8002150 <HAL_GetTick>
 8000840:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	result = FastTest(DUT2);
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800084c:	f000 f8ae 	bl	80009ac <FastTest>
 8000850:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	endTime = HAL_GetTick() - startTime;
 8000854:	f001 fc7c 	bl	8002150 <HAL_GetTick>
 8000858:	4602      	mov	r2, r0
 800085a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	kbits = ((256*8) / endTime);
 8000864:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000868:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800086c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000870:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	sprintf(writeBuffer, "\t\tResult: %s, took %dms\r\n\t\t%d kbit/s\r\n\0", result == 1 ? "Passed" : "Failed", endTime, kbits);
 8000874:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000878:	2b01      	cmp	r3, #1
 800087a:	d101      	bne.n	8000880 <FastMemoryTest+0x290>
 800087c:	4a45      	ldr	r2, [pc, #276]	; (8000994 <FastMemoryTest+0x3a4>)
 800087e:	e000      	b.n	8000882 <FastMemoryTest+0x292>
 8000880:	4a45      	ldr	r2, [pc, #276]	; (8000998 <FastMemoryTest+0x3a8>)
 8000882:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000886:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000890:	4942      	ldr	r1, [pc, #264]	; (800099c <FastMemoryTest+0x3ac>)
 8000892:	f006 fd51 	bl	8007338 <siprintf>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 8000896:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fcd0 	bl	8000240 <strlen>
 80008a0:	4603      	mov	r3, r0
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80008a8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ac:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 80008b0:	f005 fca2 	bl	80061f8 <HAL_UART_Transmit>
	HAL_Delay(50);
 80008b4:	2032      	movs	r0, #50	; 0x32
 80008b6:	f001 fc57 	bl	8002168 <HAL_Delay>


	sprintf(writeBuffer, "\t%s\n\r\0", "Checking FL1/2");
 80008ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008be:	4a3a      	ldr	r2, [pc, #232]	; (80009a8 <FastMemoryTest+0x3b8>)
 80008c0:	4933      	ldr	r1, [pc, #204]	; (8000990 <FastMemoryTest+0x3a0>)
 80008c2:	4618      	mov	r0, r3
 80008c4:	f006 fd38 	bl	8007338 <siprintf>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 80008c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fcb7 	bl	8000240 <strlen>
 80008d2:	4603      	mov	r3, r0
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
 80008de:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 80008e2:	f005 fc89 	bl	80061f8 <HAL_UART_Transmit>
	startTime = HAL_GetTick();
 80008e6:	f001 fc33 	bl	8002150 <HAL_GetTick>
 80008ea:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	result = FastTest(DUT3);
 80008ee:	463b      	mov	r3, r7
 80008f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80008f4:	f000 f85a 	bl	80009ac <FastTest>
 80008f8:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	endTime = HAL_GetTick() - startTime;
 80008fc:	f001 fc28 	bl	8002150 <HAL_GetTick>
 8000900:	4602      	mov	r2, r0
 8000902:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	kbits = ((256*8) / endTime);
 800090c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000910:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000914:	fbb2 f3f3 	udiv	r3, r2, r3
 8000918:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	sprintf(writeBuffer, "\t\tResult: %s, took %dms\r\n\t\t%d kbit/s\r\n\0", result == 1 ? "Passed" : "Failed", endTime, kbits);
 800091c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000920:	2b01      	cmp	r3, #1
 8000922:	d101      	bne.n	8000928 <FastMemoryTest+0x338>
 8000924:	4a1b      	ldr	r2, [pc, #108]	; (8000994 <FastMemoryTest+0x3a4>)
 8000926:	e000      	b.n	800092a <FastMemoryTest+0x33a>
 8000928:	4a1b      	ldr	r2, [pc, #108]	; (8000998 <FastMemoryTest+0x3a8>)
 800092a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800092e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000938:	4918      	ldr	r1, [pc, #96]	; (800099c <FastMemoryTest+0x3ac>)
 800093a:	f006 fcfd 	bl	8007338 <siprintf>
	HAL_UART_Transmit(&huart, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 800093e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fc7c 	bl	8000240 <strlen>
 8000948:	4603      	mov	r3, r0
 800094a:	b29a      	uxth	r2, r3
 800094c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000950:	f04f 33ff 	mov.w	r3, #4294967295
 8000954:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8000958:	f005 fc4e 	bl	80061f8 <HAL_UART_Transmit>
	HAL_Delay(50);
 800095c:	2032      	movs	r0, #50	; 0x32
 800095e:	f001 fc03 	bl	8002168 <HAL_Delay>




	return 0;
 8000962:	2300      	movs	r3, #0
}
 8000964:	4618      	mov	r0, r3
 8000966:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800096a:	46bd      	mov	sp, r7
 800096c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000970:	b004      	add	sp, #16
 8000972:	4770      	bx	lr
 8000974:	08007bc8 	.word	0x08007bc8
 8000978:	40020c00 	.word	0x40020c00
 800097c:	200000e0 	.word	0x200000e0
 8000980:	40020400 	.word	0x40020400
 8000984:	200001a8 	.word	0x200001a8
 8000988:	40021c00 	.word	0x40021c00
 800098c:	08007b48 	.word	0x08007b48
 8000990:	08007b58 	.word	0x08007b58
 8000994:	08007b60 	.word	0x08007b60
 8000998:	08007b68 	.word	0x08007b68
 800099c:	08007b70 	.word	0x08007b70
 80009a0:	08007b98 	.word	0x08007b98
 80009a4:	08007ba8 	.word	0x08007ba8
 80009a8:	08007bb8 	.word	0x08007bb8

080009ac <FastTest>:

uint32_t FastTest(SPI_Values DUT) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 80009b2:	af02      	add	r7, sp, #8
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t writeBuffer[256] = { 0 };
 80009ba:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80009be:	4618      	mov	r0, r3
 80009c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009c4:	461a      	mov	r2, r3
 80009c6:	2100      	movs	r1, #0
 80009c8:	f006 fcad 	bl	8007326 <memset>
	uint8_t readBuffer[256] = { 0 };
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4618      	mov	r0, r3
 80009d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d6:	461a      	mov	r2, r3
 80009d8:	2100      	movs	r1, #0
 80009da:	f006 fca4 	bl	8007326 <memset>
	uint32_t adresse = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	volatile uint8_t SR1;
	//Testdaten initialisieren
	for (int i = 0; i < 256; i++) {
 80009e4:	2300      	movs	r3, #0
 80009e6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80009ea:	e00e      	b.n	8000a0a <FastTest+0x5e>
		writeBuffer[i] = i;
 80009ec:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80009f0:	b2d9      	uxtb	r1, r3
 80009f2:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80009f6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80009fa:	4413      	add	r3, r2
 80009fc:	460a      	mov	r2, r1
 80009fe:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 256; i++) {
 8000a00:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000a04:	3301      	adds	r3, #1
 8000a06:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000a0a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000a0e:	2bff      	cmp	r3, #255	; 0xff
 8000a10:	ddec      	ble.n	80009ec <FastTest+0x40>

	//CHIP löschen
	//chipErase(DUT);
	//evtl Zusätzliche Schleife für die verschiedenen Chips und CS pins

	adresse = 0x0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	//Daten für eine Page schicken
	writePage(writeBuffer, adresse, DUT);
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8000a1e:	689a      	ldr	r2, [r3, #8]
 8000a20:	9200      	str	r2, [sp, #0]
 8000a22:	cb0c      	ldmia	r3, {r2, r3}
 8000a24:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8000a28:	f000 f931 	bl	8000c8e <writePage>
	//Warten bis fertig geschrieben wurde
	writeReady(DUT);
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a32:	f000 f9f1 	bl	8000e18 <writeReady>
	//Selbe page auslesen
	readPage(readBuffer, adresse, DUT);
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	f107 0014 	add.w	r0, r7, #20
 8000a3c:	689a      	ldr	r2, [r3, #8]
 8000a3e:	9200      	str	r2, [sp, #0]
 8000a40:	cb0c      	ldmia	r3, {r2, r3}
 8000a42:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8000a46:	f000 f98b 	bl	8000d60 <readPage>
	//Inhalt vergleichen
	for (int y = 0; y < 256; y++) {
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000a50:	e01e      	b.n	8000a90 <FastTest+0xe4>
		//Wenn inhalt nicht gleich
		if (writeBuffer[y] != readBuffer[y]) {
 8000a52:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8000a56:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000a5a:	4413      	add	r3, r2
 8000a5c:	781a      	ldrb	r2, [r3, #0]
 8000a5e:	f107 0114 	add.w	r1, r7, #20
 8000a62:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000a66:	440b      	add	r3, r1
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d00b      	beq.n	8000a86 <FastTest+0xda>
			SR1 = readStatus(DUT);
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a74:	f000 f8be 	bl	8000bf4 <readStatus>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	f107 0313 	add.w	r3, r7, #19
 8000a80:	701a      	strb	r2, [r3, #0]
			return 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	e009      	b.n	8000a9a <FastTest+0xee>
	for (int y = 0; y < 256; y++) {
 8000a86:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000a90:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000a94:	2bff      	cmp	r3, #255	; 0xff
 8000a96:	dddc      	ble.n	8000a52 <FastTest+0xa6>
		}
	}
	return 1;
 8000a98:	2301      	movs	r3, #1
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000aa8:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <MX_CRC_Init+0x3c>)
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <MX_CRC_Init+0x40>)
 8000aac:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_CRC_Init+0x3c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <MX_CRC_Init+0x3c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_CRC_Init+0x3c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000ac0:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <MX_CRC_Init+0x3c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_CRC_Init+0x3c>)
 8000ac8:	2203      	movs	r2, #3
 8000aca:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000acc:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <MX_CRC_Init+0x3c>)
 8000ace:	f001 fcad 	bl	800242c <HAL_CRC_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000ad8:	f000 fd5a 	bl	8001590 <Error_Handler>
  }

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000098 	.word	0x20000098
 8000ae4:	40023000 	.word	0x40023000

08000ae8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <HAL_CRC_MspInit+0x38>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d10b      	bne.n	8000b12 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_CRC_MspInit+0x3c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a09      	ldr	r2, [pc, #36]	; (8000b24 <HAL_CRC_MspInit+0x3c>)
 8000b00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <HAL_CRC_MspInit+0x3c>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000b12:	bf00      	nop
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40023000 	.word	0x40023000
 8000b24:	40023800 	.word	0x40023800

08000b28 <InitMemory>:

/**
 * Sets the pin to the right state
 * @returns 0: ok
 */
int32_t InitMemory(void) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FL1_CS1_GPIO_Port, FL1_CS1_Pin, GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b32:	482d      	ldr	r0, [pc, #180]	; (8000be8 <InitMemory+0xc0>)
 8000b34:	f002 f99a 	bl	8002e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL1_CS2_GPIO_Port, FL1_CS2_Pin, GPIO_PIN_SET);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b3e:	482b      	ldr	r0, [pc, #172]	; (8000bec <InitMemory+0xc4>)
 8000b40:	f002 f994 	bl	8002e6c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FL2_CS1_GPIO_Port, FL2_CS1_Pin, GPIO_PIN_SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b4a:	4829      	ldr	r0, [pc, #164]	; (8000bf0 <InitMemory+0xc8>)
 8000b4c:	f002 f98e 	bl	8002e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL2_CS2_GPIO_Port, FL2_CS2_Pin, GPIO_PIN_SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b56:	4826      	ldr	r0, [pc, #152]	; (8000bf0 <InitMemory+0xc8>)
 8000b58:	f002 f988 	bl	8002e6c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FL1_HLD_GPIO_Port, FL1_HLD_Pin, GPIO_PIN_SET);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b62:	4822      	ldr	r0, [pc, #136]	; (8000bec <InitMemory+0xc4>)
 8000b64:	f002 f982 	bl	8002e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL2_HLD_GPIO_Port, FL2_HLD_Pin, GPIO_PIN_SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b6e:	4820      	ldr	r0, [pc, #128]	; (8000bf0 <InitMemory+0xc8>)
 8000b70:	f002 f97c 	bl	8002e6c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FL1_WP_GPIO_Port, FL1_WP_Pin, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b7a:	481c      	ldr	r0, [pc, #112]	; (8000bec <InitMemory+0xc4>)
 8000b7c:	f002 f976 	bl	8002e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL2_WP_GPIO_Port, FL2_WP_Pin, GPIO_PIN_SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b86:	481a      	ldr	r0, [pc, #104]	; (8000bf0 <InitMemory+0xc8>)
 8000b88:	f002 f970 	bl	8002e6c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FL1_RES_GPIO_Port, FL1_RES_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b92:	4816      	ldr	r0, [pc, #88]	; (8000bec <InitMemory+0xc4>)
 8000b94:	f002 f96a 	bl	8002e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL2_RES_GPIO_Port, FL2_RES_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b9e:	4814      	ldr	r0, [pc, #80]	; (8000bf0 <InitMemory+0xc8>)
 8000ba0:	f002 f964 	bl	8002e6c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ba4:	200a      	movs	r0, #10
 8000ba6:	f001 fadf 	bl	8002168 <HAL_Delay>
	HAL_GPIO_WritePin(FL1_RES_GPIO_Port, FL1_RES_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bb0:	480e      	ldr	r0, [pc, #56]	; (8000bec <InitMemory+0xc4>)
 8000bb2:	f002 f95b 	bl	8002e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL2_RES_GPIO_Port, FL2_RES_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bbc:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <InitMemory+0xc8>)
 8000bbe:	f002 f955 	bl	8002e6c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000bc2:	200a      	movs	r0, #10
 8000bc4:	f001 fad0 	bl	8002168 <HAL_Delay>
	HAL_GPIO_WritePin(FL1_RES_GPIO_Port, FL1_RES_Pin, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bce:	4807      	ldr	r0, [pc, #28]	; (8000bec <InitMemory+0xc4>)
 8000bd0:	f002 f94c 	bl	8002e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL2_RES_GPIO_Port, FL2_RES_Pin, GPIO_PIN_SET);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <InitMemory+0xc8>)
 8000bdc:	f002 f946 	bl	8002e6c <HAL_GPIO_WritePin>
	return 0;
 8000be0:	2300      	movs	r3, #0

}
 8000be2:	4618      	mov	r0, r3
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40020400 	.word	0x40020400
 8000bec:	40021c00 	.word	0x40021c00
 8000bf0:	40020c00 	.word	0x40020c00

08000bf4 <readStatus>:
 * Function Read Status
 * reads the status byte from the memory unit
 * @param: SPI_val
 * @return 8 bit status register
 */
uint8_t readStatus(SPI_Values SPI_val) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t data;
	uint8_t command = c_READSTATUSREG1;
 8000c00:	2305      	movs	r3, #5
 8000c02:	75bb      	strb	r3, [r7, #22]
	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	8939      	ldrh	r1, [r7, #8]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f002 f92e 	bl	8002e6c <HAL_GPIO_WritePin>

	HAL_Delay(1); //test
 8000c10:	2001      	movs	r0, #1
 8000c12:	f001 faa9 	bl	8002168 <HAL_Delay>

	//send command
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f107 0116 	add.w	r1, r7, #22
 8000c1c:	230a      	movs	r3, #10
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f004 fada 	bl	80051d8 <HAL_SPI_Transmit>
	//read data from status register
	HAL_SPI_Receive(SPI_val.spihandle, &data, 1, 10);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f107 0117 	add.w	r1, r7, #23
 8000c2a:	230a      	movs	r3, #10
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f004 fc49 	bl	80054c4 <HAL_SPI_Receive>
	//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	8939      	ldrh	r1, [r7, #8]
 8000c36:	2201      	movs	r2, #1
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f002 f917 	bl	8002e6c <HAL_GPIO_WritePin>
	return data;
 8000c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <writeByte>:
 *  @brief Writes one byte so SPI
 *  @param uint8_t data: the one byte
 *  @param SPI_Val: the specifier of the SPI
 *  @return 0: Ok.
 */
int writeByte(uint8_t data, SPI_Values SPI_val) {
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b087      	sub	sp, #28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4604      	mov	r4, r0
 8000c50:	4638      	mov	r0, r7
 8000c52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000c56:	4623      	mov	r3, r4
 8000c58:	73fb      	strb	r3, [r7, #15]
	uint8_t command = data;
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	75fb      	strb	r3, [r7, #23]
	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	88b9      	ldrh	r1, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f002 f901 	bl	8002e6c <HAL_GPIO_WritePin>
	//Ausgabe lesen
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 8000c6a:	6838      	ldr	r0, [r7, #0]
 8000c6c:	f107 0117 	add.w	r1, r7, #23
 8000c70:	230a      	movs	r3, #10
 8000c72:	2201      	movs	r2, #1
 8000c74:	f004 fab0 	bl	80051d8 <HAL_SPI_Transmit>
	//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	88b9      	ldrh	r1, [r7, #4]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f002 f8f4 	bl	8002e6c <HAL_GPIO_WritePin>
	return 0;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	371c      	adds	r7, #28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd90      	pop	{r4, r7, pc}

08000c8e <writePage>:
 * @param uint8_t * data: Pointer to the data field
 * @param uint32_t address: the address on the memory chip
 * @param SPI_Values SPI_val
 * @return 0: ok
 */
int writePage(uint8_t *data, uint32_t address, SPI_Values SPI_val) {
 8000c8e:	b082      	sub	sp, #8
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	f107 0118 	add.w	r1, r7, #24
 8000c9e:	e881 000c 	stmia.w	r1, {r2, r3}

	uint8_t command = c_WRITEPAGE;
 8000ca2:	2312      	movs	r3, #18
 8000ca4:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp_add;

//Write enable
	writeByte(c_WREN, SPI_val);
 8000ca6:	f107 0318 	add.w	r3, r7, #24
 8000caa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cac:	2006      	movs	r0, #6
 8000cae:	f7ff ffcb 	bl	8000c48 <writeByte>

	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 8000cb2:	6a3b      	ldr	r3, [r7, #32]
 8000cb4:	8bb9      	ldrh	r1, [r7, #28]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f002 f8d7 	bl	8002e6c <HAL_GPIO_WritePin>

	//commando schicken
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 8000cbe:	69b8      	ldr	r0, [r7, #24]
 8000cc0:	f107 010f 	add.w	r1, r7, #15
 8000cc4:	230a      	movs	r3, #10
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f004 fa86 	bl	80051d8 <HAL_SPI_Transmit>
	HAL_Delay(10);
 8000ccc:	200a      	movs	r0, #10
 8000cce:	f001 fa4b 	bl	8002168 <HAL_Delay>
	//Addressse schicken MSB to LSB
//	HAL_SPI_Transmit(SPI_val.spihandle, (uint8_t*) (&address), 4, 40);

	tmp_add = (uint8_t) ((address >> 24) & 0x000000FF);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	0e1b      	lsrs	r3, r3, #24
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000cda:	69b8      	ldr	r0, [r7, #24]
 8000cdc:	f107 010e 	add.w	r1, r7, #14
 8000ce0:	230a      	movs	r3, #10
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f004 fa78 	bl	80051d8 <HAL_SPI_Transmit>
	tmp_add = (uint8_t) ((address >> 16) & 0x000000FF);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	0c1b      	lsrs	r3, r3, #16
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000cf0:	69b8      	ldr	r0, [r7, #24]
 8000cf2:	f107 010e 	add.w	r1, r7, #14
 8000cf6:	230a      	movs	r3, #10
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f004 fa6d 	bl	80051d8 <HAL_SPI_Transmit>
	tmp_add = (uint8_t) ((address >> 8) & 0x000000FF);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000d06:	69b8      	ldr	r0, [r7, #24]
 8000d08:	f107 010e 	add.w	r1, r7, #14
 8000d0c:	230a      	movs	r3, #10
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f004 fa62 	bl	80051d8 <HAL_SPI_Transmit>
	tmp_add = (uint8_t) (address & 0x000000FF);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000d1a:	69b8      	ldr	r0, [r7, #24]
 8000d1c:	f107 010e 	add.w	r1, r7, #14
 8000d20:	230a      	movs	r3, #10
 8000d22:	2201      	movs	r2, #1
 8000d24:	f004 fa58 	bl	80051d8 <HAL_SPI_Transmit>

	//Daten schicken
	HAL_SPI_Transmit(SPI_val.spihandle, data, 256, 2560);
 8000d28:	69b8      	ldr	r0, [r7, #24]
 8000d2a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000d2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	f004 fa50 	bl	80051d8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(SPI_val.spihandle, &data[i], 1, 10);
	}
*/

	//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 8000d38:	6a3b      	ldr	r3, [r7, #32]
 8000d3a:	8bb9      	ldrh	r1, [r7, #28]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f002 f894 	bl	8002e6c <HAL_GPIO_WritePin>

	//Write disable
	writeByte(c_WRDI, SPI_val);
 8000d44:	f107 0318 	add.w	r3, r7, #24
 8000d48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d4a:	2004      	movs	r0, #4
 8000d4c:	f7ff ff7c 	bl	8000c48 <writeByte>
	return 0;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d5c:	b002      	add	sp, #8
 8000d5e:	4770      	bx	lr

08000d60 <readPage>:
 * @param uint8_t  * data: Pointer to the data array
 * @param uint32_t address: Address of the momory unit to be read
 * @param SPI_Values SPI_val: the corresponding SPI values
 * @return 0: ok
 */
int readPage(uint8_t *data, uint32_t address, SPI_Values SPI_val) {
 8000d60:	b082      	sub	sp, #8
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b084      	sub	sp, #16
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
 8000d6c:	f107 0118 	add.w	r1, r7, #24
 8000d70:	e881 000c 	stmia.w	r1, {r2, r3}

	uint8_t command = c_READ;
 8000d74:	2313      	movs	r3, #19
 8000d76:	73fb      	strb	r3, [r7, #15]

	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 8000d78:	6a3b      	ldr	r3, [r7, #32]
 8000d7a:	8bb9      	ldrh	r1, [r7, #28]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f002 f874 	bl	8002e6c <HAL_GPIO_WritePin>

	//commando schicken
//	writeByte(c_READ, SPI_val);
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 8000d84:	69b8      	ldr	r0, [r7, #24]
 8000d86:	f107 010f 	add.w	r1, r7, #15
 8000d8a:	230a      	movs	r3, #10
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	f004 fa23 	bl	80051d8 <HAL_SPI_Transmit>

//4 Byte Addressse schicken MSB to LSB
//	HAL_SPI_Transmit(SPI_val.spihandle, (uint8_t*) (&address), 4, 40);
	tmp_add = (uint8_t) ((address >> 24) & 0x000000FF);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	0e1b      	lsrs	r3, r3, #24
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <readPage+0xb4>)
 8000d9a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000d9c:	69b8      	ldr	r0, [r7, #24]
 8000d9e:	230a      	movs	r3, #10
 8000da0:	2201      	movs	r2, #1
 8000da2:	491c      	ldr	r1, [pc, #112]	; (8000e14 <readPage+0xb4>)
 8000da4:	f004 fa18 	bl	80051d8 <HAL_SPI_Transmit>
	tmp_add = (uint8_t) ((address >> 16) & 0x000000FF);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	0c1b      	lsrs	r3, r3, #16
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <readPage+0xb4>)
 8000db0:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000db2:	69b8      	ldr	r0, [r7, #24]
 8000db4:	230a      	movs	r3, #10
 8000db6:	2201      	movs	r2, #1
 8000db8:	4916      	ldr	r1, [pc, #88]	; (8000e14 <readPage+0xb4>)
 8000dba:	f004 fa0d 	bl	80051d8 <HAL_SPI_Transmit>
	tmp_add = (uint8_t) ((address >> 8) & 0x000000FF);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <readPage+0xb4>)
 8000dc6:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000dc8:	69b8      	ldr	r0, [r7, #24]
 8000dca:	230a      	movs	r3, #10
 8000dcc:	2201      	movs	r2, #1
 8000dce:	4911      	ldr	r1, [pc, #68]	; (8000e14 <readPage+0xb4>)
 8000dd0:	f004 fa02 	bl	80051d8 <HAL_SPI_Transmit>
	tmp_add = (uint8_t) (address & 0x000000FF);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <readPage+0xb4>)
 8000dda:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000ddc:	69b8      	ldr	r0, [r7, #24]
 8000dde:	230a      	movs	r3, #10
 8000de0:	2201      	movs	r2, #1
 8000de2:	490c      	ldr	r1, [pc, #48]	; (8000e14 <readPage+0xb4>)
 8000de4:	f004 f9f8 	bl	80051d8 <HAL_SPI_Transmit>

//Daten lesen
	HAL_SPI_Receive(SPI_val.spihandle, data, 256, 2560);
 8000de8:	69b8      	ldr	r0, [r7, #24]
 8000dea:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000dee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	f004 fb66 	bl	80054c4 <HAL_SPI_Receive>
//	for (int i = 0; i < 256; i++) {
//		HAL_SPI_Receive(SPI_val.spihandle, &data[i], 1, 10);
//	}

//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	8bb9      	ldrh	r1, [r7, #28]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f002 f834 	bl	8002e6c <HAL_GPIO_WritePin>

	return 0;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e10:	b002      	add	sp, #8
 8000e12:	4770      	bx	lr
 8000e14:	200000bc 	.word	0x200000bc

08000e18 <writeReady>:

/**
 * Waits for the bit WIP (Write in Progress) bit to toggle
 * Reads SR1 register from memory
 */
void writeReady(SPI_Values SPI_val) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint32_t status = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
	uint8_t SR1 = 0xF;
 8000e28:	230f      	movs	r3, #15
 8000e2a:	74fb      	strb	r3, [r7, #19]
	while (status == 0) {
 8000e2c:	e00d      	b.n	8000e4a <writeReady+0x32>
		SR1 = readStatus(SPI_val);
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e34:	f7ff fede 	bl	8000bf4 <readStatus>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	74fb      	strb	r3, [r7, #19]
		if ((SR1 & 0x1) == 0)
 8000e3c:	7cfb      	ldrb	r3, [r7, #19]
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d101      	bne.n	8000e4a <writeReady+0x32>
			status = 1;
 8000e46:	2301      	movs	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
	while (status == 0) {
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0ee      	beq.n	8000e2e <writeReady+0x16>
	}
}
 8000e50:	bf00      	nop
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b090      	sub	sp, #64	; 0x40
 8000e5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6e:	4bb1      	ldr	r3, [pc, #708]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4ab0      	ldr	r2, [pc, #704]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000e74:	f043 0310 	orr.w	r3, r3, #16
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4bae      	ldr	r3, [pc, #696]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0310 	and.w	r3, r3, #16
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e86:	4bab      	ldr	r3, [pc, #684]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4aaa      	ldr	r2, [pc, #680]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4ba8      	ldr	r3, [pc, #672]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	4ba5      	ldr	r3, [pc, #660]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4aa4      	ldr	r2, [pc, #656]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4ba2      	ldr	r3, [pc, #648]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	623b      	str	r3, [r7, #32]
 8000eb4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eb6:	4b9f      	ldr	r3, [pc, #636]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a9e      	ldr	r2, [pc, #632]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000ebc:	f043 0320 	orr.w	r3, r3, #32
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b9c      	ldr	r3, [pc, #624]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0320 	and.w	r3, r3, #32
 8000eca:	61fb      	str	r3, [r7, #28]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ece:	4b99      	ldr	r3, [pc, #612]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a98      	ldr	r2, [pc, #608]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b96      	ldr	r3, [pc, #600]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee2:	61bb      	str	r3, [r7, #24]
 8000ee4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b93      	ldr	r3, [pc, #588]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a92      	ldr	r2, [pc, #584]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b90      	ldr	r3, [pc, #576]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	4b8d      	ldr	r3, [pc, #564]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a8c      	ldr	r2, [pc, #560]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b8a      	ldr	r3, [pc, #552]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000f16:	4b87      	ldr	r3, [pc, #540]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a86      	ldr	r2, [pc, #536]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b84      	ldr	r3, [pc, #528]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f2e:	4b81      	ldr	r3, [pc, #516]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a80      	ldr	r2, [pc, #512]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b7e      	ldr	r3, [pc, #504]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f46:	4b7b      	ldr	r3, [pc, #492]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a7a      	ldr	r2, [pc, #488]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f4c:	f043 0308 	orr.w	r3, r3, #8
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b78      	ldr	r3, [pc, #480]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000f5e:	4b75      	ldr	r3, [pc, #468]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a74      	ldr	r2, [pc, #464]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b72      	ldr	r3, [pc, #456]	; (8001134 <MX_GPIO_Init+0x2dc>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED_4_Pin|LWL_OUT_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f244 0108 	movw	r1, #16392	; 0x4008
 8000f7c:	486e      	ldr	r0, [pc, #440]	; (8001138 <MX_GPIO_Init+0x2e0>)
 8000f7e:	f001 ff75 	bl	8002e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_3_Pin|LED_2_Pin|LED_1_Pin|SD_CS_Pin
 8000f82:	2200      	movs	r2, #0
 8000f84:	f24e 4138 	movw	r1, #58424	; 0xe438
 8000f88:	486c      	ldr	r0, [pc, #432]	; (800113c <MX_GPIO_Init+0x2e4>)
 8000f8a:	f001 ff6f 	bl	8002e6c <HAL_GPIO_WritePin>
                          |nCS_DMS1_Pin|nCS_DMS2_Pin|nCS_DMS3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, nCS_DMS4_Pin|nCS_DMS5_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2103      	movs	r1, #3
 8000f92:	486b      	ldr	r0, [pc, #428]	; (8001140 <MX_GPIO_Init+0x2e8>)
 8000f94:	f001 ff6a 	bl	8002e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCS_DMS6_GPIO_Port, nCS_DMS6_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2180      	movs	r1, #128	; 0x80
 8000f9c:	4869      	ldr	r0, [pc, #420]	; (8001144 <MX_GPIO_Init+0x2ec>)
 8000f9e:	f001 ff65 	bl	8002e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, FL1_HLD_Pin|FL1_WP_Pin|FL1_RES_Pin|FL1_CS2_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8000fa8:	4867      	ldr	r0, [pc, #412]	; (8001148 <MX_GPIO_Init+0x2f0>)
 8000faa:	f001 ff5f 	bl	8002e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL1_CS1_GPIO_Port, FL1_CS1_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb4:	4865      	ldr	r0, [pc, #404]	; (800114c <MX_GPIO_Init+0x2f4>)
 8000fb6:	f001 ff59 	bl	8002e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, nCS_PT3_Pin|FL2_HLD_Pin|FL2_RES_Pin|FL2_CS2_Pin
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000fc0:	4863      	ldr	r0, [pc, #396]	; (8001150 <MX_GPIO_Init+0x2f8>)
 8000fc2:	f001 ff53 	bl	8002e6c <HAL_GPIO_WritePin>
                          |FL2_CS1_Pin|FL2_WP_Pin|nCS_PT2_Pin|nCS_PT1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE3 PE4 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
 8000fc6:	f64f 7318 	movw	r3, #65304	; 0xff18
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd8:	4619      	mov	r1, r3
 8000fda:	485a      	ldr	r0, [pc, #360]	; (8001144 <MX_GPIO_Init+0x2ec>)
 8000fdc:	f001 fb98 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LWL_IN_Pin;
 8000fe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LWL_IN_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4850      	ldr	r0, [pc, #320]	; (8001138 <MX_GPIO_Init+0x2e0>)
 8000ff6:	f001 fb8b 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000ffa:	f24e 33ff 	movw	r3, #58367	; 0xe3ff
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001000:	2303      	movs	r3, #3
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001008:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800100c:	4619      	mov	r1, r3
 800100e:	4851      	ldr	r0, [pc, #324]	; (8001154 <MX_GPIO_Init+0x2fc>)
 8001010:	f001 fb7e 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI10 PI11 PI12 PI13
                           PI15 PI0 PI1 PI2
                           PI4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001014:	f64b 4317 	movw	r3, #48151	; 0xbc17
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101a:	2303      	movs	r3, #3
 800101c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001022:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001026:	4619      	mov	r1, r3
 8001028:	4843      	ldr	r0, [pc, #268]	; (8001138 <MX_GPIO_Init+0x2e0>)
 800102a:	f001 fb71 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF6
                           PF11 PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 800102e:	f641 0347 	movw	r3, #6215	; 0x1847
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001034:	2303      	movs	r3, #3
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800103c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001040:	4619      	mov	r1, r3
 8001042:	483e      	ldr	r0, [pc, #248]	; (800113c <MX_GPIO_Init+0x2e4>)
 8001044:	f001 fb64 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LED_4_Pin|LWL_OUT_Pin;
 8001048:	f244 0308 	movw	r3, #16392	; 0x4008
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	2301      	movs	r3, #1
 8001050:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800105a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800105e:	4619      	mov	r1, r3
 8001060:	4835      	ldr	r0, [pc, #212]	; (8001138 <MX_GPIO_Init+0x2e0>)
 8001062:	f001 fb55 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LED_1_Pin|SD_CS_Pin
 8001066:	f24e 4338 	movw	r3, #58424	; 0xe438
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |nCS_DMS1_Pin|nCS_DMS2_Pin|nCS_DMS3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001078:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800107c:	4619      	mov	r1, r3
 800107e:	482f      	ldr	r0, [pc, #188]	; (800113c <MX_GPIO_Init+0x2e4>)
 8001080:	f001 fb46 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH2 PH3
                           PH4 PH5 PH6 PH7
                           PH8 PH13 PH14 PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001084:	f24e 13ff 	movw	r3, #57855	; 0xe1ff
 8001088:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108a:	2303      	movs	r3, #3
 800108c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001092:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001096:	4619      	mov	r1, r3
 8001098:	482b      	ldr	r0, [pc, #172]	; (8001148 <MX_GPIO_Init+0x2f0>)
 800109a:	f001 fb39 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800109e:	231e      	movs	r3, #30
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a2:	2303      	movs	r3, #3
 80010a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ae:	4619      	mov	r1, r3
 80010b0:	4829      	ldr	r0, [pc, #164]	; (8001158 <MX_GPIO_Init+0x300>)
 80010b2:	f001 fb2d 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80010b6:	f640 73e3 	movw	r3, #4067	; 0xfe3
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010bc:	2303      	movs	r3, #3
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c8:	4619      	mov	r1, r3
 80010ca:	4820      	ldr	r0, [pc, #128]	; (800114c <MX_GPIO_Init+0x2f4>)
 80010cc:	f001 fb20 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ0 PJ1 PJ2 PJ3
                           PJ4 PJ5 PJ12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80010d0:	f241 033f 	movw	r3, #4159	; 0x103f
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d6:	2303      	movs	r3, #3
 80010d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80010de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e2:	4619      	mov	r1, r3
 80010e4:	481d      	ldr	r0, [pc, #116]	; (800115c <MX_GPIO_Init+0x304>)
 80010e6:	f001 fb13 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = nCS_DMS4_Pin|nCS_DMS5_Pin;
 80010ea:	2303      	movs	r3, #3
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010fe:	4619      	mov	r1, r3
 8001100:	480f      	ldr	r0, [pc, #60]	; (8001140 <MX_GPIO_Init+0x2e8>)
 8001102:	f001 fb05 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nCS_DMS6_Pin;
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(nCS_DMS6_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800111a:	4619      	mov	r1, r3
 800111c:	4809      	ldr	r0, [pc, #36]	; (8001144 <MX_GPIO_Init+0x2ec>)
 800111e:	f001 faf7 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = FL1_HLD_Pin|FL1_WP_Pin|FL1_RES_Pin|FL1_CS2_Pin;
 8001122:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	e015      	b.n	8001160 <MX_GPIO_Init+0x308>
 8001134:	40023800 	.word	0x40023800
 8001138:	40022000 	.word	0x40022000
 800113c:	40021400 	.word	0x40021400
 8001140:	40021800 	.word	0x40021800
 8001144:	40021000 	.word	0x40021000
 8001148:	40021c00 	.word	0x40021c00
 800114c:	40020400 	.word	0x40020400
 8001150:	40020c00 	.word	0x40020c00
 8001154:	40020800 	.word	0x40020800
 8001158:	40020000 	.word	0x40020000
 800115c:	40022400 	.word	0x40022400
 8001160:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001162:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001166:	4619      	mov	r1, r3
 8001168:	4856      	ldr	r0, [pc, #344]	; (80012c4 <MX_GPIO_Init+0x46c>)
 800116a:	f001 fad1 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FL1_CS1_Pin;
 800116e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FL1_CS1_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001184:	4619      	mov	r1, r3
 8001186:	4850      	ldr	r0, [pc, #320]	; (80012c8 <MX_GPIO_Init+0x470>)
 8001188:	f001 fac2 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = nCS_PT3_Pin|FL2_HLD_Pin|FL2_RES_Pin|FL2_CS2_Pin
 800118c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FL2_CS1_Pin|FL2_WP_Pin|nCS_PT2_Pin|nCS_PT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001192:	2301      	movs	r3, #1
 8001194:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800119e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a2:	4619      	mov	r1, r3
 80011a4:	4849      	ldr	r0, [pc, #292]	; (80012cc <MX_GPIO_Init+0x474>)
 80011a6:	f001 fab3 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MS_SEL_Pin;
 80011aa:	2304      	movs	r3, #4
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ae:	2300      	movs	r3, #0
 80011b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MS_SEL_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ba:	4619      	mov	r1, r3
 80011bc:	4844      	ldr	r0, [pc, #272]	; (80012d0 <MX_GPIO_Init+0x478>)
 80011be:	f001 faa7 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG5 PG6 PG7
                           PG8 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80011c2:	f64f 73e8 	movw	r3, #65512	; 0xffe8
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c8:	2303      	movs	r3, #3
 80011ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d4:	4619      	mov	r1, r3
 80011d6:	483e      	ldr	r0, [pc, #248]	; (80012d0 <MX_GPIO_Init+0x478>)
 80011d8:	f001 fa9a 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDRDY_DMS1_Pin;
 80011dc:	2310      	movs	r3, #16
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011e0:	4b3c      	ldr	r3, [pc, #240]	; (80012d4 <MX_GPIO_Init+0x47c>)
 80011e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(nDRDY_DMS1_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ec:	4619      	mov	r1, r3
 80011ee:	4838      	ldr	r0, [pc, #224]	; (80012d0 <MX_GPIO_Init+0x478>)
 80011f0:	f001 fa8e 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = nDRDY_DMS2_Pin|nDRDY_DMS3_Pin|nDRDY_DMS5_Pin|nDRDY_DMS6_Pin;
 80011f4:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011fa:	4b36      	ldr	r3, [pc, #216]	; (80012d4 <MX_GPIO_Init+0x47c>)
 80011fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001206:	4619      	mov	r1, r3
 8001208:	4833      	ldr	r0, [pc, #204]	; (80012d8 <MX_GPIO_Init+0x480>)
 800120a:	f001 fa81 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDRDY_DMS4_Pin;
 800120e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001214:	2300      	movs	r3, #0
 8001216:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(nDRDY_DMS4_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001220:	4619      	mov	r1, r3
 8001222:	482d      	ldr	r0, [pc, #180]	; (80012d8 <MX_GPIO_Init+0x480>)
 8001224:	f001 fa74 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8001228:	23fb      	movs	r3, #251	; 0xfb
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122c:	2303      	movs	r3, #3
 800122e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001234:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001238:	4619      	mov	r1, r3
 800123a:	4824      	ldr	r0, [pc, #144]	; (80012cc <MX_GPIO_Init+0x474>)
 800123c:	f001 fa68 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = nDRDY_PT3_Pin|nDRDY_PT2_Pin|nDRDY_PT1_Pin;
 8001240:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001246:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <MX_GPIO_Init+0x47c>)
 8001248:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800124e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001252:	4619      	mov	r1, r3
 8001254:	4821      	ldr	r0, [pc, #132]	; (80012dc <MX_GPIO_Init+0x484>)
 8001256:	f001 fa5b 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK3 PK4 PK5 PK6
                           PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800125a:	23f8      	movs	r3, #248	; 0xf8
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125e:	2303      	movs	r3, #3
 8001260:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001266:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800126a:	4619      	mov	r1, r3
 800126c:	481c      	ldr	r0, [pc, #112]	; (80012e0 <MX_GPIO_Init+0x488>)
 800126e:	f001 fa4f 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SODS_OPT_Pin|SOE_OPT_Pin|LO_OPT_Pin;
 8001272:	23e0      	movs	r3, #224	; 0xe0
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <MX_GPIO_Init+0x47c>)
 8001278:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800127e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001282:	4619      	mov	r1, r3
 8001284:	4817      	ldr	r0, [pc, #92]	; (80012e4 <MX_GPIO_Init+0x48c>)
 8001286:	f001 fa43 	bl	8002710 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2105      	movs	r1, #5
 800128e:	200a      	movs	r0, #10
 8001290:	f001 f87c 	bl	800238c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001294:	200a      	movs	r0, #10
 8001296:	f001 f8a5 	bl	80023e4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2105      	movs	r1, #5
 800129e:	2017      	movs	r0, #23
 80012a0:	f001 f874 	bl	800238c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012a4:	2017      	movs	r0, #23
 80012a6:	f001 f89d 	bl	80023e4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2105      	movs	r1, #5
 80012ae:	2028      	movs	r0, #40	; 0x28
 80012b0:	f001 f86c 	bl	800238c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012b4:	2028      	movs	r0, #40	; 0x28
 80012b6:	f001 f895 	bl	80023e4 <HAL_NVIC_EnableIRQ>

}
 80012ba:	bf00      	nop
 80012bc:	3740      	adds	r7, #64	; 0x40
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40021c00 	.word	0x40021c00
 80012c8:	40020400 	.word	0x40020400
 80012cc:	40020c00 	.word	0x40020c00
 80012d0:	40021800 	.word	0x40021800
 80012d4:	10110000 	.word	0x10110000
 80012d8:	40020000 	.word	0x40020000
 80012dc:	40022400 	.word	0x40022400
 80012e0:	40022800 	.word	0x40022800
 80012e4:	40022000 	.word	0x40022000

080012e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ec:	f000 fedf 	bl	80020ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f0:	f000 f83e 	bl	8001370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f4:	f7ff fdb0 	bl	8000e58 <MX_GPIO_Init>
  MX_SPI2_Init();
 80012f8:	f000 f99c 	bl	8001634 <MX_SPI2_Init>
  MX_SPI3_Init();
 80012fc:	f000 f9d8 	bl	80016b0 <MX_SPI3_Init>
  MX_SPI6_Init();
 8001300:	f000 fa90 	bl	8001824 <MX_SPI6_Init>
  MX_UART4_Init();
 8001304:	f000 fd1c 	bl	8001d40 <MX_UART4_Init>
  MX_UART8_Init();
 8001308:	f000 fd7a 	bl	8001e00 <MX_UART8_Init>
  MX_UART5_Init();
 800130c:	f000 fd48 	bl	8001da0 <MX_UART5_Init>
  MX_CRC_Init();
 8001310:	f7ff fbc8 	bl	8000aa4 <MX_CRC_Init>
  MX_SPI4_Init();
 8001314:	f000 fa0a 	bl	800172c <MX_SPI4_Init>
  MX_SPI5_Init();
 8001318:	f000 fa46 	bl	80017a8 <MX_SPI5_Init>
  MX_RTC_Init();
 800131c:	f000 f94a 	bl	80015b4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET); //clear all LEDs
 8001320:	2200      	movs	r2, #0
 8001322:	2120      	movs	r1, #32
 8001324:	480f      	ldr	r0, [pc, #60]	; (8001364 <main+0x7c>)
 8001326:	f001 fda1 	bl	8002e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	2110      	movs	r1, #16
 800132e:	480d      	ldr	r0, [pc, #52]	; (8001364 <main+0x7c>)
 8001330:	f001 fd9c 	bl	8002e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	2108      	movs	r1, #8
 8001338:	480a      	ldr	r0, [pc, #40]	; (8001364 <main+0x7c>)
 800133a:	f001 fd97 	bl	8002e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001344:	4808      	ldr	r0, [pc, #32]	; (8001368 <main+0x80>)
 8001346:	f001 fd91 	bl	8002e6c <HAL_GPIO_WritePin>

	if (!HAL_GPIO_ReadPin(MS_SEL_GPIO_Port, MS_SEL_Pin)) {
 800134a:	2104      	movs	r1, #4
 800134c:	4807      	ldr	r0, [pc, #28]	; (800136c <main+0x84>)
 800134e:	f001 fd6d 	bl	8002e2c <HAL_GPIO_ReadPin>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <main+0x76>
		main_master();
 8001358:	f000 f8a4 	bl	80014a4 <main_master>
 800135c:	e001      	b.n	8001362 <main+0x7a>
	} else { //Slave loop
		main_slave();
 800135e:	f000 f8cb 	bl	80014f8 <main_slave>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001362:	e7fe      	b.n	8001362 <main+0x7a>
 8001364:	40021400 	.word	0x40021400
 8001368:	40022000 	.word	0x40022000
 800136c:	40021800 	.word	0x40021800

08001370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b0b8      	sub	sp, #224	; 0xe0
 8001374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001376:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800137a:	2234      	movs	r2, #52	; 0x34
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f005 ffd1 	bl	8007326 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001384:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001394:	f107 0308 	add.w	r3, r7, #8
 8001398:	2290      	movs	r2, #144	; 0x90
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f005 ffc2 	bl	8007326 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	4b3e      	ldr	r3, [pc, #248]	; (800149c <SystemClock_Config+0x12c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a3d      	ldr	r2, [pc, #244]	; (800149c <SystemClock_Config+0x12c>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b3b      	ldr	r3, [pc, #236]	; (800149c <SystemClock_Config+0x12c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ba:	4b39      	ldr	r3, [pc, #228]	; (80014a0 <SystemClock_Config+0x130>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a38      	ldr	r2, [pc, #224]	; (80014a0 <SystemClock_Config+0x130>)
 80013c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <SystemClock_Config+0x130>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80013d2:	230a      	movs	r3, #10
 80013d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d8:	2301      	movs	r3, #1
 80013da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013de:	2310      	movs	r3, #16
 80013e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013e4:	2301      	movs	r3, #1
 80013e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ea:	2302      	movs	r3, #2
 80013ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013f6:	2308      	movs	r3, #8
 80013f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 80013fc:	23c0      	movs	r3, #192	; 0xc0
 80013fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001402:	2302      	movs	r3, #2
 8001404:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001408:	2302      	movs	r3, #2
 800140a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001412:	4618      	mov	r0, r3
 8001414:	f001 fdca 	bl	8002fac <HAL_RCC_OscConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800141e:	f000 f8b7 	bl	8001590 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001422:	f001 fd73 	bl	8002f0c <HAL_PWREx_EnableOverDrive>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800142c:	f000 f8b0 	bl	8001590 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001430:	230f      	movs	r3, #15
 8001432:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001436:	2302      	movs	r3, #2
 8001438:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001442:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001446:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800144a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800144e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001452:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001456:	2106      	movs	r1, #6
 8001458:	4618      	mov	r0, r3
 800145a:	f002 f917 	bl	800368c <HAL_RCC_ClockConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001464:	f000 f894 	bl	8001590 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 8001468:	f242 6320 	movw	r3, #9760	; 0x2620
 800146c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART8;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800146e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001472:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001474:	2300      	movs	r3, #0
 8001476:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001478:	2300      	movs	r3, #0
 800147a:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 800147c:	2300      	movs	r3, #0
 800147e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	4618      	mov	r0, r3
 8001486:	f002 fb8f 	bl	8003ba8 <HAL_RCCEx_PeriphCLKConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <SystemClock_Config+0x124>
  {
    Error_Handler();
 8001490:	f000 f87e 	bl	8001590 <Error_Handler>
  }
}
 8001494:	bf00      	nop
 8001496:	37e0      	adds	r7, #224	; 0xe0
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40023800 	.word	0x40023800
 80014a0:	40007000 	.word	0x40007000

080014a4 <main_master>:

/* USER CODE BEGIN 4 */
void main_master(void) {
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b0e3      	sub	sp, #396	; 0x18c
 80014a8:	af1c      	add	r7, sp, #112	; 0x70
	//HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);  //ON = MS set to Master
	//uint8_t bufferOff[3] = {0x01, 0x03, 0x05};
	//uint8_t bufferOn[3] = {0x02, 0x04, 0x06};

	uint32_t lastInit = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t lastBlinky = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint8_t writeBuffer[256] = {0};
 80014b6:	f107 0308 	add.w	r3, r7, #8
 80014ba:	4618      	mov	r0, r3
 80014bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c0:	461a      	mov	r2, r3
 80014c2:	2100      	movs	r1, #0
 80014c4:	f005 ff2f 	bl	8007326 <memset>

	uint8_t readSensor = 3; //DMS: 0-5, PT100: 6-8
 80014c8:	2303      	movs	r3, #3
 80014ca:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	}
*/


	/* Performing the memory test */
	InitMemory();
 80014ce:	f7ff fb2b 	bl	8000b28 <InitMemory>
	uint32_t memoryTest = FastMemoryTest(huart4);
 80014d2:	4c08      	ldr	r4, [pc, #32]	; (80014f4 <main_master+0x50>)
 80014d4:	4668      	mov	r0, sp
 80014d6:	f104 0310 	add.w	r3, r4, #16
 80014da:	2270      	movs	r2, #112	; 0x70
 80014dc:	4619      	mov	r1, r3
 80014de:	f005 ff17 	bl	8007310 <memcpy>
 80014e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014e6:	f7ff f883 	bl	80005f0 <FastMemoryTest>
 80014ea:	4603      	mov	r3, r0
 80014ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	while(1);
 80014f0:	e7fe      	b.n	80014f0 <main_master+0x4c>
 80014f2:	bf00      	nop
 80014f4:	200003d4 	.word	0x200003d4

080014f8 <main_slave>:
		 HAL_Delay(100);
		 */
	}
}

void main_slave(void) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
	uint8_t buffer[1] = { 0x00 };
 80014fe:	2300      	movs	r3, #0
 8001500:	713b      	strb	r3, [r7, #4]
	while (1) {
		HAL_UART_Receive(&huart5, buffer, sizeof(buffer), 5);
 8001502:	1d39      	adds	r1, r7, #4
 8001504:	2305      	movs	r3, #5
 8001506:	2201      	movs	r2, #1
 8001508:	481e      	ldr	r0, [pc, #120]	; (8001584 <main_slave+0x8c>)
 800150a:	f004 ff06 	bl	800631a <HAL_UART_Receive>
		if (buffer[0] == 0x01) {
 800150e:	793b      	ldrb	r3, [r7, #4]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d105      	bne.n	8001520 <main_slave+0x28>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	2110      	movs	r1, #16
 8001518:	481b      	ldr	r0, [pc, #108]	; (8001588 <main_slave+0x90>)
 800151a:	f001 fca7 	bl	8002e6c <HAL_GPIO_WritePin>
 800151e:	e02d      	b.n	800157c <main_slave+0x84>
		} else if (buffer[0] == 0x02) {
 8001520:	793b      	ldrb	r3, [r7, #4]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d105      	bne.n	8001532 <main_slave+0x3a>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001526:	2201      	movs	r2, #1
 8001528:	2110      	movs	r1, #16
 800152a:	4817      	ldr	r0, [pc, #92]	; (8001588 <main_slave+0x90>)
 800152c:	f001 fc9e 	bl	8002e6c <HAL_GPIO_WritePin>
 8001530:	e024      	b.n	800157c <main_slave+0x84>
		} else if (buffer[0] == 0x03) {
 8001532:	793b      	ldrb	r3, [r7, #4]
 8001534:	2b03      	cmp	r3, #3
 8001536:	d105      	bne.n	8001544 <main_slave+0x4c>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	2108      	movs	r1, #8
 800153c:	4812      	ldr	r0, [pc, #72]	; (8001588 <main_slave+0x90>)
 800153e:	f001 fc95 	bl	8002e6c <HAL_GPIO_WritePin>
 8001542:	e01b      	b.n	800157c <main_slave+0x84>
		} else if (buffer[0] == 0x04) {
 8001544:	793b      	ldrb	r3, [r7, #4]
 8001546:	2b04      	cmp	r3, #4
 8001548:	d105      	bne.n	8001556 <main_slave+0x5e>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 800154a:	2201      	movs	r2, #1
 800154c:	2108      	movs	r1, #8
 800154e:	480e      	ldr	r0, [pc, #56]	; (8001588 <main_slave+0x90>)
 8001550:	f001 fc8c 	bl	8002e6c <HAL_GPIO_WritePin>
 8001554:	e012      	b.n	800157c <main_slave+0x84>
		} else if (buffer[0] == 0x05) {
 8001556:	793b      	ldrb	r3, [r7, #4]
 8001558:	2b05      	cmp	r3, #5
 800155a:	d106      	bne.n	800156a <main_slave+0x72>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 800155c:	2200      	movs	r2, #0
 800155e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001562:	480a      	ldr	r0, [pc, #40]	; (800158c <main_slave+0x94>)
 8001564:	f001 fc82 	bl	8002e6c <HAL_GPIO_WritePin>
 8001568:	e008      	b.n	800157c <main_slave+0x84>
		} else if (buffer[0] == 0x06) {
 800156a:	793b      	ldrb	r3, [r7, #4]
 800156c:	2b06      	cmp	r3, #6
 800156e:	d105      	bne.n	800157c <main_slave+0x84>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8001570:	2201      	movs	r2, #1
 8001572:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <main_slave+0x94>)
 8001578:	f001 fc78 	bl	8002e6c <HAL_GPIO_WritePin>
		}
		buffer[1] = 0x00;
 800157c:	2300      	movs	r3, #0
 800157e:	717b      	strb	r3, [r7, #5]
		HAL_UART_Receive(&huart5, buffer, sizeof(buffer), 5);
 8001580:	e7bf      	b.n	8001502 <main_slave+0xa>
 8001582:	bf00      	nop
 8001584:	200002d4 	.word	0x200002d4
 8001588:	40021400 	.word	0x40021400
 800158c:	40022000 	.word	0x40022000

08001590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <MX_RTC_Init+0x44>)
 80015ba:	4a10      	ldr	r2, [pc, #64]	; (80015fc <MX_RTC_Init+0x48>)
 80015bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <MX_RTC_Init+0x44>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <MX_RTC_Init+0x44>)
 80015c6:	227f      	movs	r2, #127	; 0x7f
 80015c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <MX_RTC_Init+0x44>)
 80015cc:	22ff      	movs	r2, #255	; 0xff
 80015ce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MX_RTC_Init+0x44>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <MX_RTC_Init+0x44>)
 80015d8:	2200      	movs	r2, #0
 80015da:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_RTC_Init+0x44>)
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_RTC_Init+0x44>)
 80015e4:	f003 fb4c 	bl	8004c80 <HAL_RTC_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80015ee:	f7ff ffcf 	bl	8001590 <Error_Handler>
  }

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200000c0 	.word	0x200000c0
 80015fc:	40002800 	.word	0x40002800

08001600 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a07      	ldr	r2, [pc, #28]	; (800162c <HAL_RTC_MspInit+0x2c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d105      	bne.n	800161e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <HAL_RTC_MspInit+0x30>)
 8001614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001616:	4a06      	ldr	r2, [pc, #24]	; (8001630 <HAL_RTC_MspInit+0x30>)
 8001618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800161c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40002800 	.word	0x40002800
 8001630:	40023800 	.word	0x40023800

08001634 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi5;
SPI_HandleTypeDef hspi6;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <MX_SPI2_Init+0x74>)
 800163a:	4a1c      	ldr	r2, [pc, #112]	; (80016ac <MX_SPI2_Init+0x78>)
 800163c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800163e:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <MX_SPI2_Init+0x74>)
 8001640:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001644:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <MX_SPI2_Init+0x74>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <MX_SPI2_Init+0x74>)
 800164e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001652:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <MX_SPI2_Init+0x74>)
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <MX_SPI2_Init+0x74>)
 800165c:	2200      	movs	r2, #0
 800165e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <MX_SPI2_Init+0x74>)
 8001662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001666:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <MX_SPI2_Init+0x74>)
 800166a:	2208      	movs	r2, #8
 800166c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <MX_SPI2_Init+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <MX_SPI2_Init+0x74>)
 8001676:	2200      	movs	r2, #0
 8001678:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <MX_SPI2_Init+0x74>)
 800167c:	2200      	movs	r2, #0
 800167e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <MX_SPI2_Init+0x74>)
 8001682:	2207      	movs	r2, #7
 8001684:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <MX_SPI2_Init+0x74>)
 8001688:	2200      	movs	r2, #0
 800168a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <MX_SPI2_Init+0x74>)
 800168e:	2208      	movs	r2, #8
 8001690:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <MX_SPI2_Init+0x74>)
 8001694:	f003 fbf8 	bl	8004e88 <HAL_SPI_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800169e:	f7ff ff77 	bl	8001590 <Error_Handler>
  }

}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200000e0 	.word	0x200000e0
 80016ac:	40003800 	.word	0x40003800

080016b0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <MX_SPI3_Init+0x74>)
 80016b6:	4a1c      	ldr	r2, [pc, #112]	; (8001728 <MX_SPI3_Init+0x78>)
 80016b8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80016ba:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <MX_SPI3_Init+0x74>)
 80016bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016c0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <MX_SPI3_Init+0x74>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80016c8:	4b16      	ldr	r3, [pc, #88]	; (8001724 <MX_SPI3_Init+0x74>)
 80016ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016ce:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <MX_SPI3_Init+0x74>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016d6:	4b13      	ldr	r3, [pc, #76]	; (8001724 <MX_SPI3_Init+0x74>)
 80016d8:	2200      	movs	r2, #0
 80016da:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <MX_SPI3_Init+0x74>)
 80016de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <MX_SPI3_Init+0x74>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <MX_SPI3_Init+0x74>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <MX_SPI3_Init+0x74>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <MX_SPI3_Init+0x74>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <MX_SPI3_Init+0x74>)
 80016fe:	2207      	movs	r2, #7
 8001700:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <MX_SPI3_Init+0x74>)
 8001704:	2200      	movs	r2, #0
 8001706:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <MX_SPI3_Init+0x74>)
 800170a:	2208      	movs	r2, #8
 800170c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800170e:	4805      	ldr	r0, [pc, #20]	; (8001724 <MX_SPI3_Init+0x74>)
 8001710:	f003 fbba 	bl	8004e88 <HAL_SPI_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800171a:	f7ff ff39 	bl	8001590 <Error_Handler>
  }

}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2000020c 	.word	0x2000020c
 8001728:	40003c00 	.word	0x40003c00

0800172c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8001730:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <MX_SPI4_Init+0x74>)
 8001732:	4a1c      	ldr	r2, [pc, #112]	; (80017a4 <MX_SPI4_Init+0x78>)
 8001734:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001736:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <MX_SPI4_Init+0x74>)
 8001738:	f44f 7282 	mov.w	r2, #260	; 0x104
 800173c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800173e:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <MX_SPI4_Init+0x74>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001744:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <MX_SPI4_Init+0x74>)
 8001746:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800174a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <MX_SPI4_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <MX_SPI4_Init+0x74>)
 8001754:	2201      	movs	r2, #1
 8001756:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <MX_SPI4_Init+0x74>)
 800175a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800175e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <MX_SPI4_Init+0x74>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <MX_SPI4_Init+0x74>)
 8001768:	2200      	movs	r2, #0
 800176a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <MX_SPI4_Init+0x74>)
 800176e:	2200      	movs	r2, #0
 8001770:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <MX_SPI4_Init+0x74>)
 8001774:	2200      	movs	r2, #0
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001778:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <MX_SPI4_Init+0x74>)
 800177a:	2207      	movs	r2, #7
 800177c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <MX_SPI4_Init+0x74>)
 8001780:	2200      	movs	r2, #0
 8001782:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <MX_SPI4_Init+0x74>)
 8001786:	2200      	movs	r2, #0
 8001788:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <MX_SPI4_Init+0x74>)
 800178c:	f003 fb7c 	bl	8004e88 <HAL_SPI_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001796:	f7ff fefb 	bl	8001590 <Error_Handler>
  }

}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000270 	.word	0x20000270
 80017a4:	40013400 	.word	0x40013400

080017a8 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 80017ac:	4b1b      	ldr	r3, [pc, #108]	; (800181c <MX_SPI5_Init+0x74>)
 80017ae:	4a1c      	ldr	r2, [pc, #112]	; (8001820 <MX_SPI5_Init+0x78>)
 80017b0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <MX_SPI5_Init+0x74>)
 80017b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017b8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80017ba:	4b18      	ldr	r3, [pc, #96]	; (800181c <MX_SPI5_Init+0x74>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 80017c0:	4b16      	ldr	r3, [pc, #88]	; (800181c <MX_SPI5_Init+0x74>)
 80017c2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80017c6:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <MX_SPI5_Init+0x74>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ce:	4b13      	ldr	r3, [pc, #76]	; (800181c <MX_SPI5_Init+0x74>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_SPI5_Init+0x74>)
 80017d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017da:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <MX_SPI5_Init+0x74>)
 80017de:	2200      	movs	r2, #0
 80017e0:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_SPI5_Init+0x74>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_SPI5_Init+0x74>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <MX_SPI5_Init+0x74>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_SPI5_Init+0x74>)
 80017f6:	2207      	movs	r2, #7
 80017f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <MX_SPI5_Init+0x74>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_SPI5_Init+0x74>)
 8001802:	2208      	movs	r2, #8
 8001804:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_SPI5_Init+0x74>)
 8001808:	f003 fb3e 	bl	8004e88 <HAL_SPI_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001812:	f7ff febd 	bl	8001590 <Error_Handler>
  }

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000144 	.word	0x20000144
 8001820:	40015000 	.word	0x40015000

08001824 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
 8001828:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <MX_SPI6_Init+0x74>)
 800182a:	4a1c      	ldr	r2, [pc, #112]	; (800189c <MX_SPI6_Init+0x78>)
 800182c:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <MX_SPI6_Init+0x74>)
 8001830:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001834:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8001836:	4b18      	ldr	r3, [pc, #96]	; (8001898 <MX_SPI6_Init+0x74>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 800183c:	4b16      	ldr	r3, [pc, #88]	; (8001898 <MX_SPI6_Init+0x74>)
 800183e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001842:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001844:	4b14      	ldr	r3, [pc, #80]	; (8001898 <MX_SPI6_Init+0x74>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <MX_SPI6_Init+0x74>)
 800184c:	2200      	movs	r2, #0
 800184e:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MX_SPI6_Init+0x74>)
 8001852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001856:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <MX_SPI6_Init+0x74>)
 800185a:	2208      	movs	r2, #8
 800185c:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <MX_SPI6_Init+0x74>)
 8001860:	2200      	movs	r2, #0
 8001862:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <MX_SPI6_Init+0x74>)
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <MX_SPI6_Init+0x74>)
 800186c:	2200      	movs	r2, #0
 800186e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <MX_SPI6_Init+0x74>)
 8001872:	2207      	movs	r2, #7
 8001874:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <MX_SPI6_Init+0x74>)
 8001878:	2200      	movs	r2, #0
 800187a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <MX_SPI6_Init+0x74>)
 800187e:	2208      	movs	r2, #8
 8001880:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_SPI6_Init+0x74>)
 8001884:	f003 fb00 	bl	8004e88 <HAL_SPI_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_SPI6_Init+0x6e>
  {
    Error_Handler();
 800188e:	f7ff fe7f 	bl	8001590 <Error_Handler>
  }

}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200001a8 	.word	0x200001a8
 800189c:	40015400 	.word	0x40015400

080018a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b092      	sub	sp, #72	; 0x48
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a8e      	ldr	r2, [pc, #568]	; (8001af8 <HAL_SPI_MspInit+0x258>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d131      	bne.n	8001926 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018c2:	4b8e      	ldr	r3, [pc, #568]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	4a8d      	ldr	r2, [pc, #564]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 80018c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018cc:	6413      	str	r3, [r2, #64]	; 0x40
 80018ce:	4b8b      	ldr	r3, [pc, #556]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d6:	633b      	str	r3, [r7, #48]	; 0x30
 80018d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	4b88      	ldr	r3, [pc, #544]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a87      	ldr	r2, [pc, #540]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b85      	ldr	r3, [pc, #532]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80018f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80018f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001904:	2305      	movs	r3, #5
 8001906:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001908:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800190c:	4619      	mov	r1, r3
 800190e:	487c      	ldr	r0, [pc, #496]	; (8001b00 <HAL_SPI_MspInit+0x260>)
 8001910:	f000 fefe 	bl	8002710 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 6, 0);
 8001914:	2200      	movs	r2, #0
 8001916:	2106      	movs	r1, #6
 8001918:	2024      	movs	r0, #36	; 0x24
 800191a:	f000 fd37 	bl	800238c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800191e:	2024      	movs	r0, #36	; 0x24
 8001920:	f000 fd60 	bl	80023e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8001924:	e0e4      	b.n	8001af0 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI3)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a76      	ldr	r2, [pc, #472]	; (8001b04 <HAL_SPI_MspInit+0x264>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d145      	bne.n	80019bc <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001930:	4b72      	ldr	r3, [pc, #456]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	4a71      	ldr	r2, [pc, #452]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 8001936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800193a:	6413      	str	r3, [r2, #64]	; 0x40
 800193c:	4b6f      	ldr	r3, [pc, #444]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
 8001946:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001948:	4b6c      	ldr	r3, [pc, #432]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194c:	4a6b      	ldr	r2, [pc, #428]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 800194e:	f043 0302 	orr.w	r3, r3, #2
 8001952:	6313      	str	r3, [r2, #48]	; 0x30
 8001954:	4b69      	ldr	r3, [pc, #420]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001960:	4b66      	ldr	r3, [pc, #408]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	4a65      	ldr	r2, [pc, #404]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	6313      	str	r3, [r2, #48]	; 0x30
 800196c:	4b63      	ldr	r3, [pc, #396]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	623b      	str	r3, [r7, #32]
 8001976:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001978:	2304      	movs	r3, #4
 800197a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001988:	2307      	movs	r3, #7
 800198a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001990:	4619      	mov	r1, r3
 8001992:	485b      	ldr	r0, [pc, #364]	; (8001b00 <HAL_SPI_MspInit+0x260>)
 8001994:	f000 febc 	bl	8002710 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001998:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800199c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019aa:	2306      	movs	r3, #6
 80019ac:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019b2:	4619      	mov	r1, r3
 80019b4:	4854      	ldr	r0, [pc, #336]	; (8001b08 <HAL_SPI_MspInit+0x268>)
 80019b6:	f000 feab 	bl	8002710 <HAL_GPIO_Init>
}
 80019ba:	e099      	b.n	8001af0 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI4)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a52      	ldr	r2, [pc, #328]	; (8001b0c <HAL_SPI_MspInit+0x26c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d130      	bne.n	8001a28 <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80019c6:	4b4d      	ldr	r3, [pc, #308]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	4a4c      	ldr	r2, [pc, #304]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 80019cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019d0:	6453      	str	r3, [r2, #68]	; 0x44
 80019d2:	4b4a      	ldr	r3, [pc, #296]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019da:	61fb      	str	r3, [r7, #28]
 80019dc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019de:	4b47      	ldr	r3, [pc, #284]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a46      	ldr	r2, [pc, #280]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 80019e4:	f043 0310 	orr.w	r3, r3, #16
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b44      	ldr	r3, [pc, #272]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	61bb      	str	r3, [r7, #24]
 80019f4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80019f6:	2364      	movs	r3, #100	; 0x64
 80019f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a02:	2303      	movs	r3, #3
 8001a04:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001a06:	2305      	movs	r3, #5
 8001a08:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a0e:	4619      	mov	r1, r3
 8001a10:	483f      	ldr	r0, [pc, #252]	; (8001b10 <HAL_SPI_MspInit+0x270>)
 8001a12:	f000 fe7d 	bl	8002710 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 6, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2106      	movs	r1, #6
 8001a1a:	2054      	movs	r0, #84	; 0x54
 8001a1c:	f000 fcb6 	bl	800238c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001a20:	2054      	movs	r0, #84	; 0x54
 8001a22:	f000 fcdf 	bl	80023e4 <HAL_NVIC_EnableIRQ>
}
 8001a26:	e063      	b.n	8001af0 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI5)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a39      	ldr	r2, [pc, #228]	; (8001b14 <HAL_SPI_MspInit+0x274>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d129      	bne.n	8001a86 <HAL_SPI_MspInit+0x1e6>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001a32:	4b32      	ldr	r3, [pc, #200]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	4a31      	ldr	r2, [pc, #196]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 8001a38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3e:	4b2f      	ldr	r3, [pc, #188]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a4a:	4b2c      	ldr	r3, [pc, #176]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a2b      	ldr	r2, [pc, #172]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 8001a50:	f043 0320 	orr.w	r3, r3, #32
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b29      	ldr	r3, [pc, #164]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0320 	and.w	r3, r3, #32
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001a62:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001a66:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a70:	2303      	movs	r3, #3
 8001a72:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001a74:	2305      	movs	r3, #5
 8001a76:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4826      	ldr	r0, [pc, #152]	; (8001b18 <HAL_SPI_MspInit+0x278>)
 8001a80:	f000 fe46 	bl	8002710 <HAL_GPIO_Init>
}
 8001a84:	e034      	b.n	8001af0 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI6)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a24      	ldr	r2, [pc, #144]	; (8001b1c <HAL_SPI_MspInit+0x27c>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d12f      	bne.n	8001af0 <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001a90:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 8001a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a94:	4a19      	ldr	r2, [pc, #100]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 8001a96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a9a:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9c:	4b17      	ldr	r3, [pc, #92]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 8001a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa8:	4b14      	ldr	r3, [pc, #80]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	4a13      	ldr	r2, [pc, #76]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <HAL_SPI_MspInit+0x25c>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ac0:	23e0      	movs	r3, #224	; 0xe0
 8001ac2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	2303      	movs	r3, #3
 8001ace:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8001ad0:	2308      	movs	r3, #8
 8001ad2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4811      	ldr	r0, [pc, #68]	; (8001b20 <HAL_SPI_MspInit+0x280>)
 8001adc:	f000 fe18 	bl	8002710 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 6, 0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2106      	movs	r1, #6
 8001ae4:	2056      	movs	r0, #86	; 0x56
 8001ae6:	f000 fc51 	bl	800238c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 8001aea:	2056      	movs	r0, #86	; 0x56
 8001aec:	f000 fc7a 	bl	80023e4 <HAL_NVIC_EnableIRQ>
}
 8001af0:	bf00      	nop
 8001af2:	3748      	adds	r7, #72	; 0x48
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40003800 	.word	0x40003800
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40020400 	.word	0x40020400
 8001b04:	40003c00 	.word	0x40003c00
 8001b08:	40020800 	.word	0x40020800
 8001b0c:	40013400 	.word	0x40013400
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40015000 	.word	0x40015000
 8001b18:	40021400 	.word	0x40021400
 8001b1c:	40015400 	.word	0x40015400
 8001b20:	40020000 	.word	0x40020000

08001b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_MspInit+0x44>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <HAL_MspInit+0x44>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b34:	6413      	str	r3, [r2, #64]	; 0x40
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_MspInit+0x44>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_MspInit+0x44>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	4a08      	ldr	r2, [pc, #32]	; (8001b68 <HAL_MspInit+0x44>)
 8001b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_MspInit+0x44>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800

08001b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <HardFault_Handler+0x4>

08001b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <MemManage_Handler+0x4>

08001b86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <BusFault_Handler+0x4>

08001b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <UsageFault_Handler+0x4>

08001b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001bc0:	2010      	movs	r0, #16
 8001bc2:	f001 f97f 	bl	8002ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001bce:	2020      	movs	r0, #32
 8001bd0:	f001 f978 	bl	8002ec4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001bd4:	2040      	movs	r0, #64	; 0x40
 8001bd6:	f001 f975 	bl	8002ec4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001bda:	2080      	movs	r0, #128	; 0x80
 8001bdc:	f001 f972 	bl	8002ec4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001be0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001be4:	f001 f96e 	bl	8002ec4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001be8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001bec:	f001 f96a 	bl	8002ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <SPI2_IRQHandler+0x10>)
 8001bfa:	f003 ffa9 	bl	8005b50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200000e0 	.word	0x200000e0

08001c08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001c0c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001c10:	f001 f958 	bl	8002ec4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001c14:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001c18:	f001 f954 	bl	8002ec4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c1c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c20:	f001 f950 	bl	8002ec4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001c24:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c28:	f001 f94c 	bl	8002ec4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001c2c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001c30:	f001 f948 	bl	8002ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <UART4_IRQHandler+0x10>)
 8001c3e:	f004 fc39 	bl	80064b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200003d4 	.word	0x200003d4

08001c4c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <UART5_IRQHandler+0x10>)
 8001c52:	f004 fc2f 	bl	80064b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200002d4 	.word	0x200002d4

08001c60 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <UART8_IRQHandler+0x10>)
 8001c66:	f004 fc25 	bl	80064b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000354 	.word	0x20000354

08001c74 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <SPI4_IRQHandler+0x10>)
 8001c7a:	f003 ff69 	bl	8005b50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000270 	.word	0x20000270

08001c88 <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <SPI6_IRQHandler+0x10>)
 8001c8e:	f003 ff5f 	bl	8005b50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200001a8 	.word	0x200001a8

08001c9c <SysTick_Handler>:

/* USER CODE BEGIN 1 */
void SysTick_Handler(void) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001ca0:	f000 fa42 	bl	8002128 <HAL_IncTick>
}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb0:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <_sbrk+0x5c>)
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <_sbrk+0x60>)
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cbc:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <_sbrk+0x64>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d102      	bne.n	8001cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <_sbrk+0x64>)
 8001cc6:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <_sbrk+0x68>)
 8001cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <_sbrk+0x64>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d207      	bcs.n	8001ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd8:	f005 faf0 	bl	80072bc <__errno>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	230c      	movs	r3, #12
 8001ce0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce6:	e009      	b.n	8001cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cee:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <_sbrk+0x64>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <_sbrk+0x64>)
 8001cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20080000 	.word	0x20080000
 8001d08:	00000400 	.word	0x00000400
 8001d0c:	2000008c 	.word	0x2000008c
 8001d10:	20000460 	.word	0x20000460

08001d14 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d18:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <SystemInit+0x28>)
 8001d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1e:	4a07      	ldr	r2, [pc, #28]	; (8001d3c <SystemInit+0x28>)
 8001d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d28:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <SystemInit+0x28>)
 8001d2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d2e:	609a      	str	r2, [r3, #8]
#endif
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart8;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001d44:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <MX_UART4_Init+0x58>)
 8001d46:	4a15      	ldr	r2, [pc, #84]	; (8001d9c <MX_UART4_Init+0x5c>)
 8001d48:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001d4a:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <MX_UART4_Init+0x58>)
 8001d4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d50:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <MX_UART4_Init+0x58>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <MX_UART4_Init+0x58>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <MX_UART4_Init+0x58>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <MX_UART4_Init+0x58>)
 8001d66:	220c      	movs	r2, #12
 8001d68:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <MX_UART4_Init+0x58>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <MX_UART4_Init+0x58>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d76:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <MX_UART4_Init+0x58>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <MX_UART4_Init+0x58>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <MX_UART4_Init+0x58>)
 8001d84:	f004 f978 	bl	8006078 <HAL_UART_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001d8e:	f7ff fbff 	bl	8001590 <Error_Handler>
  }

}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200003d4 	.word	0x200003d4
 8001d9c:	40004c00 	.word	0x40004c00

08001da0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <MX_UART5_Init+0x58>)
 8001da6:	4a15      	ldr	r2, [pc, #84]	; (8001dfc <MX_UART5_Init+0x5c>)
 8001da8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <MX_UART5_Init+0x58>)
 8001dac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001db0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001db2:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <MX_UART5_Init+0x58>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001db8:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <MX_UART5_Init+0x58>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <MX_UART5_Init+0x58>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <MX_UART5_Init+0x58>)
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <MX_UART5_Init+0x58>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <MX_UART5_Init+0x58>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dd6:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <MX_UART5_Init+0x58>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <MX_UART5_Init+0x58>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001de2:	4805      	ldr	r0, [pc, #20]	; (8001df8 <MX_UART5_Init+0x58>)
 8001de4:	f004 f948 	bl	8006078 <HAL_UART_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001dee:	f7ff fbcf 	bl	8001590 <Error_Handler>
  }

}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200002d4 	.word	0x200002d4
 8001dfc:	40005000 	.word	0x40005000

08001e00 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 8001e04:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <MX_UART8_Init+0x58>)
 8001e06:	4a15      	ldr	r2, [pc, #84]	; (8001e5c <MX_UART8_Init+0x5c>)
 8001e08:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 30000;
 8001e0a:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <MX_UART8_Init+0x58>)
 8001e0c:	f247 5230 	movw	r2, #30000	; 0x7530
 8001e10:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <MX_UART8_Init+0x58>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <MX_UART8_Init+0x58>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <MX_UART8_Init+0x58>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <MX_UART8_Init+0x58>)
 8001e26:	220c      	movs	r2, #12
 8001e28:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <MX_UART8_Init+0x58>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <MX_UART8_Init+0x58>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <MX_UART8_Init+0x58>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <MX_UART8_Init+0x58>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001e42:	4805      	ldr	r0, [pc, #20]	; (8001e58 <MX_UART8_Init+0x58>)
 8001e44:	f004 f918 	bl	8006078 <HAL_UART_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_UART8_Init+0x52>
  {
    Error_Handler();
 8001e4e:	f7ff fb9f 	bl	8001590 <Error_Handler>
  }

}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000354 	.word	0x20000354
 8001e5c:	40007c00 	.word	0x40007c00

08001e60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b090      	sub	sp, #64	; 0x40
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a6e      	ldr	r2, [pc, #440]	; (8002038 <HAL_UART_MspInit+0x1d8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d14d      	bne.n	8001f1e <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e82:	4b6e      	ldr	r3, [pc, #440]	; (800203c <HAL_UART_MspInit+0x1dc>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	4a6d      	ldr	r2, [pc, #436]	; (800203c <HAL_UART_MspInit+0x1dc>)
 8001e88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8e:	4b6b      	ldr	r3, [pc, #428]	; (800203c <HAL_UART_MspInit+0x1dc>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e96:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e98:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e9a:	4b68      	ldr	r3, [pc, #416]	; (800203c <HAL_UART_MspInit+0x1dc>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a67      	ldr	r2, [pc, #412]	; (800203c <HAL_UART_MspInit+0x1dc>)
 8001ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b65      	ldr	r3, [pc, #404]	; (800203c <HAL_UART_MspInit+0x1dc>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb2:	4b62      	ldr	r3, [pc, #392]	; (800203c <HAL_UART_MspInit+0x1dc>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a61      	ldr	r2, [pc, #388]	; (800203c <HAL_UART_MspInit+0x1dc>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b5f      	ldr	r3, [pc, #380]	; (800203c <HAL_UART_MspInit+0x1dc>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	623b      	str	r3, [r7, #32]
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PI9     ------> UART4_RX
    PA0/WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = DAPI_RX_Pin;
 8001eca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001edc:	2308      	movs	r3, #8
 8001ede:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(DAPI_RX_GPIO_Port, &GPIO_InitStruct);
 8001ee0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4856      	ldr	r0, [pc, #344]	; (8002040 <HAL_UART_MspInit+0x1e0>)
 8001ee8:	f000 fc12 	bl	8002710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DAPI_TX_Pin;
 8001eec:	2301      	movs	r3, #1
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001efc:	2308      	movs	r3, #8
 8001efe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(DAPI_TX_GPIO_Port, &GPIO_InitStruct);
 8001f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f04:	4619      	mov	r1, r3
 8001f06:	484f      	ldr	r0, [pc, #316]	; (8002044 <HAL_UART_MspInit+0x1e4>)
 8001f08:	f000 fc02 	bl	8002710 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2106      	movs	r1, #6
 8001f10:	2034      	movs	r0, #52	; 0x34
 8001f12:	f000 fa3b 	bl	800238c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f16:	2034      	movs	r0, #52	; 0x34
 8001f18:	f000 fa64 	bl	80023e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 8001f1c:	e087      	b.n	800202e <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==UART5)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a49      	ldr	r2, [pc, #292]	; (8002048 <HAL_UART_MspInit+0x1e8>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d14d      	bne.n	8001fc4 <HAL_UART_MspInit+0x164>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f28:	4b44      	ldr	r3, [pc, #272]	; (800203c <HAL_UART_MspInit+0x1dc>)
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	4a43      	ldr	r2, [pc, #268]	; (800203c <HAL_UART_MspInit+0x1dc>)
 8001f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f32:	6413      	str	r3, [r2, #64]	; 0x40
 8001f34:	4b41      	ldr	r3, [pc, #260]	; (800203c <HAL_UART_MspInit+0x1dc>)
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f40:	4b3e      	ldr	r3, [pc, #248]	; (800203c <HAL_UART_MspInit+0x1dc>)
 8001f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f44:	4a3d      	ldr	r2, [pc, #244]	; (800203c <HAL_UART_MspInit+0x1dc>)
 8001f46:	f043 0304 	orr.w	r3, r3, #4
 8001f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4c:	4b3b      	ldr	r3, [pc, #236]	; (800203c <HAL_UART_MspInit+0x1dc>)
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	61bb      	str	r3, [r7, #24]
 8001f56:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f58:	4b38      	ldr	r3, [pc, #224]	; (800203c <HAL_UART_MspInit+0x1dc>)
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5c:	4a37      	ldr	r2, [pc, #220]	; (800203c <HAL_UART_MspInit+0x1dc>)
 8001f5e:	f043 0308 	orr.w	r3, r3, #8
 8001f62:	6313      	str	r3, [r2, #48]	; 0x30
 8001f64:	4b35      	ldr	r3, [pc, #212]	; (800203c <HAL_UART_MspInit+0x1dc>)
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = INTERSPU_TX_Pin;
 8001f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f76:	2302      	movs	r3, #2
 8001f78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f82:	2308      	movs	r3, #8
 8001f84:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(INTERSPU_TX_GPIO_Port, &GPIO_InitStruct);
 8001f86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	482f      	ldr	r0, [pc, #188]	; (800204c <HAL_UART_MspInit+0x1ec>)
 8001f8e:	f000 fbbf 	bl	8002710 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = INTERSPU_RX_Pin;
 8001f92:	2304      	movs	r3, #4
 8001f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	2302      	movs	r3, #2
 8001f98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fa2:	2308      	movs	r3, #8
 8001fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(INTERSPU_RX_GPIO_Port, &GPIO_InitStruct);
 8001fa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001faa:	4619      	mov	r1, r3
 8001fac:	4828      	ldr	r0, [pc, #160]	; (8002050 <HAL_UART_MspInit+0x1f0>)
 8001fae:	f000 fbaf 	bl	8002710 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 6, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2106      	movs	r1, #6
 8001fb6:	2035      	movs	r0, #53	; 0x35
 8001fb8:	f000 f9e8 	bl	800238c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001fbc:	2035      	movs	r0, #53	; 0x35
 8001fbe:	f000 fa11 	bl	80023e4 <HAL_NVIC_EnableIRQ>
}
 8001fc2:	e034      	b.n	800202e <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==UART8)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a22      	ldr	r2, [pc, #136]	; (8002054 <HAL_UART_MspInit+0x1f4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d12f      	bne.n	800202e <HAL_UART_MspInit+0x1ce>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001fce:	4b1b      	ldr	r3, [pc, #108]	; (800203c <HAL_UART_MspInit+0x1dc>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	4a1a      	ldr	r2, [pc, #104]	; (800203c <HAL_UART_MspInit+0x1dc>)
 8001fd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fda:	4b18      	ldr	r3, [pc, #96]	; (800203c <HAL_UART_MspInit+0x1dc>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_UART_MspInit+0x1dc>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a14      	ldr	r2, [pc, #80]	; (800203c <HAL_UART_MspInit+0x1dc>)
 8001fec:	f043 0310 	orr.w	r3, r3, #16
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_UART_MspInit+0x1dc>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EXP_IN_Pin|EXP_OUT_Pin;
 8001ffe:	2303      	movs	r3, #3
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200a:	2303      	movs	r3, #3
 800200c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800200e:	2308      	movs	r3, #8
 8002010:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002012:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002016:	4619      	mov	r1, r3
 8002018:	480f      	ldr	r0, [pc, #60]	; (8002058 <HAL_UART_MspInit+0x1f8>)
 800201a:	f000 fb79 	bl	8002710 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 6, 0);
 800201e:	2200      	movs	r2, #0
 8002020:	2106      	movs	r1, #6
 8002022:	2053      	movs	r0, #83	; 0x53
 8002024:	f000 f9b2 	bl	800238c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002028:	2053      	movs	r0, #83	; 0x53
 800202a:	f000 f9db 	bl	80023e4 <HAL_NVIC_EnableIRQ>
}
 800202e:	bf00      	nop
 8002030:	3740      	adds	r7, #64	; 0x40
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40004c00 	.word	0x40004c00
 800203c:	40023800 	.word	0x40023800
 8002040:	40022000 	.word	0x40022000
 8002044:	40020000 	.word	0x40020000
 8002048:	40005000 	.word	0x40005000
 800204c:	40020800 	.word	0x40020800
 8002050:	40020c00 	.word	0x40020c00
 8002054:	40007c00 	.word	0x40007c00
 8002058:	40021000 	.word	0x40021000

0800205c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800205c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002094 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002060:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002062:	e003      	b.n	800206c <LoopCopyDataInit>

08002064 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002066:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002068:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800206a:	3104      	adds	r1, #4

0800206c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800206c:	480b      	ldr	r0, [pc, #44]	; (800209c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800206e:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002070:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002072:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002074:	d3f6      	bcc.n	8002064 <CopyDataInit>
  ldr  r2, =_sbss
 8002076:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002078:	e002      	b.n	8002080 <LoopFillZerobss>

0800207a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800207a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800207c:	f842 3b04 	str.w	r3, [r2], #4

08002080 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002082:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002084:	d3f9      	bcc.n	800207a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002086:	f7ff fe45 	bl	8001d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800208a:	f005 f91d 	bl	80072c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800208e:	f7ff f92b 	bl	80012e8 <main>
  bx  lr    
 8002092:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002094:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002098:	08007f30 	.word	0x08007f30
  ldr  r0, =_sdata
 800209c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020a0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80020a4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80020a8:	2000045c 	.word	0x2000045c

080020ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020ac:	e7fe      	b.n	80020ac <ADC_IRQHandler>

080020ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b2:	2003      	movs	r0, #3
 80020b4:	f000 f94a 	bl	800234c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020b8:	2000      	movs	r0, #0
 80020ba:	f000 f805 	bl	80020c8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80020be:	f7ff fd31 	bl	8001b24 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_InitTick+0x54>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_InitTick+0x58>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	4619      	mov	r1, r3
 80020da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020de:	fbb3 f3f1 	udiv	r3, r3, r1
 80020e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 f994 	bl	8002414 <HAL_SYSTICK_Config>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e00e      	b.n	8002114 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b0f      	cmp	r3, #15
 80020fa:	d80a      	bhi.n	8002112 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020fc:	2200      	movs	r2, #0
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	f04f 30ff 	mov.w	r0, #4294967295
 8002104:	f000 f942 	bl	800238c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002108:	4a06      	ldr	r2, [pc, #24]	; (8002124 <HAL_InitTick+0x5c>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
 8002110:	e000      	b.n	8002114 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000000 	.word	0x20000000
 8002120:	20000008 	.word	0x20000008
 8002124:	20000004 	.word	0x20000004

08002128 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_IncTick+0x20>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_IncTick+0x24>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4413      	add	r3, r2
 8002138:	4a04      	ldr	r2, [pc, #16]	; (800214c <HAL_IncTick+0x24>)
 800213a:	6013      	str	r3, [r2, #0]
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20000008 	.word	0x20000008
 800214c:	20000454 	.word	0x20000454

08002150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return uwTick;
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <HAL_GetTick+0x14>)
 8002156:	681b      	ldr	r3, [r3, #0]
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000454 	.word	0x20000454

08002168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002170:	f7ff ffee 	bl	8002150 <HAL_GetTick>
 8002174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002180:	d005      	beq.n	800218e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002182:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <HAL_Delay+0x40>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4413      	add	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800218e:	bf00      	nop
 8002190:	f7ff ffde 	bl	8002150 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	429a      	cmp	r2, r3
 800219e:	d8f7      	bhi.n	8002190 <HAL_Delay+0x28>
  {
  }
}
 80021a0:	bf00      	nop
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000008 	.word	0x20000008

080021ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <__NVIC_SetPriorityGrouping+0x40>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021c8:	4013      	ands	r3, r2
 80021ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <__NVIC_SetPriorityGrouping+0x44>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021da:	4a04      	ldr	r2, [pc, #16]	; (80021ec <__NVIC_SetPriorityGrouping+0x40>)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	60d3      	str	r3, [r2, #12]
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000ed00 	.word	0xe000ed00
 80021f0:	05fa0000 	.word	0x05fa0000

080021f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <__NVIC_GetPriorityGrouping+0x18>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	0a1b      	lsrs	r3, r3, #8
 80021fe:	f003 0307 	and.w	r3, r3, #7
}
 8002202:	4618      	mov	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	2b00      	cmp	r3, #0
 8002220:	db0b      	blt.n	800223a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	f003 021f 	and.w	r2, r3, #31
 8002228:	4907      	ldr	r1, [pc, #28]	; (8002248 <__NVIC_EnableIRQ+0x38>)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	2001      	movs	r0, #1
 8002232:	fa00 f202 	lsl.w	r2, r0, r2
 8002236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	e000e100 	.word	0xe000e100

0800224c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	6039      	str	r1, [r7, #0]
 8002256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225c:	2b00      	cmp	r3, #0
 800225e:	db0a      	blt.n	8002276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	b2da      	uxtb	r2, r3
 8002264:	490c      	ldr	r1, [pc, #48]	; (8002298 <__NVIC_SetPriority+0x4c>)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	0112      	lsls	r2, r2, #4
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	440b      	add	r3, r1
 8002270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002274:	e00a      	b.n	800228c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4908      	ldr	r1, [pc, #32]	; (800229c <__NVIC_SetPriority+0x50>)
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	3b04      	subs	r3, #4
 8002284:	0112      	lsls	r2, r2, #4
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	440b      	add	r3, r1
 800228a:	761a      	strb	r2, [r3, #24]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000e100 	.word	0xe000e100
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	; 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f1c3 0307 	rsb	r3, r3, #7
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	bf28      	it	cs
 80022be:	2304      	movcs	r3, #4
 80022c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3304      	adds	r3, #4
 80022c6:	2b06      	cmp	r3, #6
 80022c8:	d902      	bls.n	80022d0 <NVIC_EncodePriority+0x30>
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3b03      	subs	r3, #3
 80022ce:	e000      	b.n	80022d2 <NVIC_EncodePriority+0x32>
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d4:	f04f 32ff 	mov.w	r2, #4294967295
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43da      	mvns	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	401a      	ands	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	fa01 f303 	lsl.w	r3, r1, r3
 80022f2:	43d9      	mvns	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f8:	4313      	orrs	r3, r2
         );
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3724      	adds	r7, #36	; 0x24
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3b01      	subs	r3, #1
 8002314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002318:	d301      	bcc.n	800231e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800231a:	2301      	movs	r3, #1
 800231c:	e00f      	b.n	800233e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800231e:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <SysTick_Config+0x40>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3b01      	subs	r3, #1
 8002324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002326:	210f      	movs	r1, #15
 8002328:	f04f 30ff 	mov.w	r0, #4294967295
 800232c:	f7ff ff8e 	bl	800224c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <SysTick_Config+0x40>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002336:	4b04      	ldr	r3, [pc, #16]	; (8002348 <SysTick_Config+0x40>)
 8002338:	2207      	movs	r2, #7
 800233a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	e000e010 	.word	0xe000e010

0800234c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b07      	cmp	r3, #7
 8002358:	d00f      	beq.n	800237a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b06      	cmp	r3, #6
 800235e:	d00c      	beq.n	800237a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b05      	cmp	r3, #5
 8002364:	d009      	beq.n	800237a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b04      	cmp	r3, #4
 800236a:	d006      	beq.n	800237a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d003      	beq.n	800237a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002372:	2192      	movs	r1, #146	; 0x92
 8002374:	4804      	ldr	r0, [pc, #16]	; (8002388 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002376:	f7ff f912 	bl	800159e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff ff16 	bl	80021ac <__NVIC_SetPriorityGrouping>
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	08007cc8 	.word	0x08007cc8

0800238c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b0f      	cmp	r3, #15
 80023a2:	d903      	bls.n	80023ac <HAL_NVIC_SetPriority+0x20>
 80023a4:	21aa      	movs	r1, #170	; 0xaa
 80023a6:	480e      	ldr	r0, [pc, #56]	; (80023e0 <HAL_NVIC_SetPriority+0x54>)
 80023a8:	f7ff f8f9 	bl	800159e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b0f      	cmp	r3, #15
 80023b0:	d903      	bls.n	80023ba <HAL_NVIC_SetPriority+0x2e>
 80023b2:	21ab      	movs	r1, #171	; 0xab
 80023b4:	480a      	ldr	r0, [pc, #40]	; (80023e0 <HAL_NVIC_SetPriority+0x54>)
 80023b6:	f7ff f8f2 	bl	800159e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023ba:	f7ff ff1b 	bl	80021f4 <__NVIC_GetPriorityGrouping>
 80023be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	68b9      	ldr	r1, [r7, #8]
 80023c4:	6978      	ldr	r0, [r7, #20]
 80023c6:	f7ff ff6b 	bl	80022a0 <NVIC_EncodePriority>
 80023ca:	4602      	mov	r2, r0
 80023cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff ff3a 	bl	800224c <__NVIC_SetPriority>
}
 80023d8:	bf00      	nop
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	08007cc8 	.word	0x08007cc8

080023e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	da03      	bge.n	80023fe <HAL_NVIC_EnableIRQ+0x1a>
 80023f6:	21be      	movs	r1, #190	; 0xbe
 80023f8:	4805      	ldr	r0, [pc, #20]	; (8002410 <HAL_NVIC_EnableIRQ+0x2c>)
 80023fa:	f7ff f8d0 	bl	800159e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff ff04 	bl	8002210 <__NVIC_EnableIRQ>
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	08007cc8 	.word	0x08007cc8

08002414 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ff73 	bl	8002308 <SysTick_Config>
 8002422:	4603      	mov	r3, r0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e0a5      	b.n	800258a <HAL_CRC_Init+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a54      	ldr	r2, [pc, #336]	; (8002594 <HAL_CRC_Init+0x168>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d003      	beq.n	8002450 <HAL_CRC_Init+0x24>
 8002448:	2170      	movs	r1, #112	; 0x70
 800244a:	4853      	ldr	r0, [pc, #332]	; (8002598 <HAL_CRC_Init+0x16c>)
 800244c:	f7ff f8a7 	bl	800159e <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7f5b      	ldrb	r3, [r3, #29]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d105      	bne.n	8002466 <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7fe fb41 	bl	8000ae8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2202      	movs	r2, #2
 800246a:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	791b      	ldrb	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d007      	beq.n	8002484 <HAL_CRC_Init+0x58>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	791b      	ldrb	r3, [r3, #4]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d003      	beq.n	8002484 <HAL_CRC_Init+0x58>
 800247c:	217e      	movs	r1, #126	; 0x7e
 800247e:	4846      	ldr	r0, [pc, #280]	; (8002598 <HAL_CRC_Init+0x16c>)
 8002480:	f7ff f88d 	bl	800159e <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	791b      	ldrb	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10c      	bne.n	80024a6 <HAL_CRC_Init+0x7a>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a42      	ldr	r2, [pc, #264]	; (800259c <HAL_CRC_Init+0x170>)
 8002492:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0218 	bic.w	r2, r2, #24
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	e00c      	b.n	80024c0 <HAL_CRC_Init+0x94>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6899      	ldr	r1, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	461a      	mov	r2, r3
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f875 	bl	80025a0 <HAL_CRCEx_Polynomial_Set>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_CRC_Init+0x94>
    {
      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e064      	b.n	800258a <HAL_CRC_Init+0x15e>
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	795b      	ldrb	r3, [r3, #5]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d007      	beq.n	80024d8 <HAL_CRC_Init+0xac>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	795b      	ldrb	r3, [r3, #5]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d003      	beq.n	80024d8 <HAL_CRC_Init+0xac>
 80024d0:	2190      	movs	r1, #144	; 0x90
 80024d2:	4831      	ldr	r0, [pc, #196]	; (8002598 <HAL_CRC_Init+0x16c>)
 80024d4:	f7ff f863 	bl	800159e <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	795b      	ldrb	r3, [r3, #5]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d105      	bne.n	80024ec <HAL_CRC_Init+0xc0>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f04f 32ff 	mov.w	r2, #4294967295
 80024e8:	611a      	str	r2, [r3, #16]
 80024ea:	e004      	b.n	80024f6 <HAL_CRC_Init+0xca>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6912      	ldr	r2, [r2, #16]
 80024f4:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00f      	beq.n	800251e <HAL_CRC_Init+0xf2>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	2b20      	cmp	r3, #32
 8002504:	d00b      	beq.n	800251e <HAL_CRC_Init+0xf2>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	2b40      	cmp	r3, #64	; 0x40
 800250c:	d007      	beq.n	800251e <HAL_CRC_Init+0xf2>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	2b60      	cmp	r3, #96	; 0x60
 8002514:	d003      	beq.n	800251e <HAL_CRC_Init+0xf2>
 8002516:	219c      	movs	r1, #156	; 0x9c
 8002518:	481f      	ldr	r0, [pc, #124]	; (8002598 <HAL_CRC_Init+0x16c>)
 800251a:	f7ff f840 	bl	800159e <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	695a      	ldr	r2, [r3, #20]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <HAL_CRC_Init+0x120>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	2b80      	cmp	r3, #128	; 0x80
 8002542:	d003      	beq.n	800254c <HAL_CRC_Init+0x120>
 8002544:	21a0      	movs	r1, #160	; 0xa0
 8002546:	4814      	ldr	r0, [pc, #80]	; (8002598 <HAL_CRC_Init+0x16c>)
 8002548:	f7ff f829 	bl	800159e <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699a      	ldr	r2, [r3, #24]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	609a      	str	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d00b      	beq.n	8002582 <HAL_CRC_Init+0x156>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d007      	beq.n	8002582 <HAL_CRC_Init+0x156>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	2b03      	cmp	r3, #3
 8002578:	d003      	beq.n	8002582 <HAL_CRC_Init+0x156>
 800257a:	21a5      	movs	r1, #165	; 0xa5
 800257c:	4806      	ldr	r0, [pc, #24]	; (8002598 <HAL_CRC_Init+0x16c>)
 800257e:	f7ff f80e 	bl	800159e <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40023000 	.word	0x40023000
 8002598:	08007d04 	.word	0x08007d04
 800259c:	04c11db7 	.word	0x04c11db7

080025a0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80025b0:	231f      	movs	r3, #31
 80025b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00c      	beq.n	80025d4 <HAL_CRCEx_Polynomial_Set+0x34>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d009      	beq.n	80025d4 <HAL_CRCEx_Polynomial_Set+0x34>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b10      	cmp	r3, #16
 80025c4:	d006      	beq.n	80025d4 <HAL_CRCEx_Polynomial_Set+0x34>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b18      	cmp	r3, #24
 80025ca:	d003      	beq.n	80025d4 <HAL_CRCEx_Polynomial_Set+0x34>
 80025cc:	215f      	movs	r1, #95	; 0x5f
 80025ce:	483e      	ldr	r0, [pc, #248]	; (80026c8 <HAL_CRCEx_Polynomial_Set+0x128>)
 80025d0:	f7fe ffe5 	bl	800159e <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80025d4:	bf00      	nop
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1e5a      	subs	r2, r3, #1
 80025da:	613a      	str	r2, [r7, #16]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d009      	beq.n	80025f4 <HAL_CRCEx_Polynomial_Set+0x54>
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0f0      	beq.n	80025d6 <HAL_CRCEx_Polynomial_Set+0x36>
  {
  }

  switch (PolyLength)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b18      	cmp	r3, #24
 80025f8:	d846      	bhi.n	8002688 <HAL_CRCEx_Polynomial_Set+0xe8>
 80025fa:	a201      	add	r2, pc, #4	; (adr r2, 8002600 <HAL_CRCEx_Polynomial_Set+0x60>)
 80025fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002600:	0800268f 	.word	0x0800268f
 8002604:	08002689 	.word	0x08002689
 8002608:	08002689 	.word	0x08002689
 800260c:	08002689 	.word	0x08002689
 8002610:	08002689 	.word	0x08002689
 8002614:	08002689 	.word	0x08002689
 8002618:	08002689 	.word	0x08002689
 800261c:	08002689 	.word	0x08002689
 8002620:	0800267d 	.word	0x0800267d
 8002624:	08002689 	.word	0x08002689
 8002628:	08002689 	.word	0x08002689
 800262c:	08002689 	.word	0x08002689
 8002630:	08002689 	.word	0x08002689
 8002634:	08002689 	.word	0x08002689
 8002638:	08002689 	.word	0x08002689
 800263c:	08002689 	.word	0x08002689
 8002640:	08002671 	.word	0x08002671
 8002644:	08002689 	.word	0x08002689
 8002648:	08002689 	.word	0x08002689
 800264c:	08002689 	.word	0x08002689
 8002650:	08002689 	.word	0x08002689
 8002654:	08002689 	.word	0x08002689
 8002658:	08002689 	.word	0x08002689
 800265c:	08002689 	.word	0x08002689
 8002660:	08002665 	.word	0x08002665
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	2b06      	cmp	r3, #6
 8002668:	d913      	bls.n	8002692 <HAL_CRCEx_Polynomial_Set+0xf2>
      {
        status =   HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800266e:	e010      	b.n	8002692 <HAL_CRCEx_Polynomial_Set+0xf2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	2b07      	cmp	r3, #7
 8002674:	d90f      	bls.n	8002696 <HAL_CRCEx_Polynomial_Set+0xf6>
      {
        status =   HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800267a:	e00c      	b.n	8002696 <HAL_CRCEx_Polynomial_Set+0xf6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	2b0f      	cmp	r3, #15
 8002680:	d90b      	bls.n	800269a <HAL_CRCEx_Polynomial_Set+0xfa>
      {
        status =   HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002686:	e008      	b.n	800269a <HAL_CRCEx_Polynomial_Set+0xfa>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	75fb      	strb	r3, [r7, #23]
      break;
 800268c:	e006      	b.n	800269c <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 800268e:	bf00      	nop
 8002690:	e004      	b.n	800269c <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8002692:	bf00      	nop
 8002694:	e002      	b.n	800269c <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8002696:	bf00      	nop
 8002698:	e000      	b.n	800269c <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 800269a:	bf00      	nop
  }
  if (status == HAL_OK)
 800269c:	7dfb      	ldrb	r3, [r7, #23]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10d      	bne.n	80026be <HAL_CRCEx_Polynomial_Set+0x11e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f023 0118 	bic.w	r1, r3, #24
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80026be:	7dfb      	ldrb	r3, [r7, #23]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	08007d3c 	.word	0x08007d3c

080026cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d004      	beq.n	80026ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2280      	movs	r2, #128	; 0x80
 80026e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00c      	b.n	8002704 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2205      	movs	r2, #5
 80026ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0201 	bic.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002722:	2300      	movs	r3, #0
 8002724:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002726:	2300      	movs	r3, #0
 8002728:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a42      	ldr	r2, [pc, #264]	; (8002838 <HAL_GPIO_Init+0x128>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d02b      	beq.n	800278a <HAL_GPIO_Init+0x7a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a41      	ldr	r2, [pc, #260]	; (800283c <HAL_GPIO_Init+0x12c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d027      	beq.n	800278a <HAL_GPIO_Init+0x7a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a40      	ldr	r2, [pc, #256]	; (8002840 <HAL_GPIO_Init+0x130>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d023      	beq.n	800278a <HAL_GPIO_Init+0x7a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a3f      	ldr	r2, [pc, #252]	; (8002844 <HAL_GPIO_Init+0x134>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d01f      	beq.n	800278a <HAL_GPIO_Init+0x7a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a3e      	ldr	r2, [pc, #248]	; (8002848 <HAL_GPIO_Init+0x138>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d01b      	beq.n	800278a <HAL_GPIO_Init+0x7a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a3d      	ldr	r2, [pc, #244]	; (800284c <HAL_GPIO_Init+0x13c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d017      	beq.n	800278a <HAL_GPIO_Init+0x7a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a3c      	ldr	r2, [pc, #240]	; (8002850 <HAL_GPIO_Init+0x140>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <HAL_GPIO_Init+0x7a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a3b      	ldr	r2, [pc, #236]	; (8002854 <HAL_GPIO_Init+0x144>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00f      	beq.n	800278a <HAL_GPIO_Init+0x7a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a3a      	ldr	r2, [pc, #232]	; (8002858 <HAL_GPIO_Init+0x148>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00b      	beq.n	800278a <HAL_GPIO_Init+0x7a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a39      	ldr	r2, [pc, #228]	; (800285c <HAL_GPIO_Init+0x14c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d007      	beq.n	800278a <HAL_GPIO_Init+0x7a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a38      	ldr	r2, [pc, #224]	; (8002860 <HAL_GPIO_Init+0x150>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0x7a>
 8002782:	21b1      	movs	r1, #177	; 0xb1
 8002784:	4837      	ldr	r0, [pc, #220]	; (8002864 <HAL_GPIO_Init+0x154>)
 8002786:	f7fe ff0a 	bl	800159e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	b29b      	uxth	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d103      	bne.n	800279c <HAL_GPIO_Init+0x8c>
 8002794:	21b2      	movs	r1, #178	; 0xb2
 8002796:	4833      	ldr	r0, [pc, #204]	; (8002864 <HAL_GPIO_Init+0x154>)
 8002798:	f7fe ff01 	bl	800159e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d035      	beq.n	8002810 <HAL_GPIO_Init+0x100>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d031      	beq.n	8002810 <HAL_GPIO_Init+0x100>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b11      	cmp	r3, #17
 80027b2:	d02d      	beq.n	8002810 <HAL_GPIO_Init+0x100>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d029      	beq.n	8002810 <HAL_GPIO_Init+0x100>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b12      	cmp	r3, #18
 80027c2:	d025      	beq.n	8002810 <HAL_GPIO_Init+0x100>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	4a27      	ldr	r2, [pc, #156]	; (8002868 <HAL_GPIO_Init+0x158>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d020      	beq.n	8002810 <HAL_GPIO_Init+0x100>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	4a26      	ldr	r2, [pc, #152]	; (800286c <HAL_GPIO_Init+0x15c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d01b      	beq.n	8002810 <HAL_GPIO_Init+0x100>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	4a24      	ldr	r2, [pc, #144]	; (8002870 <HAL_GPIO_Init+0x160>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d016      	beq.n	8002810 <HAL_GPIO_Init+0x100>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4a23      	ldr	r2, [pc, #140]	; (8002874 <HAL_GPIO_Init+0x164>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d011      	beq.n	8002810 <HAL_GPIO_Init+0x100>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	4a21      	ldr	r2, [pc, #132]	; (8002878 <HAL_GPIO_Init+0x168>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00c      	beq.n	8002810 <HAL_GPIO_Init+0x100>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4a20      	ldr	r2, [pc, #128]	; (800287c <HAL_GPIO_Init+0x16c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d007      	beq.n	8002810 <HAL_GPIO_Init+0x100>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b03      	cmp	r3, #3
 8002806:	d003      	beq.n	8002810 <HAL_GPIO_Init+0x100>
 8002808:	21b3      	movs	r1, #179	; 0xb3
 800280a:	4816      	ldr	r0, [pc, #88]	; (8002864 <HAL_GPIO_Init+0x154>)
 800280c:	f7fe fec7 	bl	800159e <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00b      	beq.n	8002830 <HAL_GPIO_Init+0x120>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d007      	beq.n	8002830 <HAL_GPIO_Init+0x120>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x120>
 8002828:	21b4      	movs	r1, #180	; 0xb4
 800282a:	480e      	ldr	r0, [pc, #56]	; (8002864 <HAL_GPIO_Init+0x154>)
 800282c:	f7fe feb7 	bl	800159e <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002830:	2300      	movs	r3, #0
 8002832:	61fb      	str	r3, [r7, #28]
 8002834:	e2d6      	b.n	8002de4 <HAL_GPIO_Init+0x6d4>
 8002836:	bf00      	nop
 8002838:	40020000 	.word	0x40020000
 800283c:	40020400 	.word	0x40020400
 8002840:	40020800 	.word	0x40020800
 8002844:	40020c00 	.word	0x40020c00
 8002848:	40021000 	.word	0x40021000
 800284c:	40021400 	.word	0x40021400
 8002850:	40021800 	.word	0x40021800
 8002854:	40021c00 	.word	0x40021c00
 8002858:	40022000 	.word	0x40022000
 800285c:	40022400 	.word	0x40022400
 8002860:	40022800 	.word	0x40022800
 8002864:	08007d78 	.word	0x08007d78
 8002868:	10110000 	.word	0x10110000
 800286c:	10210000 	.word	0x10210000
 8002870:	10310000 	.word	0x10310000
 8002874:	10120000 	.word	0x10120000
 8002878:	10220000 	.word	0x10220000
 800287c:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002880:	2201      	movs	r2, #1
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4013      	ands	r3, r2
 8002892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	429a      	cmp	r2, r3
 800289a:	f040 82a0 	bne.w	8002dde <HAL_GPIO_Init+0x6ce>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d00b      	beq.n	80028be <HAL_GPIO_Init+0x1ae>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d007      	beq.n	80028be <HAL_GPIO_Init+0x1ae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028b2:	2b11      	cmp	r3, #17
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_Init+0x1ae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b12      	cmp	r3, #18
 80028bc:	d144      	bne.n	8002948 <HAL_GPIO_Init+0x238>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00f      	beq.n	80028e6 <HAL_GPIO_Init+0x1d6>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d00b      	beq.n	80028e6 <HAL_GPIO_Init+0x1d6>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d007      	beq.n	80028e6 <HAL_GPIO_Init+0x1d6>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_Init+0x1d6>
 80028de:	21c6      	movs	r1, #198	; 0xc6
 80028e0:	482a      	ldr	r0, [pc, #168]	; (800298c <HAL_GPIO_Init+0x27c>)
 80028e2:	f7fe fe5c 	bl	800159e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	2203      	movs	r2, #3
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800291c:	2201      	movs	r2, #1
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	f003 0201 	and.w	r2, r3, #1
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	2203      	movs	r2, #3
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b02      	cmp	r3, #2
 800297e:	d007      	beq.n	8002990 <HAL_GPIO_Init+0x280>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b12      	cmp	r3, #18
 8002986:	f040 814b 	bne.w	8002c20 <HAL_GPIO_Init+0x510>
 800298a:	e001      	b.n	8002990 <HAL_GPIO_Init+0x280>
 800298c:	08007d78 	.word	0x08007d78
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 811f 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	f000 811a 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 8115 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 8110 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 810b 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	f000 8106 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	f000 8101 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	f000 80fc 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	f000 80f7 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	f000 80f2 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	f000 80ed 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	f000 80e8 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	f000 80e3 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	f000 80de 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	f000 80d9 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	f000 80d4 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	f000 80cf 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	f000 80ca 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	f000 80c5 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	f000 80c0 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	2b05      	cmp	r3, #5
 8002a5e:	f000 80bb 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2b05      	cmp	r3, #5
 8002a68:	f000 80b6 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	2b05      	cmp	r3, #5
 8002a72:	f000 80b1 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b05      	cmp	r3, #5
 8002a7c:	f000 80ac 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	2b05      	cmp	r3, #5
 8002a86:	f000 80a7 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	2b05      	cmp	r3, #5
 8002a90:	f000 80a2 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	2b06      	cmp	r3, #6
 8002a9a:	f000 809d 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	2b06      	cmp	r3, #6
 8002aa4:	f000 8098 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	2b07      	cmp	r3, #7
 8002aae:	f000 8093 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	2b07      	cmp	r3, #7
 8002ab8:	f000 808e 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	2b07      	cmp	r3, #7
 8002ac2:	f000 8089 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	2b07      	cmp	r3, #7
 8002acc:	f000 8084 	beq.w	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	2b07      	cmp	r3, #7
 8002ad6:	d07f      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	2b07      	cmp	r3, #7
 8002ade:	d07b      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	2b07      	cmp	r3, #7
 8002ae6:	d077      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d073      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d06f      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d06b      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d067      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d063      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d05f      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d05b      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2b09      	cmp	r3, #9
 8002b26:	d057      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	2b09      	cmp	r3, #9
 8002b2e:	d053      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	2b09      	cmp	r3, #9
 8002b36:	d04f      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	2b09      	cmp	r3, #9
 8002b3e:	d04b      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	2b09      	cmp	r3, #9
 8002b46:	d047      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	2b09      	cmp	r3, #9
 8002b4e:	d043      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	2b09      	cmp	r3, #9
 8002b56:	d03f      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	2b0a      	cmp	r3, #10
 8002b5e:	d03b      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	2b0a      	cmp	r3, #10
 8002b66:	d037      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	2b0a      	cmp	r3, #10
 8002b6e:	d033      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	2b0a      	cmp	r3, #10
 8002b76:	d02f      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	2b0b      	cmp	r3, #11
 8002b7e:	d02b      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	2b0a      	cmp	r3, #10
 8002b86:	d027      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	2b0b      	cmp	r3, #11
 8002b8e:	d023      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	2b0b      	cmp	r3, #11
 8002b96:	d01f      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	2b0c      	cmp	r3, #12
 8002b9e:	d01b      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	2b0c      	cmp	r3, #12
 8002ba6:	d017      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	2b0c      	cmp	r3, #12
 8002bae:	d013      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	2b0f      	cmp	r3, #15
 8002bb6:	d00f      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	2b0d      	cmp	r3, #13
 8002bbe:	d00b      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	2b0e      	cmp	r3, #14
 8002bc6:	d007      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	2b0d      	cmp	r3, #13
 8002bce:	d003      	beq.n	8002bd8 <HAL_GPIO_Init+0x4c8>
 8002bd0:	21de      	movs	r1, #222	; 0xde
 8002bd2:	4888      	ldr	r0, [pc, #544]	; (8002df4 <HAL_GPIO_Init+0x6e4>)
 8002bd4:	f7fe fce3 	bl	800159e <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	08da      	lsrs	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3208      	adds	r2, #8
 8002be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	220f      	movs	r2, #15
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	08da      	lsrs	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3208      	adds	r2, #8
 8002c1a:	69b9      	ldr	r1, [r7, #24]
 8002c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0203 	and.w	r2, r3, #3
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80be 	beq.w	8002dde <HAL_GPIO_Init+0x6ce>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c62:	4b65      	ldr	r3, [pc, #404]	; (8002df8 <HAL_GPIO_Init+0x6e8>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	4a64      	ldr	r2, [pc, #400]	; (8002df8 <HAL_GPIO_Init+0x6e8>)
 8002c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6e:	4b62      	ldr	r3, [pc, #392]	; (8002df8 <HAL_GPIO_Init+0x6e8>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c7a:	4a60      	ldr	r2, [pc, #384]	; (8002dfc <HAL_GPIO_Init+0x6ec>)
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	089b      	lsrs	r3, r3, #2
 8002c80:	3302      	adds	r3, #2
 8002c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	220f      	movs	r2, #15
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a57      	ldr	r2, [pc, #348]	; (8002e00 <HAL_GPIO_Init+0x6f0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d037      	beq.n	8002d16 <HAL_GPIO_Init+0x606>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a56      	ldr	r2, [pc, #344]	; (8002e04 <HAL_GPIO_Init+0x6f4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d031      	beq.n	8002d12 <HAL_GPIO_Init+0x602>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a55      	ldr	r2, [pc, #340]	; (8002e08 <HAL_GPIO_Init+0x6f8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d02b      	beq.n	8002d0e <HAL_GPIO_Init+0x5fe>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a54      	ldr	r2, [pc, #336]	; (8002e0c <HAL_GPIO_Init+0x6fc>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d025      	beq.n	8002d0a <HAL_GPIO_Init+0x5fa>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a53      	ldr	r2, [pc, #332]	; (8002e10 <HAL_GPIO_Init+0x700>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d01f      	beq.n	8002d06 <HAL_GPIO_Init+0x5f6>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a52      	ldr	r2, [pc, #328]	; (8002e14 <HAL_GPIO_Init+0x704>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d019      	beq.n	8002d02 <HAL_GPIO_Init+0x5f2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a51      	ldr	r2, [pc, #324]	; (8002e18 <HAL_GPIO_Init+0x708>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <HAL_GPIO_Init+0x5ee>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a50      	ldr	r2, [pc, #320]	; (8002e1c <HAL_GPIO_Init+0x70c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00d      	beq.n	8002cfa <HAL_GPIO_Init+0x5ea>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a4f      	ldr	r2, [pc, #316]	; (8002e20 <HAL_GPIO_Init+0x710>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <HAL_GPIO_Init+0x5e6>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a4e      	ldr	r2, [pc, #312]	; (8002e24 <HAL_GPIO_Init+0x714>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_GPIO_Init+0x5e2>
 8002cee:	2309      	movs	r3, #9
 8002cf0:	e012      	b.n	8002d18 <HAL_GPIO_Init+0x608>
 8002cf2:	230a      	movs	r3, #10
 8002cf4:	e010      	b.n	8002d18 <HAL_GPIO_Init+0x608>
 8002cf6:	2308      	movs	r3, #8
 8002cf8:	e00e      	b.n	8002d18 <HAL_GPIO_Init+0x608>
 8002cfa:	2307      	movs	r3, #7
 8002cfc:	e00c      	b.n	8002d18 <HAL_GPIO_Init+0x608>
 8002cfe:	2306      	movs	r3, #6
 8002d00:	e00a      	b.n	8002d18 <HAL_GPIO_Init+0x608>
 8002d02:	2305      	movs	r3, #5
 8002d04:	e008      	b.n	8002d18 <HAL_GPIO_Init+0x608>
 8002d06:	2304      	movs	r3, #4
 8002d08:	e006      	b.n	8002d18 <HAL_GPIO_Init+0x608>
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e004      	b.n	8002d18 <HAL_GPIO_Init+0x608>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e002      	b.n	8002d18 <HAL_GPIO_Init+0x608>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_GPIO_Init+0x608>
 8002d16:	2300      	movs	r3, #0
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	f002 0203 	and.w	r2, r2, #3
 8002d1e:	0092      	lsls	r2, r2, #2
 8002d20:	4093      	lsls	r3, r2
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d28:	4934      	ldr	r1, [pc, #208]	; (8002dfc <HAL_GPIO_Init+0x6ec>)
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	089b      	lsrs	r3, r3, #2
 8002d2e:	3302      	adds	r3, #2
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d36:	4b3c      	ldr	r3, [pc, #240]	; (8002e28 <HAL_GPIO_Init+0x718>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x64a>
        {
          temp |= iocurrent;
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d5a:	4a33      	ldr	r2, [pc, #204]	; (8002e28 <HAL_GPIO_Init+0x718>)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d60:	4b31      	ldr	r3, [pc, #196]	; (8002e28 <HAL_GPIO_Init+0x718>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x674>
        {
          temp |= iocurrent;
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d84:	4a28      	ldr	r2, [pc, #160]	; (8002e28 <HAL_GPIO_Init+0x718>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d8a:	4b27      	ldr	r3, [pc, #156]	; (8002e28 <HAL_GPIO_Init+0x718>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_Init+0x69e>
        {
          temp |= iocurrent;
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dae:	4a1e      	ldr	r2, [pc, #120]	; (8002e28 <HAL_GPIO_Init+0x718>)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002db4:	4b1c      	ldr	r3, [pc, #112]	; (8002e28 <HAL_GPIO_Init+0x718>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_GPIO_Init+0x6c8>
        {
          temp |= iocurrent;
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dd8:	4a13      	ldr	r2, [pc, #76]	; (8002e28 <HAL_GPIO_Init+0x718>)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3301      	adds	r3, #1
 8002de2:	61fb      	str	r3, [r7, #28]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	2b0f      	cmp	r3, #15
 8002de8:	f67f ad4a 	bls.w	8002880 <HAL_GPIO_Init+0x170>
      }
    }
  }
}
 8002dec:	bf00      	nop
 8002dee:	3720      	adds	r7, #32
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	08007d78 	.word	0x08007d78
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40013800 	.word	0x40013800
 8002e00:	40020000 	.word	0x40020000
 8002e04:	40020400 	.word	0x40020400
 8002e08:	40020800 	.word	0x40020800
 8002e0c:	40020c00 	.word	0x40020c00
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40021400 	.word	0x40021400
 8002e18:	40021800 	.word	0x40021800
 8002e1c:	40021c00 	.word	0x40021c00
 8002e20:	40022000 	.word	0x40022000
 8002e24:	40022400 	.word	0x40022400
 8002e28:	40013c00 	.word	0x40013c00

08002e2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002e38:	887b      	ldrh	r3, [r7, #2]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d104      	bne.n	8002e48 <HAL_GPIO_ReadPin+0x1c>
 8002e3e:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8002e42:	4809      	ldr	r0, [pc, #36]	; (8002e68 <HAL_GPIO_ReadPin+0x3c>)
 8002e44:	f7fe fbab 	bl	800159e <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	887b      	ldrh	r3, [r7, #2]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e54:	2301      	movs	r3, #1
 8002e56:	73fb      	strb	r3, [r7, #15]
 8002e58:	e001      	b.n	8002e5e <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	08007d78 	.word	0x08007d78

08002e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	807b      	strh	r3, [r7, #2]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002e7c:	887b      	ldrh	r3, [r7, #2]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d104      	bne.n	8002e8c <HAL_GPIO_WritePin+0x20>
 8002e82:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8002e86:	480e      	ldr	r0, [pc, #56]	; (8002ec0 <HAL_GPIO_WritePin+0x54>)
 8002e88:	f7fe fb89 	bl	800159e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002e8c:	787b      	ldrb	r3, [r7, #1]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <HAL_GPIO_WritePin+0x36>
 8002e92:	787b      	ldrb	r3, [r7, #1]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d004      	beq.n	8002ea2 <HAL_GPIO_WritePin+0x36>
 8002e98:	f240 119b 	movw	r1, #411	; 0x19b
 8002e9c:	4808      	ldr	r0, [pc, #32]	; (8002ec0 <HAL_GPIO_WritePin+0x54>)
 8002e9e:	f7fe fb7e 	bl	800159e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002ea2:	787b      	ldrb	r3, [r7, #1]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ea8:	887a      	ldrh	r2, [r7, #2]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002eae:	e003      	b.n	8002eb8 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002eb0:	887b      	ldrh	r3, [r7, #2]
 8002eb2:	041a      	lsls	r2, r3, #16
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	619a      	str	r2, [r3, #24]
}
 8002eb8:	bf00      	nop
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	08007d78 	.word	0x08007d78

08002ec4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ece:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d006      	beq.n	8002ee8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eda:	4a05      	ldr	r2, [pc, #20]	; (8002ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 f806 	bl	8002ef4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ee8:	bf00      	nop
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40013c00 	.word	0x40013c00

08002ef4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f16:	4b23      	ldr	r3, [pc, #140]	; (8002fa4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	4a22      	ldr	r2, [pc, #136]	; (8002fa4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f20:	6413      	str	r3, [r2, #64]	; 0x40
 8002f22:	4b20      	ldr	r3, [pc, #128]	; (8002fa4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f2e:	4b1e      	ldr	r3, [pc, #120]	; (8002fa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1d      	ldr	r2, [pc, #116]	; (8002fa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f38:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f3a:	f7ff f909 	bl	8002150 <HAL_GetTick>
 8002f3e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f40:	e009      	b.n	8002f56 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f42:	f7ff f905 	bl	8002150 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f50:	d901      	bls.n	8002f56 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e022      	b.n	8002f9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f56:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f62:	d1ee      	bne.n	8002f42 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f64:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a0f      	ldr	r2, [pc, #60]	; (8002fa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f6e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f70:	f7ff f8ee 	bl	8002150 <HAL_GetTick>
 8002f74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f76:	e009      	b.n	8002f8c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f78:	f7ff f8ea 	bl	8002150 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f86:	d901      	bls.n	8002f8c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e007      	b.n	8002f9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f98:	d1ee      	bne.n	8002f78 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40007000 	.word	0x40007000

08002fac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e35c      	b.n	800367c <HAL_RCC_OscConfig+0x6d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b0f      	cmp	r3, #15
 8002fc8:	d904      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x28>
 8002fca:	f240 1165 	movw	r1, #357	; 0x165
 8002fce:	4892      	ldr	r0, [pc, #584]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	f7fe fae5 	bl	800159e <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 809a 	beq.w	8003116 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00e      	beq.n	8003008 <HAL_RCC_OscConfig+0x5c>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff2:	d009      	beq.n	8003008 <HAL_RCC_OscConfig+0x5c>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ffc:	d004      	beq.n	8003008 <HAL_RCC_OscConfig+0x5c>
 8002ffe:	f240 116b 	movw	r1, #363	; 0x16b
 8003002:	4885      	ldr	r0, [pc, #532]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8003004:	f7fe facb 	bl	800159e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003008:	4b84      	ldr	r3, [pc, #528]	; (800321c <HAL_RCC_OscConfig+0x270>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 030c 	and.w	r3, r3, #12
 8003010:	2b04      	cmp	r3, #4
 8003012:	d00c      	beq.n	800302e <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003014:	4b81      	ldr	r3, [pc, #516]	; (800321c <HAL_RCC_OscConfig+0x270>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 030c 	and.w	r3, r3, #12
 800301c:	2b08      	cmp	r3, #8
 800301e:	d112      	bne.n	8003046 <HAL_RCC_OscConfig+0x9a>
 8003020:	4b7e      	ldr	r3, [pc, #504]	; (800321c <HAL_RCC_OscConfig+0x270>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003028:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800302c:	d10b      	bne.n	8003046 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302e:	4b7b      	ldr	r3, [pc, #492]	; (800321c <HAL_RCC_OscConfig+0x270>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d06c      	beq.n	8003114 <HAL_RCC_OscConfig+0x168>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d168      	bne.n	8003114 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e31a      	b.n	800367c <HAL_RCC_OscConfig+0x6d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800304e:	d106      	bne.n	800305e <HAL_RCC_OscConfig+0xb2>
 8003050:	4b72      	ldr	r3, [pc, #456]	; (800321c <HAL_RCC_OscConfig+0x270>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a71      	ldr	r2, [pc, #452]	; (800321c <HAL_RCC_OscConfig+0x270>)
 8003056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	e02e      	b.n	80030bc <HAL_RCC_OscConfig+0x110>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10c      	bne.n	8003080 <HAL_RCC_OscConfig+0xd4>
 8003066:	4b6d      	ldr	r3, [pc, #436]	; (800321c <HAL_RCC_OscConfig+0x270>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a6c      	ldr	r2, [pc, #432]	; (800321c <HAL_RCC_OscConfig+0x270>)
 800306c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	4b6a      	ldr	r3, [pc, #424]	; (800321c <HAL_RCC_OscConfig+0x270>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a69      	ldr	r2, [pc, #420]	; (800321c <HAL_RCC_OscConfig+0x270>)
 8003078:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e01d      	b.n	80030bc <HAL_RCC_OscConfig+0x110>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0xf8>
 800308a:	4b64      	ldr	r3, [pc, #400]	; (800321c <HAL_RCC_OscConfig+0x270>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a63      	ldr	r2, [pc, #396]	; (800321c <HAL_RCC_OscConfig+0x270>)
 8003090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	4b61      	ldr	r3, [pc, #388]	; (800321c <HAL_RCC_OscConfig+0x270>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a60      	ldr	r2, [pc, #384]	; (800321c <HAL_RCC_OscConfig+0x270>)
 800309c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e00b      	b.n	80030bc <HAL_RCC_OscConfig+0x110>
 80030a4:	4b5d      	ldr	r3, [pc, #372]	; (800321c <HAL_RCC_OscConfig+0x270>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a5c      	ldr	r2, [pc, #368]	; (800321c <HAL_RCC_OscConfig+0x270>)
 80030aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	4b5a      	ldr	r3, [pc, #360]	; (800321c <HAL_RCC_OscConfig+0x270>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a59      	ldr	r2, [pc, #356]	; (800321c <HAL_RCC_OscConfig+0x270>)
 80030b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d013      	beq.n	80030ec <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c4:	f7ff f844 	bl	8002150 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030cc:	f7ff f840 	bl	8002150 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e2ce      	b.n	800367c <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	4b4f      	ldr	r3, [pc, #316]	; (800321c <HAL_RCC_OscConfig+0x270>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0x120>
 80030ea:	e014      	b.n	8003116 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7ff f830 	bl	8002150 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f4:	f7ff f82c 	bl	8002150 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	; 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e2ba      	b.n	800367c <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003106:	4b45      	ldr	r3, [pc, #276]	; (800321c <HAL_RCC_OscConfig+0x270>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x148>
 8003112:	e000      	b.n	8003116 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 8084 	beq.w	800322c <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d008      	beq.n	800313e <HAL_RCC_OscConfig+0x192>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d004      	beq.n	800313e <HAL_RCC_OscConfig+0x192>
 8003134:	f240 119d 	movw	r1, #413	; 0x19d
 8003138:	4837      	ldr	r0, [pc, #220]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 800313a:	f7fe fa30 	bl	800159e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	2b1f      	cmp	r3, #31
 8003144:	d904      	bls.n	8003150 <HAL_RCC_OscConfig+0x1a4>
 8003146:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800314a:	4833      	ldr	r0, [pc, #204]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 800314c:	f7fe fa27 	bl	800159e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003150:	4b32      	ldr	r3, [pc, #200]	; (800321c <HAL_RCC_OscConfig+0x270>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 030c 	and.w	r3, r3, #12
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00b      	beq.n	8003174 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800315c:	4b2f      	ldr	r3, [pc, #188]	; (800321c <HAL_RCC_OscConfig+0x270>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 030c 	and.w	r3, r3, #12
 8003164:	2b08      	cmp	r3, #8
 8003166:	d11c      	bne.n	80031a2 <HAL_RCC_OscConfig+0x1f6>
 8003168:	4b2c      	ldr	r3, [pc, #176]	; (800321c <HAL_RCC_OscConfig+0x270>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d116      	bne.n	80031a2 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003174:	4b29      	ldr	r3, [pc, #164]	; (800321c <HAL_RCC_OscConfig+0x270>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_RCC_OscConfig+0x1e0>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d001      	beq.n	800318c <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e277      	b.n	800367c <HAL_RCC_OscConfig+0x6d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318c:	4b23      	ldr	r3, [pc, #140]	; (800321c <HAL_RCC_OscConfig+0x270>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4920      	ldr	r1, [pc, #128]	; (800321c <HAL_RCC_OscConfig+0x270>)
 800319c:	4313      	orrs	r3, r2
 800319e:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a0:	e044      	b.n	800322c <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d023      	beq.n	80031f2 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031aa:	4b1c      	ldr	r3, [pc, #112]	; (800321c <HAL_RCC_OscConfig+0x270>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a1b      	ldr	r2, [pc, #108]	; (800321c <HAL_RCC_OscConfig+0x270>)
 80031b0:	f043 0301 	orr.w	r3, r3, #1
 80031b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b6:	f7fe ffcb 	bl	8002150 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031be:	f7fe ffc7 	bl	8002150 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e255      	b.n	800367c <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d0:	4b12      	ldr	r3, [pc, #72]	; (800321c <HAL_RCC_OscConfig+0x270>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f0      	beq.n	80031be <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031dc:	4b0f      	ldr	r3, [pc, #60]	; (800321c <HAL_RCC_OscConfig+0x270>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	490c      	ldr	r1, [pc, #48]	; (800321c <HAL_RCC_OscConfig+0x270>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	600b      	str	r3, [r1, #0]
 80031f0:	e01c      	b.n	800322c <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031f2:	4b0a      	ldr	r3, [pc, #40]	; (800321c <HAL_RCC_OscConfig+0x270>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a09      	ldr	r2, [pc, #36]	; (800321c <HAL_RCC_OscConfig+0x270>)
 80031f8:	f023 0301 	bic.w	r3, r3, #1
 80031fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fe:	f7fe ffa7 	bl	8002150 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003204:	e00c      	b.n	8003220 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003206:	f7fe ffa3 	bl	8002150 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d905      	bls.n	8003220 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e231      	b.n	800367c <HAL_RCC_OscConfig+0x6d0>
 8003218:	08007db4 	.word	0x08007db4
 800321c:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003220:	4b7e      	ldr	r3, [pc, #504]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1ec      	bne.n	8003206 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b00      	cmp	r3, #0
 8003236:	d043      	beq.n	80032c0 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_RCC_OscConfig+0x2a6>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d004      	beq.n	8003252 <HAL_RCC_OscConfig+0x2a6>
 8003248:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800324c:	4874      	ldr	r0, [pc, #464]	; (8003420 <HAL_RCC_OscConfig+0x474>)
 800324e:	f7fe f9a6 	bl	800159e <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d019      	beq.n	800328e <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800325a:	4b70      	ldr	r3, [pc, #448]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800325c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325e:	4a6f      	ldr	r2, [pc, #444]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003266:	f7fe ff73 	bl	8002150 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800326e:	f7fe ff6f 	bl	8002150 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e1fd      	b.n	800367c <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003280:	4b66      	ldr	r3, [pc, #408]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0f0      	beq.n	800326e <HAL_RCC_OscConfig+0x2c2>
 800328c:	e018      	b.n	80032c0 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800328e:	4b63      	ldr	r3, [pc, #396]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003292:	4a62      	ldr	r2, [pc, #392]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003294:	f023 0301 	bic.w	r3, r3, #1
 8003298:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329a:	f7fe ff59 	bl	8002150 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a2:	f7fe ff55 	bl	8002150 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e1e3      	b.n	800367c <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b4:	4b59      	ldr	r3, [pc, #356]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1f0      	bne.n	80032a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 80bc 	beq.w	8003446 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00c      	beq.n	80032f0 <HAL_RCC_OscConfig+0x344>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d008      	beq.n	80032f0 <HAL_RCC_OscConfig+0x344>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b05      	cmp	r3, #5
 80032e4:	d004      	beq.n	80032f0 <HAL_RCC_OscConfig+0x344>
 80032e6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80032ea:	484d      	ldr	r0, [pc, #308]	; (8003420 <HAL_RCC_OscConfig+0x474>)
 80032ec:	f7fe f957 	bl	800159e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032f0:	4b4a      	ldr	r3, [pc, #296]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10d      	bne.n	8003318 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fc:	4b47      	ldr	r3, [pc, #284]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	4a46      	ldr	r2, [pc, #280]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003306:	6413      	str	r3, [r2, #64]	; 0x40
 8003308:	4b44      	ldr	r3, [pc, #272]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003314:	2301      	movs	r3, #1
 8003316:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003318:	4b42      	ldr	r3, [pc, #264]	; (8003424 <HAL_RCC_OscConfig+0x478>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003320:	2b00      	cmp	r3, #0
 8003322:	d118      	bne.n	8003356 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003324:	4b3f      	ldr	r3, [pc, #252]	; (8003424 <HAL_RCC_OscConfig+0x478>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a3e      	ldr	r2, [pc, #248]	; (8003424 <HAL_RCC_OscConfig+0x478>)
 800332a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800332e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003330:	f7fe ff0e 	bl	8002150 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003338:	f7fe ff0a 	bl	8002150 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b64      	cmp	r3, #100	; 0x64
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e198      	b.n	800367c <HAL_RCC_OscConfig+0x6d0>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800334a:	4b36      	ldr	r3, [pc, #216]	; (8003424 <HAL_RCC_OscConfig+0x478>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d106      	bne.n	800336c <HAL_RCC_OscConfig+0x3c0>
 800335e:	4b2f      	ldr	r3, [pc, #188]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003362:	4a2e      	ldr	r2, [pc, #184]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	6713      	str	r3, [r2, #112]	; 0x70
 800336a:	e02d      	b.n	80033c8 <HAL_RCC_OscConfig+0x41c>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10c      	bne.n	800338e <HAL_RCC_OscConfig+0x3e2>
 8003374:	4b29      	ldr	r3, [pc, #164]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003378:	4a28      	ldr	r2, [pc, #160]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800337a:	f023 0301 	bic.w	r3, r3, #1
 800337e:	6713      	str	r3, [r2, #112]	; 0x70
 8003380:	4b26      	ldr	r3, [pc, #152]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003384:	4a25      	ldr	r2, [pc, #148]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003386:	f023 0304 	bic.w	r3, r3, #4
 800338a:	6713      	str	r3, [r2, #112]	; 0x70
 800338c:	e01c      	b.n	80033c8 <HAL_RCC_OscConfig+0x41c>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2b05      	cmp	r3, #5
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x404>
 8003396:	4b21      	ldr	r3, [pc, #132]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	4a20      	ldr	r2, [pc, #128]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800339c:	f043 0304 	orr.w	r3, r3, #4
 80033a0:	6713      	str	r3, [r2, #112]	; 0x70
 80033a2:	4b1e      	ldr	r3, [pc, #120]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a6:	4a1d      	ldr	r2, [pc, #116]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	6713      	str	r3, [r2, #112]	; 0x70
 80033ae:	e00b      	b.n	80033c8 <HAL_RCC_OscConfig+0x41c>
 80033b0:	4b1a      	ldr	r3, [pc, #104]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	4a19      	ldr	r2, [pc, #100]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80033b6:	f023 0301 	bic.w	r3, r3, #1
 80033ba:	6713      	str	r3, [r2, #112]	; 0x70
 80033bc:	4b17      	ldr	r3, [pc, #92]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	4a16      	ldr	r2, [pc, #88]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80033c2:	f023 0304 	bic.w	r3, r3, #4
 80033c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d015      	beq.n	80033fc <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d0:	f7fe febe 	bl	8002150 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d6:	e00a      	b.n	80033ee <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d8:	f7fe feba 	bl	8002150 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e146      	b.n	800367c <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ee:	4b0b      	ldr	r3, [pc, #44]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0ee      	beq.n	80033d8 <HAL_RCC_OscConfig+0x42c>
 80033fa:	e01b      	b.n	8003434 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fc:	f7fe fea8 	bl	8002150 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003402:	e011      	b.n	8003428 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003404:	f7fe fea4 	bl	8002150 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d908      	bls.n	8003428 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e130      	b.n	800367c <HAL_RCC_OscConfig+0x6d0>
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800
 8003420:	08007db4 	.word	0x08007db4
 8003424:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003428:	4b96      	ldr	r3, [pc, #600]	; (8003684 <HAL_RCC_OscConfig+0x6d8>)
 800342a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1e7      	bne.n	8003404 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003434:	7dfb      	ldrb	r3, [r7, #23]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d105      	bne.n	8003446 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343a:	4b92      	ldr	r3, [pc, #584]	; (8003684 <HAL_RCC_OscConfig+0x6d8>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	4a91      	ldr	r2, [pc, #580]	; (8003684 <HAL_RCC_OscConfig+0x6d8>)
 8003440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003444:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00c      	beq.n	8003468 <HAL_RCC_OscConfig+0x4bc>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d008      	beq.n	8003468 <HAL_RCC_OscConfig+0x4bc>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d004      	beq.n	8003468 <HAL_RCC_OscConfig+0x4bc>
 800345e:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8003462:	4889      	ldr	r0, [pc, #548]	; (8003688 <HAL_RCC_OscConfig+0x6dc>)
 8003464:	f7fe f89b 	bl	800159e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 8104 	beq.w	800367a <HAL_RCC_OscConfig+0x6ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003472:	4b84      	ldr	r3, [pc, #528]	; (8003684 <HAL_RCC_OscConfig+0x6d8>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b08      	cmp	r3, #8
 800347c:	f000 80c3 	beq.w	8003606 <HAL_RCC_OscConfig+0x65a>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	2b02      	cmp	r3, #2
 8003486:	f040 80a4 	bne.w	80035d2 <HAL_RCC_OscConfig+0x626>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d009      	beq.n	80034a6 <HAL_RCC_OscConfig+0x4fa>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800349a:	d004      	beq.n	80034a6 <HAL_RCC_OscConfig+0x4fa>
 800349c:	f240 2155 	movw	r1, #597	; 0x255
 80034a0:	4879      	ldr	r0, [pc, #484]	; (8003688 <HAL_RCC_OscConfig+0x6dc>)
 80034a2:	f7fe f87c 	bl	800159e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d903      	bls.n	80034b6 <HAL_RCC_OscConfig+0x50a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	2b3f      	cmp	r3, #63	; 0x3f
 80034b4:	d904      	bls.n	80034c0 <HAL_RCC_OscConfig+0x514>
 80034b6:	f240 2156 	movw	r1, #598	; 0x256
 80034ba:	4873      	ldr	r0, [pc, #460]	; (8003688 <HAL_RCC_OscConfig+0x6dc>)
 80034bc:	f7fe f86f 	bl	800159e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	2b31      	cmp	r3, #49	; 0x31
 80034c6:	d904      	bls.n	80034d2 <HAL_RCC_OscConfig+0x526>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80034d0:	d904      	bls.n	80034dc <HAL_RCC_OscConfig+0x530>
 80034d2:	f240 2157 	movw	r1, #599	; 0x257
 80034d6:	486c      	ldr	r0, [pc, #432]	; (8003688 <HAL_RCC_OscConfig+0x6dc>)
 80034d8:	f7fe f861 	bl	800159e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d010      	beq.n	8003506 <HAL_RCC_OscConfig+0x55a>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d00c      	beq.n	8003506 <HAL_RCC_OscConfig+0x55a>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f0:	2b06      	cmp	r3, #6
 80034f2:	d008      	beq.n	8003506 <HAL_RCC_OscConfig+0x55a>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d004      	beq.n	8003506 <HAL_RCC_OscConfig+0x55a>
 80034fc:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003500:	4861      	ldr	r0, [pc, #388]	; (8003688 <HAL_RCC_OscConfig+0x6dc>)
 8003502:	f7fe f84c 	bl	800159e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	2b01      	cmp	r3, #1
 800350c:	d903      	bls.n	8003516 <HAL_RCC_OscConfig+0x56a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	2b0f      	cmp	r3, #15
 8003514:	d904      	bls.n	8003520 <HAL_RCC_OscConfig+0x574>
 8003516:	f240 2159 	movw	r1, #601	; 0x259
 800351a:	485b      	ldr	r0, [pc, #364]	; (8003688 <HAL_RCC_OscConfig+0x6dc>)
 800351c:	f7fe f83f 	bl	800159e <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	2b01      	cmp	r3, #1
 8003526:	d903      	bls.n	8003530 <HAL_RCC_OscConfig+0x584>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352c:	2b07      	cmp	r3, #7
 800352e:	d904      	bls.n	800353a <HAL_RCC_OscConfig+0x58e>
 8003530:	f240 215b 	movw	r1, #603	; 0x25b
 8003534:	4854      	ldr	r0, [pc, #336]	; (8003688 <HAL_RCC_OscConfig+0x6dc>)
 8003536:	f7fe f832 	bl	800159e <assert_failed>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353a:	4b52      	ldr	r3, [pc, #328]	; (8003684 <HAL_RCC_OscConfig+0x6d8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a51      	ldr	r2, [pc, #324]	; (8003684 <HAL_RCC_OscConfig+0x6d8>)
 8003540:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003544:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003546:	f7fe fe03 	bl	8002150 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x5b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800354e:	f7fe fdff 	bl	8002150 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x5b4>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e08d      	b.n	800367c <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003560:	4b48      	ldr	r3, [pc, #288]	; (8003684 <HAL_RCC_OscConfig+0x6d8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1f0      	bne.n	800354e <HAL_RCC_OscConfig+0x5a2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	019b      	lsls	r3, r3, #6
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	085b      	lsrs	r3, r3, #1
 8003584:	3b01      	subs	r3, #1
 8003586:	041b      	lsls	r3, r3, #16
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	061b      	lsls	r3, r3, #24
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	071b      	lsls	r3, r3, #28
 8003598:	493a      	ldr	r1, [pc, #232]	; (8003684 <HAL_RCC_OscConfig+0x6d8>)
 800359a:	4313      	orrs	r3, r2
 800359c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800359e:	4b39      	ldr	r3, [pc, #228]	; (8003684 <HAL_RCC_OscConfig+0x6d8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a38      	ldr	r2, [pc, #224]	; (8003684 <HAL_RCC_OscConfig+0x6d8>)
 80035a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035aa:	f7fe fdd1 	bl	8002150 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x618>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b2:	f7fe fdcd 	bl	8002150 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e05b      	b.n	800367c <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c4:	4b2f      	ldr	r3, [pc, #188]	; (8003684 <HAL_RCC_OscConfig+0x6d8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x606>
 80035d0:	e053      	b.n	800367a <HAL_RCC_OscConfig+0x6ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d2:	4b2c      	ldr	r3, [pc, #176]	; (8003684 <HAL_RCC_OscConfig+0x6d8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a2b      	ldr	r2, [pc, #172]	; (8003684 <HAL_RCC_OscConfig+0x6d8>)
 80035d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035de:	f7fe fdb7 	bl	8002150 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x64c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e6:	f7fe fdb3 	bl	8002150 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e041      	b.n	800367c <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f8:	4b22      	ldr	r3, [pc, #136]	; (8003684 <HAL_RCC_OscConfig+0x6d8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1f0      	bne.n	80035e6 <HAL_RCC_OscConfig+0x63a>
 8003604:	e039      	b.n	800367a <HAL_RCC_OscConfig+0x6ce>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003606:	4b1f      	ldr	r3, [pc, #124]	; (8003684 <HAL_RCC_OscConfig+0x6d8>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d030      	beq.n	8003676 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d129      	bne.n	8003676 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362c:	429a      	cmp	r2, r3
 800362e:	d122      	bne.n	8003676 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003636:	4013      	ands	r3, r2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800363c:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800363e:	4293      	cmp	r3, r2
 8003640:	d119      	bne.n	8003676 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	085b      	lsrs	r3, r3, #1
 800364e:	3b01      	subs	r3, #1
 8003650:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003652:	429a      	cmp	r2, r3
 8003654:	d10f      	bne.n	8003676 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003662:	429a      	cmp	r2, r3
 8003664:	d107      	bne.n	8003676 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003672:	429a      	cmp	r2, r3
 8003674:	d001      	beq.n	800367a <HAL_RCC_OscConfig+0x6ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <HAL_RCC_OscConfig+0x6d0>
      }
    }
  }
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40023800 	.word	0x40023800
 8003688:	08007db4 	.word	0x08007db4

0800368c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e18c      	b.n	80039be <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x28>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b0f      	cmp	r3, #15
 80036b2:	d904      	bls.n	80036be <HAL_RCC_ClockConfig+0x32>
 80036b4:	f240 21df 	movw	r1, #735	; 0x2df
 80036b8:	4887      	ldr	r0, [pc, #540]	; (80038d8 <HAL_RCC_ClockConfig+0x24c>)
 80036ba:	f7fd ff70 	bl	800159e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d031      	beq.n	8003728 <HAL_RCC_ClockConfig+0x9c>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d02e      	beq.n	8003728 <HAL_RCC_ClockConfig+0x9c>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d02b      	beq.n	8003728 <HAL_RCC_ClockConfig+0x9c>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b03      	cmp	r3, #3
 80036d4:	d028      	beq.n	8003728 <HAL_RCC_ClockConfig+0x9c>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d025      	beq.n	8003728 <HAL_RCC_ClockConfig+0x9c>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2b05      	cmp	r3, #5
 80036e0:	d022      	beq.n	8003728 <HAL_RCC_ClockConfig+0x9c>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b06      	cmp	r3, #6
 80036e6:	d01f      	beq.n	8003728 <HAL_RCC_ClockConfig+0x9c>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2b07      	cmp	r3, #7
 80036ec:	d01c      	beq.n	8003728 <HAL_RCC_ClockConfig+0x9c>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d019      	beq.n	8003728 <HAL_RCC_ClockConfig+0x9c>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2b09      	cmp	r3, #9
 80036f8:	d016      	beq.n	8003728 <HAL_RCC_ClockConfig+0x9c>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b0a      	cmp	r3, #10
 80036fe:	d013      	beq.n	8003728 <HAL_RCC_ClockConfig+0x9c>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b0b      	cmp	r3, #11
 8003704:	d010      	beq.n	8003728 <HAL_RCC_ClockConfig+0x9c>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b0c      	cmp	r3, #12
 800370a:	d00d      	beq.n	8003728 <HAL_RCC_ClockConfig+0x9c>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	2b0d      	cmp	r3, #13
 8003710:	d00a      	beq.n	8003728 <HAL_RCC_ClockConfig+0x9c>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b0e      	cmp	r3, #14
 8003716:	d007      	beq.n	8003728 <HAL_RCC_ClockConfig+0x9c>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	2b0f      	cmp	r3, #15
 800371c:	d004      	beq.n	8003728 <HAL_RCC_ClockConfig+0x9c>
 800371e:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8003722:	486d      	ldr	r0, [pc, #436]	; (80038d8 <HAL_RCC_ClockConfig+0x24c>)
 8003724:	f7fd ff3b 	bl	800159e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003728:	4b6c      	ldr	r3, [pc, #432]	; (80038dc <HAL_RCC_ClockConfig+0x250>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d910      	bls.n	8003758 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b69      	ldr	r3, [pc, #420]	; (80038dc <HAL_RCC_ClockConfig+0x250>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 020f 	bic.w	r2, r3, #15
 800373e:	4967      	ldr	r1, [pc, #412]	; (80038dc <HAL_RCC_ClockConfig+0x250>)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b65      	ldr	r3, [pc, #404]	; (80038dc <HAL_RCC_ClockConfig+0x250>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e132      	b.n	80039be <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d049      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003770:	4b5b      	ldr	r3, [pc, #364]	; (80038e0 <HAL_RCC_ClockConfig+0x254>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4a5a      	ldr	r2, [pc, #360]	; (80038e0 <HAL_RCC_ClockConfig+0x254>)
 8003776:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800377a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003788:	4b55      	ldr	r3, [pc, #340]	; (80038e0 <HAL_RCC_ClockConfig+0x254>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	4a54      	ldr	r2, [pc, #336]	; (80038e0 <HAL_RCC_ClockConfig+0x254>)
 800378e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003792:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d024      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x15a>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	2b80      	cmp	r3, #128	; 0x80
 80037a2:	d020      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x15a>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b90      	cmp	r3, #144	; 0x90
 80037aa:	d01c      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x15a>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2ba0      	cmp	r3, #160	; 0xa0
 80037b2:	d018      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x15a>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2bb0      	cmp	r3, #176	; 0xb0
 80037ba:	d014      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x15a>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2bc0      	cmp	r3, #192	; 0xc0
 80037c2:	d010      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x15a>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2bd0      	cmp	r3, #208	; 0xd0
 80037ca:	d00c      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x15a>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2be0      	cmp	r3, #224	; 0xe0
 80037d2:	d008      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x15a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2bf0      	cmp	r3, #240	; 0xf0
 80037da:	d004      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x15a>
 80037dc:	f44f 7141 	mov.w	r1, #772	; 0x304
 80037e0:	483d      	ldr	r0, [pc, #244]	; (80038d8 <HAL_RCC_ClockConfig+0x24c>)
 80037e2:	f7fd fedc 	bl	800159e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e6:	4b3e      	ldr	r3, [pc, #248]	; (80038e0 <HAL_RCC_ClockConfig+0x254>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	493b      	ldr	r1, [pc, #236]	; (80038e0 <HAL_RCC_ClockConfig+0x254>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b00      	cmp	r3, #0
 8003802:	d051      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00c      	beq.n	8003826 <HAL_RCC_ClockConfig+0x19a>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d008      	beq.n	8003826 <HAL_RCC_ClockConfig+0x19a>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b02      	cmp	r3, #2
 800381a:	d004      	beq.n	8003826 <HAL_RCC_ClockConfig+0x19a>
 800381c:	f240 310b 	movw	r1, #779	; 0x30b
 8003820:	482d      	ldr	r0, [pc, #180]	; (80038d8 <HAL_RCC_ClockConfig+0x24c>)
 8003822:	f7fd febc 	bl	800159e <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d107      	bne.n	800383e <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382e:	4b2c      	ldr	r3, [pc, #176]	; (80038e0 <HAL_RCC_ClockConfig+0x254>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d115      	bne.n	8003866 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e0bf      	b.n	80039be <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d107      	bne.n	8003856 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003846:	4b26      	ldr	r3, [pc, #152]	; (80038e0 <HAL_RCC_ClockConfig+0x254>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e0b3      	b.n	80039be <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003856:	4b22      	ldr	r3, [pc, #136]	; (80038e0 <HAL_RCC_ClockConfig+0x254>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e0ab      	b.n	80039be <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003866:	4b1e      	ldr	r3, [pc, #120]	; (80038e0 <HAL_RCC_ClockConfig+0x254>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f023 0203 	bic.w	r2, r3, #3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	491b      	ldr	r1, [pc, #108]	; (80038e0 <HAL_RCC_ClockConfig+0x254>)
 8003874:	4313      	orrs	r3, r2
 8003876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003878:	f7fe fc6a 	bl	8002150 <HAL_GetTick>
 800387c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387e:	e00a      	b.n	8003896 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003880:	f7fe fc66 	bl	8002150 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	f241 3288 	movw	r2, #5000	; 0x1388
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e093      	b.n	80039be <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003896:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <HAL_RCC_ClockConfig+0x254>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 020c 	and.w	r2, r3, #12
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d1eb      	bne.n	8003880 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038a8:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <HAL_RCC_ClockConfig+0x250>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d216      	bcs.n	80038e4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b6:	4b09      	ldr	r3, [pc, #36]	; (80038dc <HAL_RCC_ClockConfig+0x250>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 020f 	bic.w	r2, r3, #15
 80038be:	4907      	ldr	r1, [pc, #28]	; (80038dc <HAL_RCC_ClockConfig+0x250>)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b05      	ldr	r3, [pc, #20]	; (80038dc <HAL_RCC_ClockConfig+0x250>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d007      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e072      	b.n	80039be <HAL_RCC_ClockConfig+0x332>
 80038d8:	08007db4 	.word	0x08007db4
 80038dc:	40023c00 	.word	0x40023c00
 80038e0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d025      	beq.n	800393c <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d018      	beq.n	800392a <HAL_RCC_ClockConfig+0x29e>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003900:	d013      	beq.n	800392a <HAL_RCC_ClockConfig+0x29e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800390a:	d00e      	beq.n	800392a <HAL_RCC_ClockConfig+0x29e>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003914:	d009      	beq.n	800392a <HAL_RCC_ClockConfig+0x29e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800391e:	d004      	beq.n	800392a <HAL_RCC_ClockConfig+0x29e>
 8003920:	f44f 7152 	mov.w	r1, #840	; 0x348
 8003924:	4828      	ldr	r0, [pc, #160]	; (80039c8 <HAL_RCC_ClockConfig+0x33c>)
 8003926:	f7fd fe3a 	bl	800159e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800392a:	4b28      	ldr	r3, [pc, #160]	; (80039cc <HAL_RCC_ClockConfig+0x340>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	4925      	ldr	r1, [pc, #148]	; (80039cc <HAL_RCC_ClockConfig+0x340>)
 8003938:	4313      	orrs	r3, r2
 800393a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d026      	beq.n	8003996 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d018      	beq.n	8003982 <HAL_RCC_ClockConfig+0x2f6>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003958:	d013      	beq.n	8003982 <HAL_RCC_ClockConfig+0x2f6>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003962:	d00e      	beq.n	8003982 <HAL_RCC_ClockConfig+0x2f6>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800396c:	d009      	beq.n	8003982 <HAL_RCC_ClockConfig+0x2f6>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003976:	d004      	beq.n	8003982 <HAL_RCC_ClockConfig+0x2f6>
 8003978:	f240 314f 	movw	r1, #847	; 0x34f
 800397c:	4812      	ldr	r0, [pc, #72]	; (80039c8 <HAL_RCC_ClockConfig+0x33c>)
 800397e:	f7fd fe0e 	bl	800159e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003982:	4b12      	ldr	r3, [pc, #72]	; (80039cc <HAL_RCC_ClockConfig+0x340>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	490e      	ldr	r1, [pc, #56]	; (80039cc <HAL_RCC_ClockConfig+0x340>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003996:	f000 f821 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 800399a:	4601      	mov	r1, r0
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <HAL_RCC_ClockConfig+0x340>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	4a0a      	ldr	r2, [pc, #40]	; (80039d0 <HAL_RCC_ClockConfig+0x344>)
 80039a8:	5cd3      	ldrb	r3, [r2, r3]
 80039aa:	fa21 f303 	lsr.w	r3, r1, r3
 80039ae:	4a09      	ldr	r2, [pc, #36]	; (80039d4 <HAL_RCC_ClockConfig+0x348>)
 80039b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039b2:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <HAL_RCC_ClockConfig+0x34c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fe fb86 	bl	80020c8 <HAL_InitTick>

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	08007db4 	.word	0x08007db4
 80039cc:	40023800 	.word	0x40023800
 80039d0:	08007ed4 	.word	0x08007ed4
 80039d4:	20000000 	.word	0x20000000
 80039d8:	20000004 	.word	0x20000004

080039dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80039e2:	2300      	movs	r3, #0
 80039e4:	607b      	str	r3, [r7, #4]
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	2300      	movs	r3, #0
 80039ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80039ee:	2300      	movs	r3, #0
 80039f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039f2:	4b50      	ldr	r3, [pc, #320]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x158>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d007      	beq.n	8003a0e <HAL_RCC_GetSysClockFreq+0x32>
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d008      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0x38>
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f040 808d 	bne.w	8003b22 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a08:	4b4b      	ldr	r3, [pc, #300]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003a0a:	60bb      	str	r3, [r7, #8]
      break;
 8003a0c:	e08c      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a0e:	4b4b      	ldr	r3, [pc, #300]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a10:	60bb      	str	r3, [r7, #8]
      break;
 8003a12:	e089      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a14:	4b47      	ldr	r3, [pc, #284]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a1c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a1e:	4b45      	ldr	r3, [pc, #276]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d023      	beq.n	8003a72 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a2a:	4b42      	ldr	r3, [pc, #264]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	099b      	lsrs	r3, r3, #6
 8003a30:	f04f 0400 	mov.w	r4, #0
 8003a34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	ea03 0501 	and.w	r5, r3, r1
 8003a40:	ea04 0602 	and.w	r6, r4, r2
 8003a44:	4a3d      	ldr	r2, [pc, #244]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a46:	fb02 f106 	mul.w	r1, r2, r6
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	fb02 f205 	mul.w	r2, r2, r5
 8003a50:	440a      	add	r2, r1
 8003a52:	493a      	ldr	r1, [pc, #232]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a54:	fba5 0101 	umull	r0, r1, r5, r1
 8003a58:	1853      	adds	r3, r2, r1
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f04f 0400 	mov.w	r4, #0
 8003a62:	461a      	mov	r2, r3
 8003a64:	4623      	mov	r3, r4
 8003a66:	f7fc fc43 	bl	80002f0 <__aeabi_uldivmod>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	460c      	mov	r4, r1
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	e049      	b.n	8003b06 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a72:	4b30      	ldr	r3, [pc, #192]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	099b      	lsrs	r3, r3, #6
 8003a78:	f04f 0400 	mov.w	r4, #0
 8003a7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	ea03 0501 	and.w	r5, r3, r1
 8003a88:	ea04 0602 	and.w	r6, r4, r2
 8003a8c:	4629      	mov	r1, r5
 8003a8e:	4632      	mov	r2, r6
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	f04f 0400 	mov.w	r4, #0
 8003a98:	0154      	lsls	r4, r2, #5
 8003a9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a9e:	014b      	lsls	r3, r1, #5
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4622      	mov	r2, r4
 8003aa4:	1b49      	subs	r1, r1, r5
 8003aa6:	eb62 0206 	sbc.w	r2, r2, r6
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	f04f 0400 	mov.w	r4, #0
 8003ab2:	0194      	lsls	r4, r2, #6
 8003ab4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ab8:	018b      	lsls	r3, r1, #6
 8003aba:	1a5b      	subs	r3, r3, r1
 8003abc:	eb64 0402 	sbc.w	r4, r4, r2
 8003ac0:	f04f 0100 	mov.w	r1, #0
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	00e2      	lsls	r2, r4, #3
 8003aca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ace:	00d9      	lsls	r1, r3, #3
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4614      	mov	r4, r2
 8003ad4:	195b      	adds	r3, r3, r5
 8003ad6:	eb44 0406 	adc.w	r4, r4, r6
 8003ada:	f04f 0100 	mov.w	r1, #0
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	02a2      	lsls	r2, r4, #10
 8003ae4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003ae8:	0299      	lsls	r1, r3, #10
 8003aea:	460b      	mov	r3, r1
 8003aec:	4614      	mov	r4, r2
 8003aee:	4618      	mov	r0, r3
 8003af0:	4621      	mov	r1, r4
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f04f 0400 	mov.w	r4, #0
 8003af8:	461a      	mov	r2, r3
 8003afa:	4623      	mov	r3, r4
 8003afc:	f7fc fbf8 	bl	80002f0 <__aeabi_uldivmod>
 8003b00:	4603      	mov	r3, r0
 8003b02:	460c      	mov	r4, r1
 8003b04:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b06:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	0c1b      	lsrs	r3, r3, #16
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	3301      	adds	r3, #1
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1e:	60bb      	str	r3, [r7, #8]
      break;
 8003b20:	e002      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b22:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003b24:	60bb      	str	r3, [r7, #8]
      break;
 8003b26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b28:	68bb      	ldr	r3, [r7, #8]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40023800 	.word	0x40023800
 8003b38:	00f42400 	.word	0x00f42400
 8003b3c:	017d7840 	.word	0x017d7840

08003b40 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b44:	4b03      	ldr	r3, [pc, #12]	; (8003b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b46:	681b      	ldr	r3, [r3, #0]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	20000000 	.word	0x20000000

08003b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b5c:	f7ff fff0 	bl	8003b40 <HAL_RCC_GetHCLKFreq>
 8003b60:	4601      	mov	r1, r0
 8003b62:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	0a9b      	lsrs	r3, r3, #10
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	4a03      	ldr	r2, [pc, #12]	; (8003b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b6e:	5cd3      	ldrb	r3, [r2, r3]
 8003b70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	08007ee4 	.word	0x08007ee4

08003b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b84:	f7ff ffdc 	bl	8003b40 <HAL_RCC_GetHCLKFreq>
 8003b88:	4601      	mov	r1, r0
 8003b8a:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	0b5b      	lsrs	r3, r3, #13
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	4a03      	ldr	r2, [pc, #12]	; (8003ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b96:	5cd3      	ldrb	r3, [r2, r3]
 8003b98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	08007ee4 	.word	0x08007ee4

08003ba8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b088      	sub	sp, #32
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f040 809e 	bne.w	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f040 8097 	bne.w	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f040 8090 	bne.w	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f040 8089 	bne.w	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f040 8082 	bne.w	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d17b      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d175      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d16f      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d169      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d163      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d15d      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d157      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d151      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d14b      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d145      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d13f      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d139      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d133      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d12d      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d127      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d121      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d11b      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d115      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10f      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d109      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d103      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003d06:	2174      	movs	r1, #116	; 0x74
 8003d08:	48a2      	ldr	r0, [pc, #648]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003d0a:	f7fd fc48 	bl	800159e <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d01f      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d008      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d2a:	d003      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003d2c:	217a      	movs	r1, #122	; 0x7a
 8003d2e:	4899      	ldr	r0, [pc, #612]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003d30:	f7fd fc35 	bl	800159e <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d34:	4b98      	ldr	r3, [pc, #608]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	4a97      	ldr	r2, [pc, #604]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003d3a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d3e:	6093      	str	r3, [r2, #8]
 8003d40:	4b95      	ldr	r3, [pc, #596]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d48:	4993      	ldr	r1, [pc, #588]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      plli2sused = 1;
 8003d56:	2301      	movs	r3, #1
 8003d58:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d02e      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d012      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d76:	d00d      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d80:	d008      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d8a:	d003      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003d8c:	218a      	movs	r1, #138	; 0x8a
 8003d8e:	4881      	ldr	r0, [pc, #516]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003d90:	f7fd fc05 	bl	800159e <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d94:	4b80      	ldr	r3, [pc, #512]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da2:	497d      	ldr	r1, [pc, #500]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003db2:	d101      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x210>
    {
      plli2sused = 1;
 8003db4:	2301      	movs	r3, #1
 8003db6:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      pllsaiused = 1;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d02e      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d012      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003de0:	d00d      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003dea:	d008      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003df4:	d003      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003df6:	219e      	movs	r1, #158	; 0x9e
 8003df8:	4866      	ldr	r0, [pc, #408]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003dfa:	f7fd fbd0 	bl	800159e <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003dfe:	4b66      	ldr	r3, [pc, #408]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	4962      	ldr	r1, [pc, #392]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      plli2sused = 1;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      pllsaiused = 1;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
      plli2sused = 1;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0320 	and.w	r3, r3, #32
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 8187 	beq.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x5b2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e54:	f000 80eb 	beq.w	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e60:	f000 80e5 	beq.w	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	4a4c      	ldr	r2, [pc, #304]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	f000 80df 	beq.w	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	4a4a      	ldr	r2, [pc, #296]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	f000 80d9 	beq.w	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e80:	4a48      	ldr	r2, [pc, #288]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	f000 80d3 	beq.w	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	4a46      	ldr	r2, [pc, #280]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	f000 80cd 	beq.w	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	4a44      	ldr	r2, [pc, #272]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	f000 80c7 	beq.w	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	4a42      	ldr	r2, [pc, #264]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	f000 80c1 	beq.w	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	4a40      	ldr	r2, [pc, #256]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	f000 80bb 	beq.w	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	4a3e      	ldr	r2, [pc, #248]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x410>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	f000 80b5 	beq.w	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec8:	4a3c      	ldr	r2, [pc, #240]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x414>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	f000 80af 	beq.w	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed4:	4a3a      	ldr	r2, [pc, #232]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	f000 80a9 	beq.w	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	4a38      	ldr	r2, [pc, #224]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	f000 80a3 	beq.w	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eec:	4a36      	ldr	r2, [pc, #216]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	f000 809d 	beq.w	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	4a34      	ldr	r2, [pc, #208]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	f000 8097 	beq.w	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f04:	4a32      	ldr	r2, [pc, #200]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	f000 8091 	beq.w	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f10:	4a30      	ldr	r2, [pc, #192]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	f000 808b 	beq.w	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	4a2e      	ldr	r2, [pc, #184]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	f000 8085 	beq.w	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f28:	4a2c      	ldr	r2, [pc, #176]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d07f      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	4a2b      	ldr	r2, [pc, #172]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d07a      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	4a29      	ldr	r2, [pc, #164]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d075      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	4a28      	ldr	r2, [pc, #160]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d070      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	4a26      	ldr	r2, [pc, #152]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d06b      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	4a25      	ldr	r2, [pc, #148]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d066      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f64:	4a23      	ldr	r2, [pc, #140]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d061      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	4a22      	ldr	r2, [pc, #136]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d05c      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	4a20      	ldr	r2, [pc, #128]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d057      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	4a1f      	ldr	r2, [pc, #124]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d052      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	4a1d      	ldr	r2, [pc, #116]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d04d      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f92:	e039      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003f94:	08007dec 	.word	0x08007dec
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	00020300 	.word	0x00020300
 8003fa0:	00030300 	.word	0x00030300
 8003fa4:	00040300 	.word	0x00040300
 8003fa8:	00050300 	.word	0x00050300
 8003fac:	00060300 	.word	0x00060300
 8003fb0:	00070300 	.word	0x00070300
 8003fb4:	00080300 	.word	0x00080300
 8003fb8:	00090300 	.word	0x00090300
 8003fbc:	000a0300 	.word	0x000a0300
 8003fc0:	000b0300 	.word	0x000b0300
 8003fc4:	000c0300 	.word	0x000c0300
 8003fc8:	000d0300 	.word	0x000d0300
 8003fcc:	000e0300 	.word	0x000e0300
 8003fd0:	000f0300 	.word	0x000f0300
 8003fd4:	00100300 	.word	0x00100300
 8003fd8:	00110300 	.word	0x00110300
 8003fdc:	00120300 	.word	0x00120300
 8003fe0:	00130300 	.word	0x00130300
 8003fe4:	00140300 	.word	0x00140300
 8003fe8:	00150300 	.word	0x00150300
 8003fec:	00160300 	.word	0x00160300
 8003ff0:	00170300 	.word	0x00170300
 8003ff4:	00180300 	.word	0x00180300
 8003ff8:	00190300 	.word	0x00190300
 8003ffc:	001a0300 	.word	0x001a0300
 8004000:	001b0300 	.word	0x001b0300
 8004004:	001c0300 	.word	0x001c0300
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	4a44      	ldr	r2, [pc, #272]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00d      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	4a43      	ldr	r2, [pc, #268]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d008      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004020:	4a41      	ldr	r2, [pc, #260]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d003      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004026:	21b9      	movs	r1, #185	; 0xb9
 8004028:	4840      	ldr	r0, [pc, #256]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800402a:	f7fd fab8 	bl	800159e <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800402e:	4b40      	ldr	r3, [pc, #256]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	4a3f      	ldr	r2, [pc, #252]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004038:	6413      	str	r3, [r2, #64]	; 0x40
 800403a:	4b3d      	ldr	r3, [pc, #244]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004042:	60bb      	str	r3, [r7, #8]
 8004044:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004046:	4b3b      	ldr	r3, [pc, #236]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a3a      	ldr	r2, [pc, #232]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800404c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004050:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004052:	f7fe f87d 	bl	8002150 <HAL_GetTick>
 8004056:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004058:	e009      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800405a:	f7fe f879 	bl	8002150 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b64      	cmp	r3, #100	; 0x64
 8004066:	d902      	bls.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
      {
        return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	f000 be00 	b.w	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800406e:	4b31      	ldr	r3, [pc, #196]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0ef      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800407a:	4b2d      	ldr	r3, [pc, #180]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800407c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004082:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d036      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	429a      	cmp	r2, r3
 8004096:	d02f      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004098:	4b25      	ldr	r3, [pc, #148]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800409a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040a2:	4b23      	ldr	r3, [pc, #140]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80040a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a6:	4a22      	ldr	r2, [pc, #136]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80040a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040ae:	4b20      	ldr	r3, [pc, #128]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b2:	4a1f      	ldr	r2, [pc, #124]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80040b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80040ba:	4a1d      	ldr	r2, [pc, #116]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040c0:	4b1b      	ldr	r3, [pc, #108]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d115      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x550>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040cc:	f7fe f840 	bl	8002150 <HAL_GetTick>
 80040d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d2:	e00b      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x544>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040d4:	f7fe f83c 	bl	8002150 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d902      	bls.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x544>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	f000 bdc1 	b.w	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x10c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ec:	4b10      	ldr	r3, [pc, #64]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80040ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0ed      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004100:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004104:	d11a      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004106:	4b0a      	ldr	r3, [pc, #40]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004112:	4b09      	ldr	r3, [pc, #36]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004114:	400b      	ands	r3, r1
 8004116:	4906      	ldr	r1, [pc, #24]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004118:	4313      	orrs	r3, r2
 800411a:	608b      	str	r3, [r1, #8]
 800411c:	e014      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 800411e:	bf00      	nop
 8004120:	001d0300 	.word	0x001d0300
 8004124:	001e0300 	.word	0x001e0300
 8004128:	001f0300 	.word	0x001f0300
 800412c:	08007dec 	.word	0x08007dec
 8004130:	40023800 	.word	0x40023800
 8004134:	40007000 	.word	0x40007000
 8004138:	0ffffcff 	.word	0x0ffffcff
 800413c:	4ba7      	ldr	r3, [pc, #668]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4aa6      	ldr	r2, [pc, #664]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004142:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004146:	6093      	str	r3, [r2, #8]
 8004148:	4ba4      	ldr	r3, [pc, #656]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800414a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004154:	49a1      	ldr	r1, [pc, #644]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004156:	4313      	orrs	r3, r2
 8004158:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0310 	and.w	r3, r3, #16
 8004162:	2b00      	cmp	r3, #0
 8004164:	d01d      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	2b00      	cmp	r3, #0
 800416c:	d008      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004172:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004176:	d003      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 8004178:	21f3      	movs	r1, #243	; 0xf3
 800417a:	4899      	ldr	r0, [pc, #612]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800417c:	f7fd fa0f 	bl	800159e <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004180:	4b96      	ldr	r3, [pc, #600]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004186:	4a95      	ldr	r2, [pc, #596]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004188:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800418c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004190:	4b92      	ldr	r3, [pc, #584]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004192:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419a:	4990      	ldr	r1, [pc, #576]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d01c      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00d      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041be:	d008      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041c8:	d003      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 80041ca:	21fd      	movs	r1, #253	; 0xfd
 80041cc:	4884      	ldr	r0, [pc, #528]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80041ce:	f7fd f9e6 	bl	800159e <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041d2:	4b82      	ldr	r3, [pc, #520]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041e0:	497e      	ldr	r1, [pc, #504]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d01d      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00e      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004200:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004204:	d009      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800420a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800420e:	d004      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004210:	f240 1107 	movw	r1, #263	; 0x107
 8004214:	4872      	ldr	r0, [pc, #456]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004216:	f7fd f9c2 	bl	800159e <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800421a:	4b70      	ldr	r3, [pc, #448]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800421c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004220:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004228:	496c      	ldr	r1, [pc, #432]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01d      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00e      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004248:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800424c:	d009      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004252:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004256:	d004      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8004258:	f240 1111 	movw	r1, #273	; 0x111
 800425c:	4860      	ldr	r0, [pc, #384]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800425e:	f7fd f99e 	bl	800159e <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004262:	4b5e      	ldr	r3, [pc, #376]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004268:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004270:	495a      	ldr	r1, [pc, #360]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d01d      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x718>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00e      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x702>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004294:	d009      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x702>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800429e:	d004      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x702>
 80042a0:	f240 111b 	movw	r1, #283	; 0x11b
 80042a4:	484e      	ldr	r0, [pc, #312]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80042a6:	f7fd f97a 	bl	800159e <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042aa:	4b4c      	ldr	r3, [pc, #304]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b8:	4948      	ldr	r1, [pc, #288]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d01f      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x764>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d010      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d00c      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	d008      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d004      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 80042ec:	f240 1125 	movw	r1, #293	; 0x125
 80042f0:	483b      	ldr	r0, [pc, #236]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80042f2:	f7fd f954 	bl	800159e <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042f6:	4b39      	ldr	r3, [pc, #228]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fc:	f023 0203 	bic.w	r2, r3, #3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004304:	4935      	ldr	r1, [pc, #212]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004314:	2b00      	cmp	r3, #0
 8004316:	d01f      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800431c:	2b00      	cmp	r3, #0
 800431e:	d010      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004324:	2b04      	cmp	r3, #4
 8004326:	d00c      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800432c:	2b0c      	cmp	r3, #12
 800432e:	d008      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004334:	2b08      	cmp	r3, #8
 8004336:	d004      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8004338:	f240 112f 	movw	r1, #303	; 0x12f
 800433c:	4828      	ldr	r0, [pc, #160]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800433e:	f7fd f92e 	bl	800159e <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004342:	4b26      	ldr	r3, [pc, #152]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004348:	f023 020c 	bic.w	r2, r3, #12
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004350:	4922      	ldr	r1, [pc, #136]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004360:	2b00      	cmp	r3, #0
 8004362:	d01f      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004368:	2b00      	cmp	r3, #0
 800436a:	d010      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004370:	2b10      	cmp	r3, #16
 8004372:	d00c      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004378:	2b30      	cmp	r3, #48	; 0x30
 800437a:	d008      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004380:	2b20      	cmp	r3, #32
 8004382:	d004      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8004384:	f240 1139 	movw	r1, #313	; 0x139
 8004388:	4815      	ldr	r0, [pc, #84]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800438a:	f7fd f908 	bl	800159e <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800438e:	4b13      	ldr	r3, [pc, #76]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004394:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439c:	490f      	ldr	r1, [pc, #60]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d024      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d015      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043bc:	2b40      	cmp	r3, #64	; 0x40
 80043be:	d011      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c4:	2bc0      	cmp	r3, #192	; 0xc0
 80043c6:	d00d      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043cc:	2b80      	cmp	r3, #128	; 0x80
 80043ce:	d009      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80043d0:	f240 1143 	movw	r1, #323	; 0x143
 80043d4:	4802      	ldr	r0, [pc, #8]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80043d6:	f7fd f8e2 	bl	800159e <assert_failed>
 80043da:	e003      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80043dc:	40023800 	.word	0x40023800
 80043e0:	08007dec 	.word	0x08007dec

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043e4:	4bae      	ldr	r3, [pc, #696]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80043e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f2:	49ab      	ldr	r1, [pc, #684]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004402:	2b00      	cmp	r3, #0
 8004404:	d022      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	2b00      	cmp	r3, #0
 800440c:	d013      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004416:	d00e      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004420:	d009      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800442a:	d004      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 800442c:	f240 114d 	movw	r1, #333	; 0x14d
 8004430:	489c      	ldr	r0, [pc, #624]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004432:	f7fd f8b4 	bl	800159e <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004436:	4b9a      	ldr	r3, [pc, #616]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004444:	4996      	ldr	r1, [pc, #600]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004454:	2b00      	cmp	r3, #0
 8004456:	d022      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445c:	2b00      	cmp	r3, #0
 800445e:	d013      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004468:	d00e      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004472:	d009      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800447c:	d004      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 800447e:	f240 1157 	movw	r1, #343	; 0x157
 8004482:	4888      	ldr	r0, [pc, #544]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004484:	f7fd f88b 	bl	800159e <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004488:	4b85      	ldr	r3, [pc, #532]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004496:	4982      	ldr	r1, [pc, #520]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d022      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d013      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x932>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ba:	d00e      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x932>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044c4:	d009      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x932>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ce:	d004      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x932>
 80044d0:	f240 1161 	movw	r1, #353	; 0x161
 80044d4:	4873      	ldr	r0, [pc, #460]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80044d6:	f7fd f862 	bl	800159e <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80044da:	4b71      	ldr	r3, [pc, #452]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80044dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e8:	496d      	ldr	r1, [pc, #436]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d022      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004500:	2b00      	cmp	r3, #0
 8004502:	d013      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004508:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800450c:	d00e      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x984>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004512:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004516:	d009      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800451c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004520:	d004      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004522:	f240 116b 	movw	r1, #363	; 0x16b
 8004526:	485f      	ldr	r0, [pc, #380]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004528:	f7fd f839 	bl	800159e <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800452c:	4b5c      	ldr	r3, [pc, #368]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800452e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004532:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800453a:	4959      	ldr	r1, [pc, #356]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d018      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004552:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004556:	d008      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800455c:	2b00      	cmp	r3, #0
 800455e:	d004      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8004560:	f240 1175 	movw	r1, #373	; 0x175
 8004564:	484f      	ldr	r0, [pc, #316]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004566:	f7fd f81a 	bl	800159e <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800456a:	4b4d      	ldr	r3, [pc, #308]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800456c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004570:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004578:	4949      	ldr	r1, [pc, #292]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d01f      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004590:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004594:	d008      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d004      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800459e:	f240 117f 	movw	r1, #383	; 0x17f
 80045a2:	4840      	ldr	r0, [pc, #256]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80045a4:	f7fc fffb 	bl	800159e <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80045a8:	4b3d      	ldr	r3, [pc, #244]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80045aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ae:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045b6:	493a      	ldr	r1, [pc, #232]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045c6:	d101      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      pllsaiused = 1;
 80045c8:	2301      	movs	r3, #1
 80045ca:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    pllsaiused = 1;
 80045d8:	2301      	movs	r3, #1
 80045da:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d022      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xa86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d013      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045f8:	d00e      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004602:	d009      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004608:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800460c:	d004      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800460e:	f240 1197 	movw	r1, #407	; 0x197
 8004612:	4824      	ldr	r0, [pc, #144]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004614:	f7fc ffc3 	bl	800159e <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004618:	4b21      	ldr	r3, [pc, #132]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800461a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004626:	491e      	ldr	r1, [pc, #120]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d01b      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xaca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004640:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004644:	d009      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800464c:	2b00      	cmp	r3, #0
 800464e:	d004      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004650:	f240 11a1 	movw	r1, #417	; 0x1a1
 8004654:	4813      	ldr	r0, [pc, #76]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004656:	f7fc ffa2 	bl	800159e <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800465a:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800465c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004660:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800466a:	490d      	ldr	r1, [pc, #52]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d020      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004684:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004688:	d00e      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004690:	2b00      	cmp	r3, #0
 8004692:	d009      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8004694:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8004698:	4802      	ldr	r0, [pc, #8]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 800469a:	f7fc ff80 	bl	800159e <assert_failed>
 800469e:	e003      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 80046a0:	40023800 	.word	0x40023800
 80046a4:	08007dec 	.word	0x08007dec

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80046a8:	4b35      	ldr	r3, [pc, #212]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80046aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b8:	4931      	ldr	r1, [pc, #196]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d01b      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xb44>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046e0:	d004      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xb44>
 80046e2:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80046e6:	4827      	ldr	r0, [pc, #156]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80046e8:	f7fc ff59 	bl	800159e <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046ec:	4b24      	ldr	r3, [pc, #144]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80046ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fc:	4920      	ldr	r1, [pc, #128]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d01b      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004720:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004724:	d004      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004726:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800472a:	4816      	ldr	r0, [pc, #88]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800472c:	f7fc ff37 	bl	800159e <assert_failed>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004730:	4b13      	ldr	r3, [pc, #76]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004732:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004736:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004740:	490f      	ldr	r1, [pc, #60]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004742:	4313      	orrs	r3, r2
 8004744:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d005      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004756:	f040 8153 	bne.w	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xe58>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800475a:	4b09      	ldr	r3, [pc, #36]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a08      	ldr	r2, [pc, #32]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004760:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004764:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004766:	f7fd fcf3 	bl	8002150 <HAL_GetTick>
 800476a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800476c:	e00c      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800476e:	f7fd fcef 	bl	8002150 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b64      	cmp	r3, #100	; 0x64
 800477a:	d905      	bls.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e276      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 8004780:	40023800 	.word	0x40023800
 8004784:	08007dec 	.word	0x08007dec
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004788:	4ba9      	ldr	r3, [pc, #676]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1ec      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xbc6>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	2b31      	cmp	r3, #49	; 0x31
 800479a:	d904      	bls.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80047a4:	d904      	bls.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80047a6:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80047aa:	48a2      	ldr	r0, [pc, #648]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80047ac:	f7fc fef7 	bl	800159e <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d02e      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d12a      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d903      	bls.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b07      	cmp	r3, #7
 80047d2:	d904      	bls.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xc36>
 80047d4:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80047d8:	4896      	ldr	r0, [pc, #600]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80047da:	f7fc fee0 	bl	800159e <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047de:	4b94      	ldr	r3, [pc, #592]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80047e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047e4:	0c1b      	lsrs	r3, r3, #16
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047ec:	4b90      	ldr	r3, [pc, #576]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80047ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047f2:	0e1b      	lsrs	r3, r3, #24
 80047f4:	f003 030f 	and.w	r3, r3, #15
 80047f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	019a      	lsls	r2, r3, #6
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	041b      	lsls	r3, r3, #16
 8004804:	431a      	orrs	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	061b      	lsls	r3, r3, #24
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	071b      	lsls	r3, r3, #28
 8004812:	4987      	ldr	r1, [pc, #540]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d004      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xc88>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800482e:	d00a      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004838:	2b00      	cmp	r3, #0
 800483a:	d048      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xd26>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004840:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004844:	d143      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d903      	bls.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xcae>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	2b0f      	cmp	r3, #15
 8004854:	d904      	bls.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 8004856:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800485a:	4876      	ldr	r0, [pc, #472]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 800485c:	f7fc fe9f 	bl	800159e <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	2b20      	cmp	r3, #32
 800486e:	d904      	bls.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 8004870:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004874:	486f      	ldr	r0, [pc, #444]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004876:	f7fc fe92 	bl	800159e <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800487a:	4b6d      	ldr	r3, [pc, #436]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800487c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004880:	0c1b      	lsrs	r3, r3, #16
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004888:	4b69      	ldr	r3, [pc, #420]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800488a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800488e:	0f1b      	lsrs	r3, r3, #28
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	019a      	lsls	r2, r3, #6
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	041b      	lsls	r3, r3, #16
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	061b      	lsls	r3, r3, #24
 80048a8:	431a      	orrs	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	071b      	lsls	r3, r3, #28
 80048ae:	4960      	ldr	r1, [pc, #384]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80048b6:	4b5e      	ldr	r3, [pc, #376]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048bc:	f023 021f 	bic.w	r2, r3, #31
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	3b01      	subs	r3, #1
 80048c6:	495a      	ldr	r1, [pc, #360]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d032      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xd98>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d010      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d00c      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d008      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	2b03      	cmp	r3, #3
 80048f8:	d004      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 80048fa:	f240 2107 	movw	r1, #519	; 0x207
 80048fe:	484d      	ldr	r0, [pc, #308]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004900:	f7fc fe4d 	bl	800159e <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004904:	4b4a      	ldr	r3, [pc, #296]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800490a:	0e1b      	lsrs	r3, r3, #24
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004912:	4b47      	ldr	r3, [pc, #284]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004918:	0f1b      	lsrs	r3, r3, #28
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	019a      	lsls	r2, r3, #6
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	041b      	lsls	r3, r3, #16
 800492c:	431a      	orrs	r2, r3
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	061b      	lsls	r3, r3, #24
 8004932:	431a      	orrs	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	071b      	lsls	r3, r3, #28
 8004938:	493d      	ldr	r1, [pc, #244]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d040      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xe26>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d010      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d00c      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	2b02      	cmp	r3, #2
 8004962:	d008      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	2b03      	cmp	r3, #3
 800496a:	d004      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 800496c:	f240 2116 	movw	r1, #534	; 0x216
 8004970:	4830      	ldr	r0, [pc, #192]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004972:	f7fc fe14 	bl	800159e <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d903      	bls.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	2b07      	cmp	r3, #7
 8004984:	d904      	bls.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xde8>
 8004986:	f240 2117 	movw	r1, #535	; 0x217
 800498a:	482a      	ldr	r0, [pc, #168]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 800498c:	f7fc fe07 	bl	800159e <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d903      	bls.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	2b0f      	cmp	r3, #15
 800499e:	d904      	bls.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xe02>
 80049a0:	f44f 7106 	mov.w	r1, #536	; 0x218
 80049a4:	4823      	ldr	r0, [pc, #140]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80049a6:	f7fc fdfa 	bl	800159e <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	019a      	lsls	r2, r3, #6
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	041b      	lsls	r3, r3, #16
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	061b      	lsls	r3, r3, #24
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	071b      	lsls	r3, r3, #28
 80049c6:	491a      	ldr	r1, [pc, #104]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049ce:	4b18      	ldr	r3, [pc, #96]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a17      	ldr	r2, [pc, #92]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049da:	f7fd fbb9 	bl	8002150 <HAL_GetTick>
 80049de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049e0:	e008      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049e2:	f7fd fbb5 	bl	8002150 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b64      	cmp	r3, #100	; 0x64
 80049ee:	d901      	bls.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e13c      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049f4:	4b0e      	ldr	r3, [pc, #56]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f0      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	f040 8132 	bne.w	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a08:	4b09      	ldr	r3, [pc, #36]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a08      	ldr	r2, [pc, #32]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a14:	f7fd fb9c 	bl	8002150 <HAL_GetTick>
 8004a18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a1a:	e00d      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xe90>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a1c:	f7fd fb98 	bl	8002150 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b64      	cmp	r3, #100	; 0x64
 8004a28:	d906      	bls.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xe90>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e11f      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800
 8004a34:	08007dec 	.word	0x08007dec
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a38:	4b8f      	ldr	r3, [pc, #572]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a44:	d0ea      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe74>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	2b31      	cmp	r3, #49	; 0x31
 8004a4c:	d904      	bls.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xeb0>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004a56:	d904      	bls.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xeba>
 8004a58:	f240 2146 	movw	r1, #582	; 0x246
 8004a5c:	4887      	ldr	r0, [pc, #540]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004a5e:	f7fc fd9e 	bl	800159e <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xece>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d009      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xee2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d048      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d144      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d903      	bls.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xef2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	2b0f      	cmp	r3, #15
 8004a98:	d904      	bls.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xefc>
 8004a9a:	f240 214d 	movw	r1, #589	; 0x24d
 8004a9e:	4877      	ldr	r0, [pc, #476]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004aa0:	f7fc fd7d 	bl	800159e <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	d904      	bls.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004ab4:	f240 214f 	movw	r1, #591	; 0x24f
 8004ab8:	4870      	ldr	r0, [pc, #448]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004aba:	f7fc fd70 	bl	800159e <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004abe:	4b6e      	ldr	r3, [pc, #440]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac4:	0c1b      	lsrs	r3, r3, #16
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004acc:	4b6a      	ldr	r3, [pc, #424]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad2:	0f1b      	lsrs	r3, r3, #28
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	019a      	lsls	r2, r3, #6
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	041b      	lsls	r3, r3, #16
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	061b      	lsls	r3, r3, #24
 8004aec:	431a      	orrs	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	071b      	lsls	r3, r3, #28
 8004af2:	4961      	ldr	r1, [pc, #388]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004afa:	4b5f      	ldr	r3, [pc, #380]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	021b      	lsls	r3, r3, #8
 8004b0c:	495a      	ldr	r1, [pc, #360]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d037      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b28:	d132      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d010      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d00c      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d008      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d004      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004b4a:	f240 2162 	movw	r1, #610	; 0x262
 8004b4e:	484b      	ldr	r0, [pc, #300]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004b50:	f7fc fd25 	bl	800159e <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b54:	4b48      	ldr	r3, [pc, #288]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5a:	0e1b      	lsrs	r3, r3, #24
 8004b5c:	f003 030f 	and.w	r3, r3, #15
 8004b60:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b62:	4b45      	ldr	r3, [pc, #276]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b68:	0f1b      	lsrs	r3, r3, #28
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	019a      	lsls	r2, r3, #6
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	041b      	lsls	r3, r3, #16
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	061b      	lsls	r3, r3, #24
 8004b82:	431a      	orrs	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	071b      	lsls	r3, r3, #28
 8004b88:	493b      	ldr	r1, [pc, #236]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0308 	and.w	r3, r3, #8
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d04d      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1090>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d903      	bls.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x1004>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	2b07      	cmp	r3, #7
 8004baa:	d904      	bls.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x100e>
 8004bac:	f240 2171 	movw	r1, #625	; 0x271
 8004bb0:	4832      	ldr	r0, [pc, #200]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004bb2:	f7fc fcf4 	bl	800159e <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d013      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc6:	d00e      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bd0:	d009      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bda:	d004      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8004bdc:	f240 2172 	movw	r1, #626	; 0x272
 8004be0:	4826      	ldr	r0, [pc, #152]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004be2:	f7fc fcdc 	bl	800159e <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004be6:	4b24      	ldr	r3, [pc, #144]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bec:	0e1b      	lsrs	r3, r3, #24
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004bf4:	4b20      	ldr	r3, [pc, #128]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfa:	0c1b      	lsrs	r3, r3, #16
 8004bfc:	f003 0303 	and.w	r3, r3, #3
 8004c00:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	019a      	lsls	r2, r3, #6
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	041b      	lsls	r3, r3, #16
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	061b      	lsls	r3, r3, #24
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	071b      	lsls	r3, r3, #28
 8004c1a:	4917      	ldr	r1, [pc, #92]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c22:	4b15      	ldr	r3, [pc, #84]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	4911      	ldr	r1, [pc, #68]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c38:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a0e      	ldr	r2, [pc, #56]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c44:	f7fd fa84 	bl	8002150 <HAL_GetTick>
 8004c48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c4c:	f7fd fa80 	bl	8002150 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b64      	cmp	r3, #100	; 0x64
 8004c58:	d901      	bls.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x10b6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e007      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c5e:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c6a:	d1ef      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
      }
    }
  }
  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3720      	adds	r7, #32
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	08007dec 	.word	0x08007dec

08004c80 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e0c3      	b.n	8004e1a <HAL_RTC_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a63      	ldr	r2, [pc, #396]	; (8004e24 <HAL_RTC_Init+0x1a4>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d003      	beq.n	8004ca4 <HAL_RTC_Init+0x24>
 8004c9c:	21fb      	movs	r1, #251	; 0xfb
 8004c9e:	4862      	ldr	r0, [pc, #392]	; (8004e28 <HAL_RTC_Init+0x1a8>)
 8004ca0:	f7fc fc7d 	bl	800159e <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2b40      	cmp	r3, #64	; 0x40
 8004caa:	d007      	beq.n	8004cbc <HAL_RTC_Init+0x3c>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <HAL_RTC_Init+0x3c>
 8004cb4:	21fc      	movs	r1, #252	; 0xfc
 8004cb6:	485c      	ldr	r0, [pc, #368]	; (8004e28 <HAL_RTC_Init+0x1a8>)
 8004cb8:	f7fc fc71 	bl	800159e <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b7f      	cmp	r3, #127	; 0x7f
 8004cc2:	d903      	bls.n	8004ccc <HAL_RTC_Init+0x4c>
 8004cc4:	21fd      	movs	r1, #253	; 0xfd
 8004cc6:	4858      	ldr	r0, [pc, #352]	; (8004e28 <HAL_RTC_Init+0x1a8>)
 8004cc8:	f7fc fc69 	bl	800159e <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cd4:	d303      	bcc.n	8004cde <HAL_RTC_Init+0x5e>
 8004cd6:	21fe      	movs	r1, #254	; 0xfe
 8004cd8:	4853      	ldr	r0, [pc, #332]	; (8004e28 <HAL_RTC_Init+0x1a8>)
 8004cda:	f7fc fc60 	bl	800159e <assert_failed>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d012      	beq.n	8004d0c <HAL_RTC_Init+0x8c>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cee:	d00d      	beq.n	8004d0c <HAL_RTC_Init+0x8c>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cf8:	d008      	beq.n	8004d0c <HAL_RTC_Init+0x8c>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004d02:	d003      	beq.n	8004d0c <HAL_RTC_Init+0x8c>
 8004d04:	21ff      	movs	r1, #255	; 0xff
 8004d06:	4848      	ldr	r0, [pc, #288]	; (8004e28 <HAL_RTC_Init+0x1a8>)
 8004d08:	f7fc fc49 	bl	800159e <assert_failed>
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d009      	beq.n	8004d28 <HAL_RTC_Init+0xa8>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d1c:	d004      	beq.n	8004d28 <HAL_RTC_Init+0xa8>
 8004d1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d22:	4841      	ldr	r0, [pc, #260]	; (8004e28 <HAL_RTC_Init+0x1a8>)
 8004d24:	f7fc fc3b 	bl	800159e <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_RTC_Init+0xc2>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d004      	beq.n	8004d42 <HAL_RTC_Init+0xc2>
 8004d38:	f240 1101 	movw	r1, #257	; 0x101
 8004d3c:	483a      	ldr	r0, [pc, #232]	; (8004e28 <HAL_RTC_Init+0x1a8>)
 8004d3e:	f7fc fc2e 	bl	800159e <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	7f5b      	ldrb	r3, [r3, #29]
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d105      	bne.n	8004d58 <HAL_RTC_Init+0xd8>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fc fc54 	bl	8001600 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	22ca      	movs	r2, #202	; 0xca
 8004d64:	625a      	str	r2, [r3, #36]	; 0x24
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2253      	movs	r2, #83	; 0x53
 8004d6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f85e 	bl	8004e30 <RTC_EnterInitMode>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d008      	beq.n	8004d8c <HAL_RTC_Init+0x10c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	22ff      	movs	r2, #255	; 0xff
 8004d80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2204      	movs	r2, #4
 8004d86:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e046      	b.n	8004e1a <HAL_RTC_Init+0x19a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6899      	ldr	r1, [r3, #8]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	4b25      	ldr	r3, [pc, #148]	; (8004e2c <HAL_RTC_Init+0x1ac>)
 8004d98:	400b      	ands	r3, r1
 8004d9a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6899      	ldr	r1, [r3, #8]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	68d2      	ldr	r2, [r2, #12]
 8004dc2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6919      	ldr	r1, [r3, #16]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	041a      	lsls	r2, r3, #16
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004de6:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0208 	bic.w	r2, r2, #8
 8004df6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	22ff      	movs	r2, #255	; 0xff
 8004e10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004e18:	2300      	movs	r3, #0
  }
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40002800 	.word	0x40002800
 8004e28:	08007e28 	.word	0x08007e28
 8004e2c:	ff8fffbf 	.word	0xff8fffbf

08004e30 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d119      	bne.n	8004e7e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e52:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e54:	f7fd f97c 	bl	8002150 <HAL_GetTick>
 8004e58:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004e5a:	e009      	b.n	8004e70 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e5c:	f7fd f978 	bl	8002150 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e6a:	d901      	bls.n	8004e70 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e007      	b.n	8004e80 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0ee      	beq.n	8004e5c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e199      	b.n	80051ce <HAL_SPI_Init+0x346>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a94      	ldr	r2, [pc, #592]	; (80050f0 <HAL_SPI_Init+0x268>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d01d      	beq.n	8004ee0 <HAL_SPI_Init+0x58>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a92      	ldr	r2, [pc, #584]	; (80050f4 <HAL_SPI_Init+0x26c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d018      	beq.n	8004ee0 <HAL_SPI_Init+0x58>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a91      	ldr	r2, [pc, #580]	; (80050f8 <HAL_SPI_Init+0x270>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d013      	beq.n	8004ee0 <HAL_SPI_Init+0x58>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a8f      	ldr	r2, [pc, #572]	; (80050fc <HAL_SPI_Init+0x274>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00e      	beq.n	8004ee0 <HAL_SPI_Init+0x58>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a8e      	ldr	r2, [pc, #568]	; (8005100 <HAL_SPI_Init+0x278>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d009      	beq.n	8004ee0 <HAL_SPI_Init+0x58>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a8c      	ldr	r2, [pc, #560]	; (8005104 <HAL_SPI_Init+0x27c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d004      	beq.n	8004ee0 <HAL_SPI_Init+0x58>
 8004ed6:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004eda:	488b      	ldr	r0, [pc, #556]	; (8005108 <HAL_SPI_Init+0x280>)
 8004edc:	f7fc fb5f 	bl	800159e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d009      	beq.n	8004efc <HAL_SPI_Init+0x74>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ef0:	d004      	beq.n	8004efc <HAL_SPI_Init+0x74>
 8004ef2:	f240 1145 	movw	r1, #325	; 0x145
 8004ef6:	4884      	ldr	r0, [pc, #528]	; (8005108 <HAL_SPI_Init+0x280>)
 8004ef8:	f7fc fb51 	bl	800159e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00e      	beq.n	8004f22 <HAL_SPI_Init+0x9a>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f0c:	d009      	beq.n	8004f22 <HAL_SPI_Init+0x9a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f16:	d004      	beq.n	8004f22 <HAL_SPI_Init+0x9a>
 8004f18:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004f1c:	487a      	ldr	r0, [pc, #488]	; (8005108 <HAL_SPI_Init+0x280>)
 8004f1e:	f7fc fb3e 	bl	800159e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004f2a:	d040      	beq.n	8004fae <HAL_SPI_Init+0x126>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8004f34:	d03b      	beq.n	8004fae <HAL_SPI_Init+0x126>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004f3e:	d036      	beq.n	8004fae <HAL_SPI_Init+0x126>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f48:	d031      	beq.n	8004fae <HAL_SPI_Init+0x126>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004f52:	d02c      	beq.n	8004fae <HAL_SPI_Init+0x126>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004f5c:	d027      	beq.n	8004fae <HAL_SPI_Init+0x126>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004f66:	d022      	beq.n	8004fae <HAL_SPI_Init+0x126>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f70:	d01d      	beq.n	8004fae <HAL_SPI_Init+0x126>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f7a:	d018      	beq.n	8004fae <HAL_SPI_Init+0x126>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f84:	d013      	beq.n	8004fae <HAL_SPI_Init+0x126>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004f8e:	d00e      	beq.n	8004fae <HAL_SPI_Init+0x126>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f98:	d009      	beq.n	8004fae <HAL_SPI_Init+0x126>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fa2:	d004      	beq.n	8004fae <HAL_SPI_Init+0x126>
 8004fa4:	f240 1147 	movw	r1, #327	; 0x147
 8004fa8:	4857      	ldr	r0, [pc, #348]	; (8005108 <HAL_SPI_Init+0x280>)
 8004faa:	f7fc faf8 	bl	800159e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fb6:	d00d      	beq.n	8004fd4 <HAL_SPI_Init+0x14c>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d009      	beq.n	8004fd4 <HAL_SPI_Init+0x14c>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fc8:	d004      	beq.n	8004fd4 <HAL_SPI_Init+0x14c>
 8004fca:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004fce:	484e      	ldr	r0, [pc, #312]	; (8005108 <HAL_SPI_Init+0x280>)
 8004fd0:	f7fc fae5 	bl	800159e <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d008      	beq.n	8004fee <HAL_SPI_Init+0x166>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d004      	beq.n	8004fee <HAL_SPI_Init+0x166>
 8004fe4:	f240 1149 	movw	r1, #329	; 0x149
 8004fe8:	4847      	ldr	r0, [pc, #284]	; (8005108 <HAL_SPI_Init+0x280>)
 8004fea:	f7fc fad8 	bl	800159e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d020      	beq.n	8005038 <HAL_SPI_Init+0x1b0>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	2b08      	cmp	r3, #8
 8004ffc:	d01c      	beq.n	8005038 <HAL_SPI_Init+0x1b0>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	2b10      	cmp	r3, #16
 8005004:	d018      	beq.n	8005038 <HAL_SPI_Init+0x1b0>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	2b18      	cmp	r3, #24
 800500c:	d014      	beq.n	8005038 <HAL_SPI_Init+0x1b0>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	2b20      	cmp	r3, #32
 8005014:	d010      	beq.n	8005038 <HAL_SPI_Init+0x1b0>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	2b28      	cmp	r3, #40	; 0x28
 800501c:	d00c      	beq.n	8005038 <HAL_SPI_Init+0x1b0>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	2b30      	cmp	r3, #48	; 0x30
 8005024:	d008      	beq.n	8005038 <HAL_SPI_Init+0x1b0>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	2b38      	cmp	r3, #56	; 0x38
 800502c:	d004      	beq.n	8005038 <HAL_SPI_Init+0x1b0>
 800502e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8005032:	4835      	ldr	r0, [pc, #212]	; (8005108 <HAL_SPI_Init+0x280>)
 8005034:	f7fc fab3 	bl	800159e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d008      	beq.n	8005052 <HAL_SPI_Init+0x1ca>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	2b80      	cmp	r3, #128	; 0x80
 8005046:	d004      	beq.n	8005052 <HAL_SPI_Init+0x1ca>
 8005048:	f240 114b 	movw	r1, #331	; 0x14b
 800504c:	482e      	ldr	r0, [pc, #184]	; (8005108 <HAL_SPI_Init+0x280>)
 800504e:	f7fc faa6 	bl	800159e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	2b00      	cmp	r3, #0
 8005058:	d008      	beq.n	800506c <HAL_SPI_Init+0x1e4>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	2b10      	cmp	r3, #16
 8005060:	d004      	beq.n	800506c <HAL_SPI_Init+0x1e4>
 8005062:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8005066:	4828      	ldr	r0, [pc, #160]	; (8005108 <HAL_SPI_Init+0x280>)
 8005068:	f7fc fa99 	bl	800159e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	2b00      	cmp	r3, #0
 8005072:	d119      	bne.n	80050a8 <HAL_SPI_Init+0x220>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d008      	beq.n	800508e <HAL_SPI_Init+0x206>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	2b02      	cmp	r3, #2
 8005082:	d004      	beq.n	800508e <HAL_SPI_Init+0x206>
 8005084:	f240 114f 	movw	r1, #335	; 0x14f
 8005088:	481f      	ldr	r0, [pc, #124]	; (8005108 <HAL_SPI_Init+0x280>)
 800508a:	f7fc fa88 	bl	800159e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d008      	beq.n	80050a8 <HAL_SPI_Init+0x220>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d004      	beq.n	80050a8 <HAL_SPI_Init+0x220>
 800509e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80050a2:	4819      	ldr	r0, [pc, #100]	; (8005108 <HAL_SPI_Init+0x280>)
 80050a4:	f7fc fa7b 	bl	800159e <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d106      	bne.n	80050c8 <HAL_SPI_Init+0x240>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7fc fbec 	bl	80018a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050e8:	d910      	bls.n	800510c <HAL_SPI_Init+0x284>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050ea:	2300      	movs	r3, #0
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	e010      	b.n	8005112 <HAL_SPI_Init+0x28a>
 80050f0:	40013000 	.word	0x40013000
 80050f4:	40003800 	.word	0x40003800
 80050f8:	40003c00 	.word	0x40003c00
 80050fc:	40013400 	.word	0x40013400
 8005100:	40015000 	.word	0x40015000
 8005104:	40015400 	.word	0x40015400
 8005108:	08007e60 	.word	0x08007e60
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800510c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005110:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800511a:	d007      	beq.n	800512c <HAL_SPI_Init+0x2a4>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005124:	d002      	beq.n	800512c <HAL_SPI_Init+0x2a4>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10b      	bne.n	800514c <HAL_SPI_Init+0x2c4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800513c:	d903      	bls.n	8005146 <HAL_SPI_Init+0x2be>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2202      	movs	r2, #2
 8005142:	631a      	str	r2, [r3, #48]	; 0x30
 8005144:	e002      	b.n	800514c <HAL_SPI_Init+0x2c4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	431a      	orrs	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	431a      	orrs	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	ea42 0103 	orr.w	r1, r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	0c1b      	lsrs	r3, r3, #16
 800518c:	f003 0204 	and.w	r2, r3, #4
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	ea42 0103 	orr.w	r1, r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69da      	ldr	r2, [r3, #28]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop

080051d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	4613      	mov	r3, r2
 80051e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d009      	beq.n	8005208 <HAL_SPI_Transmit+0x30>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051fc:	d004      	beq.n	8005208 <HAL_SPI_Transmit+0x30>
 80051fe:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8005202:	4895      	ldr	r0, [pc, #596]	; (8005458 <HAL_SPI_Transmit+0x280>)
 8005204:	f7fc f9cb 	bl	800159e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800520e:	2b01      	cmp	r3, #1
 8005210:	d101      	bne.n	8005216 <HAL_SPI_Transmit+0x3e>
 8005212:	2302      	movs	r3, #2
 8005214:	e152      	b.n	80054bc <HAL_SPI_Transmit+0x2e4>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800521e:	f7fc ff97 	bl	8002150 <HAL_GetTick>
 8005222:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005224:	88fb      	ldrh	r3, [r7, #6]
 8005226:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b01      	cmp	r3, #1
 8005232:	d002      	beq.n	800523a <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8005234:	2302      	movs	r3, #2
 8005236:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005238:	e137      	b.n	80054aa <HAL_SPI_Transmit+0x2d2>
  }

  if ((pData == NULL) || (Size == 0U))
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <HAL_SPI_Transmit+0x6e>
 8005240:	88fb      	ldrh	r3, [r7, #6]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d102      	bne.n	800524c <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	77fb      	strb	r3, [r7, #31]
    goto error;
 800524a:	e12e      	b.n	80054aa <HAL_SPI_Transmit+0x2d2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2203      	movs	r2, #3
 8005250:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	88fa      	ldrh	r2, [r7, #6]
 8005264:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	88fa      	ldrh	r2, [r7, #6]
 800526a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005296:	d107      	bne.n	80052a8 <HAL_SPI_Transmit+0xd0>
  {
    SPI_1LINE_TX(hspi);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b2:	2b40      	cmp	r3, #64	; 0x40
 80052b4:	d007      	beq.n	80052c6 <HAL_SPI_Transmit+0xee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052ce:	d94b      	bls.n	8005368 <HAL_SPI_Transmit+0x190>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <HAL_SPI_Transmit+0x106>
 80052d8:	8afb      	ldrh	r3, [r7, #22]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d13e      	bne.n	800535c <HAL_SPI_Transmit+0x184>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	881a      	ldrh	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ee:	1c9a      	adds	r2, r3, #2
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005302:	e02b      	b.n	800535c <HAL_SPI_Transmit+0x184>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b02      	cmp	r3, #2
 8005310:	d112      	bne.n	8005338 <HAL_SPI_Transmit+0x160>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005316:	881a      	ldrh	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005322:	1c9a      	adds	r2, r3, #2
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800532c:	b29b      	uxth	r3, r3
 800532e:	3b01      	subs	r3, #1
 8005330:	b29a      	uxth	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005336:	e011      	b.n	800535c <HAL_SPI_Transmit+0x184>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005338:	f7fc ff0a 	bl	8002150 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	429a      	cmp	r2, r3
 8005346:	d803      	bhi.n	8005350 <HAL_SPI_Transmit+0x178>
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534e:	d102      	bne.n	8005356 <HAL_SPI_Transmit+0x17e>
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d102      	bne.n	800535c <HAL_SPI_Transmit+0x184>
        {
          errorcode = HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	77fb      	strb	r3, [r7, #31]
          goto error;
 800535a:	e0a6      	b.n	80054aa <HAL_SPI_Transmit+0x2d2>
    while (hspi->TxXferCount > 0U)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005360:	b29b      	uxth	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1ce      	bne.n	8005304 <HAL_SPI_Transmit+0x12c>
 8005366:	e07e      	b.n	8005466 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <HAL_SPI_Transmit+0x19e>
 8005370:	8afb      	ldrh	r3, [r7, #22]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d172      	bne.n	800545c <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800537a:	b29b      	uxth	r3, r3
 800537c:	2b01      	cmp	r3, #1
 800537e:	d912      	bls.n	80053a6 <HAL_SPI_Transmit+0x1ce>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	881a      	ldrh	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005390:	1c9a      	adds	r2, r3, #2
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b02      	subs	r3, #2
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053a4:	e05a      	b.n	800545c <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	330c      	adds	r3, #12
 80053b0:	7812      	ldrb	r2, [r2, #0]
 80053b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80053cc:	e046      	b.n	800545c <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d12b      	bne.n	8005434 <HAL_SPI_Transmit+0x25c>
      {
        if (hspi->TxXferCount > 1U)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d912      	bls.n	800540c <HAL_SPI_Transmit+0x234>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ea:	881a      	ldrh	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	1c9a      	adds	r2, r3, #2
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005400:	b29b      	uxth	r3, r3
 8005402:	3b02      	subs	r3, #2
 8005404:	b29a      	uxth	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	87da      	strh	r2, [r3, #62]	; 0x3e
 800540a:	e027      	b.n	800545c <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	330c      	adds	r3, #12
 8005416:	7812      	ldrb	r2, [r2, #0]
 8005418:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005428:	b29b      	uxth	r3, r3
 800542a:	3b01      	subs	r3, #1
 800542c:	b29a      	uxth	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005432:	e013      	b.n	800545c <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005434:	f7fc fe8c 	bl	8002150 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	429a      	cmp	r2, r3
 8005442:	d803      	bhi.n	800544c <HAL_SPI_Transmit+0x274>
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544a:	d102      	bne.n	8005452 <HAL_SPI_Transmit+0x27a>
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d104      	bne.n	800545c <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005456:	e028      	b.n	80054aa <HAL_SPI_Transmit+0x2d2>
 8005458:	08007e60 	.word	0x08007e60
    while (hspi->TxXferCount > 0U)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005460:	b29b      	uxth	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1b3      	bne.n	80053ce <HAL_SPI_Transmit+0x1f6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	6839      	ldr	r1, [r7, #0]
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 fdbe 	bl	8005fec <SPI_EndRxTxTransaction>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2220      	movs	r2, #32
 800547a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005484:	2300      	movs	r3, #0
 8005486:	613b      	str	r3, [r7, #16]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	613b      	str	r3, [r7, #16]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	77fb      	strb	r3, [r7, #31]
 80054a6:	e000      	b.n	80054aa <HAL_SPI_Transmit+0x2d2>
  }

error:
 80054a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80054ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3720      	adds	r7, #32
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b088      	sub	sp, #32
 80054c8:	af02      	add	r7, sp, #8
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	603b      	str	r3, [r7, #0]
 80054d0:	4613      	mov	r3, r2
 80054d2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054d4:	2300      	movs	r3, #0
 80054d6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054e0:	d112      	bne.n	8005508 <HAL_SPI_Receive+0x44>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10e      	bne.n	8005508 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2204      	movs	r2, #4
 80054ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80054f2:	88fa      	ldrh	r2, [r7, #6]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	4613      	mov	r3, r2
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 f908 	bl	8005714 <HAL_SPI_TransmitReceive>
 8005504:	4603      	mov	r3, r0
 8005506:	e101      	b.n	800570c <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800550e:	2b01      	cmp	r3, #1
 8005510:	d101      	bne.n	8005516 <HAL_SPI_Receive+0x52>
 8005512:	2302      	movs	r3, #2
 8005514:	e0fa      	b.n	800570c <HAL_SPI_Receive+0x248>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800551e:	f7fc fe17 	bl	8002150 <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b01      	cmp	r3, #1
 800552e:	d002      	beq.n	8005536 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005530:	2302      	movs	r3, #2
 8005532:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005534:	e0e1      	b.n	80056fa <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <HAL_SPI_Receive+0x7e>
 800553c:	88fb      	ldrh	r3, [r7, #6]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d102      	bne.n	8005548 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005546:	e0d8      	b.n	80056fa <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2204      	movs	r2, #4
 800554c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	88fa      	ldrh	r2, [r7, #6]
 8005560:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	88fa      	ldrh	r2, [r7, #6]
 8005568:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005592:	d908      	bls.n	80055a6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055a2:	605a      	str	r2, [r3, #4]
 80055a4:	e007      	b.n	80055b6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055b4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055be:	d107      	bne.n	80055d0 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80055ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055da:	2b40      	cmp	r3, #64	; 0x40
 80055dc:	d007      	beq.n	80055ee <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055f6:	d867      	bhi.n	80056c8 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80055f8:	e030      	b.n	800565c <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b01      	cmp	r3, #1
 8005606:	d117      	bne.n	8005638 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f103 020c 	add.w	r2, r3, #12
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	7812      	ldrb	r2, [r2, #0]
 8005616:	b2d2      	uxtb	r2, r2
 8005618:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	1c5a      	adds	r2, r3, #1
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005636:	e011      	b.n	800565c <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005638:	f7fc fd8a 	bl	8002150 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	429a      	cmp	r2, r3
 8005646:	d803      	bhi.n	8005650 <HAL_SPI_Receive+0x18c>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564e:	d102      	bne.n	8005656 <HAL_SPI_Receive+0x192>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d102      	bne.n	800565c <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	75fb      	strb	r3, [r7, #23]
          goto error;
 800565a:	e04e      	b.n	80056fa <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005662:	b29b      	uxth	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1c8      	bne.n	80055fa <HAL_SPI_Receive+0x136>
 8005668:	e034      	b.n	80056d4 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b01      	cmp	r3, #1
 8005676:	d115      	bne.n	80056a4 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68da      	ldr	r2, [r3, #12]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	b292      	uxth	r2, r2
 8005684:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	1c9a      	adds	r2, r3, #2
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005696:	b29b      	uxth	r3, r3
 8005698:	3b01      	subs	r3, #1
 800569a:	b29a      	uxth	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80056a2:	e011      	b.n	80056c8 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056a4:	f7fc fd54 	bl	8002150 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d803      	bhi.n	80056bc <HAL_SPI_Receive+0x1f8>
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ba:	d102      	bne.n	80056c2 <HAL_SPI_Receive+0x1fe>
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d102      	bne.n	80056c8 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80056c6:	e018      	b.n	80056fa <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1ca      	bne.n	800566a <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	6839      	ldr	r1, [r7, #0]
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 fc2f 	bl	8005f3c <SPI_EndRxTransaction>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2220      	movs	r2, #32
 80056e8:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	75fb      	strb	r3, [r7, #23]
 80056f6:	e000      	b.n	80056fa <HAL_SPI_Receive+0x236>
  }

error :
 80056f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800570a:	7dfb      	ldrb	r3, [r7, #23]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3718      	adds	r7, #24
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b08a      	sub	sp, #40	; 0x28
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005722:	2301      	movs	r3, #1
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d004      	beq.n	800573e <HAL_SPI_TransmitReceive+0x2a>
 8005734:	f240 41bf 	movw	r1, #1215	; 0x4bf
 8005738:	4895      	ldr	r0, [pc, #596]	; (8005990 <HAL_SPI_TransmitReceive+0x27c>)
 800573a:	f7fb ff30 	bl	800159e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005744:	2b01      	cmp	r3, #1
 8005746:	d101      	bne.n	800574c <HAL_SPI_TransmitReceive+0x38>
 8005748:	2302      	movs	r3, #2
 800574a:	e1fd      	b.n	8005b48 <HAL_SPI_TransmitReceive+0x434>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005754:	f7fc fcfc 	bl	8002150 <HAL_GetTick>
 8005758:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005760:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005768:	887b      	ldrh	r3, [r7, #2]
 800576a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800576c:	887b      	ldrh	r3, [r7, #2]
 800576e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005770:	7efb      	ldrb	r3, [r7, #27]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d00e      	beq.n	8005794 <HAL_SPI_TransmitReceive+0x80>
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800577c:	d106      	bne.n	800578c <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d102      	bne.n	800578c <HAL_SPI_TransmitReceive+0x78>
 8005786:	7efb      	ldrb	r3, [r7, #27]
 8005788:	2b04      	cmp	r3, #4
 800578a:	d003      	beq.n	8005794 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 800578c:	2302      	movs	r3, #2
 800578e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005792:	e1cf      	b.n	8005b34 <HAL_SPI_TransmitReceive+0x420>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d005      	beq.n	80057a6 <HAL_SPI_TransmitReceive+0x92>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <HAL_SPI_TransmitReceive+0x92>
 80057a0:	887b      	ldrh	r3, [r7, #2]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d103      	bne.n	80057ae <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80057ac:	e1c2      	b.n	8005b34 <HAL_SPI_TransmitReceive+0x420>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d003      	beq.n	80057c2 <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2205      	movs	r2, #5
 80057be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	887a      	ldrh	r2, [r7, #2]
 80057d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	887a      	ldrh	r2, [r7, #2]
 80057da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	887a      	ldrh	r2, [r7, #2]
 80057e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	887a      	ldrh	r2, [r7, #2]
 80057ee:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005804:	d802      	bhi.n	800580c <HAL_SPI_TransmitReceive+0xf8>
 8005806:	8a3b      	ldrh	r3, [r7, #16]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d908      	bls.n	800581e <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800581a:	605a      	str	r2, [r3, #4]
 800581c:	e007      	b.n	800582e <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800582c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005838:	2b40      	cmp	r3, #64	; 0x40
 800583a:	d007      	beq.n	800584c <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800584a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005854:	d97c      	bls.n	8005950 <HAL_SPI_TransmitReceive+0x23c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d002      	beq.n	8005864 <HAL_SPI_TransmitReceive+0x150>
 800585e:	8a7b      	ldrh	r3, [r7, #18]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d169      	bne.n	8005938 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	881a      	ldrh	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005874:	1c9a      	adds	r2, r3, #2
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800587e:	b29b      	uxth	r3, r3
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005888:	e056      	b.n	8005938 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b02      	cmp	r3, #2
 8005896:	d11b      	bne.n	80058d0 <HAL_SPI_TransmitReceive+0x1bc>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800589c:	b29b      	uxth	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d016      	beq.n	80058d0 <HAL_SPI_TransmitReceive+0x1bc>
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d113      	bne.n	80058d0 <HAL_SPI_TransmitReceive+0x1bc>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ac:	881a      	ldrh	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b8:	1c9a      	adds	r2, r3, #2
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	3b01      	subs	r3, #1
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d11c      	bne.n	8005918 <HAL_SPI_TransmitReceive+0x204>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d016      	beq.n	8005918 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68da      	ldr	r2, [r3, #12]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f4:	b292      	uxth	r2, r2
 80058f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fc:	1c9a      	adds	r2, r3, #2
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005908:	b29b      	uxth	r3, r3
 800590a:	3b01      	subs	r3, #1
 800590c:	b29a      	uxth	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005914:	2301      	movs	r3, #1
 8005916:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005918:	f7fc fc1a 	bl	8002150 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005924:	429a      	cmp	r2, r3
 8005926:	d807      	bhi.n	8005938 <HAL_SPI_TransmitReceive+0x224>
 8005928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592e:	d003      	beq.n	8005938 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005936:	e0fd      	b.n	8005b34 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800593c:	b29b      	uxth	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1a3      	bne.n	800588a <HAL_SPI_TransmitReceive+0x176>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d19d      	bne.n	800588a <HAL_SPI_TransmitReceive+0x176>
 800594e:	e0e1      	b.n	8005b14 <HAL_SPI_TransmitReceive+0x400>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <HAL_SPI_TransmitReceive+0x24c>
 8005958:	8a7b      	ldrh	r3, [r7, #18]
 800595a:	2b01      	cmp	r3, #1
 800595c:	f040 80cd 	bne.w	8005afa <HAL_SPI_TransmitReceive+0x3e6>
    {
      if (hspi->TxXferCount > 1U)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005964:	b29b      	uxth	r3, r3
 8005966:	2b01      	cmp	r3, #1
 8005968:	d914      	bls.n	8005994 <HAL_SPI_TransmitReceive+0x280>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596e:	881a      	ldrh	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597a:	1c9a      	adds	r2, r3, #2
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005984:	b29b      	uxth	r3, r3
 8005986:	3b02      	subs	r3, #2
 8005988:	b29a      	uxth	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800598e:	e0b4      	b.n	8005afa <HAL_SPI_TransmitReceive+0x3e6>
 8005990:	08007e60 	.word	0x08007e60
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	330c      	adds	r3, #12
 800599e:	7812      	ldrb	r2, [r2, #0]
 80059a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	3b01      	subs	r3, #1
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059ba:	e09e      	b.n	8005afa <HAL_SPI_TransmitReceive+0x3e6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d134      	bne.n	8005a34 <HAL_SPI_TransmitReceive+0x320>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d02f      	beq.n	8005a34 <HAL_SPI_TransmitReceive+0x320>
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d12c      	bne.n	8005a34 <HAL_SPI_TransmitReceive+0x320>
      {
        if (hspi->TxXferCount > 1U)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d912      	bls.n	8005a0a <HAL_SPI_TransmitReceive+0x2f6>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e8:	881a      	ldrh	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f4:	1c9a      	adds	r2, r3, #2
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	3b02      	subs	r3, #2
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a08:	e012      	b.n	8005a30 <HAL_SPI_TransmitReceive+0x31c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	330c      	adds	r3, #12
 8005a14:	7812      	ldrb	r2, [r2, #0]
 8005a16:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d148      	bne.n	8005ad4 <HAL_SPI_TransmitReceive+0x3c0>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d042      	beq.n	8005ad4 <HAL_SPI_TransmitReceive+0x3c0>
      {
        if (hspi->RxXferCount > 1U)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d923      	bls.n	8005aa2 <HAL_SPI_TransmitReceive+0x38e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68da      	ldr	r2, [r3, #12]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a64:	b292      	uxth	r2, r2
 8005a66:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6c:	1c9a      	adds	r2, r3, #2
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	3b02      	subs	r3, #2
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d81f      	bhi.n	8005ad0 <HAL_SPI_TransmitReceive+0x3bc>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a9e:	605a      	str	r2, [r3, #4]
 8005aa0:	e016      	b.n	8005ad0 <HAL_SPI_TransmitReceive+0x3bc>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f103 020c 	add.w	r2, r3, #12
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	7812      	ldrb	r2, [r2, #0]
 8005ab0:	b2d2      	uxtb	r2, r2
 8005ab2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ad4:	f7fc fb3c 	bl	8002150 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d803      	bhi.n	8005aec <HAL_SPI_TransmitReceive+0x3d8>
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aea:	d102      	bne.n	8005af2 <HAL_SPI_TransmitReceive+0x3de>
 8005aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d103      	bne.n	8005afa <HAL_SPI_TransmitReceive+0x3e6>
      {
        errorcode = HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005af8:	e01c      	b.n	8005b34 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f47f af5b 	bne.w	80059bc <HAL_SPI_TransmitReceive+0x2a8>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f47f af54 	bne.w	80059bc <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b14:	69fa      	ldr	r2, [r7, #28]
 8005b16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 fa67 	bl	8005fec <SPI_EndRxTxTransaction>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d006      	beq.n	8005b32 <HAL_SPI_TransmitReceive+0x41e>
  {
    errorcode = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	661a      	str	r2, [r3, #96]	; 0x60
 8005b30:	e000      	b.n	8005b34 <HAL_SPI_TransmitReceive+0x420>
  }

error :
 8005b32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3728      	adds	r7, #40	; 0x28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b088      	sub	sp, #32
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	099b      	lsrs	r3, r3, #6
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10f      	bne.n	8005b94 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	099b      	lsrs	r3, r3, #6
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d004      	beq.n	8005b94 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	4798      	blx	r3
    return;
 8005b92:	e0d8      	b.n	8005d46 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	085b      	lsrs	r3, r3, #1
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00a      	beq.n	8005bb6 <HAL_SPI_IRQHandler+0x66>
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	09db      	lsrs	r3, r3, #7
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d004      	beq.n	8005bb6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	4798      	blx	r3
    return;
 8005bb4:	e0c7      	b.n	8005d46 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	095b      	lsrs	r3, r3, #5
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10c      	bne.n	8005bdc <HAL_SPI_IRQHandler+0x8c>
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	099b      	lsrs	r3, r3, #6
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d106      	bne.n	8005bdc <HAL_SPI_IRQHandler+0x8c>
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	0a1b      	lsrs	r3, r3, #8
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f000 80b5 	beq.w	8005d46 <HAL_SPI_IRQHandler+0x1f6>
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	095b      	lsrs	r3, r3, #5
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 80ae 	beq.w	8005d46 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	099b      	lsrs	r3, r3, #6
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d023      	beq.n	8005c3e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b03      	cmp	r3, #3
 8005c00:	d011      	beq.n	8005c26 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c06:	f043 0204 	orr.w	r2, r3, #4
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	e00b      	b.n	8005c3e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c26:	2300      	movs	r3, #0
 8005c28:	613b      	str	r3, [r7, #16]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	613b      	str	r3, [r7, #16]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	613b      	str	r3, [r7, #16]
 8005c3a:	693b      	ldr	r3, [r7, #16]
        return;
 8005c3c:	e083      	b.n	8005d46 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	095b      	lsrs	r3, r3, #5
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d014      	beq.n	8005c74 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c4e:	f043 0201 	orr.w	r2, r3, #1
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005c56:	2300      	movs	r3, #0
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	60fb      	str	r3, [r7, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	0a1b      	lsrs	r3, r3, #8
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00c      	beq.n	8005c9a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c84:	f043 0208 	orr.w	r2, r3, #8
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	60bb      	str	r3, [r7, #8]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	60bb      	str	r3, [r7, #8]
 8005c98:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d050      	beq.n	8005d44 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cb0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d104      	bne.n	8005cce <HAL_SPI_IRQHandler+0x17e>
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d034      	beq.n	8005d38 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0203 	bic.w	r2, r2, #3
 8005cdc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d011      	beq.n	8005d0a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cea:	4a18      	ldr	r2, [pc, #96]	; (8005d4c <HAL_SPI_IRQHandler+0x1fc>)
 8005cec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fc fcea 	bl	80026cc <HAL_DMA_Abort_IT>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d005      	beq.n	8005d0a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d016      	beq.n	8005d40 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d16:	4a0d      	ldr	r2, [pc, #52]	; (8005d4c <HAL_SPI_IRQHandler+0x1fc>)
 8005d18:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fc fcd4 	bl	80026cc <HAL_DMA_Abort_IT>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005d36:	e003      	b.n	8005d40 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f809 	bl	8005d50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005d3e:	e000      	b.n	8005d42 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005d40:	bf00      	nop
    return;
 8005d42:	bf00      	nop
 8005d44:	bf00      	nop
  }
}
 8005d46:	3720      	adds	r7, #32
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	08005d65 	.word	0x08005d65

08005d50 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d70:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f7ff ffe5 	bl	8005d50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d86:	bf00      	nop
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b084      	sub	sp, #16
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	60f8      	str	r0, [r7, #12]
 8005d96:	60b9      	str	r1, [r7, #8]
 8005d98:	603b      	str	r3, [r7, #0]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d9e:	e04c      	b.n	8005e3a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da6:	d048      	beq.n	8005e3a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005da8:	f7fc f9d2 	bl	8002150 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d902      	bls.n	8005dbe <SPI_WaitFlagStateUntilTimeout+0x30>
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d13d      	bne.n	8005e3a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005dcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dd6:	d111      	bne.n	8005dfc <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005de0:	d004      	beq.n	8005dec <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dea:	d107      	bne.n	8005dfc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e04:	d10f      	bne.n	8005e26 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e00f      	b.n	8005e5a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	4013      	ands	r3, r2
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	bf0c      	ite	eq
 8005e4a:	2301      	moveq	r3, #1
 8005e4c:	2300      	movne	r3, #0
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	461a      	mov	r2, r3
 8005e52:	79fb      	ldrb	r3, [r7, #7]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d1a3      	bne.n	8005da0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b084      	sub	sp, #16
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	607a      	str	r2, [r7, #4]
 8005e6e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005e70:	e057      	b.n	8005f22 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e78:	d106      	bne.n	8005e88 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d103      	bne.n	8005e88 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	330c      	adds	r3, #12
 8005e86:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8e:	d048      	beq.n	8005f22 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005e90:	f7fc f95e 	bl	8002150 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d902      	bls.n	8005ea6 <SPI_WaitFifoStateUntilTimeout+0x44>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d13d      	bne.n	8005f22 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005eb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ebe:	d111      	bne.n	8005ee4 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ec8:	d004      	beq.n	8005ed4 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ed2:	d107      	bne.n	8005ee4 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ee2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eec:	d10f      	bne.n	8005f0e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e008      	b.n	8005f34 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d19f      	bne.n	8005e72 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af02      	add	r7, sp, #8
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f50:	d111      	bne.n	8005f76 <SPI_EndRxTransaction+0x3a>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f5a:	d004      	beq.n	8005f66 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f64:	d107      	bne.n	8005f76 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f74:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2180      	movs	r1, #128	; 0x80
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f7ff ff04 	bl	8005d8e <SPI_WaitFlagStateUntilTimeout>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d007      	beq.n	8005f9c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f90:	f043 0220 	orr.w	r2, r3, #32
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e023      	b.n	8005fe4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fa4:	d11d      	bne.n	8005fe2 <SPI_EndRxTransaction+0xa6>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fae:	d004      	beq.n	8005fba <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fb8:	d113      	bne.n	8005fe2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f7ff ff4b 	bl	8005e62 <SPI_WaitFifoStateUntilTimeout>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d007      	beq.n	8005fe2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd6:	f043 0220 	orr.w	r2, r3, #32
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e000      	b.n	8005fe4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af02      	add	r7, sp, #8
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f7ff ff2c 	bl	8005e62 <SPI_WaitFifoStateUntilTimeout>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d007      	beq.n	8006020 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006014:	f043 0220 	orr.w	r2, r3, #32
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e027      	b.n	8006070 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2200      	movs	r2, #0
 8006028:	2180      	movs	r1, #128	; 0x80
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f7ff feaf 	bl	8005d8e <SPI_WaitFlagStateUntilTimeout>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d007      	beq.n	8006046 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800603a:	f043 0220 	orr.w	r2, r3, #32
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e014      	b.n	8006070 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	2200      	movs	r2, #0
 800604e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f7ff ff05 	bl	8005e62 <SPI_WaitFifoStateUntilTimeout>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d007      	beq.n	800606e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006062:	f043 0220 	orr.w	r2, r3, #32
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e000      	b.n	8006070 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e09f      	b.n	80061ca <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d02d      	beq.n	80060ee <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a4f      	ldr	r2, [pc, #316]	; (80061d4 <HAL_UART_Init+0x15c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d055      	beq.n	8006148 <HAL_UART_Init+0xd0>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a4d      	ldr	r2, [pc, #308]	; (80061d8 <HAL_UART_Init+0x160>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d050      	beq.n	8006148 <HAL_UART_Init+0xd0>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a4c      	ldr	r2, [pc, #304]	; (80061dc <HAL_UART_Init+0x164>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d04b      	beq.n	8006148 <HAL_UART_Init+0xd0>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a4a      	ldr	r2, [pc, #296]	; (80061e0 <HAL_UART_Init+0x168>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d046      	beq.n	8006148 <HAL_UART_Init+0xd0>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a49      	ldr	r2, [pc, #292]	; (80061e4 <HAL_UART_Init+0x16c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d041      	beq.n	8006148 <HAL_UART_Init+0xd0>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a47      	ldr	r2, [pc, #284]	; (80061e8 <HAL_UART_Init+0x170>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d03c      	beq.n	8006148 <HAL_UART_Init+0xd0>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a46      	ldr	r2, [pc, #280]	; (80061ec <HAL_UART_Init+0x174>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d037      	beq.n	8006148 <HAL_UART_Init+0xd0>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a44      	ldr	r2, [pc, #272]	; (80061f0 <HAL_UART_Init+0x178>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d032      	beq.n	8006148 <HAL_UART_Init+0xd0>
 80060e2:	f44f 7195 	mov.w	r1, #298	; 0x12a
 80060e6:	4843      	ldr	r0, [pc, #268]	; (80061f4 <HAL_UART_Init+0x17c>)
 80060e8:	f7fb fa59 	bl	800159e <assert_failed>
 80060ec:	e02c      	b.n	8006148 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a38      	ldr	r2, [pc, #224]	; (80061d4 <HAL_UART_Init+0x15c>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d027      	beq.n	8006148 <HAL_UART_Init+0xd0>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a36      	ldr	r2, [pc, #216]	; (80061d8 <HAL_UART_Init+0x160>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d022      	beq.n	8006148 <HAL_UART_Init+0xd0>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a35      	ldr	r2, [pc, #212]	; (80061dc <HAL_UART_Init+0x164>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d01d      	beq.n	8006148 <HAL_UART_Init+0xd0>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a33      	ldr	r2, [pc, #204]	; (80061e0 <HAL_UART_Init+0x168>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d018      	beq.n	8006148 <HAL_UART_Init+0xd0>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a32      	ldr	r2, [pc, #200]	; (80061e4 <HAL_UART_Init+0x16c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d013      	beq.n	8006148 <HAL_UART_Init+0xd0>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a30      	ldr	r2, [pc, #192]	; (80061e8 <HAL_UART_Init+0x170>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d00e      	beq.n	8006148 <HAL_UART_Init+0xd0>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a2f      	ldr	r2, [pc, #188]	; (80061ec <HAL_UART_Init+0x174>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d009      	beq.n	8006148 <HAL_UART_Init+0xd0>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a2d      	ldr	r2, [pc, #180]	; (80061f0 <HAL_UART_Init+0x178>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d004      	beq.n	8006148 <HAL_UART_Init+0xd0>
 800613e:	f240 112f 	movw	r1, #303	; 0x12f
 8006142:	482c      	ldr	r0, [pc, #176]	; (80061f4 <HAL_UART_Init+0x17c>)
 8006144:	f7fb fa2b 	bl	800159e <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800614c:	2b00      	cmp	r3, #0
 800614e:	d106      	bne.n	800615e <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f7fb fe81 	bl	8001e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2224      	movs	r2, #36	; 0x24
 8006162:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0201 	bic.w	r2, r2, #1
 8006172:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fb01 	bl	800677c <UART_SetConfig>
 800617a:	4603      	mov	r3, r0
 800617c:	2b01      	cmp	r3, #1
 800617e:	d101      	bne.n	8006184 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e022      	b.n	80061ca <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	2b00      	cmp	r3, #0
 800618a:	d002      	beq.n	8006192 <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fe31 	bl	8006df4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689a      	ldr	r2, [r3, #8]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f042 0201 	orr.w	r2, r2, #1
 80061c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 ff6a 	bl	800709c <UART_CheckIdleState>
 80061c8:	4603      	mov	r3, r0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	40011000 	.word	0x40011000
 80061d8:	40004400 	.word	0x40004400
 80061dc:	40004800 	.word	0x40004800
 80061e0:	40004c00 	.word	0x40004c00
 80061e4:	40005000 	.word	0x40005000
 80061e8:	40011400 	.word	0x40011400
 80061ec:	40007800 	.word	0x40007800
 80061f0:	40007c00 	.word	0x40007c00
 80061f4:	08007e98 	.word	0x08007e98

080061f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b08a      	sub	sp, #40	; 0x28
 80061fc:	af02      	add	r7, sp, #8
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	603b      	str	r3, [r7, #0]
 8006204:	4613      	mov	r3, r2
 8006206:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800620c:	2b20      	cmp	r3, #32
 800620e:	d17f      	bne.n	8006310 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d002      	beq.n	800621c <HAL_UART_Transmit+0x24>
 8006216:	88fb      	ldrh	r3, [r7, #6]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e078      	b.n	8006312 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006226:	2b01      	cmp	r3, #1
 8006228:	d101      	bne.n	800622e <HAL_UART_Transmit+0x36>
 800622a:	2302      	movs	r3, #2
 800622c:	e071      	b.n	8006312 <HAL_UART_Transmit+0x11a>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2221      	movs	r2, #33	; 0x21
 8006240:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006242:	f7fb ff85 	bl	8002150 <HAL_GetTick>
 8006246:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	88fa      	ldrh	r2, [r7, #6]
 800624c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	88fa      	ldrh	r2, [r7, #6]
 8006254:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006260:	d108      	bne.n	8006274 <HAL_UART_Transmit+0x7c>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d104      	bne.n	8006274 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800626a:	2300      	movs	r3, #0
 800626c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	61bb      	str	r3, [r7, #24]
 8006272:	e003      	b.n	800627c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006278:	2300      	movs	r3, #0
 800627a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006284:	e02c      	b.n	80062e0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2200      	movs	r2, #0
 800628e:	2180      	movs	r1, #128	; 0x80
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 ff48 	bl	8007126 <UART_WaitOnFlagUntilTimeout>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e038      	b.n	8006312 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10b      	bne.n	80062be <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	881b      	ldrh	r3, [r3, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	3302      	adds	r3, #2
 80062ba:	61bb      	str	r3, [r7, #24]
 80062bc:	e007      	b.n	80062ce <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	781a      	ldrb	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	3301      	adds	r3, #1
 80062cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	3b01      	subs	r3, #1
 80062d8:	b29a      	uxth	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1cc      	bne.n	8006286 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	2200      	movs	r2, #0
 80062f4:	2140      	movs	r1, #64	; 0x40
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f000 ff15 	bl	8007126 <UART_WaitOnFlagUntilTimeout>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e005      	b.n	8006312 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2220      	movs	r2, #32
 800630a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800630c:	2300      	movs	r3, #0
 800630e:	e000      	b.n	8006312 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8006310:	2302      	movs	r3, #2
  }
}
 8006312:	4618      	mov	r0, r3
 8006314:	3720      	adds	r7, #32
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b08a      	sub	sp, #40	; 0x28
 800631e:	af02      	add	r7, sp, #8
 8006320:	60f8      	str	r0, [r7, #12]
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	603b      	str	r3, [r7, #0]
 8006326:	4613      	mov	r3, r2
 8006328:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800632e:	2b20      	cmp	r3, #32
 8006330:	f040 80ba 	bne.w	80064a8 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d002      	beq.n	8006340 <HAL_UART_Receive+0x26>
 800633a:	88fb      	ldrh	r3, [r7, #6]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e0b2      	b.n	80064aa <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800634a:	2b01      	cmp	r3, #1
 800634c:	d101      	bne.n	8006352 <HAL_UART_Receive+0x38>
 800634e:	2302      	movs	r3, #2
 8006350:	e0ab      	b.n	80064aa <HAL_UART_Receive+0x190>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2222      	movs	r2, #34	; 0x22
 8006364:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006366:	f7fb fef3 	bl	8002150 <HAL_GetTick>
 800636a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	88fa      	ldrh	r2, [r7, #6]
 8006370:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	88fa      	ldrh	r2, [r7, #6]
 8006378:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006384:	d10e      	bne.n	80063a4 <HAL_UART_Receive+0x8a>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d105      	bne.n	800639a <HAL_UART_Receive+0x80>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006394:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006398:	e02d      	b.n	80063f6 <HAL_UART_Receive+0xdc>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	22ff      	movs	r2, #255	; 0xff
 800639e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063a2:	e028      	b.n	80063f6 <HAL_UART_Receive+0xdc>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10d      	bne.n	80063c8 <HAL_UART_Receive+0xae>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d104      	bne.n	80063be <HAL_UART_Receive+0xa4>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	22ff      	movs	r2, #255	; 0xff
 80063b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063bc:	e01b      	b.n	80063f6 <HAL_UART_Receive+0xdc>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	227f      	movs	r2, #127	; 0x7f
 80063c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063c6:	e016      	b.n	80063f6 <HAL_UART_Receive+0xdc>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063d0:	d10d      	bne.n	80063ee <HAL_UART_Receive+0xd4>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d104      	bne.n	80063e4 <HAL_UART_Receive+0xca>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	227f      	movs	r2, #127	; 0x7f
 80063de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063e2:	e008      	b.n	80063f6 <HAL_UART_Receive+0xdc>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	223f      	movs	r2, #63	; 0x3f
 80063e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063ec:	e003      	b.n	80063f6 <HAL_UART_Receive+0xdc>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80063fc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006406:	d108      	bne.n	800641a <HAL_UART_Receive+0x100>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d104      	bne.n	800641a <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8006410:	2300      	movs	r3, #0
 8006412:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	61bb      	str	r3, [r7, #24]
 8006418:	e003      	b.n	8006422 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800641e:	2300      	movs	r3, #0
 8006420:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800642a:	e032      	b.n	8006492 <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	2200      	movs	r2, #0
 8006434:	2120      	movs	r1, #32
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f000 fe75 	bl	8007126 <UART_WaitOnFlagUntilTimeout>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e031      	b.n	80064aa <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10c      	bne.n	8006466 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006452:	b29a      	uxth	r2, r3
 8006454:	8a7b      	ldrh	r3, [r7, #18]
 8006456:	4013      	ands	r3, r2
 8006458:	b29a      	uxth	r2, r3
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	3302      	adds	r3, #2
 8006462:	61bb      	str	r3, [r7, #24]
 8006464:	e00c      	b.n	8006480 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	b2da      	uxtb	r2, r3
 800646e:	8a7b      	ldrh	r3, [r7, #18]
 8006470:	b2db      	uxtb	r3, r3
 8006472:	4013      	ands	r3, r2
 8006474:	b2da      	uxtb	r2, r3
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	3301      	adds	r3, #1
 800647e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006486:	b29b      	uxth	r3, r3
 8006488:	3b01      	subs	r3, #1
 800648a:	b29a      	uxth	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006498:	b29b      	uxth	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1c6      	bne.n	800642c <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2220      	movs	r2, #32
 80064a2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	e000      	b.n	80064aa <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 80064a8:	2302      	movs	r3, #2
  }
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3720      	adds	r7, #32
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
	...

080064b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b088      	sub	sp, #32
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80064d4:	69fa      	ldr	r2, [r7, #28]
 80064d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80064da:	4013      	ands	r3, r2
 80064dc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d113      	bne.n	800650c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	f003 0320 	and.w	r3, r3, #32
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00e      	beq.n	800650c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	f003 0320 	and.w	r3, r3, #32
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d009      	beq.n	800650c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 8114 	beq.w	800672a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	4798      	blx	r3
      }
      return;
 800650a:	e10e      	b.n	800672a <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 80d6 	beq.w	80066c0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d105      	bne.n	800652a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 80cb 	beq.w	80066c0 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00e      	beq.n	8006552 <HAL_UART_IRQHandler+0x9e>
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800653a:	2b00      	cmp	r3, #0
 800653c:	d009      	beq.n	8006552 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2201      	movs	r2, #1
 8006544:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800654a:	f043 0201 	orr.w	r2, r3, #1
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00e      	beq.n	800657a <HAL_UART_IRQHandler+0xc6>
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d009      	beq.n	800657a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2202      	movs	r2, #2
 800656c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006572:	f043 0204 	orr.w	r2, r3, #4
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00e      	beq.n	80065a2 <HAL_UART_IRQHandler+0xee>
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	d009      	beq.n	80065a2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2204      	movs	r2, #4
 8006594:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800659a:	f043 0202 	orr.w	r2, r3, #2
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	f003 0308 	and.w	r3, r3, #8
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d013      	beq.n	80065d4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	f003 0320 	and.w	r3, r3, #32
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d104      	bne.n	80065c0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d009      	beq.n	80065d4 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2208      	movs	r2, #8
 80065c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065cc:	f043 0208 	orr.w	r2, r3, #8
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00f      	beq.n	80065fe <HAL_UART_IRQHandler+0x14a>
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00a      	beq.n	80065fe <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065f6:	f043 0220 	orr.w	r2, r3, #32
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 8093 	beq.w	800672e <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	f003 0320 	and.w	r3, r3, #32
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00c      	beq.n	800662c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	f003 0320 	and.w	r3, r3, #32
 8006618:	2b00      	cmp	r3, #0
 800661a:	d007      	beq.n	800662c <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006630:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663c:	2b40      	cmp	r3, #64	; 0x40
 800663e:	d004      	beq.n	800664a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006646:	2b00      	cmp	r3, #0
 8006648:	d031      	beq.n	80066ae <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 fde6 	bl	800721c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665a:	2b40      	cmp	r3, #64	; 0x40
 800665c:	d123      	bne.n	80066a6 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800666c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006672:	2b00      	cmp	r3, #0
 8006674:	d013      	beq.n	800669e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800667a:	4a30      	ldr	r2, [pc, #192]	; (800673c <HAL_UART_IRQHandler+0x288>)
 800667c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006682:	4618      	mov	r0, r3
 8006684:	f7fc f822 	bl	80026cc <HAL_DMA_Abort_IT>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d016      	beq.n	80066bc <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006698:	4610      	mov	r0, r2
 800669a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800669c:	e00e      	b.n	80066bc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f858 	bl	8006754 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a4:	e00a      	b.n	80066bc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f854 	bl	8006754 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ac:	e006      	b.n	80066bc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f850 	bl	8006754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80066ba:	e038      	b.n	800672e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066bc:	bf00      	nop
    return;
 80066be:	e036      	b.n	800672e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00d      	beq.n	80066e6 <HAL_UART_IRQHandler+0x232>
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d008      	beq.n	80066e6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80066dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f842 	bl	8006768 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066e4:	e026      	b.n	8006734 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00d      	beq.n	800670c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d008      	beq.n	800670c <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d017      	beq.n	8006732 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	4798      	blx	r3
    }
    return;
 800670a:	e012      	b.n	8006732 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00e      	beq.n	8006734 <HAL_UART_IRQHandler+0x280>
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671c:	2b00      	cmp	r3, #0
 800671e:	d009      	beq.n	8006734 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fdb1 	bl	8007288 <UART_EndTransmit_IT>
    return;
 8006726:	bf00      	nop
 8006728:	e004      	b.n	8006734 <HAL_UART_IRQHandler+0x280>
      return;
 800672a:	bf00      	nop
 800672c:	e002      	b.n	8006734 <HAL_UART_IRQHandler+0x280>
    return;
 800672e:	bf00      	nop
 8006730:	e000      	b.n	8006734 <HAL_UART_IRQHandler+0x280>
    return;
 8006732:	bf00      	nop
  }

}
 8006734:	3720      	adds	r7, #32
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	0800725d 	.word	0x0800725d

08006740 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b088      	sub	sp, #32
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006784:	2300      	movs	r3, #0
 8006786:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	75fb      	strb	r3, [r7, #23]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	4aaa      	ldr	r2, [pc, #680]	; (8006a3c <UART_SetConfig+0x2c0>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d904      	bls.n	80067a0 <UART_SetConfig+0x24>
 8006796:	f640 21be 	movw	r1, #2750	; 0xabe
 800679a:	48a9      	ldr	r0, [pc, #676]	; (8006a40 <UART_SetConfig+0x2c4>)
 800679c:	f7fa feff 	bl	800159e <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067a8:	d00d      	beq.n	80067c6 <UART_SetConfig+0x4a>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d009      	beq.n	80067c6 <UART_SetConfig+0x4a>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ba:	d004      	beq.n	80067c6 <UART_SetConfig+0x4a>
 80067bc:	f640 21bf 	movw	r1, #2751	; 0xabf
 80067c0:	489f      	ldr	r0, [pc, #636]	; (8006a40 <UART_SetConfig+0x2c4>)
 80067c2:	f7fa feec 	bl	800159e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ce:	d012      	beq.n	80067f6 <UART_SetConfig+0x7a>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00e      	beq.n	80067f6 <UART_SetConfig+0x7a>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067e0:	d009      	beq.n	80067f6 <UART_SetConfig+0x7a>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ea:	d004      	beq.n	80067f6 <UART_SetConfig+0x7a>
 80067ec:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 80067f0:	4893      	ldr	r0, [pc, #588]	; (8006a40 <UART_SetConfig+0x2c4>)
 80067f2:	f7fa fed4 	bl	800159e <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d009      	beq.n	8006812 <UART_SetConfig+0x96>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006806:	d004      	beq.n	8006812 <UART_SetConfig+0x96>
 8006808:	f640 21c1 	movw	r1, #2753	; 0xac1
 800680c:	488c      	ldr	r0, [pc, #560]	; (8006a40 <UART_SetConfig+0x2c4>)
 800680e:	f7fa fec6 	bl	800159e <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00e      	beq.n	8006838 <UART_SetConfig+0xbc>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006822:	d009      	beq.n	8006838 <UART_SetConfig+0xbc>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800682c:	d004      	beq.n	8006838 <UART_SetConfig+0xbc>
 800682e:	f640 21c3 	movw	r1, #2755	; 0xac3
 8006832:	4883      	ldr	r0, [pc, #524]	; (8006a40 <UART_SetConfig+0x2c4>)
 8006834:	f7fa feb3 	bl	800159e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	f023 030c 	bic.w	r3, r3, #12
 8006840:	2b00      	cmp	r3, #0
 8006842:	d103      	bne.n	800684c <UART_SetConfig+0xd0>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d104      	bne.n	8006856 <UART_SetConfig+0xda>
 800684c:	f640 21c4 	movw	r1, #2756	; 0xac4
 8006850:	487b      	ldr	r0, [pc, #492]	; (8006a40 <UART_SetConfig+0x2c4>)
 8006852:	f7fa fea4 	bl	800159e <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d013      	beq.n	8006886 <UART_SetConfig+0x10a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006866:	d00e      	beq.n	8006886 <UART_SetConfig+0x10a>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006870:	d009      	beq.n	8006886 <UART_SetConfig+0x10a>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800687a:	d004      	beq.n	8006886 <UART_SetConfig+0x10a>
 800687c:	f640 21c5 	movw	r1, #2757	; 0xac5
 8006880:	486f      	ldr	r0, [pc, #444]	; (8006a40 <UART_SetConfig+0x2c4>)
 8006882:	f7fa fe8c 	bl	800159e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d009      	beq.n	80068a2 <UART_SetConfig+0x126>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006896:	d004      	beq.n	80068a2 <UART_SetConfig+0x126>
 8006898:	f640 21c6 	movw	r1, #2758	; 0xac6
 800689c:	4868      	ldr	r0, [pc, #416]	; (8006a40 <UART_SetConfig+0x2c4>)
 800689e:	f7fa fe7e 	bl	800159e <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	689a      	ldr	r2, [r3, #8]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	431a      	orrs	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	431a      	orrs	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	4b60      	ldr	r3, [pc, #384]	; (8006a44 <UART_SetConfig+0x2c8>)
 80068c2:	4013      	ands	r3, r2
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	6812      	ldr	r2, [r2, #0]
 80068c8:	6939      	ldr	r1, [r7, #16]
 80068ca:	430b      	orrs	r3, r1
 80068cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68da      	ldr	r2, [r3, #12]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	430a      	orrs	r2, r1
 8006906:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a4e      	ldr	r2, [pc, #312]	; (8006a48 <UART_SetConfig+0x2cc>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d122      	bne.n	8006958 <UART_SetConfig+0x1dc>
 8006912:	4b4e      	ldr	r3, [pc, #312]	; (8006a4c <UART_SetConfig+0x2d0>)
 8006914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006918:	f003 0303 	and.w	r3, r3, #3
 800691c:	2b03      	cmp	r3, #3
 800691e:	d817      	bhi.n	8006950 <UART_SetConfig+0x1d4>
 8006920:	a201      	add	r2, pc, #4	; (adr r2, 8006928 <UART_SetConfig+0x1ac>)
 8006922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006926:	bf00      	nop
 8006928:	08006939 	.word	0x08006939
 800692c:	08006945 	.word	0x08006945
 8006930:	0800693f 	.word	0x0800693f
 8006934:	0800694b 	.word	0x0800694b
 8006938:	2301      	movs	r3, #1
 800693a:	77fb      	strb	r3, [r7, #31]
 800693c:	e14d      	b.n	8006bda <UART_SetConfig+0x45e>
 800693e:	2302      	movs	r3, #2
 8006940:	77fb      	strb	r3, [r7, #31]
 8006942:	e14a      	b.n	8006bda <UART_SetConfig+0x45e>
 8006944:	2304      	movs	r3, #4
 8006946:	77fb      	strb	r3, [r7, #31]
 8006948:	e147      	b.n	8006bda <UART_SetConfig+0x45e>
 800694a:	2308      	movs	r3, #8
 800694c:	77fb      	strb	r3, [r7, #31]
 800694e:	e144      	b.n	8006bda <UART_SetConfig+0x45e>
 8006950:	2310      	movs	r3, #16
 8006952:	77fb      	strb	r3, [r7, #31]
 8006954:	bf00      	nop
 8006956:	e140      	b.n	8006bda <UART_SetConfig+0x45e>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a3c      	ldr	r2, [pc, #240]	; (8006a50 <UART_SetConfig+0x2d4>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d134      	bne.n	80069cc <UART_SetConfig+0x250>
 8006962:	4b3a      	ldr	r3, [pc, #232]	; (8006a4c <UART_SetConfig+0x2d0>)
 8006964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006968:	f003 030c 	and.w	r3, r3, #12
 800696c:	2b0c      	cmp	r3, #12
 800696e:	d829      	bhi.n	80069c4 <UART_SetConfig+0x248>
 8006970:	a201      	add	r2, pc, #4	; (adr r2, 8006978 <UART_SetConfig+0x1fc>)
 8006972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006976:	bf00      	nop
 8006978:	080069ad 	.word	0x080069ad
 800697c:	080069c5 	.word	0x080069c5
 8006980:	080069c5 	.word	0x080069c5
 8006984:	080069c5 	.word	0x080069c5
 8006988:	080069b9 	.word	0x080069b9
 800698c:	080069c5 	.word	0x080069c5
 8006990:	080069c5 	.word	0x080069c5
 8006994:	080069c5 	.word	0x080069c5
 8006998:	080069b3 	.word	0x080069b3
 800699c:	080069c5 	.word	0x080069c5
 80069a0:	080069c5 	.word	0x080069c5
 80069a4:	080069c5 	.word	0x080069c5
 80069a8:	080069bf 	.word	0x080069bf
 80069ac:	2300      	movs	r3, #0
 80069ae:	77fb      	strb	r3, [r7, #31]
 80069b0:	e113      	b.n	8006bda <UART_SetConfig+0x45e>
 80069b2:	2302      	movs	r3, #2
 80069b4:	77fb      	strb	r3, [r7, #31]
 80069b6:	e110      	b.n	8006bda <UART_SetConfig+0x45e>
 80069b8:	2304      	movs	r3, #4
 80069ba:	77fb      	strb	r3, [r7, #31]
 80069bc:	e10d      	b.n	8006bda <UART_SetConfig+0x45e>
 80069be:	2308      	movs	r3, #8
 80069c0:	77fb      	strb	r3, [r7, #31]
 80069c2:	e10a      	b.n	8006bda <UART_SetConfig+0x45e>
 80069c4:	2310      	movs	r3, #16
 80069c6:	77fb      	strb	r3, [r7, #31]
 80069c8:	bf00      	nop
 80069ca:	e106      	b.n	8006bda <UART_SetConfig+0x45e>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a20      	ldr	r2, [pc, #128]	; (8006a54 <UART_SetConfig+0x2d8>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d120      	bne.n	8006a18 <UART_SetConfig+0x29c>
 80069d6:	4b1d      	ldr	r3, [pc, #116]	; (8006a4c <UART_SetConfig+0x2d0>)
 80069d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069e0:	2b10      	cmp	r3, #16
 80069e2:	d00f      	beq.n	8006a04 <UART_SetConfig+0x288>
 80069e4:	2b10      	cmp	r3, #16
 80069e6:	d802      	bhi.n	80069ee <UART_SetConfig+0x272>
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d005      	beq.n	80069f8 <UART_SetConfig+0x27c>
 80069ec:	e010      	b.n	8006a10 <UART_SetConfig+0x294>
 80069ee:	2b20      	cmp	r3, #32
 80069f0:	d005      	beq.n	80069fe <UART_SetConfig+0x282>
 80069f2:	2b30      	cmp	r3, #48	; 0x30
 80069f4:	d009      	beq.n	8006a0a <UART_SetConfig+0x28e>
 80069f6:	e00b      	b.n	8006a10 <UART_SetConfig+0x294>
 80069f8:	2300      	movs	r3, #0
 80069fa:	77fb      	strb	r3, [r7, #31]
 80069fc:	e0ed      	b.n	8006bda <UART_SetConfig+0x45e>
 80069fe:	2302      	movs	r3, #2
 8006a00:	77fb      	strb	r3, [r7, #31]
 8006a02:	e0ea      	b.n	8006bda <UART_SetConfig+0x45e>
 8006a04:	2304      	movs	r3, #4
 8006a06:	77fb      	strb	r3, [r7, #31]
 8006a08:	e0e7      	b.n	8006bda <UART_SetConfig+0x45e>
 8006a0a:	2308      	movs	r3, #8
 8006a0c:	77fb      	strb	r3, [r7, #31]
 8006a0e:	e0e4      	b.n	8006bda <UART_SetConfig+0x45e>
 8006a10:	2310      	movs	r3, #16
 8006a12:	77fb      	strb	r3, [r7, #31]
 8006a14:	bf00      	nop
 8006a16:	e0e0      	b.n	8006bda <UART_SetConfig+0x45e>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a0e      	ldr	r2, [pc, #56]	; (8006a58 <UART_SetConfig+0x2dc>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d131      	bne.n	8006a86 <UART_SetConfig+0x30a>
 8006a22:	4b0a      	ldr	r3, [pc, #40]	; (8006a4c <UART_SetConfig+0x2d0>)
 8006a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a28:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a2c:	2b40      	cmp	r3, #64	; 0x40
 8006a2e:	d020      	beq.n	8006a72 <UART_SetConfig+0x2f6>
 8006a30:	2b40      	cmp	r3, #64	; 0x40
 8006a32:	d813      	bhi.n	8006a5c <UART_SetConfig+0x2e0>
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d016      	beq.n	8006a66 <UART_SetConfig+0x2ea>
 8006a38:	e021      	b.n	8006a7e <UART_SetConfig+0x302>
 8006a3a:	bf00      	nop
 8006a3c:	019bfcc0 	.word	0x019bfcc0
 8006a40:	08007e98 	.word	0x08007e98
 8006a44:	efff69f3 	.word	0xefff69f3
 8006a48:	40011000 	.word	0x40011000
 8006a4c:	40023800 	.word	0x40023800
 8006a50:	40004400 	.word	0x40004400
 8006a54:	40004800 	.word	0x40004800
 8006a58:	40004c00 	.word	0x40004c00
 8006a5c:	2b80      	cmp	r3, #128	; 0x80
 8006a5e:	d005      	beq.n	8006a6c <UART_SetConfig+0x2f0>
 8006a60:	2bc0      	cmp	r3, #192	; 0xc0
 8006a62:	d009      	beq.n	8006a78 <UART_SetConfig+0x2fc>
 8006a64:	e00b      	b.n	8006a7e <UART_SetConfig+0x302>
 8006a66:	2300      	movs	r3, #0
 8006a68:	77fb      	strb	r3, [r7, #31]
 8006a6a:	e0b6      	b.n	8006bda <UART_SetConfig+0x45e>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	77fb      	strb	r3, [r7, #31]
 8006a70:	e0b3      	b.n	8006bda <UART_SetConfig+0x45e>
 8006a72:	2304      	movs	r3, #4
 8006a74:	77fb      	strb	r3, [r7, #31]
 8006a76:	e0b0      	b.n	8006bda <UART_SetConfig+0x45e>
 8006a78:	2308      	movs	r3, #8
 8006a7a:	77fb      	strb	r3, [r7, #31]
 8006a7c:	e0ad      	b.n	8006bda <UART_SetConfig+0x45e>
 8006a7e:	2310      	movs	r3, #16
 8006a80:	77fb      	strb	r3, [r7, #31]
 8006a82:	bf00      	nop
 8006a84:	e0a9      	b.n	8006bda <UART_SetConfig+0x45e>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4aaa      	ldr	r2, [pc, #680]	; (8006d34 <UART_SetConfig+0x5b8>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d124      	bne.n	8006ada <UART_SetConfig+0x35e>
 8006a90:	4ba9      	ldr	r3, [pc, #676]	; (8006d38 <UART_SetConfig+0x5bc>)
 8006a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a9e:	d012      	beq.n	8006ac6 <UART_SetConfig+0x34a>
 8006aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aa4:	d802      	bhi.n	8006aac <UART_SetConfig+0x330>
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d007      	beq.n	8006aba <UART_SetConfig+0x33e>
 8006aaa:	e012      	b.n	8006ad2 <UART_SetConfig+0x356>
 8006aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ab0:	d006      	beq.n	8006ac0 <UART_SetConfig+0x344>
 8006ab2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ab6:	d009      	beq.n	8006acc <UART_SetConfig+0x350>
 8006ab8:	e00b      	b.n	8006ad2 <UART_SetConfig+0x356>
 8006aba:	2300      	movs	r3, #0
 8006abc:	77fb      	strb	r3, [r7, #31]
 8006abe:	e08c      	b.n	8006bda <UART_SetConfig+0x45e>
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	77fb      	strb	r3, [r7, #31]
 8006ac4:	e089      	b.n	8006bda <UART_SetConfig+0x45e>
 8006ac6:	2304      	movs	r3, #4
 8006ac8:	77fb      	strb	r3, [r7, #31]
 8006aca:	e086      	b.n	8006bda <UART_SetConfig+0x45e>
 8006acc:	2308      	movs	r3, #8
 8006ace:	77fb      	strb	r3, [r7, #31]
 8006ad0:	e083      	b.n	8006bda <UART_SetConfig+0x45e>
 8006ad2:	2310      	movs	r3, #16
 8006ad4:	77fb      	strb	r3, [r7, #31]
 8006ad6:	bf00      	nop
 8006ad8:	e07f      	b.n	8006bda <UART_SetConfig+0x45e>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a97      	ldr	r2, [pc, #604]	; (8006d3c <UART_SetConfig+0x5c0>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d124      	bne.n	8006b2e <UART_SetConfig+0x3b2>
 8006ae4:	4b94      	ldr	r3, [pc, #592]	; (8006d38 <UART_SetConfig+0x5bc>)
 8006ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006af2:	d012      	beq.n	8006b1a <UART_SetConfig+0x39e>
 8006af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006af8:	d802      	bhi.n	8006b00 <UART_SetConfig+0x384>
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d007      	beq.n	8006b0e <UART_SetConfig+0x392>
 8006afe:	e012      	b.n	8006b26 <UART_SetConfig+0x3aa>
 8006b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b04:	d006      	beq.n	8006b14 <UART_SetConfig+0x398>
 8006b06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b0a:	d009      	beq.n	8006b20 <UART_SetConfig+0x3a4>
 8006b0c:	e00b      	b.n	8006b26 <UART_SetConfig+0x3aa>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	77fb      	strb	r3, [r7, #31]
 8006b12:	e062      	b.n	8006bda <UART_SetConfig+0x45e>
 8006b14:	2302      	movs	r3, #2
 8006b16:	77fb      	strb	r3, [r7, #31]
 8006b18:	e05f      	b.n	8006bda <UART_SetConfig+0x45e>
 8006b1a:	2304      	movs	r3, #4
 8006b1c:	77fb      	strb	r3, [r7, #31]
 8006b1e:	e05c      	b.n	8006bda <UART_SetConfig+0x45e>
 8006b20:	2308      	movs	r3, #8
 8006b22:	77fb      	strb	r3, [r7, #31]
 8006b24:	e059      	b.n	8006bda <UART_SetConfig+0x45e>
 8006b26:	2310      	movs	r3, #16
 8006b28:	77fb      	strb	r3, [r7, #31]
 8006b2a:	bf00      	nop
 8006b2c:	e055      	b.n	8006bda <UART_SetConfig+0x45e>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a83      	ldr	r2, [pc, #524]	; (8006d40 <UART_SetConfig+0x5c4>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d124      	bne.n	8006b82 <UART_SetConfig+0x406>
 8006b38:	4b7f      	ldr	r3, [pc, #508]	; (8006d38 <UART_SetConfig+0x5bc>)
 8006b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b3e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b46:	d012      	beq.n	8006b6e <UART_SetConfig+0x3f2>
 8006b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b4c:	d802      	bhi.n	8006b54 <UART_SetConfig+0x3d8>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d007      	beq.n	8006b62 <UART_SetConfig+0x3e6>
 8006b52:	e012      	b.n	8006b7a <UART_SetConfig+0x3fe>
 8006b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b58:	d006      	beq.n	8006b68 <UART_SetConfig+0x3ec>
 8006b5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b5e:	d009      	beq.n	8006b74 <UART_SetConfig+0x3f8>
 8006b60:	e00b      	b.n	8006b7a <UART_SetConfig+0x3fe>
 8006b62:	2300      	movs	r3, #0
 8006b64:	77fb      	strb	r3, [r7, #31]
 8006b66:	e038      	b.n	8006bda <UART_SetConfig+0x45e>
 8006b68:	2302      	movs	r3, #2
 8006b6a:	77fb      	strb	r3, [r7, #31]
 8006b6c:	e035      	b.n	8006bda <UART_SetConfig+0x45e>
 8006b6e:	2304      	movs	r3, #4
 8006b70:	77fb      	strb	r3, [r7, #31]
 8006b72:	e032      	b.n	8006bda <UART_SetConfig+0x45e>
 8006b74:	2308      	movs	r3, #8
 8006b76:	77fb      	strb	r3, [r7, #31]
 8006b78:	e02f      	b.n	8006bda <UART_SetConfig+0x45e>
 8006b7a:	2310      	movs	r3, #16
 8006b7c:	77fb      	strb	r3, [r7, #31]
 8006b7e:	bf00      	nop
 8006b80:	e02b      	b.n	8006bda <UART_SetConfig+0x45e>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a6f      	ldr	r2, [pc, #444]	; (8006d44 <UART_SetConfig+0x5c8>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d124      	bne.n	8006bd6 <UART_SetConfig+0x45a>
 8006b8c:	4b6a      	ldr	r3, [pc, #424]	; (8006d38 <UART_SetConfig+0x5bc>)
 8006b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006b96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b9a:	d012      	beq.n	8006bc2 <UART_SetConfig+0x446>
 8006b9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ba0:	d802      	bhi.n	8006ba8 <UART_SetConfig+0x42c>
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d007      	beq.n	8006bb6 <UART_SetConfig+0x43a>
 8006ba6:	e012      	b.n	8006bce <UART_SetConfig+0x452>
 8006ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bac:	d006      	beq.n	8006bbc <UART_SetConfig+0x440>
 8006bae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006bb2:	d009      	beq.n	8006bc8 <UART_SetConfig+0x44c>
 8006bb4:	e00b      	b.n	8006bce <UART_SetConfig+0x452>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	77fb      	strb	r3, [r7, #31]
 8006bba:	e00e      	b.n	8006bda <UART_SetConfig+0x45e>
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	77fb      	strb	r3, [r7, #31]
 8006bc0:	e00b      	b.n	8006bda <UART_SetConfig+0x45e>
 8006bc2:	2304      	movs	r3, #4
 8006bc4:	77fb      	strb	r3, [r7, #31]
 8006bc6:	e008      	b.n	8006bda <UART_SetConfig+0x45e>
 8006bc8:	2308      	movs	r3, #8
 8006bca:	77fb      	strb	r3, [r7, #31]
 8006bcc:	e005      	b.n	8006bda <UART_SetConfig+0x45e>
 8006bce:	2310      	movs	r3, #16
 8006bd0:	77fb      	strb	r3, [r7, #31]
 8006bd2:	bf00      	nop
 8006bd4:	e001      	b.n	8006bda <UART_SetConfig+0x45e>
 8006bd6:	2310      	movs	r3, #16
 8006bd8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006be2:	d17f      	bne.n	8006ce4 <UART_SetConfig+0x568>
  {
    switch (clocksource)
 8006be4:	7ffb      	ldrb	r3, [r7, #31]
 8006be6:	2b08      	cmp	r3, #8
 8006be8:	d85c      	bhi.n	8006ca4 <UART_SetConfig+0x528>
 8006bea:	a201      	add	r2, pc, #4	; (adr r2, 8006bf0 <UART_SetConfig+0x474>)
 8006bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf0:	08006c15 	.word	0x08006c15
 8006bf4:	08006c35 	.word	0x08006c35
 8006bf8:	08006c55 	.word	0x08006c55
 8006bfc:	08006ca5 	.word	0x08006ca5
 8006c00:	08006c6d 	.word	0x08006c6d
 8006c04:	08006ca5 	.word	0x08006ca5
 8006c08:	08006ca5 	.word	0x08006ca5
 8006c0c:	08006ca5 	.word	0x08006ca5
 8006c10:	08006c8d 	.word	0x08006c8d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c14:	f7fc ffa0 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 8006c18:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	005a      	lsls	r2, r3, #1
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	085b      	lsrs	r3, r3, #1
 8006c24:	441a      	add	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	61bb      	str	r3, [r7, #24]
        break;
 8006c32:	e03a      	b.n	8006caa <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c34:	f7fc ffa4 	bl	8003b80 <HAL_RCC_GetPCLK2Freq>
 8006c38:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	005a      	lsls	r2, r3, #1
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	085b      	lsrs	r3, r3, #1
 8006c44:	441a      	add	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	61bb      	str	r3, [r7, #24]
        break;
 8006c52:	e02a      	b.n	8006caa <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	085a      	lsrs	r2, r3, #1
 8006c5a:	4b3b      	ldr	r3, [pc, #236]	; (8006d48 <UART_SetConfig+0x5cc>)
 8006c5c:	4413      	add	r3, r2
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	6852      	ldr	r2, [r2, #4]
 8006c62:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	61bb      	str	r3, [r7, #24]
        break;
 8006c6a:	e01e      	b.n	8006caa <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c6c:	f7fc feb6 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 8006c70:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	005a      	lsls	r2, r3, #1
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	085b      	lsrs	r3, r3, #1
 8006c7c:	441a      	add	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	61bb      	str	r3, [r7, #24]
        break;
 8006c8a:	e00e      	b.n	8006caa <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	085b      	lsrs	r3, r3, #1
 8006c92:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	61bb      	str	r3, [r7, #24]
        break;
 8006ca2:	e002      	b.n	8006caa <UART_SetConfig+0x52e>
      default:
        ret = HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	75fb      	strb	r3, [r7, #23]
        break;
 8006ca8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	2b0f      	cmp	r3, #15
 8006cae:	d916      	bls.n	8006cde <UART_SetConfig+0x562>
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cb6:	d212      	bcs.n	8006cde <UART_SetConfig+0x562>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	f023 030f 	bic.w	r3, r3, #15
 8006cc0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	085b      	lsrs	r3, r3, #1
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	f003 0307 	and.w	r3, r3, #7
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	897b      	ldrh	r3, [r7, #10]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	897a      	ldrh	r2, [r7, #10]
 8006cda:	60da      	str	r2, [r3, #12]
 8006cdc:	e07d      	b.n	8006dda <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	75fb      	strb	r3, [r7, #23]
 8006ce2:	e07a      	b.n	8006dda <UART_SetConfig+0x65e>
    }
  }
  else
  {
    switch (clocksource)
 8006ce4:	7ffb      	ldrb	r3, [r7, #31]
 8006ce6:	2b08      	cmp	r3, #8
 8006ce8:	d866      	bhi.n	8006db8 <UART_SetConfig+0x63c>
 8006cea:	a201      	add	r2, pc, #4	; (adr r2, 8006cf0 <UART_SetConfig+0x574>)
 8006cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf0:	08006d15 	.word	0x08006d15
 8006cf4:	08006d4d 	.word	0x08006d4d
 8006cf8:	08006d6b 	.word	0x08006d6b
 8006cfc:	08006db9 	.word	0x08006db9
 8006d00:	08006d83 	.word	0x08006d83
 8006d04:	08006db9 	.word	0x08006db9
 8006d08:	08006db9 	.word	0x08006db9
 8006d0c:	08006db9 	.word	0x08006db9
 8006d10:	08006da1 	.word	0x08006da1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d14:	f7fc ff20 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 8006d18:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	085a      	lsrs	r2, r3, #1
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	441a      	add	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	61bb      	str	r3, [r7, #24]
        break;
 8006d30:	e045      	b.n	8006dbe <UART_SetConfig+0x642>
 8006d32:	bf00      	nop
 8006d34:	40005000 	.word	0x40005000
 8006d38:	40023800 	.word	0x40023800
 8006d3c:	40011400 	.word	0x40011400
 8006d40:	40007800 	.word	0x40007800
 8006d44:	40007c00 	.word	0x40007c00
 8006d48:	01e84800 	.word	0x01e84800
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d4c:	f7fc ff18 	bl	8003b80 <HAL_RCC_GetPCLK2Freq>
 8006d50:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	085a      	lsrs	r2, r3, #1
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	441a      	add	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	61bb      	str	r3, [r7, #24]
        break;
 8006d68:	e029      	b.n	8006dbe <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	085a      	lsrs	r2, r3, #1
 8006d70:	4b1f      	ldr	r3, [pc, #124]	; (8006df0 <UART_SetConfig+0x674>)
 8006d72:	4413      	add	r3, r2
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	6852      	ldr	r2, [r2, #4]
 8006d78:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	61bb      	str	r3, [r7, #24]
        break;
 8006d80:	e01d      	b.n	8006dbe <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d82:	f7fc fe2b 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 8006d86:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	085a      	lsrs	r2, r3, #1
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	441a      	add	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	61bb      	str	r3, [r7, #24]
        break;
 8006d9e:	e00e      	b.n	8006dbe <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	085b      	lsrs	r3, r3, #1
 8006da6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	61bb      	str	r3, [r7, #24]
        break;
 8006db6:	e002      	b.n	8006dbe <UART_SetConfig+0x642>
      default:
        ret = HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	75fb      	strb	r3, [r7, #23]
        break;
 8006dbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	2b0f      	cmp	r3, #15
 8006dc2:	d908      	bls.n	8006dd6 <UART_SetConfig+0x65a>
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dca:	d204      	bcs.n	8006dd6 <UART_SetConfig+0x65a>
    {
      huart->Instance->BRR = usartdiv;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	69ba      	ldr	r2, [r7, #24]
 8006dd2:	60da      	str	r2, [r3, #12]
 8006dd4:	e001      	b.n	8006dda <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3720      	adds	r7, #32
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	00f42400 	.word	0x00f42400

08006df4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	2bff      	cmp	r3, #255	; 0xff
 8006e02:	d904      	bls.n	8006e0e <UART_AdvFeatureConfig+0x1a>
 8006e04:	f640 3143 	movw	r1, #2883	; 0xb43
 8006e08:	489f      	ldr	r0, [pc, #636]	; (8007088 <UART_AdvFeatureConfig+0x294>)
 8006e0a:	f7fa fbc8 	bl	800159e <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d018      	beq.n	8006e4c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d009      	beq.n	8006e36 <UART_AdvFeatureConfig+0x42>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e2a:	d004      	beq.n	8006e36 <UART_AdvFeatureConfig+0x42>
 8006e2c:	f640 3148 	movw	r1, #2888	; 0xb48
 8006e30:	4895      	ldr	r0, [pc, #596]	; (8007088 <UART_AdvFeatureConfig+0x294>)
 8006e32:	f7fa fbb4 	bl	800159e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d018      	beq.n	8006e8a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d009      	beq.n	8006e74 <UART_AdvFeatureConfig+0x80>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e68:	d004      	beq.n	8006e74 <UART_AdvFeatureConfig+0x80>
 8006e6a:	f640 314f 	movw	r1, #2895	; 0xb4f
 8006e6e:	4886      	ldr	r0, [pc, #536]	; (8007088 <UART_AdvFeatureConfig+0x294>)
 8006e70:	f7fa fb95 	bl	800159e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8e:	f003 0304 	and.w	r3, r3, #4
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d018      	beq.n	8006ec8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d009      	beq.n	8006eb2 <UART_AdvFeatureConfig+0xbe>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ea6:	d004      	beq.n	8006eb2 <UART_AdvFeatureConfig+0xbe>
 8006ea8:	f640 3156 	movw	r1, #2902	; 0xb56
 8006eac:	4876      	ldr	r0, [pc, #472]	; (8007088 <UART_AdvFeatureConfig+0x294>)
 8006eae:	f7fa fb76 	bl	800159e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	430a      	orrs	r2, r1
 8006ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	f003 0308 	and.w	r3, r3, #8
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d018      	beq.n	8006f06 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d009      	beq.n	8006ef0 <UART_AdvFeatureConfig+0xfc>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ee4:	d004      	beq.n	8006ef0 <UART_AdvFeatureConfig+0xfc>
 8006ee6:	f640 315d 	movw	r1, #2909	; 0xb5d
 8006eea:	4867      	ldr	r0, [pc, #412]	; (8007088 <UART_AdvFeatureConfig+0x294>)
 8006eec:	f7fa fb57 	bl	800159e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	430a      	orrs	r2, r1
 8006f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0a:	f003 0310 	and.w	r3, r3, #16
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d018      	beq.n	8006f44 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d009      	beq.n	8006f2e <UART_AdvFeatureConfig+0x13a>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f22:	d004      	beq.n	8006f2e <UART_AdvFeatureConfig+0x13a>
 8006f24:	f640 3164 	movw	r1, #2916	; 0xb64
 8006f28:	4857      	ldr	r0, [pc, #348]	; (8007088 <UART_AdvFeatureConfig+0x294>)
 8006f2a:	f7fa fb38 	bl	800159e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f48:	f003 0320 	and.w	r3, r3, #32
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d018      	beq.n	8006f82 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d009      	beq.n	8006f6c <UART_AdvFeatureConfig+0x178>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f60:	d004      	beq.n	8006f6c <UART_AdvFeatureConfig+0x178>
 8006f62:	f640 316b 	movw	r1, #2923	; 0xb6b
 8006f66:	4848      	ldr	r0, [pc, #288]	; (8007088 <UART_AdvFeatureConfig+0x294>)
 8006f68:	f7fa fb19 	bl	800159e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d059      	beq.n	8007042 <UART_AdvFeatureConfig+0x24e>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a3e      	ldr	r2, [pc, #248]	; (800708c <UART_AdvFeatureConfig+0x298>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d013      	beq.n	8006fc0 <UART_AdvFeatureConfig+0x1cc>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a3c      	ldr	r2, [pc, #240]	; (8007090 <UART_AdvFeatureConfig+0x29c>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d00e      	beq.n	8006fc0 <UART_AdvFeatureConfig+0x1cc>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a3b      	ldr	r2, [pc, #236]	; (8007094 <UART_AdvFeatureConfig+0x2a0>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d009      	beq.n	8006fc0 <UART_AdvFeatureConfig+0x1cc>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a39      	ldr	r2, [pc, #228]	; (8007098 <UART_AdvFeatureConfig+0x2a4>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d004      	beq.n	8006fc0 <UART_AdvFeatureConfig+0x1cc>
 8006fb6:	f640 3172 	movw	r1, #2930	; 0xb72
 8006fba:	4833      	ldr	r0, [pc, #204]	; (8007088 <UART_AdvFeatureConfig+0x294>)
 8006fbc:	f7fa faef 	bl	800159e <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d009      	beq.n	8006fdc <UART_AdvFeatureConfig+0x1e8>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fd0:	d004      	beq.n	8006fdc <UART_AdvFeatureConfig+0x1e8>
 8006fd2:	f640 3173 	movw	r1, #2931	; 0xb73
 8006fd6:	482c      	ldr	r0, [pc, #176]	; (8007088 <UART_AdvFeatureConfig+0x294>)
 8006fd8:	f7fa fae1 	bl	800159e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ffa:	d122      	bne.n	8007042 <UART_AdvFeatureConfig+0x24e>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007000:	2b00      	cmp	r3, #0
 8007002:	d013      	beq.n	800702c <UART_AdvFeatureConfig+0x238>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007008:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800700c:	d00e      	beq.n	800702c <UART_AdvFeatureConfig+0x238>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007016:	d009      	beq.n	800702c <UART_AdvFeatureConfig+0x238>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800701c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007020:	d004      	beq.n	800702c <UART_AdvFeatureConfig+0x238>
 8007022:	f640 3178 	movw	r1, #2936	; 0xb78
 8007026:	4818      	ldr	r0, [pc, #96]	; (8007088 <UART_AdvFeatureConfig+0x294>)
 8007028:	f7fa fab9 	bl	800159e <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800704a:	2b00      	cmp	r3, #0
 800704c:	d018      	beq.n	8007080 <UART_AdvFeatureConfig+0x28c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007052:	2b00      	cmp	r3, #0
 8007054:	d009      	beq.n	800706a <UART_AdvFeatureConfig+0x276>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800705a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800705e:	d004      	beq.n	800706a <UART_AdvFeatureConfig+0x276>
 8007060:	f44f 6138 	mov.w	r1, #2944	; 0xb80
 8007064:	4808      	ldr	r0, [pc, #32]	; (8007088 <UART_AdvFeatureConfig+0x294>)
 8007066:	f7fa fa9a 	bl	800159e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	430a      	orrs	r2, r1
 800707e:	605a      	str	r2, [r3, #4]
  }
}
 8007080:	bf00      	nop
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	08007e98 	.word	0x08007e98
 800708c:	40011000 	.word	0x40011000
 8007090:	40004400 	.word	0x40004400
 8007094:	40004800 	.word	0x40004800
 8007098:	40011400 	.word	0x40011400

0800709c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80070aa:	f7fb f851 	bl	8002150 <HAL_GetTick>
 80070ae:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0308 	and.w	r3, r3, #8
 80070ba:	2b08      	cmp	r3, #8
 80070bc:	d10e      	bne.n	80070dc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f82a 	bl	8007126 <UART_WaitOnFlagUntilTimeout>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d001      	beq.n	80070dc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e020      	b.n	800711e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0304 	and.w	r3, r3, #4
 80070e6:	2b04      	cmp	r3, #4
 80070e8:	d10e      	bne.n	8007108 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f814 	bl	8007126 <UART_WaitOnFlagUntilTimeout>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d001      	beq.n	8007108 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e00a      	b.n	800711e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2220      	movs	r2, #32
 800710c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2220      	movs	r2, #32
 8007112:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b084      	sub	sp, #16
 800712a:	af00      	add	r7, sp, #0
 800712c:	60f8      	str	r0, [r7, #12]
 800712e:	60b9      	str	r1, [r7, #8]
 8007130:	603b      	str	r3, [r7, #0]
 8007132:	4613      	mov	r3, r2
 8007134:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007136:	e05d      	b.n	80071f4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800713e:	d059      	beq.n	80071f4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007140:	f7fb f806 	bl	8002150 <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	69ba      	ldr	r2, [r7, #24]
 800714c:	429a      	cmp	r2, r3
 800714e:	d302      	bcc.n	8007156 <UART_WaitOnFlagUntilTimeout+0x30>
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d11b      	bne.n	800718e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007164:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	689a      	ldr	r2, [r3, #8]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f022 0201 	bic.w	r2, r2, #1
 8007174:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2220      	movs	r2, #32
 800717a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2220      	movs	r2, #32
 8007180:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e042      	b.n	8007214 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0304 	and.w	r3, r3, #4
 8007198:	2b00      	cmp	r3, #0
 800719a:	d02b      	beq.n	80071f4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071aa:	d123      	bne.n	80071f4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071b4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80071c4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	689a      	ldr	r2, [r3, #8]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 0201 	bic.w	r2, r2, #1
 80071d4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2220      	movs	r2, #32
 80071da:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2220      	movs	r2, #32
 80071e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2220      	movs	r2, #32
 80071e6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e00f      	b.n	8007214 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	69da      	ldr	r2, [r3, #28]
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	4013      	ands	r3, r2
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	429a      	cmp	r2, r3
 8007202:	bf0c      	ite	eq
 8007204:	2301      	moveq	r3, #1
 8007206:	2300      	movne	r3, #0
 8007208:	b2db      	uxtb	r3, r3
 800720a:	461a      	mov	r2, r3
 800720c:	79fb      	ldrb	r3, [r7, #7]
 800720e:	429a      	cmp	r2, r3
 8007210:	d092      	beq.n	8007138 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007232:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689a      	ldr	r2, [r3, #8]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 0201 	bic.w	r2, r2, #1
 8007242:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2220      	movs	r2, #32
 8007248:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007268:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f7ff fa6a 	bl	8006754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007280:	bf00      	nop
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800729e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2220      	movs	r2, #32
 80072a4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7ff fa47 	bl	8006740 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072b2:	bf00      	nop
 80072b4:	3708      	adds	r7, #8
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
	...

080072bc <__errno>:
 80072bc:	4b01      	ldr	r3, [pc, #4]	; (80072c4 <__errno+0x8>)
 80072be:	6818      	ldr	r0, [r3, #0]
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	2000000c 	.word	0x2000000c

080072c8 <__libc_init_array>:
 80072c8:	b570      	push	{r4, r5, r6, lr}
 80072ca:	4e0d      	ldr	r6, [pc, #52]	; (8007300 <__libc_init_array+0x38>)
 80072cc:	4c0d      	ldr	r4, [pc, #52]	; (8007304 <__libc_init_array+0x3c>)
 80072ce:	1ba4      	subs	r4, r4, r6
 80072d0:	10a4      	asrs	r4, r4, #2
 80072d2:	2500      	movs	r5, #0
 80072d4:	42a5      	cmp	r5, r4
 80072d6:	d109      	bne.n	80072ec <__libc_init_array+0x24>
 80072d8:	4e0b      	ldr	r6, [pc, #44]	; (8007308 <__libc_init_array+0x40>)
 80072da:	4c0c      	ldr	r4, [pc, #48]	; (800730c <__libc_init_array+0x44>)
 80072dc:	f000 fc28 	bl	8007b30 <_init>
 80072e0:	1ba4      	subs	r4, r4, r6
 80072e2:	10a4      	asrs	r4, r4, #2
 80072e4:	2500      	movs	r5, #0
 80072e6:	42a5      	cmp	r5, r4
 80072e8:	d105      	bne.n	80072f6 <__libc_init_array+0x2e>
 80072ea:	bd70      	pop	{r4, r5, r6, pc}
 80072ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072f0:	4798      	blx	r3
 80072f2:	3501      	adds	r5, #1
 80072f4:	e7ee      	b.n	80072d4 <__libc_init_array+0xc>
 80072f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072fa:	4798      	blx	r3
 80072fc:	3501      	adds	r5, #1
 80072fe:	e7f2      	b.n	80072e6 <__libc_init_array+0x1e>
 8007300:	08007f28 	.word	0x08007f28
 8007304:	08007f28 	.word	0x08007f28
 8007308:	08007f28 	.word	0x08007f28
 800730c:	08007f2c 	.word	0x08007f2c

08007310 <memcpy>:
 8007310:	b510      	push	{r4, lr}
 8007312:	1e43      	subs	r3, r0, #1
 8007314:	440a      	add	r2, r1
 8007316:	4291      	cmp	r1, r2
 8007318:	d100      	bne.n	800731c <memcpy+0xc>
 800731a:	bd10      	pop	{r4, pc}
 800731c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007320:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007324:	e7f7      	b.n	8007316 <memcpy+0x6>

08007326 <memset>:
 8007326:	4402      	add	r2, r0
 8007328:	4603      	mov	r3, r0
 800732a:	4293      	cmp	r3, r2
 800732c:	d100      	bne.n	8007330 <memset+0xa>
 800732e:	4770      	bx	lr
 8007330:	f803 1b01 	strb.w	r1, [r3], #1
 8007334:	e7f9      	b.n	800732a <memset+0x4>
	...

08007338 <siprintf>:
 8007338:	b40e      	push	{r1, r2, r3}
 800733a:	b500      	push	{lr}
 800733c:	b09c      	sub	sp, #112	; 0x70
 800733e:	ab1d      	add	r3, sp, #116	; 0x74
 8007340:	9002      	str	r0, [sp, #8]
 8007342:	9006      	str	r0, [sp, #24]
 8007344:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007348:	4809      	ldr	r0, [pc, #36]	; (8007370 <siprintf+0x38>)
 800734a:	9107      	str	r1, [sp, #28]
 800734c:	9104      	str	r1, [sp, #16]
 800734e:	4909      	ldr	r1, [pc, #36]	; (8007374 <siprintf+0x3c>)
 8007350:	f853 2b04 	ldr.w	r2, [r3], #4
 8007354:	9105      	str	r1, [sp, #20]
 8007356:	6800      	ldr	r0, [r0, #0]
 8007358:	9301      	str	r3, [sp, #4]
 800735a:	a902      	add	r1, sp, #8
 800735c:	f000 f866 	bl	800742c <_svfiprintf_r>
 8007360:	9b02      	ldr	r3, [sp, #8]
 8007362:	2200      	movs	r2, #0
 8007364:	701a      	strb	r2, [r3, #0]
 8007366:	b01c      	add	sp, #112	; 0x70
 8007368:	f85d eb04 	ldr.w	lr, [sp], #4
 800736c:	b003      	add	sp, #12
 800736e:	4770      	bx	lr
 8007370:	2000000c 	.word	0x2000000c
 8007374:	ffff0208 	.word	0xffff0208

08007378 <__ssputs_r>:
 8007378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800737c:	688e      	ldr	r6, [r1, #8]
 800737e:	429e      	cmp	r6, r3
 8007380:	4682      	mov	sl, r0
 8007382:	460c      	mov	r4, r1
 8007384:	4690      	mov	r8, r2
 8007386:	4699      	mov	r9, r3
 8007388:	d837      	bhi.n	80073fa <__ssputs_r+0x82>
 800738a:	898a      	ldrh	r2, [r1, #12]
 800738c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007390:	d031      	beq.n	80073f6 <__ssputs_r+0x7e>
 8007392:	6825      	ldr	r5, [r4, #0]
 8007394:	6909      	ldr	r1, [r1, #16]
 8007396:	1a6f      	subs	r7, r5, r1
 8007398:	6965      	ldr	r5, [r4, #20]
 800739a:	2302      	movs	r3, #2
 800739c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80073a4:	f109 0301 	add.w	r3, r9, #1
 80073a8:	443b      	add	r3, r7
 80073aa:	429d      	cmp	r5, r3
 80073ac:	bf38      	it	cc
 80073ae:	461d      	movcc	r5, r3
 80073b0:	0553      	lsls	r3, r2, #21
 80073b2:	d530      	bpl.n	8007416 <__ssputs_r+0x9e>
 80073b4:	4629      	mov	r1, r5
 80073b6:	f000 fb21 	bl	80079fc <_malloc_r>
 80073ba:	4606      	mov	r6, r0
 80073bc:	b950      	cbnz	r0, 80073d4 <__ssputs_r+0x5c>
 80073be:	230c      	movs	r3, #12
 80073c0:	f8ca 3000 	str.w	r3, [sl]
 80073c4:	89a3      	ldrh	r3, [r4, #12]
 80073c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073ca:	81a3      	strh	r3, [r4, #12]
 80073cc:	f04f 30ff 	mov.w	r0, #4294967295
 80073d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d4:	463a      	mov	r2, r7
 80073d6:	6921      	ldr	r1, [r4, #16]
 80073d8:	f7ff ff9a 	bl	8007310 <memcpy>
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80073e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073e6:	81a3      	strh	r3, [r4, #12]
 80073e8:	6126      	str	r6, [r4, #16]
 80073ea:	6165      	str	r5, [r4, #20]
 80073ec:	443e      	add	r6, r7
 80073ee:	1bed      	subs	r5, r5, r7
 80073f0:	6026      	str	r6, [r4, #0]
 80073f2:	60a5      	str	r5, [r4, #8]
 80073f4:	464e      	mov	r6, r9
 80073f6:	454e      	cmp	r6, r9
 80073f8:	d900      	bls.n	80073fc <__ssputs_r+0x84>
 80073fa:	464e      	mov	r6, r9
 80073fc:	4632      	mov	r2, r6
 80073fe:	4641      	mov	r1, r8
 8007400:	6820      	ldr	r0, [r4, #0]
 8007402:	f000 fa93 	bl	800792c <memmove>
 8007406:	68a3      	ldr	r3, [r4, #8]
 8007408:	1b9b      	subs	r3, r3, r6
 800740a:	60a3      	str	r3, [r4, #8]
 800740c:	6823      	ldr	r3, [r4, #0]
 800740e:	441e      	add	r6, r3
 8007410:	6026      	str	r6, [r4, #0]
 8007412:	2000      	movs	r0, #0
 8007414:	e7dc      	b.n	80073d0 <__ssputs_r+0x58>
 8007416:	462a      	mov	r2, r5
 8007418:	f000 fb4a 	bl	8007ab0 <_realloc_r>
 800741c:	4606      	mov	r6, r0
 800741e:	2800      	cmp	r0, #0
 8007420:	d1e2      	bne.n	80073e8 <__ssputs_r+0x70>
 8007422:	6921      	ldr	r1, [r4, #16]
 8007424:	4650      	mov	r0, sl
 8007426:	f000 fa9b 	bl	8007960 <_free_r>
 800742a:	e7c8      	b.n	80073be <__ssputs_r+0x46>

0800742c <_svfiprintf_r>:
 800742c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007430:	461d      	mov	r5, r3
 8007432:	898b      	ldrh	r3, [r1, #12]
 8007434:	061f      	lsls	r7, r3, #24
 8007436:	b09d      	sub	sp, #116	; 0x74
 8007438:	4680      	mov	r8, r0
 800743a:	460c      	mov	r4, r1
 800743c:	4616      	mov	r6, r2
 800743e:	d50f      	bpl.n	8007460 <_svfiprintf_r+0x34>
 8007440:	690b      	ldr	r3, [r1, #16]
 8007442:	b96b      	cbnz	r3, 8007460 <_svfiprintf_r+0x34>
 8007444:	2140      	movs	r1, #64	; 0x40
 8007446:	f000 fad9 	bl	80079fc <_malloc_r>
 800744a:	6020      	str	r0, [r4, #0]
 800744c:	6120      	str	r0, [r4, #16]
 800744e:	b928      	cbnz	r0, 800745c <_svfiprintf_r+0x30>
 8007450:	230c      	movs	r3, #12
 8007452:	f8c8 3000 	str.w	r3, [r8]
 8007456:	f04f 30ff 	mov.w	r0, #4294967295
 800745a:	e0c8      	b.n	80075ee <_svfiprintf_r+0x1c2>
 800745c:	2340      	movs	r3, #64	; 0x40
 800745e:	6163      	str	r3, [r4, #20]
 8007460:	2300      	movs	r3, #0
 8007462:	9309      	str	r3, [sp, #36]	; 0x24
 8007464:	2320      	movs	r3, #32
 8007466:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800746a:	2330      	movs	r3, #48	; 0x30
 800746c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007470:	9503      	str	r5, [sp, #12]
 8007472:	f04f 0b01 	mov.w	fp, #1
 8007476:	4637      	mov	r7, r6
 8007478:	463d      	mov	r5, r7
 800747a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800747e:	b10b      	cbz	r3, 8007484 <_svfiprintf_r+0x58>
 8007480:	2b25      	cmp	r3, #37	; 0x25
 8007482:	d13e      	bne.n	8007502 <_svfiprintf_r+0xd6>
 8007484:	ebb7 0a06 	subs.w	sl, r7, r6
 8007488:	d00b      	beq.n	80074a2 <_svfiprintf_r+0x76>
 800748a:	4653      	mov	r3, sl
 800748c:	4632      	mov	r2, r6
 800748e:	4621      	mov	r1, r4
 8007490:	4640      	mov	r0, r8
 8007492:	f7ff ff71 	bl	8007378 <__ssputs_r>
 8007496:	3001      	adds	r0, #1
 8007498:	f000 80a4 	beq.w	80075e4 <_svfiprintf_r+0x1b8>
 800749c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800749e:	4453      	add	r3, sl
 80074a0:	9309      	str	r3, [sp, #36]	; 0x24
 80074a2:	783b      	ldrb	r3, [r7, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 809d 	beq.w	80075e4 <_svfiprintf_r+0x1b8>
 80074aa:	2300      	movs	r3, #0
 80074ac:	f04f 32ff 	mov.w	r2, #4294967295
 80074b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074b4:	9304      	str	r3, [sp, #16]
 80074b6:	9307      	str	r3, [sp, #28]
 80074b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074bc:	931a      	str	r3, [sp, #104]	; 0x68
 80074be:	462f      	mov	r7, r5
 80074c0:	2205      	movs	r2, #5
 80074c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80074c6:	4850      	ldr	r0, [pc, #320]	; (8007608 <_svfiprintf_r+0x1dc>)
 80074c8:	f7f8 fec2 	bl	8000250 <memchr>
 80074cc:	9b04      	ldr	r3, [sp, #16]
 80074ce:	b9d0      	cbnz	r0, 8007506 <_svfiprintf_r+0xda>
 80074d0:	06d9      	lsls	r1, r3, #27
 80074d2:	bf44      	itt	mi
 80074d4:	2220      	movmi	r2, #32
 80074d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80074da:	071a      	lsls	r2, r3, #28
 80074dc:	bf44      	itt	mi
 80074de:	222b      	movmi	r2, #43	; 0x2b
 80074e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80074e4:	782a      	ldrb	r2, [r5, #0]
 80074e6:	2a2a      	cmp	r2, #42	; 0x2a
 80074e8:	d015      	beq.n	8007516 <_svfiprintf_r+0xea>
 80074ea:	9a07      	ldr	r2, [sp, #28]
 80074ec:	462f      	mov	r7, r5
 80074ee:	2000      	movs	r0, #0
 80074f0:	250a      	movs	r5, #10
 80074f2:	4639      	mov	r1, r7
 80074f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074f8:	3b30      	subs	r3, #48	; 0x30
 80074fa:	2b09      	cmp	r3, #9
 80074fc:	d94d      	bls.n	800759a <_svfiprintf_r+0x16e>
 80074fe:	b1b8      	cbz	r0, 8007530 <_svfiprintf_r+0x104>
 8007500:	e00f      	b.n	8007522 <_svfiprintf_r+0xf6>
 8007502:	462f      	mov	r7, r5
 8007504:	e7b8      	b.n	8007478 <_svfiprintf_r+0x4c>
 8007506:	4a40      	ldr	r2, [pc, #256]	; (8007608 <_svfiprintf_r+0x1dc>)
 8007508:	1a80      	subs	r0, r0, r2
 800750a:	fa0b f000 	lsl.w	r0, fp, r0
 800750e:	4318      	orrs	r0, r3
 8007510:	9004      	str	r0, [sp, #16]
 8007512:	463d      	mov	r5, r7
 8007514:	e7d3      	b.n	80074be <_svfiprintf_r+0x92>
 8007516:	9a03      	ldr	r2, [sp, #12]
 8007518:	1d11      	adds	r1, r2, #4
 800751a:	6812      	ldr	r2, [r2, #0]
 800751c:	9103      	str	r1, [sp, #12]
 800751e:	2a00      	cmp	r2, #0
 8007520:	db01      	blt.n	8007526 <_svfiprintf_r+0xfa>
 8007522:	9207      	str	r2, [sp, #28]
 8007524:	e004      	b.n	8007530 <_svfiprintf_r+0x104>
 8007526:	4252      	negs	r2, r2
 8007528:	f043 0302 	orr.w	r3, r3, #2
 800752c:	9207      	str	r2, [sp, #28]
 800752e:	9304      	str	r3, [sp, #16]
 8007530:	783b      	ldrb	r3, [r7, #0]
 8007532:	2b2e      	cmp	r3, #46	; 0x2e
 8007534:	d10c      	bne.n	8007550 <_svfiprintf_r+0x124>
 8007536:	787b      	ldrb	r3, [r7, #1]
 8007538:	2b2a      	cmp	r3, #42	; 0x2a
 800753a:	d133      	bne.n	80075a4 <_svfiprintf_r+0x178>
 800753c:	9b03      	ldr	r3, [sp, #12]
 800753e:	1d1a      	adds	r2, r3, #4
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	9203      	str	r2, [sp, #12]
 8007544:	2b00      	cmp	r3, #0
 8007546:	bfb8      	it	lt
 8007548:	f04f 33ff 	movlt.w	r3, #4294967295
 800754c:	3702      	adds	r7, #2
 800754e:	9305      	str	r3, [sp, #20]
 8007550:	4d2e      	ldr	r5, [pc, #184]	; (800760c <_svfiprintf_r+0x1e0>)
 8007552:	7839      	ldrb	r1, [r7, #0]
 8007554:	2203      	movs	r2, #3
 8007556:	4628      	mov	r0, r5
 8007558:	f7f8 fe7a 	bl	8000250 <memchr>
 800755c:	b138      	cbz	r0, 800756e <_svfiprintf_r+0x142>
 800755e:	2340      	movs	r3, #64	; 0x40
 8007560:	1b40      	subs	r0, r0, r5
 8007562:	fa03 f000 	lsl.w	r0, r3, r0
 8007566:	9b04      	ldr	r3, [sp, #16]
 8007568:	4303      	orrs	r3, r0
 800756a:	3701      	adds	r7, #1
 800756c:	9304      	str	r3, [sp, #16]
 800756e:	7839      	ldrb	r1, [r7, #0]
 8007570:	4827      	ldr	r0, [pc, #156]	; (8007610 <_svfiprintf_r+0x1e4>)
 8007572:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007576:	2206      	movs	r2, #6
 8007578:	1c7e      	adds	r6, r7, #1
 800757a:	f7f8 fe69 	bl	8000250 <memchr>
 800757e:	2800      	cmp	r0, #0
 8007580:	d038      	beq.n	80075f4 <_svfiprintf_r+0x1c8>
 8007582:	4b24      	ldr	r3, [pc, #144]	; (8007614 <_svfiprintf_r+0x1e8>)
 8007584:	bb13      	cbnz	r3, 80075cc <_svfiprintf_r+0x1a0>
 8007586:	9b03      	ldr	r3, [sp, #12]
 8007588:	3307      	adds	r3, #7
 800758a:	f023 0307 	bic.w	r3, r3, #7
 800758e:	3308      	adds	r3, #8
 8007590:	9303      	str	r3, [sp, #12]
 8007592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007594:	444b      	add	r3, r9
 8007596:	9309      	str	r3, [sp, #36]	; 0x24
 8007598:	e76d      	b.n	8007476 <_svfiprintf_r+0x4a>
 800759a:	fb05 3202 	mla	r2, r5, r2, r3
 800759e:	2001      	movs	r0, #1
 80075a0:	460f      	mov	r7, r1
 80075a2:	e7a6      	b.n	80074f2 <_svfiprintf_r+0xc6>
 80075a4:	2300      	movs	r3, #0
 80075a6:	3701      	adds	r7, #1
 80075a8:	9305      	str	r3, [sp, #20]
 80075aa:	4619      	mov	r1, r3
 80075ac:	250a      	movs	r5, #10
 80075ae:	4638      	mov	r0, r7
 80075b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075b4:	3a30      	subs	r2, #48	; 0x30
 80075b6:	2a09      	cmp	r2, #9
 80075b8:	d903      	bls.n	80075c2 <_svfiprintf_r+0x196>
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d0c8      	beq.n	8007550 <_svfiprintf_r+0x124>
 80075be:	9105      	str	r1, [sp, #20]
 80075c0:	e7c6      	b.n	8007550 <_svfiprintf_r+0x124>
 80075c2:	fb05 2101 	mla	r1, r5, r1, r2
 80075c6:	2301      	movs	r3, #1
 80075c8:	4607      	mov	r7, r0
 80075ca:	e7f0      	b.n	80075ae <_svfiprintf_r+0x182>
 80075cc:	ab03      	add	r3, sp, #12
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	4622      	mov	r2, r4
 80075d2:	4b11      	ldr	r3, [pc, #68]	; (8007618 <_svfiprintf_r+0x1ec>)
 80075d4:	a904      	add	r1, sp, #16
 80075d6:	4640      	mov	r0, r8
 80075d8:	f3af 8000 	nop.w
 80075dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80075e0:	4681      	mov	r9, r0
 80075e2:	d1d6      	bne.n	8007592 <_svfiprintf_r+0x166>
 80075e4:	89a3      	ldrh	r3, [r4, #12]
 80075e6:	065b      	lsls	r3, r3, #25
 80075e8:	f53f af35 	bmi.w	8007456 <_svfiprintf_r+0x2a>
 80075ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075ee:	b01d      	add	sp, #116	; 0x74
 80075f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f4:	ab03      	add	r3, sp, #12
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	4622      	mov	r2, r4
 80075fa:	4b07      	ldr	r3, [pc, #28]	; (8007618 <_svfiprintf_r+0x1ec>)
 80075fc:	a904      	add	r1, sp, #16
 80075fe:	4640      	mov	r0, r8
 8007600:	f000 f882 	bl	8007708 <_printf_i>
 8007604:	e7ea      	b.n	80075dc <_svfiprintf_r+0x1b0>
 8007606:	bf00      	nop
 8007608:	08007eec 	.word	0x08007eec
 800760c:	08007ef2 	.word	0x08007ef2
 8007610:	08007ef6 	.word	0x08007ef6
 8007614:	00000000 	.word	0x00000000
 8007618:	08007379 	.word	0x08007379

0800761c <_printf_common>:
 800761c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007620:	4691      	mov	r9, r2
 8007622:	461f      	mov	r7, r3
 8007624:	688a      	ldr	r2, [r1, #8]
 8007626:	690b      	ldr	r3, [r1, #16]
 8007628:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800762c:	4293      	cmp	r3, r2
 800762e:	bfb8      	it	lt
 8007630:	4613      	movlt	r3, r2
 8007632:	f8c9 3000 	str.w	r3, [r9]
 8007636:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800763a:	4606      	mov	r6, r0
 800763c:	460c      	mov	r4, r1
 800763e:	b112      	cbz	r2, 8007646 <_printf_common+0x2a>
 8007640:	3301      	adds	r3, #1
 8007642:	f8c9 3000 	str.w	r3, [r9]
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	0699      	lsls	r1, r3, #26
 800764a:	bf42      	ittt	mi
 800764c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007650:	3302      	addmi	r3, #2
 8007652:	f8c9 3000 	strmi.w	r3, [r9]
 8007656:	6825      	ldr	r5, [r4, #0]
 8007658:	f015 0506 	ands.w	r5, r5, #6
 800765c:	d107      	bne.n	800766e <_printf_common+0x52>
 800765e:	f104 0a19 	add.w	sl, r4, #25
 8007662:	68e3      	ldr	r3, [r4, #12]
 8007664:	f8d9 2000 	ldr.w	r2, [r9]
 8007668:	1a9b      	subs	r3, r3, r2
 800766a:	42ab      	cmp	r3, r5
 800766c:	dc28      	bgt.n	80076c0 <_printf_common+0xa4>
 800766e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007672:	6822      	ldr	r2, [r4, #0]
 8007674:	3300      	adds	r3, #0
 8007676:	bf18      	it	ne
 8007678:	2301      	movne	r3, #1
 800767a:	0692      	lsls	r2, r2, #26
 800767c:	d42d      	bmi.n	80076da <_printf_common+0xbe>
 800767e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007682:	4639      	mov	r1, r7
 8007684:	4630      	mov	r0, r6
 8007686:	47c0      	blx	r8
 8007688:	3001      	adds	r0, #1
 800768a:	d020      	beq.n	80076ce <_printf_common+0xb2>
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	68e5      	ldr	r5, [r4, #12]
 8007690:	f8d9 2000 	ldr.w	r2, [r9]
 8007694:	f003 0306 	and.w	r3, r3, #6
 8007698:	2b04      	cmp	r3, #4
 800769a:	bf08      	it	eq
 800769c:	1aad      	subeq	r5, r5, r2
 800769e:	68a3      	ldr	r3, [r4, #8]
 80076a0:	6922      	ldr	r2, [r4, #16]
 80076a2:	bf0c      	ite	eq
 80076a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076a8:	2500      	movne	r5, #0
 80076aa:	4293      	cmp	r3, r2
 80076ac:	bfc4      	itt	gt
 80076ae:	1a9b      	subgt	r3, r3, r2
 80076b0:	18ed      	addgt	r5, r5, r3
 80076b2:	f04f 0900 	mov.w	r9, #0
 80076b6:	341a      	adds	r4, #26
 80076b8:	454d      	cmp	r5, r9
 80076ba:	d11a      	bne.n	80076f2 <_printf_common+0xd6>
 80076bc:	2000      	movs	r0, #0
 80076be:	e008      	b.n	80076d2 <_printf_common+0xb6>
 80076c0:	2301      	movs	r3, #1
 80076c2:	4652      	mov	r2, sl
 80076c4:	4639      	mov	r1, r7
 80076c6:	4630      	mov	r0, r6
 80076c8:	47c0      	blx	r8
 80076ca:	3001      	adds	r0, #1
 80076cc:	d103      	bne.n	80076d6 <_printf_common+0xba>
 80076ce:	f04f 30ff 	mov.w	r0, #4294967295
 80076d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d6:	3501      	adds	r5, #1
 80076d8:	e7c3      	b.n	8007662 <_printf_common+0x46>
 80076da:	18e1      	adds	r1, r4, r3
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	2030      	movs	r0, #48	; 0x30
 80076e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076e4:	4422      	add	r2, r4
 80076e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076ee:	3302      	adds	r3, #2
 80076f0:	e7c5      	b.n	800767e <_printf_common+0x62>
 80076f2:	2301      	movs	r3, #1
 80076f4:	4622      	mov	r2, r4
 80076f6:	4639      	mov	r1, r7
 80076f8:	4630      	mov	r0, r6
 80076fa:	47c0      	blx	r8
 80076fc:	3001      	adds	r0, #1
 80076fe:	d0e6      	beq.n	80076ce <_printf_common+0xb2>
 8007700:	f109 0901 	add.w	r9, r9, #1
 8007704:	e7d8      	b.n	80076b8 <_printf_common+0x9c>
	...

08007708 <_printf_i>:
 8007708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800770c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007710:	460c      	mov	r4, r1
 8007712:	7e09      	ldrb	r1, [r1, #24]
 8007714:	b085      	sub	sp, #20
 8007716:	296e      	cmp	r1, #110	; 0x6e
 8007718:	4617      	mov	r7, r2
 800771a:	4606      	mov	r6, r0
 800771c:	4698      	mov	r8, r3
 800771e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007720:	f000 80b3 	beq.w	800788a <_printf_i+0x182>
 8007724:	d822      	bhi.n	800776c <_printf_i+0x64>
 8007726:	2963      	cmp	r1, #99	; 0x63
 8007728:	d036      	beq.n	8007798 <_printf_i+0x90>
 800772a:	d80a      	bhi.n	8007742 <_printf_i+0x3a>
 800772c:	2900      	cmp	r1, #0
 800772e:	f000 80b9 	beq.w	80078a4 <_printf_i+0x19c>
 8007732:	2958      	cmp	r1, #88	; 0x58
 8007734:	f000 8083 	beq.w	800783e <_printf_i+0x136>
 8007738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800773c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007740:	e032      	b.n	80077a8 <_printf_i+0xa0>
 8007742:	2964      	cmp	r1, #100	; 0x64
 8007744:	d001      	beq.n	800774a <_printf_i+0x42>
 8007746:	2969      	cmp	r1, #105	; 0x69
 8007748:	d1f6      	bne.n	8007738 <_printf_i+0x30>
 800774a:	6820      	ldr	r0, [r4, #0]
 800774c:	6813      	ldr	r3, [r2, #0]
 800774e:	0605      	lsls	r5, r0, #24
 8007750:	f103 0104 	add.w	r1, r3, #4
 8007754:	d52a      	bpl.n	80077ac <_printf_i+0xa4>
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6011      	str	r1, [r2, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	da03      	bge.n	8007766 <_printf_i+0x5e>
 800775e:	222d      	movs	r2, #45	; 0x2d
 8007760:	425b      	negs	r3, r3
 8007762:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007766:	486f      	ldr	r0, [pc, #444]	; (8007924 <_printf_i+0x21c>)
 8007768:	220a      	movs	r2, #10
 800776a:	e039      	b.n	80077e0 <_printf_i+0xd8>
 800776c:	2973      	cmp	r1, #115	; 0x73
 800776e:	f000 809d 	beq.w	80078ac <_printf_i+0x1a4>
 8007772:	d808      	bhi.n	8007786 <_printf_i+0x7e>
 8007774:	296f      	cmp	r1, #111	; 0x6f
 8007776:	d020      	beq.n	80077ba <_printf_i+0xb2>
 8007778:	2970      	cmp	r1, #112	; 0x70
 800777a:	d1dd      	bne.n	8007738 <_printf_i+0x30>
 800777c:	6823      	ldr	r3, [r4, #0]
 800777e:	f043 0320 	orr.w	r3, r3, #32
 8007782:	6023      	str	r3, [r4, #0]
 8007784:	e003      	b.n	800778e <_printf_i+0x86>
 8007786:	2975      	cmp	r1, #117	; 0x75
 8007788:	d017      	beq.n	80077ba <_printf_i+0xb2>
 800778a:	2978      	cmp	r1, #120	; 0x78
 800778c:	d1d4      	bne.n	8007738 <_printf_i+0x30>
 800778e:	2378      	movs	r3, #120	; 0x78
 8007790:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007794:	4864      	ldr	r0, [pc, #400]	; (8007928 <_printf_i+0x220>)
 8007796:	e055      	b.n	8007844 <_printf_i+0x13c>
 8007798:	6813      	ldr	r3, [r2, #0]
 800779a:	1d19      	adds	r1, r3, #4
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6011      	str	r1, [r2, #0]
 80077a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077a8:	2301      	movs	r3, #1
 80077aa:	e08c      	b.n	80078c6 <_printf_i+0x1be>
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	6011      	str	r1, [r2, #0]
 80077b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077b4:	bf18      	it	ne
 80077b6:	b21b      	sxthne	r3, r3
 80077b8:	e7cf      	b.n	800775a <_printf_i+0x52>
 80077ba:	6813      	ldr	r3, [r2, #0]
 80077bc:	6825      	ldr	r5, [r4, #0]
 80077be:	1d18      	adds	r0, r3, #4
 80077c0:	6010      	str	r0, [r2, #0]
 80077c2:	0628      	lsls	r0, r5, #24
 80077c4:	d501      	bpl.n	80077ca <_printf_i+0xc2>
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	e002      	b.n	80077d0 <_printf_i+0xc8>
 80077ca:	0668      	lsls	r0, r5, #25
 80077cc:	d5fb      	bpl.n	80077c6 <_printf_i+0xbe>
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	4854      	ldr	r0, [pc, #336]	; (8007924 <_printf_i+0x21c>)
 80077d2:	296f      	cmp	r1, #111	; 0x6f
 80077d4:	bf14      	ite	ne
 80077d6:	220a      	movne	r2, #10
 80077d8:	2208      	moveq	r2, #8
 80077da:	2100      	movs	r1, #0
 80077dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077e0:	6865      	ldr	r5, [r4, #4]
 80077e2:	60a5      	str	r5, [r4, #8]
 80077e4:	2d00      	cmp	r5, #0
 80077e6:	f2c0 8095 	blt.w	8007914 <_printf_i+0x20c>
 80077ea:	6821      	ldr	r1, [r4, #0]
 80077ec:	f021 0104 	bic.w	r1, r1, #4
 80077f0:	6021      	str	r1, [r4, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d13d      	bne.n	8007872 <_printf_i+0x16a>
 80077f6:	2d00      	cmp	r5, #0
 80077f8:	f040 808e 	bne.w	8007918 <_printf_i+0x210>
 80077fc:	4665      	mov	r5, ip
 80077fe:	2a08      	cmp	r2, #8
 8007800:	d10b      	bne.n	800781a <_printf_i+0x112>
 8007802:	6823      	ldr	r3, [r4, #0]
 8007804:	07db      	lsls	r3, r3, #31
 8007806:	d508      	bpl.n	800781a <_printf_i+0x112>
 8007808:	6923      	ldr	r3, [r4, #16]
 800780a:	6862      	ldr	r2, [r4, #4]
 800780c:	429a      	cmp	r2, r3
 800780e:	bfde      	ittt	le
 8007810:	2330      	movle	r3, #48	; 0x30
 8007812:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007816:	f105 35ff 	addle.w	r5, r5, #4294967295
 800781a:	ebac 0305 	sub.w	r3, ip, r5
 800781e:	6123      	str	r3, [r4, #16]
 8007820:	f8cd 8000 	str.w	r8, [sp]
 8007824:	463b      	mov	r3, r7
 8007826:	aa03      	add	r2, sp, #12
 8007828:	4621      	mov	r1, r4
 800782a:	4630      	mov	r0, r6
 800782c:	f7ff fef6 	bl	800761c <_printf_common>
 8007830:	3001      	adds	r0, #1
 8007832:	d14d      	bne.n	80078d0 <_printf_i+0x1c8>
 8007834:	f04f 30ff 	mov.w	r0, #4294967295
 8007838:	b005      	add	sp, #20
 800783a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800783e:	4839      	ldr	r0, [pc, #228]	; (8007924 <_printf_i+0x21c>)
 8007840:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007844:	6813      	ldr	r3, [r2, #0]
 8007846:	6821      	ldr	r1, [r4, #0]
 8007848:	1d1d      	adds	r5, r3, #4
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	6015      	str	r5, [r2, #0]
 800784e:	060a      	lsls	r2, r1, #24
 8007850:	d50b      	bpl.n	800786a <_printf_i+0x162>
 8007852:	07ca      	lsls	r2, r1, #31
 8007854:	bf44      	itt	mi
 8007856:	f041 0120 	orrmi.w	r1, r1, #32
 800785a:	6021      	strmi	r1, [r4, #0]
 800785c:	b91b      	cbnz	r3, 8007866 <_printf_i+0x15e>
 800785e:	6822      	ldr	r2, [r4, #0]
 8007860:	f022 0220 	bic.w	r2, r2, #32
 8007864:	6022      	str	r2, [r4, #0]
 8007866:	2210      	movs	r2, #16
 8007868:	e7b7      	b.n	80077da <_printf_i+0xd2>
 800786a:	064d      	lsls	r5, r1, #25
 800786c:	bf48      	it	mi
 800786e:	b29b      	uxthmi	r3, r3
 8007870:	e7ef      	b.n	8007852 <_printf_i+0x14a>
 8007872:	4665      	mov	r5, ip
 8007874:	fbb3 f1f2 	udiv	r1, r3, r2
 8007878:	fb02 3311 	mls	r3, r2, r1, r3
 800787c:	5cc3      	ldrb	r3, [r0, r3]
 800787e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007882:	460b      	mov	r3, r1
 8007884:	2900      	cmp	r1, #0
 8007886:	d1f5      	bne.n	8007874 <_printf_i+0x16c>
 8007888:	e7b9      	b.n	80077fe <_printf_i+0xf6>
 800788a:	6813      	ldr	r3, [r2, #0]
 800788c:	6825      	ldr	r5, [r4, #0]
 800788e:	6961      	ldr	r1, [r4, #20]
 8007890:	1d18      	adds	r0, r3, #4
 8007892:	6010      	str	r0, [r2, #0]
 8007894:	0628      	lsls	r0, r5, #24
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	d501      	bpl.n	800789e <_printf_i+0x196>
 800789a:	6019      	str	r1, [r3, #0]
 800789c:	e002      	b.n	80078a4 <_printf_i+0x19c>
 800789e:	066a      	lsls	r2, r5, #25
 80078a0:	d5fb      	bpl.n	800789a <_printf_i+0x192>
 80078a2:	8019      	strh	r1, [r3, #0]
 80078a4:	2300      	movs	r3, #0
 80078a6:	6123      	str	r3, [r4, #16]
 80078a8:	4665      	mov	r5, ip
 80078aa:	e7b9      	b.n	8007820 <_printf_i+0x118>
 80078ac:	6813      	ldr	r3, [r2, #0]
 80078ae:	1d19      	adds	r1, r3, #4
 80078b0:	6011      	str	r1, [r2, #0]
 80078b2:	681d      	ldr	r5, [r3, #0]
 80078b4:	6862      	ldr	r2, [r4, #4]
 80078b6:	2100      	movs	r1, #0
 80078b8:	4628      	mov	r0, r5
 80078ba:	f7f8 fcc9 	bl	8000250 <memchr>
 80078be:	b108      	cbz	r0, 80078c4 <_printf_i+0x1bc>
 80078c0:	1b40      	subs	r0, r0, r5
 80078c2:	6060      	str	r0, [r4, #4]
 80078c4:	6863      	ldr	r3, [r4, #4]
 80078c6:	6123      	str	r3, [r4, #16]
 80078c8:	2300      	movs	r3, #0
 80078ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078ce:	e7a7      	b.n	8007820 <_printf_i+0x118>
 80078d0:	6923      	ldr	r3, [r4, #16]
 80078d2:	462a      	mov	r2, r5
 80078d4:	4639      	mov	r1, r7
 80078d6:	4630      	mov	r0, r6
 80078d8:	47c0      	blx	r8
 80078da:	3001      	adds	r0, #1
 80078dc:	d0aa      	beq.n	8007834 <_printf_i+0x12c>
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	079b      	lsls	r3, r3, #30
 80078e2:	d413      	bmi.n	800790c <_printf_i+0x204>
 80078e4:	68e0      	ldr	r0, [r4, #12]
 80078e6:	9b03      	ldr	r3, [sp, #12]
 80078e8:	4298      	cmp	r0, r3
 80078ea:	bfb8      	it	lt
 80078ec:	4618      	movlt	r0, r3
 80078ee:	e7a3      	b.n	8007838 <_printf_i+0x130>
 80078f0:	2301      	movs	r3, #1
 80078f2:	464a      	mov	r2, r9
 80078f4:	4639      	mov	r1, r7
 80078f6:	4630      	mov	r0, r6
 80078f8:	47c0      	blx	r8
 80078fa:	3001      	adds	r0, #1
 80078fc:	d09a      	beq.n	8007834 <_printf_i+0x12c>
 80078fe:	3501      	adds	r5, #1
 8007900:	68e3      	ldr	r3, [r4, #12]
 8007902:	9a03      	ldr	r2, [sp, #12]
 8007904:	1a9b      	subs	r3, r3, r2
 8007906:	42ab      	cmp	r3, r5
 8007908:	dcf2      	bgt.n	80078f0 <_printf_i+0x1e8>
 800790a:	e7eb      	b.n	80078e4 <_printf_i+0x1dc>
 800790c:	2500      	movs	r5, #0
 800790e:	f104 0919 	add.w	r9, r4, #25
 8007912:	e7f5      	b.n	8007900 <_printf_i+0x1f8>
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1ac      	bne.n	8007872 <_printf_i+0x16a>
 8007918:	7803      	ldrb	r3, [r0, #0]
 800791a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800791e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007922:	e76c      	b.n	80077fe <_printf_i+0xf6>
 8007924:	08007efd 	.word	0x08007efd
 8007928:	08007f0e 	.word	0x08007f0e

0800792c <memmove>:
 800792c:	4288      	cmp	r0, r1
 800792e:	b510      	push	{r4, lr}
 8007930:	eb01 0302 	add.w	r3, r1, r2
 8007934:	d807      	bhi.n	8007946 <memmove+0x1a>
 8007936:	1e42      	subs	r2, r0, #1
 8007938:	4299      	cmp	r1, r3
 800793a:	d00a      	beq.n	8007952 <memmove+0x26>
 800793c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007940:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007944:	e7f8      	b.n	8007938 <memmove+0xc>
 8007946:	4283      	cmp	r3, r0
 8007948:	d9f5      	bls.n	8007936 <memmove+0xa>
 800794a:	1881      	adds	r1, r0, r2
 800794c:	1ad2      	subs	r2, r2, r3
 800794e:	42d3      	cmn	r3, r2
 8007950:	d100      	bne.n	8007954 <memmove+0x28>
 8007952:	bd10      	pop	{r4, pc}
 8007954:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007958:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800795c:	e7f7      	b.n	800794e <memmove+0x22>
	...

08007960 <_free_r>:
 8007960:	b538      	push	{r3, r4, r5, lr}
 8007962:	4605      	mov	r5, r0
 8007964:	2900      	cmp	r1, #0
 8007966:	d045      	beq.n	80079f4 <_free_r+0x94>
 8007968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800796c:	1f0c      	subs	r4, r1, #4
 800796e:	2b00      	cmp	r3, #0
 8007970:	bfb8      	it	lt
 8007972:	18e4      	addlt	r4, r4, r3
 8007974:	f000 f8d2 	bl	8007b1c <__malloc_lock>
 8007978:	4a1f      	ldr	r2, [pc, #124]	; (80079f8 <_free_r+0x98>)
 800797a:	6813      	ldr	r3, [r2, #0]
 800797c:	4610      	mov	r0, r2
 800797e:	b933      	cbnz	r3, 800798e <_free_r+0x2e>
 8007980:	6063      	str	r3, [r4, #4]
 8007982:	6014      	str	r4, [r2, #0]
 8007984:	4628      	mov	r0, r5
 8007986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800798a:	f000 b8c8 	b.w	8007b1e <__malloc_unlock>
 800798e:	42a3      	cmp	r3, r4
 8007990:	d90c      	bls.n	80079ac <_free_r+0x4c>
 8007992:	6821      	ldr	r1, [r4, #0]
 8007994:	1862      	adds	r2, r4, r1
 8007996:	4293      	cmp	r3, r2
 8007998:	bf04      	itt	eq
 800799a:	681a      	ldreq	r2, [r3, #0]
 800799c:	685b      	ldreq	r3, [r3, #4]
 800799e:	6063      	str	r3, [r4, #4]
 80079a0:	bf04      	itt	eq
 80079a2:	1852      	addeq	r2, r2, r1
 80079a4:	6022      	streq	r2, [r4, #0]
 80079a6:	6004      	str	r4, [r0, #0]
 80079a8:	e7ec      	b.n	8007984 <_free_r+0x24>
 80079aa:	4613      	mov	r3, r2
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	b10a      	cbz	r2, 80079b4 <_free_r+0x54>
 80079b0:	42a2      	cmp	r2, r4
 80079b2:	d9fa      	bls.n	80079aa <_free_r+0x4a>
 80079b4:	6819      	ldr	r1, [r3, #0]
 80079b6:	1858      	adds	r0, r3, r1
 80079b8:	42a0      	cmp	r0, r4
 80079ba:	d10b      	bne.n	80079d4 <_free_r+0x74>
 80079bc:	6820      	ldr	r0, [r4, #0]
 80079be:	4401      	add	r1, r0
 80079c0:	1858      	adds	r0, r3, r1
 80079c2:	4282      	cmp	r2, r0
 80079c4:	6019      	str	r1, [r3, #0]
 80079c6:	d1dd      	bne.n	8007984 <_free_r+0x24>
 80079c8:	6810      	ldr	r0, [r2, #0]
 80079ca:	6852      	ldr	r2, [r2, #4]
 80079cc:	605a      	str	r2, [r3, #4]
 80079ce:	4401      	add	r1, r0
 80079d0:	6019      	str	r1, [r3, #0]
 80079d2:	e7d7      	b.n	8007984 <_free_r+0x24>
 80079d4:	d902      	bls.n	80079dc <_free_r+0x7c>
 80079d6:	230c      	movs	r3, #12
 80079d8:	602b      	str	r3, [r5, #0]
 80079da:	e7d3      	b.n	8007984 <_free_r+0x24>
 80079dc:	6820      	ldr	r0, [r4, #0]
 80079de:	1821      	adds	r1, r4, r0
 80079e0:	428a      	cmp	r2, r1
 80079e2:	bf04      	itt	eq
 80079e4:	6811      	ldreq	r1, [r2, #0]
 80079e6:	6852      	ldreq	r2, [r2, #4]
 80079e8:	6062      	str	r2, [r4, #4]
 80079ea:	bf04      	itt	eq
 80079ec:	1809      	addeq	r1, r1, r0
 80079ee:	6021      	streq	r1, [r4, #0]
 80079f0:	605c      	str	r4, [r3, #4]
 80079f2:	e7c7      	b.n	8007984 <_free_r+0x24>
 80079f4:	bd38      	pop	{r3, r4, r5, pc}
 80079f6:	bf00      	nop
 80079f8:	20000090 	.word	0x20000090

080079fc <_malloc_r>:
 80079fc:	b570      	push	{r4, r5, r6, lr}
 80079fe:	1ccd      	adds	r5, r1, #3
 8007a00:	f025 0503 	bic.w	r5, r5, #3
 8007a04:	3508      	adds	r5, #8
 8007a06:	2d0c      	cmp	r5, #12
 8007a08:	bf38      	it	cc
 8007a0a:	250c      	movcc	r5, #12
 8007a0c:	2d00      	cmp	r5, #0
 8007a0e:	4606      	mov	r6, r0
 8007a10:	db01      	blt.n	8007a16 <_malloc_r+0x1a>
 8007a12:	42a9      	cmp	r1, r5
 8007a14:	d903      	bls.n	8007a1e <_malloc_r+0x22>
 8007a16:	230c      	movs	r3, #12
 8007a18:	6033      	str	r3, [r6, #0]
 8007a1a:	2000      	movs	r0, #0
 8007a1c:	bd70      	pop	{r4, r5, r6, pc}
 8007a1e:	f000 f87d 	bl	8007b1c <__malloc_lock>
 8007a22:	4a21      	ldr	r2, [pc, #132]	; (8007aa8 <_malloc_r+0xac>)
 8007a24:	6814      	ldr	r4, [r2, #0]
 8007a26:	4621      	mov	r1, r4
 8007a28:	b991      	cbnz	r1, 8007a50 <_malloc_r+0x54>
 8007a2a:	4c20      	ldr	r4, [pc, #128]	; (8007aac <_malloc_r+0xb0>)
 8007a2c:	6823      	ldr	r3, [r4, #0]
 8007a2e:	b91b      	cbnz	r3, 8007a38 <_malloc_r+0x3c>
 8007a30:	4630      	mov	r0, r6
 8007a32:	f000 f863 	bl	8007afc <_sbrk_r>
 8007a36:	6020      	str	r0, [r4, #0]
 8007a38:	4629      	mov	r1, r5
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	f000 f85e 	bl	8007afc <_sbrk_r>
 8007a40:	1c43      	adds	r3, r0, #1
 8007a42:	d124      	bne.n	8007a8e <_malloc_r+0x92>
 8007a44:	230c      	movs	r3, #12
 8007a46:	6033      	str	r3, [r6, #0]
 8007a48:	4630      	mov	r0, r6
 8007a4a:	f000 f868 	bl	8007b1e <__malloc_unlock>
 8007a4e:	e7e4      	b.n	8007a1a <_malloc_r+0x1e>
 8007a50:	680b      	ldr	r3, [r1, #0]
 8007a52:	1b5b      	subs	r3, r3, r5
 8007a54:	d418      	bmi.n	8007a88 <_malloc_r+0x8c>
 8007a56:	2b0b      	cmp	r3, #11
 8007a58:	d90f      	bls.n	8007a7a <_malloc_r+0x7e>
 8007a5a:	600b      	str	r3, [r1, #0]
 8007a5c:	50cd      	str	r5, [r1, r3]
 8007a5e:	18cc      	adds	r4, r1, r3
 8007a60:	4630      	mov	r0, r6
 8007a62:	f000 f85c 	bl	8007b1e <__malloc_unlock>
 8007a66:	f104 000b 	add.w	r0, r4, #11
 8007a6a:	1d23      	adds	r3, r4, #4
 8007a6c:	f020 0007 	bic.w	r0, r0, #7
 8007a70:	1ac3      	subs	r3, r0, r3
 8007a72:	d0d3      	beq.n	8007a1c <_malloc_r+0x20>
 8007a74:	425a      	negs	r2, r3
 8007a76:	50e2      	str	r2, [r4, r3]
 8007a78:	e7d0      	b.n	8007a1c <_malloc_r+0x20>
 8007a7a:	428c      	cmp	r4, r1
 8007a7c:	684b      	ldr	r3, [r1, #4]
 8007a7e:	bf16      	itet	ne
 8007a80:	6063      	strne	r3, [r4, #4]
 8007a82:	6013      	streq	r3, [r2, #0]
 8007a84:	460c      	movne	r4, r1
 8007a86:	e7eb      	b.n	8007a60 <_malloc_r+0x64>
 8007a88:	460c      	mov	r4, r1
 8007a8a:	6849      	ldr	r1, [r1, #4]
 8007a8c:	e7cc      	b.n	8007a28 <_malloc_r+0x2c>
 8007a8e:	1cc4      	adds	r4, r0, #3
 8007a90:	f024 0403 	bic.w	r4, r4, #3
 8007a94:	42a0      	cmp	r0, r4
 8007a96:	d005      	beq.n	8007aa4 <_malloc_r+0xa8>
 8007a98:	1a21      	subs	r1, r4, r0
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	f000 f82e 	bl	8007afc <_sbrk_r>
 8007aa0:	3001      	adds	r0, #1
 8007aa2:	d0cf      	beq.n	8007a44 <_malloc_r+0x48>
 8007aa4:	6025      	str	r5, [r4, #0]
 8007aa6:	e7db      	b.n	8007a60 <_malloc_r+0x64>
 8007aa8:	20000090 	.word	0x20000090
 8007aac:	20000094 	.word	0x20000094

08007ab0 <_realloc_r>:
 8007ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab2:	4607      	mov	r7, r0
 8007ab4:	4614      	mov	r4, r2
 8007ab6:	460e      	mov	r6, r1
 8007ab8:	b921      	cbnz	r1, 8007ac4 <_realloc_r+0x14>
 8007aba:	4611      	mov	r1, r2
 8007abc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ac0:	f7ff bf9c 	b.w	80079fc <_malloc_r>
 8007ac4:	b922      	cbnz	r2, 8007ad0 <_realloc_r+0x20>
 8007ac6:	f7ff ff4b 	bl	8007960 <_free_r>
 8007aca:	4625      	mov	r5, r4
 8007acc:	4628      	mov	r0, r5
 8007ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ad0:	f000 f826 	bl	8007b20 <_malloc_usable_size_r>
 8007ad4:	42a0      	cmp	r0, r4
 8007ad6:	d20f      	bcs.n	8007af8 <_realloc_r+0x48>
 8007ad8:	4621      	mov	r1, r4
 8007ada:	4638      	mov	r0, r7
 8007adc:	f7ff ff8e 	bl	80079fc <_malloc_r>
 8007ae0:	4605      	mov	r5, r0
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	d0f2      	beq.n	8007acc <_realloc_r+0x1c>
 8007ae6:	4631      	mov	r1, r6
 8007ae8:	4622      	mov	r2, r4
 8007aea:	f7ff fc11 	bl	8007310 <memcpy>
 8007aee:	4631      	mov	r1, r6
 8007af0:	4638      	mov	r0, r7
 8007af2:	f7ff ff35 	bl	8007960 <_free_r>
 8007af6:	e7e9      	b.n	8007acc <_realloc_r+0x1c>
 8007af8:	4635      	mov	r5, r6
 8007afa:	e7e7      	b.n	8007acc <_realloc_r+0x1c>

08007afc <_sbrk_r>:
 8007afc:	b538      	push	{r3, r4, r5, lr}
 8007afe:	4c06      	ldr	r4, [pc, #24]	; (8007b18 <_sbrk_r+0x1c>)
 8007b00:	2300      	movs	r3, #0
 8007b02:	4605      	mov	r5, r0
 8007b04:	4608      	mov	r0, r1
 8007b06:	6023      	str	r3, [r4, #0]
 8007b08:	f7fa f8ce 	bl	8001ca8 <_sbrk>
 8007b0c:	1c43      	adds	r3, r0, #1
 8007b0e:	d102      	bne.n	8007b16 <_sbrk_r+0x1a>
 8007b10:	6823      	ldr	r3, [r4, #0]
 8007b12:	b103      	cbz	r3, 8007b16 <_sbrk_r+0x1a>
 8007b14:	602b      	str	r3, [r5, #0]
 8007b16:	bd38      	pop	{r3, r4, r5, pc}
 8007b18:	20000458 	.word	0x20000458

08007b1c <__malloc_lock>:
 8007b1c:	4770      	bx	lr

08007b1e <__malloc_unlock>:
 8007b1e:	4770      	bx	lr

08007b20 <_malloc_usable_size_r>:
 8007b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b24:	1f18      	subs	r0, r3, #4
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	bfbc      	itt	lt
 8007b2a:	580b      	ldrlt	r3, [r1, r0]
 8007b2c:	18c0      	addlt	r0, r0, r3
 8007b2e:	4770      	bx	lr

08007b30 <_init>:
 8007b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b32:	bf00      	nop
 8007b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b36:	bc08      	pop	{r3}
 8007b38:	469e      	mov	lr, r3
 8007b3a:	4770      	bx	lr

08007b3c <_fini>:
 8007b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3e:	bf00      	nop
 8007b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b42:	bc08      	pop	{r3}
 8007b44:	469e      	mov	lr, r3
 8007b46:	4770      	bx	lr
