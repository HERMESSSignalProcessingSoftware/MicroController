
CubeRev21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068ac  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08006aa4  08006aa4  00016aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c1c  08006c1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c1c  08006c1c  00016c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c24  08006c24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c24  08006c24  00016c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c28  08006c28  00016c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  2000000c  08006c38  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08006c38  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4df  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dbe  00000000  00000000  0002c519  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ad0  00000000  00000000  0002e2d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009c8  00000000  00000000  0002eda8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000020f5  00000000  00000000  0002f770  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000af2c  00000000  00000000  00031865  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010f9a4  00000000  00000000  0003c791  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014c135  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ab4  00000000  00000000  0014c1b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006a8c 	.word	0x08006a8c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08006a8c 	.word	0x08006a8c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b090      	sub	sp, #64	; 0x40
 800053c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
 800054c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800054e:	4bb2      	ldr	r3, [pc, #712]	; (8000818 <MX_GPIO_Init+0x2e0>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4ab1      	ldr	r2, [pc, #708]	; (8000818 <MX_GPIO_Init+0x2e0>)
 8000554:	f043 0310 	orr.w	r3, r3, #16
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
 800055a:	4baf      	ldr	r3, [pc, #700]	; (8000818 <MX_GPIO_Init+0x2e0>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f003 0310 	and.w	r3, r3, #16
 8000562:	62bb      	str	r3, [r7, #40]	; 0x28
 8000564:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000566:	4bac      	ldr	r3, [pc, #688]	; (8000818 <MX_GPIO_Init+0x2e0>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4aab      	ldr	r2, [pc, #684]	; (8000818 <MX_GPIO_Init+0x2e0>)
 800056c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4ba9      	ldr	r3, [pc, #676]	; (8000818 <MX_GPIO_Init+0x2e0>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800057a:	627b      	str	r3, [r7, #36]	; 0x24
 800057c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057e:	4ba6      	ldr	r3, [pc, #664]	; (8000818 <MX_GPIO_Init+0x2e0>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4aa5      	ldr	r2, [pc, #660]	; (8000818 <MX_GPIO_Init+0x2e0>)
 8000584:	f043 0304 	orr.w	r3, r3, #4
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
 800058a:	4ba3      	ldr	r3, [pc, #652]	; (8000818 <MX_GPIO_Init+0x2e0>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	f003 0304 	and.w	r3, r3, #4
 8000592:	623b      	str	r3, [r7, #32]
 8000594:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000596:	4ba0      	ldr	r3, [pc, #640]	; (8000818 <MX_GPIO_Init+0x2e0>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a9f      	ldr	r2, [pc, #636]	; (8000818 <MX_GPIO_Init+0x2e0>)
 800059c:	f043 0320 	orr.w	r3, r3, #32
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b9d      	ldr	r3, [pc, #628]	; (8000818 <MX_GPIO_Init+0x2e0>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0320 	and.w	r3, r3, #32
 80005aa:	61fb      	str	r3, [r7, #28]
 80005ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ae:	4b9a      	ldr	r3, [pc, #616]	; (8000818 <MX_GPIO_Init+0x2e0>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a99      	ldr	r2, [pc, #612]	; (8000818 <MX_GPIO_Init+0x2e0>)
 80005b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b97      	ldr	r3, [pc, #604]	; (8000818 <MX_GPIO_Init+0x2e0>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c2:	61bb      	str	r3, [r7, #24]
 80005c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	4b94      	ldr	r3, [pc, #592]	; (8000818 <MX_GPIO_Init+0x2e0>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a93      	ldr	r2, [pc, #588]	; (8000818 <MX_GPIO_Init+0x2e0>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b91      	ldr	r3, [pc, #580]	; (8000818 <MX_GPIO_Init+0x2e0>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005de:	4b8e      	ldr	r3, [pc, #568]	; (8000818 <MX_GPIO_Init+0x2e0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a8d      	ldr	r2, [pc, #564]	; (8000818 <MX_GPIO_Init+0x2e0>)
 80005e4:	f043 0302 	orr.w	r3, r3, #2
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b8b      	ldr	r3, [pc, #556]	; (8000818 <MX_GPIO_Init+0x2e0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0302 	and.w	r3, r3, #2
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80005f6:	4b88      	ldr	r3, [pc, #544]	; (8000818 <MX_GPIO_Init+0x2e0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a87      	ldr	r2, [pc, #540]	; (8000818 <MX_GPIO_Init+0x2e0>)
 80005fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b85      	ldr	r3, [pc, #532]	; (8000818 <MX_GPIO_Init+0x2e0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800060e:	4b82      	ldr	r3, [pc, #520]	; (8000818 <MX_GPIO_Init+0x2e0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a81      	ldr	r2, [pc, #516]	; (8000818 <MX_GPIO_Init+0x2e0>)
 8000614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b7f      	ldr	r3, [pc, #508]	; (8000818 <MX_GPIO_Init+0x2e0>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000626:	4b7c      	ldr	r3, [pc, #496]	; (8000818 <MX_GPIO_Init+0x2e0>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a7b      	ldr	r2, [pc, #492]	; (8000818 <MX_GPIO_Init+0x2e0>)
 800062c:	f043 0308 	orr.w	r3, r3, #8
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b79      	ldr	r3, [pc, #484]	; (8000818 <MX_GPIO_Init+0x2e0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0308 	and.w	r3, r3, #8
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800063e:	4b76      	ldr	r3, [pc, #472]	; (8000818 <MX_GPIO_Init+0x2e0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a75      	ldr	r2, [pc, #468]	; (8000818 <MX_GPIO_Init+0x2e0>)
 8000644:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b73      	ldr	r3, [pc, #460]	; (8000818 <MX_GPIO_Init+0x2e0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED_4_Pin|LWL_OUT_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	f244 0108 	movw	r1, #16392	; 0x4008
 800065c:	486f      	ldr	r0, [pc, #444]	; (800081c <MX_GPIO_Init+0x2e4>)
 800065e:	f002 f8c5 	bl	80027ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_3_Pin|LED_2_Pin|LED_1_Pin|SD_CS_Pin
 8000662:	2200      	movs	r2, #0
 8000664:	f24e 4138 	movw	r1, #58424	; 0xe438
 8000668:	486d      	ldr	r0, [pc, #436]	; (8000820 <MX_GPIO_Init+0x2e8>)
 800066a:	f002 f8bf 	bl	80027ec <HAL_GPIO_WritePin>
                          |nCS_DMS1_Pin|nCS_DMS2_Pin|nCS_DMS3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, nCS_DMS4_Pin|nCS_DMS5_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2103      	movs	r1, #3
 8000672:	486c      	ldr	r0, [pc, #432]	; (8000824 <MX_GPIO_Init+0x2ec>)
 8000674:	f002 f8ba 	bl	80027ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCS_DMS6_GPIO_Port, nCS_DMS6_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	2180      	movs	r1, #128	; 0x80
 800067c:	486a      	ldr	r0, [pc, #424]	; (8000828 <MX_GPIO_Init+0x2f0>)
 800067e:	f002 f8b5 	bl	80027ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, FL1_HLD_Pin|FL1_WP_Pin|FL1_RES_Pin, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8000688:	4868      	ldr	r0, [pc, #416]	; (800082c <MX_GPIO_Init+0x2f4>)
 800068a:	f002 f8af 	bl	80027ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL1_CS2_GPIO_Port, FL1_CS2_Pin, GPIO_PIN_SET);
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000694:	4865      	ldr	r0, [pc, #404]	; (800082c <MX_GPIO_Init+0x2f4>)
 8000696:	f002 f8a9 	bl	80027ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL1_CS1_GPIO_Port, FL1_CS1_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a0:	4863      	ldr	r0, [pc, #396]	; (8000830 <MX_GPIO_Init+0x2f8>)
 80006a2:	f002 f8a3 	bl	80027ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, nCS_PT3_Pin|FL2_HLD_Pin|FL2_RES_Pin|FL2_WP_Pin
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 4167 	mov.w	r1, #59136	; 0xe700
 80006ac:	4861      	ldr	r0, [pc, #388]	; (8000834 <MX_GPIO_Init+0x2fc>)
 80006ae:	f002 f89d 	bl	80027ec <HAL_GPIO_WritePin>
                          |nCS_PT2_Pin|nCS_PT1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FL2_CS2_Pin|FL2_CS1_Pin, GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80006b8:	485e      	ldr	r0, [pc, #376]	; (8000834 <MX_GPIO_Init+0x2fc>)
 80006ba:	f002 f897 	bl	80027ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
 80006be:	f64f 7318 	movw	r3, #65304	; 0xff18
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c4:	2303      	movs	r3, #3
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006d0:	4619      	mov	r1, r3
 80006d2:	4855      	ldr	r0, [pc, #340]	; (8000828 <MX_GPIO_Init+0x2f0>)
 80006d4:	f001 fcdc 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LWL_IN_Pin;
 80006d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006de:	2300      	movs	r3, #0
 80006e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LWL_IN_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006ea:	4619      	mov	r1, r3
 80006ec:	484b      	ldr	r0, [pc, #300]	; (800081c <MX_GPIO_Init+0x2e4>)
 80006ee:	f001 fccf 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80006f2:	f24e 33ff 	movw	r3, #58367	; 0xe3ff
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f8:	2303      	movs	r3, #3
 80006fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000700:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000704:	4619      	mov	r1, r3
 8000706:	484c      	ldr	r0, [pc, #304]	; (8000838 <MX_GPIO_Init+0x300>)
 8000708:	f001 fcc2 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI10 PI11 PI12 PI13
                           PI15 PI0 PI1 PI2
                           PI4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800070c:	f64b 4317 	movw	r3, #48151	; 0xbc17
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000712:	2303      	movs	r3, #3
 8000714:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800071a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800071e:	4619      	mov	r1, r3
 8000720:	483e      	ldr	r0, [pc, #248]	; (800081c <MX_GPIO_Init+0x2e4>)
 8000722:	f001 fcb5 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF6
                           PF11 PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8000726:	f641 0347 	movw	r3, #6215	; 0x1847
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800072c:	2303      	movs	r3, #3
 800072e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000734:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000738:	4619      	mov	r1, r3
 800073a:	4839      	ldr	r0, [pc, #228]	; (8000820 <MX_GPIO_Init+0x2e8>)
 800073c:	f001 fca8 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LED_4_Pin|LWL_OUT_Pin;
 8000740:	f244 0308 	movw	r3, #16392	; 0x4008
 8000744:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000752:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000756:	4619      	mov	r1, r3
 8000758:	4830      	ldr	r0, [pc, #192]	; (800081c <MX_GPIO_Init+0x2e4>)
 800075a:	f001 fc99 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LED_1_Pin|SD_CS_Pin
 800075e:	f24e 4338 	movw	r3, #58424	; 0xe438
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |nCS_DMS1_Pin|nCS_DMS2_Pin|nCS_DMS3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000770:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000774:	4619      	mov	r1, r3
 8000776:	482a      	ldr	r0, [pc, #168]	; (8000820 <MX_GPIO_Init+0x2e8>)
 8000778:	f001 fc8a 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH2 PH3
                           PH4 PH5 PH6 PH7
                           PH8 PH13 PH14 PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800077c:	f24e 13ff 	movw	r3, #57855	; 0xe1ff
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000782:	2303      	movs	r3, #3
 8000784:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800078a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800078e:	4619      	mov	r1, r3
 8000790:	4826      	ldr	r0, [pc, #152]	; (800082c <MX_GPIO_Init+0x2f4>)
 8000792:	f001 fc7d 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000796:	231e      	movs	r3, #30
 8000798:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800079a:	2303      	movs	r3, #3
 800079c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007a6:	4619      	mov	r1, r3
 80007a8:	4824      	ldr	r0, [pc, #144]	; (800083c <MX_GPIO_Init+0x304>)
 80007aa:	f001 fc71 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80007ae:	f640 73e3 	movw	r3, #4067	; 0xfe3
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b4:	2303      	movs	r3, #3
 80007b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007c0:	4619      	mov	r1, r3
 80007c2:	481b      	ldr	r0, [pc, #108]	; (8000830 <MX_GPIO_Init+0x2f8>)
 80007c4:	f001 fc64 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ0 PJ1 PJ2 PJ3
                           PJ4 PJ5 PJ12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007c8:	f241 033f 	movw	r3, #4159	; 0x103f
 80007cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ce:	2303      	movs	r3, #3
 80007d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80007d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007da:	4619      	mov	r1, r3
 80007dc:	4818      	ldr	r0, [pc, #96]	; (8000840 <MX_GPIO_Init+0x308>)
 80007de:	f001 fc57 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = nCS_DMS4_Pin|nCS_DMS5_Pin;
 80007e2:	2303      	movs	r3, #3
 80007e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f6:	4619      	mov	r1, r3
 80007f8:	480a      	ldr	r0, [pc, #40]	; (8000824 <MX_GPIO_Init+0x2ec>)
 80007fa:	f001 fc49 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nCS_DMS6_Pin;
 80007fe:	2380      	movs	r3, #128	; 0x80
 8000800:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(nCS_DMS6_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000812:	4619      	mov	r1, r3
 8000814:	e016      	b.n	8000844 <MX_GPIO_Init+0x30c>
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40022000 	.word	0x40022000
 8000820:	40021400 	.word	0x40021400
 8000824:	40021800 	.word	0x40021800
 8000828:	40021000 	.word	0x40021000
 800082c:	40021c00 	.word	0x40021c00
 8000830:	40020400 	.word	0x40020400
 8000834:	40020c00 	.word	0x40020c00
 8000838:	40020800 	.word	0x40020800
 800083c:	40020000 	.word	0x40020000
 8000840:	40022400 	.word	0x40022400
 8000844:	485d      	ldr	r0, [pc, #372]	; (80009bc <MX_GPIO_Init+0x484>)
 8000846:	f001 fc23 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = FL1_HLD_Pin|FL1_WP_Pin|FL1_RES_Pin|FL1_CS2_Pin;
 800084a:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800085c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000860:	4619      	mov	r1, r3
 8000862:	4857      	ldr	r0, [pc, #348]	; (80009c0 <MX_GPIO_Init+0x488>)
 8000864:	f001 fc14 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FL1_CS1_Pin;
 8000868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FL1_CS1_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800087e:	4619      	mov	r1, r3
 8000880:	4850      	ldr	r0, [pc, #320]	; (80009c4 <MX_GPIO_Init+0x48c>)
 8000882:	f001 fc05 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = nCS_PT3_Pin|FL2_HLD_Pin|FL2_RES_Pin|FL2_CS2_Pin
 8000886:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FL2_CS1_Pin|FL2_WP_Pin|nCS_PT2_Pin|nCS_PT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800089c:	4619      	mov	r1, r3
 800089e:	484a      	ldr	r0, [pc, #296]	; (80009c8 <MX_GPIO_Init+0x490>)
 80008a0:	f001 fbf6 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MS_SEL_Pin;
 80008a4:	2304      	movs	r3, #4
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a8:	2300      	movs	r3, #0
 80008aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MS_SEL_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008b4:	4619      	mov	r1, r3
 80008b6:	4845      	ldr	r0, [pc, #276]	; (80009cc <MX_GPIO_Init+0x494>)
 80008b8:	f001 fbea 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG5 PG6 PG7
                           PG8 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80008bc:	f64f 73e8 	movw	r3, #65512	; 0xffe8
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c2:	2303      	movs	r3, #3
 80008c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ce:	4619      	mov	r1, r3
 80008d0:	483e      	ldr	r0, [pc, #248]	; (80009cc <MX_GPIO_Init+0x494>)
 80008d2:	f001 fbdd 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDRDY_DMS1_Pin;
 80008d6:	2310      	movs	r3, #16
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008da:	4b3d      	ldr	r3, [pc, #244]	; (80009d0 <MX_GPIO_Init+0x498>)
 80008dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(nDRDY_DMS1_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e6:	4619      	mov	r1, r3
 80008e8:	4838      	ldr	r0, [pc, #224]	; (80009cc <MX_GPIO_Init+0x494>)
 80008ea:	f001 fbd1 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = nDRDY_DMS2_Pin|nDRDY_DMS3_Pin|nDRDY_DMS5_Pin|nDRDY_DMS6_Pin;
 80008ee:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f4:	4b36      	ldr	r3, [pc, #216]	; (80009d0 <MX_GPIO_Init+0x498>)
 80008f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000900:	4619      	mov	r1, r3
 8000902:	4834      	ldr	r0, [pc, #208]	; (80009d4 <MX_GPIO_Init+0x49c>)
 8000904:	f001 fbc4 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDRDY_DMS4_Pin;
 8000908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(nDRDY_DMS4_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800091a:	4619      	mov	r1, r3
 800091c:	482d      	ldr	r0, [pc, #180]	; (80009d4 <MX_GPIO_Init+0x49c>)
 800091e:	f001 fbb7 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8000922:	23fb      	movs	r3, #251	; 0xfb
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000926:	2303      	movs	r3, #3
 8000928:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800092e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000932:	4619      	mov	r1, r3
 8000934:	4824      	ldr	r0, [pc, #144]	; (80009c8 <MX_GPIO_Init+0x490>)
 8000936:	f001 fbab 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = nDRDY_PT3_Pin|nDRDY_PT2_Pin|nDRDY_PT1_Pin;
 800093a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000940:	4b23      	ldr	r3, [pc, #140]	; (80009d0 <MX_GPIO_Init+0x498>)
 8000942:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800094c:	4619      	mov	r1, r3
 800094e:	4822      	ldr	r0, [pc, #136]	; (80009d8 <MX_GPIO_Init+0x4a0>)
 8000950:	f001 fb9e 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK3 PK4 PK5 PK6
                           PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000954:	23f8      	movs	r3, #248	; 0xf8
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000958:	2303      	movs	r3, #3
 800095a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000960:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000964:	4619      	mov	r1, r3
 8000966:	481d      	ldr	r0, [pc, #116]	; (80009dc <MX_GPIO_Init+0x4a4>)
 8000968:	f001 fb92 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SODS_OPT_Pin|SOE_OPT_Pin|LO_OPT_Pin;
 800096c:	23e0      	movs	r3, #224	; 0xe0
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_GPIO_Init+0x498>)
 8000972:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000978:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800097c:	4619      	mov	r1, r3
 800097e:	4818      	ldr	r0, [pc, #96]	; (80009e0 <MX_GPIO_Init+0x4a8>)
 8000980:	f001 fb86 	bl	8002090 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000984:	2200      	movs	r2, #0
 8000986:	2105      	movs	r1, #5
 8000988:	200a      	movs	r0, #10
 800098a:	f001 fb0f 	bl	8001fac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800098e:	200a      	movs	r0, #10
 8000990:	f001 fb38 	bl	8002004 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	2105      	movs	r1, #5
 8000998:	2017      	movs	r0, #23
 800099a:	f001 fb07 	bl	8001fac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800099e:	2017      	movs	r0, #23
 80009a0:	f001 fb30 	bl	8002004 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2105      	movs	r1, #5
 80009a8:	2028      	movs	r0, #40	; 0x28
 80009aa:	f001 faff 	bl	8001fac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009ae:	2028      	movs	r0, #40	; 0x28
 80009b0:	f001 fb28 	bl	8002004 <HAL_NVIC_EnableIRQ>

}
 80009b4:	bf00      	nop
 80009b6:	3740      	adds	r7, #64	; 0x40
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40021c00 	.word	0x40021c00
 80009c4:	40020400 	.word	0x40020400
 80009c8:	40020c00 	.word	0x40020c00
 80009cc:	40021800 	.word	0x40021800
 80009d0:	10110000 	.word	0x10110000
 80009d4:	40020000 	.word	0x40020000
 80009d8:	40022400 	.word	0x40022400
 80009dc:	40022800 	.word	0x40022800
 80009e0:	40022000 	.word	0x40022000

080009e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e8:	f001 f971 	bl	8001cce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ec:	f000 f82e 	bl	8000a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f0:	f7ff fda2 	bl	8000538 <MX_GPIO_Init>
  MX_SPI4_Init();
 80009f4:	f000 fdbc 	bl	8001570 <MX_SPI4_Init>
  MX_UART4_Init();
 80009f8:	f001 f812 	bl	8001a20 <MX_UART4_Init>
  //MX_UART8_Init();
  //MX_UART5_Init();
  //MX_CRC_Init();
  //MX_SPI5_Init();
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);  //clear all LEDs
 80009fc:	2200      	movs	r2, #0
 80009fe:	2120      	movs	r1, #32
 8000a00:	480f      	ldr	r0, [pc, #60]	; (8000a40 <main+0x5c>)
 8000a02:	f001 fef3 	bl	80027ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2110      	movs	r1, #16
 8000a0a:	480d      	ldr	r0, [pc, #52]	; (8000a40 <main+0x5c>)
 8000a0c:	f001 feee 	bl	80027ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2108      	movs	r1, #8
 8000a14:	480a      	ldr	r0, [pc, #40]	; (8000a40 <main+0x5c>)
 8000a16:	f001 fee9 	bl	80027ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a20:	4808      	ldr	r0, [pc, #32]	; (8000a44 <main+0x60>)
 8000a22:	f001 fee3 	bl	80027ec <HAL_GPIO_WritePin>

  if (!HAL_GPIO_ReadPin(MS_SEL_GPIO_Port, MS_SEL_Pin)) {
 8000a26:	2104      	movs	r1, #4
 8000a28:	4807      	ldr	r0, [pc, #28]	; (8000a48 <main+0x64>)
 8000a2a:	f001 febf 	bl	80027ac <HAL_GPIO_ReadPin>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d102      	bne.n	8000a3a <main+0x56>
    main_master();
 8000a34:	f000 f89e 	bl	8000b74 <main_master>
 8000a38:	e001      	b.n	8000a3e <main+0x5a>
  } else { //Slave loop
    main_slave();
 8000a3a:	f000 f8d1 	bl	8000be0 <main_slave>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <main+0x5a>
 8000a40:	40021400 	.word	0x40021400
 8000a44:	40022000 	.word	0x40022000
 8000a48:	40021800 	.word	0x40021800

08000a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b0b8      	sub	sp, #224	; 0xe0
 8000a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a52:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a56:	2234      	movs	r2, #52	; 0x34
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f006 f80e 	bl	8006a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a60:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a70:	f107 0308 	add.w	r3, r7, #8
 8000a74:	2290      	movs	r2, #144	; 0x90
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f005 ffff 	bl	8006a7c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	4b3b      	ldr	r3, [pc, #236]	; (8000b6c <SystemClock_Config+0x120>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	4a3a      	ldr	r2, [pc, #232]	; (8000b6c <SystemClock_Config+0x120>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a88:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8a:	4b38      	ldr	r3, [pc, #224]	; (8000b6c <SystemClock_Config+0x120>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a96:	4b36      	ldr	r3, [pc, #216]	; (8000b70 <SystemClock_Config+0x124>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a35      	ldr	r2, [pc, #212]	; (8000b70 <SystemClock_Config+0x124>)
 8000a9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aa0:	6013      	str	r3, [r2, #0]
 8000aa2:	4b33      	ldr	r3, [pc, #204]	; (8000b70 <SystemClock_Config+0x124>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aba:	2310      	movs	r3, #16
 8000abc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000acc:	2308      	movs	r3, #8
 8000ace:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ad2:	23c0      	movs	r3, #192	; 0xc0
 8000ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f001 ff1f 	bl	800292c <HAL_RCC_OscConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000af4:	f000 fd29 	bl	800154a <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000af8:	f001 fec8 	bl	800288c <HAL_PWREx_EnableOverDrive>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000b02:	f000 fd22 	bl	800154a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b06:	230f      	movs	r3, #15
 8000b08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000b20:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000b28:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b2c:	2106      	movs	r1, #6
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f002 fa6c 	bl	800300c <HAL_RCC_ClockConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b3a:	f000 fd06 	bl	800154a <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART5
 8000b3e:	f44f 5318 	mov.w	r3, #9728	; 0x2600
 8000b42:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART8;
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	4618      	mov	r0, r3
 8000b56:	f002 fce7 	bl	8003528 <HAL_RCCEx_PeriphCLKConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000b60:	f000 fcf3 	bl	800154a <Error_Handler>
  }
}
 8000b64:	bf00      	nop
 8000b66:	37e0      	adds	r7, #224	; 0xe0
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40007000 	.word	0x40007000

08000b74 <main_master>:

/* USER CODE BEGIN 4 */
void main_master(void) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);  //ON = MS set to Master
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2120      	movs	r1, #32
 8000b7c:	4814      	ldr	r0, [pc, #80]	; (8000bd0 <main_master+0x5c>)
 8000b7e:	f001 fe35 	bl	80027ec <HAL_GPIO_WritePin>
  //uint8_t bufferOff[3] = {0x01, 0x03, 0x05};
  //uint8_t bufferOn[3] = {0x02, 0x04, 0x06};

  adc_scan_start(3, 160, 1, 0);
 8000b82:	2300      	movs	r3, #0
 8000b84:	2201      	movs	r2, #1
 8000b86:	21a0      	movs	r1, #160	; 0xa0
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f000 f9e1 	bl	8000f50 <adc_scan_start>
  HAL_Delay(1000);
 8000b8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b92:	f001 f8f9 	bl	8001d88 <HAL_Delay>


  while (1) { //Master loop

	  while(HAL_GPIO_ReadPin(nDRDY_DMS4_GPIO_Port, nDRDY_DMS4_Pin) == GPIO_PIN_SET);
 8000b96:	bf00      	nop
 8000b98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b9c:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <main_master+0x60>)
 8000b9e:	f001 fe05 	bl	80027ac <HAL_GPIO_ReadPin>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d0f7      	beq.n	8000b98 <main_master+0x24>
	  data = adc_scan(3, 0x01);
 8000ba8:	2101      	movs	r1, #1
 8000baa:	2003      	movs	r0, #3
 8000bac:	f000 f8b2 	bl	8000d14 <adc_scan>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <main_master+0x64>)
 8000bb6:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart4, data, sizeof(&data), 5);
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <main_master+0x64>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	2204      	movs	r2, #4
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <main_master+0x68>)
 8000bc4:	f004 fed4 	bl	8005970 <HAL_UART_Transmit>

	  HAL_Delay(100);
 8000bc8:	2064      	movs	r0, #100	; 0x64
 8000bca:	f001 f8dd 	bl	8001d88 <HAL_Delay>
	  while(HAL_GPIO_ReadPin(nDRDY_DMS4_GPIO_Port, nDRDY_DMS4_Pin) == GPIO_PIN_SET);
 8000bce:	e7e2      	b.n	8000b96 <main_master+0x22>
 8000bd0:	40021400 	.word	0x40021400
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	20000028 	.word	0x20000028
 8000bdc:	20000320 	.word	0x20000320

08000be0 <main_slave>:
    HAL_UART_Transmit(&huart5, bufferOn, sizeof(bufferOn), 5);
    HAL_Delay(100);
    */
  }
}
void main_slave(void) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
  uint8_t buffer[1] = {0x00};
 8000be6:	2300      	movs	r3, #0
 8000be8:	713b      	strb	r3, [r7, #4]
  while (1) {
    HAL_UART_Receive(&huart5, buffer, sizeof(buffer), 5);
 8000bea:	1d39      	adds	r1, r7, #4
 8000bec:	2305      	movs	r3, #5
 8000bee:	2201      	movs	r2, #1
 8000bf0:	481e      	ldr	r0, [pc, #120]	; (8000c6c <main_slave+0x8c>)
 8000bf2:	f004 ff4e 	bl	8005a92 <HAL_UART_Receive>
    if (buffer[0] == 0x01) {
 8000bf6:	793b      	ldrb	r3, [r7, #4]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d105      	bne.n	8000c08 <main_slave+0x28>
      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2110      	movs	r1, #16
 8000c00:	481b      	ldr	r0, [pc, #108]	; (8000c70 <main_slave+0x90>)
 8000c02:	f001 fdf3 	bl	80027ec <HAL_GPIO_WritePin>
 8000c06:	e02d      	b.n	8000c64 <main_slave+0x84>
    } else if (buffer[0] == 0x02) {
 8000c08:	793b      	ldrb	r3, [r7, #4]
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d105      	bne.n	8000c1a <main_slave+0x3a>
      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2110      	movs	r1, #16
 8000c12:	4817      	ldr	r0, [pc, #92]	; (8000c70 <main_slave+0x90>)
 8000c14:	f001 fdea 	bl	80027ec <HAL_GPIO_WritePin>
 8000c18:	e024      	b.n	8000c64 <main_slave+0x84>
    } else if (buffer[0] == 0x03) {
 8000c1a:	793b      	ldrb	r3, [r7, #4]
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d105      	bne.n	8000c2c <main_slave+0x4c>
      HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2108      	movs	r1, #8
 8000c24:	4812      	ldr	r0, [pc, #72]	; (8000c70 <main_slave+0x90>)
 8000c26:	f001 fde1 	bl	80027ec <HAL_GPIO_WritePin>
 8000c2a:	e01b      	b.n	8000c64 <main_slave+0x84>
    } else if (buffer[0] == 0x04) {
 8000c2c:	793b      	ldrb	r3, [r7, #4]
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	d105      	bne.n	8000c3e <main_slave+0x5e>
      HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	2108      	movs	r1, #8
 8000c36:	480e      	ldr	r0, [pc, #56]	; (8000c70 <main_slave+0x90>)
 8000c38:	f001 fdd8 	bl	80027ec <HAL_GPIO_WritePin>
 8000c3c:	e012      	b.n	8000c64 <main_slave+0x84>
    }  else if (buffer[0] == 0x05) {
 8000c3e:	793b      	ldrb	r3, [r7, #4]
 8000c40:	2b05      	cmp	r3, #5
 8000c42:	d106      	bne.n	8000c52 <main_slave+0x72>
      HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c4a:	480a      	ldr	r0, [pc, #40]	; (8000c74 <main_slave+0x94>)
 8000c4c:	f001 fdce 	bl	80027ec <HAL_GPIO_WritePin>
 8000c50:	e008      	b.n	8000c64 <main_slave+0x84>
    } else if (buffer[0] == 0x06) {
 8000c52:	793b      	ldrb	r3, [r7, #4]
 8000c54:	2b06      	cmp	r3, #6
 8000c56:	d105      	bne.n	8000c64 <main_slave+0x84>
      HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <main_slave+0x94>)
 8000c60:	f001 fdc4 	bl	80027ec <HAL_GPIO_WritePin>
    }
    buffer[1] = 0x00;
 8000c64:	2300      	movs	r3, #0
 8000c66:	717b      	strb	r3, [r7, #5]
    HAL_UART_Receive(&huart5, buffer, sizeof(buffer), 5);
 8000c68:	e7bf      	b.n	8000bea <main_slave+0xa>
 8000c6a:	bf00      	nop
 8000c6c:	20000220 	.word	0x20000220
 8000c70:	40021400 	.word	0x40021400
 8000c74:	40022000 	.word	0x40022000

08000c78 <cs_enable>:
  }
}

int cs_enable(int8_t id){
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(port_from_id(id), pin_from_id(id), GPIO_PIN_RESET);
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 faee 	bl	8001268 <port_from_id>
 8000c8c:	4604      	mov	r4, r0
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 faaa 	bl	80011ec <pin_from_id>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	f001 fda4 	bl	80027ec <HAL_GPIO_WritePin>
	return 0;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd90      	pop	{r4, r7, pc}

08000cae <cs_disable>:

int cs_disable(int8_t id){
 8000cae:	b590      	push	{r4, r7, lr}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(port_from_id(id), pin_from_id(id), GPIO_PIN_SET);
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 fad3 	bl	8001268 <port_from_id>
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 fa8f 	bl	80011ec <pin_from_id>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f001 fd89 	bl	80027ec <HAL_GPIO_WritePin>
	return 0;
 8000cda:	2300      	movs	r3, #0
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd90      	pop	{r4, r7, pc}

08000ce4 <wr_spi>:

int wr_spi(int8_t id, uint8_t cmd){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	460a      	mov	r2, r1
 8000cee:	71fb      	strb	r3, [r7, #7]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Transmit(get_hspi_from_id(id), &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 faf5 	bl	80012e8 <get_hspi_from_id>
 8000cfe:	1db9      	adds	r1, r7, #6
 8000d00:	f04f 33ff 	mov.w	r3, #4294967295
 8000d04:	2201      	movs	r2, #1
 8000d06:	f003 fe23 	bl	8004950 <HAL_SPI_Transmit>
	return 0;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <adc_scan>:

uint16_t adc_scan(int8_t id, uint8_t chn){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	460a      	mov	r2, r1
 8000d1e:	71fb      	strb	r3, [r7, #7]
 8000d20:	4613      	mov	r3, r2
 8000d22:	71bb      	strb	r3, [r7, #6]
	uint16_t data=0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	81fb      	strh	r3, [r7, #14]

	  switch(chn)
 8000d28:	79bb      	ldrb	r3, [r7, #6]
 8000d2a:	2bfb      	cmp	r3, #251	; 0xfb
 8000d2c:	f000 8081 	beq.w	8000e32 <adc_scan+0x11e>
 8000d30:	2bfb      	cmp	r3, #251	; 0xfb
 8000d32:	dc0b      	bgt.n	8000d4c <adc_scan+0x38>
 8000d34:	2b23      	cmp	r3, #35	; 0x23
 8000d36:	d033      	beq.n	8000da0 <adc_scan+0x8c>
 8000d38:	2b23      	cmp	r3, #35	; 0x23
 8000d3a:	dc02      	bgt.n	8000d42 <adc_scan+0x2e>
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d012      	beq.n	8000d66 <adc_scan+0x52>
 8000d40:	e101      	b.n	8000f46 <adc_scan+0x232>
 8000d42:	2bf9      	cmp	r3, #249	; 0xf9
 8000d44:	d049      	beq.n	8000dda <adc_scan+0xc6>
 8000d46:	2bfa      	cmp	r3, #250	; 0xfa
 8000d48:	d05d      	beq.n	8000e06 <adc_scan+0xf2>
 8000d4a:	e0fc      	b.n	8000f46 <adc_scan+0x232>
 8000d4c:	2bfd      	cmp	r3, #253	; 0xfd
 8000d4e:	f000 80aa 	beq.w	8000ea6 <adc_scan+0x192>
 8000d52:	2bfd      	cmp	r3, #253	; 0xfd
 8000d54:	f2c0 8083 	blt.w	8000e5e <adc_scan+0x14a>
 8000d58:	2bfe      	cmp	r3, #254	; 0xfe
 8000d5a:	f000 80c8 	beq.w	8000eee <adc_scan+0x1da>
 8000d5e:	2bff      	cmp	r3, #255	; 0xff
 8000d60:	f000 80db 	beq.w	8000f1a <adc_scan+0x206>
 8000d64:	e0ef      	b.n	8000f46 <adc_scan+0x232>
	  {
	    case 0x01:
	      wr_reg(id, REG_IDAC1, IDAC1_I1DIR0 | IDAC1_I2DIR1);
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	210b      	movs	r1, #11
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 fb48 	bl	8001404 <wr_reg>
	      wr_reg(id, REG_MUX0, MUX0_SP0 | MUX0_SN1);
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 fb41 	bl	8001404 <wr_reg>
	      data = rd_data(id);
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f9dc 	bl	8001144 <rd_data>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	81fb      	strh	r3, [r7, #14]
	      wr_reg(id, REG_IDAC1, IDAC1_I1DIROFF | IDAC1_I2DIROFF);
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	22ff      	movs	r2, #255	; 0xff
 8000d96:	210b      	movs	r1, #11
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 fb33 	bl	8001404 <wr_reg>
	      break;
 8000d9e:	e0d2      	b.n	8000f46 <adc_scan+0x232>
	    case 0x23:
	      wr_reg(id, REG_IDAC1, IDAC1_I1DIR2 | IDAC1_I2DIR3);
 8000da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da4:	2223      	movs	r2, #35	; 0x23
 8000da6:	210b      	movs	r1, #11
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 fb2b 	bl	8001404 <wr_reg>
	      wr_reg(id, REG_MUX0, MUX0_SP2 | MUX0_SN3);
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	2213      	movs	r2, #19
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 fb24 	bl	8001404 <wr_reg>
	      data = rd_data(id);
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 f9bf 	bl	8001144 <rd_data>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	81fb      	strh	r3, [r7, #14]
	      wr_reg(id, REG_IDAC1, IDAC1_I1DIROFF | IDAC1_I2DIROFF);
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	22ff      	movs	r2, #255	; 0xff
 8000dd0:	210b      	movs	r1, #11
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 fb16 	bl	8001404 <wr_reg>
	      break;
 8000dd8:	e0b5      	b.n	8000f46 <adc_scan+0x232>

	    case 0xF9: //offset measurement
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REFOB | MUX1_CALOFFSET);
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	2231      	movs	r2, #49	; 0x31
 8000de0:	2102      	movs	r1, #2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 fb0e 	bl	8001404 <wr_reg>
	      data = rd_data(id);
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 f9a9 	bl	8001144 <rd_data>
 8000df2:	4603      	mov	r3, r0
 8000df4:	81fb      	strh	r3, [r7, #14]
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REF0 | MUX1_CALNORMAL);
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	2220      	movs	r2, #32
 8000dfc:	2102      	movs	r1, #2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 fb00 	bl	8001404 <wr_reg>
	      break;
 8000e04:	e09f      	b.n	8000f46 <adc_scan+0x232>
	    case 0xFA: //gain measurement
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REFOB | MUX1_CALGAIN);
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	2232      	movs	r2, #50	; 0x32
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 faf8 	bl	8001404 <wr_reg>
	      data = rd_data(id);
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f993 	bl	8001144 <rd_data>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	81fb      	strh	r3, [r7, #14]
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REF0 | MUX1_CALNORMAL);
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	2220      	movs	r2, #32
 8000e28:	2102      	movs	r1, #2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 faea 	bl	8001404 <wr_reg>
	      break;
 8000e30:	e089      	b.n	8000f46 <adc_scan+0x232>
	    case 0xFB: //temperature measurement
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REFOB | MUX1_CALTEMP);
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	2233      	movs	r2, #51	; 0x33
 8000e38:	2102      	movs	r1, #2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 fae2 	bl	8001404 <wr_reg>
	      data = rd_data(id);
 8000e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 f97d 	bl	8001144 <rd_data>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	81fb      	strh	r3, [r7, #14]
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REF0 | MUX1_CALNORMAL);
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	2220      	movs	r2, #32
 8000e54:	2102      	movs	r1, #2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 fad4 	bl	8001404 <wr_reg>
	      break;
 8000e5c:	e073      	b.n	8000f46 <adc_scan+0x232>
	    case 0xFC: //REF1 measurement
	      wr_reg(id, REG_IDAC1, IDAC1_I1DIR0 | IDAC1_I2DIR1);
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	2201      	movs	r2, #1
 8000e64:	210b      	movs	r1, #11
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 facc 	bl	8001404 <wr_reg>
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REFOB | MUX1_CALREF1);
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	2234      	movs	r2, #52	; 0x34
 8000e72:	2102      	movs	r1, #2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 fac5 	bl	8001404 <wr_reg>
	      data = rd_data(id);
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f960 	bl	8001144 <rd_data>
 8000e84:	4603      	mov	r3, r0
 8000e86:	81fb      	strh	r3, [r7, #14]
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REF0 | MUX1_CALNORMAL);
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	2220      	movs	r2, #32
 8000e8e:	2102      	movs	r1, #2
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 fab7 	bl	8001404 <wr_reg>
	      wr_reg(id, REG_IDAC1, IDAC1_I1DIROFF | IDAC1_I2DIROFF);
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	22ff      	movs	r2, #255	; 0xff
 8000e9c:	210b      	movs	r1, #11
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 fab0 	bl	8001404 <wr_reg>
	      break;
 8000ea4:	e04f      	b.n	8000f46 <adc_scan+0x232>
	    case 0xFD: //REF0 measurement
	      wr_reg(id, REG_IDAC1, IDAC1_I1DIR0 | IDAC1_I2DIR1);
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	210b      	movs	r1, #11
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 faa8 	bl	8001404 <wr_reg>
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REFOB | MUX1_CALREF0);
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	2235      	movs	r2, #53	; 0x35
 8000eba:	2102      	movs	r1, #2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 faa1 	bl	8001404 <wr_reg>
	      data = rd_data(id);
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f93c 	bl	8001144 <rd_data>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	81fb      	strh	r3, [r7, #14]
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REF0 | MUX1_CALNORMAL);
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	2220      	movs	r2, #32
 8000ed6:	2102      	movs	r1, #2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 fa93 	bl	8001404 <wr_reg>
	      wr_reg(id, REG_IDAC1, IDAC1_I1DIROFF | IDAC1_I2DIROFF);
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	22ff      	movs	r2, #255	; 0xff
 8000ee4:	210b      	movs	r1, #11
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fa8c 	bl	8001404 <wr_reg>
	      break;
 8000eec:	e02b      	b.n	8000f46 <adc_scan+0x232>
	    case 0xFE: //AVDD measurement
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REFOB | MUX1_CALAVDD);
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	2236      	movs	r2, #54	; 0x36
 8000ef4:	2102      	movs	r1, #2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 fa84 	bl	8001404 <wr_reg>
	      data = rd_data(id);
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 f91f 	bl	8001144 <rd_data>
 8000f06:	4603      	mov	r3, r0
 8000f08:	81fb      	strh	r3, [r7, #14]
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REF0 | MUX1_CALNORMAL);
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	2220      	movs	r2, #32
 8000f10:	2102      	movs	r1, #2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 fa76 	bl	8001404 <wr_reg>
	      break;
 8000f18:	e015      	b.n	8000f46 <adc_scan+0x232>
	    case 0xFF: //DVDD measurement
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REFOB | MUX1_CALDVDD);
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	2237      	movs	r2, #55	; 0x37
 8000f20:	2102      	movs	r1, #2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 fa6e 	bl	8001404 <wr_reg>
	      data = rd_data(id);
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 f909 	bl	8001144 <rd_data>
 8000f32:	4603      	mov	r3, r0
 8000f34:	81fb      	strh	r3, [r7, #14]
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REF0 | MUX1_CALNORMAL);
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	2220      	movs	r2, #32
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 fa60 	bl	8001404 <wr_reg>
	      break;
 8000f44:	bf00      	nop
	  }

	  return data;
 8000f46:	89fb      	ldrh	r3, [r7, #14]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <adc_scan_start>:

int16_t adc_scan_start(int8_t id, uint_least16_t drate, uint_least8_t gain, uint_least16_t current){
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4604      	mov	r4, r0
 8000f58:	4608      	mov	r0, r1
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4623      	mov	r3, r4
 8000f60:	71fb      	strb	r3, [r7, #7]
 8000f62:	4603      	mov	r3, r0
 8000f64:	80bb      	strh	r3, [r7, #4]
 8000f66:	460b      	mov	r3, r1
 8000f68:	71bb      	strb	r3, [r7, #6]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	807b      	strh	r3, [r7, #2]
	int16_t r;
	switch(drate)
 8000f6e:	88bb      	ldrh	r3, [r7, #4]
 8000f70:	2ba0      	cmp	r3, #160	; 0xa0
 8000f72:	d02d      	beq.n	8000fd0 <adc_scan_start+0x80>
 8000f74:	2ba0      	cmp	r3, #160	; 0xa0
 8000f76:	dc0b      	bgt.n	8000f90 <adc_scan_start+0x40>
 8000f78:	2b0a      	cmp	r3, #10
 8000f7a:	d01d      	beq.n	8000fb8 <adc_scan_start+0x68>
 8000f7c:	2b0a      	cmp	r3, #10
 8000f7e:	dc02      	bgt.n	8000f86 <adc_scan_start+0x36>
 8000f80:	2b05      	cmp	r3, #5
 8000f82:	d016      	beq.n	8000fb2 <adc_scan_start+0x62>
 8000f84:	e01e      	b.n	8000fc4 <adc_scan_start+0x74>
 8000f86:	2b14      	cmp	r3, #20
 8000f88:	d019      	beq.n	8000fbe <adc_scan_start+0x6e>
 8000f8a:	2b50      	cmp	r3, #80	; 0x50
 8000f8c:	d01d      	beq.n	8000fca <adc_scan_start+0x7a>
 8000f8e:	e019      	b.n	8000fc4 <adc_scan_start+0x74>
 8000f90:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000f94:	d022      	beq.n	8000fdc <adc_scan_start+0x8c>
 8000f96:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000f9a:	dc03      	bgt.n	8000fa4 <adc_scan_start+0x54>
 8000f9c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000fa0:	d019      	beq.n	8000fd6 <adc_scan_start+0x86>
 8000fa2:	e00f      	b.n	8000fc4 <adc_scan_start+0x74>
 8000fa4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fa8:	d01b      	beq.n	8000fe2 <adc_scan_start+0x92>
 8000faa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000fae:	d01b      	beq.n	8000fe8 <adc_scan_start+0x98>
 8000fb0:	e008      	b.n	8000fc4 <adc_scan_start+0x74>
	  {
	    case    5: drate = SYS0_DOR5;    break;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	80bb      	strh	r3, [r7, #4]
 8000fb6:	e01a      	b.n	8000fee <adc_scan_start+0x9e>
	    case   10: drate = SYS0_DOR10;   break;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	80bb      	strh	r3, [r7, #4]
 8000fbc:	e017      	b.n	8000fee <adc_scan_start+0x9e>
	    case   20: drate = SYS0_DOR20;   break;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	80bb      	strh	r3, [r7, #4]
 8000fc2:	e014      	b.n	8000fee <adc_scan_start+0x9e>
	    default:
	    case   40: drate = SYS0_DOR40;   break;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	80bb      	strh	r3, [r7, #4]
 8000fc8:	e011      	b.n	8000fee <adc_scan_start+0x9e>
	    case   80: drate = SYS0_DOR80;   break;
 8000fca:	2304      	movs	r3, #4
 8000fcc:	80bb      	strh	r3, [r7, #4]
 8000fce:	e00e      	b.n	8000fee <adc_scan_start+0x9e>
	    case  160: drate = SYS0_DOR160;  break;
 8000fd0:	2305      	movs	r3, #5
 8000fd2:	80bb      	strh	r3, [r7, #4]
 8000fd4:	e00b      	b.n	8000fee <adc_scan_start+0x9e>
	    case  320: drate = SYS0_DOR320;  break;
 8000fd6:	2306      	movs	r3, #6
 8000fd8:	80bb      	strh	r3, [r7, #4]
 8000fda:	e008      	b.n	8000fee <adc_scan_start+0x9e>
	    case  640: drate = SYS0_DOR640;  break;
 8000fdc:	2307      	movs	r3, #7
 8000fde:	80bb      	strh	r3, [r7, #4]
 8000fe0:	e005      	b.n	8000fee <adc_scan_start+0x9e>
	    case 1000: drate = SYS0_DOR1000; break;
 8000fe2:	2308      	movs	r3, #8
 8000fe4:	80bb      	strh	r3, [r7, #4]
 8000fe6:	e002      	b.n	8000fee <adc_scan_start+0x9e>
	    case 2000: drate = SYS0_DOR2000; break;
 8000fe8:	2309      	movs	r3, #9
 8000fea:	80bb      	strh	r3, [r7, #4]
 8000fec:	bf00      	nop
	  }

	  switch(gain)
 8000fee:	79bb      	ldrb	r3, [r7, #6]
 8000ff0:	2b10      	cmp	r3, #16
 8000ff2:	d01a      	beq.n	800102a <adc_scan_start+0xda>
 8000ff4:	2b10      	cmp	r3, #16
 8000ff6:	dc06      	bgt.n	8001006 <adc_scan_start+0xb6>
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	d010      	beq.n	800101e <adc_scan_start+0xce>
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d011      	beq.n	8001024 <adc_scan_start+0xd4>
 8001000:	2b02      	cmp	r3, #2
 8001002:	d009      	beq.n	8001018 <adc_scan_start+0xc8>
 8001004:	e005      	b.n	8001012 <adc_scan_start+0xc2>
 8001006:	2b40      	cmp	r3, #64	; 0x40
 8001008:	d015      	beq.n	8001036 <adc_scan_start+0xe6>
 800100a:	2b80      	cmp	r3, #128	; 0x80
 800100c:	d016      	beq.n	800103c <adc_scan_start+0xec>
 800100e:	2b20      	cmp	r3, #32
 8001010:	d00e      	beq.n	8001030 <adc_scan_start+0xe0>
	  {
	    default:
	    case   1: gain = SYS0_PGA1;   break;
 8001012:	2300      	movs	r3, #0
 8001014:	71bb      	strb	r3, [r7, #6]
 8001016:	e014      	b.n	8001042 <adc_scan_start+0xf2>
	    case   2: gain = SYS0_PGA2;   break;
 8001018:	2310      	movs	r3, #16
 800101a:	71bb      	strb	r3, [r7, #6]
 800101c:	e011      	b.n	8001042 <adc_scan_start+0xf2>
	    case   4: gain = SYS0_PGA4;   break;
 800101e:	2320      	movs	r3, #32
 8001020:	71bb      	strb	r3, [r7, #6]
 8001022:	e00e      	b.n	8001042 <adc_scan_start+0xf2>
	    case   8: gain = SYS0_PGA8;   break;
 8001024:	2330      	movs	r3, #48	; 0x30
 8001026:	71bb      	strb	r3, [r7, #6]
 8001028:	e00b      	b.n	8001042 <adc_scan_start+0xf2>
	    case  16: gain = SYS0_PGA16;  break;
 800102a:	2340      	movs	r3, #64	; 0x40
 800102c:	71bb      	strb	r3, [r7, #6]
 800102e:	e008      	b.n	8001042 <adc_scan_start+0xf2>
	    case  32: gain = SYS0_PGA32;  break;
 8001030:	2350      	movs	r3, #80	; 0x50
 8001032:	71bb      	strb	r3, [r7, #6]
 8001034:	e005      	b.n	8001042 <adc_scan_start+0xf2>
	    case  64: gain = SYS0_PGA64;  break;
 8001036:	2360      	movs	r3, #96	; 0x60
 8001038:	71bb      	strb	r3, [r7, #6]
 800103a:	e002      	b.n	8001042 <adc_scan_start+0xf2>
	    case 128: gain = SYS0_PGA128; break;
 800103c:	2370      	movs	r3, #112	; 0x70
 800103e:	71bb      	strb	r3, [r7, #6]
 8001040:	bf00      	nop
	  }

	  switch(current)
 8001042:	887b      	ldrh	r3, [r7, #2]
 8001044:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001048:	d020      	beq.n	800108c <adc_scan_start+0x13c>
 800104a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800104e:	dc06      	bgt.n	800105e <adc_scan_start+0x10e>
 8001050:	2b64      	cmp	r3, #100	; 0x64
 8001052:	d015      	beq.n	8001080 <adc_scan_start+0x130>
 8001054:	2bfa      	cmp	r3, #250	; 0xfa
 8001056:	d016      	beq.n	8001086 <adc_scan_start+0x136>
 8001058:	2b32      	cmp	r3, #50	; 0x32
 800105a:	d00e      	beq.n	800107a <adc_scan_start+0x12a>
 800105c:	e00a      	b.n	8001074 <adc_scan_start+0x124>
 800105e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001062:	d019      	beq.n	8001098 <adc_scan_start+0x148>
 8001064:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001068:	4293      	cmp	r3, r2
 800106a:	d018      	beq.n	800109e <adc_scan_start+0x14e>
 800106c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001070:	4293      	cmp	r3, r2
 8001072:	d00e      	beq.n	8001092 <adc_scan_start+0x142>
	  {
	    default:
	    case    0: current = IDAC0_MAGOFF;    break;
 8001074:	2300      	movs	r3, #0
 8001076:	807b      	strh	r3, [r7, #2]
 8001078:	e014      	b.n	80010a4 <adc_scan_start+0x154>
	    case   50: current = IDAC0_MAG50UA;   break;
 800107a:	2301      	movs	r3, #1
 800107c:	807b      	strh	r3, [r7, #2]
 800107e:	e011      	b.n	80010a4 <adc_scan_start+0x154>
	    case  100: current = IDAC0_MAG100UA;  break;
 8001080:	2302      	movs	r3, #2
 8001082:	807b      	strh	r3, [r7, #2]
 8001084:	e00e      	b.n	80010a4 <adc_scan_start+0x154>
	    case  250: current = IDAC0_MAG250UA;  break;
 8001086:	2303      	movs	r3, #3
 8001088:	807b      	strh	r3, [r7, #2]
 800108a:	e00b      	b.n	80010a4 <adc_scan_start+0x154>
	    case  500: current = IDAC0_MAG500UA;  break;
 800108c:	2304      	movs	r3, #4
 800108e:	807b      	strh	r3, [r7, #2]
 8001090:	e008      	b.n	80010a4 <adc_scan_start+0x154>
	    case  750: current = IDAC0_MAG750UA;  break;
 8001092:	2305      	movs	r3, #5
 8001094:	807b      	strh	r3, [r7, #2]
 8001096:	e005      	b.n	80010a4 <adc_scan_start+0x154>
	    case 1000: current = IDAC0_MAG1000UA; break;
 8001098:	2306      	movs	r3, #6
 800109a:	807b      	strh	r3, [r7, #2]
 800109c:	e002      	b.n	80010a4 <adc_scan_start+0x154>
	    case 1500: current = IDAC0_MAG1500UA; break;
 800109e:	2307      	movs	r3, #7
 80010a0:	807b      	strh	r3, [r7, #2]
 80010a2:	bf00      	nop
	  }

	  wr_cmd(id, CMD_RESET);
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	2106      	movs	r1, #6
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f958 	bl	8001360 <wr_cmd>
	  wr_cmd(id, CMD_SELFOCAL);
 80010b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b4:	2162      	movs	r1, #98	; 0x62
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f952 	bl	8001360 <wr_cmd>
	  r = (rd_reg(id, REG_IDAC0)&0xF0)>>4; //read revision
 80010bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c0:	210a      	movs	r1, #10
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f9f3 	bl	80014ae <rd_reg>
 80010c8:	4603      	mov	r3, r0
 80010ca:	111b      	asrs	r3, r3, #4
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	81fb      	strh	r3, [r7, #14]
	  wr_reg(id, REG_MUX0, MUX0_BCSOFF | MUX0_SP0 | MUX0_SN1);
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2201      	movs	r2, #1
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 f991 	bl	8001404 <wr_reg>
	  wr_reg(id, REG_VBIAS, VBIAS_OFF);
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	2200      	movs	r2, #0
 80010e8:	2101      	movs	r1, #1
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f98a 	bl	8001404 <wr_reg>
	  wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REF0 | MUX1_CALNORMAL);
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	2220      	movs	r2, #32
 80010f6:	2102      	movs	r1, #2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 f983 	bl	8001404 <wr_reg>
	  wr_reg(id, REG_SYS0, gain | drate);
 80010fe:	88bb      	ldrh	r3, [r7, #4]
 8001100:	b2da      	uxtb	r2, r3
 8001102:	79bb      	ldrb	r3, [r7, #6]
 8001104:	4313      	orrs	r3, r2
 8001106:	b2da      	uxtb	r2, r3
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	2103      	movs	r1, #3
 800110e:	4618      	mov	r0, r3
 8001110:	f000 f978 	bl	8001404 <wr_reg>
	  wr_reg(id, REG_IDAC0, IDAC0_DOUTDRDY | current);
 8001114:	887b      	ldrh	r3, [r7, #2]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	b2da      	uxtb	r2, r3
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	210a      	movs	r1, #10
 8001124:	4618      	mov	r0, r3
 8001126:	f000 f96d 	bl	8001404 <wr_reg>
	  wr_reg(id, REG_IDAC1, IDAC1_I1DIROFF | IDAC1_I2DIROFF);
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	22ff      	movs	r2, #255	; 0xff
 8001130:	210b      	movs	r1, #11
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f966 	bl	8001404 <wr_reg>

	  return r;
 8001138:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	bd90      	pop	{r4, r7, pc}

08001144 <rd_data>:

uint16_t rd_data(int8_t id){
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
	uint8_t d1, d2;
	wr_cmd(id, CMD_SYNC);
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	2104      	movs	r1, #4
 8001154:	4618      	mov	r0, r3
 8001156:	f000 f903 	bl	8001360 <wr_cmd>
	cs_enable(id);
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fd8a 	bl	8000c78 <cs_enable>
	HAL_Delay(1);
 8001164:	2001      	movs	r0, #1
 8001166:	f000 fe0f 	bl	8001d88 <HAL_Delay>
	HAL_SPI_Receive(get_hspi_from_id(id), &d1, sizeof(d1), HAL_MAX_DELAY);
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	4618      	mov	r0, r3
 8001170:	f000 f8ba 	bl	80012e8 <get_hspi_from_id>
 8001174:	f107 010f 	add.w	r1, r7, #15
 8001178:	f04f 33ff 	mov.w	r3, #4294967295
 800117c:	2201      	movs	r2, #1
 800117e:	f003 fd5d 	bl	8004c3c <HAL_SPI_Receive>
	//HAL_SPI_Receive(get_hspi_from_id(id), &d2, sizeof(d1), HAL_MAX_DELAY);
	HAL_Delay(1);
 8001182:	2001      	movs	r0, #1
 8001184:	f000 fe00 	bl	8001d88 <HAL_Delay>
	cs_disable(id);
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fd8e 	bl	8000cae <cs_disable>
	return d1;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	b29b      	uxth	r3, r3
	//int16_t out = (d1+d2)/2UL;
	//return out;
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <rd_spi>:

int rd_spi(int8_t id){
 800119e:	b580      	push	{r7, lr}
 80011a0:	b084      	sub	sp, #16
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
	uint8_t d1;
	cs_enable(id);
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fd63 	bl	8000c78 <cs_enable>
	HAL_Delay(1);
 80011b2:	2001      	movs	r0, #1
 80011b4:	f000 fde8 	bl	8001d88 <HAL_Delay>
	HAL_SPI_Receive(get_hspi_from_id(id), &d1, sizeof(d1), HAL_MAX_DELAY);
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 f893 	bl	80012e8 <get_hspi_from_id>
 80011c2:	f107 010f 	add.w	r1, r7, #15
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ca:	2201      	movs	r2, #1
 80011cc:	f003 fd36 	bl	8004c3c <HAL_SPI_Receive>
	HAL_Delay(1);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f000 fdd9 	bl	8001d88 <HAL_Delay>
	cs_disable(id);
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fd67 	bl	8000cae <cs_disable>
	return d1;
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <pin_from_id>:

uint16_t pin_from_id(int8_t id){
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
	switch(id){
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	2b08      	cmp	r3, #8
 80011fc:	d82c      	bhi.n	8001258 <pin_from_id+0x6c>
 80011fe:	a201      	add	r2, pc, #4	; (adr r2, 8001204 <pin_from_id+0x18>)
 8001200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001204:	08001229 	.word	0x08001229
 8001208:	0800122f 	.word	0x0800122f
 800120c:	08001235 	.word	0x08001235
 8001210:	0800123b 	.word	0x0800123b
 8001214:	0800123f 	.word	0x0800123f
 8001218:	08001243 	.word	0x08001243
 800121c:	08001247 	.word	0x08001247
 8001220:	0800124d 	.word	0x0800124d
 8001224:	08001253 	.word	0x08001253
			case 0: //DMS 1
				return nCS_DMS1_Pin;
 8001228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800122c:	e016      	b.n	800125c <pin_from_id+0x70>
			case 1: //DMS 2
				return nCS_DMS2_Pin;
 800122e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001232:	e013      	b.n	800125c <pin_from_id+0x70>
			case 2: //DMS 3
				return nCS_DMS3_Pin;
 8001234:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001238:	e010      	b.n	800125c <pin_from_id+0x70>
			case 3: //DMS 4
				return nCS_DMS4_Pin;
 800123a:	2301      	movs	r3, #1
 800123c:	e00e      	b.n	800125c <pin_from_id+0x70>
			case 4: //DMS 5
				return nCS_DMS5_Pin;
 800123e:	2302      	movs	r3, #2
 8001240:	e00c      	b.n	800125c <pin_from_id+0x70>
			case 5: //DMS 6
				return nCS_DMS6_Pin;
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	e00a      	b.n	800125c <pin_from_id+0x70>
			case 6: //PT 1
				return nCS_PT1_Pin;
 8001246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800124a:	e007      	b.n	800125c <pin_from_id+0x70>
			case 7: //PT 2
				return nCS_PT2_Pin;
 800124c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001250:	e004      	b.n	800125c <pin_from_id+0x70>
			case 8: //PT 3
				return nCS_PT3_Pin;
 8001252:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001256:	e001      	b.n	800125c <pin_from_id+0x70>
			default: //DMS 1
				return nCS_DMS1_Pin;
 8001258:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		}
}
 800125c:	4618      	mov	r0, r3
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <port_from_id>:

GPIO_TypeDef* port_from_id(int8_t id){
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
	switch(id){
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	2b08      	cmp	r3, #8
 8001278:	d826      	bhi.n	80012c8 <port_from_id+0x60>
 800127a:	a201      	add	r2, pc, #4	; (adr r2, 8001280 <port_from_id+0x18>)
 800127c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001280:	080012a5 	.word	0x080012a5
 8001284:	080012a9 	.word	0x080012a9
 8001288:	080012ad 	.word	0x080012ad
 800128c:	080012b1 	.word	0x080012b1
 8001290:	080012b5 	.word	0x080012b5
 8001294:	080012b9 	.word	0x080012b9
 8001298:	080012bd 	.word	0x080012bd
 800129c:	080012c1 	.word	0x080012c1
 80012a0:	080012c5 	.word	0x080012c5
		case 0: //DMS 1
			return nCS_DMS1_GPIO_Port;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <port_from_id+0x70>)
 80012a6:	e010      	b.n	80012ca <port_from_id+0x62>
		case 1: //DMS 2
			return nCS_DMS2_GPIO_Port;
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <port_from_id+0x70>)
 80012aa:	e00e      	b.n	80012ca <port_from_id+0x62>
		case 2: //DMS 3
			return nCS_DMS3_GPIO_Port;
 80012ac:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <port_from_id+0x70>)
 80012ae:	e00c      	b.n	80012ca <port_from_id+0x62>
		case 3: //DMS 4
			return nCS_DMS4_GPIO_Port;
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <port_from_id+0x74>)
 80012b2:	e00a      	b.n	80012ca <port_from_id+0x62>
		case 4: //DMS 5
			return nCS_DMS5_GPIO_Port;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <port_from_id+0x74>)
 80012b6:	e008      	b.n	80012ca <port_from_id+0x62>
		case 5: //DMS 6
			return nCS_DMS6_GPIO_Port;
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <port_from_id+0x78>)
 80012ba:	e006      	b.n	80012ca <port_from_id+0x62>
		case 6: //PT 1
			return nCS_PT1_GPIO_Port;
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <port_from_id+0x7c>)
 80012be:	e004      	b.n	80012ca <port_from_id+0x62>
		case 7: //PT 2
			return nCS_PT2_GPIO_Port;
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <port_from_id+0x7c>)
 80012c2:	e002      	b.n	80012ca <port_from_id+0x62>
		case 8: //PT 3
			return nCS_PT3_GPIO_Port;
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <port_from_id+0x7c>)
 80012c6:	e000      	b.n	80012ca <port_from_id+0x62>
		default: //DMS 1
			return nCS_DMS1_GPIO_Port;
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <port_from_id+0x70>)
	}
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40021400 	.word	0x40021400
 80012dc:	40021800 	.word	0x40021800
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40020c00 	.word	0x40020c00

080012e8 <get_hspi_from_id>:

SPI_HandleTypeDef *get_hspi_from_id(int8_t id){
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
	switch(id){
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d826      	bhi.n	8001348 <get_hspi_from_id+0x60>
 80012fa:	a201      	add	r2, pc, #4	; (adr r2, 8001300 <get_hspi_from_id+0x18>)
 80012fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001300:	08001325 	.word	0x08001325
 8001304:	08001329 	.word	0x08001329
 8001308:	0800132d 	.word	0x0800132d
 800130c:	08001331 	.word	0x08001331
 8001310:	08001335 	.word	0x08001335
 8001314:	08001339 	.word	0x08001339
 8001318:	0800133d 	.word	0x0800133d
 800131c:	08001341 	.word	0x08001341
 8001320:	08001345 	.word	0x08001345
		case 0: //DMS 1
			return &hspi4;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <get_hspi_from_id+0x70>)
 8001326:	e010      	b.n	800134a <get_hspi_from_id+0x62>
		case 1: //DMS 2
			return &hspi4;
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <get_hspi_from_id+0x70>)
 800132a:	e00e      	b.n	800134a <get_hspi_from_id+0x62>
		case 2: //DMS 3
			return &hspi4;
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <get_hspi_from_id+0x70>)
 800132e:	e00c      	b.n	800134a <get_hspi_from_id+0x62>
		case 3: //DMS 4
			return &hspi4;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <get_hspi_from_id+0x70>)
 8001332:	e00a      	b.n	800134a <get_hspi_from_id+0x62>
		case 4: //DMS 5
			return &hspi4;
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <get_hspi_from_id+0x70>)
 8001336:	e008      	b.n	800134a <get_hspi_from_id+0x62>
		case 5: //DMS 6
			return &hspi4;
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <get_hspi_from_id+0x70>)
 800133a:	e006      	b.n	800134a <get_hspi_from_id+0x62>
		case 6: //PT 1
			return &hspi3;
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <get_hspi_from_id+0x74>)
 800133e:	e004      	b.n	800134a <get_hspi_from_id+0x62>
		case 7: //PT 2
			return &hspi3;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <get_hspi_from_id+0x74>)
 8001342:	e002      	b.n	800134a <get_hspi_from_id+0x62>
		case 8: //PT 3
			return &hspi3;
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <get_hspi_from_id+0x74>)
 8001346:	e000      	b.n	800134a <get_hspi_from_id+0x62>
		default: //DMS 1
			return &hspi4;
 8001348:	4b03      	ldr	r3, [pc, #12]	; (8001358 <get_hspi_from_id+0x70>)
	}
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	200001bc 	.word	0x200001bc
 800135c:	20000158 	.word	0x20000158

08001360 <wr_cmd>:



int wr_cmd(int8_t id, uint8_t cmd){
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	460a      	mov	r2, r1
 800136a:	71fb      	strb	r3, [r7, #7]
 800136c:	4613      	mov	r3, r2
 800136e:	71bb      	strb	r3, [r7, #6]
	int8_t status = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]
	status+= cs_enable(id);
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fc7d 	bl	8000c78 <cs_enable>
 800137e:	4603      	mov	r3, r0
 8001380:	b2da      	uxtb	r2, r3
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	4413      	add	r3, r2
 8001386:	b2db      	uxtb	r3, r3
 8001388:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1);
 800138a:	2001      	movs	r0, #1
 800138c:	f000 fcfc 	bl	8001d88 <HAL_Delay>
	status+= wr_spi(id, cmd);
 8001390:	79ba      	ldrb	r2, [r7, #6]
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fca3 	bl	8000ce4 <wr_spi>
 800139e:	4603      	mov	r3, r0
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	4413      	add	r3, r2
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	73fb      	strb	r3, [r7, #15]
	if(cmd == CMD_SYNC)
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d10c      	bne.n	80013ca <wr_cmd+0x6a>
	{
		status+= wr_spi(id, cmd);
 80013b0:	79ba      	ldrb	r2, [r7, #6]
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fc93 	bl	8000ce4 <wr_spi>
 80013be:	4603      	mov	r3, r0
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	4413      	add	r3, r2
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	73fb      	strb	r3, [r7, #15]
    }
	status+= cs_disable(id);
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fc6d 	bl	8000cae <cs_disable>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	4413      	add	r3, r2
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	73fb      	strb	r3, [r7, #15]
	if(cmd == CMD_RESET)
 80013e0:	79bb      	ldrb	r3, [r7, #6]
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d103      	bne.n	80013ee <wr_cmd+0x8e>
	{
		HAL_Delay(1); //1ms
 80013e6:	2001      	movs	r0, #1
 80013e8:	f000 fcce 	bl	8001d88 <HAL_Delay>
 80013ec:	e005      	b.n	80013fa <wr_cmd+0x9a>
	}
	else if(cmd == CMD_SELFOCAL)
 80013ee:	79bb      	ldrb	r3, [r7, #6]
 80013f0:	2b62      	cmp	r3, #98	; 0x62
 80013f2:	d102      	bne.n	80013fa <wr_cmd+0x9a>
	{
		HAL_Delay(10); //10ms
 80013f4:	200a      	movs	r0, #10
 80013f6:	f000 fcc7 	bl	8001d88 <HAL_Delay>
	}
	return 0;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <wr_reg>:

int wr_reg(int8_t id, uint8_t reg, uint8_t data){
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
 800140e:	460b      	mov	r3, r1
 8001410:	71bb      	strb	r3, [r7, #6]
 8001412:	4613      	mov	r3, r2
 8001414:	717b      	strb	r3, [r7, #5]
	int8_t status = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	73fb      	strb	r3, [r7, #15]
	status += cs_enable(id);
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fc2a 	bl	8000c78 <cs_enable>
 8001424:	4603      	mov	r3, r0
 8001426:	b2da      	uxtb	r2, r3
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	4413      	add	r3, r2
 800142c:	b2db      	uxtb	r3, r3
 800142e:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1);
 8001430:	2001      	movs	r0, #1
 8001432:	f000 fca9 	bl	8001d88 <HAL_Delay>
	status += wr_spi(id, CMD_WREG | reg);
 8001436:	79bb      	ldrb	r3, [r7, #6]
 8001438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800143c:	b2da      	uxtb	r2, r3
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fc4d 	bl	8000ce4 <wr_spi>
 800144a:	4603      	mov	r3, r0
 800144c:	b2da      	uxtb	r2, r3
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	4413      	add	r3, r2
 8001452:	b2db      	uxtb	r3, r3
 8001454:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, 0);
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fc41 	bl	8000ce4 <wr_spi>
 8001462:	4603      	mov	r3, r0
 8001464:	b2da      	uxtb	r2, r3
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	4413      	add	r3, r2
 800146a:	b2db      	uxtb	r3, r3
 800146c:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, data);
 800146e:	797a      	ldrb	r2, [r7, #5]
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	4611      	mov	r1, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fc34 	bl	8000ce4 <wr_spi>
 800147c:	4603      	mov	r3, r0
 800147e:	b2da      	uxtb	r2, r3
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	4413      	add	r3, r2
 8001484:	b2db      	uxtb	r3, r3
 8001486:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1);
 8001488:	2001      	movs	r0, #1
 800148a:	f000 fc7d 	bl	8001d88 <HAL_Delay>
	status += cs_disable(id);
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fc0b 	bl	8000cae <cs_disable>
 8001498:	4603      	mov	r3, r0
 800149a:	b2da      	uxtb	r2, r3
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	4413      	add	r3, r2
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	73fb      	strb	r3, [r7, #15]
	return 0;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <rd_reg>:

int rd_reg(int8_t id, uint8_t reg){
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b084      	sub	sp, #16
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	460a      	mov	r2, r1
 80014b8:	71fb      	strb	r3, [r7, #7]
 80014ba:	4613      	mov	r3, r2
 80014bc:	71bb      	strb	r3, [r7, #6]
	int8_t status = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;
	status += cs_enable(id);
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fbd6 	bl	8000c78 <cs_enable>
 80014cc:	4603      	mov	r3, r0
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	4413      	add	r3, r2
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1);
 80014d8:	2001      	movs	r0, #1
 80014da:	f000 fc55 	bl	8001d88 <HAL_Delay>
	status += wr_spi(id, CMD_RREG | reg);
 80014de:	79bb      	ldrb	r3, [r7, #6]
 80014e0:	f043 0320 	orr.w	r3, r3, #32
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fbf9 	bl	8000ce4 <wr_spi>
 80014f2:	4603      	mov	r3, r0
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	4413      	add	r3, r2
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, 0);
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fbed 	bl	8000ce4 <wr_spi>
 800150a:	4603      	mov	r3, r0
 800150c:	b2da      	uxtb	r2, r3
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	4413      	add	r3, r2
 8001512:	b2db      	uxtb	r3, r3
 8001514:	73fb      	strb	r3, [r7, #15]
	data = rd_spi(id);
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fe3f 	bl	800119e <rd_spi>
 8001520:	4603      	mov	r3, r0
 8001522:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(1);
 8001524:	2001      	movs	r0, #1
 8001526:	f000 fc2f 	bl	8001d88 <HAL_Delay>
	status += cs_disable(id);
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fbbd 	bl	8000cae <cs_disable>
 8001534:	4603      	mov	r3, r0
 8001536:	b2da      	uxtb	r2, r3
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	4413      	add	r3, r2
 800153c:	b2db      	uxtb	r3, r3
 800153e:	73fb      	strb	r3, [r7, #15]
	return data;
 8001540:	7bbb      	ldrb	r3, [r7, #14]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <MX_SPI4_Init>:
  }

}
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8001574:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <MX_SPI4_Init+0x74>)
 8001576:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <MX_SPI4_Init+0x78>)
 8001578:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800157a:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <MX_SPI4_Init+0x74>)
 800157c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001580:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <MX_SPI4_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001588:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <MX_SPI4_Init+0x74>)
 800158a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800158e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <MX_SPI4_Init+0x74>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001596:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <MX_SPI4_Init+0x74>)
 8001598:	2200      	movs	r2, #0
 800159a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_SPI4_Init+0x74>)
 800159e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <MX_SPI4_Init+0x74>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <MX_SPI4_Init+0x74>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <MX_SPI4_Init+0x74>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <MX_SPI4_Init+0x74>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_SPI4_Init+0x74>)
 80015be:	2207      	movs	r2, #7
 80015c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <MX_SPI4_Init+0x74>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <MX_SPI4_Init+0x74>)
 80015ca:	2208      	movs	r2, #8
 80015cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_SPI4_Init+0x74>)
 80015d0:	f003 f816 	bl	8004600 <HAL_SPI_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80015da:	f7ff ffb6 	bl	800154a <Error_Handler>
  }

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200001bc 	.word	0x200001bc
 80015e8:	40013400 	.word	0x40013400

080015ec <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b092      	sub	sp, #72	; 0x48
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a8e      	ldr	r2, [pc, #568]	; (8001844 <HAL_SPI_MspInit+0x258>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d131      	bne.n	8001672 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800160e:	4b8e      	ldr	r3, [pc, #568]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	4a8d      	ldr	r2, [pc, #564]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 8001614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001618:	6413      	str	r3, [r2, #64]	; 0x40
 800161a:	4b8b      	ldr	r3, [pc, #556]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001622:	633b      	str	r3, [r7, #48]	; 0x30
 8001624:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	4b88      	ldr	r3, [pc, #544]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a87      	ldr	r2, [pc, #540]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b85      	ldr	r3, [pc, #532]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800163c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800163e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001642:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001650:	2305      	movs	r3, #5
 8001652:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001654:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001658:	4619      	mov	r1, r3
 800165a:	487c      	ldr	r0, [pc, #496]	; (800184c <HAL_SPI_MspInit+0x260>)
 800165c:	f000 fd18 	bl	8002090 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 6, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2106      	movs	r1, #6
 8001664:	2024      	movs	r0, #36	; 0x24
 8001666:	f000 fca1 	bl	8001fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800166a:	2024      	movs	r0, #36	; 0x24
 800166c:	f000 fcca 	bl	8002004 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8001670:	e0e4      	b.n	800183c <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI3)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a76      	ldr	r2, [pc, #472]	; (8001850 <HAL_SPI_MspInit+0x264>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d145      	bne.n	8001708 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800167c:	4b72      	ldr	r3, [pc, #456]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	4a71      	ldr	r2, [pc, #452]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 8001682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001686:	6413      	str	r3, [r2, #64]	; 0x40
 8001688:	4b6f      	ldr	r3, [pc, #444]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
 8001692:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001694:	4b6c      	ldr	r3, [pc, #432]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	4a6b      	ldr	r2, [pc, #428]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 800169a:	f043 0302 	orr.w	r3, r3, #2
 800169e:	6313      	str	r3, [r2, #48]	; 0x30
 80016a0:	4b69      	ldr	r3, [pc, #420]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ac:	4b66      	ldr	r3, [pc, #408]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	4a65      	ldr	r2, [pc, #404]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 80016b2:	f043 0304 	orr.w	r3, r3, #4
 80016b6:	6313      	str	r3, [r2, #48]	; 0x30
 80016b8:	4b63      	ldr	r3, [pc, #396]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	623b      	str	r3, [r7, #32]
 80016c2:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016c4:	2304      	movs	r3, #4
 80016c6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80016d4:	2307      	movs	r3, #7
 80016d6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016dc:	4619      	mov	r1, r3
 80016de:	485b      	ldr	r0, [pc, #364]	; (800184c <HAL_SPI_MspInit+0x260>)
 80016e0:	f000 fcd6 	bl	8002090 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016f6:	2306      	movs	r3, #6
 80016f8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016fe:	4619      	mov	r1, r3
 8001700:	4854      	ldr	r0, [pc, #336]	; (8001854 <HAL_SPI_MspInit+0x268>)
 8001702:	f000 fcc5 	bl	8002090 <HAL_GPIO_Init>
}
 8001706:	e099      	b.n	800183c <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI4)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a52      	ldr	r2, [pc, #328]	; (8001858 <HAL_SPI_MspInit+0x26c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d130      	bne.n	8001774 <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001712:	4b4d      	ldr	r3, [pc, #308]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	4a4c      	ldr	r2, [pc, #304]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 8001718:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800171c:	6453      	str	r3, [r2, #68]	; 0x44
 800171e:	4b4a      	ldr	r3, [pc, #296]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001726:	61fb      	str	r3, [r7, #28]
 8001728:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800172a:	4b47      	ldr	r3, [pc, #284]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a46      	ldr	r2, [pc, #280]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 8001730:	f043 0310 	orr.w	r3, r3, #16
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b44      	ldr	r3, [pc, #272]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0310 	and.w	r3, r3, #16
 800173e:	61bb      	str	r3, [r7, #24]
 8001740:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001742:	2364      	movs	r3, #100	; 0x64
 8001744:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001752:	2305      	movs	r3, #5
 8001754:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001756:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800175a:	4619      	mov	r1, r3
 800175c:	483f      	ldr	r0, [pc, #252]	; (800185c <HAL_SPI_MspInit+0x270>)
 800175e:	f000 fc97 	bl	8002090 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 6, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2106      	movs	r1, #6
 8001766:	2054      	movs	r0, #84	; 0x54
 8001768:	f000 fc20 	bl	8001fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800176c:	2054      	movs	r0, #84	; 0x54
 800176e:	f000 fc49 	bl	8002004 <HAL_NVIC_EnableIRQ>
}
 8001772:	e063      	b.n	800183c <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI5)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a39      	ldr	r2, [pc, #228]	; (8001860 <HAL_SPI_MspInit+0x274>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d129      	bne.n	80017d2 <HAL_SPI_MspInit+0x1e6>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800177e:	4b32      	ldr	r3, [pc, #200]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	4a31      	ldr	r2, [pc, #196]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 8001784:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001788:	6453      	str	r3, [r2, #68]	; 0x44
 800178a:	4b2f      	ldr	r3, [pc, #188]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001796:	4b2c      	ldr	r3, [pc, #176]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a2b      	ldr	r2, [pc, #172]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 800179c:	f043 0320 	orr.w	r3, r3, #32
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b29      	ldr	r3, [pc, #164]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0320 	and.w	r3, r3, #32
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80017ae:	f44f 7360 	mov.w	r3, #896	; 0x380
 80017b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80017c0:	2305      	movs	r3, #5
 80017c2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017c8:	4619      	mov	r1, r3
 80017ca:	4826      	ldr	r0, [pc, #152]	; (8001864 <HAL_SPI_MspInit+0x278>)
 80017cc:	f000 fc60 	bl	8002090 <HAL_GPIO_Init>
}
 80017d0:	e034      	b.n	800183c <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI6)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a24      	ldr	r2, [pc, #144]	; (8001868 <HAL_SPI_MspInit+0x27c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d12f      	bne.n	800183c <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI6_CLK_ENABLE();
 80017dc:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 80017de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e0:	4a19      	ldr	r2, [pc, #100]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 80017e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017e6:	6453      	str	r3, [r2, #68]	; 0x44
 80017e8:	4b17      	ldr	r3, [pc, #92]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 80017ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f4:	4b14      	ldr	r3, [pc, #80]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	4a13      	ldr	r2, [pc, #76]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_SPI_MspInit+0x25c>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800180c:	23e0      	movs	r3, #224	; 0xe0
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001818:	2303      	movs	r3, #3
 800181a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 800181c:	2308      	movs	r3, #8
 800181e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001824:	4619      	mov	r1, r3
 8001826:	4811      	ldr	r0, [pc, #68]	; (800186c <HAL_SPI_MspInit+0x280>)
 8001828:	f000 fc32 	bl	8002090 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 6, 0);
 800182c:	2200      	movs	r2, #0
 800182e:	2106      	movs	r1, #6
 8001830:	2056      	movs	r0, #86	; 0x56
 8001832:	f000 fbbb 	bl	8001fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 8001836:	2056      	movs	r0, #86	; 0x56
 8001838:	f000 fbe4 	bl	8002004 <HAL_NVIC_EnableIRQ>
}
 800183c:	bf00      	nop
 800183e:	3748      	adds	r7, #72	; 0x48
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40003800 	.word	0x40003800
 8001848:	40023800 	.word	0x40023800
 800184c:	40020400 	.word	0x40020400
 8001850:	40003c00 	.word	0x40003c00
 8001854:	40020800 	.word	0x40020800
 8001858:	40013400 	.word	0x40013400
 800185c:	40021000 	.word	0x40021000
 8001860:	40015000 	.word	0x40015000
 8001864:	40021400 	.word	0x40021400
 8001868:	40015400 	.word	0x40015400
 800186c:	40020000 	.word	0x40020000

08001870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001876:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <HAL_MspInit+0x44>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <HAL_MspInit+0x44>)
 800187c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001880:	6413      	str	r3, [r2, #64]	; 0x40
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <HAL_MspInit+0x44>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_MspInit+0x44>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <HAL_MspInit+0x44>)
 8001894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001898:	6453      	str	r3, [r2, #68]	; 0x44
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_MspInit+0x44>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800

080018b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <HardFault_Handler+0x4>

080018cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <MemManage_Handler+0x4>

080018d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d6:	e7fe      	b.n	80018d6 <BusFault_Handler+0x4>

080018d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <UsageFault_Handler+0x4>

080018de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800190c:	2010      	movs	r0, #16
 800190e:	f000 ff99 	bl	8002844 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}

08001916 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800191a:	2020      	movs	r0, #32
 800191c:	f000 ff92 	bl	8002844 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001920:	2040      	movs	r0, #64	; 0x40
 8001922:	f000 ff8f 	bl	8002844 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001926:	2080      	movs	r0, #128	; 0x80
 8001928:	f000 ff8c 	bl	8002844 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800192c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001930:	f000 ff88 	bl	8002844 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001934:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001938:	f000 ff84 	bl	8002844 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}

08001940 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <SPI2_IRQHandler+0x10>)
 8001946:	f003 fcbf 	bl	80052c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000002c 	.word	0x2000002c

08001954 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001958:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800195c:	f000 ff72 	bl	8002844 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001960:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001964:	f000 ff6e 	bl	8002844 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001968:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800196c:	f000 ff6a 	bl	8002844 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001970:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001974:	f000 ff66 	bl	8002844 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001978:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800197c:	f000 ff62 	bl	8002844 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}

08001984 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <UART4_IRQHandler+0x10>)
 800198a:	f004 f94f 	bl	8005c2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000320 	.word	0x20000320

08001998 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <UART5_IRQHandler+0x10>)
 800199e:	f004 f945 	bl	8005c2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000220 	.word	0x20000220

080019ac <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <UART8_IRQHandler+0x10>)
 80019b2:	f004 f93b 	bl	8005c2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200002a0 	.word	0x200002a0

080019c0 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <SPI4_IRQHandler+0x10>)
 80019c6:	f003 fc7f 	bl	80052c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200001bc 	.word	0x200001bc

080019d4 <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <SPI6_IRQHandler+0x10>)
 80019da:	f003 fc75 	bl	80052c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200000f4 	.word	0x200000f4

080019e8 <SysTick_Handler>:

/* USER CODE BEGIN 1 */
void SysTick_Handler(void) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80019ec:	f000 f9ac 	bl	8001d48 <HAL_IncTick>
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <SystemInit+0x28>)
 80019fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fe:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <SystemInit+0x28>)
 8001a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <SystemInit+0x28>)
 8001a0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a0e:	609a      	str	r2, [r3, #8]
#endif
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart8;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <MX_UART4_Init+0x58>)
 8001a26:	4a15      	ldr	r2, [pc, #84]	; (8001a7c <MX_UART4_Init+0x5c>)
 8001a28:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001a2a:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <MX_UART4_Init+0x58>)
 8001a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a30:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <MX_UART4_Init+0x58>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <MX_UART4_Init+0x58>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <MX_UART4_Init+0x58>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <MX_UART4_Init+0x58>)
 8001a46:	220c      	movs	r2, #12
 8001a48:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <MX_UART4_Init+0x58>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a50:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <MX_UART4_Init+0x58>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <MX_UART4_Init+0x58>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <MX_UART4_Init+0x58>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a62:	4805      	ldr	r0, [pc, #20]	; (8001a78 <MX_UART4_Init+0x58>)
 8001a64:	f003 fec4 	bl	80057f0 <HAL_UART_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001a6e:	f7ff fd6c 	bl	800154a <Error_Handler>
  }

}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000320 	.word	0x20000320
 8001a7c:	40004c00 	.word	0x40004c00

08001a80 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b090      	sub	sp, #64	; 0x40
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a6e      	ldr	r2, [pc, #440]	; (8001c58 <HAL_UART_MspInit+0x1d8>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d14d      	bne.n	8001b3e <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001aa2:	4b6e      	ldr	r3, [pc, #440]	; (8001c5c <HAL_UART_MspInit+0x1dc>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	4a6d      	ldr	r2, [pc, #436]	; (8001c5c <HAL_UART_MspInit+0x1dc>)
 8001aa8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001aac:	6413      	str	r3, [r2, #64]	; 0x40
 8001aae:	4b6b      	ldr	r3, [pc, #428]	; (8001c5c <HAL_UART_MspInit+0x1dc>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001aba:	4b68      	ldr	r3, [pc, #416]	; (8001c5c <HAL_UART_MspInit+0x1dc>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a67      	ldr	r2, [pc, #412]	; (8001c5c <HAL_UART_MspInit+0x1dc>)
 8001ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b65      	ldr	r3, [pc, #404]	; (8001c5c <HAL_UART_MspInit+0x1dc>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	4b62      	ldr	r3, [pc, #392]	; (8001c5c <HAL_UART_MspInit+0x1dc>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a61      	ldr	r2, [pc, #388]	; (8001c5c <HAL_UART_MspInit+0x1dc>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b5f      	ldr	r3, [pc, #380]	; (8001c5c <HAL_UART_MspInit+0x1dc>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	623b      	str	r3, [r7, #32]
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PI9     ------> UART4_RX
    PA0/WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = DAPI_RX_Pin;
 8001aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001afc:	2308      	movs	r3, #8
 8001afe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(DAPI_RX_GPIO_Port, &GPIO_InitStruct);
 8001b00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b04:	4619      	mov	r1, r3
 8001b06:	4856      	ldr	r0, [pc, #344]	; (8001c60 <HAL_UART_MspInit+0x1e0>)
 8001b08:	f000 fac2 	bl	8002090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DAPI_TX_Pin;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b10:	2302      	movs	r3, #2
 8001b12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b1c:	2308      	movs	r3, #8
 8001b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(DAPI_TX_GPIO_Port, &GPIO_InitStruct);
 8001b20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b24:	4619      	mov	r1, r3
 8001b26:	484f      	ldr	r0, [pc, #316]	; (8001c64 <HAL_UART_MspInit+0x1e4>)
 8001b28:	f000 fab2 	bl	8002090 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2106      	movs	r1, #6
 8001b30:	2034      	movs	r0, #52	; 0x34
 8001b32:	f000 fa3b 	bl	8001fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001b36:	2034      	movs	r0, #52	; 0x34
 8001b38:	f000 fa64 	bl	8002004 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 8001b3c:	e087      	b.n	8001c4e <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==UART5)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a49      	ldr	r2, [pc, #292]	; (8001c68 <HAL_UART_MspInit+0x1e8>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d14d      	bne.n	8001be4 <HAL_UART_MspInit+0x164>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001b48:	4b44      	ldr	r3, [pc, #272]	; (8001c5c <HAL_UART_MspInit+0x1dc>)
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	4a43      	ldr	r2, [pc, #268]	; (8001c5c <HAL_UART_MspInit+0x1dc>)
 8001b4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b52:	6413      	str	r3, [r2, #64]	; 0x40
 8001b54:	4b41      	ldr	r3, [pc, #260]	; (8001c5c <HAL_UART_MspInit+0x1dc>)
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b60:	4b3e      	ldr	r3, [pc, #248]	; (8001c5c <HAL_UART_MspInit+0x1dc>)
 8001b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b64:	4a3d      	ldr	r2, [pc, #244]	; (8001c5c <HAL_UART_MspInit+0x1dc>)
 8001b66:	f043 0304 	orr.w	r3, r3, #4
 8001b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6c:	4b3b      	ldr	r3, [pc, #236]	; (8001c5c <HAL_UART_MspInit+0x1dc>)
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	61bb      	str	r3, [r7, #24]
 8001b76:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b78:	4b38      	ldr	r3, [pc, #224]	; (8001c5c <HAL_UART_MspInit+0x1dc>)
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	4a37      	ldr	r2, [pc, #220]	; (8001c5c <HAL_UART_MspInit+0x1dc>)
 8001b7e:	f043 0308 	orr.w	r3, r3, #8
 8001b82:	6313      	str	r3, [r2, #48]	; 0x30
 8001b84:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <HAL_UART_MspInit+0x1dc>)
 8001b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = INTERSPU_TX_Pin;
 8001b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001ba2:	2308      	movs	r3, #8
 8001ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(INTERSPU_TX_GPIO_Port, &GPIO_InitStruct);
 8001ba6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001baa:	4619      	mov	r1, r3
 8001bac:	482f      	ldr	r0, [pc, #188]	; (8001c6c <HAL_UART_MspInit+0x1ec>)
 8001bae:	f000 fa6f 	bl	8002090 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = INTERSPU_RX_Pin;
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001bc2:	2308      	movs	r3, #8
 8001bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(INTERSPU_RX_GPIO_Port, &GPIO_InitStruct);
 8001bc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4828      	ldr	r0, [pc, #160]	; (8001c70 <HAL_UART_MspInit+0x1f0>)
 8001bce:	f000 fa5f 	bl	8002090 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 6, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2106      	movs	r1, #6
 8001bd6:	2035      	movs	r0, #53	; 0x35
 8001bd8:	f000 f9e8 	bl	8001fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001bdc:	2035      	movs	r0, #53	; 0x35
 8001bde:	f000 fa11 	bl	8002004 <HAL_NVIC_EnableIRQ>
}
 8001be2:	e034      	b.n	8001c4e <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==UART8)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a22      	ldr	r2, [pc, #136]	; (8001c74 <HAL_UART_MspInit+0x1f4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d12f      	bne.n	8001c4e <HAL_UART_MspInit+0x1ce>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001bee:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <HAL_UART_MspInit+0x1dc>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	4a1a      	ldr	r2, [pc, #104]	; (8001c5c <HAL_UART_MspInit+0x1dc>)
 8001bf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfa:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <HAL_UART_MspInit+0x1dc>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <HAL_UART_MspInit+0x1dc>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a14      	ldr	r2, [pc, #80]	; (8001c5c <HAL_UART_MspInit+0x1dc>)
 8001c0c:	f043 0310 	orr.w	r3, r3, #16
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_UART_MspInit+0x1dc>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0310 	and.w	r3, r3, #16
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EXP_IN_Pin|EXP_OUT_Pin;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001c2e:	2308      	movs	r3, #8
 8001c30:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c36:	4619      	mov	r1, r3
 8001c38:	480f      	ldr	r0, [pc, #60]	; (8001c78 <HAL_UART_MspInit+0x1f8>)
 8001c3a:	f000 fa29 	bl	8002090 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 6, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2106      	movs	r1, #6
 8001c42:	2053      	movs	r0, #83	; 0x53
 8001c44:	f000 f9b2 	bl	8001fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001c48:	2053      	movs	r0, #83	; 0x53
 8001c4a:	f000 f9db 	bl	8002004 <HAL_NVIC_EnableIRQ>
}
 8001c4e:	bf00      	nop
 8001c50:	3740      	adds	r7, #64	; 0x40
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40004c00 	.word	0x40004c00
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40022000 	.word	0x40022000
 8001c64:	40020000 	.word	0x40020000
 8001c68:	40005000 	.word	0x40005000
 8001c6c:	40020800 	.word	0x40020800
 8001c70:	40020c00 	.word	0x40020c00
 8001c74:	40007c00 	.word	0x40007c00
 8001c78:	40021000 	.word	0x40021000

08001c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c82:	e003      	b.n	8001c8c <LoopCopyDataInit>

08001c84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c8a:	3104      	adds	r1, #4

08001c8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c8c:	480b      	ldr	r0, [pc, #44]	; (8001cbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c94:	d3f6      	bcc.n	8001c84 <CopyDataInit>
  ldr  r2, =_sbss
 8001c96:	4a0b      	ldr	r2, [pc, #44]	; (8001cc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c98:	e002      	b.n	8001ca0 <LoopFillZerobss>

08001c9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c9c:	f842 3b04 	str.w	r3, [r2], #4

08001ca0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ca2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ca4:	d3f9      	bcc.n	8001c9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ca6:	f7ff fea5 	bl	80019f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001caa:	f004 fec3 	bl	8006a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cae:	f7fe fe99 	bl	80009e4 <main>
  bx  lr    
 8001cb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cb4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001cb8:	08006c2c 	.word	0x08006c2c
  ldr  r0, =_sdata
 8001cbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001cc0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001cc4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001cc8:	200003a4 	.word	0x200003a4

08001ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ccc:	e7fe      	b.n	8001ccc <ADC_IRQHandler>

08001cce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd2:	2003      	movs	r0, #3
 8001cd4:	f000 f94a 	bl	8001f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f000 f805 	bl	8001ce8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001cde:	f7ff fdc7 	bl	8001870 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_InitTick+0x54>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_InitTick+0x58>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 f994 	bl	8002034 <HAL_SYSTICK_Config>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00e      	b.n	8001d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b0f      	cmp	r3, #15
 8001d1a:	d80a      	bhi.n	8001d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	f000 f942 	bl	8001fac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d28:	4a06      	ldr	r2, [pc, #24]	; (8001d44 <HAL_InitTick+0x5c>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e000      	b.n	8001d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	20000008 	.word	0x20000008
 8001d44:	20000004 	.word	0x20000004

08001d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_IncTick+0x20>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_IncTick+0x24>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <HAL_IncTick+0x24>)
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000008 	.word	0x20000008
 8001d6c:	200003a0 	.word	0x200003a0

08001d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return uwTick;
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <HAL_GetTick+0x14>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	200003a0 	.word	0x200003a0

08001d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d90:	f7ff ffee 	bl	8001d70 <HAL_GetTick>
 8001d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da0:	d005      	beq.n	8001dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <HAL_Delay+0x40>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4413      	add	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dae:	bf00      	nop
 8001db0:	f7ff ffde 	bl	8001d70 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d8f7      	bhi.n	8001db0 <HAL_Delay+0x28>
  {
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000008 	.word	0x20000008

08001dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <__NVIC_SetPriorityGrouping+0x40>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de8:	4013      	ands	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfa:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <__NVIC_SetPriorityGrouping+0x40>)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	60d3      	str	r3, [r2, #12]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00
 8001e10:	05fa0000 	.word	0x05fa0000

08001e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <__NVIC_GetPriorityGrouping+0x18>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	f003 0307 	and.w	r3, r3, #7
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	db0b      	blt.n	8001e5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	f003 021f 	and.w	r2, r3, #31
 8001e48:	4907      	ldr	r1, [pc, #28]	; (8001e68 <__NVIC_EnableIRQ+0x38>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	2001      	movs	r0, #1
 8001e52:	fa00 f202 	lsl.w	r2, r0, r2
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000e100 	.word	0xe000e100

08001e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	6039      	str	r1, [r7, #0]
 8001e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	db0a      	blt.n	8001e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	490c      	ldr	r1, [pc, #48]	; (8001eb8 <__NVIC_SetPriority+0x4c>)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	0112      	lsls	r2, r2, #4
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	440b      	add	r3, r1
 8001e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e94:	e00a      	b.n	8001eac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4908      	ldr	r1, [pc, #32]	; (8001ebc <__NVIC_SetPriority+0x50>)
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	3b04      	subs	r3, #4
 8001ea4:	0112      	lsls	r2, r2, #4
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	761a      	strb	r2, [r3, #24]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000e100 	.word	0xe000e100
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	; 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f1c3 0307 	rsb	r3, r3, #7
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	bf28      	it	cs
 8001ede:	2304      	movcs	r3, #4
 8001ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	2b06      	cmp	r3, #6
 8001ee8:	d902      	bls.n	8001ef0 <NVIC_EncodePriority+0x30>
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3b03      	subs	r3, #3
 8001eee:	e000      	b.n	8001ef2 <NVIC_EncodePriority+0x32>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43da      	mvns	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	401a      	ands	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f08:	f04f 31ff 	mov.w	r1, #4294967295
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	43d9      	mvns	r1, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	4313      	orrs	r3, r2
         );
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3724      	adds	r7, #36	; 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f38:	d301      	bcc.n	8001f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e00f      	b.n	8001f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <SysTick_Config+0x40>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f46:	210f      	movs	r1, #15
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	f7ff ff8e 	bl	8001e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <SysTick_Config+0x40>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f56:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <SysTick_Config+0x40>)
 8001f58:	2207      	movs	r2, #7
 8001f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	e000e010 	.word	0xe000e010

08001f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b07      	cmp	r3, #7
 8001f78:	d00f      	beq.n	8001f9a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b06      	cmp	r3, #6
 8001f7e:	d00c      	beq.n	8001f9a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b05      	cmp	r3, #5
 8001f84:	d009      	beq.n	8001f9a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d006      	beq.n	8001f9a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d003      	beq.n	8001f9a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001f92:	2192      	movs	r1, #146	; 0x92
 8001f94:	4804      	ldr	r0, [pc, #16]	; (8001fa8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001f96:	f7ff fadf 	bl	8001558 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ff16 	bl	8001dcc <__NVIC_SetPriorityGrouping>
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	08006aa4 	.word	0x08006aa4

08001fac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b0f      	cmp	r3, #15
 8001fc2:	d903      	bls.n	8001fcc <HAL_NVIC_SetPriority+0x20>
 8001fc4:	21aa      	movs	r1, #170	; 0xaa
 8001fc6:	480e      	ldr	r0, [pc, #56]	; (8002000 <HAL_NVIC_SetPriority+0x54>)
 8001fc8:	f7ff fac6 	bl	8001558 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b0f      	cmp	r3, #15
 8001fd0:	d903      	bls.n	8001fda <HAL_NVIC_SetPriority+0x2e>
 8001fd2:	21ab      	movs	r1, #171	; 0xab
 8001fd4:	480a      	ldr	r0, [pc, #40]	; (8002000 <HAL_NVIC_SetPriority+0x54>)
 8001fd6:	f7ff fabf 	bl	8001558 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fda:	f7ff ff1b 	bl	8001e14 <__NVIC_GetPriorityGrouping>
 8001fde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	68b9      	ldr	r1, [r7, #8]
 8001fe4:	6978      	ldr	r0, [r7, #20]
 8001fe6:	f7ff ff6b 	bl	8001ec0 <NVIC_EncodePriority>
 8001fea:	4602      	mov	r2, r0
 8001fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ff3a 	bl	8001e6c <__NVIC_SetPriority>
}
 8001ff8:	bf00      	nop
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	08006aa4 	.word	0x08006aa4

08002004 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	2b00      	cmp	r3, #0
 8002014:	da03      	bge.n	800201e <HAL_NVIC_EnableIRQ+0x1a>
 8002016:	21be      	movs	r1, #190	; 0xbe
 8002018:	4805      	ldr	r0, [pc, #20]	; (8002030 <HAL_NVIC_EnableIRQ+0x2c>)
 800201a:	f7ff fa9d 	bl	8001558 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ff04 	bl	8001e30 <__NVIC_EnableIRQ>
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	08006aa4 	.word	0x08006aa4

08002034 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ff73 	bl	8001f28 <SysTick_Config>
 8002042:	4603      	mov	r3, r0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d004      	beq.n	800206a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2280      	movs	r2, #128	; 0x80
 8002064:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e00c      	b.n	8002084 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2205      	movs	r2, #5
 800206e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0201 	bic.w	r2, r2, #1
 8002080:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a42      	ldr	r2, [pc, #264]	; (80021b8 <HAL_GPIO_Init+0x128>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d02b      	beq.n	800210a <HAL_GPIO_Init+0x7a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a41      	ldr	r2, [pc, #260]	; (80021bc <HAL_GPIO_Init+0x12c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d027      	beq.n	800210a <HAL_GPIO_Init+0x7a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a40      	ldr	r2, [pc, #256]	; (80021c0 <HAL_GPIO_Init+0x130>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d023      	beq.n	800210a <HAL_GPIO_Init+0x7a>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a3f      	ldr	r2, [pc, #252]	; (80021c4 <HAL_GPIO_Init+0x134>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d01f      	beq.n	800210a <HAL_GPIO_Init+0x7a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a3e      	ldr	r2, [pc, #248]	; (80021c8 <HAL_GPIO_Init+0x138>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d01b      	beq.n	800210a <HAL_GPIO_Init+0x7a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a3d      	ldr	r2, [pc, #244]	; (80021cc <HAL_GPIO_Init+0x13c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d017      	beq.n	800210a <HAL_GPIO_Init+0x7a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a3c      	ldr	r2, [pc, #240]	; (80021d0 <HAL_GPIO_Init+0x140>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d013      	beq.n	800210a <HAL_GPIO_Init+0x7a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a3b      	ldr	r2, [pc, #236]	; (80021d4 <HAL_GPIO_Init+0x144>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d00f      	beq.n	800210a <HAL_GPIO_Init+0x7a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a3a      	ldr	r2, [pc, #232]	; (80021d8 <HAL_GPIO_Init+0x148>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d00b      	beq.n	800210a <HAL_GPIO_Init+0x7a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a39      	ldr	r2, [pc, #228]	; (80021dc <HAL_GPIO_Init+0x14c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d007      	beq.n	800210a <HAL_GPIO_Init+0x7a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a38      	ldr	r2, [pc, #224]	; (80021e0 <HAL_GPIO_Init+0x150>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0x7a>
 8002102:	21b1      	movs	r1, #177	; 0xb1
 8002104:	4837      	ldr	r0, [pc, #220]	; (80021e4 <HAL_GPIO_Init+0x154>)
 8002106:	f7ff fa27 	bl	8001558 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	b29b      	uxth	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d103      	bne.n	800211c <HAL_GPIO_Init+0x8c>
 8002114:	21b2      	movs	r1, #178	; 0xb2
 8002116:	4833      	ldr	r0, [pc, #204]	; (80021e4 <HAL_GPIO_Init+0x154>)
 8002118:	f7ff fa1e 	bl	8001558 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d035      	beq.n	8002190 <HAL_GPIO_Init+0x100>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d031      	beq.n	8002190 <HAL_GPIO_Init+0x100>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b11      	cmp	r3, #17
 8002132:	d02d      	beq.n	8002190 <HAL_GPIO_Init+0x100>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b02      	cmp	r3, #2
 800213a:	d029      	beq.n	8002190 <HAL_GPIO_Init+0x100>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b12      	cmp	r3, #18
 8002142:	d025      	beq.n	8002190 <HAL_GPIO_Init+0x100>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a27      	ldr	r2, [pc, #156]	; (80021e8 <HAL_GPIO_Init+0x158>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d020      	beq.n	8002190 <HAL_GPIO_Init+0x100>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4a26      	ldr	r2, [pc, #152]	; (80021ec <HAL_GPIO_Init+0x15c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d01b      	beq.n	8002190 <HAL_GPIO_Init+0x100>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	4a24      	ldr	r2, [pc, #144]	; (80021f0 <HAL_GPIO_Init+0x160>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d016      	beq.n	8002190 <HAL_GPIO_Init+0x100>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	4a23      	ldr	r2, [pc, #140]	; (80021f4 <HAL_GPIO_Init+0x164>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d011      	beq.n	8002190 <HAL_GPIO_Init+0x100>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	4a21      	ldr	r2, [pc, #132]	; (80021f8 <HAL_GPIO_Init+0x168>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00c      	beq.n	8002190 <HAL_GPIO_Init+0x100>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4a20      	ldr	r2, [pc, #128]	; (80021fc <HAL_GPIO_Init+0x16c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d007      	beq.n	8002190 <HAL_GPIO_Init+0x100>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b03      	cmp	r3, #3
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_Init+0x100>
 8002188:	21b3      	movs	r1, #179	; 0xb3
 800218a:	4816      	ldr	r0, [pc, #88]	; (80021e4 <HAL_GPIO_Init+0x154>)
 800218c:	f7ff f9e4 	bl	8001558 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00b      	beq.n	80021b0 <HAL_GPIO_Init+0x120>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d007      	beq.n	80021b0 <HAL_GPIO_Init+0x120>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_Init+0x120>
 80021a8:	21b4      	movs	r1, #180	; 0xb4
 80021aa:	480e      	ldr	r0, [pc, #56]	; (80021e4 <HAL_GPIO_Init+0x154>)
 80021ac:	f7ff f9d4 	bl	8001558 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80021b0:	2300      	movs	r3, #0
 80021b2:	61fb      	str	r3, [r7, #28]
 80021b4:	e2d6      	b.n	8002764 <HAL_GPIO_Init+0x6d4>
 80021b6:	bf00      	nop
 80021b8:	40020000 	.word	0x40020000
 80021bc:	40020400 	.word	0x40020400
 80021c0:	40020800 	.word	0x40020800
 80021c4:	40020c00 	.word	0x40020c00
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40021400 	.word	0x40021400
 80021d0:	40021800 	.word	0x40021800
 80021d4:	40021c00 	.word	0x40021c00
 80021d8:	40022000 	.word	0x40022000
 80021dc:	40022400 	.word	0x40022400
 80021e0:	40022800 	.word	0x40022800
 80021e4:	08006ae0 	.word	0x08006ae0
 80021e8:	10110000 	.word	0x10110000
 80021ec:	10210000 	.word	0x10210000
 80021f0:	10310000 	.word	0x10310000
 80021f4:	10120000 	.word	0x10120000
 80021f8:	10220000 	.word	0x10220000
 80021fc:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002200:	2201      	movs	r2, #1
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4013      	ands	r3, r2
 8002212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	429a      	cmp	r2, r3
 800221a:	f040 82a0 	bne.w	800275e <HAL_GPIO_Init+0x6ce>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d00b      	beq.n	800223e <HAL_GPIO_Init+0x1ae>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d007      	beq.n	800223e <HAL_GPIO_Init+0x1ae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002232:	2b11      	cmp	r3, #17
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x1ae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b12      	cmp	r3, #18
 800223c:	d144      	bne.n	80022c8 <HAL_GPIO_Init+0x238>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00f      	beq.n	8002266 <HAL_GPIO_Init+0x1d6>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d00b      	beq.n	8002266 <HAL_GPIO_Init+0x1d6>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d007      	beq.n	8002266 <HAL_GPIO_Init+0x1d6>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	2b03      	cmp	r3, #3
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x1d6>
 800225e:	21c6      	movs	r1, #198	; 0xc6
 8002260:	482a      	ldr	r0, [pc, #168]	; (800230c <HAL_GPIO_Init+0x27c>)
 8002262:	f7ff f979 	bl	8001558 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	2203      	movs	r2, #3
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800229c:	2201      	movs	r2, #1
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f003 0201 	and.w	r2, r3, #1
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	2203      	movs	r2, #3
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d007      	beq.n	8002310 <HAL_GPIO_Init+0x280>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b12      	cmp	r3, #18
 8002306:	f040 814b 	bne.w	80025a0 <HAL_GPIO_Init+0x510>
 800230a:	e001      	b.n	8002310 <HAL_GPIO_Init+0x280>
 800230c:	08006ae0 	.word	0x08006ae0
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 811f 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	2b01      	cmp	r3, #1
 8002320:	f000 811a 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 8115 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 8110 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 810b 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	2b01      	cmp	r3, #1
 8002348:	f000 8106 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	2b02      	cmp	r3, #2
 8002352:	f000 8101 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	2b02      	cmp	r3, #2
 800235c:	f000 80fc 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	2b02      	cmp	r3, #2
 8002366:	f000 80f7 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2b03      	cmp	r3, #3
 8002370:	f000 80f2 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	2b03      	cmp	r3, #3
 800237a:	f000 80ed 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	2b03      	cmp	r3, #3
 8002384:	f000 80e8 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	2b03      	cmp	r3, #3
 800238e:	f000 80e3 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b03      	cmp	r3, #3
 8002398:	f000 80de 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	f000 80d9 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	f000 80d4 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	f000 80cf 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	2b04      	cmp	r3, #4
 80023c0:	f000 80ca 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	f000 80c5 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	f000 80c0 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	2b05      	cmp	r3, #5
 80023de:	f000 80bb 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	2b05      	cmp	r3, #5
 80023e8:	f000 80b6 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	f000 80b1 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	2b05      	cmp	r3, #5
 80023fc:	f000 80ac 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	2b05      	cmp	r3, #5
 8002406:	f000 80a7 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	2b05      	cmp	r3, #5
 8002410:	f000 80a2 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	2b06      	cmp	r3, #6
 800241a:	f000 809d 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b06      	cmp	r3, #6
 8002424:	f000 8098 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	2b07      	cmp	r3, #7
 800242e:	f000 8093 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	2b07      	cmp	r3, #7
 8002438:	f000 808e 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	2b07      	cmp	r3, #7
 8002442:	f000 8089 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	2b07      	cmp	r3, #7
 800244c:	f000 8084 	beq.w	8002558 <HAL_GPIO_Init+0x4c8>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	2b07      	cmp	r3, #7
 8002456:	d07f      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	2b07      	cmp	r3, #7
 800245e:	d07b      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	2b07      	cmp	r3, #7
 8002466:	d077      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	2b08      	cmp	r3, #8
 800246e:	d073      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	2b08      	cmp	r3, #8
 8002476:	d06f      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	2b08      	cmp	r3, #8
 800247e:	d06b      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	2b08      	cmp	r3, #8
 8002486:	d067      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	2b08      	cmp	r3, #8
 800248e:	d063      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	2b08      	cmp	r3, #8
 8002496:	d05f      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	2b08      	cmp	r3, #8
 800249e:	d05b      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	2b09      	cmp	r3, #9
 80024a6:	d057      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	2b09      	cmp	r3, #9
 80024ae:	d053      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	2b09      	cmp	r3, #9
 80024b6:	d04f      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	2b09      	cmp	r3, #9
 80024be:	d04b      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	2b09      	cmp	r3, #9
 80024c6:	d047      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2b09      	cmp	r3, #9
 80024ce:	d043      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	2b09      	cmp	r3, #9
 80024d6:	d03f      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	2b0a      	cmp	r3, #10
 80024de:	d03b      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	2b0a      	cmp	r3, #10
 80024e6:	d037      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	2b0a      	cmp	r3, #10
 80024ee:	d033      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	2b0a      	cmp	r3, #10
 80024f6:	d02f      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	2b0b      	cmp	r3, #11
 80024fe:	d02b      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	2b0a      	cmp	r3, #10
 8002506:	d027      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	2b0b      	cmp	r3, #11
 800250e:	d023      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	2b0b      	cmp	r3, #11
 8002516:	d01f      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	2b0c      	cmp	r3, #12
 800251e:	d01b      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	2b0c      	cmp	r3, #12
 8002526:	d017      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	2b0c      	cmp	r3, #12
 800252e:	d013      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	2b0f      	cmp	r3, #15
 8002536:	d00f      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	2b0d      	cmp	r3, #13
 800253e:	d00b      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	2b0e      	cmp	r3, #14
 8002546:	d007      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	2b0d      	cmp	r3, #13
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x4c8>
 8002550:	21de      	movs	r1, #222	; 0xde
 8002552:	4888      	ldr	r0, [pc, #544]	; (8002774 <HAL_GPIO_Init+0x6e4>)
 8002554:	f7ff f800 	bl	8001558 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	08da      	lsrs	r2, r3, #3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3208      	adds	r2, #8
 8002560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	220f      	movs	r2, #15
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	08da      	lsrs	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3208      	adds	r2, #8
 800259a:	69b9      	ldr	r1, [r7, #24]
 800259c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	2203      	movs	r2, #3
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0203 	and.w	r2, r3, #3
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80be 	beq.w	800275e <HAL_GPIO_Init+0x6ce>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e2:	4b65      	ldr	r3, [pc, #404]	; (8002778 <HAL_GPIO_Init+0x6e8>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	4a64      	ldr	r2, [pc, #400]	; (8002778 <HAL_GPIO_Init+0x6e8>)
 80025e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ec:	6453      	str	r3, [r2, #68]	; 0x44
 80025ee:	4b62      	ldr	r3, [pc, #392]	; (8002778 <HAL_GPIO_Init+0x6e8>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80025fa:	4a60      	ldr	r2, [pc, #384]	; (800277c <HAL_GPIO_Init+0x6ec>)
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	089b      	lsrs	r3, r3, #2
 8002600:	3302      	adds	r3, #2
 8002602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002606:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	220f      	movs	r2, #15
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a57      	ldr	r2, [pc, #348]	; (8002780 <HAL_GPIO_Init+0x6f0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d037      	beq.n	8002696 <HAL_GPIO_Init+0x606>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a56      	ldr	r2, [pc, #344]	; (8002784 <HAL_GPIO_Init+0x6f4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d031      	beq.n	8002692 <HAL_GPIO_Init+0x602>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a55      	ldr	r2, [pc, #340]	; (8002788 <HAL_GPIO_Init+0x6f8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d02b      	beq.n	800268e <HAL_GPIO_Init+0x5fe>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a54      	ldr	r2, [pc, #336]	; (800278c <HAL_GPIO_Init+0x6fc>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d025      	beq.n	800268a <HAL_GPIO_Init+0x5fa>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a53      	ldr	r2, [pc, #332]	; (8002790 <HAL_GPIO_Init+0x700>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d01f      	beq.n	8002686 <HAL_GPIO_Init+0x5f6>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a52      	ldr	r2, [pc, #328]	; (8002794 <HAL_GPIO_Init+0x704>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d019      	beq.n	8002682 <HAL_GPIO_Init+0x5f2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a51      	ldr	r2, [pc, #324]	; (8002798 <HAL_GPIO_Init+0x708>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d013      	beq.n	800267e <HAL_GPIO_Init+0x5ee>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a50      	ldr	r2, [pc, #320]	; (800279c <HAL_GPIO_Init+0x70c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00d      	beq.n	800267a <HAL_GPIO_Init+0x5ea>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a4f      	ldr	r2, [pc, #316]	; (80027a0 <HAL_GPIO_Init+0x710>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d007      	beq.n	8002676 <HAL_GPIO_Init+0x5e6>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4e      	ldr	r2, [pc, #312]	; (80027a4 <HAL_GPIO_Init+0x714>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d101      	bne.n	8002672 <HAL_GPIO_Init+0x5e2>
 800266e:	2309      	movs	r3, #9
 8002670:	e012      	b.n	8002698 <HAL_GPIO_Init+0x608>
 8002672:	230a      	movs	r3, #10
 8002674:	e010      	b.n	8002698 <HAL_GPIO_Init+0x608>
 8002676:	2308      	movs	r3, #8
 8002678:	e00e      	b.n	8002698 <HAL_GPIO_Init+0x608>
 800267a:	2307      	movs	r3, #7
 800267c:	e00c      	b.n	8002698 <HAL_GPIO_Init+0x608>
 800267e:	2306      	movs	r3, #6
 8002680:	e00a      	b.n	8002698 <HAL_GPIO_Init+0x608>
 8002682:	2305      	movs	r3, #5
 8002684:	e008      	b.n	8002698 <HAL_GPIO_Init+0x608>
 8002686:	2304      	movs	r3, #4
 8002688:	e006      	b.n	8002698 <HAL_GPIO_Init+0x608>
 800268a:	2303      	movs	r3, #3
 800268c:	e004      	b.n	8002698 <HAL_GPIO_Init+0x608>
 800268e:	2302      	movs	r3, #2
 8002690:	e002      	b.n	8002698 <HAL_GPIO_Init+0x608>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <HAL_GPIO_Init+0x608>
 8002696:	2300      	movs	r3, #0
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	f002 0203 	and.w	r2, r2, #3
 800269e:	0092      	lsls	r2, r2, #2
 80026a0:	4093      	lsls	r3, r2
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026a8:	4934      	ldr	r1, [pc, #208]	; (800277c <HAL_GPIO_Init+0x6ec>)
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	089b      	lsrs	r3, r3, #2
 80026ae:	3302      	adds	r3, #2
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b6:	4b3c      	ldr	r3, [pc, #240]	; (80027a8 <HAL_GPIO_Init+0x718>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x64a>
        {
          temp |= iocurrent;
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026da:	4a33      	ldr	r2, [pc, #204]	; (80027a8 <HAL_GPIO_Init+0x718>)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026e0:	4b31      	ldr	r3, [pc, #196]	; (80027a8 <HAL_GPIO_Init+0x718>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_GPIO_Init+0x674>
        {
          temp |= iocurrent;
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002704:	4a28      	ldr	r2, [pc, #160]	; (80027a8 <HAL_GPIO_Init+0x718>)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800270a:	4b27      	ldr	r3, [pc, #156]	; (80027a8 <HAL_GPIO_Init+0x718>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_Init+0x69e>
        {
          temp |= iocurrent;
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800272e:	4a1e      	ldr	r2, [pc, #120]	; (80027a8 <HAL_GPIO_Init+0x718>)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002734:	4b1c      	ldr	r3, [pc, #112]	; (80027a8 <HAL_GPIO_Init+0x718>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_GPIO_Init+0x6c8>
        {
          temp |= iocurrent;
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002758:	4a13      	ldr	r2, [pc, #76]	; (80027a8 <HAL_GPIO_Init+0x718>)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3301      	adds	r3, #1
 8002762:	61fb      	str	r3, [r7, #28]
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	2b0f      	cmp	r3, #15
 8002768:	f67f ad4a 	bls.w	8002200 <HAL_GPIO_Init+0x170>
      }
    }
  }
}
 800276c:	bf00      	nop
 800276e:	3720      	adds	r7, #32
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	08006ae0 	.word	0x08006ae0
 8002778:	40023800 	.word	0x40023800
 800277c:	40013800 	.word	0x40013800
 8002780:	40020000 	.word	0x40020000
 8002784:	40020400 	.word	0x40020400
 8002788:	40020800 	.word	0x40020800
 800278c:	40020c00 	.word	0x40020c00
 8002790:	40021000 	.word	0x40021000
 8002794:	40021400 	.word	0x40021400
 8002798:	40021800 	.word	0x40021800
 800279c:	40021c00 	.word	0x40021c00
 80027a0:	40022000 	.word	0x40022000
 80027a4:	40022400 	.word	0x40022400
 80027a8:	40013c00 	.word	0x40013c00

080027ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80027b8:	887b      	ldrh	r3, [r7, #2]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d104      	bne.n	80027c8 <HAL_GPIO_ReadPin+0x1c>
 80027be:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 80027c2:	4809      	ldr	r0, [pc, #36]	; (80027e8 <HAL_GPIO_ReadPin+0x3c>)
 80027c4:	f7fe fec8 	bl	8001558 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691a      	ldr	r2, [r3, #16]
 80027cc:	887b      	ldrh	r3, [r7, #2]
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 80027d4:	2301      	movs	r3, #1
 80027d6:	73fb      	strb	r3, [r7, #15]
 80027d8:	e001      	b.n	80027de <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027da:	2300      	movs	r3, #0
 80027dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027de:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	08006ae0 	.word	0x08006ae0

080027ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	807b      	strh	r3, [r7, #2]
 80027f8:	4613      	mov	r3, r2
 80027fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80027fc:	887b      	ldrh	r3, [r7, #2]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d104      	bne.n	800280c <HAL_GPIO_WritePin+0x20>
 8002802:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8002806:	480e      	ldr	r0, [pc, #56]	; (8002840 <HAL_GPIO_WritePin+0x54>)
 8002808:	f7fe fea6 	bl	8001558 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800280c:	787b      	ldrb	r3, [r7, #1]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d007      	beq.n	8002822 <HAL_GPIO_WritePin+0x36>
 8002812:	787b      	ldrb	r3, [r7, #1]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d004      	beq.n	8002822 <HAL_GPIO_WritePin+0x36>
 8002818:	f240 119b 	movw	r1, #411	; 0x19b
 800281c:	4808      	ldr	r0, [pc, #32]	; (8002840 <HAL_GPIO_WritePin+0x54>)
 800281e:	f7fe fe9b 	bl	8001558 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002822:	787b      	ldrb	r3, [r7, #1]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002828:	887a      	ldrh	r2, [r7, #2]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800282e:	e003      	b.n	8002838 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002830:	887b      	ldrh	r3, [r7, #2]
 8002832:	041a      	lsls	r2, r3, #16
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	619a      	str	r2, [r3, #24]
}
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	08006ae0 	.word	0x08006ae0

08002844 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800284e:	4b08      	ldr	r3, [pc, #32]	; (8002870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	4013      	ands	r3, r2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d006      	beq.n	8002868 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800285a:	4a05      	ldr	r2, [pc, #20]	; (8002870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800285c:	88fb      	ldrh	r3, [r7, #6]
 800285e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	4618      	mov	r0, r3
 8002864:	f000 f806 	bl	8002874 <HAL_GPIO_EXTI_Callback>
  }
}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40013c00 	.word	0x40013c00

08002874 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002892:	2300      	movs	r3, #0
 8002894:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002896:	4b23      	ldr	r3, [pc, #140]	; (8002924 <HAL_PWREx_EnableOverDrive+0x98>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	4a22      	ldr	r2, [pc, #136]	; (8002924 <HAL_PWREx_EnableOverDrive+0x98>)
 800289c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a0:	6413      	str	r3, [r2, #64]	; 0x40
 80028a2:	4b20      	ldr	r3, [pc, #128]	; (8002924 <HAL_PWREx_EnableOverDrive+0x98>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80028ae:	4b1e      	ldr	r3, [pc, #120]	; (8002928 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a1d      	ldr	r2, [pc, #116]	; (8002928 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028ba:	f7ff fa59 	bl	8001d70 <HAL_GetTick>
 80028be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028c0:	e009      	b.n	80028d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028c2:	f7ff fa55 	bl	8001d70 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028d0:	d901      	bls.n	80028d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e022      	b.n	800291c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028d6:	4b14      	ldr	r3, [pc, #80]	; (8002928 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e2:	d1ee      	bne.n	80028c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80028e4:	4b10      	ldr	r3, [pc, #64]	; (8002928 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0f      	ldr	r2, [pc, #60]	; (8002928 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028f0:	f7ff fa3e 	bl	8001d70 <HAL_GetTick>
 80028f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028f6:	e009      	b.n	800290c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028f8:	f7ff fa3a 	bl	8001d70 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002906:	d901      	bls.n	800290c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e007      	b.n	800291c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_PWREx_EnableOverDrive+0x9c>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002914:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002918:	d1ee      	bne.n	80028f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40023800 	.word	0x40023800
 8002928:	40007000 	.word	0x40007000

0800292c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002934:	2300      	movs	r3, #0
 8002936:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e35c      	b.n	8002ffc <HAL_RCC_OscConfig+0x6d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b0f      	cmp	r3, #15
 8002948:	d904      	bls.n	8002954 <HAL_RCC_OscConfig+0x28>
 800294a:	f240 1165 	movw	r1, #357	; 0x165
 800294e:	4892      	ldr	r0, [pc, #584]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002950:	f7fe fe02 	bl	8001558 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 809a 	beq.w	8002a96 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00e      	beq.n	8002988 <HAL_RCC_OscConfig+0x5c>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002972:	d009      	beq.n	8002988 <HAL_RCC_OscConfig+0x5c>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800297c:	d004      	beq.n	8002988 <HAL_RCC_OscConfig+0x5c>
 800297e:	f240 116b 	movw	r1, #363	; 0x16b
 8002982:	4885      	ldr	r0, [pc, #532]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002984:	f7fe fde8 	bl	8001558 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002988:	4b84      	ldr	r3, [pc, #528]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	2b04      	cmp	r3, #4
 8002992:	d00c      	beq.n	80029ae <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002994:	4b81      	ldr	r3, [pc, #516]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b08      	cmp	r3, #8
 800299e:	d112      	bne.n	80029c6 <HAL_RCC_OscConfig+0x9a>
 80029a0:	4b7e      	ldr	r3, [pc, #504]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ac:	d10b      	bne.n	80029c6 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ae:	4b7b      	ldr	r3, [pc, #492]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d06c      	beq.n	8002a94 <HAL_RCC_OscConfig+0x168>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d168      	bne.n	8002a94 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e31a      	b.n	8002ffc <HAL_RCC_OscConfig+0x6d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ce:	d106      	bne.n	80029de <HAL_RCC_OscConfig+0xb2>
 80029d0:	4b72      	ldr	r3, [pc, #456]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a71      	ldr	r2, [pc, #452]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 80029d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	e02e      	b.n	8002a3c <HAL_RCC_OscConfig+0x110>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCC_OscConfig+0xd4>
 80029e6:	4b6d      	ldr	r3, [pc, #436]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a6c      	ldr	r2, [pc, #432]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 80029ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	4b6a      	ldr	r3, [pc, #424]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a69      	ldr	r2, [pc, #420]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 80029f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	e01d      	b.n	8002a3c <HAL_RCC_OscConfig+0x110>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCC_OscConfig+0xf8>
 8002a0a:	4b64      	ldr	r3, [pc, #400]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a63      	ldr	r2, [pc, #396]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	4b61      	ldr	r3, [pc, #388]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a60      	ldr	r2, [pc, #384]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e00b      	b.n	8002a3c <HAL_RCC_OscConfig+0x110>
 8002a24:	4b5d      	ldr	r3, [pc, #372]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a5c      	ldr	r2, [pc, #368]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4b5a      	ldr	r3, [pc, #360]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a59      	ldr	r2, [pc, #356]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d013      	beq.n	8002a6c <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7ff f994 	bl	8001d70 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a4c:	f7ff f990 	bl	8001d70 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	; 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e2ce      	b.n	8002ffc <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	4b4f      	ldr	r3, [pc, #316]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x120>
 8002a6a:	e014      	b.n	8002a96 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6c:	f7ff f980 	bl	8001d70 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a74:	f7ff f97c 	bl	8001d70 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	; 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e2ba      	b.n	8002ffc <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a86:	4b45      	ldr	r3, [pc, #276]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x148>
 8002a92:	e000      	b.n	8002a96 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 8084 	beq.w	8002bac <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_RCC_OscConfig+0x192>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d004      	beq.n	8002abe <HAL_RCC_OscConfig+0x192>
 8002ab4:	f240 119d 	movw	r1, #413	; 0x19d
 8002ab8:	4837      	ldr	r0, [pc, #220]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002aba:	f7fe fd4d 	bl	8001558 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2b1f      	cmp	r3, #31
 8002ac4:	d904      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x1a4>
 8002ac6:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8002aca:	4833      	ldr	r0, [pc, #204]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	f7fe fd44 	bl	8001558 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ad0:	4b32      	ldr	r3, [pc, #200]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00b      	beq.n	8002af4 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002adc:	4b2f      	ldr	r3, [pc, #188]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d11c      	bne.n	8002b22 <HAL_RCC_OscConfig+0x1f6>
 8002ae8:	4b2c      	ldr	r3, [pc, #176]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d116      	bne.n	8002b22 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af4:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_OscConfig+0x1e0>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e277      	b.n	8002ffc <HAL_RCC_OscConfig+0x6d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0c:	4b23      	ldr	r3, [pc, #140]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4920      	ldr	r1, [pc, #128]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b20:	e044      	b.n	8002bac <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d023      	beq.n	8002b72 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b2a:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a1b      	ldr	r2, [pc, #108]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b36:	f7ff f91b 	bl	8001d70 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b3e:	f7ff f917 	bl	8001d70 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e255      	b.n	8002ffc <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b50:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	490c      	ldr	r1, [pc, #48]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	600b      	str	r3, [r1, #0]
 8002b70:	e01c      	b.n	8002bac <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b72:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a09      	ldr	r2, [pc, #36]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002b78:	f023 0301 	bic.w	r3, r3, #1
 8002b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7e:	f7ff f8f7 	bl	8001d70 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b84:	e00c      	b.n	8002ba0 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b86:	f7ff f8f3 	bl	8001d70 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d905      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e231      	b.n	8002ffc <HAL_RCC_OscConfig+0x6d0>
 8002b98:	08006b1c 	.word	0x08006b1c
 8002b9c:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba0:	4b7e      	ldr	r3, [pc, #504]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1ec      	bne.n	8002b86 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d043      	beq.n	8002c40 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d008      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x2a6>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d004      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x2a6>
 8002bc8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8002bcc:	4874      	ldr	r0, [pc, #464]	; (8002da0 <HAL_RCC_OscConfig+0x474>)
 8002bce:	f7fe fcc3 	bl	8001558 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d019      	beq.n	8002c0e <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bda:	4b70      	ldr	r3, [pc, #448]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bde:	4a6f      	ldr	r2, [pc, #444]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be6:	f7ff f8c3 	bl	8001d70 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bee:	f7ff f8bf 	bl	8001d70 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e1fd      	b.n	8002ffc <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c00:	4b66      	ldr	r3, [pc, #408]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x2c2>
 8002c0c:	e018      	b.n	8002c40 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c0e:	4b63      	ldr	r3, [pc, #396]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c12:	4a62      	ldr	r2, [pc, #392]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002c14:	f023 0301 	bic.w	r3, r3, #1
 8002c18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1a:	f7ff f8a9 	bl	8001d70 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c22:	f7ff f8a5 	bl	8001d70 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e1e3      	b.n	8002ffc <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c34:	4b59      	ldr	r3, [pc, #356]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f0      	bne.n	8002c22 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 80bc 	beq.w	8002dc6 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00c      	beq.n	8002c70 <HAL_RCC_OscConfig+0x344>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d008      	beq.n	8002c70 <HAL_RCC_OscConfig+0x344>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2b05      	cmp	r3, #5
 8002c64:	d004      	beq.n	8002c70 <HAL_RCC_OscConfig+0x344>
 8002c66:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002c6a:	484d      	ldr	r0, [pc, #308]	; (8002da0 <HAL_RCC_OscConfig+0x474>)
 8002c6c:	f7fe fc74 	bl	8001558 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c70:	4b4a      	ldr	r3, [pc, #296]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10d      	bne.n	8002c98 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7c:	4b47      	ldr	r3, [pc, #284]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	4a46      	ldr	r2, [pc, #280]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c86:	6413      	str	r3, [r2, #64]	; 0x40
 8002c88:	4b44      	ldr	r3, [pc, #272]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c94:	2301      	movs	r3, #1
 8002c96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c98:	4b42      	ldr	r3, [pc, #264]	; (8002da4 <HAL_RCC_OscConfig+0x478>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d118      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ca4:	4b3f      	ldr	r3, [pc, #252]	; (8002da4 <HAL_RCC_OscConfig+0x478>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a3e      	ldr	r2, [pc, #248]	; (8002da4 <HAL_RCC_OscConfig+0x478>)
 8002caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb0:	f7ff f85e 	bl	8001d70 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb8:	f7ff f85a 	bl	8001d70 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e198      	b.n	8002ffc <HAL_RCC_OscConfig+0x6d0>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cca:	4b36      	ldr	r3, [pc, #216]	; (8002da4 <HAL_RCC_OscConfig+0x478>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d106      	bne.n	8002cec <HAL_RCC_OscConfig+0x3c0>
 8002cde:	4b2f      	ldr	r3, [pc, #188]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce2:	4a2e      	ldr	r2, [pc, #184]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cea:	e02d      	b.n	8002d48 <HAL_RCC_OscConfig+0x41c>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10c      	bne.n	8002d0e <HAL_RCC_OscConfig+0x3e2>
 8002cf4:	4b29      	ldr	r3, [pc, #164]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf8:	4a28      	ldr	r2, [pc, #160]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002cfa:	f023 0301 	bic.w	r3, r3, #1
 8002cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002d00:	4b26      	ldr	r3, [pc, #152]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d04:	4a25      	ldr	r2, [pc, #148]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002d06:	f023 0304 	bic.w	r3, r3, #4
 8002d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0c:	e01c      	b.n	8002d48 <HAL_RCC_OscConfig+0x41c>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2b05      	cmp	r3, #5
 8002d14:	d10c      	bne.n	8002d30 <HAL_RCC_OscConfig+0x404>
 8002d16:	4b21      	ldr	r3, [pc, #132]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1a:	4a20      	ldr	r2, [pc, #128]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002d1c:	f043 0304 	orr.w	r3, r3, #4
 8002d20:	6713      	str	r3, [r2, #112]	; 0x70
 8002d22:	4b1e      	ldr	r3, [pc, #120]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d26:	4a1d      	ldr	r2, [pc, #116]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2e:	e00b      	b.n	8002d48 <HAL_RCC_OscConfig+0x41c>
 8002d30:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d34:	4a19      	ldr	r2, [pc, #100]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002d36:	f023 0301 	bic.w	r3, r3, #1
 8002d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3c:	4b17      	ldr	r3, [pc, #92]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d40:	4a16      	ldr	r2, [pc, #88]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002d42:	f023 0304 	bic.w	r3, r3, #4
 8002d46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d015      	beq.n	8002d7c <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d50:	f7ff f80e 	bl	8001d70 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d56:	e00a      	b.n	8002d6e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d58:	f7ff f80a 	bl	8001d70 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e146      	b.n	8002ffc <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_RCC_OscConfig+0x470>)
 8002d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0ee      	beq.n	8002d58 <HAL_RCC_OscConfig+0x42c>
 8002d7a:	e01b      	b.n	8002db4 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fe fff8 	bl	8001d70 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d82:	e011      	b.n	8002da8 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d84:	f7fe fff4 	bl	8001d70 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d908      	bls.n	8002da8 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e130      	b.n	8002ffc <HAL_RCC_OscConfig+0x6d0>
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	08006b1c 	.word	0x08006b1c
 8002da4:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da8:	4b96      	ldr	r3, [pc, #600]	; (8003004 <HAL_RCC_OscConfig+0x6d8>)
 8002daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1e7      	bne.n	8002d84 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002db4:	7dfb      	ldrb	r3, [r7, #23]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d105      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dba:	4b92      	ldr	r3, [pc, #584]	; (8003004 <HAL_RCC_OscConfig+0x6d8>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	4a91      	ldr	r2, [pc, #580]	; (8003004 <HAL_RCC_OscConfig+0x6d8>)
 8002dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00c      	beq.n	8002de8 <HAL_RCC_OscConfig+0x4bc>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d008      	beq.n	8002de8 <HAL_RCC_OscConfig+0x4bc>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d004      	beq.n	8002de8 <HAL_RCC_OscConfig+0x4bc>
 8002dde:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8002de2:	4889      	ldr	r0, [pc, #548]	; (8003008 <HAL_RCC_OscConfig+0x6dc>)
 8002de4:	f7fe fbb8 	bl	8001558 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 8104 	beq.w	8002ffa <HAL_RCC_OscConfig+0x6ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df2:	4b84      	ldr	r3, [pc, #528]	; (8003004 <HAL_RCC_OscConfig+0x6d8>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 030c 	and.w	r3, r3, #12
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	f000 80c3 	beq.w	8002f86 <HAL_RCC_OscConfig+0x65a>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	f040 80a4 	bne.w	8002f52 <HAL_RCC_OscConfig+0x626>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d009      	beq.n	8002e26 <HAL_RCC_OscConfig+0x4fa>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e1a:	d004      	beq.n	8002e26 <HAL_RCC_OscConfig+0x4fa>
 8002e1c:	f240 2155 	movw	r1, #597	; 0x255
 8002e20:	4879      	ldr	r0, [pc, #484]	; (8003008 <HAL_RCC_OscConfig+0x6dc>)
 8002e22:	f7fe fb99 	bl	8001558 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d903      	bls.n	8002e36 <HAL_RCC_OscConfig+0x50a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	2b3f      	cmp	r3, #63	; 0x3f
 8002e34:	d904      	bls.n	8002e40 <HAL_RCC_OscConfig+0x514>
 8002e36:	f240 2156 	movw	r1, #598	; 0x256
 8002e3a:	4873      	ldr	r0, [pc, #460]	; (8003008 <HAL_RCC_OscConfig+0x6dc>)
 8002e3c:	f7fe fb8c 	bl	8001558 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	2b31      	cmp	r3, #49	; 0x31
 8002e46:	d904      	bls.n	8002e52 <HAL_RCC_OscConfig+0x526>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002e50:	d904      	bls.n	8002e5c <HAL_RCC_OscConfig+0x530>
 8002e52:	f240 2157 	movw	r1, #599	; 0x257
 8002e56:	486c      	ldr	r0, [pc, #432]	; (8003008 <HAL_RCC_OscConfig+0x6dc>)
 8002e58:	f7fe fb7e 	bl	8001558 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d010      	beq.n	8002e86 <HAL_RCC_OscConfig+0x55a>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d00c      	beq.n	8002e86 <HAL_RCC_OscConfig+0x55a>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	2b06      	cmp	r3, #6
 8002e72:	d008      	beq.n	8002e86 <HAL_RCC_OscConfig+0x55a>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d004      	beq.n	8002e86 <HAL_RCC_OscConfig+0x55a>
 8002e7c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002e80:	4861      	ldr	r0, [pc, #388]	; (8003008 <HAL_RCC_OscConfig+0x6dc>)
 8002e82:	f7fe fb69 	bl	8001558 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d903      	bls.n	8002e96 <HAL_RCC_OscConfig+0x56a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e92:	2b0f      	cmp	r3, #15
 8002e94:	d904      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x574>
 8002e96:	f240 2159 	movw	r1, #601	; 0x259
 8002e9a:	485b      	ldr	r0, [pc, #364]	; (8003008 <HAL_RCC_OscConfig+0x6dc>)
 8002e9c:	f7fe fb5c 	bl	8001558 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d903      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x584>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	2b07      	cmp	r3, #7
 8002eae:	d904      	bls.n	8002eba <HAL_RCC_OscConfig+0x58e>
 8002eb0:	f240 215b 	movw	r1, #603	; 0x25b
 8002eb4:	4854      	ldr	r0, [pc, #336]	; (8003008 <HAL_RCC_OscConfig+0x6dc>)
 8002eb6:	f7fe fb4f 	bl	8001558 <assert_failed>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eba:	4b52      	ldr	r3, [pc, #328]	; (8003004 <HAL_RCC_OscConfig+0x6d8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a51      	ldr	r2, [pc, #324]	; (8003004 <HAL_RCC_OscConfig+0x6d8>)
 8002ec0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec6:	f7fe ff53 	bl	8001d70 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x5b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ece:	f7fe ff4f 	bl	8001d70 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x5b4>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e08d      	b.n	8002ffc <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee0:	4b48      	ldr	r3, [pc, #288]	; (8003004 <HAL_RCC_OscConfig+0x6d8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f0      	bne.n	8002ece <HAL_RCC_OscConfig+0x5a2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69da      	ldr	r2, [r3, #28]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	019b      	lsls	r3, r3, #6
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f02:	085b      	lsrs	r3, r3, #1
 8002f04:	3b01      	subs	r3, #1
 8002f06:	041b      	lsls	r3, r3, #16
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	061b      	lsls	r3, r3, #24
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	071b      	lsls	r3, r3, #28
 8002f18:	493a      	ldr	r1, [pc, #232]	; (8003004 <HAL_RCC_OscConfig+0x6d8>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f1e:	4b39      	ldr	r3, [pc, #228]	; (8003004 <HAL_RCC_OscConfig+0x6d8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a38      	ldr	r2, [pc, #224]	; (8003004 <HAL_RCC_OscConfig+0x6d8>)
 8002f24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2a:	f7fe ff21 	bl	8001d70 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x618>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f32:	f7fe ff1d 	bl	8001d70 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e05b      	b.n	8002ffc <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f44:	4b2f      	ldr	r3, [pc, #188]	; (8003004 <HAL_RCC_OscConfig+0x6d8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0f0      	beq.n	8002f32 <HAL_RCC_OscConfig+0x606>
 8002f50:	e053      	b.n	8002ffa <HAL_RCC_OscConfig+0x6ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f52:	4b2c      	ldr	r3, [pc, #176]	; (8003004 <HAL_RCC_OscConfig+0x6d8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a2b      	ldr	r2, [pc, #172]	; (8003004 <HAL_RCC_OscConfig+0x6d8>)
 8002f58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5e:	f7fe ff07 	bl	8001d70 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x64c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f66:	f7fe ff03 	bl	8001d70 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e041      	b.n	8002ffc <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f78:	4b22      	ldr	r3, [pc, #136]	; (8003004 <HAL_RCC_OscConfig+0x6d8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1f0      	bne.n	8002f66 <HAL_RCC_OscConfig+0x63a>
 8002f84:	e039      	b.n	8002ffa <HAL_RCC_OscConfig+0x6ce>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f86:	4b1f      	ldr	r3, [pc, #124]	; (8003004 <HAL_RCC_OscConfig+0x6d8>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d030      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d129      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d122      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fbc:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d119      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	085b      	lsrs	r3, r3, #1
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d10f      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff0:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCC_OscConfig+0x6ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <HAL_RCC_OscConfig+0x6d0>
      }
    }
  }
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40023800 	.word	0x40023800
 8003008:	08006b1c 	.word	0x08006b1c

0800300c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e18c      	b.n	800333e <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <HAL_RCC_ClockConfig+0x28>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b0f      	cmp	r3, #15
 8003032:	d904      	bls.n	800303e <HAL_RCC_ClockConfig+0x32>
 8003034:	f240 21df 	movw	r1, #735	; 0x2df
 8003038:	4887      	ldr	r0, [pc, #540]	; (8003258 <HAL_RCC_ClockConfig+0x24c>)
 800303a:	f7fe fa8d 	bl	8001558 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d031      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x9c>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d02e      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x9c>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d02b      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x9c>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	2b03      	cmp	r3, #3
 8003054:	d028      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x9c>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b04      	cmp	r3, #4
 800305a:	d025      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x9c>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	2b05      	cmp	r3, #5
 8003060:	d022      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x9c>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b06      	cmp	r3, #6
 8003066:	d01f      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x9c>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	2b07      	cmp	r3, #7
 800306c:	d01c      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x9c>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b08      	cmp	r3, #8
 8003072:	d019      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x9c>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	2b09      	cmp	r3, #9
 8003078:	d016      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x9c>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b0a      	cmp	r3, #10
 800307e:	d013      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x9c>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	2b0b      	cmp	r3, #11
 8003084:	d010      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x9c>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b0c      	cmp	r3, #12
 800308a:	d00d      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x9c>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2b0d      	cmp	r3, #13
 8003090:	d00a      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x9c>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b0e      	cmp	r3, #14
 8003096:	d007      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x9c>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b0f      	cmp	r3, #15
 800309c:	d004      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x9c>
 800309e:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 80030a2:	486d      	ldr	r0, [pc, #436]	; (8003258 <HAL_RCC_ClockConfig+0x24c>)
 80030a4:	f7fe fa58 	bl	8001558 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030a8:	4b6c      	ldr	r3, [pc, #432]	; (800325c <HAL_RCC_ClockConfig+0x250>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d910      	bls.n	80030d8 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b6:	4b69      	ldr	r3, [pc, #420]	; (800325c <HAL_RCC_ClockConfig+0x250>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 020f 	bic.w	r2, r3, #15
 80030be:	4967      	ldr	r1, [pc, #412]	; (800325c <HAL_RCC_ClockConfig+0x250>)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c6:	4b65      	ldr	r3, [pc, #404]	; (800325c <HAL_RCC_ClockConfig+0x250>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e132      	b.n	800333e <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d049      	beq.n	8003178 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f0:	4b5b      	ldr	r3, [pc, #364]	; (8003260 <HAL_RCC_ClockConfig+0x254>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4a5a      	ldr	r2, [pc, #360]	; (8003260 <HAL_RCC_ClockConfig+0x254>)
 80030f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003108:	4b55      	ldr	r3, [pc, #340]	; (8003260 <HAL_RCC_ClockConfig+0x254>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	4a54      	ldr	r2, [pc, #336]	; (8003260 <HAL_RCC_ClockConfig+0x254>)
 800310e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003112:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d024      	beq.n	8003166 <HAL_RCC_ClockConfig+0x15a>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b80      	cmp	r3, #128	; 0x80
 8003122:	d020      	beq.n	8003166 <HAL_RCC_ClockConfig+0x15a>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	2b90      	cmp	r3, #144	; 0x90
 800312a:	d01c      	beq.n	8003166 <HAL_RCC_ClockConfig+0x15a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2ba0      	cmp	r3, #160	; 0xa0
 8003132:	d018      	beq.n	8003166 <HAL_RCC_ClockConfig+0x15a>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2bb0      	cmp	r3, #176	; 0xb0
 800313a:	d014      	beq.n	8003166 <HAL_RCC_ClockConfig+0x15a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2bc0      	cmp	r3, #192	; 0xc0
 8003142:	d010      	beq.n	8003166 <HAL_RCC_ClockConfig+0x15a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2bd0      	cmp	r3, #208	; 0xd0
 800314a:	d00c      	beq.n	8003166 <HAL_RCC_ClockConfig+0x15a>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2be0      	cmp	r3, #224	; 0xe0
 8003152:	d008      	beq.n	8003166 <HAL_RCC_ClockConfig+0x15a>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2bf0      	cmp	r3, #240	; 0xf0
 800315a:	d004      	beq.n	8003166 <HAL_RCC_ClockConfig+0x15a>
 800315c:	f44f 7141 	mov.w	r1, #772	; 0x304
 8003160:	483d      	ldr	r0, [pc, #244]	; (8003258 <HAL_RCC_ClockConfig+0x24c>)
 8003162:	f7fe f9f9 	bl	8001558 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003166:	4b3e      	ldr	r3, [pc, #248]	; (8003260 <HAL_RCC_ClockConfig+0x254>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	493b      	ldr	r1, [pc, #236]	; (8003260 <HAL_RCC_ClockConfig+0x254>)
 8003174:	4313      	orrs	r3, r2
 8003176:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d051      	beq.n	8003228 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00c      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x19a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d008      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x19a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b02      	cmp	r3, #2
 800319a:	d004      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x19a>
 800319c:	f240 310b 	movw	r1, #779	; 0x30b
 80031a0:	482d      	ldr	r0, [pc, #180]	; (8003258 <HAL_RCC_ClockConfig+0x24c>)
 80031a2:	f7fe f9d9 	bl	8001558 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d107      	bne.n	80031be <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ae:	4b2c      	ldr	r3, [pc, #176]	; (8003260 <HAL_RCC_ClockConfig+0x254>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d115      	bne.n	80031e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e0bf      	b.n	800333e <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d107      	bne.n	80031d6 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c6:	4b26      	ldr	r3, [pc, #152]	; (8003260 <HAL_RCC_ClockConfig+0x254>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d109      	bne.n	80031e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e0b3      	b.n	800333e <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d6:	4b22      	ldr	r3, [pc, #136]	; (8003260 <HAL_RCC_ClockConfig+0x254>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e0ab      	b.n	800333e <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031e6:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <HAL_RCC_ClockConfig+0x254>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f023 0203 	bic.w	r2, r3, #3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	491b      	ldr	r1, [pc, #108]	; (8003260 <HAL_RCC_ClockConfig+0x254>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f8:	f7fe fdba 	bl	8001d70 <HAL_GetTick>
 80031fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fe:	e00a      	b.n	8003216 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003200:	f7fe fdb6 	bl	8001d70 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	f241 3288 	movw	r2, #5000	; 0x1388
 800320e:	4293      	cmp	r3, r2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e093      	b.n	800333e <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003216:	4b12      	ldr	r3, [pc, #72]	; (8003260 <HAL_RCC_ClockConfig+0x254>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 020c 	and.w	r2, r3, #12
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	429a      	cmp	r2, r3
 8003226:	d1eb      	bne.n	8003200 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003228:	4b0c      	ldr	r3, [pc, #48]	; (800325c <HAL_RCC_ClockConfig+0x250>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 030f 	and.w	r3, r3, #15
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d216      	bcs.n	8003264 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003236:	4b09      	ldr	r3, [pc, #36]	; (800325c <HAL_RCC_ClockConfig+0x250>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 020f 	bic.w	r2, r3, #15
 800323e:	4907      	ldr	r1, [pc, #28]	; (800325c <HAL_RCC_ClockConfig+0x250>)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	4313      	orrs	r3, r2
 8003244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003246:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_RCC_ClockConfig+0x250>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d007      	beq.n	8003264 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e072      	b.n	800333e <HAL_RCC_ClockConfig+0x332>
 8003258:	08006b1c 	.word	0x08006b1c
 800325c:	40023c00 	.word	0x40023c00
 8003260:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d025      	beq.n	80032bc <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d018      	beq.n	80032aa <HAL_RCC_ClockConfig+0x29e>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003280:	d013      	beq.n	80032aa <HAL_RCC_ClockConfig+0x29e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800328a:	d00e      	beq.n	80032aa <HAL_RCC_ClockConfig+0x29e>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003294:	d009      	beq.n	80032aa <HAL_RCC_ClockConfig+0x29e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800329e:	d004      	beq.n	80032aa <HAL_RCC_ClockConfig+0x29e>
 80032a0:	f44f 7152 	mov.w	r1, #840	; 0x348
 80032a4:	4828      	ldr	r0, [pc, #160]	; (8003348 <HAL_RCC_ClockConfig+0x33c>)
 80032a6:	f7fe f957 	bl	8001558 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032aa:	4b28      	ldr	r3, [pc, #160]	; (800334c <HAL_RCC_ClockConfig+0x340>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	4925      	ldr	r1, [pc, #148]	; (800334c <HAL_RCC_ClockConfig+0x340>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d026      	beq.n	8003316 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d018      	beq.n	8003302 <HAL_RCC_ClockConfig+0x2f6>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d8:	d013      	beq.n	8003302 <HAL_RCC_ClockConfig+0x2f6>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80032e2:	d00e      	beq.n	8003302 <HAL_RCC_ClockConfig+0x2f6>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80032ec:	d009      	beq.n	8003302 <HAL_RCC_ClockConfig+0x2f6>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80032f6:	d004      	beq.n	8003302 <HAL_RCC_ClockConfig+0x2f6>
 80032f8:	f240 314f 	movw	r1, #847	; 0x34f
 80032fc:	4812      	ldr	r0, [pc, #72]	; (8003348 <HAL_RCC_ClockConfig+0x33c>)
 80032fe:	f7fe f92b 	bl	8001558 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003302:	4b12      	ldr	r3, [pc, #72]	; (800334c <HAL_RCC_ClockConfig+0x340>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	490e      	ldr	r1, [pc, #56]	; (800334c <HAL_RCC_ClockConfig+0x340>)
 8003312:	4313      	orrs	r3, r2
 8003314:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003316:	f000 f821 	bl	800335c <HAL_RCC_GetSysClockFreq>
 800331a:	4601      	mov	r1, r0
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <HAL_RCC_ClockConfig+0x340>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	4a0a      	ldr	r2, [pc, #40]	; (8003350 <HAL_RCC_ClockConfig+0x344>)
 8003328:	5cd3      	ldrb	r3, [r2, r3]
 800332a:	fa21 f303 	lsr.w	r3, r1, r3
 800332e:	4a09      	ldr	r2, [pc, #36]	; (8003354 <HAL_RCC_ClockConfig+0x348>)
 8003330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003332:	4b09      	ldr	r3, [pc, #36]	; (8003358 <HAL_RCC_ClockConfig+0x34c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe fcd6 	bl	8001ce8 <HAL_InitTick>

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	08006b1c 	.word	0x08006b1c
 800334c:	40023800 	.word	0x40023800
 8003350:	08006c04 	.word	0x08006c04
 8003354:	20000000 	.word	0x20000000
 8003358:	20000004 	.word	0x20000004

0800335c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800335c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	2300      	movs	r3, #0
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	2300      	movs	r3, #0
 800336c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800336e:	2300      	movs	r3, #0
 8003370:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003372:	4b50      	ldr	r3, [pc, #320]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b04      	cmp	r3, #4
 800337c:	d007      	beq.n	800338e <HAL_RCC_GetSysClockFreq+0x32>
 800337e:	2b08      	cmp	r3, #8
 8003380:	d008      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x38>
 8003382:	2b00      	cmp	r3, #0
 8003384:	f040 808d 	bne.w	80034a2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003388:	4b4b      	ldr	r3, [pc, #300]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800338a:	60bb      	str	r3, [r7, #8]
      break;
 800338c:	e08c      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800338e:	4b4b      	ldr	r3, [pc, #300]	; (80034bc <HAL_RCC_GetSysClockFreq+0x160>)
 8003390:	60bb      	str	r3, [r7, #8]
      break;
 8003392:	e089      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003394:	4b47      	ldr	r3, [pc, #284]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800339c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800339e:	4b45      	ldr	r3, [pc, #276]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x158>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d023      	beq.n	80033f2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033aa:	4b42      	ldr	r3, [pc, #264]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x158>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	099b      	lsrs	r3, r3, #6
 80033b0:	f04f 0400 	mov.w	r4, #0
 80033b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	ea03 0501 	and.w	r5, r3, r1
 80033c0:	ea04 0602 	and.w	r6, r4, r2
 80033c4:	4a3d      	ldr	r2, [pc, #244]	; (80034bc <HAL_RCC_GetSysClockFreq+0x160>)
 80033c6:	fb02 f106 	mul.w	r1, r2, r6
 80033ca:	2200      	movs	r2, #0
 80033cc:	fb02 f205 	mul.w	r2, r2, r5
 80033d0:	440a      	add	r2, r1
 80033d2:	493a      	ldr	r1, [pc, #232]	; (80034bc <HAL_RCC_GetSysClockFreq+0x160>)
 80033d4:	fba5 0101 	umull	r0, r1, r5, r1
 80033d8:	1853      	adds	r3, r2, r1
 80033da:	4619      	mov	r1, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f04f 0400 	mov.w	r4, #0
 80033e2:	461a      	mov	r2, r3
 80033e4:	4623      	mov	r3, r4
 80033e6:	f7fc ff27 	bl	8000238 <__aeabi_uldivmod>
 80033ea:	4603      	mov	r3, r0
 80033ec:	460c      	mov	r4, r1
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	e049      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f2:	4b30      	ldr	r3, [pc, #192]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x158>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	099b      	lsrs	r3, r3, #6
 80033f8:	f04f 0400 	mov.w	r4, #0
 80033fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	ea03 0501 	and.w	r5, r3, r1
 8003408:	ea04 0602 	and.w	r6, r4, r2
 800340c:	4629      	mov	r1, r5
 800340e:	4632      	mov	r2, r6
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	f04f 0400 	mov.w	r4, #0
 8003418:	0154      	lsls	r4, r2, #5
 800341a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800341e:	014b      	lsls	r3, r1, #5
 8003420:	4619      	mov	r1, r3
 8003422:	4622      	mov	r2, r4
 8003424:	1b49      	subs	r1, r1, r5
 8003426:	eb62 0206 	sbc.w	r2, r2, r6
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	f04f 0400 	mov.w	r4, #0
 8003432:	0194      	lsls	r4, r2, #6
 8003434:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003438:	018b      	lsls	r3, r1, #6
 800343a:	1a5b      	subs	r3, r3, r1
 800343c:	eb64 0402 	sbc.w	r4, r4, r2
 8003440:	f04f 0100 	mov.w	r1, #0
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	00e2      	lsls	r2, r4, #3
 800344a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800344e:	00d9      	lsls	r1, r3, #3
 8003450:	460b      	mov	r3, r1
 8003452:	4614      	mov	r4, r2
 8003454:	195b      	adds	r3, r3, r5
 8003456:	eb44 0406 	adc.w	r4, r4, r6
 800345a:	f04f 0100 	mov.w	r1, #0
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	02a2      	lsls	r2, r4, #10
 8003464:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003468:	0299      	lsls	r1, r3, #10
 800346a:	460b      	mov	r3, r1
 800346c:	4614      	mov	r4, r2
 800346e:	4618      	mov	r0, r3
 8003470:	4621      	mov	r1, r4
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f04f 0400 	mov.w	r4, #0
 8003478:	461a      	mov	r2, r3
 800347a:	4623      	mov	r3, r4
 800347c:	f7fc fedc 	bl	8000238 <__aeabi_uldivmod>
 8003480:	4603      	mov	r3, r0
 8003482:	460c      	mov	r4, r1
 8003484:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003486:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	0c1b      	lsrs	r3, r3, #16
 800348c:	f003 0303 	and.w	r3, r3, #3
 8003490:	3301      	adds	r3, #1
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	fbb2 f3f3 	udiv	r3, r2, r3
 800349e:	60bb      	str	r3, [r7, #8]
      break;
 80034a0:	e002      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034a2:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80034a4:	60bb      	str	r3, [r7, #8]
      break;
 80034a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034a8:	68bb      	ldr	r3, [r7, #8]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40023800 	.word	0x40023800
 80034b8:	00f42400 	.word	0x00f42400
 80034bc:	017d7840 	.word	0x017d7840

080034c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c4:	4b03      	ldr	r3, [pc, #12]	; (80034d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034c6:	681b      	ldr	r3, [r3, #0]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20000000 	.word	0x20000000

080034d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034dc:	f7ff fff0 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 80034e0:	4601      	mov	r1, r0
 80034e2:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	0a9b      	lsrs	r3, r3, #10
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	4a03      	ldr	r2, [pc, #12]	; (80034fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ee:	5cd3      	ldrb	r3, [r2, r3]
 80034f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40023800 	.word	0x40023800
 80034fc:	08006c14 	.word	0x08006c14

08003500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003504:	f7ff ffdc 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 8003508:	4601      	mov	r1, r0
 800350a:	4b05      	ldr	r3, [pc, #20]	; (8003520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	0b5b      	lsrs	r3, r3, #13
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	4a03      	ldr	r2, [pc, #12]	; (8003524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003516:	5cd3      	ldrb	r3, [r2, r3]
 8003518:	fa21 f303 	lsr.w	r3, r1, r3
}
 800351c:	4618      	mov	r0, r3
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40023800 	.word	0x40023800
 8003524:	08006c14 	.word	0x08006c14

08003528 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003534:	2300      	movs	r3, #0
 8003536:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	f040 809e 	bne.w	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	f040 8097 	bne.w	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0310 	and.w	r3, r3, #16
 8003568:	2b00      	cmp	r3, #0
 800356a:	f040 8090 	bne.w	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	f040 8089 	bne.w	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003584:	2b00      	cmp	r3, #0
 8003586:	f040 8082 	bne.w	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003592:	2b00      	cmp	r3, #0
 8003594:	d17b      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d175      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d16f      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d169      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d163      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d15d      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d157      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d151      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d14b      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d145      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d13f      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d139      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d133      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d12d      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d127      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d121      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d11b      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d115      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10f      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d109      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d103      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003686:	2174      	movs	r1, #116	; 0x74
 8003688:	48a2      	ldr	r0, [pc, #648]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800368a:	f7fd ff65 	bl	8001558 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d01f      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036aa:	d003      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80036ac:	217a      	movs	r1, #122	; 0x7a
 80036ae:	4899      	ldr	r0, [pc, #612]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80036b0:	f7fd ff52 	bl	8001558 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036b4:	4b98      	ldr	r3, [pc, #608]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	4a97      	ldr	r2, [pc, #604]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80036ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80036be:	6093      	str	r3, [r2, #8]
 80036c0:	4b95      	ldr	r3, [pc, #596]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c8:	4993      	ldr	r1, [pc, #588]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      plli2sused = 1;
 80036d6:	2301      	movs	r3, #1
 80036d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d02e      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d012      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036f6:	d00d      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003700:	d008      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003706:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800370a:	d003      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800370c:	218a      	movs	r1, #138	; 0x8a
 800370e:	4881      	ldr	r0, [pc, #516]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003710:	f7fd ff22 	bl	8001558 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003714:	4b80      	ldr	r3, [pc, #512]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800371a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003722:	497d      	ldr	r1, [pc, #500]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003732:	d101      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x210>
    {
      plli2sused = 1;
 8003734:	2301      	movs	r3, #1
 8003736:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      pllsaiused = 1;
 8003740:	2301      	movs	r3, #1
 8003742:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d02e      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	2b00      	cmp	r3, #0
 8003756:	d012      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003760:	d00d      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800376a:	d008      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x256>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003774:	d003      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003776:	219e      	movs	r1, #158	; 0x9e
 8003778:	4866      	ldr	r0, [pc, #408]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800377a:	f7fd feed 	bl	8001558 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800377e:	4b66      	ldr	r3, [pc, #408]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003784:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	4962      	ldr	r1, [pc, #392]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800379c:	d101      	bne.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      plli2sused = 1;
 800379e:	2301      	movs	r3, #1
 80037a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      pllsaiused = 1;
 80037aa:	2301      	movs	r3, #1
 80037ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
      plli2sused = 1;
 80037ba:	2301      	movs	r3, #1
 80037bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 8187 	beq.w	8003ada <HAL_RCCEx_PeriphCLKConfig+0x5b2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037d4:	f000 80eb 	beq.w	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e0:	f000 80e5 	beq.w	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	4a4c      	ldr	r2, [pc, #304]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	f000 80df 	beq.w	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	4a4a      	ldr	r2, [pc, #296]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	f000 80d9 	beq.w	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	4a48      	ldr	r2, [pc, #288]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003802:	4293      	cmp	r3, r2
 8003804:	f000 80d3 	beq.w	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380c:	4a46      	ldr	r2, [pc, #280]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800380e:	4293      	cmp	r3, r2
 8003810:	f000 80cd 	beq.w	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	4a44      	ldr	r2, [pc, #272]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x404>)
 800381a:	4293      	cmp	r3, r2
 800381c:	f000 80c7 	beq.w	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	4a42      	ldr	r2, [pc, #264]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8003826:	4293      	cmp	r3, r2
 8003828:	f000 80c1 	beq.w	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	4a40      	ldr	r2, [pc, #256]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	f000 80bb 	beq.w	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	4a3e      	ldr	r2, [pc, #248]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x410>)
 800383e:	4293      	cmp	r3, r2
 8003840:	f000 80b5 	beq.w	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	4a3c      	ldr	r2, [pc, #240]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x414>)
 800384a:	4293      	cmp	r3, r2
 800384c:	f000 80af 	beq.w	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	4a3a      	ldr	r2, [pc, #232]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 8003856:	4293      	cmp	r3, r2
 8003858:	f000 80a9 	beq.w	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	4a38      	ldr	r2, [pc, #224]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	f000 80a3 	beq.w	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386c:	4a36      	ldr	r2, [pc, #216]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 800386e:	4293      	cmp	r3, r2
 8003870:	f000 809d 	beq.w	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	4a34      	ldr	r2, [pc, #208]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800387a:	4293      	cmp	r3, r2
 800387c:	f000 8097 	beq.w	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	4a32      	ldr	r2, [pc, #200]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003886:	4293      	cmp	r3, r2
 8003888:	f000 8091 	beq.w	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	4a30      	ldr	r2, [pc, #192]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	f000 808b 	beq.w	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389c:	4a2e      	ldr	r2, [pc, #184]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	f000 8085 	beq.w	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	4a2c      	ldr	r2, [pc, #176]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d07f      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	4a2b      	ldr	r2, [pc, #172]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d07a      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	4a29      	ldr	r2, [pc, #164]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d075      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	4a28      	ldr	r2, [pc, #160]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d070      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	4a26      	ldr	r2, [pc, #152]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d06b      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	4a25      	ldr	r2, [pc, #148]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d066      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e4:	4a23      	ldr	r2, [pc, #140]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d061      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	4a22      	ldr	r2, [pc, #136]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d05c      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f8:	4a20      	ldr	r2, [pc, #128]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d057      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	4a1f      	ldr	r2, [pc, #124]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d052      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390c:	4a1d      	ldr	r2, [pc, #116]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d04d      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003912:	e039      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003914:	08006b54 	.word	0x08006b54
 8003918:	40023800 	.word	0x40023800
 800391c:	00020300 	.word	0x00020300
 8003920:	00030300 	.word	0x00030300
 8003924:	00040300 	.word	0x00040300
 8003928:	00050300 	.word	0x00050300
 800392c:	00060300 	.word	0x00060300
 8003930:	00070300 	.word	0x00070300
 8003934:	00080300 	.word	0x00080300
 8003938:	00090300 	.word	0x00090300
 800393c:	000a0300 	.word	0x000a0300
 8003940:	000b0300 	.word	0x000b0300
 8003944:	000c0300 	.word	0x000c0300
 8003948:	000d0300 	.word	0x000d0300
 800394c:	000e0300 	.word	0x000e0300
 8003950:	000f0300 	.word	0x000f0300
 8003954:	00100300 	.word	0x00100300
 8003958:	00110300 	.word	0x00110300
 800395c:	00120300 	.word	0x00120300
 8003960:	00130300 	.word	0x00130300
 8003964:	00140300 	.word	0x00140300
 8003968:	00150300 	.word	0x00150300
 800396c:	00160300 	.word	0x00160300
 8003970:	00170300 	.word	0x00170300
 8003974:	00180300 	.word	0x00180300
 8003978:	00190300 	.word	0x00190300
 800397c:	001a0300 	.word	0x001a0300
 8003980:	001b0300 	.word	0x001b0300
 8003984:	001c0300 	.word	0x001c0300
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398c:	4a44      	ldr	r2, [pc, #272]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d00d      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	4a43      	ldr	r2, [pc, #268]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d008      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a0:	4a41      	ldr	r2, [pc, #260]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d003      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 80039a6:	21b9      	movs	r1, #185	; 0xb9
 80039a8:	4840      	ldr	r0, [pc, #256]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80039aa:	f7fd fdd5 	bl	8001558 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039ae:	4b40      	ldr	r3, [pc, #256]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	4a3f      	ldr	r2, [pc, #252]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80039b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b8:	6413      	str	r3, [r2, #64]	; 0x40
 80039ba:	4b3d      	ldr	r3, [pc, #244]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039c6:	4b3b      	ldr	r3, [pc, #236]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a3a      	ldr	r2, [pc, #232]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80039cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039d2:	f7fe f9cd 	bl	8001d70 <HAL_GetTick>
 80039d6:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039d8:	e009      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039da:	f7fe f9c9 	bl	8001d70 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b64      	cmp	r3, #100	; 0x64
 80039e6:	d902      	bls.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x4c6>
      {
        return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	f000 be00 	b.w	80045ee <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039ee:	4b31      	ldr	r3, [pc, #196]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0ef      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039fa:	4b2d      	ldr	r3, [pc, #180]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a02:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d036      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d02f      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a18:	4b25      	ldr	r3, [pc, #148]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a20:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a22:	4b23      	ldr	r3, [pc, #140]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a26:	4a22      	ldr	r2, [pc, #136]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a2c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a2e:	4b20      	ldr	r3, [pc, #128]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	4a1f      	ldr	r2, [pc, #124]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a3a:	4a1d      	ldr	r2, [pc, #116]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a40:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d115      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x550>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4c:	f7fe f990 	bl	8001d70 <HAL_GetTick>
 8003a50:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a52:	e00b      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x544>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a54:	f7fe f98c 	bl	8001d70 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d902      	bls.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x544>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	f000 bdc1 	b.w	80045ee <HAL_RCCEx_PeriphCLKConfig+0x10c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6c:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0ed      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a84:	d11a      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003a86:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a92:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8003a94:	400b      	ands	r3, r1
 8003a96:	4906      	ldr	r1, [pc, #24]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	608b      	str	r3, [r1, #8]
 8003a9c:	e014      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 8003a9e:	bf00      	nop
 8003aa0:	001d0300 	.word	0x001d0300
 8003aa4:	001e0300 	.word	0x001e0300
 8003aa8:	001f0300 	.word	0x001f0300
 8003aac:	08006b54 	.word	0x08006b54
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	40007000 	.word	0x40007000
 8003ab8:	0ffffcff 	.word	0x0ffffcff
 8003abc:	4ba7      	ldr	r3, [pc, #668]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	4aa6      	ldr	r2, [pc, #664]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ac2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ac6:	6093      	str	r3, [r2, #8]
 8003ac8:	4ba4      	ldr	r3, [pc, #656]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003aca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad4:	49a1      	ldr	r1, [pc, #644]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0310 	and.w	r3, r3, #16
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d01d      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d008      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003af6:	d003      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 8003af8:	21f3      	movs	r1, #243	; 0xf3
 8003afa:	4899      	ldr	r0, [pc, #612]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003afc:	f7fd fd2c 	bl	8001558 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b00:	4b96      	ldr	r3, [pc, #600]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b06:	4a95      	ldr	r2, [pc, #596]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b0c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b10:	4b92      	ldr	r3, [pc, #584]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b12:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1a:	4990      	ldr	r1, [pc, #576]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d01c      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00d      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3e:	d008      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b48:	d003      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 8003b4a:	21fd      	movs	r1, #253	; 0xfd
 8003b4c:	4884      	ldr	r0, [pc, #528]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b4e:	f7fd fd03 	bl	8001558 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b52:	4b82      	ldr	r3, [pc, #520]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b60:	497e      	ldr	r1, [pc, #504]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d01d      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00e      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b84:	d009      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b8e:	d004      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003b90:	f240 1107 	movw	r1, #263	; 0x107
 8003b94:	4872      	ldr	r0, [pc, #456]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b96:	f7fd fcdf 	bl	8001558 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b9a:	4b70      	ldr	r3, [pc, #448]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ba8:	496c      	ldr	r1, [pc, #432]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d01d      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00e      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bcc:	d009      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bd6:	d004      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8003bd8:	f240 1111 	movw	r1, #273	; 0x111
 8003bdc:	4860      	ldr	r0, [pc, #384]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003bde:	f7fd fcbb 	bl	8001558 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003be2:	4b5e      	ldr	r3, [pc, #376]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bf0:	495a      	ldr	r1, [pc, #360]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d01d      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x718>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00e      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x702>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c14:	d009      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x702>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c1e:	d004      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x702>
 8003c20:	f240 111b 	movw	r1, #283	; 0x11b
 8003c24:	484e      	ldr	r0, [pc, #312]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003c26:	f7fd fc97 	bl	8001558 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c2a:	4b4c      	ldr	r3, [pc, #304]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c38:	4948      	ldr	r1, [pc, #288]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d01f      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x764>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d010      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d00c      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d008      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d004      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8003c6c:	f240 1125 	movw	r1, #293	; 0x125
 8003c70:	483b      	ldr	r0, [pc, #236]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003c72:	f7fd fc71 	bl	8001558 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c76:	4b39      	ldr	r3, [pc, #228]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7c:	f023 0203 	bic.w	r2, r3, #3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c84:	4935      	ldr	r1, [pc, #212]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d01f      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d010      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d00c      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cac:	2b0c      	cmp	r3, #12
 8003cae:	d008      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d004      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8003cb8:	f240 112f 	movw	r1, #303	; 0x12f
 8003cbc:	4828      	ldr	r0, [pc, #160]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003cbe:	f7fd fc4b 	bl	8001558 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cc2:	4b26      	ldr	r3, [pc, #152]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc8:	f023 020c 	bic.w	r2, r3, #12
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd0:	4922      	ldr	r1, [pc, #136]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d01f      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d010      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf0:	2b10      	cmp	r3, #16
 8003cf2:	d00c      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf8:	2b30      	cmp	r3, #48	; 0x30
 8003cfa:	d008      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d004      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8003d04:	f240 1139 	movw	r1, #313	; 0x139
 8003d08:	4815      	ldr	r0, [pc, #84]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003d0a:	f7fd fc25 	bl	8001558 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d0e:	4b13      	ldr	r3, [pc, #76]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d1c:	490f      	ldr	r1, [pc, #60]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d024      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d015      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d3c:	2b40      	cmp	r3, #64	; 0x40
 8003d3e:	d011      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d44:	2bc0      	cmp	r3, #192	; 0xc0
 8003d46:	d00d      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4c:	2b80      	cmp	r3, #128	; 0x80
 8003d4e:	d009      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003d50:	f240 1143 	movw	r1, #323	; 0x143
 8003d54:	4802      	ldr	r0, [pc, #8]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003d56:	f7fd fbff 	bl	8001558 <assert_failed>
 8003d5a:	e003      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	08006b54 	.word	0x08006b54

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d64:	4bae      	ldr	r3, [pc, #696]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d72:	49ab      	ldr	r1, [pc, #684]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d022      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d013      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d96:	d00e      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003da0:	d009      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003daa:	d004      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8003dac:	f240 114d 	movw	r1, #333	; 0x14d
 8003db0:	489c      	ldr	r0, [pc, #624]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8003db2:	f7fd fbd1 	bl	8001558 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003db6:	4b9a      	ldr	r3, [pc, #616]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc4:	4996      	ldr	r1, [pc, #600]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d022      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d013      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de8:	d00e      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003df2:	d009      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dfc:	d004      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8003dfe:	f240 1157 	movw	r1, #343	; 0x157
 8003e02:	4888      	ldr	r0, [pc, #544]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8003e04:	f7fd fba8 	bl	8001558 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e08:	4b85      	ldr	r3, [pc, #532]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e16:	4982      	ldr	r1, [pc, #520]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d022      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d013      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x932>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e3a:	d00e      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x932>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e44:	d009      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x932>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e4e:	d004      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x932>
 8003e50:	f240 1161 	movw	r1, #353	; 0x161
 8003e54:	4873      	ldr	r0, [pc, #460]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8003e56:	f7fd fb7f 	bl	8001558 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e5a:	4b71      	ldr	r3, [pc, #452]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e68:	496d      	ldr	r1, [pc, #436]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d022      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d013      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e8c:	d00e      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e96:	d009      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ea0:	d004      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003ea2:	f240 116b 	movw	r1, #363	; 0x16b
 8003ea6:	485f      	ldr	r0, [pc, #380]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8003ea8:	f7fd fb56 	bl	8001558 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003eac:	4b5c      	ldr	r3, [pc, #368]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eba:	4959      	ldr	r1, [pc, #356]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d018      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ed2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ed6:	d008      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d004      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8003ee0:	f240 1175 	movw	r1, #373	; 0x175
 8003ee4:	484f      	ldr	r0, [pc, #316]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8003ee6:	f7fd fb37 	bl	8001558 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003eea:	4b4d      	ldr	r3, [pc, #308]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ef8:	4949      	ldr	r1, [pc, #292]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d01f      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f14:	d008      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d004      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003f1e:	f240 117f 	movw	r1, #383	; 0x17f
 8003f22:	4840      	ldr	r0, [pc, #256]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8003f24:	f7fd fb18 	bl	8001558 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f28:	4b3d      	ldr	r3, [pc, #244]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f36:	493a      	ldr	r1, [pc, #232]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f46:	d101      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      pllsaiused = 1;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    pllsaiused = 1;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d022      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xa86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d013      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f78:	d00e      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f82:	d009      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f8c:	d004      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003f8e:	f240 1197 	movw	r1, #407	; 0x197
 8003f92:	4824      	ldr	r0, [pc, #144]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8003f94:	f7fd fae0 	bl	8001558 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f98:	4b21      	ldr	r3, [pc, #132]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fa6:	491e      	ldr	r1, [pc, #120]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01b      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xaca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fc4:	d009      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d004      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003fd0:	f240 11a1 	movw	r1, #417	; 0x1a1
 8003fd4:	4813      	ldr	r0, [pc, #76]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8003fd6:	f7fd fabf 	bl	8001558 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fda:	4b11      	ldr	r3, [pc, #68]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fea:	490d      	ldr	r1, [pc, #52]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d020      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004008:	d00e      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004010:	2b00      	cmp	r3, #0
 8004012:	d009      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8004014:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8004018:	4802      	ldr	r0, [pc, #8]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 800401a:	f7fd fa9d 	bl	8001558 <assert_failed>
 800401e:	e003      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8004020:	40023800 	.word	0x40023800
 8004024:	08006b54 	.word	0x08006b54

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004028:	4b35      	ldr	r3, [pc, #212]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800402a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004038:	4931      	ldr	r1, [pc, #196]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01b      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xb44>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004060:	d004      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xb44>
 8004062:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8004066:	4827      	ldr	r0, [pc, #156]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004068:	f7fd fa76 	bl	8001558 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800406c:	4b24      	ldr	r3, [pc, #144]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800406e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004072:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407c:	4920      	ldr	r1, [pc, #128]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d01b      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040a4:	d004      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80040a6:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80040aa:	4816      	ldr	r0, [pc, #88]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80040ac:	f7fd fa54 	bl	8001558 <assert_failed>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80040b0:	4b13      	ldr	r3, [pc, #76]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80040b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040c0:	490f      	ldr	r1, [pc, #60]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d005      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040d6:	f040 8153 	bne.w	8004380 <HAL_RCCEx_PeriphCLKConfig+0xe58>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040da:	4b09      	ldr	r3, [pc, #36]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a08      	ldr	r2, [pc, #32]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80040e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e6:	f7fd fe43 	bl	8001d70 <HAL_GetTick>
 80040ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040ec:	e00c      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040ee:	f7fd fe3f 	bl	8001d70 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b64      	cmp	r3, #100	; 0x64
 80040fa:	d905      	bls.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e276      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 8004100:	40023800 	.word	0x40023800
 8004104:	08006b54 	.word	0x08006b54
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004108:	4ba9      	ldr	r3, [pc, #676]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1ec      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xbc6>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	2b31      	cmp	r3, #49	; 0x31
 800411a:	d904      	bls.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004124:	d904      	bls.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004126:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800412a:	48a2      	ldr	r0, [pc, #648]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 800412c:	f7fd fa14 	bl	8001558 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d02e      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004140:	2b00      	cmp	r3, #0
 8004142:	d12a      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d903      	bls.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	2b07      	cmp	r3, #7
 8004152:	d904      	bls.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8004154:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8004158:	4896      	ldr	r0, [pc, #600]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 800415a:	f7fd f9fd 	bl	8001558 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800415e:	4b94      	ldr	r3, [pc, #592]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004164:	0c1b      	lsrs	r3, r3, #16
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800416c:	4b90      	ldr	r3, [pc, #576]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800416e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004172:	0e1b      	lsrs	r3, r3, #24
 8004174:	f003 030f 	and.w	r3, r3, #15
 8004178:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	019a      	lsls	r2, r3, #6
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	041b      	lsls	r3, r3, #16
 8004184:	431a      	orrs	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	061b      	lsls	r3, r3, #24
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	071b      	lsls	r3, r3, #28
 8004192:	4987      	ldr	r1, [pc, #540]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d004      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xc88>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ae:	d00a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d048      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xd26>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041c4:	d143      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d903      	bls.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xcae>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	2b0f      	cmp	r3, #15
 80041d4:	d904      	bls.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 80041d6:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 80041da:	4876      	ldr	r0, [pc, #472]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80041dc:	f7fd f9bc 	bl	8001558 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	2b20      	cmp	r3, #32
 80041ee:	d904      	bls.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 80041f0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80041f4:	486f      	ldr	r0, [pc, #444]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80041f6:	f7fd f9af 	bl	8001558 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041fa:	4b6d      	ldr	r3, [pc, #436]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80041fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004200:	0c1b      	lsrs	r3, r3, #16
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004208:	4b69      	ldr	r3, [pc, #420]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800420a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800420e:	0f1b      	lsrs	r3, r3, #28
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	019a      	lsls	r2, r3, #6
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	041b      	lsls	r3, r3, #16
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	061b      	lsls	r3, r3, #24
 8004228:	431a      	orrs	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	071b      	lsls	r3, r3, #28
 800422e:	4960      	ldr	r1, [pc, #384]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004236:	4b5e      	ldr	r3, [pc, #376]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800423c:	f023 021f 	bic.w	r2, r3, #31
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	3b01      	subs	r3, #1
 8004246:	495a      	ldr	r1, [pc, #360]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d032      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xd98>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d010      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d00c      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d008      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b03      	cmp	r3, #3
 8004278:	d004      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 800427a:	f240 2107 	movw	r1, #519	; 0x207
 800427e:	484d      	ldr	r0, [pc, #308]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004280:	f7fd f96a 	bl	8001558 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004284:	4b4a      	ldr	r3, [pc, #296]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800428a:	0e1b      	lsrs	r3, r3, #24
 800428c:	f003 030f 	and.w	r3, r3, #15
 8004290:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004292:	4b47      	ldr	r3, [pc, #284]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004298:	0f1b      	lsrs	r3, r3, #28
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	019a      	lsls	r2, r3, #6
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	041b      	lsls	r3, r3, #16
 80042ac:	431a      	orrs	r2, r3
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	061b      	lsls	r3, r3, #24
 80042b2:	431a      	orrs	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	071b      	lsls	r3, r3, #28
 80042b8:	493d      	ldr	r1, [pc, #244]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d040      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xe26>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d010      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d00c      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d008      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	2b03      	cmp	r3, #3
 80042ea:	d004      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 80042ec:	f240 2116 	movw	r1, #534	; 0x216
 80042f0:	4830      	ldr	r0, [pc, #192]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80042f2:	f7fd f931 	bl	8001558 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d903      	bls.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b07      	cmp	r3, #7
 8004304:	d904      	bls.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xde8>
 8004306:	f240 2117 	movw	r1, #535	; 0x217
 800430a:	482a      	ldr	r0, [pc, #168]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 800430c:	f7fd f924 	bl	8001558 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d903      	bls.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	2b0f      	cmp	r3, #15
 800431e:	d904      	bls.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xe02>
 8004320:	f44f 7106 	mov.w	r1, #536	; 0x218
 8004324:	4823      	ldr	r0, [pc, #140]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004326:	f7fd f917 	bl	8001558 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	019a      	lsls	r2, r3, #6
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	041b      	lsls	r3, r3, #16
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	061b      	lsls	r3, r3, #24
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	071b      	lsls	r3, r3, #28
 8004346:	491a      	ldr	r1, [pc, #104]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800434e:	4b18      	ldr	r3, [pc, #96]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a17      	ldr	r2, [pc, #92]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004354:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004358:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800435a:	f7fd fd09 	bl	8001d70 <HAL_GetTick>
 800435e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004360:	e008      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004362:	f7fd fd05 	bl	8001d70 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b64      	cmp	r3, #100	; 0x64
 800436e:	d901      	bls.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e13c      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004374:	4b0e      	ldr	r3, [pc, #56]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0f0      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	2b01      	cmp	r3, #1
 8004384:	f040 8132 	bne.w	80045ec <HAL_RCCEx_PeriphCLKConfig+0x10c4>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004388:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a08      	ldr	r2, [pc, #32]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800438e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004392:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004394:	f7fd fcec 	bl	8001d70 <HAL_GetTick>
 8004398:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800439a:	e00d      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xe90>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800439c:	f7fd fce8 	bl	8001d70 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b64      	cmp	r3, #100	; 0x64
 80043a8:	d906      	bls.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xe90>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e11f      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 80043ae:	bf00      	nop
 80043b0:	40023800 	.word	0x40023800
 80043b4:	08006b54 	.word	0x08006b54
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043b8:	4b8f      	ldr	r3, [pc, #572]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043c4:	d0ea      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xe74>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	2b31      	cmp	r3, #49	; 0x31
 80043cc:	d904      	bls.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xeb0>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80043d6:	d904      	bls.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xeba>
 80043d8:	f240 2146 	movw	r1, #582	; 0x246
 80043dc:	4887      	ldr	r0, [pc, #540]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 80043de:	f7fd f8bb 	bl	8001558 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xece>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xee2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d048      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	d144      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d903      	bls.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xef2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	2b0f      	cmp	r3, #15
 8004418:	d904      	bls.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xefc>
 800441a:	f240 214d 	movw	r1, #589	; 0x24d
 800441e:	4877      	ldr	r0, [pc, #476]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004420:	f7fd f89a 	bl	8001558 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	2b20      	cmp	r3, #32
 8004432:	d904      	bls.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004434:	f240 214f 	movw	r1, #591	; 0x24f
 8004438:	4870      	ldr	r0, [pc, #448]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 800443a:	f7fd f88d 	bl	8001558 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800443e:	4b6e      	ldr	r3, [pc, #440]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004444:	0c1b      	lsrs	r3, r3, #16
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800444c:	4b6a      	ldr	r3, [pc, #424]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004452:	0f1b      	lsrs	r3, r3, #28
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	019a      	lsls	r2, r3, #6
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	041b      	lsls	r3, r3, #16
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	061b      	lsls	r3, r3, #24
 800446c:	431a      	orrs	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	071b      	lsls	r3, r3, #28
 8004472:	4961      	ldr	r1, [pc, #388]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800447a:	4b5f      	ldr	r3, [pc, #380]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800447c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004480:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004488:	3b01      	subs	r3, #1
 800448a:	021b      	lsls	r3, r3, #8
 800448c:	495a      	ldr	r1, [pc, #360]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d037      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044a8:	d132      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d010      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d00c      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d008      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	2b03      	cmp	r3, #3
 80044c8:	d004      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 80044ca:	f240 2162 	movw	r1, #610	; 0x262
 80044ce:	484b      	ldr	r0, [pc, #300]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 80044d0:	f7fd f842 	bl	8001558 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044d4:	4b48      	ldr	r3, [pc, #288]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044da:	0e1b      	lsrs	r3, r3, #24
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044e2:	4b45      	ldr	r3, [pc, #276]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80044e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e8:	0f1b      	lsrs	r3, r3, #28
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	019a      	lsls	r2, r3, #6
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	041b      	lsls	r3, r3, #16
 80044fc:	431a      	orrs	r2, r3
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	061b      	lsls	r3, r3, #24
 8004502:	431a      	orrs	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	071b      	lsls	r3, r3, #28
 8004508:	493b      	ldr	r1, [pc, #236]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	2b00      	cmp	r3, #0
 800451a:	d04d      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1090>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d903      	bls.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x1004>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	2b07      	cmp	r3, #7
 800452a:	d904      	bls.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x100e>
 800452c:	f240 2171 	movw	r1, #625	; 0x271
 8004530:	4832      	ldr	r0, [pc, #200]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004532:	f7fd f811 	bl	8001558 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	2b00      	cmp	r3, #0
 800453c:	d013      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004546:	d00e      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004550:	d009      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004556:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800455a:	d004      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 800455c:	f240 2172 	movw	r1, #626	; 0x272
 8004560:	4826      	ldr	r0, [pc, #152]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004562:	f7fc fff9 	bl	8001558 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004566:	4b24      	ldr	r3, [pc, #144]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456c:	0e1b      	lsrs	r3, r3, #24
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004574:	4b20      	ldr	r3, [pc, #128]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457a:	0c1b      	lsrs	r3, r3, #16
 800457c:	f003 0303 	and.w	r3, r3, #3
 8004580:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	019a      	lsls	r2, r3, #6
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	041b      	lsls	r3, r3, #16
 800458c:	431a      	orrs	r2, r3
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	061b      	lsls	r3, r3, #24
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	071b      	lsls	r3, r3, #28
 800459a:	4917      	ldr	r1, [pc, #92]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800459c:	4313      	orrs	r3, r2
 800459e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80045a2:	4b15      	ldr	r3, [pc, #84]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80045a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	4911      	ldr	r1, [pc, #68]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80045b8:	4b0f      	ldr	r3, [pc, #60]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a0e      	ldr	r2, [pc, #56]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80045be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c4:	f7fd fbd4 	bl	8001d70 <HAL_GetTick>
 80045c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045cc:	f7fd fbd0 	bl	8001d70 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	; 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x10b6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e007      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045de:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045ea:	d1ef      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
      }
    }
  }
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3720      	adds	r7, #32
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40023800 	.word	0x40023800
 80045fc:	08006b54 	.word	0x08006b54

08004600 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e199      	b.n	8004946 <HAL_SPI_Init+0x346>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a94      	ldr	r2, [pc, #592]	; (8004868 <HAL_SPI_Init+0x268>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d01d      	beq.n	8004658 <HAL_SPI_Init+0x58>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a92      	ldr	r2, [pc, #584]	; (800486c <HAL_SPI_Init+0x26c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d018      	beq.n	8004658 <HAL_SPI_Init+0x58>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a91      	ldr	r2, [pc, #580]	; (8004870 <HAL_SPI_Init+0x270>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d013      	beq.n	8004658 <HAL_SPI_Init+0x58>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a8f      	ldr	r2, [pc, #572]	; (8004874 <HAL_SPI_Init+0x274>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d00e      	beq.n	8004658 <HAL_SPI_Init+0x58>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a8e      	ldr	r2, [pc, #568]	; (8004878 <HAL_SPI_Init+0x278>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d009      	beq.n	8004658 <HAL_SPI_Init+0x58>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a8c      	ldr	r2, [pc, #560]	; (800487c <HAL_SPI_Init+0x27c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d004      	beq.n	8004658 <HAL_SPI_Init+0x58>
 800464e:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004652:	488b      	ldr	r0, [pc, #556]	; (8004880 <HAL_SPI_Init+0x280>)
 8004654:	f7fc ff80 	bl	8001558 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d009      	beq.n	8004674 <HAL_SPI_Init+0x74>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004668:	d004      	beq.n	8004674 <HAL_SPI_Init+0x74>
 800466a:	f240 1145 	movw	r1, #325	; 0x145
 800466e:	4884      	ldr	r0, [pc, #528]	; (8004880 <HAL_SPI_Init+0x280>)
 8004670:	f7fc ff72 	bl	8001558 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00e      	beq.n	800469a <HAL_SPI_Init+0x9a>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004684:	d009      	beq.n	800469a <HAL_SPI_Init+0x9a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800468e:	d004      	beq.n	800469a <HAL_SPI_Init+0x9a>
 8004690:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004694:	487a      	ldr	r0, [pc, #488]	; (8004880 <HAL_SPI_Init+0x280>)
 8004696:	f7fc ff5f 	bl	8001558 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80046a2:	d040      	beq.n	8004726 <HAL_SPI_Init+0x126>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80046ac:	d03b      	beq.n	8004726 <HAL_SPI_Init+0x126>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 80046b6:	d036      	beq.n	8004726 <HAL_SPI_Init+0x126>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046c0:	d031      	beq.n	8004726 <HAL_SPI_Init+0x126>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 80046ca:	d02c      	beq.n	8004726 <HAL_SPI_Init+0x126>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80046d4:	d027      	beq.n	8004726 <HAL_SPI_Init+0x126>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80046de:	d022      	beq.n	8004726 <HAL_SPI_Init+0x126>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046e8:	d01d      	beq.n	8004726 <HAL_SPI_Init+0x126>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046f2:	d018      	beq.n	8004726 <HAL_SPI_Init+0x126>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80046fc:	d013      	beq.n	8004726 <HAL_SPI_Init+0x126>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004706:	d00e      	beq.n	8004726 <HAL_SPI_Init+0x126>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004710:	d009      	beq.n	8004726 <HAL_SPI_Init+0x126>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800471a:	d004      	beq.n	8004726 <HAL_SPI_Init+0x126>
 800471c:	f240 1147 	movw	r1, #327	; 0x147
 8004720:	4857      	ldr	r0, [pc, #348]	; (8004880 <HAL_SPI_Init+0x280>)
 8004722:	f7fc ff19 	bl	8001558 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800472e:	d00d      	beq.n	800474c <HAL_SPI_Init+0x14c>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d009      	beq.n	800474c <HAL_SPI_Init+0x14c>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004740:	d004      	beq.n	800474c <HAL_SPI_Init+0x14c>
 8004742:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004746:	484e      	ldr	r0, [pc, #312]	; (8004880 <HAL_SPI_Init+0x280>)
 8004748:	f7fc ff06 	bl	8001558 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004750:	2b08      	cmp	r3, #8
 8004752:	d008      	beq.n	8004766 <HAL_SPI_Init+0x166>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004758:	2b00      	cmp	r3, #0
 800475a:	d004      	beq.n	8004766 <HAL_SPI_Init+0x166>
 800475c:	f240 1149 	movw	r1, #329	; 0x149
 8004760:	4847      	ldr	r0, [pc, #284]	; (8004880 <HAL_SPI_Init+0x280>)
 8004762:	f7fc fef9 	bl	8001558 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d020      	beq.n	80047b0 <HAL_SPI_Init+0x1b0>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	2b08      	cmp	r3, #8
 8004774:	d01c      	beq.n	80047b0 <HAL_SPI_Init+0x1b0>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	2b10      	cmp	r3, #16
 800477c:	d018      	beq.n	80047b0 <HAL_SPI_Init+0x1b0>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	2b18      	cmp	r3, #24
 8004784:	d014      	beq.n	80047b0 <HAL_SPI_Init+0x1b0>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	2b20      	cmp	r3, #32
 800478c:	d010      	beq.n	80047b0 <HAL_SPI_Init+0x1b0>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	2b28      	cmp	r3, #40	; 0x28
 8004794:	d00c      	beq.n	80047b0 <HAL_SPI_Init+0x1b0>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	2b30      	cmp	r3, #48	; 0x30
 800479c:	d008      	beq.n	80047b0 <HAL_SPI_Init+0x1b0>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	2b38      	cmp	r3, #56	; 0x38
 80047a4:	d004      	beq.n	80047b0 <HAL_SPI_Init+0x1b0>
 80047a6:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80047aa:	4835      	ldr	r0, [pc, #212]	; (8004880 <HAL_SPI_Init+0x280>)
 80047ac:	f7fc fed4 	bl	8001558 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d008      	beq.n	80047ca <HAL_SPI_Init+0x1ca>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	2b80      	cmp	r3, #128	; 0x80
 80047be:	d004      	beq.n	80047ca <HAL_SPI_Init+0x1ca>
 80047c0:	f240 114b 	movw	r1, #331	; 0x14b
 80047c4:	482e      	ldr	r0, [pc, #184]	; (8004880 <HAL_SPI_Init+0x280>)
 80047c6:	f7fc fec7 	bl	8001558 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d008      	beq.n	80047e4 <HAL_SPI_Init+0x1e4>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	2b10      	cmp	r3, #16
 80047d8:	d004      	beq.n	80047e4 <HAL_SPI_Init+0x1e4>
 80047da:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80047de:	4828      	ldr	r0, [pc, #160]	; (8004880 <HAL_SPI_Init+0x280>)
 80047e0:	f7fc feba 	bl	8001558 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d119      	bne.n	8004820 <HAL_SPI_Init+0x220>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d008      	beq.n	8004806 <HAL_SPI_Init+0x206>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d004      	beq.n	8004806 <HAL_SPI_Init+0x206>
 80047fc:	f240 114f 	movw	r1, #335	; 0x14f
 8004800:	481f      	ldr	r0, [pc, #124]	; (8004880 <HAL_SPI_Init+0x280>)
 8004802:	f7fc fea9 	bl	8001558 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d008      	beq.n	8004820 <HAL_SPI_Init+0x220>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d004      	beq.n	8004820 <HAL_SPI_Init+0x220>
 8004816:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800481a:	4819      	ldr	r0, [pc, #100]	; (8004880 <HAL_SPI_Init+0x280>)
 800481c:	f7fc fe9c 	bl	8001558 <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d106      	bne.n	8004840 <HAL_SPI_Init+0x240>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7fc fed6 	bl	80015ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004856:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004860:	d910      	bls.n	8004884 <HAL_SPI_Init+0x284>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	e010      	b.n	800488a <HAL_SPI_Init+0x28a>
 8004868:	40013000 	.word	0x40013000
 800486c:	40003800 	.word	0x40003800
 8004870:	40003c00 	.word	0x40003c00
 8004874:	40013400 	.word	0x40013400
 8004878:	40015000 	.word	0x40015000
 800487c:	40015400 	.word	0x40015400
 8004880:	08006b90 	.word	0x08006b90
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004888:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004892:	d007      	beq.n	80048a4 <HAL_SPI_Init+0x2a4>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800489c:	d002      	beq.n	80048a4 <HAL_SPI_Init+0x2a4>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10b      	bne.n	80048c4 <HAL_SPI_Init+0x2c4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048b4:	d903      	bls.n	80048be <HAL_SPI_Init+0x2be>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2202      	movs	r2, #2
 80048ba:	631a      	str	r2, [r3, #48]	; 0x30
 80048bc:	e002      	b.n	80048c4 <HAL_SPI_Init+0x2c4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	431a      	orrs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	ea42 0103 	orr.w	r1, r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	0c1b      	lsrs	r3, r3, #16
 8004904:	f003 0204 	and.w	r2, r3, #4
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	ea42 0103 	orr.w	r1, r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	430a      	orrs	r2, r1
 8004924:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69da      	ldr	r2, [r3, #28]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004934:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop

08004950 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b088      	sub	sp, #32
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	603b      	str	r3, [r7, #0]
 800495c:	4613      	mov	r3, r2
 800495e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d009      	beq.n	8004980 <HAL_SPI_Transmit+0x30>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004974:	d004      	beq.n	8004980 <HAL_SPI_Transmit+0x30>
 8004976:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800497a:	4895      	ldr	r0, [pc, #596]	; (8004bd0 <HAL_SPI_Transmit+0x280>)
 800497c:	f7fc fdec 	bl	8001558 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_SPI_Transmit+0x3e>
 800498a:	2302      	movs	r3, #2
 800498c:	e152      	b.n	8004c34 <HAL_SPI_Transmit+0x2e4>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004996:	f7fd f9eb 	bl	8001d70 <HAL_GetTick>
 800499a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800499c:	88fb      	ldrh	r3, [r7, #6]
 800499e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d002      	beq.n	80049b2 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 80049ac:	2302      	movs	r3, #2
 80049ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049b0:	e137      	b.n	8004c22 <HAL_SPI_Transmit+0x2d2>
  }

  if ((pData == NULL) || (Size == 0U))
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d002      	beq.n	80049be <HAL_SPI_Transmit+0x6e>
 80049b8:	88fb      	ldrh	r3, [r7, #6]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d102      	bne.n	80049c4 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049c2:	e12e      	b.n	8004c22 <HAL_SPI_Transmit+0x2d2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2203      	movs	r2, #3
 80049c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	88fa      	ldrh	r2, [r7, #6]
 80049dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	88fa      	ldrh	r2, [r7, #6]
 80049e2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a0e:	d107      	bne.n	8004a20 <HAL_SPI_Transmit+0xd0>
  {
    SPI_1LINE_TX(hspi);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2a:	2b40      	cmp	r3, #64	; 0x40
 8004a2c:	d007      	beq.n	8004a3e <HAL_SPI_Transmit+0xee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a46:	d94b      	bls.n	8004ae0 <HAL_SPI_Transmit+0x190>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <HAL_SPI_Transmit+0x106>
 8004a50:	8afb      	ldrh	r3, [r7, #22]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d13e      	bne.n	8004ad4 <HAL_SPI_Transmit+0x184>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	881a      	ldrh	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a66:	1c9a      	adds	r2, r3, #2
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a7a:	e02b      	b.n	8004ad4 <HAL_SPI_Transmit+0x184>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d112      	bne.n	8004ab0 <HAL_SPI_Transmit+0x160>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	881a      	ldrh	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	1c9a      	adds	r2, r3, #2
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004aae:	e011      	b.n	8004ad4 <HAL_SPI_Transmit+0x184>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ab0:	f7fd f95e 	bl	8001d70 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d803      	bhi.n	8004ac8 <HAL_SPI_Transmit+0x178>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac6:	d102      	bne.n	8004ace <HAL_SPI_Transmit+0x17e>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d102      	bne.n	8004ad4 <HAL_SPI_Transmit+0x184>
        {
          errorcode = HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ad2:	e0a6      	b.n	8004c22 <HAL_SPI_Transmit+0x2d2>
    while (hspi->TxXferCount > 0U)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1ce      	bne.n	8004a7c <HAL_SPI_Transmit+0x12c>
 8004ade:	e07e      	b.n	8004bde <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <HAL_SPI_Transmit+0x19e>
 8004ae8:	8afb      	ldrh	r3, [r7, #22]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d172      	bne.n	8004bd4 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d912      	bls.n	8004b1e <HAL_SPI_Transmit+0x1ce>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afc:	881a      	ldrh	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	1c9a      	adds	r2, r3, #2
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	3b02      	subs	r3, #2
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b1c:	e05a      	b.n	8004bd4 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	330c      	adds	r3, #12
 8004b28:	7812      	ldrb	r2, [r2, #0]
 8004b2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004b44:	e046      	b.n	8004bd4 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d12b      	bne.n	8004bac <HAL_SPI_Transmit+0x25c>
      {
        if (hspi->TxXferCount > 1U)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d912      	bls.n	8004b84 <HAL_SPI_Transmit+0x234>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b62:	881a      	ldrh	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6e:	1c9a      	adds	r2, r3, #2
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	3b02      	subs	r3, #2
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b82:	e027      	b.n	8004bd4 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	330c      	adds	r3, #12
 8004b8e:	7812      	ldrb	r2, [r2, #0]
 8004b90:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004baa:	e013      	b.n	8004bd4 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bac:	f7fd f8e0 	bl	8001d70 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d803      	bhi.n	8004bc4 <HAL_SPI_Transmit+0x274>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc2:	d102      	bne.n	8004bca <HAL_SPI_Transmit+0x27a>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d104      	bne.n	8004bd4 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bce:	e028      	b.n	8004c22 <HAL_SPI_Transmit+0x2d2>
 8004bd0:	08006b90 	.word	0x08006b90
    while (hspi->TxXferCount > 0U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1b3      	bne.n	8004b46 <HAL_SPI_Transmit+0x1f6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	6839      	ldr	r1, [r7, #0]
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 fdbe 	bl	8005764 <SPI_EndRxTxTransaction>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10a      	bne.n	8004c12 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	613b      	str	r3, [r7, #16]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	613b      	str	r3, [r7, #16]
 8004c10:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	77fb      	strb	r3, [r7, #31]
 8004c1e:	e000      	b.n	8004c22 <HAL_SPI_Transmit+0x2d2>
  }

error:
 8004c20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c32:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3720      	adds	r7, #32
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c58:	d112      	bne.n	8004c80 <HAL_SPI_Receive+0x44>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10e      	bne.n	8004c80 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2204      	movs	r2, #4
 8004c66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c6a:	88fa      	ldrh	r2, [r7, #6]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	4613      	mov	r3, r2
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 f908 	bl	8004e8c <HAL_SPI_TransmitReceive>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	e101      	b.n	8004e84 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d101      	bne.n	8004c8e <HAL_SPI_Receive+0x52>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	e0fa      	b.n	8004e84 <HAL_SPI_Receive+0x248>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c96:	f7fd f86b 	bl	8001d70 <HAL_GetTick>
 8004c9a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d002      	beq.n	8004cae <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004ca8:	2302      	movs	r3, #2
 8004caa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cac:	e0e1      	b.n	8004e72 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <HAL_SPI_Receive+0x7e>
 8004cb4:	88fb      	ldrh	r3, [r7, #6]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d102      	bne.n	8004cc0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cbe:	e0d8      	b.n	8004e72 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2204      	movs	r2, #4
 8004cc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	88fa      	ldrh	r2, [r7, #6]
 8004cd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	88fa      	ldrh	r2, [r7, #6]
 8004ce0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d0a:	d908      	bls.n	8004d1e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d1a:	605a      	str	r2, [r3, #4]
 8004d1c:	e007      	b.n	8004d2e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d2c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d36:	d107      	bne.n	8004d48 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d46:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d52:	2b40      	cmp	r3, #64	; 0x40
 8004d54:	d007      	beq.n	8004d66 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d64:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d6e:	d867      	bhi.n	8004e40 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d70:	e030      	b.n	8004dd4 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d117      	bne.n	8004db0 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f103 020c 	add.w	r2, r3, #12
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	7812      	ldrb	r2, [r2, #0]
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004dae:	e011      	b.n	8004dd4 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004db0:	f7fc ffde 	bl	8001d70 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d803      	bhi.n	8004dc8 <HAL_SPI_Receive+0x18c>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc6:	d102      	bne.n	8004dce <HAL_SPI_Receive+0x192>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d102      	bne.n	8004dd4 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004dd2:	e04e      	b.n	8004e72 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1c8      	bne.n	8004d72 <HAL_SPI_Receive+0x136>
 8004de0:	e034      	b.n	8004e4c <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d115      	bne.n	8004e1c <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	b292      	uxth	r2, r2
 8004dfc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	1c9a      	adds	r2, r3, #2
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004e1a:	e011      	b.n	8004e40 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e1c:	f7fc ffa8 	bl	8001d70 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d803      	bhi.n	8004e34 <HAL_SPI_Receive+0x1f8>
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e32:	d102      	bne.n	8004e3a <HAL_SPI_Receive+0x1fe>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d102      	bne.n	8004e40 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e3e:	e018      	b.n	8004e72 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1ca      	bne.n	8004de2 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	6839      	ldr	r1, [r7, #0]
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 fc2f 	bl	80056b4 <SPI_EndRxTransaction>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d002      	beq.n	8004e70 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	75fb      	strb	r3, [r7, #23]
 8004e6e:	e000      	b.n	8004e72 <HAL_SPI_Receive+0x236>
  }

error :
 8004e70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08a      	sub	sp, #40	; 0x28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
 8004e98:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d004      	beq.n	8004eb6 <HAL_SPI_TransmitReceive+0x2a>
 8004eac:	f240 41bf 	movw	r1, #1215	; 0x4bf
 8004eb0:	4895      	ldr	r0, [pc, #596]	; (8005108 <HAL_SPI_TransmitReceive+0x27c>)
 8004eb2:	f7fc fb51 	bl	8001558 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_SPI_TransmitReceive+0x38>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e1fd      	b.n	80052c0 <HAL_SPI_TransmitReceive+0x434>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ecc:	f7fc ff50 	bl	8001d70 <HAL_GetTick>
 8004ed0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ed8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004ee0:	887b      	ldrh	r3, [r7, #2]
 8004ee2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004ee4:	887b      	ldrh	r3, [r7, #2]
 8004ee6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ee8:	7efb      	ldrb	r3, [r7, #27]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d00e      	beq.n	8004f0c <HAL_SPI_TransmitReceive+0x80>
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ef4:	d106      	bne.n	8004f04 <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d102      	bne.n	8004f04 <HAL_SPI_TransmitReceive+0x78>
 8004efe:	7efb      	ldrb	r3, [r7, #27]
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d003      	beq.n	8004f0c <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 8004f04:	2302      	movs	r3, #2
 8004f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004f0a:	e1cf      	b.n	80052ac <HAL_SPI_TransmitReceive+0x420>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d005      	beq.n	8004f1e <HAL_SPI_TransmitReceive+0x92>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d002      	beq.n	8004f1e <HAL_SPI_TransmitReceive+0x92>
 8004f18:	887b      	ldrh	r3, [r7, #2]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d103      	bne.n	8004f26 <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004f24:	e1c2      	b.n	80052ac <HAL_SPI_TransmitReceive+0x420>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d003      	beq.n	8004f3a <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2205      	movs	r2, #5
 8004f36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	887a      	ldrh	r2, [r7, #2]
 8004f4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	887a      	ldrh	r2, [r7, #2]
 8004f52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	887a      	ldrh	r2, [r7, #2]
 8004f60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	887a      	ldrh	r2, [r7, #2]
 8004f66:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f7c:	d802      	bhi.n	8004f84 <HAL_SPI_TransmitReceive+0xf8>
 8004f7e:	8a3b      	ldrh	r3, [r7, #16]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d908      	bls.n	8004f96 <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f92:	605a      	str	r2, [r3, #4]
 8004f94:	e007      	b.n	8004fa6 <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fa4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb0:	2b40      	cmp	r3, #64	; 0x40
 8004fb2:	d007      	beq.n	8004fc4 <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fcc:	d97c      	bls.n	80050c8 <HAL_SPI_TransmitReceive+0x23c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d002      	beq.n	8004fdc <HAL_SPI_TransmitReceive+0x150>
 8004fd6:	8a7b      	ldrh	r3, [r7, #18]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d169      	bne.n	80050b0 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	881a      	ldrh	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fec:	1c9a      	adds	r2, r3, #2
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005000:	e056      	b.n	80050b0 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b02      	cmp	r3, #2
 800500e:	d11b      	bne.n	8005048 <HAL_SPI_TransmitReceive+0x1bc>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005014:	b29b      	uxth	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d016      	beq.n	8005048 <HAL_SPI_TransmitReceive+0x1bc>
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	2b01      	cmp	r3, #1
 800501e:	d113      	bne.n	8005048 <HAL_SPI_TransmitReceive+0x1bc>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	881a      	ldrh	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005030:	1c9a      	adds	r2, r3, #2
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b01      	cmp	r3, #1
 8005054:	d11c      	bne.n	8005090 <HAL_SPI_TransmitReceive+0x204>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d016      	beq.n	8005090 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506c:	b292      	uxth	r2, r2
 800506e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005074:	1c9a      	adds	r2, r3, #2
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005080:	b29b      	uxth	r3, r3
 8005082:	3b01      	subs	r3, #1
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800508c:	2301      	movs	r3, #1
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005090:	f7fc fe6e 	bl	8001d70 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800509c:	429a      	cmp	r2, r3
 800509e:	d807      	bhi.n	80050b0 <HAL_SPI_TransmitReceive+0x224>
 80050a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a6:	d003      	beq.n	80050b0 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80050ae:	e0fd      	b.n	80052ac <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1a3      	bne.n	8005002 <HAL_SPI_TransmitReceive+0x176>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d19d      	bne.n	8005002 <HAL_SPI_TransmitReceive+0x176>
 80050c6:	e0e1      	b.n	800528c <HAL_SPI_TransmitReceive+0x400>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <HAL_SPI_TransmitReceive+0x24c>
 80050d0:	8a7b      	ldrh	r3, [r7, #18]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	f040 80cd 	bne.w	8005272 <HAL_SPI_TransmitReceive+0x3e6>
    {
      if (hspi->TxXferCount > 1U)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050dc:	b29b      	uxth	r3, r3
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d914      	bls.n	800510c <HAL_SPI_TransmitReceive+0x280>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e6:	881a      	ldrh	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f2:	1c9a      	adds	r2, r3, #2
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	3b02      	subs	r3, #2
 8005100:	b29a      	uxth	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005106:	e0b4      	b.n	8005272 <HAL_SPI_TransmitReceive+0x3e6>
 8005108:	08006b90 	.word	0x08006b90
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	330c      	adds	r3, #12
 8005116:	7812      	ldrb	r2, [r2, #0]
 8005118:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005128:	b29b      	uxth	r3, r3
 800512a:	3b01      	subs	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005132:	e09e      	b.n	8005272 <HAL_SPI_TransmitReceive+0x3e6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b02      	cmp	r3, #2
 8005140:	d134      	bne.n	80051ac <HAL_SPI_TransmitReceive+0x320>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005146:	b29b      	uxth	r3, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	d02f      	beq.n	80051ac <HAL_SPI_TransmitReceive+0x320>
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	2b01      	cmp	r3, #1
 8005150:	d12c      	bne.n	80051ac <HAL_SPI_TransmitReceive+0x320>
      {
        if (hspi->TxXferCount > 1U)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005156:	b29b      	uxth	r3, r3
 8005158:	2b01      	cmp	r3, #1
 800515a:	d912      	bls.n	8005182 <HAL_SPI_TransmitReceive+0x2f6>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005160:	881a      	ldrh	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516c:	1c9a      	adds	r2, r3, #2
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005176:	b29b      	uxth	r3, r3
 8005178:	3b02      	subs	r3, #2
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005180:	e012      	b.n	80051a8 <HAL_SPI_TransmitReceive+0x31c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	330c      	adds	r3, #12
 800518c:	7812      	ldrb	r2, [r2, #0]
 800518e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d148      	bne.n	800524c <HAL_SPI_TransmitReceive+0x3c0>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d042      	beq.n	800524c <HAL_SPI_TransmitReceive+0x3c0>
      {
        if (hspi->RxXferCount > 1U)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d923      	bls.n	800521a <HAL_SPI_TransmitReceive+0x38e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051dc:	b292      	uxth	r2, r2
 80051de:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e4:	1c9a      	adds	r2, r3, #2
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	3b02      	subs	r3, #2
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b01      	cmp	r3, #1
 8005206:	d81f      	bhi.n	8005248 <HAL_SPI_TransmitReceive+0x3bc>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005216:	605a      	str	r2, [r3, #4]
 8005218:	e016      	b.n	8005248 <HAL_SPI_TransmitReceive+0x3bc>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f103 020c 	add.w	r2, r3, #12
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	7812      	ldrb	r2, [r2, #0]
 8005228:	b2d2      	uxtb	r2, r2
 800522a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800523c:	b29b      	uxth	r3, r3
 800523e:	3b01      	subs	r3, #1
 8005240:	b29a      	uxth	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005248:	2301      	movs	r3, #1
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800524c:	f7fc fd90 	bl	8001d70 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005258:	429a      	cmp	r2, r3
 800525a:	d803      	bhi.n	8005264 <HAL_SPI_TransmitReceive+0x3d8>
 800525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005262:	d102      	bne.n	800526a <HAL_SPI_TransmitReceive+0x3de>
 8005264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005266:	2b00      	cmp	r3, #0
 8005268:	d103      	bne.n	8005272 <HAL_SPI_TransmitReceive+0x3e6>
      {
        errorcode = HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005270:	e01c      	b.n	80052ac <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005276:	b29b      	uxth	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	f47f af5b 	bne.w	8005134 <HAL_SPI_TransmitReceive+0x2a8>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	f47f af54 	bne.w	8005134 <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800528c:	69fa      	ldr	r2, [r7, #28]
 800528e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 fa67 	bl	8005764 <SPI_EndRxTxTransaction>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d006      	beq.n	80052aa <HAL_SPI_TransmitReceive+0x41e>
  {
    errorcode = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2220      	movs	r2, #32
 80052a6:	661a      	str	r2, [r3, #96]	; 0x60
 80052a8:	e000      	b.n	80052ac <HAL_SPI_TransmitReceive+0x420>
  }

error :
 80052aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80052bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3728      	adds	r7, #40	; 0x28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	099b      	lsrs	r3, r3, #6
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10f      	bne.n	800530c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	099b      	lsrs	r3, r3, #6
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d004      	beq.n	800530c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	4798      	blx	r3
    return;
 800530a:	e0d8      	b.n	80054be <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	085b      	lsrs	r3, r3, #1
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00a      	beq.n	800532e <HAL_SPI_IRQHandler+0x66>
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	09db      	lsrs	r3, r3, #7
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	d004      	beq.n	800532e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	4798      	blx	r3
    return;
 800532c:	e0c7      	b.n	80054be <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	095b      	lsrs	r3, r3, #5
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10c      	bne.n	8005354 <HAL_SPI_IRQHandler+0x8c>
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	099b      	lsrs	r3, r3, #6
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d106      	bne.n	8005354 <HAL_SPI_IRQHandler+0x8c>
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	0a1b      	lsrs	r3, r3, #8
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 80b5 	beq.w	80054be <HAL_SPI_IRQHandler+0x1f6>
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 80ae 	beq.w	80054be <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	099b      	lsrs	r3, r3, #6
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	d023      	beq.n	80053b6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b03      	cmp	r3, #3
 8005378:	d011      	beq.n	800539e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800537e:	f043 0204 	orr.w	r2, r3, #4
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005386:	2300      	movs	r3, #0
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	617b      	str	r3, [r7, #20]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	e00b      	b.n	80053b6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800539e:	2300      	movs	r3, #0
 80053a0:	613b      	str	r3, [r7, #16]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	613b      	str	r3, [r7, #16]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	693b      	ldr	r3, [r7, #16]
        return;
 80053b4:	e083      	b.n	80054be <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	095b      	lsrs	r3, r3, #5
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d014      	beq.n	80053ec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c6:	f043 0201 	orr.w	r2, r3, #1
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	0a1b      	lsrs	r3, r3, #8
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00c      	beq.n	8005412 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053fc:	f043 0208 	orr.w	r2, r3, #8
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005404:	2300      	movs	r3, #0
 8005406:	60bb      	str	r3, [r7, #8]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	60bb      	str	r3, [r7, #8]
 8005410:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005416:	2b00      	cmp	r3, #0
 8005418:	d050      	beq.n	80054bc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005428:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d104      	bne.n	8005446 <HAL_SPI_IRQHandler+0x17e>
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d034      	beq.n	80054b0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0203 	bic.w	r2, r2, #3
 8005454:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800545a:	2b00      	cmp	r3, #0
 800545c:	d011      	beq.n	8005482 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005462:	4a18      	ldr	r2, [pc, #96]	; (80054c4 <HAL_SPI_IRQHandler+0x1fc>)
 8005464:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800546a:	4618      	mov	r0, r3
 800546c:	f7fc fdee 	bl	800204c <HAL_DMA_Abort_IT>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d005      	beq.n	8005482 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800547a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005486:	2b00      	cmp	r3, #0
 8005488:	d016      	beq.n	80054b8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548e:	4a0d      	ldr	r2, [pc, #52]	; (80054c4 <HAL_SPI_IRQHandler+0x1fc>)
 8005490:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005496:	4618      	mov	r0, r3
 8005498:	f7fc fdd8 	bl	800204c <HAL_DMA_Abort_IT>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80054ae:	e003      	b.n	80054b8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f809 	bl	80054c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80054b6:	e000      	b.n	80054ba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80054b8:	bf00      	nop
    return;
 80054ba:	bf00      	nop
 80054bc:	bf00      	nop
  }
}
 80054be:	3720      	adds	r7, #32
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	080054dd 	.word	0x080054dd

080054c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f7ff ffe5 	bl	80054c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80054fe:	bf00      	nop
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b084      	sub	sp, #16
 800550a:	af00      	add	r7, sp, #0
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	603b      	str	r3, [r7, #0]
 8005512:	4613      	mov	r3, r2
 8005514:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005516:	e04c      	b.n	80055b2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551e:	d048      	beq.n	80055b2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005520:	f7fc fc26 	bl	8001d70 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	429a      	cmp	r2, r3
 800552e:	d902      	bls.n	8005536 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d13d      	bne.n	80055b2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005544:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800554e:	d111      	bne.n	8005574 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005558:	d004      	beq.n	8005564 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005562:	d107      	bne.n	8005574 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005572:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800557c:	d10f      	bne.n	800559e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800559c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e00f      	b.n	80055d2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	4013      	ands	r3, r2
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	429a      	cmp	r2, r3
 80055c0:	bf0c      	ite	eq
 80055c2:	2301      	moveq	r3, #1
 80055c4:	2300      	movne	r3, #0
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d1a3      	bne.n	8005518 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b084      	sub	sp, #16
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	607a      	str	r2, [r7, #4]
 80055e6:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80055e8:	e057      	b.n	800569a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80055f0:	d106      	bne.n	8005600 <SPI_WaitFifoStateUntilTimeout+0x26>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d103      	bne.n	8005600 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	330c      	adds	r3, #12
 80055fe:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005606:	d048      	beq.n	800569a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005608:	f7fc fbb2 	bl	8001d70 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	429a      	cmp	r2, r3
 8005616:	d902      	bls.n	800561e <SPI_WaitFifoStateUntilTimeout+0x44>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d13d      	bne.n	800569a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800562c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005636:	d111      	bne.n	800565c <SPI_WaitFifoStateUntilTimeout+0x82>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005640:	d004      	beq.n	800564c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800564a:	d107      	bne.n	800565c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800565a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005664:	d10f      	bne.n	8005686 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005684:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e008      	b.n	80056ac <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	4013      	ands	r3, r2
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d19f      	bne.n	80055ea <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af02      	add	r7, sp, #8
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056c8:	d111      	bne.n	80056ee <SPI_EndRxTransaction+0x3a>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d2:	d004      	beq.n	80056de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056dc:	d107      	bne.n	80056ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ec:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2200      	movs	r2, #0
 80056f6:	2180      	movs	r1, #128	; 0x80
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f7ff ff04 	bl	8005506 <SPI_WaitFlagStateUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d007      	beq.n	8005714 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005708:	f043 0220 	orr.w	r2, r3, #32
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e023      	b.n	800575c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800571c:	d11d      	bne.n	800575a <SPI_EndRxTransaction+0xa6>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005726:	d004      	beq.n	8005732 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005730:	d113      	bne.n	800575a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2200      	movs	r2, #0
 800573a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f7ff ff4b 	bl	80055da <SPI_WaitFifoStateUntilTimeout>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d007      	beq.n	800575a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800574e:	f043 0220 	orr.w	r2, r3, #32
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e000      	b.n	800575c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af02      	add	r7, sp, #8
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	2200      	movs	r2, #0
 8005778:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f7ff ff2c 	bl	80055da <SPI_WaitFifoStateUntilTimeout>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d007      	beq.n	8005798 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800578c:	f043 0220 	orr.w	r2, r3, #32
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e027      	b.n	80057e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2200      	movs	r2, #0
 80057a0:	2180      	movs	r1, #128	; 0x80
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f7ff feaf 	bl	8005506 <SPI_WaitFlagStateUntilTimeout>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d007      	beq.n	80057be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057b2:	f043 0220 	orr.w	r2, r3, #32
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e014      	b.n	80057e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f7ff ff05 	bl	80055da <SPI_WaitFifoStateUntilTimeout>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d007      	beq.n	80057e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057da:	f043 0220 	orr.w	r2, r3, #32
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e000      	b.n	80057e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e09f      	b.n	8005942 <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d02d      	beq.n	8005866 <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a4f      	ldr	r2, [pc, #316]	; (800594c <HAL_UART_Init+0x15c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d055      	beq.n	80058c0 <HAL_UART_Init+0xd0>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a4d      	ldr	r2, [pc, #308]	; (8005950 <HAL_UART_Init+0x160>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d050      	beq.n	80058c0 <HAL_UART_Init+0xd0>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a4c      	ldr	r2, [pc, #304]	; (8005954 <HAL_UART_Init+0x164>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d04b      	beq.n	80058c0 <HAL_UART_Init+0xd0>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a4a      	ldr	r2, [pc, #296]	; (8005958 <HAL_UART_Init+0x168>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d046      	beq.n	80058c0 <HAL_UART_Init+0xd0>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a49      	ldr	r2, [pc, #292]	; (800595c <HAL_UART_Init+0x16c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d041      	beq.n	80058c0 <HAL_UART_Init+0xd0>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a47      	ldr	r2, [pc, #284]	; (8005960 <HAL_UART_Init+0x170>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d03c      	beq.n	80058c0 <HAL_UART_Init+0xd0>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a46      	ldr	r2, [pc, #280]	; (8005964 <HAL_UART_Init+0x174>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d037      	beq.n	80058c0 <HAL_UART_Init+0xd0>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a44      	ldr	r2, [pc, #272]	; (8005968 <HAL_UART_Init+0x178>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d032      	beq.n	80058c0 <HAL_UART_Init+0xd0>
 800585a:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800585e:	4843      	ldr	r0, [pc, #268]	; (800596c <HAL_UART_Init+0x17c>)
 8005860:	f7fb fe7a 	bl	8001558 <assert_failed>
 8005864:	e02c      	b.n	80058c0 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a38      	ldr	r2, [pc, #224]	; (800594c <HAL_UART_Init+0x15c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d027      	beq.n	80058c0 <HAL_UART_Init+0xd0>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a36      	ldr	r2, [pc, #216]	; (8005950 <HAL_UART_Init+0x160>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d022      	beq.n	80058c0 <HAL_UART_Init+0xd0>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a35      	ldr	r2, [pc, #212]	; (8005954 <HAL_UART_Init+0x164>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d01d      	beq.n	80058c0 <HAL_UART_Init+0xd0>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a33      	ldr	r2, [pc, #204]	; (8005958 <HAL_UART_Init+0x168>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d018      	beq.n	80058c0 <HAL_UART_Init+0xd0>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a32      	ldr	r2, [pc, #200]	; (800595c <HAL_UART_Init+0x16c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d013      	beq.n	80058c0 <HAL_UART_Init+0xd0>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a30      	ldr	r2, [pc, #192]	; (8005960 <HAL_UART_Init+0x170>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00e      	beq.n	80058c0 <HAL_UART_Init+0xd0>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a2f      	ldr	r2, [pc, #188]	; (8005964 <HAL_UART_Init+0x174>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d009      	beq.n	80058c0 <HAL_UART_Init+0xd0>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a2d      	ldr	r2, [pc, #180]	; (8005968 <HAL_UART_Init+0x178>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d004      	beq.n	80058c0 <HAL_UART_Init+0xd0>
 80058b6:	f240 112f 	movw	r1, #303	; 0x12f
 80058ba:	482c      	ldr	r0, [pc, #176]	; (800596c <HAL_UART_Init+0x17c>)
 80058bc:	f7fb fe4c 	bl	8001558 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d106      	bne.n	80058d6 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7fc f8d5 	bl	8001a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2224      	movs	r2, #36	; 0x24
 80058da:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 0201 	bic.w	r2, r2, #1
 80058ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fb01 	bl	8005ef4 <UART_SetConfig>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e022      	b.n	8005942 <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 fe31 	bl	800656c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005918:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005928:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f042 0201 	orr.w	r2, r2, #1
 8005938:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 ff6a 	bl	8006814 <UART_CheckIdleState>
 8005940:	4603      	mov	r3, r0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	40011000 	.word	0x40011000
 8005950:	40004400 	.word	0x40004400
 8005954:	40004800 	.word	0x40004800
 8005958:	40004c00 	.word	0x40004c00
 800595c:	40005000 	.word	0x40005000
 8005960:	40011400 	.word	0x40011400
 8005964:	40007800 	.word	0x40007800
 8005968:	40007c00 	.word	0x40007c00
 800596c:	08006bc8 	.word	0x08006bc8

08005970 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08a      	sub	sp, #40	; 0x28
 8005974:	af02      	add	r7, sp, #8
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	603b      	str	r3, [r7, #0]
 800597c:	4613      	mov	r3, r2
 800597e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005984:	2b20      	cmp	r3, #32
 8005986:	d17f      	bne.n	8005a88 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_UART_Transmit+0x24>
 800598e:	88fb      	ldrh	r3, [r7, #6]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e078      	b.n	8005a8a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d101      	bne.n	80059a6 <HAL_UART_Transmit+0x36>
 80059a2:	2302      	movs	r3, #2
 80059a4:	e071      	b.n	8005a8a <HAL_UART_Transmit+0x11a>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2221      	movs	r2, #33	; 0x21
 80059b8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80059ba:	f7fc f9d9 	bl	8001d70 <HAL_GetTick>
 80059be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	88fa      	ldrh	r2, [r7, #6]
 80059c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	88fa      	ldrh	r2, [r7, #6]
 80059cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059d8:	d108      	bne.n	80059ec <HAL_UART_Transmit+0x7c>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d104      	bne.n	80059ec <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	61bb      	str	r3, [r7, #24]
 80059ea:	e003      	b.n	80059f4 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059f0:	2300      	movs	r3, #0
 80059f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80059fc:	e02c      	b.n	8005a58 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2200      	movs	r2, #0
 8005a06:	2180      	movs	r1, #128	; 0x80
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 ff48 	bl	800689e <UART_WaitOnFlagUntilTimeout>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e038      	b.n	8005a8a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10b      	bne.n	8005a36 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	461a      	mov	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	3302      	adds	r3, #2
 8005a32:	61bb      	str	r3, [r7, #24]
 8005a34:	e007      	b.n	8005a46 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	781a      	ldrb	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	3301      	adds	r3, #1
 8005a44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1cc      	bne.n	80059fe <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	2140      	movs	r1, #64	; 0x40
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f000 ff15 	bl	800689e <UART_WaitOnFlagUntilTimeout>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e005      	b.n	8005a8a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2220      	movs	r2, #32
 8005a82:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005a84:	2300      	movs	r3, #0
 8005a86:	e000      	b.n	8005a8a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8005a88:	2302      	movs	r3, #2
  }
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3720      	adds	r7, #32
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b08a      	sub	sp, #40	; 0x28
 8005a96:	af02      	add	r7, sp, #8
 8005a98:	60f8      	str	r0, [r7, #12]
 8005a9a:	60b9      	str	r1, [r7, #8]
 8005a9c:	603b      	str	r3, [r7, #0]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aa6:	2b20      	cmp	r3, #32
 8005aa8:	f040 80ba 	bne.w	8005c20 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <HAL_UART_Receive+0x26>
 8005ab2:	88fb      	ldrh	r3, [r7, #6]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e0b2      	b.n	8005c22 <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d101      	bne.n	8005aca <HAL_UART_Receive+0x38>
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	e0ab      	b.n	8005c22 <HAL_UART_Receive+0x190>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2222      	movs	r2, #34	; 0x22
 8005adc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005ade:	f7fc f947 	bl	8001d70 <HAL_GetTick>
 8005ae2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	88fa      	ldrh	r2, [r7, #6]
 8005ae8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	88fa      	ldrh	r2, [r7, #6]
 8005af0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005afc:	d10e      	bne.n	8005b1c <HAL_UART_Receive+0x8a>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d105      	bne.n	8005b12 <HAL_UART_Receive+0x80>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005b0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b10:	e02d      	b.n	8005b6e <HAL_UART_Receive+0xdc>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	22ff      	movs	r2, #255	; 0xff
 8005b16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b1a:	e028      	b.n	8005b6e <HAL_UART_Receive+0xdc>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10d      	bne.n	8005b40 <HAL_UART_Receive+0xae>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d104      	bne.n	8005b36 <HAL_UART_Receive+0xa4>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	22ff      	movs	r2, #255	; 0xff
 8005b30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b34:	e01b      	b.n	8005b6e <HAL_UART_Receive+0xdc>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	227f      	movs	r2, #127	; 0x7f
 8005b3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b3e:	e016      	b.n	8005b6e <HAL_UART_Receive+0xdc>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b48:	d10d      	bne.n	8005b66 <HAL_UART_Receive+0xd4>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d104      	bne.n	8005b5c <HAL_UART_Receive+0xca>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	227f      	movs	r2, #127	; 0x7f
 8005b56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b5a:	e008      	b.n	8005b6e <HAL_UART_Receive+0xdc>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	223f      	movs	r2, #63	; 0x3f
 8005b60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b64:	e003      	b.n	8005b6e <HAL_UART_Receive+0xdc>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b74:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b7e:	d108      	bne.n	8005b92 <HAL_UART_Receive+0x100>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d104      	bne.n	8005b92 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	61bb      	str	r3, [r7, #24]
 8005b90:	e003      	b.n	8005b9a <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005ba2:	e032      	b.n	8005c0a <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	2200      	movs	r2, #0
 8005bac:	2120      	movs	r1, #32
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 fe75 	bl	800689e <UART_WaitOnFlagUntilTimeout>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e031      	b.n	8005c22 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10c      	bne.n	8005bde <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	8a7b      	ldrh	r3, [r7, #18]
 8005bce:	4013      	ands	r3, r2
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	3302      	adds	r3, #2
 8005bda:	61bb      	str	r3, [r7, #24]
 8005bdc:	e00c      	b.n	8005bf8 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	8a7b      	ldrh	r3, [r7, #18]
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	4013      	ands	r3, r2
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	3b01      	subs	r3, #1
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1c6      	bne.n	8005ba4 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	e000      	b.n	8005c22 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 8005c20:	2302      	movs	r3, #2
  }
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3720      	adds	r7, #32
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b088      	sub	sp, #32
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c4c:	69fa      	ldr	r2, [r7, #28]
 8005c4e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005c52:	4013      	ands	r3, r2
 8005c54:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d113      	bne.n	8005c84 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00e      	beq.n	8005c84 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	f003 0320 	and.w	r3, r3, #32
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d009      	beq.n	8005c84 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 8114 	beq.w	8005ea2 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	4798      	blx	r3
      }
      return;
 8005c82:	e10e      	b.n	8005ea2 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f000 80d6 	beq.w	8005e38 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d105      	bne.n	8005ca2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 80cb 	beq.w	8005e38 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00e      	beq.n	8005cca <HAL_UART_IRQHandler+0x9e>
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d009      	beq.n	8005cca <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cc2:	f043 0201 	orr.w	r2, r3, #1
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00e      	beq.n	8005cf2 <HAL_UART_IRQHandler+0xc6>
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d009      	beq.n	8005cf2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cea:	f043 0204 	orr.w	r2, r3, #4
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00e      	beq.n	8005d1a <HAL_UART_IRQHandler+0xee>
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d009      	beq.n	8005d1a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2204      	movs	r2, #4
 8005d0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d12:	f043 0202 	orr.w	r2, r3, #2
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	f003 0308 	and.w	r3, r3, #8
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d013      	beq.n	8005d4c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d104      	bne.n	8005d38 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d009      	beq.n	8005d4c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2208      	movs	r2, #8
 8005d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d44:	f043 0208 	orr.w	r2, r3, #8
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00f      	beq.n	8005d76 <HAL_UART_IRQHandler+0x14a>
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00a      	beq.n	8005d76 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d6e:	f043 0220 	orr.w	r2, r3, #32
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 8093 	beq.w	8005ea6 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	f003 0320 	and.w	r3, r3, #32
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00c      	beq.n	8005da4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	f003 0320 	and.w	r3, r3, #32
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d007      	beq.n	8005da4 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005da8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db4:	2b40      	cmp	r3, #64	; 0x40
 8005db6:	d004      	beq.n	8005dc2 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d031      	beq.n	8005e26 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fde6 	bl	8006994 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd2:	2b40      	cmp	r3, #64	; 0x40
 8005dd4:	d123      	bne.n	8005e1e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005de4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d013      	beq.n	8005e16 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005df2:	4a30      	ldr	r2, [pc, #192]	; (8005eb4 <HAL_UART_IRQHandler+0x288>)
 8005df4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7fc f926 	bl	800204c <HAL_DMA_Abort_IT>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d016      	beq.n	8005e34 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005e10:	4610      	mov	r0, r2
 8005e12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e14:	e00e      	b.n	8005e34 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f858 	bl	8005ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e1c:	e00a      	b.n	8005e34 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f854 	bl	8005ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e24:	e006      	b.n	8005e34 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f850 	bl	8005ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005e32:	e038      	b.n	8005ea6 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e34:	bf00      	nop
    return;
 8005e36:	e036      	b.n	8005ea6 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00d      	beq.n	8005e5e <HAL_UART_IRQHandler+0x232>
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d008      	beq.n	8005e5e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005e54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f842 	bl	8005ee0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e5c:	e026      	b.n	8005eac <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00d      	beq.n	8005e84 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d008      	beq.n	8005e84 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d017      	beq.n	8005eaa <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	4798      	blx	r3
    }
    return;
 8005e82:	e012      	b.n	8005eaa <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00e      	beq.n	8005eac <HAL_UART_IRQHandler+0x280>
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d009      	beq.n	8005eac <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fdb1 	bl	8006a00 <UART_EndTransmit_IT>
    return;
 8005e9e:	bf00      	nop
 8005ea0:	e004      	b.n	8005eac <HAL_UART_IRQHandler+0x280>
      return;
 8005ea2:	bf00      	nop
 8005ea4:	e002      	b.n	8005eac <HAL_UART_IRQHandler+0x280>
    return;
 8005ea6:	bf00      	nop
 8005ea8:	e000      	b.n	8005eac <HAL_UART_IRQHandler+0x280>
    return;
 8005eaa:	bf00      	nop
  }

}
 8005eac:	3720      	adds	r7, #32
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	080069d5 	.word	0x080069d5

08005eb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f00:	2300      	movs	r3, #0
 8005f02:	75fb      	strb	r3, [r7, #23]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	4aaa      	ldr	r2, [pc, #680]	; (80061b4 <UART_SetConfig+0x2c0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d904      	bls.n	8005f18 <UART_SetConfig+0x24>
 8005f0e:	f640 21be 	movw	r1, #2750	; 0xabe
 8005f12:	48a9      	ldr	r0, [pc, #676]	; (80061b8 <UART_SetConfig+0x2c4>)
 8005f14:	f7fb fb20 	bl	8001558 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f20:	d00d      	beq.n	8005f3e <UART_SetConfig+0x4a>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d009      	beq.n	8005f3e <UART_SetConfig+0x4a>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f32:	d004      	beq.n	8005f3e <UART_SetConfig+0x4a>
 8005f34:	f640 21bf 	movw	r1, #2751	; 0xabf
 8005f38:	489f      	ldr	r0, [pc, #636]	; (80061b8 <UART_SetConfig+0x2c4>)
 8005f3a:	f7fb fb0d 	bl	8001558 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f46:	d012      	beq.n	8005f6e <UART_SetConfig+0x7a>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00e      	beq.n	8005f6e <UART_SetConfig+0x7a>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f58:	d009      	beq.n	8005f6e <UART_SetConfig+0x7a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f62:	d004      	beq.n	8005f6e <UART_SetConfig+0x7a>
 8005f64:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 8005f68:	4893      	ldr	r0, [pc, #588]	; (80061b8 <UART_SetConfig+0x2c4>)
 8005f6a:	f7fb faf5 	bl	8001558 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d009      	beq.n	8005f8a <UART_SetConfig+0x96>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f7e:	d004      	beq.n	8005f8a <UART_SetConfig+0x96>
 8005f80:	f640 21c1 	movw	r1, #2753	; 0xac1
 8005f84:	488c      	ldr	r0, [pc, #560]	; (80061b8 <UART_SetConfig+0x2c4>)
 8005f86:	f7fb fae7 	bl	8001558 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00e      	beq.n	8005fb0 <UART_SetConfig+0xbc>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f9a:	d009      	beq.n	8005fb0 <UART_SetConfig+0xbc>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005fa4:	d004      	beq.n	8005fb0 <UART_SetConfig+0xbc>
 8005fa6:	f640 21c3 	movw	r1, #2755	; 0xac3
 8005faa:	4883      	ldr	r0, [pc, #524]	; (80061b8 <UART_SetConfig+0x2c4>)
 8005fac:	f7fb fad4 	bl	8001558 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	f023 030c 	bic.w	r3, r3, #12
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d103      	bne.n	8005fc4 <UART_SetConfig+0xd0>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d104      	bne.n	8005fce <UART_SetConfig+0xda>
 8005fc4:	f640 21c4 	movw	r1, #2756	; 0xac4
 8005fc8:	487b      	ldr	r0, [pc, #492]	; (80061b8 <UART_SetConfig+0x2c4>)
 8005fca:	f7fb fac5 	bl	8001558 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d013      	beq.n	8005ffe <UART_SetConfig+0x10a>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fde:	d00e      	beq.n	8005ffe <UART_SetConfig+0x10a>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe8:	d009      	beq.n	8005ffe <UART_SetConfig+0x10a>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ff2:	d004      	beq.n	8005ffe <UART_SetConfig+0x10a>
 8005ff4:	f640 21c5 	movw	r1, #2757	; 0xac5
 8005ff8:	486f      	ldr	r0, [pc, #444]	; (80061b8 <UART_SetConfig+0x2c4>)
 8005ffa:	f7fb faad 	bl	8001558 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d009      	beq.n	800601a <UART_SetConfig+0x126>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800600e:	d004      	beq.n	800601a <UART_SetConfig+0x126>
 8006010:	f640 21c6 	movw	r1, #2758	; 0xac6
 8006014:	4868      	ldr	r0, [pc, #416]	; (80061b8 <UART_SetConfig+0x2c4>)
 8006016:	f7fb fa9f 	bl	8001558 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	431a      	orrs	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	431a      	orrs	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	4313      	orrs	r3, r2
 8006030:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	4b60      	ldr	r3, [pc, #384]	; (80061bc <UART_SetConfig+0x2c8>)
 800603a:	4013      	ands	r3, r2
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	6812      	ldr	r2, [r2, #0]
 8006040:	6939      	ldr	r1, [r7, #16]
 8006042:	430b      	orrs	r3, r1
 8006044:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68da      	ldr	r2, [r3, #12]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	4313      	orrs	r3, r2
 800606a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	430a      	orrs	r2, r1
 800607e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a4e      	ldr	r2, [pc, #312]	; (80061c0 <UART_SetConfig+0x2cc>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d122      	bne.n	80060d0 <UART_SetConfig+0x1dc>
 800608a:	4b4e      	ldr	r3, [pc, #312]	; (80061c4 <UART_SetConfig+0x2d0>)
 800608c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006090:	f003 0303 	and.w	r3, r3, #3
 8006094:	2b03      	cmp	r3, #3
 8006096:	d817      	bhi.n	80060c8 <UART_SetConfig+0x1d4>
 8006098:	a201      	add	r2, pc, #4	; (adr r2, 80060a0 <UART_SetConfig+0x1ac>)
 800609a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609e:	bf00      	nop
 80060a0:	080060b1 	.word	0x080060b1
 80060a4:	080060bd 	.word	0x080060bd
 80060a8:	080060b7 	.word	0x080060b7
 80060ac:	080060c3 	.word	0x080060c3
 80060b0:	2301      	movs	r3, #1
 80060b2:	77fb      	strb	r3, [r7, #31]
 80060b4:	e14d      	b.n	8006352 <UART_SetConfig+0x45e>
 80060b6:	2302      	movs	r3, #2
 80060b8:	77fb      	strb	r3, [r7, #31]
 80060ba:	e14a      	b.n	8006352 <UART_SetConfig+0x45e>
 80060bc:	2304      	movs	r3, #4
 80060be:	77fb      	strb	r3, [r7, #31]
 80060c0:	e147      	b.n	8006352 <UART_SetConfig+0x45e>
 80060c2:	2308      	movs	r3, #8
 80060c4:	77fb      	strb	r3, [r7, #31]
 80060c6:	e144      	b.n	8006352 <UART_SetConfig+0x45e>
 80060c8:	2310      	movs	r3, #16
 80060ca:	77fb      	strb	r3, [r7, #31]
 80060cc:	bf00      	nop
 80060ce:	e140      	b.n	8006352 <UART_SetConfig+0x45e>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a3c      	ldr	r2, [pc, #240]	; (80061c8 <UART_SetConfig+0x2d4>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d134      	bne.n	8006144 <UART_SetConfig+0x250>
 80060da:	4b3a      	ldr	r3, [pc, #232]	; (80061c4 <UART_SetConfig+0x2d0>)
 80060dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e0:	f003 030c 	and.w	r3, r3, #12
 80060e4:	2b0c      	cmp	r3, #12
 80060e6:	d829      	bhi.n	800613c <UART_SetConfig+0x248>
 80060e8:	a201      	add	r2, pc, #4	; (adr r2, 80060f0 <UART_SetConfig+0x1fc>)
 80060ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ee:	bf00      	nop
 80060f0:	08006125 	.word	0x08006125
 80060f4:	0800613d 	.word	0x0800613d
 80060f8:	0800613d 	.word	0x0800613d
 80060fc:	0800613d 	.word	0x0800613d
 8006100:	08006131 	.word	0x08006131
 8006104:	0800613d 	.word	0x0800613d
 8006108:	0800613d 	.word	0x0800613d
 800610c:	0800613d 	.word	0x0800613d
 8006110:	0800612b 	.word	0x0800612b
 8006114:	0800613d 	.word	0x0800613d
 8006118:	0800613d 	.word	0x0800613d
 800611c:	0800613d 	.word	0x0800613d
 8006120:	08006137 	.word	0x08006137
 8006124:	2300      	movs	r3, #0
 8006126:	77fb      	strb	r3, [r7, #31]
 8006128:	e113      	b.n	8006352 <UART_SetConfig+0x45e>
 800612a:	2302      	movs	r3, #2
 800612c:	77fb      	strb	r3, [r7, #31]
 800612e:	e110      	b.n	8006352 <UART_SetConfig+0x45e>
 8006130:	2304      	movs	r3, #4
 8006132:	77fb      	strb	r3, [r7, #31]
 8006134:	e10d      	b.n	8006352 <UART_SetConfig+0x45e>
 8006136:	2308      	movs	r3, #8
 8006138:	77fb      	strb	r3, [r7, #31]
 800613a:	e10a      	b.n	8006352 <UART_SetConfig+0x45e>
 800613c:	2310      	movs	r3, #16
 800613e:	77fb      	strb	r3, [r7, #31]
 8006140:	bf00      	nop
 8006142:	e106      	b.n	8006352 <UART_SetConfig+0x45e>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a20      	ldr	r2, [pc, #128]	; (80061cc <UART_SetConfig+0x2d8>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d120      	bne.n	8006190 <UART_SetConfig+0x29c>
 800614e:	4b1d      	ldr	r3, [pc, #116]	; (80061c4 <UART_SetConfig+0x2d0>)
 8006150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006154:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006158:	2b10      	cmp	r3, #16
 800615a:	d00f      	beq.n	800617c <UART_SetConfig+0x288>
 800615c:	2b10      	cmp	r3, #16
 800615e:	d802      	bhi.n	8006166 <UART_SetConfig+0x272>
 8006160:	2b00      	cmp	r3, #0
 8006162:	d005      	beq.n	8006170 <UART_SetConfig+0x27c>
 8006164:	e010      	b.n	8006188 <UART_SetConfig+0x294>
 8006166:	2b20      	cmp	r3, #32
 8006168:	d005      	beq.n	8006176 <UART_SetConfig+0x282>
 800616a:	2b30      	cmp	r3, #48	; 0x30
 800616c:	d009      	beq.n	8006182 <UART_SetConfig+0x28e>
 800616e:	e00b      	b.n	8006188 <UART_SetConfig+0x294>
 8006170:	2300      	movs	r3, #0
 8006172:	77fb      	strb	r3, [r7, #31]
 8006174:	e0ed      	b.n	8006352 <UART_SetConfig+0x45e>
 8006176:	2302      	movs	r3, #2
 8006178:	77fb      	strb	r3, [r7, #31]
 800617a:	e0ea      	b.n	8006352 <UART_SetConfig+0x45e>
 800617c:	2304      	movs	r3, #4
 800617e:	77fb      	strb	r3, [r7, #31]
 8006180:	e0e7      	b.n	8006352 <UART_SetConfig+0x45e>
 8006182:	2308      	movs	r3, #8
 8006184:	77fb      	strb	r3, [r7, #31]
 8006186:	e0e4      	b.n	8006352 <UART_SetConfig+0x45e>
 8006188:	2310      	movs	r3, #16
 800618a:	77fb      	strb	r3, [r7, #31]
 800618c:	bf00      	nop
 800618e:	e0e0      	b.n	8006352 <UART_SetConfig+0x45e>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a0e      	ldr	r2, [pc, #56]	; (80061d0 <UART_SetConfig+0x2dc>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d131      	bne.n	80061fe <UART_SetConfig+0x30a>
 800619a:	4b0a      	ldr	r3, [pc, #40]	; (80061c4 <UART_SetConfig+0x2d0>)
 800619c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80061a4:	2b40      	cmp	r3, #64	; 0x40
 80061a6:	d020      	beq.n	80061ea <UART_SetConfig+0x2f6>
 80061a8:	2b40      	cmp	r3, #64	; 0x40
 80061aa:	d813      	bhi.n	80061d4 <UART_SetConfig+0x2e0>
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d016      	beq.n	80061de <UART_SetConfig+0x2ea>
 80061b0:	e021      	b.n	80061f6 <UART_SetConfig+0x302>
 80061b2:	bf00      	nop
 80061b4:	019bfcc0 	.word	0x019bfcc0
 80061b8:	08006bc8 	.word	0x08006bc8
 80061bc:	efff69f3 	.word	0xefff69f3
 80061c0:	40011000 	.word	0x40011000
 80061c4:	40023800 	.word	0x40023800
 80061c8:	40004400 	.word	0x40004400
 80061cc:	40004800 	.word	0x40004800
 80061d0:	40004c00 	.word	0x40004c00
 80061d4:	2b80      	cmp	r3, #128	; 0x80
 80061d6:	d005      	beq.n	80061e4 <UART_SetConfig+0x2f0>
 80061d8:	2bc0      	cmp	r3, #192	; 0xc0
 80061da:	d009      	beq.n	80061f0 <UART_SetConfig+0x2fc>
 80061dc:	e00b      	b.n	80061f6 <UART_SetConfig+0x302>
 80061de:	2300      	movs	r3, #0
 80061e0:	77fb      	strb	r3, [r7, #31]
 80061e2:	e0b6      	b.n	8006352 <UART_SetConfig+0x45e>
 80061e4:	2302      	movs	r3, #2
 80061e6:	77fb      	strb	r3, [r7, #31]
 80061e8:	e0b3      	b.n	8006352 <UART_SetConfig+0x45e>
 80061ea:	2304      	movs	r3, #4
 80061ec:	77fb      	strb	r3, [r7, #31]
 80061ee:	e0b0      	b.n	8006352 <UART_SetConfig+0x45e>
 80061f0:	2308      	movs	r3, #8
 80061f2:	77fb      	strb	r3, [r7, #31]
 80061f4:	e0ad      	b.n	8006352 <UART_SetConfig+0x45e>
 80061f6:	2310      	movs	r3, #16
 80061f8:	77fb      	strb	r3, [r7, #31]
 80061fa:	bf00      	nop
 80061fc:	e0a9      	b.n	8006352 <UART_SetConfig+0x45e>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4aaa      	ldr	r2, [pc, #680]	; (80064ac <UART_SetConfig+0x5b8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d124      	bne.n	8006252 <UART_SetConfig+0x35e>
 8006208:	4ba9      	ldr	r3, [pc, #676]	; (80064b0 <UART_SetConfig+0x5bc>)
 800620a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006216:	d012      	beq.n	800623e <UART_SetConfig+0x34a>
 8006218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800621c:	d802      	bhi.n	8006224 <UART_SetConfig+0x330>
 800621e:	2b00      	cmp	r3, #0
 8006220:	d007      	beq.n	8006232 <UART_SetConfig+0x33e>
 8006222:	e012      	b.n	800624a <UART_SetConfig+0x356>
 8006224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006228:	d006      	beq.n	8006238 <UART_SetConfig+0x344>
 800622a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800622e:	d009      	beq.n	8006244 <UART_SetConfig+0x350>
 8006230:	e00b      	b.n	800624a <UART_SetConfig+0x356>
 8006232:	2300      	movs	r3, #0
 8006234:	77fb      	strb	r3, [r7, #31]
 8006236:	e08c      	b.n	8006352 <UART_SetConfig+0x45e>
 8006238:	2302      	movs	r3, #2
 800623a:	77fb      	strb	r3, [r7, #31]
 800623c:	e089      	b.n	8006352 <UART_SetConfig+0x45e>
 800623e:	2304      	movs	r3, #4
 8006240:	77fb      	strb	r3, [r7, #31]
 8006242:	e086      	b.n	8006352 <UART_SetConfig+0x45e>
 8006244:	2308      	movs	r3, #8
 8006246:	77fb      	strb	r3, [r7, #31]
 8006248:	e083      	b.n	8006352 <UART_SetConfig+0x45e>
 800624a:	2310      	movs	r3, #16
 800624c:	77fb      	strb	r3, [r7, #31]
 800624e:	bf00      	nop
 8006250:	e07f      	b.n	8006352 <UART_SetConfig+0x45e>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a97      	ldr	r2, [pc, #604]	; (80064b4 <UART_SetConfig+0x5c0>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d124      	bne.n	80062a6 <UART_SetConfig+0x3b2>
 800625c:	4b94      	ldr	r3, [pc, #592]	; (80064b0 <UART_SetConfig+0x5bc>)
 800625e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006262:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800626a:	d012      	beq.n	8006292 <UART_SetConfig+0x39e>
 800626c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006270:	d802      	bhi.n	8006278 <UART_SetConfig+0x384>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d007      	beq.n	8006286 <UART_SetConfig+0x392>
 8006276:	e012      	b.n	800629e <UART_SetConfig+0x3aa>
 8006278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800627c:	d006      	beq.n	800628c <UART_SetConfig+0x398>
 800627e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006282:	d009      	beq.n	8006298 <UART_SetConfig+0x3a4>
 8006284:	e00b      	b.n	800629e <UART_SetConfig+0x3aa>
 8006286:	2301      	movs	r3, #1
 8006288:	77fb      	strb	r3, [r7, #31]
 800628a:	e062      	b.n	8006352 <UART_SetConfig+0x45e>
 800628c:	2302      	movs	r3, #2
 800628e:	77fb      	strb	r3, [r7, #31]
 8006290:	e05f      	b.n	8006352 <UART_SetConfig+0x45e>
 8006292:	2304      	movs	r3, #4
 8006294:	77fb      	strb	r3, [r7, #31]
 8006296:	e05c      	b.n	8006352 <UART_SetConfig+0x45e>
 8006298:	2308      	movs	r3, #8
 800629a:	77fb      	strb	r3, [r7, #31]
 800629c:	e059      	b.n	8006352 <UART_SetConfig+0x45e>
 800629e:	2310      	movs	r3, #16
 80062a0:	77fb      	strb	r3, [r7, #31]
 80062a2:	bf00      	nop
 80062a4:	e055      	b.n	8006352 <UART_SetConfig+0x45e>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a83      	ldr	r2, [pc, #524]	; (80064b8 <UART_SetConfig+0x5c4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d124      	bne.n	80062fa <UART_SetConfig+0x406>
 80062b0:	4b7f      	ldr	r3, [pc, #508]	; (80064b0 <UART_SetConfig+0x5bc>)
 80062b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80062ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062be:	d012      	beq.n	80062e6 <UART_SetConfig+0x3f2>
 80062c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062c4:	d802      	bhi.n	80062cc <UART_SetConfig+0x3d8>
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d007      	beq.n	80062da <UART_SetConfig+0x3e6>
 80062ca:	e012      	b.n	80062f2 <UART_SetConfig+0x3fe>
 80062cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062d0:	d006      	beq.n	80062e0 <UART_SetConfig+0x3ec>
 80062d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062d6:	d009      	beq.n	80062ec <UART_SetConfig+0x3f8>
 80062d8:	e00b      	b.n	80062f2 <UART_SetConfig+0x3fe>
 80062da:	2300      	movs	r3, #0
 80062dc:	77fb      	strb	r3, [r7, #31]
 80062de:	e038      	b.n	8006352 <UART_SetConfig+0x45e>
 80062e0:	2302      	movs	r3, #2
 80062e2:	77fb      	strb	r3, [r7, #31]
 80062e4:	e035      	b.n	8006352 <UART_SetConfig+0x45e>
 80062e6:	2304      	movs	r3, #4
 80062e8:	77fb      	strb	r3, [r7, #31]
 80062ea:	e032      	b.n	8006352 <UART_SetConfig+0x45e>
 80062ec:	2308      	movs	r3, #8
 80062ee:	77fb      	strb	r3, [r7, #31]
 80062f0:	e02f      	b.n	8006352 <UART_SetConfig+0x45e>
 80062f2:	2310      	movs	r3, #16
 80062f4:	77fb      	strb	r3, [r7, #31]
 80062f6:	bf00      	nop
 80062f8:	e02b      	b.n	8006352 <UART_SetConfig+0x45e>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a6f      	ldr	r2, [pc, #444]	; (80064bc <UART_SetConfig+0x5c8>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d124      	bne.n	800634e <UART_SetConfig+0x45a>
 8006304:	4b6a      	ldr	r3, [pc, #424]	; (80064b0 <UART_SetConfig+0x5bc>)
 8006306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800630e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006312:	d012      	beq.n	800633a <UART_SetConfig+0x446>
 8006314:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006318:	d802      	bhi.n	8006320 <UART_SetConfig+0x42c>
 800631a:	2b00      	cmp	r3, #0
 800631c:	d007      	beq.n	800632e <UART_SetConfig+0x43a>
 800631e:	e012      	b.n	8006346 <UART_SetConfig+0x452>
 8006320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006324:	d006      	beq.n	8006334 <UART_SetConfig+0x440>
 8006326:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800632a:	d009      	beq.n	8006340 <UART_SetConfig+0x44c>
 800632c:	e00b      	b.n	8006346 <UART_SetConfig+0x452>
 800632e:	2300      	movs	r3, #0
 8006330:	77fb      	strb	r3, [r7, #31]
 8006332:	e00e      	b.n	8006352 <UART_SetConfig+0x45e>
 8006334:	2302      	movs	r3, #2
 8006336:	77fb      	strb	r3, [r7, #31]
 8006338:	e00b      	b.n	8006352 <UART_SetConfig+0x45e>
 800633a:	2304      	movs	r3, #4
 800633c:	77fb      	strb	r3, [r7, #31]
 800633e:	e008      	b.n	8006352 <UART_SetConfig+0x45e>
 8006340:	2308      	movs	r3, #8
 8006342:	77fb      	strb	r3, [r7, #31]
 8006344:	e005      	b.n	8006352 <UART_SetConfig+0x45e>
 8006346:	2310      	movs	r3, #16
 8006348:	77fb      	strb	r3, [r7, #31]
 800634a:	bf00      	nop
 800634c:	e001      	b.n	8006352 <UART_SetConfig+0x45e>
 800634e:	2310      	movs	r3, #16
 8006350:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800635a:	d17f      	bne.n	800645c <UART_SetConfig+0x568>
  {
    switch (clocksource)
 800635c:	7ffb      	ldrb	r3, [r7, #31]
 800635e:	2b08      	cmp	r3, #8
 8006360:	d85c      	bhi.n	800641c <UART_SetConfig+0x528>
 8006362:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <UART_SetConfig+0x474>)
 8006364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006368:	0800638d 	.word	0x0800638d
 800636c:	080063ad 	.word	0x080063ad
 8006370:	080063cd 	.word	0x080063cd
 8006374:	0800641d 	.word	0x0800641d
 8006378:	080063e5 	.word	0x080063e5
 800637c:	0800641d 	.word	0x0800641d
 8006380:	0800641d 	.word	0x0800641d
 8006384:	0800641d 	.word	0x0800641d
 8006388:	08006405 	.word	0x08006405
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800638c:	f7fd f8a4 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 8006390:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	005a      	lsls	r2, r3, #1
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	085b      	lsrs	r3, r3, #1
 800639c:	441a      	add	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	61bb      	str	r3, [r7, #24]
        break;
 80063aa:	e03a      	b.n	8006422 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063ac:	f7fd f8a8 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 80063b0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	005a      	lsls	r2, r3, #1
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	085b      	lsrs	r3, r3, #1
 80063bc:	441a      	add	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	61bb      	str	r3, [r7, #24]
        break;
 80063ca:	e02a      	b.n	8006422 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	085a      	lsrs	r2, r3, #1
 80063d2:	4b3b      	ldr	r3, [pc, #236]	; (80064c0 <UART_SetConfig+0x5cc>)
 80063d4:	4413      	add	r3, r2
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	6852      	ldr	r2, [r2, #4]
 80063da:	fbb3 f3f2 	udiv	r3, r3, r2
 80063de:	b29b      	uxth	r3, r3
 80063e0:	61bb      	str	r3, [r7, #24]
        break;
 80063e2:	e01e      	b.n	8006422 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063e4:	f7fc ffba 	bl	800335c <HAL_RCC_GetSysClockFreq>
 80063e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	005a      	lsls	r2, r3, #1
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	085b      	lsrs	r3, r3, #1
 80063f4:	441a      	add	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fe:	b29b      	uxth	r3, r3
 8006400:	61bb      	str	r3, [r7, #24]
        break;
 8006402:	e00e      	b.n	8006422 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	085b      	lsrs	r3, r3, #1
 800640a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	fbb2 f3f3 	udiv	r3, r2, r3
 8006416:	b29b      	uxth	r3, r3
 8006418:	61bb      	str	r3, [r7, #24]
        break;
 800641a:	e002      	b.n	8006422 <UART_SetConfig+0x52e>
      default:
        ret = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	75fb      	strb	r3, [r7, #23]
        break;
 8006420:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	2b0f      	cmp	r3, #15
 8006426:	d916      	bls.n	8006456 <UART_SetConfig+0x562>
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800642e:	d212      	bcs.n	8006456 <UART_SetConfig+0x562>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	b29b      	uxth	r3, r3
 8006434:	f023 030f 	bic.w	r3, r3, #15
 8006438:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	085b      	lsrs	r3, r3, #1
 800643e:	b29b      	uxth	r3, r3
 8006440:	f003 0307 	and.w	r3, r3, #7
 8006444:	b29a      	uxth	r2, r3
 8006446:	897b      	ldrh	r3, [r7, #10]
 8006448:	4313      	orrs	r3, r2
 800644a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	897a      	ldrh	r2, [r7, #10]
 8006452:	60da      	str	r2, [r3, #12]
 8006454:	e07d      	b.n	8006552 <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	75fb      	strb	r3, [r7, #23]
 800645a:	e07a      	b.n	8006552 <UART_SetConfig+0x65e>
    }
  }
  else
  {
    switch (clocksource)
 800645c:	7ffb      	ldrb	r3, [r7, #31]
 800645e:	2b08      	cmp	r3, #8
 8006460:	d866      	bhi.n	8006530 <UART_SetConfig+0x63c>
 8006462:	a201      	add	r2, pc, #4	; (adr r2, 8006468 <UART_SetConfig+0x574>)
 8006464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006468:	0800648d 	.word	0x0800648d
 800646c:	080064c5 	.word	0x080064c5
 8006470:	080064e3 	.word	0x080064e3
 8006474:	08006531 	.word	0x08006531
 8006478:	080064fb 	.word	0x080064fb
 800647c:	08006531 	.word	0x08006531
 8006480:	08006531 	.word	0x08006531
 8006484:	08006531 	.word	0x08006531
 8006488:	08006519 	.word	0x08006519
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800648c:	f7fd f824 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 8006490:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	085a      	lsrs	r2, r3, #1
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	441a      	add	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	61bb      	str	r3, [r7, #24]
        break;
 80064a8:	e045      	b.n	8006536 <UART_SetConfig+0x642>
 80064aa:	bf00      	nop
 80064ac:	40005000 	.word	0x40005000
 80064b0:	40023800 	.word	0x40023800
 80064b4:	40011400 	.word	0x40011400
 80064b8:	40007800 	.word	0x40007800
 80064bc:	40007c00 	.word	0x40007c00
 80064c0:	01e84800 	.word	0x01e84800
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064c4:	f7fd f81c 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 80064c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	085a      	lsrs	r2, r3, #1
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	441a      	add	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064dc:	b29b      	uxth	r3, r3
 80064de:	61bb      	str	r3, [r7, #24]
        break;
 80064e0:	e029      	b.n	8006536 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	085a      	lsrs	r2, r3, #1
 80064e8:	4b1f      	ldr	r3, [pc, #124]	; (8006568 <UART_SetConfig+0x674>)
 80064ea:	4413      	add	r3, r2
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	6852      	ldr	r2, [r2, #4]
 80064f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	61bb      	str	r3, [r7, #24]
        break;
 80064f8:	e01d      	b.n	8006536 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064fa:	f7fc ff2f 	bl	800335c <HAL_RCC_GetSysClockFreq>
 80064fe:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	085a      	lsrs	r2, r3, #1
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	441a      	add	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006512:	b29b      	uxth	r3, r3
 8006514:	61bb      	str	r3, [r7, #24]
        break;
 8006516:	e00e      	b.n	8006536 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	085b      	lsrs	r3, r3, #1
 800651e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	fbb2 f3f3 	udiv	r3, r2, r3
 800652a:	b29b      	uxth	r3, r3
 800652c:	61bb      	str	r3, [r7, #24]
        break;
 800652e:	e002      	b.n	8006536 <UART_SetConfig+0x642>
      default:
        ret = HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	75fb      	strb	r3, [r7, #23]
        break;
 8006534:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	2b0f      	cmp	r3, #15
 800653a:	d908      	bls.n	800654e <UART_SetConfig+0x65a>
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006542:	d204      	bcs.n	800654e <UART_SetConfig+0x65a>
    {
      huart->Instance->BRR = usartdiv;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	60da      	str	r2, [r3, #12]
 800654c:	e001      	b.n	8006552 <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800655e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3720      	adds	r7, #32
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	00f42400 	.word	0x00f42400

0800656c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006578:	2bff      	cmp	r3, #255	; 0xff
 800657a:	d904      	bls.n	8006586 <UART_AdvFeatureConfig+0x1a>
 800657c:	f640 3143 	movw	r1, #2883	; 0xb43
 8006580:	489f      	ldr	r0, [pc, #636]	; (8006800 <UART_AdvFeatureConfig+0x294>)
 8006582:	f7fa ffe9 	bl	8001558 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b00      	cmp	r3, #0
 8006590:	d018      	beq.n	80065c4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006596:	2b00      	cmp	r3, #0
 8006598:	d009      	beq.n	80065ae <UART_AdvFeatureConfig+0x42>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065a2:	d004      	beq.n	80065ae <UART_AdvFeatureConfig+0x42>
 80065a4:	f640 3148 	movw	r1, #2888	; 0xb48
 80065a8:	4895      	ldr	r0, [pc, #596]	; (8006800 <UART_AdvFeatureConfig+0x294>)
 80065aa:	f7fa ffd5 	bl	8001558 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d018      	beq.n	8006602 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d009      	beq.n	80065ec <UART_AdvFeatureConfig+0x80>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e0:	d004      	beq.n	80065ec <UART_AdvFeatureConfig+0x80>
 80065e2:	f640 314f 	movw	r1, #2895	; 0xb4f
 80065e6:	4886      	ldr	r0, [pc, #536]	; (8006800 <UART_AdvFeatureConfig+0x294>)
 80065e8:	f7fa ffb6 	bl	8001558 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	f003 0304 	and.w	r3, r3, #4
 800660a:	2b00      	cmp	r3, #0
 800660c:	d018      	beq.n	8006640 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006612:	2b00      	cmp	r3, #0
 8006614:	d009      	beq.n	800662a <UART_AdvFeatureConfig+0xbe>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800661e:	d004      	beq.n	800662a <UART_AdvFeatureConfig+0xbe>
 8006620:	f640 3156 	movw	r1, #2902	; 0xb56
 8006624:	4876      	ldr	r0, [pc, #472]	; (8006800 <UART_AdvFeatureConfig+0x294>)
 8006626:	f7fa ff97 	bl	8001558 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	f003 0308 	and.w	r3, r3, #8
 8006648:	2b00      	cmp	r3, #0
 800664a:	d018      	beq.n	800667e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006650:	2b00      	cmp	r3, #0
 8006652:	d009      	beq.n	8006668 <UART_AdvFeatureConfig+0xfc>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800665c:	d004      	beq.n	8006668 <UART_AdvFeatureConfig+0xfc>
 800665e:	f640 315d 	movw	r1, #2909	; 0xb5d
 8006662:	4867      	ldr	r0, [pc, #412]	; (8006800 <UART_AdvFeatureConfig+0x294>)
 8006664:	f7fa ff78 	bl	8001558 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006682:	f003 0310 	and.w	r3, r3, #16
 8006686:	2b00      	cmp	r3, #0
 8006688:	d018      	beq.n	80066bc <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668e:	2b00      	cmp	r3, #0
 8006690:	d009      	beq.n	80066a6 <UART_AdvFeatureConfig+0x13a>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800669a:	d004      	beq.n	80066a6 <UART_AdvFeatureConfig+0x13a>
 800669c:	f640 3164 	movw	r1, #2916	; 0xb64
 80066a0:	4857      	ldr	r0, [pc, #348]	; (8006800 <UART_AdvFeatureConfig+0x294>)
 80066a2:	f7fa ff59 	bl	8001558 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c0:	f003 0320 	and.w	r3, r3, #32
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d018      	beq.n	80066fa <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d009      	beq.n	80066e4 <UART_AdvFeatureConfig+0x178>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066d8:	d004      	beq.n	80066e4 <UART_AdvFeatureConfig+0x178>
 80066da:	f640 316b 	movw	r1, #2923	; 0xb6b
 80066de:	4848      	ldr	r0, [pc, #288]	; (8006800 <UART_AdvFeatureConfig+0x294>)
 80066e0:	f7fa ff3a 	bl	8001558 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006702:	2b00      	cmp	r3, #0
 8006704:	d059      	beq.n	80067ba <UART_AdvFeatureConfig+0x24e>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a3e      	ldr	r2, [pc, #248]	; (8006804 <UART_AdvFeatureConfig+0x298>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d013      	beq.n	8006738 <UART_AdvFeatureConfig+0x1cc>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a3c      	ldr	r2, [pc, #240]	; (8006808 <UART_AdvFeatureConfig+0x29c>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d00e      	beq.n	8006738 <UART_AdvFeatureConfig+0x1cc>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a3b      	ldr	r2, [pc, #236]	; (800680c <UART_AdvFeatureConfig+0x2a0>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d009      	beq.n	8006738 <UART_AdvFeatureConfig+0x1cc>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a39      	ldr	r2, [pc, #228]	; (8006810 <UART_AdvFeatureConfig+0x2a4>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d004      	beq.n	8006738 <UART_AdvFeatureConfig+0x1cc>
 800672e:	f640 3172 	movw	r1, #2930	; 0xb72
 8006732:	4833      	ldr	r0, [pc, #204]	; (8006800 <UART_AdvFeatureConfig+0x294>)
 8006734:	f7fa ff10 	bl	8001558 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673c:	2b00      	cmp	r3, #0
 800673e:	d009      	beq.n	8006754 <UART_AdvFeatureConfig+0x1e8>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006744:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006748:	d004      	beq.n	8006754 <UART_AdvFeatureConfig+0x1e8>
 800674a:	f640 3173 	movw	r1, #2931	; 0xb73
 800674e:	482c      	ldr	r0, [pc, #176]	; (8006800 <UART_AdvFeatureConfig+0x294>)
 8006750:	f7fa ff02 	bl	8001558 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	430a      	orrs	r2, r1
 8006768:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006772:	d122      	bne.n	80067ba <UART_AdvFeatureConfig+0x24e>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006778:	2b00      	cmp	r3, #0
 800677a:	d013      	beq.n	80067a4 <UART_AdvFeatureConfig+0x238>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006780:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006784:	d00e      	beq.n	80067a4 <UART_AdvFeatureConfig+0x238>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800678e:	d009      	beq.n	80067a4 <UART_AdvFeatureConfig+0x238>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006794:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006798:	d004      	beq.n	80067a4 <UART_AdvFeatureConfig+0x238>
 800679a:	f640 3178 	movw	r1, #2936	; 0xb78
 800679e:	4818      	ldr	r0, [pc, #96]	; (8006800 <UART_AdvFeatureConfig+0x294>)
 80067a0:	f7fa feda 	bl	8001558 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d018      	beq.n	80067f8 <UART_AdvFeatureConfig+0x28c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d009      	beq.n	80067e2 <UART_AdvFeatureConfig+0x276>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80067d6:	d004      	beq.n	80067e2 <UART_AdvFeatureConfig+0x276>
 80067d8:	f44f 6138 	mov.w	r1, #2944	; 0xb80
 80067dc:	4808      	ldr	r0, [pc, #32]	; (8006800 <UART_AdvFeatureConfig+0x294>)
 80067de:	f7fa febb 	bl	8001558 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	605a      	str	r2, [r3, #4]
  }
}
 80067f8:	bf00      	nop
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	08006bc8 	.word	0x08006bc8
 8006804:	40011000 	.word	0x40011000
 8006808:	40004400 	.word	0x40004400
 800680c:	40004800 	.word	0x40004800
 8006810:	40011400 	.word	0x40011400

08006814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af02      	add	r7, sp, #8
 800681a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006822:	f7fb faa5 	bl	8001d70 <HAL_GetTick>
 8006826:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0308 	and.w	r3, r3, #8
 8006832:	2b08      	cmp	r3, #8
 8006834:	d10e      	bne.n	8006854 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006836:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f82a 	bl	800689e <UART_WaitOnFlagUntilTimeout>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e020      	b.n	8006896 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0304 	and.w	r3, r3, #4
 800685e:	2b04      	cmp	r3, #4
 8006860:	d10e      	bne.n	8006880 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006862:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f814 	bl	800689e <UART_WaitOnFlagUntilTimeout>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d001      	beq.n	8006880 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e00a      	b.n	8006896 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2220      	movs	r2, #32
 8006884:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2220      	movs	r2, #32
 800688a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b084      	sub	sp, #16
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	60f8      	str	r0, [r7, #12]
 80068a6:	60b9      	str	r1, [r7, #8]
 80068a8:	603b      	str	r3, [r7, #0]
 80068aa:	4613      	mov	r3, r2
 80068ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ae:	e05d      	b.n	800696c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b6:	d059      	beq.n	800696c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068b8:	f7fb fa5a 	bl	8001d70 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d302      	bcc.n	80068ce <UART_WaitOnFlagUntilTimeout+0x30>
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d11b      	bne.n	8006906 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80068dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	689a      	ldr	r2, [r3, #8]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 0201 	bic.w	r2, r2, #1
 80068ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2220      	movs	r2, #32
 80068f2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2220      	movs	r2, #32
 80068f8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e042      	b.n	800698c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0304 	and.w	r3, r3, #4
 8006910:	2b00      	cmp	r3, #0
 8006912:	d02b      	beq.n	800696c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800691e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006922:	d123      	bne.n	800696c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800692c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800693c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	689a      	ldr	r2, [r3, #8]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f022 0201 	bic.w	r2, r2, #1
 800694c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2220      	movs	r2, #32
 8006952:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2220      	movs	r2, #32
 8006958:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2220      	movs	r2, #32
 800695e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e00f      	b.n	800698c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	69da      	ldr	r2, [r3, #28]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	4013      	ands	r3, r2
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	429a      	cmp	r2, r3
 800697a:	bf0c      	ite	eq
 800697c:	2301      	moveq	r3, #1
 800697e:	2300      	movne	r3, #0
 8006980:	b2db      	uxtb	r3, r3
 8006982:	461a      	mov	r2, r3
 8006984:	79fb      	ldrb	r3, [r7, #7]
 8006986:	429a      	cmp	r2, r3
 8006988:	d092      	beq.n	80068b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80069aa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689a      	ldr	r2, [r3, #8]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 0201 	bic.w	r2, r2, #1
 80069ba:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2220      	movs	r2, #32
 80069c0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f7ff fa6a 	bl	8005ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069f8:	bf00      	nop
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a16:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7ff fa47 	bl	8005eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a2a:	bf00      	nop
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
	...

08006a34 <__libc_init_array>:
 8006a34:	b570      	push	{r4, r5, r6, lr}
 8006a36:	4e0d      	ldr	r6, [pc, #52]	; (8006a6c <__libc_init_array+0x38>)
 8006a38:	4c0d      	ldr	r4, [pc, #52]	; (8006a70 <__libc_init_array+0x3c>)
 8006a3a:	1ba4      	subs	r4, r4, r6
 8006a3c:	10a4      	asrs	r4, r4, #2
 8006a3e:	2500      	movs	r5, #0
 8006a40:	42a5      	cmp	r5, r4
 8006a42:	d109      	bne.n	8006a58 <__libc_init_array+0x24>
 8006a44:	4e0b      	ldr	r6, [pc, #44]	; (8006a74 <__libc_init_array+0x40>)
 8006a46:	4c0c      	ldr	r4, [pc, #48]	; (8006a78 <__libc_init_array+0x44>)
 8006a48:	f000 f820 	bl	8006a8c <_init>
 8006a4c:	1ba4      	subs	r4, r4, r6
 8006a4e:	10a4      	asrs	r4, r4, #2
 8006a50:	2500      	movs	r5, #0
 8006a52:	42a5      	cmp	r5, r4
 8006a54:	d105      	bne.n	8006a62 <__libc_init_array+0x2e>
 8006a56:	bd70      	pop	{r4, r5, r6, pc}
 8006a58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a5c:	4798      	blx	r3
 8006a5e:	3501      	adds	r5, #1
 8006a60:	e7ee      	b.n	8006a40 <__libc_init_array+0xc>
 8006a62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a66:	4798      	blx	r3
 8006a68:	3501      	adds	r5, #1
 8006a6a:	e7f2      	b.n	8006a52 <__libc_init_array+0x1e>
 8006a6c:	08006c24 	.word	0x08006c24
 8006a70:	08006c24 	.word	0x08006c24
 8006a74:	08006c24 	.word	0x08006c24
 8006a78:	08006c28 	.word	0x08006c28

08006a7c <memset>:
 8006a7c:	4402      	add	r2, r0
 8006a7e:	4603      	mov	r3, r0
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d100      	bne.n	8006a86 <memset+0xa>
 8006a84:	4770      	bx	lr
 8006a86:	f803 1b01 	strb.w	r1, [r3], #1
 8006a8a:	e7f9      	b.n	8006a80 <memset+0x4>

08006a8c <_init>:
 8006a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8e:	bf00      	nop
 8006a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a92:	bc08      	pop	{r3}
 8006a94:	469e      	mov	lr, r3
 8006a96:	4770      	bx	lr

08006a98 <_fini>:
 8006a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9a:	bf00      	nop
 8006a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a9e:	bc08      	pop	{r3}
 8006aa0:	469e      	mov	lr, r3
 8006aa2:	4770      	bx	lr
