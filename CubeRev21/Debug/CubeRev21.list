
CubeRev21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b8c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08007d8c  08007d8c  00017d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fd4  08007fd4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007fd4  08007fd4  00017fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fdc  08007fdc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fdc  08007fdc  00017fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fe0  08007fe0  00017fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  20000070  08008054  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08008054  0002043c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9ce  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002797  00000000  00000000  0002fa6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c48  00000000  00000000  00032208  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ae0  00000000  00000000  00032e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e922  00000000  00000000  00033930  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dd35  00000000  00000000  00062252  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00113159  00000000  00000000  0006ff87  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001830e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032b8  00000000  00000000  0018315c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08007d74 	.word	0x08007d74

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08007d74 	.word	0x08007d74

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <MemoryTest>:
/**
 * @brief: tests the memory
 * TEST: Write to memory, wait, read form memory.
 * @return 0: Passed.
 */
uint32_t MemoryTest(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 80005f6:	af02      	add	r7, sp, #8
	SPI_Values DUT;
	DUT.CS_Pin = GPIO_PIN_3;
 80005f8:	2308      	movs	r3, #8
 80005fa:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204
	DUT.CS_Port = GPIOE;
 80005fe:	4b49      	ldr	r3, [pc, #292]	; (8000724 <MemoryTest+0x134>)
 8000600:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	DUT.spihandle = &hspi5;
 8000604:	4b48      	ldr	r3, [pc, #288]	; (8000728 <MemoryTest+0x138>)
 8000606:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

	uint8_t writeBuffer[256];
	uint8_t readBuffer[256] = { 0 };
 800060a:	463b      	mov	r3, r7
 800060c:	4618      	mov	r0, r3
 800060e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000612:	461a      	mov	r2, r3
 8000614:	2100      	movs	r1, #0
 8000616:	f006 ff9f 	bl	8007558 <memset>
	uint32_t adresse = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

	//Testdaten initialisieren
	for (int i = 0; i < 256; i++) {
 8000620:	2300      	movs	r3, #0
 8000622:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000626:	e00e      	b.n	8000646 <MemoryTest+0x56>
		writeBuffer[i] = i;
 8000628:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800062c:	b2d9      	uxtb	r1, r3
 800062e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000632:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000636:	4413      	add	r3, r2
 8000638:	460a      	mov	r2, r1
 800063a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 256; i++) {
 800063c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000640:	3301      	adds	r3, #1
 8000642:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000646:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800064a:	2bff      	cmp	r3, #255	; 0xff
 800064c:	ddec      	ble.n	8000628 <MemoryTest+0x38>
	}

	//CHIP löschen
	chipErase(DUT);
 800064e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000652:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000656:	f000 f96c 	bl	8000932 <chipErase>
	//evtl Zusätzliche Schleife für die verschiedenen Chips und CS pins
	for (int i = 0; i < PAGE_COUNT; i++) {
 800065a:	2300      	movs	r3, #0
 800065c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000660:	e055      	b.n	800070e <MemoryTest+0x11e>
		adresse = i * 0x1000;
 8000662:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000666:	031b      	lsls	r3, r3, #12
 8000668:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
		//Daten für eine Page schicken
		writePage(writeBuffer, adresse, DUT);
 800066c:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8000670:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800067a:	cb0c      	ldmia	r3, {r2, r3}
 800067c:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8000680:	f000 f8e2 	bl	8000848 <writePage>
		//Warten bis fertig geschrieben wurde
		writeReady(DUT);
 8000684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000688:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800068c:	f000 f970 	bl	8000970 <writeReady>
		//Selbe page auslesen
		readPage(readBuffer, adresse, DUT);
 8000690:	4638      	mov	r0, r7
 8000692:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800069c:	cb0c      	ldmia	r3, {r2, r3}
 800069e:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 80006a2:	f000 f912 	bl	80008ca <readPage>
		//Inhalt vergleichen
		for (int y = 0; y < 256; y++) {
 80006a6:	2300      	movs	r3, #0
 80006a8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80006ac:	e013      	b.n	80006d6 <MemoryTest+0xe6>
			//Wenn inhalt nicht gleich
			if (writeBuffer[y] != readBuffer[y])
 80006ae:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80006b2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80006b6:	4413      	add	r3, r2
 80006b8:	781a      	ldrb	r2, [r3, #0]
 80006ba:	4639      	mov	r1, r7
 80006bc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80006c0:	440b      	add	r3, r1
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d001      	beq.n	80006cc <MemoryTest+0xdc>
				return 1;
 80006c8:	2301      	movs	r3, #1
 80006ca:	e026      	b.n	800071a <MemoryTest+0x12a>
		for (int y = 0; y < 256; y++) {
 80006cc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80006d0:	3301      	adds	r3, #1
 80006d2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80006d6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80006da:	2bff      	cmp	r3, #255	; 0xff
 80006dc:	dde7      	ble.n	80006ae <MemoryTest+0xbe>
		}
		//readBuffer auf null initialisieren
		for (int z = 0; z < 256; z++) {
 80006de:	2300      	movs	r3, #0
 80006e0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80006e4:	e00a      	b.n	80006fc <MemoryTest+0x10c>
			readBuffer[z] = 0;
 80006e6:	463a      	mov	r2, r7
 80006e8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80006ec:	4413      	add	r3, r2
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]
		for (int z = 0; z < 256; z++) {
 80006f2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80006f6:	3301      	adds	r3, #1
 80006f8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80006fc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000700:	2bff      	cmp	r3, #255	; 0xff
 8000702:	ddf0      	ble.n	80006e6 <MemoryTest+0xf6>
	for (int i = 0; i < PAGE_COUNT; i++) {
 8000704:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000708:	3301      	adds	r3, #1
 800070a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800070e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000712:	4a06      	ldr	r2, [pc, #24]	; (800072c <MemoryTest+0x13c>)
 8000714:	4293      	cmp	r3, r2
 8000716:	dda4      	ble.n	8000662 <MemoryTest+0x72>
		}
	}
	return 0;
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40021000 	.word	0x40021000
 8000728:	20000124 	.word	0x20000124
 800072c:	0001e847 	.word	0x0001e847

08000730 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <MX_CRC_Init+0x3c>)
 8000736:	4a0e      	ldr	r2, [pc, #56]	; (8000770 <MX_CRC_Init+0x40>)
 8000738:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_CRC_Init+0x3c>)
 800073c:	2200      	movs	r2, #0
 800073e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <MX_CRC_Init+0x3c>)
 8000742:	2200      	movs	r2, #0
 8000744:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_CRC_Init+0x3c>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <MX_CRC_Init+0x3c>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_CRC_Init+0x3c>)
 8000754:	2203      	movs	r2, #3
 8000756:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_CRC_Init+0x3c>)
 800075a:	f002 f86d 	bl	8002838 <HAL_CRC_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000764:	f001 f95a 	bl	8001a1c <Error_Handler>
  }

}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	2000009c 	.word	0x2000009c
 8000770:	40023000 	.word	0x40023000

08000774 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <HAL_CRC_MspInit+0x38>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d10b      	bne.n	800079e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <HAL_CRC_MspInit+0x3c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a09      	ldr	r2, [pc, #36]	; (80007b0 <HAL_CRC_MspInit+0x3c>)
 800078c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <HAL_CRC_MspInit+0x3c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800079e:	bf00      	nop
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40023000 	.word	0x40023000
 80007b0:	40023800 	.word	0x40023800

080007b4 <readStatus>:
 * Function Read Status
 * reads the status byte from the memory unit
 * @param: SPI_val
 * @return 8 bit status register
 */
uint8_t readStatus(SPI_Values SPI_val) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t data;
	uint8_t command = c_READSTATUSREG1;
 80007c0:	2305      	movs	r3, #5
 80007c2:	75bb      	strb	r3, [r7, #22]
	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	8939      	ldrh	r1, [r7, #8]
 80007c8:	2200      	movs	r2, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f002 fd54 	bl	8003278 <HAL_GPIO_WritePin>
	//send command
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f107 0116 	add.w	r1, r7, #22
 80007d6:	230a      	movs	r3, #10
 80007d8:	2201      	movs	r2, #1
 80007da:	f004 fe21 	bl	8005420 <HAL_SPI_Transmit>
	//read data from status register
	HAL_SPI_Receive(SPI_val.spihandle, &data, 1, 10);
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f107 0117 	add.w	r1, r7, #23
 80007e4:	230a      	movs	r3, #10
 80007e6:	2201      	movs	r2, #1
 80007e8:	f004 ff90 	bl	800570c <HAL_SPI_Receive>
	//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	8939      	ldrh	r1, [r7, #8]
 80007f0:	2201      	movs	r2, #1
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 fd40 	bl	8003278 <HAL_GPIO_WritePin>
	return data;
 80007f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <writeByte>:
 *  @brief Writes one byte so SPI
 *  @param uint8_t data: the one byte
 *  @param SPI_Val: the specifier of the SPI
 *  @return 0: Ok.
 */
int writeByte(uint8_t data, SPI_Values SPI_val) {
 8000802:	b590      	push	{r4, r7, lr}
 8000804:	b087      	sub	sp, #28
 8000806:	af00      	add	r7, sp, #0
 8000808:	4604      	mov	r4, r0
 800080a:	4638      	mov	r0, r7
 800080c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000810:	4623      	mov	r3, r4
 8000812:	73fb      	strb	r3, [r7, #15]
	uint8_t command = data;
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	75fb      	strb	r3, [r7, #23]
	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	88b9      	ldrh	r1, [r7, #4]
 800081c:	2200      	movs	r2, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f002 fd2a 	bl	8003278 <HAL_GPIO_WritePin>
	//Ausgabe lesen
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 8000824:	6838      	ldr	r0, [r7, #0]
 8000826:	f107 0117 	add.w	r1, r7, #23
 800082a:	230a      	movs	r3, #10
 800082c:	2201      	movs	r2, #1
 800082e:	f004 fdf7 	bl	8005420 <HAL_SPI_Transmit>
	//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	88b9      	ldrh	r1, [r7, #4]
 8000836:	2201      	movs	r2, #1
 8000838:	4618      	mov	r0, r3
 800083a:	f002 fd1d 	bl	8003278 <HAL_GPIO_WritePin>
	return 0;
 800083e:	2300      	movs	r3, #0
}
 8000840:	4618      	mov	r0, r3
 8000842:	371c      	adds	r7, #28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd90      	pop	{r4, r7, pc}

08000848 <writePage>:
 * @param uint8_t * data: Pointer to the data field
 * @param uint32_t address: the address on the memory chip
 * @param SPI_Values SPI_val
 * @return 0: ok
 */
int writePage(uint8_t *data, uint32_t address, SPI_Values SPI_val) {
 8000848:	b082      	sub	sp, #8
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
 8000852:	6039      	str	r1, [r7, #0]
 8000854:	f107 0110 	add.w	r1, r7, #16
 8000858:	e881 000c 	stmia.w	r1, {r2, r3}

//	uint8_t command = c_WRITEPAGE;
//	uint8_t tmp_add;

//Write enable
	writeByte(c_WREN, SPI_val);
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000862:	2006      	movs	r0, #6
 8000864:	f7ff ffcd 	bl	8000802 <writeByte>

	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	8ab9      	ldrh	r1, [r7, #20]
 800086c:	2200      	movs	r2, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f002 fd02 	bl	8003278 <HAL_GPIO_WritePin>

	//commando schicken
	writeByte(c_WRITEPAGE, SPI_val);
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	cb0e      	ldmia	r3, {r1, r2, r3}
 800087a:	2012      	movs	r0, #18
 800087c:	f7ff ffc1 	bl	8000802 <writeByte>
	HAL_Delay(10);
 8000880:	200a      	movs	r0, #10
 8000882:	f001 fe77 	bl	8002574 <HAL_Delay>
	//Addressse schicken MSB to LSB
	HAL_SPI_Transmit(SPI_val.spihandle, (uint8_t*) (&address), 4, 40);
 8000886:	6938      	ldr	r0, [r7, #16]
 8000888:	4639      	mov	r1, r7
 800088a:	2328      	movs	r3, #40	; 0x28
 800088c:	2204      	movs	r2, #4
 800088e:	f004 fdc7 	bl	8005420 <HAL_SPI_Transmit>
	 HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
	 tmp_add = (uint8_t)( address        & 0x000000FF);
	 HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
	 */
	//Daten schicken
	HAL_SPI_Transmit(SPI_val.spihandle, data, 256, HAL_MAX_DELAY);
 8000892:	6938      	ldr	r0, [r7, #16]
 8000894:	f04f 33ff 	mov.w	r3, #4294967295
 8000898:	f44f 7280 	mov.w	r2, #256	; 0x100
 800089c:	6879      	ldr	r1, [r7, #4]
 800089e:	f004 fdbf 	bl	8005420 <HAL_SPI_Transmit>
	 {
	 HAL_SPI_Transmit(SPI_val.spihandle, &data[i], 1, 10);
	 }*/

	//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 80008a2:	69bb      	ldr	r3, [r7, #24]
 80008a4:	8ab9      	ldrh	r1, [r7, #20]
 80008a6:	2201      	movs	r2, #1
 80008a8:	4618      	mov	r0, r3
 80008aa:	f002 fce5 	bl	8003278 <HAL_GPIO_WritePin>

	//Write disable
	writeByte(c_WRDI, SPI_val);
 80008ae:	f107 0310 	add.w	r3, r7, #16
 80008b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008b4:	2004      	movs	r0, #4
 80008b6:	f7ff ffa4 	bl	8000802 <writeByte>
	return 0;
 80008ba:	2300      	movs	r3, #0
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008c6:	b002      	add	sp, #8
 80008c8:	4770      	bx	lr

080008ca <readPage>:
 * @param uint8_t  * data: Pointer to the data array
 * @param uint32_t address: Address of the momory unit to be read
 * @param SPI_Values SPI_val: the corresponding SPI values
 * @return 0: ok
 */
int readPage(uint8_t *data, uint32_t address, SPI_Values SPI_val) {
 80008ca:	b082      	sub	sp, #8
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
 80008d6:	f107 0118 	add.w	r1, r7, #24
 80008da:	e881 000c 	stmia.w	r1, {r2, r3}

	uint8_t command = c_READ;
 80008de:	2313      	movs	r3, #19
 80008e0:	73fb      	strb	r3, [r7, #15]

	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 80008e2:	6a3b      	ldr	r3, [r7, #32]
 80008e4:	8bb9      	ldrh	r1, [r7, #28]
 80008e6:	2200      	movs	r2, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f002 fcc5 	bl	8003278 <HAL_GPIO_WritePin>

	//commando schicken
	writeByte(c_READ, SPI_val);
 80008ee:	f107 0318 	add.w	r3, r7, #24
 80008f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008f4:	2013      	movs	r0, #19
 80008f6:	f7ff ff84 	bl	8000802 <writeByte>
//	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);

//4 Byte Addressse schicken MSB to LSB
	HAL_SPI_Transmit(SPI_val.spihandle, (uint8_t*) (&address), 4, 40);
 80008fa:	69b8      	ldr	r0, [r7, #24]
 80008fc:	4639      	mov	r1, r7
 80008fe:	2328      	movs	r3, #40	; 0x28
 8000900:	2204      	movs	r2, #4
 8000902:	f004 fd8d 	bl	8005420 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
//	tmp_add = (uint8_t)( address        & 0x000000FF);
//	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);

//Daten lesen
	HAL_SPI_Receive(SPI_val.spihandle, data, 256, 2560);
 8000906:	69b8      	ldr	r0, [r7, #24]
 8000908:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800090c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000910:	6879      	ldr	r1, [r7, #4]
 8000912:	f004 fefb 	bl	800570c <HAL_SPI_Receive>
//	{
//		HAL_SPI_Receive(SPI_val.spihandle, &data[i], 1, 10);
//	}

//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 8000916:	6a3b      	ldr	r3, [r7, #32]
 8000918:	8bb9      	ldrh	r1, [r7, #28]
 800091a:	2201      	movs	r2, #1
 800091c:	4618      	mov	r0, r3
 800091e:	f002 fcab 	bl	8003278 <HAL_GPIO_WritePin>

	return 0;
 8000922:	2300      	movs	r3, #0
}
 8000924:	4618      	mov	r0, r3
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800092e:	b002      	add	sp, #8
 8000930:	4770      	bx	lr

08000932 <chipErase>:
/**
 * Function Chip Erase
 * Erases the whole chip
 * @param SPI_Values SPI_val: the corresponding memory ic
 */
int chipErase(SPI_Values SPI_val) {
 8000932:	b580      	push	{r7, lr}
 8000934:	b084      	sub	sp, #16
 8000936:	af00      	add	r7, sp, #0
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Write enable
	writeByte(c_WREN, SPI_val);
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000942:	2006      	movs	r0, #6
 8000944:	f7ff ff5d 	bl	8000802 <writeByte>
	//erase chip
	writeByte(c_CE, SPI_val);
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800094c:	20c7      	movs	r0, #199	; 0xc7
 800094e:	f7ff ff58 	bl	8000802 <writeByte>
	//Write Disable
	writeByte(c_WRDI, SPI_val);
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000956:	2004      	movs	r0, #4
 8000958:	f7ff ff53 	bl	8000802 <writeByte>
	//warte bis Schreiben beendet ist
	writeReady(SPI_val);
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000962:	f000 f805 	bl	8000970 <writeReady>

	return 0;
 8000966:	2300      	movs	r3, #0
}
 8000968:	4618      	mov	r0, r3
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <writeReady>:

/**
 * Waits for the bit WIP (Write in Progress) bit to toggle
 * Reads SR1 register from memory
 */
void writeReady(SPI_Values SPI_val) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	bool status = false;
 800097c:	2300      	movs	r3, #0
 800097e:	75fb      	strb	r3, [r7, #23]
	uint8_t SR1 = 0xF;
 8000980:	230f      	movs	r3, #15
 8000982:	75bb      	strb	r3, [r7, #22]
	while (status == false) {
 8000984:	e00d      	b.n	80009a2 <writeReady+0x32>
		SR1 = readStatus(SPI_val);
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800098c:	f7ff ff12 	bl	80007b4 <readStatus>
 8000990:	4603      	mov	r3, r0
 8000992:	75bb      	strb	r3, [r7, #22]
		if ((SR1 & 0x1) == 0)
 8000994:	7dbb      	ldrb	r3, [r7, #22]
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	2b00      	cmp	r3, #0
 800099c:	d101      	bne.n	80009a2 <writeReady+0x32>
			status = true;
 800099e:	2301      	movs	r3, #1
 80009a0:	75fb      	strb	r3, [r7, #23]
	while (status == false) {
 80009a2:	7dfb      	ldrb	r3, [r7, #23]
 80009a4:	f083 0301 	eor.w	r3, r3, #1
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d1eb      	bne.n	8000986 <writeReady+0x16>
	}
}
 80009ae:	bf00      	nop
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b090      	sub	sp, #64	; 0x40
 80009bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ce:	4bb2      	ldr	r3, [pc, #712]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4ab1      	ldr	r2, [pc, #708]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 80009d4:	f043 0310 	orr.w	r3, r3, #16
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4baf      	ldr	r3, [pc, #700]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0310 	and.w	r3, r3, #16
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80009e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009e6:	4bac      	ldr	r3, [pc, #688]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4aab      	ldr	r2, [pc, #684]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 80009ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4ba9      	ldr	r3, [pc, #676]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
 80009fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fe:	4ba6      	ldr	r3, [pc, #664]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4aa5      	ldr	r2, [pc, #660]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000a04:	f043 0304 	orr.w	r3, r3, #4
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4ba3      	ldr	r3, [pc, #652]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0304 	and.w	r3, r3, #4
 8000a12:	623b      	str	r3, [r7, #32]
 8000a14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a16:	4ba0      	ldr	r3, [pc, #640]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a9f      	ldr	r2, [pc, #636]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000a1c:	f043 0320 	orr.w	r3, r3, #32
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b9d      	ldr	r3, [pc, #628]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0320 	and.w	r3, r3, #32
 8000a2a:	61fb      	str	r3, [r7, #28]
 8000a2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2e:	4b9a      	ldr	r3, [pc, #616]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a99      	ldr	r2, [pc, #612]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b97      	ldr	r3, [pc, #604]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a42:	61bb      	str	r3, [r7, #24]
 8000a44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4b94      	ldr	r3, [pc, #592]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a93      	ldr	r2, [pc, #588]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b91      	ldr	r3, [pc, #580]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	4b8e      	ldr	r3, [pc, #568]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a8d      	ldr	r2, [pc, #564]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b8b      	ldr	r3, [pc, #556]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a76:	4b88      	ldr	r3, [pc, #544]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a87      	ldr	r2, [pc, #540]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000a7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b85      	ldr	r3, [pc, #532]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a8e:	4b82      	ldr	r3, [pc, #520]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a81      	ldr	r2, [pc, #516]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b7f      	ldr	r3, [pc, #508]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa6:	4b7c      	ldr	r3, [pc, #496]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a7b      	ldr	r2, [pc, #492]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000aac:	f043 0308 	orr.w	r3, r3, #8
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b79      	ldr	r3, [pc, #484]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0308 	and.w	r3, r3, #8
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000abe:	4b76      	ldr	r3, [pc, #472]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a75      	ldr	r2, [pc, #468]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000ac4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b73      	ldr	r3, [pc, #460]	; (8000c98 <MX_GPIO_Init+0x2e0>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED_4_Pin|LWL_OUT_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f244 0108 	movw	r1, #16392	; 0x4008
 8000adc:	486f      	ldr	r0, [pc, #444]	; (8000c9c <MX_GPIO_Init+0x2e4>)
 8000ade:	f002 fbcb 	bl	8003278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_3_Pin|LED_2_Pin|LED_1_Pin|SD_CS_Pin
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f24e 4138 	movw	r1, #58424	; 0xe438
 8000ae8:	486d      	ldr	r0, [pc, #436]	; (8000ca0 <MX_GPIO_Init+0x2e8>)
 8000aea:	f002 fbc5 	bl	8003278 <HAL_GPIO_WritePin>
                          |nCS_DMS1_Pin|nCS_DMS2_Pin|nCS_DMS3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, nCS_DMS4_Pin|nCS_DMS5_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2103      	movs	r1, #3
 8000af2:	486c      	ldr	r0, [pc, #432]	; (8000ca4 <MX_GPIO_Init+0x2ec>)
 8000af4:	f002 fbc0 	bl	8003278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCS_DMS6_GPIO_Port, nCS_DMS6_Pin, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2180      	movs	r1, #128	; 0x80
 8000afc:	486a      	ldr	r0, [pc, #424]	; (8000ca8 <MX_GPIO_Init+0x2f0>)
 8000afe:	f002 fbbb 	bl	8003278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, FL1_HLD_Pin|FL1_WP_Pin|FL1_RES_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8000b08:	4868      	ldr	r0, [pc, #416]	; (8000cac <MX_GPIO_Init+0x2f4>)
 8000b0a:	f002 fbb5 	bl	8003278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL1_CS2_GPIO_Port, FL1_CS2_Pin, GPIO_PIN_SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b14:	4865      	ldr	r0, [pc, #404]	; (8000cac <MX_GPIO_Init+0x2f4>)
 8000b16:	f002 fbaf 	bl	8003278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL1_CS1_GPIO_Port, FL1_CS1_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b20:	4863      	ldr	r0, [pc, #396]	; (8000cb0 <MX_GPIO_Init+0x2f8>)
 8000b22:	f002 fba9 	bl	8003278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, nCS_PT3_Pin|FL2_HLD_Pin|FL2_RES_Pin|FL2_WP_Pin
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 4167 	mov.w	r1, #59136	; 0xe700
 8000b2c:	4861      	ldr	r0, [pc, #388]	; (8000cb4 <MX_GPIO_Init+0x2fc>)
 8000b2e:	f002 fba3 	bl	8003278 <HAL_GPIO_WritePin>
                          |nCS_PT2_Pin|nCS_PT1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FL2_CS2_Pin|FL2_CS1_Pin, GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000b38:	485e      	ldr	r0, [pc, #376]	; (8000cb4 <MX_GPIO_Init+0x2fc>)
 8000b3a:	f002 fb9d 	bl	8003278 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
 8000b3e:	f64f 7318 	movw	r3, #65304	; 0xff18
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b44:	2303      	movs	r3, #3
 8000b46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b50:	4619      	mov	r1, r3
 8000b52:	4855      	ldr	r0, [pc, #340]	; (8000ca8 <MX_GPIO_Init+0x2f0>)
 8000b54:	f001 ffe2 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LWL_IN_Pin;
 8000b58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LWL_IN_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	484b      	ldr	r0, [pc, #300]	; (8000c9c <MX_GPIO_Init+0x2e4>)
 8000b6e:	f001 ffd5 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000b72:	f24e 33ff 	movw	r3, #58367	; 0xe3ff
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b84:	4619      	mov	r1, r3
 8000b86:	484c      	ldr	r0, [pc, #304]	; (8000cb8 <MX_GPIO_Init+0x300>)
 8000b88:	f001 ffc8 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI10 PI11 PI12 PI13
                           PI15 PI0 PI1 PI2
                           PI4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000b8c:	f64b 4317 	movw	r3, #48151	; 0xbc17
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b92:	2303      	movs	r3, #3
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	483e      	ldr	r0, [pc, #248]	; (8000c9c <MX_GPIO_Init+0x2e4>)
 8000ba2:	f001 ffbb 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF6
                           PF11 PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8000ba6:	f641 0347 	movw	r3, #6215	; 0x1847
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bac:	2303      	movs	r3, #3
 8000bae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4839      	ldr	r0, [pc, #228]	; (8000ca0 <MX_GPIO_Init+0x2e8>)
 8000bbc:	f001 ffae 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LED_4_Pin|LWL_OUT_Pin;
 8000bc0:	f244 0308 	movw	r3, #16392	; 0x4008
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4830      	ldr	r0, [pc, #192]	; (8000c9c <MX_GPIO_Init+0x2e4>)
 8000bda:	f001 ff9f 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LED_1_Pin|SD_CS_Pin
 8000bde:	f24e 4338 	movw	r3, #58424	; 0xe438
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |nCS_DMS1_Pin|nCS_DMS2_Pin|nCS_DMS3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	482a      	ldr	r0, [pc, #168]	; (8000ca0 <MX_GPIO_Init+0x2e8>)
 8000bf8:	f001 ff90 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH2 PH3
                           PH4 PH5 PH6 PH7
                           PH8 PH13 PH14 PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000bfc:	f24e 13ff 	movw	r3, #57855	; 0xe1ff
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c02:	2303      	movs	r3, #3
 8000c04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4826      	ldr	r0, [pc, #152]	; (8000cac <MX_GPIO_Init+0x2f4>)
 8000c12:	f001 ff83 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000c16:	231e      	movs	r3, #30
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c26:	4619      	mov	r1, r3
 8000c28:	4824      	ldr	r0, [pc, #144]	; (8000cbc <MX_GPIO_Init+0x304>)
 8000c2a:	f001 ff77 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000c2e:	f640 73e3 	movw	r3, #4067	; 0xfe3
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c34:	2303      	movs	r3, #3
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c40:	4619      	mov	r1, r3
 8000c42:	481b      	ldr	r0, [pc, #108]	; (8000cb0 <MX_GPIO_Init+0x2f8>)
 8000c44:	f001 ff6a 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ0 PJ1 PJ2 PJ3
                           PJ4 PJ5 PJ12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c48:	f241 033f 	movw	r3, #4159	; 0x103f
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000c56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4818      	ldr	r0, [pc, #96]	; (8000cc0 <MX_GPIO_Init+0x308>)
 8000c5e:	f001 ff5d 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = nCS_DMS4_Pin|nCS_DMS5_Pin;
 8000c62:	2303      	movs	r3, #3
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c76:	4619      	mov	r1, r3
 8000c78:	480a      	ldr	r0, [pc, #40]	; (8000ca4 <MX_GPIO_Init+0x2ec>)
 8000c7a:	f001 ff4f 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nCS_DMS6_Pin;
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(nCS_DMS6_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c92:	4619      	mov	r1, r3
 8000c94:	e016      	b.n	8000cc4 <MX_GPIO_Init+0x30c>
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40022000 	.word	0x40022000
 8000ca0:	40021400 	.word	0x40021400
 8000ca4:	40021800 	.word	0x40021800
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40021c00 	.word	0x40021c00
 8000cb0:	40020400 	.word	0x40020400
 8000cb4:	40020c00 	.word	0x40020c00
 8000cb8:	40020800 	.word	0x40020800
 8000cbc:	40020000 	.word	0x40020000
 8000cc0:	40022400 	.word	0x40022400
 8000cc4:	485d      	ldr	r0, [pc, #372]	; (8000e3c <MX_GPIO_Init+0x484>)
 8000cc6:	f001 ff29 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = FL1_HLD_Pin|FL1_WP_Pin|FL1_RES_Pin|FL1_CS2_Pin;
 8000cca:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4857      	ldr	r0, [pc, #348]	; (8000e40 <MX_GPIO_Init+0x488>)
 8000ce4:	f001 ff1a 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FL1_CS1_Pin;
 8000ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FL1_CS1_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4850      	ldr	r0, [pc, #320]	; (8000e44 <MX_GPIO_Init+0x48c>)
 8000d02:	f001 ff0b 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = nCS_PT3_Pin|FL2_HLD_Pin|FL2_RES_Pin|FL2_CS2_Pin
 8000d06:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FL2_CS1_Pin|FL2_WP_Pin|nCS_PT2_Pin|nCS_PT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	484a      	ldr	r0, [pc, #296]	; (8000e48 <MX_GPIO_Init+0x490>)
 8000d20:	f001 fefc 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MS_SEL_Pin;
 8000d24:	2304      	movs	r3, #4
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MS_SEL_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d34:	4619      	mov	r1, r3
 8000d36:	4845      	ldr	r0, [pc, #276]	; (8000e4c <MX_GPIO_Init+0x494>)
 8000d38:	f001 fef0 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG5 PG6 PG7
                           PG8 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000d3c:	f64f 73e8 	movw	r3, #65512	; 0xffe8
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d42:	2303      	movs	r3, #3
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4e:	4619      	mov	r1, r3
 8000d50:	483e      	ldr	r0, [pc, #248]	; (8000e4c <MX_GPIO_Init+0x494>)
 8000d52:	f001 fee3 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDRDY_DMS1_Pin;
 8000d56:	2310      	movs	r3, #16
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d5a:	4b3d      	ldr	r3, [pc, #244]	; (8000e50 <MX_GPIO_Init+0x498>)
 8000d5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(nDRDY_DMS1_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d66:	4619      	mov	r1, r3
 8000d68:	4838      	ldr	r0, [pc, #224]	; (8000e4c <MX_GPIO_Init+0x494>)
 8000d6a:	f001 fed7 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = nDRDY_DMS2_Pin|nDRDY_DMS3_Pin|nDRDY_DMS5_Pin|nDRDY_DMS6_Pin;
 8000d6e:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d74:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <MX_GPIO_Init+0x498>)
 8000d76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d80:	4619      	mov	r1, r3
 8000d82:	4834      	ldr	r0, [pc, #208]	; (8000e54 <MX_GPIO_Init+0x49c>)
 8000d84:	f001 feca 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDRDY_DMS4_Pin;
 8000d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(nDRDY_DMS4_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	482d      	ldr	r0, [pc, #180]	; (8000e54 <MX_GPIO_Init+0x49c>)
 8000d9e:	f001 febd 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8000da2:	23fb      	movs	r3, #251	; 0xfb
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da6:	2303      	movs	r3, #3
 8000da8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db2:	4619      	mov	r1, r3
 8000db4:	4824      	ldr	r0, [pc, #144]	; (8000e48 <MX_GPIO_Init+0x490>)
 8000db6:	f001 feb1 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = nDRDY_PT3_Pin|nDRDY_PT2_Pin|nDRDY_PT1_Pin;
 8000dba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dc0:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <MX_GPIO_Init+0x498>)
 8000dc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000dc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4822      	ldr	r0, [pc, #136]	; (8000e58 <MX_GPIO_Init+0x4a0>)
 8000dd0:	f001 fea4 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PK3 PK4 PK5 PK6
                           PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000dd4:	23f8      	movs	r3, #248	; 0xf8
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000de0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de4:	4619      	mov	r1, r3
 8000de6:	481d      	ldr	r0, [pc, #116]	; (8000e5c <MX_GPIO_Init+0x4a4>)
 8000de8:	f001 fe98 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SODS_OPT_Pin|SOE_OPT_Pin|LO_OPT_Pin;
 8000dec:	23e0      	movs	r3, #224	; 0xe0
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df0:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <MX_GPIO_Init+0x498>)
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000df8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4818      	ldr	r0, [pc, #96]	; (8000e60 <MX_GPIO_Init+0x4a8>)
 8000e00:	f001 fe8c 	bl	8002b1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2105      	movs	r1, #5
 8000e08:	200a      	movs	r0, #10
 8000e0a:	f001 fcc5 	bl	8002798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000e0e:	200a      	movs	r0, #10
 8000e10:	f001 fcee 	bl	80027f0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2105      	movs	r1, #5
 8000e18:	2017      	movs	r0, #23
 8000e1a:	f001 fcbd 	bl	8002798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e1e:	2017      	movs	r0, #23
 8000e20:	f001 fce6 	bl	80027f0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2105      	movs	r1, #5
 8000e28:	2028      	movs	r0, #40	; 0x28
 8000e2a:	f001 fcb5 	bl	8002798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e2e:	2028      	movs	r0, #40	; 0x28
 8000e30:	f001 fcde 	bl	80027f0 <HAL_NVIC_EnableIRQ>

}
 8000e34:	bf00      	nop
 8000e36:	3740      	adds	r7, #64	; 0x40
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40021c00 	.word	0x40021c00
 8000e44:	40020400 	.word	0x40020400
 8000e48:	40020c00 	.word	0x40020c00
 8000e4c:	40021800 	.word	0x40021800
 8000e50:	10110000 	.word	0x10110000
 8000e54:	40020000 	.word	0x40020000
 8000e58:	40022400 	.word	0x40022400
 8000e5c:	40022800 	.word	0x40022800
 8000e60:	40022000 	.word	0x40022000

08000e64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e68:	f001 fb27 	bl	80024ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6c:	f000 f83c 	bl	8000ee8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e70:	f7ff fda2 	bl	80009b8 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000e74:	f000 fde4 	bl	8001a40 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000e78:	f000 fe20 	bl	8001abc <MX_SPI3_Init>
  MX_SPI6_Init();
 8000e7c:	f000 fed8 	bl	8001c30 <MX_SPI6_Init>
  MX_UART4_Init();
 8000e80:	f001 f964 	bl	800214c <MX_UART4_Init>
  MX_UART8_Init();
 8000e84:	f001 f9c2 	bl	800220c <MX_UART8_Init>
  MX_UART5_Init();
 8000e88:	f001 f990 	bl	80021ac <MX_UART5_Init>
  MX_CRC_Init();
 8000e8c:	f7ff fc50 	bl	8000730 <MX_CRC_Init>
  MX_SPI4_Init();
 8000e90:	f000 fe52 	bl	8001b38 <MX_SPI4_Init>
  MX_SPI5_Init();
 8000e94:	f000 fe8e 	bl	8001bb4 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);  //clear all LEDs
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2120      	movs	r1, #32
 8000e9c:	480f      	ldr	r0, [pc, #60]	; (8000edc <main+0x78>)
 8000e9e:	f002 f9eb 	bl	8003278 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2110      	movs	r1, #16
 8000ea6:	480d      	ldr	r0, [pc, #52]	; (8000edc <main+0x78>)
 8000ea8:	f002 f9e6 	bl	8003278 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2108      	movs	r1, #8
 8000eb0:	480a      	ldr	r0, [pc, #40]	; (8000edc <main+0x78>)
 8000eb2:	f002 f9e1 	bl	8003278 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ebc:	4808      	ldr	r0, [pc, #32]	; (8000ee0 <main+0x7c>)
 8000ebe:	f002 f9db 	bl	8003278 <HAL_GPIO_WritePin>

  if (!HAL_GPIO_ReadPin(MS_SEL_GPIO_Port, MS_SEL_Pin)) {
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <main+0x80>)
 8000ec6:	f002 f9b7 	bl	8003238 <HAL_GPIO_ReadPin>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <main+0x72>
    main_master();
 8000ed0:	f000 f89e 	bl	8001010 <main_master>
 8000ed4:	e001      	b.n	8000eda <main+0x76>
  } else { //Slave loop
    main_slave();
 8000ed6:	f000 f979 	bl	80011cc <main_slave>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <main+0x76>
 8000edc:	40021400 	.word	0x40021400
 8000ee0:	40022000 	.word	0x40022000
 8000ee4:	40021800 	.word	0x40021800

08000ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b0b8      	sub	sp, #224	; 0xe0
 8000eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ef2:	2234      	movs	r2, #52	; 0x34
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f006 fb2e 	bl	8007558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000efc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f0c:	f107 0308 	add.w	r3, r7, #8
 8000f10:	2290      	movs	r2, #144	; 0x90
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f006 fb1f 	bl	8007558 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1a:	4b3b      	ldr	r3, [pc, #236]	; (8001008 <SystemClock_Config+0x120>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	4a3a      	ldr	r2, [pc, #232]	; (8001008 <SystemClock_Config+0x120>)
 8000f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f24:	6413      	str	r3, [r2, #64]	; 0x40
 8000f26:	4b38      	ldr	r3, [pc, #224]	; (8001008 <SystemClock_Config+0x120>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f32:	4b36      	ldr	r3, [pc, #216]	; (800100c <SystemClock_Config+0x124>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a35      	ldr	r2, [pc, #212]	; (800100c <SystemClock_Config+0x124>)
 8000f38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	4b33      	ldr	r3, [pc, #204]	; (800100c <SystemClock_Config+0x124>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f50:	2301      	movs	r3, #1
 8000f52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f56:	2310      	movs	r3, #16
 8000f58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f68:	2308      	movs	r3, #8
 8000f6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000f6e:	23c0      	movs	r3, #192	; 0xc0
 8000f70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f74:	2302      	movs	r3, #2
 8000f76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f80:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f84:	4618      	mov	r0, r3
 8000f86:	f002 fa39 	bl	80033fc <HAL_RCC_OscConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f90:	f000 fd44 	bl	8001a1c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f94:	f002 f9e2 	bl	800335c <HAL_PWREx_EnableOverDrive>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000f9e:	f000 fd3d 	bl	8001a1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa2:	230f      	movs	r3, #15
 8000fa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fb4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000fbc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000fc4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000fc8:	2106      	movs	r1, #6
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f002 fd86 	bl	8003adc <HAL_RCC_ClockConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000fd6:	f000 fd21 	bl	8001a1c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART5
 8000fda:	f44f 5318 	mov.w	r3, #9728	; 0x2600
 8000fde:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART8;
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f003 f801 	bl	8003ff8 <HAL_RCCEx_PeriphCLKConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000ffc:	f000 fd0e 	bl	8001a1c <Error_Handler>
  }
}
 8001000:	bf00      	nop
 8001002:	37e0      	adds	r7, #224	; 0xe0
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40023800 	.word	0x40023800
 800100c:	40007000 	.word	0x40007000

08001010 <main_master>:

/* USER CODE BEGIN 4 */
void main_master(void) {
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b0c9      	sub	sp, #292	; 0x124
 8001014:	af00      	add	r7, sp, #0
  //HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);  //ON = MS set to Master
  //uint8_t bufferOff[3] = {0x01, 0x03, 0x05};
  //uint8_t bufferOn[3] = {0x02, 0x04, 0x06};

  uint32_t lastInit = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  uint32_t lastBlinky = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  uint8_t writeBuffer[256] =  {0};
 8001022:	f107 0308 	add.w	r3, r7, #8
 8001026:	4618      	mov	r0, r3
 8001028:	f44f 7380 	mov.w	r3, #256	; 0x100
 800102c:	461a      	mov	r2, r3
 800102e:	2100      	movs	r1, #0
 8001030:	f006 fa92 	bl	8007558 <memset>

  uint8_t readSensor = 3; //DMS: 0-5, PT100: 6-8
 8001034:	2303      	movs	r3, #3
 8001036:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113

  /* Performing the memory test */
  uint32_t memoryTest = MemoryTest();
 800103a:	f7ff fad9 	bl	80005f0 <MemoryTest>
 800103e:	4603      	mov	r3, r0
 8001040:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  sprintf( writeBuffer, " \n\rMemory test: %s\n\r\0",  (memoryTest == 0 ? "Passed" : "Failed"));
 8001044:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001048:	2b00      	cmp	r3, #0
 800104a:	d101      	bne.n	8001050 <main_master+0x40>
 800104c:	4a58      	ldr	r2, [pc, #352]	; (80011b0 <main_master+0x1a0>)
 800104e:	e000      	b.n	8001052 <main_master+0x42>
 8001050:	4a58      	ldr	r2, [pc, #352]	; (80011b4 <main_master+0x1a4>)
 8001052:	f107 0308 	add.w	r3, r7, #8
 8001056:	4958      	ldr	r1, [pc, #352]	; (80011b8 <main_master+0x1a8>)
 8001058:	4618      	mov	r0, r3
 800105a:	f006 fa85 	bl	8007568 <siprintf>
  HAL_UART_Transmit(&huart4, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff f8ec 	bl	8000240 <strlen>
 8001068:	4603      	mov	r3, r0
 800106a:	b29a      	uxth	r2, r3
 800106c:	f107 0108 	add.w	r1, r7, #8
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	4851      	ldr	r0, [pc, #324]	; (80011bc <main_master+0x1ac>)
 8001076:	f005 f9e3 	bl	8006440 <HAL_UART_Transmit>
  /*For Framerate*/
  HAL_Delay(5000);
 800107a:	f241 3088 	movw	r0, #5000	; 0x1388
 800107e:	f001 fa79 	bl	8002574 <HAL_Delay>
  for(int sensors = 0; sensors <=8 ; sensors++){
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001088:	e01b      	b.n	80010c2 <main_master+0xb2>
	  if(sensors <= 5)
 800108a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800108e:	2b05      	cmp	r3, #5
 8001090:	dc09      	bgt.n	80010a6 <main_master+0x96>
		  adc_scan_start(sensors, 2000, 128, 0);
 8001092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001096:	b258      	sxtb	r0, r3
 8001098:	2300      	movs	r3, #0
 800109a:	2280      	movs	r2, #128	; 0x80
 800109c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80010a0:	f000 f946 	bl	8001330 <adc_scan_start>
 80010a4:	e008      	b.n	80010b8 <main_master+0xa8>
	  else
		  adc_scan_start(sensors, 2000, 1, 0);
 80010a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80010aa:	b258      	sxtb	r0, r3
 80010ac:	2300      	movs	r3, #0
 80010ae:	2201      	movs	r2, #1
 80010b0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80010b4:	f000 f93c 	bl	8001330 <adc_scan_start>
  for(int sensors = 0; sensors <=8 ; sensors++){
 80010b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80010bc:	3301      	adds	r3, #1
 80010be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80010c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80010c6:	2b08      	cmp	r3, #8
 80010c8:	dddf      	ble.n	800108a <main_master+0x7a>
  }

  HAL_Delay(1000);
 80010ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ce:	f001 fa51 	bl	8002574 <HAL_Delay>

  uint8_t softgain = 1;
 80010d2:	2301      	movs	r3, #1
 80010d4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
  uint8_t offset = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
  uint8_t dout = 0;
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart4, (uint8_t *)&dout, sizeof(dout), HAL_MAX_DELAY);
 80010e4:	1df9      	adds	r1, r7, #7
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ea:	2201      	movs	r2, #1
 80010ec:	4833      	ldr	r0, [pc, #204]	; (80011bc <main_master+0x1ac>)
 80010ee:	f005 f9a7 	bl	8006440 <HAL_UART_Transmit>

  while (1) { //Master loop


	  data = adc_scan(readSensor, 0x01);
 80010f2:	f997 3113 	ldrsb.w	r3, [r7, #275]	; 0x113
 80010f6:	2101      	movs	r1, #1
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 f907 	bl	800130c <adc_scan>
 80010fe:	4603      	mov	r3, r0
 8001100:	461a      	mov	r2, r3
 8001102:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <main_master+0x1b0>)
 8001104:	801a      	strh	r2, [r3, #0]
	  dout = data * softgain + offset;
 8001106:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <main_master+0x1b0>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8001110:	fb12 f303 	smulbb	r3, r2, r3
 8001114:	b2da      	uxtb	r2, r3
 8001116:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 800111a:	4413      	add	r3, r2
 800111c:	b2da      	uxtb	r2, r3
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	701a      	strb	r2, [r3, #0]
	  write_DAPI(&dout);
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	4618      	mov	r0, r3
 8001126:	f000 fc67 	bl	80019f8 <write_DAPI>
	  write_EXP(&dout);
 800112a:	1dfb      	adds	r3, r7, #7
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fc51 	bl	80019d4 <write_EXP>


	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, HAL_GPIO_ReadPin(SODS_OPT_GPIO_Port, SODS_OPT_Pin));
 8001132:	2120      	movs	r1, #32
 8001134:	4823      	ldr	r0, [pc, #140]	; (80011c4 <main_master+0x1b4>)
 8001136:	f002 f87f 	bl	8003238 <HAL_GPIO_ReadPin>
 800113a:	4603      	mov	r3, r0
 800113c:	461a      	mov	r2, r3
 800113e:	2110      	movs	r1, #16
 8001140:	4821      	ldr	r0, [pc, #132]	; (80011c8 <main_master+0x1b8>)
 8001142:	f002 f899 	bl	8003278 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, HAL_GPIO_ReadPin(LO_OPT_GPIO_Port, LO_OPT_Pin));
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	481e      	ldr	r0, [pc, #120]	; (80011c4 <main_master+0x1b4>)
 800114a:	f002 f875 	bl	8003238 <HAL_GPIO_ReadPin>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	2108      	movs	r1, #8
 8001154:	481c      	ldr	r0, [pc, #112]	; (80011c8 <main_master+0x1b8>)
 8001156:	f002 f88f 	bl	8003278 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, HAL_GPIO_ReadPin(SOE_OPT_GPIO_Port, SOE_OPT_Pin));
 800115a:	2140      	movs	r1, #64	; 0x40
 800115c:	4819      	ldr	r0, [pc, #100]	; (80011c4 <main_master+0x1b4>)
 800115e:	f002 f86b 	bl	8003238 <HAL_GPIO_ReadPin>
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800116a:	4816      	ldr	r0, [pc, #88]	; (80011c4 <main_master+0x1b4>)
 800116c:	f002 f884 	bl	8003278 <HAL_GPIO_WritePin>




	  if(lastInit + 5000 < HAL_GetTick()){
 8001170:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001174:	f241 3488 	movw	r4, #5000	; 0x1388
 8001178:	441c      	add	r4, r3
 800117a:	f001 f9ef 	bl	800255c <HAL_GetTick>
 800117e:	4603      	mov	r3, r0
 8001180:	429c      	cmp	r4, r3
 8001182:	d203      	bcs.n	800118c <main_master+0x17c>
		  lastInit = HAL_GetTick();
 8001184:	f001 f9ea 	bl	800255c <HAL_GetTick>
 8001188:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
		    }
		   */

	   }

	  if(lastBlinky + 1000 < HAL_GetTick()){
 800118c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001190:	f503 747a 	add.w	r4, r3, #1000	; 0x3e8
 8001194:	f001 f9e2 	bl	800255c <HAL_GetTick>
 8001198:	4603      	mov	r3, r0
 800119a:	429c      	cmp	r4, r3
 800119c:	d2a9      	bcs.n	80010f2 <main_master+0xe2>
	  		  lastBlinky = HAL_GetTick();
 800119e:	f001 f9dd 	bl	800255c <HAL_GetTick>
 80011a2:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
	  		  HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80011a6:	2120      	movs	r1, #32
 80011a8:	4807      	ldr	r0, [pc, #28]	; (80011c8 <main_master+0x1b8>)
 80011aa:	f002 f891 	bl	80032d0 <HAL_GPIO_TogglePin>
	  data = adc_scan(readSensor, 0x01);
 80011ae:	e7a0      	b.n	80010f2 <main_master+0xe2>
 80011b0:	08007d8c 	.word	0x08007d8c
 80011b4:	08007d94 	.word	0x08007d94
 80011b8:	08007d9c 	.word	0x08007d9c
 80011bc:	200003b4 	.word	0x200003b4
 80011c0:	2000008c 	.word	0x2000008c
 80011c4:	40022000 	.word	0x40022000
 80011c8:	40021400 	.word	0x40021400

080011cc <main_slave>:
    HAL_Delay(100);
    */
  }
}

void main_slave(void) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
  uint8_t buffer[1] = {0x00};
 80011d2:	2300      	movs	r3, #0
 80011d4:	713b      	strb	r3, [r7, #4]
  while (1) {
    HAL_UART_Receive(&huart5, buffer, sizeof(buffer), 5);
 80011d6:	1d39      	adds	r1, r7, #4
 80011d8:	2305      	movs	r3, #5
 80011da:	2201      	movs	r2, #1
 80011dc:	481e      	ldr	r0, [pc, #120]	; (8001258 <main_slave+0x8c>)
 80011de:	f005 f9c0 	bl	8006562 <HAL_UART_Receive>
    if (buffer[0] == 0x01) {
 80011e2:	793b      	ldrb	r3, [r7, #4]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d105      	bne.n	80011f4 <main_slave+0x28>
      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2110      	movs	r1, #16
 80011ec:	481b      	ldr	r0, [pc, #108]	; (800125c <main_slave+0x90>)
 80011ee:	f002 f843 	bl	8003278 <HAL_GPIO_WritePin>
 80011f2:	e02d      	b.n	8001250 <main_slave+0x84>
    } else if (buffer[0] == 0x02) {
 80011f4:	793b      	ldrb	r3, [r7, #4]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d105      	bne.n	8001206 <main_slave+0x3a>
      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	2110      	movs	r1, #16
 80011fe:	4817      	ldr	r0, [pc, #92]	; (800125c <main_slave+0x90>)
 8001200:	f002 f83a 	bl	8003278 <HAL_GPIO_WritePin>
 8001204:	e024      	b.n	8001250 <main_slave+0x84>
    } else if (buffer[0] == 0x03) {
 8001206:	793b      	ldrb	r3, [r7, #4]
 8001208:	2b03      	cmp	r3, #3
 800120a:	d105      	bne.n	8001218 <main_slave+0x4c>
      HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	2108      	movs	r1, #8
 8001210:	4812      	ldr	r0, [pc, #72]	; (800125c <main_slave+0x90>)
 8001212:	f002 f831 	bl	8003278 <HAL_GPIO_WritePin>
 8001216:	e01b      	b.n	8001250 <main_slave+0x84>
    } else if (buffer[0] == 0x04) {
 8001218:	793b      	ldrb	r3, [r7, #4]
 800121a:	2b04      	cmp	r3, #4
 800121c:	d105      	bne.n	800122a <main_slave+0x5e>
      HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 800121e:	2201      	movs	r2, #1
 8001220:	2108      	movs	r1, #8
 8001222:	480e      	ldr	r0, [pc, #56]	; (800125c <main_slave+0x90>)
 8001224:	f002 f828 	bl	8003278 <HAL_GPIO_WritePin>
 8001228:	e012      	b.n	8001250 <main_slave+0x84>
    }  else if (buffer[0] == 0x05) {
 800122a:	793b      	ldrb	r3, [r7, #4]
 800122c:	2b05      	cmp	r3, #5
 800122e:	d106      	bne.n	800123e <main_slave+0x72>
      HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001236:	480a      	ldr	r0, [pc, #40]	; (8001260 <main_slave+0x94>)
 8001238:	f002 f81e 	bl	8003278 <HAL_GPIO_WritePin>
 800123c:	e008      	b.n	8001250 <main_slave+0x84>
    } else if (buffer[0] == 0x06) {
 800123e:	793b      	ldrb	r3, [r7, #4]
 8001240:	2b06      	cmp	r3, #6
 8001242:	d105      	bne.n	8001250 <main_slave+0x84>
      HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8001244:	2201      	movs	r2, #1
 8001246:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <main_slave+0x94>)
 800124c:	f002 f814 	bl	8003278 <HAL_GPIO_WritePin>
    }
    buffer[1] = 0x00;
 8001250:	2300      	movs	r3, #0
 8001252:	717b      	strb	r3, [r7, #5]
    HAL_UART_Receive(&huart5, buffer, sizeof(buffer), 5);
 8001254:	e7bf      	b.n	80011d6 <main_slave+0xa>
 8001256:	bf00      	nop
 8001258:	200002b4 	.word	0x200002b4
 800125c:	40021400 	.word	0x40021400
 8001260:	40022000 	.word	0x40022000

08001264 <cs_enable>:
  }
}

int cs_enable(int8_t id){
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(port_from_id(id), pin_from_id(id), GPIO_PIN_RESET);
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	4618      	mov	r0, r3
 8001274:	f000 fa3a 	bl	80016ec <port_from_id>
 8001278:	4604      	mov	r4, r0
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f9f6 	bl	8001670 <pin_from_id>
 8001284:	4603      	mov	r3, r0
 8001286:	2200      	movs	r2, #0
 8001288:	4619      	mov	r1, r3
 800128a:	4620      	mov	r0, r4
 800128c:	f001 fff4 	bl	8003278 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001290:	2001      	movs	r0, #1
 8001292:	f001 f96f 	bl	8002574 <HAL_Delay>
	return 0;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	bd90      	pop	{r4, r7, pc}

080012a0 <cs_disable>:

int cs_disable(int8_t id){
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(port_from_id(id), pin_from_id(id), GPIO_PIN_SET);
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 fa1c 	bl	80016ec <port_from_id>
 80012b4:	4604      	mov	r4, r0
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f9d8 	bl	8001670 <pin_from_id>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2201      	movs	r2, #1
 80012c4:	4619      	mov	r1, r3
 80012c6:	4620      	mov	r0, r4
 80012c8:	f001 ffd6 	bl	8003278 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f001 f951 	bl	8002574 <HAL_Delay>
	return 0;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd90      	pop	{r4, r7, pc}

080012dc <wr_spi>:

int wr_spi(int8_t id, uint8_t cmd){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	460a      	mov	r2, r1
 80012e6:	71fb      	strb	r3, [r7, #7]
 80012e8:	4613      	mov	r3, r2
 80012ea:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Transmit(get_hspi_from_id(id), &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fab9 	bl	8001868 <get_hspi_from_id>
 80012f6:	1db9      	adds	r1, r7, #6
 80012f8:	f04f 33ff 	mov.w	r3, #4294967295
 80012fc:	2201      	movs	r2, #1
 80012fe:	f004 f88f 	bl	8005420 <HAL_SPI_Transmit>
	return 0;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <adc_scan>:

uint16_t adc_scan(int8_t id, uint8_t chn){
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	460a      	mov	r2, r1
 8001316:	71fb      	strb	r3, [r7, #7]
 8001318:	4613      	mov	r3, r2
 800131a:	71bb      	strb	r3, [r7, #6]
	return rd_data(id);
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	4618      	mov	r0, r3
 8001322:	f000 f947 	bl	80015b4 <rd_data>
 8001326:	4603      	mov	r3, r0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <adc_scan_start>:

int16_t adc_scan_start(int8_t id, uint_least16_t drate, uint_least8_t gain, uint_least16_t current){
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	4604      	mov	r4, r0
 8001338:	4608      	mov	r0, r1
 800133a:	4611      	mov	r1, r2
 800133c:	461a      	mov	r2, r3
 800133e:	4623      	mov	r3, r4
 8001340:	71fb      	strb	r3, [r7, #7]
 8001342:	4603      	mov	r3, r0
 8001344:	80bb      	strh	r3, [r7, #4]
 8001346:	460b      	mov	r3, r1
 8001348:	71bb      	strb	r3, [r7, #6]
 800134a:	4613      	mov	r3, r2
 800134c:	807b      	strh	r3, [r7, #2]
	int16_t r = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	81fb      	strh	r3, [r7, #14]
	switch(drate)
 8001352:	88bb      	ldrh	r3, [r7, #4]
 8001354:	2ba0      	cmp	r3, #160	; 0xa0
 8001356:	d02d      	beq.n	80013b4 <adc_scan_start+0x84>
 8001358:	2ba0      	cmp	r3, #160	; 0xa0
 800135a:	dc0b      	bgt.n	8001374 <adc_scan_start+0x44>
 800135c:	2b0a      	cmp	r3, #10
 800135e:	d01d      	beq.n	800139c <adc_scan_start+0x6c>
 8001360:	2b0a      	cmp	r3, #10
 8001362:	dc02      	bgt.n	800136a <adc_scan_start+0x3a>
 8001364:	2b05      	cmp	r3, #5
 8001366:	d016      	beq.n	8001396 <adc_scan_start+0x66>
 8001368:	e01e      	b.n	80013a8 <adc_scan_start+0x78>
 800136a:	2b14      	cmp	r3, #20
 800136c:	d019      	beq.n	80013a2 <adc_scan_start+0x72>
 800136e:	2b50      	cmp	r3, #80	; 0x50
 8001370:	d01d      	beq.n	80013ae <adc_scan_start+0x7e>
 8001372:	e019      	b.n	80013a8 <adc_scan_start+0x78>
 8001374:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001378:	d022      	beq.n	80013c0 <adc_scan_start+0x90>
 800137a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800137e:	dc03      	bgt.n	8001388 <adc_scan_start+0x58>
 8001380:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001384:	d019      	beq.n	80013ba <adc_scan_start+0x8a>
 8001386:	e00f      	b.n	80013a8 <adc_scan_start+0x78>
 8001388:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800138c:	d01b      	beq.n	80013c6 <adc_scan_start+0x96>
 800138e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001392:	d01b      	beq.n	80013cc <adc_scan_start+0x9c>
 8001394:	e008      	b.n	80013a8 <adc_scan_start+0x78>
	  {
	    case    5: drate = SYS0_DOR5;    break;
 8001396:	2300      	movs	r3, #0
 8001398:	80bb      	strh	r3, [r7, #4]
 800139a:	e01a      	b.n	80013d2 <adc_scan_start+0xa2>
	    case   10: drate = SYS0_DOR10;   break;
 800139c:	2301      	movs	r3, #1
 800139e:	80bb      	strh	r3, [r7, #4]
 80013a0:	e017      	b.n	80013d2 <adc_scan_start+0xa2>
	    case   20: drate = SYS0_DOR20;   break;
 80013a2:	2302      	movs	r3, #2
 80013a4:	80bb      	strh	r3, [r7, #4]
 80013a6:	e014      	b.n	80013d2 <adc_scan_start+0xa2>
	    default:
	    case   40: drate = SYS0_DOR40;   break;
 80013a8:	2303      	movs	r3, #3
 80013aa:	80bb      	strh	r3, [r7, #4]
 80013ac:	e011      	b.n	80013d2 <adc_scan_start+0xa2>
	    case   80: drate = SYS0_DOR80;   break;
 80013ae:	2304      	movs	r3, #4
 80013b0:	80bb      	strh	r3, [r7, #4]
 80013b2:	e00e      	b.n	80013d2 <adc_scan_start+0xa2>
	    case  160: drate = SYS0_DOR160;  break;
 80013b4:	2305      	movs	r3, #5
 80013b6:	80bb      	strh	r3, [r7, #4]
 80013b8:	e00b      	b.n	80013d2 <adc_scan_start+0xa2>
	    case  320: drate = SYS0_DOR320;  break;
 80013ba:	2306      	movs	r3, #6
 80013bc:	80bb      	strh	r3, [r7, #4]
 80013be:	e008      	b.n	80013d2 <adc_scan_start+0xa2>
	    case  640: drate = SYS0_DOR640;  break;
 80013c0:	2307      	movs	r3, #7
 80013c2:	80bb      	strh	r3, [r7, #4]
 80013c4:	e005      	b.n	80013d2 <adc_scan_start+0xa2>
	    case 1000: drate = SYS0_DOR1000; break;
 80013c6:	2308      	movs	r3, #8
 80013c8:	80bb      	strh	r3, [r7, #4]
 80013ca:	e002      	b.n	80013d2 <adc_scan_start+0xa2>
	    case 2000: drate = SYS0_DOR2000; break;
 80013cc:	2309      	movs	r3, #9
 80013ce:	80bb      	strh	r3, [r7, #4]
 80013d0:	bf00      	nop
	  }

	  switch(gain)
 80013d2:	79bb      	ldrb	r3, [r7, #6]
 80013d4:	2b10      	cmp	r3, #16
 80013d6:	d01a      	beq.n	800140e <adc_scan_start+0xde>
 80013d8:	2b10      	cmp	r3, #16
 80013da:	dc06      	bgt.n	80013ea <adc_scan_start+0xba>
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d010      	beq.n	8001402 <adc_scan_start+0xd2>
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d011      	beq.n	8001408 <adc_scan_start+0xd8>
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d009      	beq.n	80013fc <adc_scan_start+0xcc>
 80013e8:	e005      	b.n	80013f6 <adc_scan_start+0xc6>
 80013ea:	2b40      	cmp	r3, #64	; 0x40
 80013ec:	d015      	beq.n	800141a <adc_scan_start+0xea>
 80013ee:	2b80      	cmp	r3, #128	; 0x80
 80013f0:	d016      	beq.n	8001420 <adc_scan_start+0xf0>
 80013f2:	2b20      	cmp	r3, #32
 80013f4:	d00e      	beq.n	8001414 <adc_scan_start+0xe4>
	  {
	    default:
	    case   1: gain = SYS0_PGA1;   break;
 80013f6:	2300      	movs	r3, #0
 80013f8:	71bb      	strb	r3, [r7, #6]
 80013fa:	e014      	b.n	8001426 <adc_scan_start+0xf6>
	    case   2: gain = SYS0_PGA2;   break;
 80013fc:	2310      	movs	r3, #16
 80013fe:	71bb      	strb	r3, [r7, #6]
 8001400:	e011      	b.n	8001426 <adc_scan_start+0xf6>
	    case   4: gain = SYS0_PGA4;   break;
 8001402:	2320      	movs	r3, #32
 8001404:	71bb      	strb	r3, [r7, #6]
 8001406:	e00e      	b.n	8001426 <adc_scan_start+0xf6>
	    case   8: gain = SYS0_PGA8;   break;
 8001408:	2330      	movs	r3, #48	; 0x30
 800140a:	71bb      	strb	r3, [r7, #6]
 800140c:	e00b      	b.n	8001426 <adc_scan_start+0xf6>
	    case  16: gain = SYS0_PGA16;  break;
 800140e:	2340      	movs	r3, #64	; 0x40
 8001410:	71bb      	strb	r3, [r7, #6]
 8001412:	e008      	b.n	8001426 <adc_scan_start+0xf6>
	    case  32: gain = SYS0_PGA32;  break;
 8001414:	2350      	movs	r3, #80	; 0x50
 8001416:	71bb      	strb	r3, [r7, #6]
 8001418:	e005      	b.n	8001426 <adc_scan_start+0xf6>
	    case  64: gain = SYS0_PGA64;  break;
 800141a:	2360      	movs	r3, #96	; 0x60
 800141c:	71bb      	strb	r3, [r7, #6]
 800141e:	e002      	b.n	8001426 <adc_scan_start+0xf6>
	    case 128: gain = SYS0_PGA128; break;
 8001420:	2370      	movs	r3, #112	; 0x70
 8001422:	71bb      	strb	r3, [r7, #6]
 8001424:	bf00      	nop
	  }

	  switch(current)
 8001426:	887b      	ldrh	r3, [r7, #2]
 8001428:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800142c:	d020      	beq.n	8001470 <adc_scan_start+0x140>
 800142e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001432:	dc06      	bgt.n	8001442 <adc_scan_start+0x112>
 8001434:	2b64      	cmp	r3, #100	; 0x64
 8001436:	d015      	beq.n	8001464 <adc_scan_start+0x134>
 8001438:	2bfa      	cmp	r3, #250	; 0xfa
 800143a:	d016      	beq.n	800146a <adc_scan_start+0x13a>
 800143c:	2b32      	cmp	r3, #50	; 0x32
 800143e:	d00e      	beq.n	800145e <adc_scan_start+0x12e>
 8001440:	e00a      	b.n	8001458 <adc_scan_start+0x128>
 8001442:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001446:	d019      	beq.n	800147c <adc_scan_start+0x14c>
 8001448:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800144c:	4293      	cmp	r3, r2
 800144e:	d018      	beq.n	8001482 <adc_scan_start+0x152>
 8001450:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001454:	4293      	cmp	r3, r2
 8001456:	d00e      	beq.n	8001476 <adc_scan_start+0x146>
	  {
	    default:
	    case    0: current = IDAC0_MAGOFF;    break;
 8001458:	2300      	movs	r3, #0
 800145a:	807b      	strh	r3, [r7, #2]
 800145c:	e014      	b.n	8001488 <adc_scan_start+0x158>
	    case   50: current = IDAC0_MAG50UA;   break;
 800145e:	2301      	movs	r3, #1
 8001460:	807b      	strh	r3, [r7, #2]
 8001462:	e011      	b.n	8001488 <adc_scan_start+0x158>
	    case  100: current = IDAC0_MAG100UA;  break;
 8001464:	2302      	movs	r3, #2
 8001466:	807b      	strh	r3, [r7, #2]
 8001468:	e00e      	b.n	8001488 <adc_scan_start+0x158>
	    case  250: current = IDAC0_MAG250UA;  break;
 800146a:	2303      	movs	r3, #3
 800146c:	807b      	strh	r3, [r7, #2]
 800146e:	e00b      	b.n	8001488 <adc_scan_start+0x158>
	    case  500: current = IDAC0_MAG500UA;  break;
 8001470:	2304      	movs	r3, #4
 8001472:	807b      	strh	r3, [r7, #2]
 8001474:	e008      	b.n	8001488 <adc_scan_start+0x158>
	    case  750: current = IDAC0_MAG750UA;  break;
 8001476:	2305      	movs	r3, #5
 8001478:	807b      	strh	r3, [r7, #2]
 800147a:	e005      	b.n	8001488 <adc_scan_start+0x158>
	    case 1000: current = IDAC0_MAG1000UA; break;
 800147c:	2306      	movs	r3, #6
 800147e:	807b      	strh	r3, [r7, #2]
 8001480:	e002      	b.n	8001488 <adc_scan_start+0x158>
	    case 1500: current = IDAC0_MAG1500UA; break;
 8001482:	2307      	movs	r3, #7
 8001484:	807b      	strh	r3, [r7, #2]
 8001486:	bf00      	nop
	  }


	  cs_enable(id);
 8001488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fee9 	bl	8001264 <cs_enable>

	  if(id <= 5){	//DMS
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	2b05      	cmp	r3, #5
 8001498:	dc40      	bgt.n	800151c <adc_scan_start+0x1ec>

		  wr_cmd(id, CMD_RESET);
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	2106      	movs	r1, #6
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 fa1d 	bl	80018e0 <wr_cmd>
		  wr_cmd(id, CMD_SDATAC);
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	2116      	movs	r1, #22
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 fa17 	bl	80018e0 <wr_cmd>
		  wr_reg(id, REG_MUX0, 0b00000001);
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	2201      	movs	r2, #1
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 fa50 	bl	8001960 <wr_reg>
		  wr_reg(id, REG_VBIAS, 0x00);
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	2200      	movs	r2, #0
 80014c6:	2101      	movs	r1, #1
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fa49 	bl	8001960 <wr_reg>
		  wr_reg(id, REG_MUX1, 0b00110000);
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	2230      	movs	r2, #48	; 0x30
 80014d4:	2102      	movs	r1, #2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 fa42 	bl	8001960 <wr_reg>
		  wr_reg(id, REG_SYS0, gain | drate);
 80014dc:	88bb      	ldrh	r3, [r7, #4]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	79bb      	ldrb	r3, [r7, #6]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	2103      	movs	r1, #3
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 fa37 	bl	8001960 <wr_reg>
		  wr_reg(id, REG_IDAC0, 0x00);
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	2200      	movs	r2, #0
 80014f8:	210a      	movs	r1, #10
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 fa30 	bl	8001960 <wr_reg>
		  wr_reg(id, REG_IDAC1, 0b11001100);
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	22cc      	movs	r2, #204	; 0xcc
 8001506:	210b      	movs	r1, #11
 8001508:	4618      	mov	r0, r3
 800150a:	f000 fa29 	bl	8001960 <wr_reg>
		  wr_cmd(id, CMD_SYNC);
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	2104      	movs	r1, #4
 8001514:	4618      	mov	r0, r3
 8001516:	f000 f9e3 	bl	80018e0 <wr_cmd>
 800151a:	e040      	b.n	800159e <adc_scan_start+0x26e>
		  //uint8_t rdata = CMD_RDATAC;
		  //HAL_SPI_Transmit(get_hspi_from_id(id), &rdata, 2, HAL_MAX_DELAY);

	  } else {	//PT100

		  wr_cmd(id, CMD_RESET);
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	2106      	movs	r1, #6
 8001522:	4618      	mov	r0, r3
 8001524:	f000 f9dc 	bl	80018e0 <wr_cmd>
		  wr_cmd(id, CMD_SDATAC);
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	2116      	movs	r1, #22
 800152e:	4618      	mov	r0, r3
 8001530:	f000 f9d6 	bl	80018e0 <wr_cmd>
		  wr_reg(id, REG_VBIAS, 0x00);
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	2200      	movs	r2, #0
 800153a:	2101      	movs	r1, #1
 800153c:	4618      	mov	r0, r3
 800153e:	f000 fa0f 	bl	8001960 <wr_reg>
		  wr_reg(id, REG_MUX0, 0x01); //?
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	2201      	movs	r2, #1
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f000 fa08 	bl	8001960 <wr_reg>
		  wr_reg(id, REG_MUX1, 0b00100000); //int ref on, REFP0/REFN0 ref inp selected
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	2220      	movs	r2, #32
 8001556:	2102      	movs	r1, #2
 8001558:	4618      	mov	r0, r3
 800155a:	f000 fa01 	bl	8001960 <wr_reg>
		  //wr_reg(id, REG_VBIAS, 0x00);
		  //wr_reg(id, REG_MUX1, 0b00110000);
		  wr_reg(id, REG_SYS0, gain | drate); //Gain 4, SPS 20
 800155e:	88bb      	ldrh	r3, [r7, #4]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	79bb      	ldrb	r3, [r7, #6]
 8001564:	4313      	orrs	r3, r2
 8001566:	b2da      	uxtb	r2, r3
 8001568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156c:	2103      	movs	r1, #3
 800156e:	4618      	mov	r0, r3
 8001570:	f000 f9f6 	bl	8001960 <wr_reg>
		  wr_reg(id, REG_IDAC0, current); //1mA;
 8001574:	887b      	ldrh	r3, [r7, #2]
 8001576:	b2da      	uxtb	r2, r3
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	210a      	movs	r1, #10
 800157e:	4618      	mov	r0, r3
 8001580:	f000 f9ee 	bl	8001960 <wr_reg>
		  wr_reg(id, REG_IDAC1, 0b00000010); //IDAC1 = AIN0, IDAC2 = AIN3
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	2202      	movs	r2, #2
 800158a:	210b      	movs	r1, #11
 800158c:	4618      	mov	r0, r3
 800158e:	f000 f9e7 	bl	8001960 <wr_reg>
		  wr_cmd(id, CMD_SYNC);
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	2104      	movs	r1, #4
 8001598:	4618      	mov	r0, r3
 800159a:	f000 f9a1 	bl	80018e0 <wr_cmd>
		  //uint8_t rdata = CMD_RDATAC;
		  //HAL_SPI_Transmit(get_hspi_from_id(id), &rdata, 2, HAL_MAX_DELAY);
	  }


	  cs_disable(id);
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fe7c 	bl	80012a0 <cs_disable>

	  return r;
 80015a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd90      	pop	{r4, r7, pc}

080015b4 <rd_data>:

uint16_t rd_data(int8_t id){
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b087      	sub	sp, #28
 80015b8:	af02      	add	r7, sp, #8
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
	uint8_t d1, d3;
	uint16_t dR;

	while(HAL_GPIO_ReadPin(port_drdy_from_id(id), pin_drdy_from_id(id)) == GPIO_PIN_SET);
 80015be:	bf00      	nop
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 f911 	bl	80017ec <port_drdy_from_id>
 80015ca:	4604      	mov	r4, r0
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 f8cb 	bl	800176c <pin_drdy_from_id>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4619      	mov	r1, r3
 80015da:	4620      	mov	r0, r4
 80015dc:	f001 fe2c 	bl	8003238 <HAL_GPIO_ReadPin>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d0ec      	beq.n	80015c0 <rd_data+0xc>
	cs_enable(id);
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fe3a 	bl	8001264 <cs_enable>

	uint8_t rdata = CMD_RDATA;
 80015f0:	2312      	movs	r3, #18
 80015f2:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_Transmit(get_hspi_from_id(id), &rdata, 2, HAL_MAX_DELAY);
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 f935 	bl	8001868 <get_hspi_from_id>
 80015fe:	f107 010b 	add.w	r1, r7, #11
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	2202      	movs	r2, #2
 8001608:	f003 ff0a 	bl	8005420 <HAL_SPI_Transmit>
	//HAL_Delay(1);

	uint8_t nope = CMD_NOP;
 800160c:	23ff      	movs	r3, #255	; 0xff
 800160e:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_TransmitReceive(get_hspi_from_id(id), &nope, &d1, 2, HAL_MAX_DELAY);
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	4618      	mov	r0, r3
 8001616:	f000 f927 	bl	8001868 <get_hspi_from_id>
 800161a:	f107 020d 	add.w	r2, r7, #13
 800161e:	f107 010a 	add.w	r1, r7, #10
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2302      	movs	r3, #2
 800162a:	f004 f997 	bl	800595c <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(get_hspi_from_id(id), &nope, &d3, 2, HAL_MAX_DELAY);
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f918 	bl	8001868 <get_hspi_from_id>
 8001638:	f107 020c 	add.w	r2, r7, #12
 800163c:	f107 010a 	add.w	r1, r7, #10
 8001640:	f04f 33ff 	mov.w	r3, #4294967295
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2302      	movs	r3, #2
 8001648:	f004 f988 	bl	800595c <HAL_SPI_TransmitReceive>
	dR = (d1 << 8) | d3;
 800164c:	7b7b      	ldrb	r3, [r7, #13]
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	b21a      	sxth	r2, r3
 8001652:	7b3b      	ldrb	r3, [r7, #12]
 8001654:	b21b      	sxth	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b21b      	sxth	r3, r3
 800165a:	81fb      	strh	r3, [r7, #14]
	cs_disable(id);
 800165c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fe1d 	bl	80012a0 <cs_disable>

	return dR;
 8001666:	89fb      	ldrh	r3, [r7, #14]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	bd90      	pop	{r4, r7, pc}

08001670 <pin_from_id>:
	//cs_disable(id);
	return d1;
}

//
uint16_t pin_from_id(int8_t id){
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
	switch(id){
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	2b08      	cmp	r3, #8
 8001680:	d82c      	bhi.n	80016dc <pin_from_id+0x6c>
 8001682:	a201      	add	r2, pc, #4	; (adr r2, 8001688 <pin_from_id+0x18>)
 8001684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001688:	080016ad 	.word	0x080016ad
 800168c:	080016b3 	.word	0x080016b3
 8001690:	080016b9 	.word	0x080016b9
 8001694:	080016bf 	.word	0x080016bf
 8001698:	080016c3 	.word	0x080016c3
 800169c:	080016c7 	.word	0x080016c7
 80016a0:	080016cb 	.word	0x080016cb
 80016a4:	080016d1 	.word	0x080016d1
 80016a8:	080016d7 	.word	0x080016d7
			case 0: //DMS 1
				return nCS_DMS1_Pin;
 80016ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b0:	e016      	b.n	80016e0 <pin_from_id+0x70>
			case 1: //DMS 2
				return nCS_DMS2_Pin;
 80016b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016b6:	e013      	b.n	80016e0 <pin_from_id+0x70>
			case 2: //DMS 3
				return nCS_DMS3_Pin;
 80016b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016bc:	e010      	b.n	80016e0 <pin_from_id+0x70>
			case 3: //DMS 4
				return nCS_DMS4_Pin;
 80016be:	2301      	movs	r3, #1
 80016c0:	e00e      	b.n	80016e0 <pin_from_id+0x70>
			case 4: //DMS 5
				return nCS_DMS5_Pin;
 80016c2:	2302      	movs	r3, #2
 80016c4:	e00c      	b.n	80016e0 <pin_from_id+0x70>
			case 5: //DMS 6
				return nCS_DMS6_Pin;
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	e00a      	b.n	80016e0 <pin_from_id+0x70>
			case 6: //PT 1
				return nCS_PT1_Pin;
 80016ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016ce:	e007      	b.n	80016e0 <pin_from_id+0x70>
			case 7: //PT 2
				return nCS_PT2_Pin;
 80016d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016d4:	e004      	b.n	80016e0 <pin_from_id+0x70>
			case 8: //PT 3
				return nCS_PT3_Pin;
 80016d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016da:	e001      	b.n	80016e0 <pin_from_id+0x70>
			default: //DMS 1
				return nCS_DMS1_Pin;
 80016dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		}
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <port_from_id>:

//
GPIO_TypeDef* port_from_id(int8_t id){
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
	switch(id){
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	2b08      	cmp	r3, #8
 80016fc:	d826      	bhi.n	800174c <port_from_id+0x60>
 80016fe:	a201      	add	r2, pc, #4	; (adr r2, 8001704 <port_from_id+0x18>)
 8001700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001704:	08001729 	.word	0x08001729
 8001708:	0800172d 	.word	0x0800172d
 800170c:	08001731 	.word	0x08001731
 8001710:	08001735 	.word	0x08001735
 8001714:	08001739 	.word	0x08001739
 8001718:	0800173d 	.word	0x0800173d
 800171c:	08001741 	.word	0x08001741
 8001720:	08001745 	.word	0x08001745
 8001724:	08001749 	.word	0x08001749
		case 0: //DMS 1
			return nCS_DMS1_GPIO_Port;
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <port_from_id+0x70>)
 800172a:	e010      	b.n	800174e <port_from_id+0x62>
		case 1: //DMS 2
			return nCS_DMS2_GPIO_Port;
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <port_from_id+0x70>)
 800172e:	e00e      	b.n	800174e <port_from_id+0x62>
		case 2: //DMS 3
			return nCS_DMS3_GPIO_Port;
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <port_from_id+0x70>)
 8001732:	e00c      	b.n	800174e <port_from_id+0x62>
		case 3: //DMS 4
			return nCS_DMS4_GPIO_Port;
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <port_from_id+0x74>)
 8001736:	e00a      	b.n	800174e <port_from_id+0x62>
		case 4: //DMS 5
			return nCS_DMS5_GPIO_Port;
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <port_from_id+0x74>)
 800173a:	e008      	b.n	800174e <port_from_id+0x62>
		case 5: //DMS 6
			return nCS_DMS6_GPIO_Port;
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <port_from_id+0x78>)
 800173e:	e006      	b.n	800174e <port_from_id+0x62>
		case 6: //PT 1
			return nCS_PT1_GPIO_Port;
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <port_from_id+0x7c>)
 8001742:	e004      	b.n	800174e <port_from_id+0x62>
		case 7: //PT 2
			return nCS_PT2_GPIO_Port;
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <port_from_id+0x7c>)
 8001746:	e002      	b.n	800174e <port_from_id+0x62>
		case 8: //PT 3
			return nCS_PT3_GPIO_Port;
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <port_from_id+0x7c>)
 800174a:	e000      	b.n	800174e <port_from_id+0x62>
		default: //DMS 1
			return nCS_DMS1_GPIO_Port;
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <port_from_id+0x70>)
	}
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40021400 	.word	0x40021400
 8001760:	40021800 	.word	0x40021800
 8001764:	40021000 	.word	0x40021000
 8001768:	40020c00 	.word	0x40020c00

0800176c <pin_drdy_from_id>:

//
uint16_t pin_drdy_from_id(int8_t id){
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
	switch(id){
 8001776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177a:	2b08      	cmp	r3, #8
 800177c:	d82e      	bhi.n	80017dc <pin_drdy_from_id+0x70>
 800177e:	a201      	add	r2, pc, #4	; (adr r2, 8001784 <pin_drdy_from_id+0x18>)
 8001780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001784:	080017a9 	.word	0x080017a9
 8001788:	080017ad 	.word	0x080017ad
 800178c:	080017b3 	.word	0x080017b3
 8001790:	080017b9 	.word	0x080017b9
 8001794:	080017bf 	.word	0x080017bf
 8001798:	080017c5 	.word	0x080017c5
 800179c:	080017cb 	.word	0x080017cb
 80017a0:	080017d1 	.word	0x080017d1
 80017a4:	080017d7 	.word	0x080017d7
			case 0: //DMS 1
				return nDRDY_DMS1_Pin;
 80017a8:	2310      	movs	r3, #16
 80017aa:	e018      	b.n	80017de <pin_drdy_from_id+0x72>
			case 1: //DMS 2
				return nDRDY_DMS2_Pin;
 80017ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b0:	e015      	b.n	80017de <pin_drdy_from_id+0x72>
			case 2: //DMS 3
				return nDRDY_DMS3_Pin;
 80017b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017b6:	e012      	b.n	80017de <pin_drdy_from_id+0x72>
			case 3: //DMS 4
				return nDRDY_DMS4_Pin;
 80017b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017bc:	e00f      	b.n	80017de <pin_drdy_from_id+0x72>
			case 4: //DMS 5
				return nDRDY_DMS5_Pin;
 80017be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017c2:	e00c      	b.n	80017de <pin_drdy_from_id+0x72>
			case 5: //DMS 6
				return nDRDY_DMS6_Pin;
 80017c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c8:	e009      	b.n	80017de <pin_drdy_from_id+0x72>
			case 6: //PT 1
				return nDRDY_PT1_Pin;
 80017ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017ce:	e006      	b.n	80017de <pin_drdy_from_id+0x72>
			case 7: //PT 2
				return nDRDY_PT2_Pin;
 80017d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017d4:	e003      	b.n	80017de <pin_drdy_from_id+0x72>
			case 8: //PT 3
				return nDRDY_PT3_Pin;
 80017d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017da:	e000      	b.n	80017de <pin_drdy_from_id+0x72>
			default: //DMS 1
				return nDRDY_DMS1_Pin;
 80017dc:	2310      	movs	r3, #16
		}
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop

080017ec <port_drdy_from_id>:

//
GPIO_TypeDef* port_drdy_from_id(int8_t id){
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
	switch(id){
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d826      	bhi.n	800184c <port_drdy_from_id+0x60>
 80017fe:	a201      	add	r2, pc, #4	; (adr r2, 8001804 <port_drdy_from_id+0x18>)
 8001800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001804:	08001829 	.word	0x08001829
 8001808:	0800182d 	.word	0x0800182d
 800180c:	08001831 	.word	0x08001831
 8001810:	08001835 	.word	0x08001835
 8001814:	08001839 	.word	0x08001839
 8001818:	0800183d 	.word	0x0800183d
 800181c:	08001841 	.word	0x08001841
 8001820:	08001845 	.word	0x08001845
 8001824:	08001849 	.word	0x08001849
		case 0: //DMS 1
			return nDRDY_DMS1_GPIO_Port;
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <port_drdy_from_id+0x70>)
 800182a:	e010      	b.n	800184e <port_drdy_from_id+0x62>
		case 1: //DMS 2
			return nDRDY_DMS2_GPIO_Port;
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <port_drdy_from_id+0x74>)
 800182e:	e00e      	b.n	800184e <port_drdy_from_id+0x62>
		case 2: //DMS 3
			return nDRDY_DMS3_GPIO_Port;
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <port_drdy_from_id+0x74>)
 8001832:	e00c      	b.n	800184e <port_drdy_from_id+0x62>
		case 3: //DMS 4
			return nDRDY_DMS4_GPIO_Port;
 8001834:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <port_drdy_from_id+0x74>)
 8001836:	e00a      	b.n	800184e <port_drdy_from_id+0x62>
		case 4: //DMS 5
			return nDRDY_DMS5_GPIO_Port;
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <port_drdy_from_id+0x74>)
 800183a:	e008      	b.n	800184e <port_drdy_from_id+0x62>
		case 5: //DMS 6
			return nDRDY_DMS6_GPIO_Port;
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <port_drdy_from_id+0x74>)
 800183e:	e006      	b.n	800184e <port_drdy_from_id+0x62>
		case 6: //PT 1
			return nDRDY_PT1_GPIO_Port;
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <port_drdy_from_id+0x78>)
 8001842:	e004      	b.n	800184e <port_drdy_from_id+0x62>
		case 7: //PT 2
			return nDRDY_PT2_GPIO_Port;
 8001844:	4b07      	ldr	r3, [pc, #28]	; (8001864 <port_drdy_from_id+0x78>)
 8001846:	e002      	b.n	800184e <port_drdy_from_id+0x62>
		case 8: //PT 3
			return nDRDY_PT3_GPIO_Port;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <port_drdy_from_id+0x78>)
 800184a:	e000      	b.n	800184e <port_drdy_from_id+0x62>
		default: //DMS 1
			return nDRDY_DMS1_GPIO_Port;
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <port_drdy_from_id+0x70>)
	}
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40021800 	.word	0x40021800
 8001860:	40020000 	.word	0x40020000
 8001864:	40022400 	.word	0x40022400

08001868 <get_hspi_from_id>:

//
SPI_HandleTypeDef *get_hspi_from_id(int8_t id){
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
	switch(id){
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	2b08      	cmp	r3, #8
 8001878:	d826      	bhi.n	80018c8 <get_hspi_from_id+0x60>
 800187a:	a201      	add	r2, pc, #4	; (adr r2, 8001880 <get_hspi_from_id+0x18>)
 800187c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001880:	080018a5 	.word	0x080018a5
 8001884:	080018a9 	.word	0x080018a9
 8001888:	080018ad 	.word	0x080018ad
 800188c:	080018b1 	.word	0x080018b1
 8001890:	080018b5 	.word	0x080018b5
 8001894:	080018b9 	.word	0x080018b9
 8001898:	080018bd 	.word	0x080018bd
 800189c:	080018c1 	.word	0x080018c1
 80018a0:	080018c5 	.word	0x080018c5
		case 0: //DMS 1
			return &hspi4;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <get_hspi_from_id+0x70>)
 80018a6:	e010      	b.n	80018ca <get_hspi_from_id+0x62>
		case 1: //DMS 2
			return &hspi4;
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <get_hspi_from_id+0x70>)
 80018aa:	e00e      	b.n	80018ca <get_hspi_from_id+0x62>
		case 2: //DMS 3
			return &hspi4;
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <get_hspi_from_id+0x70>)
 80018ae:	e00c      	b.n	80018ca <get_hspi_from_id+0x62>
		case 3: //DMS 4
			return &hspi4;
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <get_hspi_from_id+0x70>)
 80018b2:	e00a      	b.n	80018ca <get_hspi_from_id+0x62>
		case 4: //DMS 5
			return &hspi4;
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <get_hspi_from_id+0x70>)
 80018b6:	e008      	b.n	80018ca <get_hspi_from_id+0x62>
		case 5: //DMS 6
			return &hspi4;
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <get_hspi_from_id+0x70>)
 80018ba:	e006      	b.n	80018ca <get_hspi_from_id+0x62>
		case 6: //PT 1
			return &hspi3;
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <get_hspi_from_id+0x74>)
 80018be:	e004      	b.n	80018ca <get_hspi_from_id+0x62>
		case 7: //PT 2
			return &hspi3;
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <get_hspi_from_id+0x74>)
 80018c2:	e002      	b.n	80018ca <get_hspi_from_id+0x62>
		case 8: //PT 3
			return &hspi3;
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <get_hspi_from_id+0x74>)
 80018c6:	e000      	b.n	80018ca <get_hspi_from_id+0x62>
		default: //DMS 1
			return &hspi4;
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <get_hspi_from_id+0x70>)
	}
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000250 	.word	0x20000250
 80018dc:	200001ec 	.word	0x200001ec

080018e0 <wr_cmd>:



//
int wr_cmd(int8_t id, uint8_t cmd){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	460a      	mov	r2, r1
 80018ea:	71fb      	strb	r3, [r7, #7]
 80018ec:	4613      	mov	r3, r2
 80018ee:	71bb      	strb	r3, [r7, #6]
	int8_t status = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	73fb      	strb	r3, [r7, #15]
	//status+= cs_enable(id);
	status+= wr_spi(id, cmd);
 80018f4:	79ba      	ldrb	r2, [r7, #6]
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fced 	bl	80012dc <wr_spi>
 8001902:	4603      	mov	r3, r0
 8001904:	b2da      	uxtb	r2, r3
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	4413      	add	r3, r2
 800190a:	b2db      	uxtb	r3, r3
 800190c:	73fb      	strb	r3, [r7, #15]
	if(cmd == CMD_SYNC)
 800190e:	79bb      	ldrb	r3, [r7, #6]
 8001910:	2b04      	cmp	r3, #4
 8001912:	d10c      	bne.n	800192e <wr_cmd+0x4e>
	{
		status+= wr_spi(id, cmd);
 8001914:	79ba      	ldrb	r2, [r7, #6]
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fcdd 	bl	80012dc <wr_spi>
 8001922:	4603      	mov	r3, r0
 8001924:	b2da      	uxtb	r2, r3
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	4413      	add	r3, r2
 800192a:	b2db      	uxtb	r3, r3
 800192c:	73fb      	strb	r3, [r7, #15]
    }
	//status+= cs_disable(id);
	if(cmd == CMD_RESET)
 800192e:	79bb      	ldrb	r3, [r7, #6]
 8001930:	2b06      	cmp	r3, #6
 8001932:	d103      	bne.n	800193c <wr_cmd+0x5c>
	{
		HAL_Delay(1); //1ms
 8001934:	2001      	movs	r0, #1
 8001936:	f000 fe1d 	bl	8002574 <HAL_Delay>
 800193a:	e00c      	b.n	8001956 <wr_cmd+0x76>
	}
	else if(cmd == CMD_SELFOCAL)
 800193c:	79bb      	ldrb	r3, [r7, #6]
 800193e:	2b62      	cmp	r3, #98	; 0x62
 8001940:	d103      	bne.n	800194a <wr_cmd+0x6a>
	{
		HAL_Delay(10); //10ms
 8001942:	200a      	movs	r0, #10
 8001944:	f000 fe16 	bl	8002574 <HAL_Delay>
 8001948:	e005      	b.n	8001956 <wr_cmd+0x76>
	}
	else if(cmd == CMD_SDATAC)
 800194a:	79bb      	ldrb	r3, [r7, #6]
 800194c:	2b16      	cmp	r3, #22
 800194e:	d102      	bne.n	8001956 <wr_cmd+0x76>
	{
		HAL_Delay(1); //1ms
 8001950:	2001      	movs	r0, #1
 8001952:	f000 fe0f 	bl	8002574 <HAL_Delay>
	}
	return 0;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <wr_reg>:

int wr_reg(int8_t id, uint8_t reg, uint8_t data){
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
 800196a:	460b      	mov	r3, r1
 800196c:	71bb      	strb	r3, [r7, #6]
 800196e:	4613      	mov	r3, r2
 8001970:	717b      	strb	r3, [r7, #5]
	int8_t status = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, CMD_WREG | reg);
 8001976:	79bb      	ldrb	r3, [r7, #6]
 8001978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800197c:	b2da      	uxtb	r2, r3
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fca9 	bl	80012dc <wr_spi>
 800198a:	4603      	mov	r3, r0
 800198c:	b2da      	uxtb	r2, r3
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	4413      	add	r3, r2
 8001992:	b2db      	uxtb	r3, r3
 8001994:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, 0);
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	2100      	movs	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fc9d 	bl	80012dc <wr_spi>
 80019a2:	4603      	mov	r3, r0
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	4413      	add	r3, r2
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, data);
 80019ae:	797a      	ldrb	r2, [r7, #5]
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	4611      	mov	r1, r2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fc90 	bl	80012dc <wr_spi>
 80019bc:	4603      	mov	r3, r0
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	4413      	add	r3, r2
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	73fb      	strb	r3, [r7, #15]
	return 0;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <write_EXP>:
	data = rd_spi(id);
	//status += cs_disable(id);
	return data;
}

int write_EXP(uint8_t *dout){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart8, &dout, sizeof(dout), HAL_MAX_DELAY);
 80019dc:	1d39      	adds	r1, r7, #4
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
 80019e2:	2204      	movs	r2, #4
 80019e4:	4803      	ldr	r0, [pc, #12]	; (80019f4 <write_EXP+0x20>)
 80019e6:	f004 fd2b 	bl	8006440 <HAL_UART_Transmit>
	return 0;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000334 	.word	0x20000334

080019f8 <write_DAPI>:

int write_DAPI(uint8_t *dout){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, &dout, sizeof(dout), HAL_MAX_DELAY);
 8001a00:	1d39      	adds	r1, r7, #4
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
 8001a06:	2204      	movs	r2, #4
 8001a08:	4803      	ldr	r0, [pc, #12]	; (8001a18 <write_DAPI+0x20>)
 8001a0a:	f004 fd19 	bl	8006440 <HAL_UART_Transmit>
	return 0;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	200003b4 	.word	0x200003b4

08001a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
 8001a32:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi5;
SPI_HandleTypeDef hspi6;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001a44:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <MX_SPI2_Init+0x74>)
 8001a46:	4a1c      	ldr	r2, [pc, #112]	; (8001ab8 <MX_SPI2_Init+0x78>)
 8001a48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <MX_SPI2_Init+0x74>)
 8001a4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a52:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <MX_SPI2_Init+0x74>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <MX_SPI2_Init+0x74>)
 8001a5a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a5e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <MX_SPI2_Init+0x74>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a66:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <MX_SPI2_Init+0x74>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_SPI2_Init+0x74>)
 8001a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a72:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <MX_SPI2_Init+0x74>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <MX_SPI2_Init+0x74>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_SPI2_Init+0x74>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <MX_SPI2_Init+0x74>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_SPI2_Init+0x74>)
 8001a8e:	2207      	movs	r2, #7
 8001a90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a92:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <MX_SPI2_Init+0x74>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_SPI2_Init+0x74>)
 8001a9a:	2208      	movs	r2, #8
 8001a9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a9e:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <MX_SPI2_Init+0x74>)
 8001aa0:	f003 fb16 	bl	80050d0 <HAL_SPI_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001aaa:	f7ff ffb7 	bl	8001a1c <Error_Handler>
  }

}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200000c0 	.word	0x200000c0
 8001ab8:	40003800 	.word	0x40003800

08001abc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <MX_SPI3_Init+0x74>)
 8001ac2:	4a1c      	ldr	r2, [pc, #112]	; (8001b34 <MX_SPI3_Init+0x78>)
 8001ac4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <MX_SPI3_Init+0x74>)
 8001ac8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001acc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <MX_SPI3_Init+0x74>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ad4:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <MX_SPI3_Init+0x74>)
 8001ad6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ada:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001adc:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <MX_SPI3_Init+0x74>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <MX_SPI3_Init+0x74>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <MX_SPI3_Init+0x74>)
 8001aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <MX_SPI3_Init+0x74>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <MX_SPI3_Init+0x74>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <MX_SPI3_Init+0x74>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <MX_SPI3_Init+0x74>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <MX_SPI3_Init+0x74>)
 8001b0a:	2207      	movs	r2, #7
 8001b0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <MX_SPI3_Init+0x74>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <MX_SPI3_Init+0x74>)
 8001b16:	2208      	movs	r2, #8
 8001b18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <MX_SPI3_Init+0x74>)
 8001b1c:	f003 fad8 	bl	80050d0 <HAL_SPI_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001b26:	f7ff ff79 	bl	8001a1c <Error_Handler>
  }

}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200001ec 	.word	0x200001ec
 8001b34:	40003c00 	.word	0x40003c00

08001b38 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <MX_SPI4_Init+0x74>)
 8001b3e:	4a1c      	ldr	r2, [pc, #112]	; (8001bb0 <MX_SPI4_Init+0x78>)
 8001b40:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001b42:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <MX_SPI4_Init+0x74>)
 8001b44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b48:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001b4a:	4b18      	ldr	r3, [pc, #96]	; (8001bac <MX_SPI4_Init+0x74>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b50:	4b16      	ldr	r3, [pc, #88]	; (8001bac <MX_SPI4_Init+0x74>)
 8001b52:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b56:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <MX_SPI4_Init+0x74>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001b5e:	4b13      	ldr	r3, [pc, #76]	; (8001bac <MX_SPI4_Init+0x74>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <MX_SPI4_Init+0x74>)
 8001b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b6a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <MX_SPI4_Init+0x74>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <MX_SPI4_Init+0x74>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <MX_SPI4_Init+0x74>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <MX_SPI4_Init+0x74>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <MX_SPI4_Init+0x74>)
 8001b86:	2207      	movs	r2, #7
 8001b88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <MX_SPI4_Init+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <MX_SPI4_Init+0x74>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <MX_SPI4_Init+0x74>)
 8001b98:	f003 fa9a 	bl	80050d0 <HAL_SPI_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001ba2:	f7ff ff3b 	bl	8001a1c <Error_Handler>
  }

}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000250 	.word	0x20000250
 8001bb0:	40013400 	.word	0x40013400

08001bb4 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <MX_SPI5_Init+0x74>)
 8001bba:	4a1c      	ldr	r2, [pc, #112]	; (8001c2c <MX_SPI5_Init+0x78>)
 8001bbc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <MX_SPI5_Init+0x74>)
 8001bc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bc4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <MX_SPI5_Init+0x74>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8001bcc:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <MX_SPI5_Init+0x74>)
 8001bce:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001bd2:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <MX_SPI5_Init+0x74>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bda:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <MX_SPI5_Init+0x74>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <MX_SPI5_Init+0x74>)
 8001be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be6:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001be8:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <MX_SPI5_Init+0x74>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <MX_SPI5_Init+0x74>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <MX_SPI5_Init+0x74>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <MX_SPI5_Init+0x74>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <MX_SPI5_Init+0x74>)
 8001c02:	2207      	movs	r2, #7
 8001c04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <MX_SPI5_Init+0x74>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <MX_SPI5_Init+0x74>)
 8001c0e:	2208      	movs	r2, #8
 8001c10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001c12:	4805      	ldr	r0, [pc, #20]	; (8001c28 <MX_SPI5_Init+0x74>)
 8001c14:	f003 fa5c 	bl	80050d0 <HAL_SPI_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001c1e:	f7ff fefd 	bl	8001a1c <Error_Handler>
  }

}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000124 	.word	0x20000124
 8001c2c:	40015000 	.word	0x40015000

08001c30 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
 8001c34:	4b1b      	ldr	r3, [pc, #108]	; (8001ca4 <MX_SPI6_Init+0x74>)
 8001c36:	4a1c      	ldr	r2, [pc, #112]	; (8001ca8 <MX_SPI6_Init+0x78>)
 8001c38:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8001c3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ca4 <MX_SPI6_Init+0x74>)
 8001c3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c40:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8001c42:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <MX_SPI6_Init+0x74>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c48:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <MX_SPI6_Init+0x74>)
 8001c4a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c4e:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c50:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <MX_SPI6_Init+0x74>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c56:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <MX_SPI6_Init+0x74>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8001c5c:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <MX_SPI6_Init+0x74>)
 8001c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c62:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <MX_SPI6_Init+0x74>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <MX_SPI6_Init+0x74>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <MX_SPI6_Init+0x74>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c76:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <MX_SPI6_Init+0x74>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <MX_SPI6_Init+0x74>)
 8001c7e:	2207      	movs	r2, #7
 8001c80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c82:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <MX_SPI6_Init+0x74>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <MX_SPI6_Init+0x74>)
 8001c8a:	2208      	movs	r2, #8
 8001c8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8001c8e:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <MX_SPI6_Init+0x74>)
 8001c90:	f003 fa1e 	bl	80050d0 <HAL_SPI_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_SPI6_Init+0x6e>
  {
    Error_Handler();
 8001c9a:	f7ff febf 	bl	8001a1c <Error_Handler>
  }

}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000188 	.word	0x20000188
 8001ca8:	40015400 	.word	0x40015400

08001cac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b092      	sub	sp, #72	; 0x48
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a8e      	ldr	r2, [pc, #568]	; (8001f04 <HAL_SPI_MspInit+0x258>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d131      	bne.n	8001d32 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cce:	4b8e      	ldr	r3, [pc, #568]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	4a8d      	ldr	r2, [pc, #564]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cda:	4b8b      	ldr	r3, [pc, #556]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce2:	633b      	str	r3, [r7, #48]	; 0x30
 8001ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce6:	4b88      	ldr	r3, [pc, #544]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a87      	ldr	r2, [pc, #540]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b85      	ldr	r3, [pc, #532]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001cfe:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d02:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d10:	2305      	movs	r3, #5
 8001d12:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d18:	4619      	mov	r1, r3
 8001d1a:	487c      	ldr	r0, [pc, #496]	; (8001f0c <HAL_SPI_MspInit+0x260>)
 8001d1c:	f000 fefe 	bl	8002b1c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 6, 0);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2106      	movs	r1, #6
 8001d24:	2024      	movs	r0, #36	; 0x24
 8001d26:	f000 fd37 	bl	8002798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001d2a:	2024      	movs	r0, #36	; 0x24
 8001d2c:	f000 fd60 	bl	80027f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8001d30:	e0e4      	b.n	8001efc <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI3)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a76      	ldr	r2, [pc, #472]	; (8001f10 <HAL_SPI_MspInit+0x264>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d145      	bne.n	8001dc8 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d3c:	4b72      	ldr	r3, [pc, #456]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	4a71      	ldr	r2, [pc, #452]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d46:	6413      	str	r3, [r2, #64]	; 0x40
 8001d48:	4b6f      	ldr	r3, [pc, #444]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d54:	4b6c      	ldr	r3, [pc, #432]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	4a6b      	ldr	r2, [pc, #428]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001d5a:	f043 0302 	orr.w	r3, r3, #2
 8001d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d60:	4b69      	ldr	r3, [pc, #420]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6c:	4b66      	ldr	r3, [pc, #408]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	4a65      	ldr	r2, [pc, #404]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001d72:	f043 0304 	orr.w	r3, r3, #4
 8001d76:	6313      	str	r3, [r2, #48]	; 0x30
 8001d78:	4b63      	ldr	r3, [pc, #396]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	623b      	str	r3, [r7, #32]
 8001d82:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d84:	2304      	movs	r3, #4
 8001d86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d90:	2303      	movs	r3, #3
 8001d92:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001d94:	2307      	movs	r3, #7
 8001d96:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	485b      	ldr	r0, [pc, #364]	; (8001f0c <HAL_SPI_MspInit+0x260>)
 8001da0:	f000 febc 	bl	8002b1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001da4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001da8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db2:	2303      	movs	r3, #3
 8001db4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001db6:	2306      	movs	r3, #6
 8001db8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4854      	ldr	r0, [pc, #336]	; (8001f14 <HAL_SPI_MspInit+0x268>)
 8001dc2:	f000 feab 	bl	8002b1c <HAL_GPIO_Init>
}
 8001dc6:	e099      	b.n	8001efc <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI4)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a52      	ldr	r2, [pc, #328]	; (8001f18 <HAL_SPI_MspInit+0x26c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d130      	bne.n	8001e34 <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001dd2:	4b4d      	ldr	r3, [pc, #308]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	4a4c      	ldr	r2, [pc, #304]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001dd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dde:	4b4a      	ldr	r3, [pc, #296]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001de6:	61fb      	str	r3, [r7, #28]
 8001de8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dea:	4b47      	ldr	r3, [pc, #284]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a46      	ldr	r2, [pc, #280]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001df0:	f043 0310 	orr.w	r3, r3, #16
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b44      	ldr	r3, [pc, #272]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0310 	and.w	r3, r3, #16
 8001dfe:	61bb      	str	r3, [r7, #24]
 8001e00:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001e02:	2364      	movs	r3, #100	; 0x64
 8001e04:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001e12:	2305      	movs	r3, #5
 8001e14:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	483f      	ldr	r0, [pc, #252]	; (8001f1c <HAL_SPI_MspInit+0x270>)
 8001e1e:	f000 fe7d 	bl	8002b1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 6, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2106      	movs	r1, #6
 8001e26:	2054      	movs	r0, #84	; 0x54
 8001e28:	f000 fcb6 	bl	8002798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001e2c:	2054      	movs	r0, #84	; 0x54
 8001e2e:	f000 fcdf 	bl	80027f0 <HAL_NVIC_EnableIRQ>
}
 8001e32:	e063      	b.n	8001efc <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI5)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a39      	ldr	r2, [pc, #228]	; (8001f20 <HAL_SPI_MspInit+0x274>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d129      	bne.n	8001e92 <HAL_SPI_MspInit+0x1e6>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001e3e:	4b32      	ldr	r3, [pc, #200]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	4a31      	ldr	r2, [pc, #196]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001e44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e48:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4a:	4b2f      	ldr	r3, [pc, #188]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e56:	4b2c      	ldr	r3, [pc, #176]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a2b      	ldr	r2, [pc, #172]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001e5c:	f043 0320 	orr.w	r3, r3, #32
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b29      	ldr	r3, [pc, #164]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0320 	and.w	r3, r3, #32
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001e6e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001e72:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	2302      	movs	r3, #2
 8001e76:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001e80:	2305      	movs	r3, #5
 8001e82:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4826      	ldr	r0, [pc, #152]	; (8001f24 <HAL_SPI_MspInit+0x278>)
 8001e8c:	f000 fe46 	bl	8002b1c <HAL_GPIO_Init>
}
 8001e90:	e034      	b.n	8001efc <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI6)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a24      	ldr	r2, [pc, #144]	; (8001f28 <HAL_SPI_MspInit+0x27c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d12f      	bne.n	8001efc <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001e9c:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea0:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001ea2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ea6:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea8:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb4:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	4a13      	ldr	r2, [pc, #76]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_SPI_MspInit+0x25c>)
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ecc:	23e0      	movs	r3, #224	; 0xe0
 8001ece:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8001edc:	2308      	movs	r3, #8
 8001ede:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4811      	ldr	r0, [pc, #68]	; (8001f2c <HAL_SPI_MspInit+0x280>)
 8001ee8:	f000 fe18 	bl	8002b1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 6, 0);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2106      	movs	r1, #6
 8001ef0:	2056      	movs	r0, #86	; 0x56
 8001ef2:	f000 fc51 	bl	8002798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 8001ef6:	2056      	movs	r0, #86	; 0x56
 8001ef8:	f000 fc7a 	bl	80027f0 <HAL_NVIC_EnableIRQ>
}
 8001efc:	bf00      	nop
 8001efe:	3748      	adds	r7, #72	; 0x48
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40003800 	.word	0x40003800
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	40003c00 	.word	0x40003c00
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40013400 	.word	0x40013400
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40015000 	.word	0x40015000
 8001f24:	40021400 	.word	0x40021400
 8001f28:	40015400 	.word	0x40015400
 8001f2c:	40020000 	.word	0x40020000

08001f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f36:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <HAL_MspInit+0x44>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	4a0e      	ldr	r2, [pc, #56]	; (8001f74 <HAL_MspInit+0x44>)
 8001f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f40:	6413      	str	r3, [r2, #64]	; 0x40
 8001f42:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <HAL_MspInit+0x44>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HAL_MspInit+0x44>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	4a08      	ldr	r2, [pc, #32]	; (8001f74 <HAL_MspInit+0x44>)
 8001f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f58:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_MspInit+0x44>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40023800 	.word	0x40023800

08001f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f8a:	e7fe      	b.n	8001f8a <HardFault_Handler+0x4>

08001f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <MemManage_Handler+0x4>

08001f92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f96:	e7fe      	b.n	8001f96 <BusFault_Handler+0x4>

08001f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <UsageFault_Handler+0x4>

08001f9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001fcc:	2010      	movs	r0, #16
 8001fce:	f001 f9a1 	bl	8003314 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001fda:	2020      	movs	r0, #32
 8001fdc:	f001 f99a 	bl	8003314 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001fe0:	2040      	movs	r0, #64	; 0x40
 8001fe2:	f001 f997 	bl	8003314 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001fe6:	2080      	movs	r0, #128	; 0x80
 8001fe8:	f001 f994 	bl	8003314 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001fec:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ff0:	f001 f990 	bl	8003314 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001ff4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ff8:	f001 f98c 	bl	8003314 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002004:	4802      	ldr	r0, [pc, #8]	; (8002010 <SPI2_IRQHandler+0x10>)
 8002006:	f003 fec7 	bl	8005d98 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	200000c0 	.word	0x200000c0

08002014 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002018:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800201c:	f001 f97a 	bl	8003314 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002020:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002024:	f001 f976 	bl	8003314 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002028:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800202c:	f001 f972 	bl	8003314 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002030:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002034:	f001 f96e 	bl	8003314 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002038:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800203c:	f001 f96a 	bl	8003314 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}

08002044 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002048:	4802      	ldr	r0, [pc, #8]	; (8002054 <UART4_IRQHandler+0x10>)
 800204a:	f004 fb57 	bl	80066fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	200003b4 	.word	0x200003b4

08002058 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800205c:	4802      	ldr	r0, [pc, #8]	; (8002068 <UART5_IRQHandler+0x10>)
 800205e:	f004 fb4d 	bl	80066fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200002b4 	.word	0x200002b4

0800206c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <UART8_IRQHandler+0x10>)
 8002072:	f004 fb43 	bl	80066fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000334 	.word	0x20000334

08002080 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002084:	4802      	ldr	r0, [pc, #8]	; (8002090 <SPI4_IRQHandler+0x10>)
 8002086:	f003 fe87 	bl	8005d98 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000250 	.word	0x20000250

08002094 <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 8002098:	4802      	ldr	r0, [pc, #8]	; (80020a4 <SPI6_IRQHandler+0x10>)
 800209a:	f003 fe7d 	bl	8005d98 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000188 	.word	0x20000188

080020a8 <SysTick_Handler>:

/* USER CODE BEGIN 1 */
void SysTick_Handler(void) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80020ac:	f000 fa42 	bl	8002534 <HAL_IncTick>
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020bc:	4a14      	ldr	r2, [pc, #80]	; (8002110 <_sbrk+0x5c>)
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <_sbrk+0x60>)
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020c8:	4b13      	ldr	r3, [pc, #76]	; (8002118 <_sbrk+0x64>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d102      	bne.n	80020d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d0:	4b11      	ldr	r3, [pc, #68]	; (8002118 <_sbrk+0x64>)
 80020d2:	4a12      	ldr	r2, [pc, #72]	; (800211c <_sbrk+0x68>)
 80020d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <_sbrk+0x64>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d207      	bcs.n	80020f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e4:	f005 fa0e 	bl	8007504 <__errno>
 80020e8:	4602      	mov	r2, r0
 80020ea:	230c      	movs	r3, #12
 80020ec:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80020ee:	f04f 33ff 	mov.w	r3, #4294967295
 80020f2:	e009      	b.n	8002108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f4:	4b08      	ldr	r3, [pc, #32]	; (8002118 <_sbrk+0x64>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020fa:	4b07      	ldr	r3, [pc, #28]	; (8002118 <_sbrk+0x64>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	4a05      	ldr	r2, [pc, #20]	; (8002118 <_sbrk+0x64>)
 8002104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002106:	68fb      	ldr	r3, [r7, #12]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20080000 	.word	0x20080000
 8002114:	00000400 	.word	0x00000400
 8002118:	20000090 	.word	0x20000090
 800211c:	20000440 	.word	0x20000440

08002120 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <SystemInit+0x28>)
 8002126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212a:	4a07      	ldr	r2, [pc, #28]	; (8002148 <SystemInit+0x28>)
 800212c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002130:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <SystemInit+0x28>)
 8002136:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800213a:	609a      	str	r2, [r3, #8]
#endif
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart8;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8002150:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <MX_UART4_Init+0x58>)
 8002152:	4a15      	ldr	r2, [pc, #84]	; (80021a8 <MX_UART4_Init+0x5c>)
 8002154:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002156:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <MX_UART4_Init+0x58>)
 8002158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800215c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <MX_UART4_Init+0x58>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <MX_UART4_Init+0x58>)
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800216a:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <MX_UART4_Init+0x58>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <MX_UART4_Init+0x58>)
 8002172:	220c      	movs	r2, #12
 8002174:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <MX_UART4_Init+0x58>)
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <MX_UART4_Init+0x58>)
 800217e:	2200      	movs	r2, #0
 8002180:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <MX_UART4_Init+0x58>)
 8002184:	2200      	movs	r2, #0
 8002186:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <MX_UART4_Init+0x58>)
 800218a:	2200      	movs	r2, #0
 800218c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800218e:	4805      	ldr	r0, [pc, #20]	; (80021a4 <MX_UART4_Init+0x58>)
 8002190:	f004 f896 	bl	80062c0 <HAL_UART_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800219a:	f7ff fc3f 	bl	8001a1c <Error_Handler>
  }

}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200003b4 	.word	0x200003b4
 80021a8:	40004c00 	.word	0x40004c00

080021ac <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <MX_UART5_Init+0x58>)
 80021b2:	4a15      	ldr	r2, [pc, #84]	; (8002208 <MX_UART5_Init+0x5c>)
 80021b4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80021b6:	4b13      	ldr	r3, [pc, #76]	; (8002204 <MX_UART5_Init+0x58>)
 80021b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021bc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <MX_UART5_Init+0x58>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <MX_UART5_Init+0x58>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80021ca:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <MX_UART5_Init+0x58>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <MX_UART5_Init+0x58>)
 80021d2:	220c      	movs	r2, #12
 80021d4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d6:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <MX_UART5_Init+0x58>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80021dc:	4b09      	ldr	r3, [pc, #36]	; (8002204 <MX_UART5_Init+0x58>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021e2:	4b08      	ldr	r3, [pc, #32]	; (8002204 <MX_UART5_Init+0x58>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <MX_UART5_Init+0x58>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80021ee:	4805      	ldr	r0, [pc, #20]	; (8002204 <MX_UART5_Init+0x58>)
 80021f0:	f004 f866 	bl	80062c0 <HAL_UART_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80021fa:	f7ff fc0f 	bl	8001a1c <Error_Handler>
  }

}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200002b4 	.word	0x200002b4
 8002208:	40005000 	.word	0x40005000

0800220c <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <MX_UART8_Init+0x58>)
 8002212:	4a15      	ldr	r2, [pc, #84]	; (8002268 <MX_UART8_Init+0x5c>)
 8002214:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 30000;
 8002216:	4b13      	ldr	r3, [pc, #76]	; (8002264 <MX_UART8_Init+0x58>)
 8002218:	f247 5230 	movw	r2, #30000	; 0x7530
 800221c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800221e:	4b11      	ldr	r3, [pc, #68]	; (8002264 <MX_UART8_Init+0x58>)
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002224:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <MX_UART8_Init+0x58>)
 8002226:	2200      	movs	r2, #0
 8002228:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <MX_UART8_Init+0x58>)
 800222c:	2200      	movs	r2, #0
 800222e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <MX_UART8_Init+0x58>)
 8002232:	220c      	movs	r2, #12
 8002234:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002236:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <MX_UART8_Init+0x58>)
 8002238:	2200      	movs	r2, #0
 800223a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <MX_UART8_Init+0x58>)
 800223e:	2200      	movs	r2, #0
 8002240:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002242:	4b08      	ldr	r3, [pc, #32]	; (8002264 <MX_UART8_Init+0x58>)
 8002244:	2200      	movs	r2, #0
 8002246:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <MX_UART8_Init+0x58>)
 800224a:	2200      	movs	r2, #0
 800224c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800224e:	4805      	ldr	r0, [pc, #20]	; (8002264 <MX_UART8_Init+0x58>)
 8002250:	f004 f836 	bl	80062c0 <HAL_UART_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_UART8_Init+0x52>
  {
    Error_Handler();
 800225a:	f7ff fbdf 	bl	8001a1c <Error_Handler>
  }

}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000334 	.word	0x20000334
 8002268:	40007c00 	.word	0x40007c00

0800226c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b090      	sub	sp, #64	; 0x40
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a6e      	ldr	r2, [pc, #440]	; (8002444 <HAL_UART_MspInit+0x1d8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d14d      	bne.n	800232a <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800228e:	4b6e      	ldr	r3, [pc, #440]	; (8002448 <HAL_UART_MspInit+0x1dc>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	4a6d      	ldr	r2, [pc, #436]	; (8002448 <HAL_UART_MspInit+0x1dc>)
 8002294:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002298:	6413      	str	r3, [r2, #64]	; 0x40
 800229a:	4b6b      	ldr	r3, [pc, #428]	; (8002448 <HAL_UART_MspInit+0x1dc>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80022a4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80022a6:	4b68      	ldr	r3, [pc, #416]	; (8002448 <HAL_UART_MspInit+0x1dc>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a67      	ldr	r2, [pc, #412]	; (8002448 <HAL_UART_MspInit+0x1dc>)
 80022ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b65      	ldr	r3, [pc, #404]	; (8002448 <HAL_UART_MspInit+0x1dc>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022be:	4b62      	ldr	r3, [pc, #392]	; (8002448 <HAL_UART_MspInit+0x1dc>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a61      	ldr	r2, [pc, #388]	; (8002448 <HAL_UART_MspInit+0x1dc>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b5f      	ldr	r3, [pc, #380]	; (8002448 <HAL_UART_MspInit+0x1dc>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	623b      	str	r3, [r7, #32]
 80022d4:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PI9     ------> UART4_RX
    PA0/WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = DAPI_RX_Pin;
 80022d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022dc:	2302      	movs	r3, #2
 80022de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e4:	2303      	movs	r3, #3
 80022e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80022e8:	2308      	movs	r3, #8
 80022ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(DAPI_RX_GPIO_Port, &GPIO_InitStruct);
 80022ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022f0:	4619      	mov	r1, r3
 80022f2:	4856      	ldr	r0, [pc, #344]	; (800244c <HAL_UART_MspInit+0x1e0>)
 80022f4:	f000 fc12 	bl	8002b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DAPI_TX_Pin;
 80022f8:	2301      	movs	r3, #1
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002308:	2308      	movs	r3, #8
 800230a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(DAPI_TX_GPIO_Port, &GPIO_InitStruct);
 800230c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002310:	4619      	mov	r1, r3
 8002312:	484f      	ldr	r0, [pc, #316]	; (8002450 <HAL_UART_MspInit+0x1e4>)
 8002314:	f000 fc02 	bl	8002b1c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 8002318:	2200      	movs	r2, #0
 800231a:	2106      	movs	r1, #6
 800231c:	2034      	movs	r0, #52	; 0x34
 800231e:	f000 fa3b 	bl	8002798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002322:	2034      	movs	r0, #52	; 0x34
 8002324:	f000 fa64 	bl	80027f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 8002328:	e087      	b.n	800243a <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==UART5)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a49      	ldr	r2, [pc, #292]	; (8002454 <HAL_UART_MspInit+0x1e8>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d14d      	bne.n	80023d0 <HAL_UART_MspInit+0x164>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002334:	4b44      	ldr	r3, [pc, #272]	; (8002448 <HAL_UART_MspInit+0x1dc>)
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	4a43      	ldr	r2, [pc, #268]	; (8002448 <HAL_UART_MspInit+0x1dc>)
 800233a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800233e:	6413      	str	r3, [r2, #64]	; 0x40
 8002340:	4b41      	ldr	r3, [pc, #260]	; (8002448 <HAL_UART_MspInit+0x1dc>)
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800234c:	4b3e      	ldr	r3, [pc, #248]	; (8002448 <HAL_UART_MspInit+0x1dc>)
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	4a3d      	ldr	r2, [pc, #244]	; (8002448 <HAL_UART_MspInit+0x1dc>)
 8002352:	f043 0304 	orr.w	r3, r3, #4
 8002356:	6313      	str	r3, [r2, #48]	; 0x30
 8002358:	4b3b      	ldr	r3, [pc, #236]	; (8002448 <HAL_UART_MspInit+0x1dc>)
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	61bb      	str	r3, [r7, #24]
 8002362:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002364:	4b38      	ldr	r3, [pc, #224]	; (8002448 <HAL_UART_MspInit+0x1dc>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	4a37      	ldr	r2, [pc, #220]	; (8002448 <HAL_UART_MspInit+0x1dc>)
 800236a:	f043 0308 	orr.w	r3, r3, #8
 800236e:	6313      	str	r3, [r2, #48]	; 0x30
 8002370:	4b35      	ldr	r3, [pc, #212]	; (8002448 <HAL_UART_MspInit+0x1dc>)
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = INTERSPU_TX_Pin;
 800237c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002380:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002382:	2302      	movs	r3, #2
 8002384:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238a:	2303      	movs	r3, #3
 800238c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800238e:	2308      	movs	r3, #8
 8002390:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(INTERSPU_TX_GPIO_Port, &GPIO_InitStruct);
 8002392:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002396:	4619      	mov	r1, r3
 8002398:	482f      	ldr	r0, [pc, #188]	; (8002458 <HAL_UART_MspInit+0x1ec>)
 800239a:	f000 fbbf 	bl	8002b1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = INTERSPU_RX_Pin;
 800239e:	2304      	movs	r3, #4
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a2:	2302      	movs	r3, #2
 80023a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023aa:	2303      	movs	r3, #3
 80023ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80023ae:	2308      	movs	r3, #8
 80023b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(INTERSPU_RX_GPIO_Port, &GPIO_InitStruct);
 80023b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023b6:	4619      	mov	r1, r3
 80023b8:	4828      	ldr	r0, [pc, #160]	; (800245c <HAL_UART_MspInit+0x1f0>)
 80023ba:	f000 fbaf 	bl	8002b1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 6, 0);
 80023be:	2200      	movs	r2, #0
 80023c0:	2106      	movs	r1, #6
 80023c2:	2035      	movs	r0, #53	; 0x35
 80023c4:	f000 f9e8 	bl	8002798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80023c8:	2035      	movs	r0, #53	; 0x35
 80023ca:	f000 fa11 	bl	80027f0 <HAL_NVIC_EnableIRQ>
}
 80023ce:	e034      	b.n	800243a <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==UART8)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a22      	ldr	r2, [pc, #136]	; (8002460 <HAL_UART_MspInit+0x1f4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d12f      	bne.n	800243a <HAL_UART_MspInit+0x1ce>
    __HAL_RCC_UART8_CLK_ENABLE();
 80023da:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <HAL_UART_MspInit+0x1dc>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	4a1a      	ldr	r2, [pc, #104]	; (8002448 <HAL_UART_MspInit+0x1dc>)
 80023e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023e4:	6413      	str	r3, [r2, #64]	; 0x40
 80023e6:	4b18      	ldr	r3, [pc, #96]	; (8002448 <HAL_UART_MspInit+0x1dc>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023f2:	4b15      	ldr	r3, [pc, #84]	; (8002448 <HAL_UART_MspInit+0x1dc>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4a14      	ldr	r2, [pc, #80]	; (8002448 <HAL_UART_MspInit+0x1dc>)
 80023f8:	f043 0310 	orr.w	r3, r3, #16
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b12      	ldr	r3, [pc, #72]	; (8002448 <HAL_UART_MspInit+0x1dc>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EXP_IN_Pin|EXP_OUT_Pin;
 800240a:	2303      	movs	r3, #3
 800240c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240e:	2302      	movs	r3, #2
 8002410:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002416:	2303      	movs	r3, #3
 8002418:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800241a:	2308      	movs	r3, #8
 800241c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800241e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002422:	4619      	mov	r1, r3
 8002424:	480f      	ldr	r0, [pc, #60]	; (8002464 <HAL_UART_MspInit+0x1f8>)
 8002426:	f000 fb79 	bl	8002b1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 6, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	2106      	movs	r1, #6
 800242e:	2053      	movs	r0, #83	; 0x53
 8002430:	f000 f9b2 	bl	8002798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002434:	2053      	movs	r0, #83	; 0x53
 8002436:	f000 f9db 	bl	80027f0 <HAL_NVIC_EnableIRQ>
}
 800243a:	bf00      	nop
 800243c:	3740      	adds	r7, #64	; 0x40
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40004c00 	.word	0x40004c00
 8002448:	40023800 	.word	0x40023800
 800244c:	40022000 	.word	0x40022000
 8002450:	40020000 	.word	0x40020000
 8002454:	40005000 	.word	0x40005000
 8002458:	40020800 	.word	0x40020800
 800245c:	40020c00 	.word	0x40020c00
 8002460:	40007c00 	.word	0x40007c00
 8002464:	40021000 	.word	0x40021000

08002468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002468:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800246c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800246e:	e003      	b.n	8002478 <LoopCopyDataInit>

08002470 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002472:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002474:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002476:	3104      	adds	r1, #4

08002478 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002478:	480b      	ldr	r0, [pc, #44]	; (80024a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800247a:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800247c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800247e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002480:	d3f6      	bcc.n	8002470 <CopyDataInit>
  ldr  r2, =_sbss
 8002482:	4a0b      	ldr	r2, [pc, #44]	; (80024b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002484:	e002      	b.n	800248c <LoopFillZerobss>

08002486 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002486:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002488:	f842 3b04 	str.w	r3, [r2], #4

0800248c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800248c:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800248e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002490:	d3f9      	bcc.n	8002486 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002492:	f7ff fe45 	bl	8002120 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002496:	f005 f83b 	bl	8007510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800249a:	f7fe fce3 	bl	8000e64 <main>
  bx  lr    
 800249e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024a0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80024a4:	08007fe4 	.word	0x08007fe4
  ldr  r0, =_sdata
 80024a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80024ac:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80024b0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80024b4:	2000043c 	.word	0x2000043c

080024b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024b8:	e7fe      	b.n	80024b8 <ADC_IRQHandler>

080024ba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024be:	2003      	movs	r0, #3
 80024c0:	f000 f94a 	bl	8002758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024c4:	2000      	movs	r0, #0
 80024c6:	f000 f805 	bl	80024d4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80024ca:	f7ff fd31 	bl	8001f30 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <HAL_InitTick+0x54>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_InitTick+0x58>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	4619      	mov	r1, r3
 80024e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 f994 	bl	8002820 <HAL_SYSTICK_Config>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e00e      	b.n	8002520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b0f      	cmp	r3, #15
 8002506:	d80a      	bhi.n	800251e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002508:	2200      	movs	r2, #0
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	f04f 30ff 	mov.w	r0, #4294967295
 8002510:	f000 f942 	bl	8002798 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002514:	4a06      	ldr	r2, [pc, #24]	; (8002530 <HAL_InitTick+0x5c>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	e000      	b.n	8002520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000000 	.word	0x20000000
 800252c:	20000008 	.word	0x20000008
 8002530:	20000004 	.word	0x20000004

08002534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_IncTick+0x20>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_IncTick+0x24>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4413      	add	r3, r2
 8002544:	4a04      	ldr	r2, [pc, #16]	; (8002558 <HAL_IncTick+0x24>)
 8002546:	6013      	str	r3, [r2, #0]
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20000008 	.word	0x20000008
 8002558:	20000434 	.word	0x20000434

0800255c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return uwTick;
 8002560:	4b03      	ldr	r3, [pc, #12]	; (8002570 <HAL_GetTick+0x14>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000434 	.word	0x20000434

08002574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800257c:	f7ff ffee 	bl	800255c <HAL_GetTick>
 8002580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258c:	d005      	beq.n	800259a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800258e:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <HAL_Delay+0x40>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4413      	add	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800259a:	bf00      	nop
 800259c:	f7ff ffde 	bl	800255c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d8f7      	bhi.n	800259c <HAL_Delay+0x28>
  {
  }
}
 80025ac:	bf00      	nop
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000008 	.word	0x20000008

080025b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <__NVIC_SetPriorityGrouping+0x40>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025d4:	4013      	ands	r3, r2
 80025d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <__NVIC_SetPriorityGrouping+0x44>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025e6:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <__NVIC_SetPriorityGrouping+0x40>)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	60d3      	str	r3, [r2, #12]
}
 80025ec:	bf00      	nop
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	e000ed00 	.word	0xe000ed00
 80025fc:	05fa0000 	.word	0x05fa0000

08002600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002604:	4b04      	ldr	r3, [pc, #16]	; (8002618 <__NVIC_GetPriorityGrouping+0x18>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	0a1b      	lsrs	r3, r3, #8
 800260a:	f003 0307 	and.w	r3, r3, #7
}
 800260e:	4618      	mov	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	2b00      	cmp	r3, #0
 800262c:	db0b      	blt.n	8002646 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	f003 021f 	and.w	r2, r3, #31
 8002634:	4907      	ldr	r1, [pc, #28]	; (8002654 <__NVIC_EnableIRQ+0x38>)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	2001      	movs	r0, #1
 800263e:	fa00 f202 	lsl.w	r2, r0, r2
 8002642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	e000e100 	.word	0xe000e100

08002658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	6039      	str	r1, [r7, #0]
 8002662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002668:	2b00      	cmp	r3, #0
 800266a:	db0a      	blt.n	8002682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	b2da      	uxtb	r2, r3
 8002670:	490c      	ldr	r1, [pc, #48]	; (80026a4 <__NVIC_SetPriority+0x4c>)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	0112      	lsls	r2, r2, #4
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	440b      	add	r3, r1
 800267c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002680:	e00a      	b.n	8002698 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	b2da      	uxtb	r2, r3
 8002686:	4908      	ldr	r1, [pc, #32]	; (80026a8 <__NVIC_SetPriority+0x50>)
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	3b04      	subs	r3, #4
 8002690:	0112      	lsls	r2, r2, #4
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	440b      	add	r3, r1
 8002696:	761a      	strb	r2, [r3, #24]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	e000e100 	.word	0xe000e100
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b089      	sub	sp, #36	; 0x24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f1c3 0307 	rsb	r3, r3, #7
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	bf28      	it	cs
 80026ca:	2304      	movcs	r3, #4
 80026cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3304      	adds	r3, #4
 80026d2:	2b06      	cmp	r3, #6
 80026d4:	d902      	bls.n	80026dc <NVIC_EncodePriority+0x30>
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3b03      	subs	r3, #3
 80026da:	e000      	b.n	80026de <NVIC_EncodePriority+0x32>
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e0:	f04f 32ff 	mov.w	r2, #4294967295
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43da      	mvns	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	401a      	ands	r2, r3
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f4:	f04f 31ff 	mov.w	r1, #4294967295
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	fa01 f303 	lsl.w	r3, r1, r3
 80026fe:	43d9      	mvns	r1, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002704:	4313      	orrs	r3, r2
         );
}
 8002706:	4618      	mov	r0, r3
 8002708:	3724      	adds	r7, #36	; 0x24
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3b01      	subs	r3, #1
 8002720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002724:	d301      	bcc.n	800272a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002726:	2301      	movs	r3, #1
 8002728:	e00f      	b.n	800274a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800272a:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <SysTick_Config+0x40>)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3b01      	subs	r3, #1
 8002730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002732:	210f      	movs	r1, #15
 8002734:	f04f 30ff 	mov.w	r0, #4294967295
 8002738:	f7ff ff8e 	bl	8002658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <SysTick_Config+0x40>)
 800273e:	2200      	movs	r2, #0
 8002740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002742:	4b04      	ldr	r3, [pc, #16]	; (8002754 <SysTick_Config+0x40>)
 8002744:	2207      	movs	r2, #7
 8002746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	e000e010 	.word	0xe000e010

08002758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b07      	cmp	r3, #7
 8002764:	d00f      	beq.n	8002786 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b06      	cmp	r3, #6
 800276a:	d00c      	beq.n	8002786 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b05      	cmp	r3, #5
 8002770:	d009      	beq.n	8002786 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b04      	cmp	r3, #4
 8002776:	d006      	beq.n	8002786 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b03      	cmp	r3, #3
 800277c:	d003      	beq.n	8002786 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800277e:	2192      	movs	r1, #146	; 0x92
 8002780:	4804      	ldr	r0, [pc, #16]	; (8002794 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002782:	f7ff f952 	bl	8001a2a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff ff16 	bl	80025b8 <__NVIC_SetPriorityGrouping>
}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	08007db4 	.word	0x08007db4

08002798 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b0f      	cmp	r3, #15
 80027ae:	d903      	bls.n	80027b8 <HAL_NVIC_SetPriority+0x20>
 80027b0:	21aa      	movs	r1, #170	; 0xaa
 80027b2:	480e      	ldr	r0, [pc, #56]	; (80027ec <HAL_NVIC_SetPriority+0x54>)
 80027b4:	f7ff f939 	bl	8001a2a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b0f      	cmp	r3, #15
 80027bc:	d903      	bls.n	80027c6 <HAL_NVIC_SetPriority+0x2e>
 80027be:	21ab      	movs	r1, #171	; 0xab
 80027c0:	480a      	ldr	r0, [pc, #40]	; (80027ec <HAL_NVIC_SetPriority+0x54>)
 80027c2:	f7ff f932 	bl	8001a2a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027c6:	f7ff ff1b 	bl	8002600 <__NVIC_GetPriorityGrouping>
 80027ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	68b9      	ldr	r1, [r7, #8]
 80027d0:	6978      	ldr	r0, [r7, #20]
 80027d2:	f7ff ff6b 	bl	80026ac <NVIC_EncodePriority>
 80027d6:	4602      	mov	r2, r0
 80027d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff ff3a 	bl	8002658 <__NVIC_SetPriority>
}
 80027e4:	bf00      	nop
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	08007db4 	.word	0x08007db4

080027f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	da03      	bge.n	800280a <HAL_NVIC_EnableIRQ+0x1a>
 8002802:	21be      	movs	r1, #190	; 0xbe
 8002804:	4805      	ldr	r0, [pc, #20]	; (800281c <HAL_NVIC_EnableIRQ+0x2c>)
 8002806:	f7ff f910 	bl	8001a2a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff ff04 	bl	800261c <__NVIC_EnableIRQ>
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	08007db4 	.word	0x08007db4

08002820 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff ff73 	bl	8002714 <SysTick_Config>
 800282e:	4603      	mov	r3, r0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e0a5      	b.n	8002996 <HAL_CRC_Init+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a54      	ldr	r2, [pc, #336]	; (80029a0 <HAL_CRC_Init+0x168>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d003      	beq.n	800285c <HAL_CRC_Init+0x24>
 8002854:	2170      	movs	r1, #112	; 0x70
 8002856:	4853      	ldr	r0, [pc, #332]	; (80029a4 <HAL_CRC_Init+0x16c>)
 8002858:	f7ff f8e7 	bl	8001a2a <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	7f5b      	ldrb	r3, [r3, #29]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d105      	bne.n	8002872 <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7fd ff81 	bl	8000774 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2202      	movs	r2, #2
 8002876:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	791b      	ldrb	r3, [r3, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d007      	beq.n	8002890 <HAL_CRC_Init+0x58>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	791b      	ldrb	r3, [r3, #4]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d003      	beq.n	8002890 <HAL_CRC_Init+0x58>
 8002888:	217e      	movs	r1, #126	; 0x7e
 800288a:	4846      	ldr	r0, [pc, #280]	; (80029a4 <HAL_CRC_Init+0x16c>)
 800288c:	f7ff f8cd 	bl	8001a2a <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	791b      	ldrb	r3, [r3, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10c      	bne.n	80028b2 <HAL_CRC_Init+0x7a>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a42      	ldr	r2, [pc, #264]	; (80029a8 <HAL_CRC_Init+0x170>)
 800289e:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0218 	bic.w	r2, r2, #24
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	e00c      	b.n	80028cc <HAL_CRC_Init+0x94>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6899      	ldr	r1, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	461a      	mov	r2, r3
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f875 	bl	80029ac <HAL_CRCEx_Polynomial_Set>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_CRC_Init+0x94>
    {
      return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e064      	b.n	8002996 <HAL_CRC_Init+0x15e>
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	795b      	ldrb	r3, [r3, #5]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d007      	beq.n	80028e4 <HAL_CRC_Init+0xac>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	795b      	ldrb	r3, [r3, #5]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d003      	beq.n	80028e4 <HAL_CRC_Init+0xac>
 80028dc:	2190      	movs	r1, #144	; 0x90
 80028de:	4831      	ldr	r0, [pc, #196]	; (80029a4 <HAL_CRC_Init+0x16c>)
 80028e0:	f7ff f8a3 	bl	8001a2a <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	795b      	ldrb	r3, [r3, #5]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d105      	bne.n	80028f8 <HAL_CRC_Init+0xc0>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f04f 32ff 	mov.w	r2, #4294967295
 80028f4:	611a      	str	r2, [r3, #16]
 80028f6:	e004      	b.n	8002902 <HAL_CRC_Init+0xca>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6912      	ldr	r2, [r2, #16]
 8002900:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00f      	beq.n	800292a <HAL_CRC_Init+0xf2>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	2b20      	cmp	r3, #32
 8002910:	d00b      	beq.n	800292a <HAL_CRC_Init+0xf2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	2b40      	cmp	r3, #64	; 0x40
 8002918:	d007      	beq.n	800292a <HAL_CRC_Init+0xf2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	2b60      	cmp	r3, #96	; 0x60
 8002920:	d003      	beq.n	800292a <HAL_CRC_Init+0xf2>
 8002922:	219c      	movs	r1, #156	; 0x9c
 8002924:	481f      	ldr	r0, [pc, #124]	; (80029a4 <HAL_CRC_Init+0x16c>)
 8002926:	f7ff f880 	bl	8001a2a <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d007      	beq.n	8002958 <HAL_CRC_Init+0x120>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	2b80      	cmp	r3, #128	; 0x80
 800294e:	d003      	beq.n	8002958 <HAL_CRC_Init+0x120>
 8002950:	21a0      	movs	r1, #160	; 0xa0
 8002952:	4814      	ldr	r0, [pc, #80]	; (80029a4 <HAL_CRC_Init+0x16c>)
 8002954:	f7ff f869 	bl	8001a2a <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699a      	ldr	r2, [r3, #24]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	609a      	str	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d00b      	beq.n	800298e <HAL_CRC_Init+0x156>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d007      	beq.n	800298e <HAL_CRC_Init+0x156>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	2b03      	cmp	r3, #3
 8002984:	d003      	beq.n	800298e <HAL_CRC_Init+0x156>
 8002986:	21a5      	movs	r1, #165	; 0xa5
 8002988:	4806      	ldr	r0, [pc, #24]	; (80029a4 <HAL_CRC_Init+0x16c>)
 800298a:	f7ff f84e 	bl	8001a2a <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40023000 	.word	0x40023000
 80029a4:	08007df0 	.word	0x08007df0
 80029a8:	04c11db7 	.word	0x04c11db7

080029ac <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80029bc:	231f      	movs	r3, #31
 80029be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00c      	beq.n	80029e0 <HAL_CRCEx_Polynomial_Set+0x34>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d009      	beq.n	80029e0 <HAL_CRCEx_Polynomial_Set+0x34>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b10      	cmp	r3, #16
 80029d0:	d006      	beq.n	80029e0 <HAL_CRCEx_Polynomial_Set+0x34>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b18      	cmp	r3, #24
 80029d6:	d003      	beq.n	80029e0 <HAL_CRCEx_Polynomial_Set+0x34>
 80029d8:	215f      	movs	r1, #95	; 0x5f
 80029da:	483e      	ldr	r0, [pc, #248]	; (8002ad4 <HAL_CRCEx_Polynomial_Set+0x128>)
 80029dc:	f7ff f825 	bl	8001a2a <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80029e0:	bf00      	nop
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1e5a      	subs	r2, r3, #1
 80029e6:	613a      	str	r2, [r7, #16]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d009      	beq.n	8002a00 <HAL_CRCEx_Polynomial_Set+0x54>
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	fa22 f303 	lsr.w	r3, r2, r3
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_CRCEx_Polynomial_Set+0x36>
  {
  }

  switch (PolyLength)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b18      	cmp	r3, #24
 8002a04:	d846      	bhi.n	8002a94 <HAL_CRCEx_Polynomial_Set+0xe8>
 8002a06:	a201      	add	r2, pc, #4	; (adr r2, 8002a0c <HAL_CRCEx_Polynomial_Set+0x60>)
 8002a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0c:	08002a9b 	.word	0x08002a9b
 8002a10:	08002a95 	.word	0x08002a95
 8002a14:	08002a95 	.word	0x08002a95
 8002a18:	08002a95 	.word	0x08002a95
 8002a1c:	08002a95 	.word	0x08002a95
 8002a20:	08002a95 	.word	0x08002a95
 8002a24:	08002a95 	.word	0x08002a95
 8002a28:	08002a95 	.word	0x08002a95
 8002a2c:	08002a89 	.word	0x08002a89
 8002a30:	08002a95 	.word	0x08002a95
 8002a34:	08002a95 	.word	0x08002a95
 8002a38:	08002a95 	.word	0x08002a95
 8002a3c:	08002a95 	.word	0x08002a95
 8002a40:	08002a95 	.word	0x08002a95
 8002a44:	08002a95 	.word	0x08002a95
 8002a48:	08002a95 	.word	0x08002a95
 8002a4c:	08002a7d 	.word	0x08002a7d
 8002a50:	08002a95 	.word	0x08002a95
 8002a54:	08002a95 	.word	0x08002a95
 8002a58:	08002a95 	.word	0x08002a95
 8002a5c:	08002a95 	.word	0x08002a95
 8002a60:	08002a95 	.word	0x08002a95
 8002a64:	08002a95 	.word	0x08002a95
 8002a68:	08002a95 	.word	0x08002a95
 8002a6c:	08002a71 	.word	0x08002a71
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	2b06      	cmp	r3, #6
 8002a74:	d913      	bls.n	8002a9e <HAL_CRCEx_Polynomial_Set+0xf2>
      {
        status =   HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002a7a:	e010      	b.n	8002a9e <HAL_CRCEx_Polynomial_Set+0xf2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	2b07      	cmp	r3, #7
 8002a80:	d90f      	bls.n	8002aa2 <HAL_CRCEx_Polynomial_Set+0xf6>
      {
        status =   HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002a86:	e00c      	b.n	8002aa2 <HAL_CRCEx_Polynomial_Set+0xf6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	2b0f      	cmp	r3, #15
 8002a8c:	d90b      	bls.n	8002aa6 <HAL_CRCEx_Polynomial_Set+0xfa>
      {
        status =   HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002a92:	e008      	b.n	8002aa6 <HAL_CRCEx_Polynomial_Set+0xfa>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	75fb      	strb	r3, [r7, #23]
      break;
 8002a98:	e006      	b.n	8002aa8 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8002a9a:	bf00      	nop
 8002a9c:	e004      	b.n	8002aa8 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8002a9e:	bf00      	nop
 8002aa0:	e002      	b.n	8002aa8 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8002aa2:	bf00      	nop
 8002aa4:	e000      	b.n	8002aa8 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8002aa6:	bf00      	nop
  }
  if (status == HAL_OK)
 8002aa8:	7dfb      	ldrb	r3, [r7, #23]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10d      	bne.n	8002aca <HAL_CRCEx_Polynomial_Set+0x11e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f023 0118 	bic.w	r1, r3, #24
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	08007e28 	.word	0x08007e28

08002ad8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d004      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2280      	movs	r2, #128	; 0x80
 8002af0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e00c      	b.n	8002b10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2205      	movs	r2, #5
 8002afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0201 	bic.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a42      	ldr	r2, [pc, #264]	; (8002c44 <HAL_GPIO_Init+0x128>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d02b      	beq.n	8002b96 <HAL_GPIO_Init+0x7a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a41      	ldr	r2, [pc, #260]	; (8002c48 <HAL_GPIO_Init+0x12c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d027      	beq.n	8002b96 <HAL_GPIO_Init+0x7a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a40      	ldr	r2, [pc, #256]	; (8002c4c <HAL_GPIO_Init+0x130>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d023      	beq.n	8002b96 <HAL_GPIO_Init+0x7a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a3f      	ldr	r2, [pc, #252]	; (8002c50 <HAL_GPIO_Init+0x134>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d01f      	beq.n	8002b96 <HAL_GPIO_Init+0x7a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a3e      	ldr	r2, [pc, #248]	; (8002c54 <HAL_GPIO_Init+0x138>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d01b      	beq.n	8002b96 <HAL_GPIO_Init+0x7a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a3d      	ldr	r2, [pc, #244]	; (8002c58 <HAL_GPIO_Init+0x13c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d017      	beq.n	8002b96 <HAL_GPIO_Init+0x7a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a3c      	ldr	r2, [pc, #240]	; (8002c5c <HAL_GPIO_Init+0x140>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d013      	beq.n	8002b96 <HAL_GPIO_Init+0x7a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a3b      	ldr	r2, [pc, #236]	; (8002c60 <HAL_GPIO_Init+0x144>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00f      	beq.n	8002b96 <HAL_GPIO_Init+0x7a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a3a      	ldr	r2, [pc, #232]	; (8002c64 <HAL_GPIO_Init+0x148>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00b      	beq.n	8002b96 <HAL_GPIO_Init+0x7a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a39      	ldr	r2, [pc, #228]	; (8002c68 <HAL_GPIO_Init+0x14c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d007      	beq.n	8002b96 <HAL_GPIO_Init+0x7a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a38      	ldr	r2, [pc, #224]	; (8002c6c <HAL_GPIO_Init+0x150>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_Init+0x7a>
 8002b8e:	21b1      	movs	r1, #177	; 0xb1
 8002b90:	4837      	ldr	r0, [pc, #220]	; (8002c70 <HAL_GPIO_Init+0x154>)
 8002b92:	f7fe ff4a 	bl	8001a2a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d103      	bne.n	8002ba8 <HAL_GPIO_Init+0x8c>
 8002ba0:	21b2      	movs	r1, #178	; 0xb2
 8002ba2:	4833      	ldr	r0, [pc, #204]	; (8002c70 <HAL_GPIO_Init+0x154>)
 8002ba4:	f7fe ff41 	bl	8001a2a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d035      	beq.n	8002c1c <HAL_GPIO_Init+0x100>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d031      	beq.n	8002c1c <HAL_GPIO_Init+0x100>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b11      	cmp	r3, #17
 8002bbe:	d02d      	beq.n	8002c1c <HAL_GPIO_Init+0x100>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d029      	beq.n	8002c1c <HAL_GPIO_Init+0x100>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b12      	cmp	r3, #18
 8002bce:	d025      	beq.n	8002c1c <HAL_GPIO_Init+0x100>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	4a27      	ldr	r2, [pc, #156]	; (8002c74 <HAL_GPIO_Init+0x158>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d020      	beq.n	8002c1c <HAL_GPIO_Init+0x100>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	4a26      	ldr	r2, [pc, #152]	; (8002c78 <HAL_GPIO_Init+0x15c>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d01b      	beq.n	8002c1c <HAL_GPIO_Init+0x100>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	4a24      	ldr	r2, [pc, #144]	; (8002c7c <HAL_GPIO_Init+0x160>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d016      	beq.n	8002c1c <HAL_GPIO_Init+0x100>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4a23      	ldr	r2, [pc, #140]	; (8002c80 <HAL_GPIO_Init+0x164>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d011      	beq.n	8002c1c <HAL_GPIO_Init+0x100>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	4a21      	ldr	r2, [pc, #132]	; (8002c84 <HAL_GPIO_Init+0x168>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00c      	beq.n	8002c1c <HAL_GPIO_Init+0x100>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4a20      	ldr	r2, [pc, #128]	; (8002c88 <HAL_GPIO_Init+0x16c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d007      	beq.n	8002c1c <HAL_GPIO_Init+0x100>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d003      	beq.n	8002c1c <HAL_GPIO_Init+0x100>
 8002c14:	21b3      	movs	r1, #179	; 0xb3
 8002c16:	4816      	ldr	r0, [pc, #88]	; (8002c70 <HAL_GPIO_Init+0x154>)
 8002c18:	f7fe ff07 	bl	8001a2a <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00b      	beq.n	8002c3c <HAL_GPIO_Init+0x120>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d007      	beq.n	8002c3c <HAL_GPIO_Init+0x120>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d003      	beq.n	8002c3c <HAL_GPIO_Init+0x120>
 8002c34:	21b4      	movs	r1, #180	; 0xb4
 8002c36:	480e      	ldr	r0, [pc, #56]	; (8002c70 <HAL_GPIO_Init+0x154>)
 8002c38:	f7fe fef7 	bl	8001a2a <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	e2d6      	b.n	80031f0 <HAL_GPIO_Init+0x6d4>
 8002c42:	bf00      	nop
 8002c44:	40020000 	.word	0x40020000
 8002c48:	40020400 	.word	0x40020400
 8002c4c:	40020800 	.word	0x40020800
 8002c50:	40020c00 	.word	0x40020c00
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40021400 	.word	0x40021400
 8002c5c:	40021800 	.word	0x40021800
 8002c60:	40021c00 	.word	0x40021c00
 8002c64:	40022000 	.word	0x40022000
 8002c68:	40022400 	.word	0x40022400
 8002c6c:	40022800 	.word	0x40022800
 8002c70:	08007e64 	.word	0x08007e64
 8002c74:	10110000 	.word	0x10110000
 8002c78:	10210000 	.word	0x10210000
 8002c7c:	10310000 	.word	0x10310000
 8002c80:	10120000 	.word	0x10120000
 8002c84:	10220000 	.word	0x10220000
 8002c88:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	f040 82a0 	bne.w	80031ea <HAL_GPIO_Init+0x6ce>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d00b      	beq.n	8002cca <HAL_GPIO_Init+0x1ae>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d007      	beq.n	8002cca <HAL_GPIO_Init+0x1ae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cbe:	2b11      	cmp	r3, #17
 8002cc0:	d003      	beq.n	8002cca <HAL_GPIO_Init+0x1ae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b12      	cmp	r3, #18
 8002cc8:	d144      	bne.n	8002d54 <HAL_GPIO_Init+0x238>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00f      	beq.n	8002cf2 <HAL_GPIO_Init+0x1d6>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d00b      	beq.n	8002cf2 <HAL_GPIO_Init+0x1d6>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d007      	beq.n	8002cf2 <HAL_GPIO_Init+0x1d6>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d003      	beq.n	8002cf2 <HAL_GPIO_Init+0x1d6>
 8002cea:	21c6      	movs	r1, #198	; 0xc6
 8002cec:	482a      	ldr	r0, [pc, #168]	; (8002d98 <HAL_GPIO_Init+0x27c>)
 8002cee:	f7fe fe9c 	bl	8001a2a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43db      	mvns	r3, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4013      	ands	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d28:	2201      	movs	r2, #1
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	f003 0201 	and.w	r2, r3, #1
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	2203      	movs	r2, #3
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d007      	beq.n	8002d9c <HAL_GPIO_Init+0x280>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b12      	cmp	r3, #18
 8002d92:	f040 814b 	bne.w	800302c <HAL_GPIO_Init+0x510>
 8002d96:	e001      	b.n	8002d9c <HAL_GPIO_Init+0x280>
 8002d98:	08007e64 	.word	0x08007e64
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 811f 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	f000 811a 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 8115 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 8110 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 810b 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	f000 8106 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	f000 8101 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	f000 80fc 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	f000 80f7 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	f000 80f2 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	f000 80ed 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	f000 80e8 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	f000 80e3 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	f000 80de 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	f000 80d9 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	f000 80d4 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	f000 80cf 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	f000 80ca 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	f000 80c5 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	f000 80c0 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b05      	cmp	r3, #5
 8002e6a:	f000 80bb 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	2b05      	cmp	r3, #5
 8002e74:	f000 80b6 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	2b05      	cmp	r3, #5
 8002e7e:	f000 80b1 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b05      	cmp	r3, #5
 8002e88:	f000 80ac 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	2b05      	cmp	r3, #5
 8002e92:	f000 80a7 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	2b05      	cmp	r3, #5
 8002e9c:	f000 80a2 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	2b06      	cmp	r3, #6
 8002ea6:	f000 809d 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	2b06      	cmp	r3, #6
 8002eb0:	f000 8098 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	2b07      	cmp	r3, #7
 8002eba:	f000 8093 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	2b07      	cmp	r3, #7
 8002ec4:	f000 808e 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	2b07      	cmp	r3, #7
 8002ece:	f000 8089 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	2b07      	cmp	r3, #7
 8002ed8:	f000 8084 	beq.w	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	2b07      	cmp	r3, #7
 8002ee2:	d07f      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	2b07      	cmp	r3, #7
 8002eea:	d07b      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	2b07      	cmp	r3, #7
 8002ef2:	d077      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d073      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d06f      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d06b      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d067      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d063      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d05f      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d05b      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	2b09      	cmp	r3, #9
 8002f32:	d057      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	2b09      	cmp	r3, #9
 8002f3a:	d053      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	2b09      	cmp	r3, #9
 8002f42:	d04f      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	2b09      	cmp	r3, #9
 8002f4a:	d04b      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	2b09      	cmp	r3, #9
 8002f52:	d047      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2b09      	cmp	r3, #9
 8002f5a:	d043      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	2b09      	cmp	r3, #9
 8002f62:	d03f      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	2b0a      	cmp	r3, #10
 8002f6a:	d03b      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	2b0a      	cmp	r3, #10
 8002f72:	d037      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	2b0a      	cmp	r3, #10
 8002f7a:	d033      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	2b0a      	cmp	r3, #10
 8002f82:	d02f      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	2b0b      	cmp	r3, #11
 8002f8a:	d02b      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	2b0a      	cmp	r3, #10
 8002f92:	d027      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	2b0b      	cmp	r3, #11
 8002f9a:	d023      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	2b0b      	cmp	r3, #11
 8002fa2:	d01f      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	2b0c      	cmp	r3, #12
 8002faa:	d01b      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	2b0c      	cmp	r3, #12
 8002fb2:	d017      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	2b0c      	cmp	r3, #12
 8002fba:	d013      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	2b0f      	cmp	r3, #15
 8002fc2:	d00f      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	2b0d      	cmp	r3, #13
 8002fca:	d00b      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	2b0e      	cmp	r3, #14
 8002fd2:	d007      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	2b0d      	cmp	r3, #13
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_Init+0x4c8>
 8002fdc:	21de      	movs	r1, #222	; 0xde
 8002fde:	4888      	ldr	r0, [pc, #544]	; (8003200 <HAL_GPIO_Init+0x6e4>)
 8002fe0:	f7fe fd23 	bl	8001a2a <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	08da      	lsrs	r2, r3, #3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3208      	adds	r2, #8
 8002fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	220f      	movs	r2, #15
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	08da      	lsrs	r2, r3, #3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	3208      	adds	r2, #8
 8003026:	69b9      	ldr	r1, [r7, #24]
 8003028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	2203      	movs	r2, #3
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 0203 	and.w	r2, r3, #3
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80be 	beq.w	80031ea <HAL_GPIO_Init+0x6ce>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800306e:	4b65      	ldr	r3, [pc, #404]	; (8003204 <HAL_GPIO_Init+0x6e8>)
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	4a64      	ldr	r2, [pc, #400]	; (8003204 <HAL_GPIO_Init+0x6e8>)
 8003074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003078:	6453      	str	r3, [r2, #68]	; 0x44
 800307a:	4b62      	ldr	r3, [pc, #392]	; (8003204 <HAL_GPIO_Init+0x6e8>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003086:	4a60      	ldr	r2, [pc, #384]	; (8003208 <HAL_GPIO_Init+0x6ec>)
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	089b      	lsrs	r3, r3, #2
 800308c:	3302      	adds	r3, #2
 800308e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	220f      	movs	r2, #15
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4013      	ands	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a57      	ldr	r2, [pc, #348]	; (800320c <HAL_GPIO_Init+0x6f0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d037      	beq.n	8003122 <HAL_GPIO_Init+0x606>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a56      	ldr	r2, [pc, #344]	; (8003210 <HAL_GPIO_Init+0x6f4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d031      	beq.n	800311e <HAL_GPIO_Init+0x602>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a55      	ldr	r2, [pc, #340]	; (8003214 <HAL_GPIO_Init+0x6f8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d02b      	beq.n	800311a <HAL_GPIO_Init+0x5fe>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a54      	ldr	r2, [pc, #336]	; (8003218 <HAL_GPIO_Init+0x6fc>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d025      	beq.n	8003116 <HAL_GPIO_Init+0x5fa>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a53      	ldr	r2, [pc, #332]	; (800321c <HAL_GPIO_Init+0x700>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d01f      	beq.n	8003112 <HAL_GPIO_Init+0x5f6>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a52      	ldr	r2, [pc, #328]	; (8003220 <HAL_GPIO_Init+0x704>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d019      	beq.n	800310e <HAL_GPIO_Init+0x5f2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a51      	ldr	r2, [pc, #324]	; (8003224 <HAL_GPIO_Init+0x708>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d013      	beq.n	800310a <HAL_GPIO_Init+0x5ee>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a50      	ldr	r2, [pc, #320]	; (8003228 <HAL_GPIO_Init+0x70c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d00d      	beq.n	8003106 <HAL_GPIO_Init+0x5ea>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a4f      	ldr	r2, [pc, #316]	; (800322c <HAL_GPIO_Init+0x710>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d007      	beq.n	8003102 <HAL_GPIO_Init+0x5e6>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4e      	ldr	r2, [pc, #312]	; (8003230 <HAL_GPIO_Init+0x714>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d101      	bne.n	80030fe <HAL_GPIO_Init+0x5e2>
 80030fa:	2309      	movs	r3, #9
 80030fc:	e012      	b.n	8003124 <HAL_GPIO_Init+0x608>
 80030fe:	230a      	movs	r3, #10
 8003100:	e010      	b.n	8003124 <HAL_GPIO_Init+0x608>
 8003102:	2308      	movs	r3, #8
 8003104:	e00e      	b.n	8003124 <HAL_GPIO_Init+0x608>
 8003106:	2307      	movs	r3, #7
 8003108:	e00c      	b.n	8003124 <HAL_GPIO_Init+0x608>
 800310a:	2306      	movs	r3, #6
 800310c:	e00a      	b.n	8003124 <HAL_GPIO_Init+0x608>
 800310e:	2305      	movs	r3, #5
 8003110:	e008      	b.n	8003124 <HAL_GPIO_Init+0x608>
 8003112:	2304      	movs	r3, #4
 8003114:	e006      	b.n	8003124 <HAL_GPIO_Init+0x608>
 8003116:	2303      	movs	r3, #3
 8003118:	e004      	b.n	8003124 <HAL_GPIO_Init+0x608>
 800311a:	2302      	movs	r3, #2
 800311c:	e002      	b.n	8003124 <HAL_GPIO_Init+0x608>
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <HAL_GPIO_Init+0x608>
 8003122:	2300      	movs	r3, #0
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	f002 0203 	and.w	r2, r2, #3
 800312a:	0092      	lsls	r2, r2, #2
 800312c:	4093      	lsls	r3, r2
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003134:	4934      	ldr	r1, [pc, #208]	; (8003208 <HAL_GPIO_Init+0x6ec>)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	089b      	lsrs	r3, r3, #2
 800313a:	3302      	adds	r3, #2
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003142:	4b3c      	ldr	r3, [pc, #240]	; (8003234 <HAL_GPIO_Init+0x718>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	43db      	mvns	r3, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4013      	ands	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_GPIO_Init+0x64a>
        {
          temp |= iocurrent;
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003166:	4a33      	ldr	r2, [pc, #204]	; (8003234 <HAL_GPIO_Init+0x718>)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800316c:	4b31      	ldr	r3, [pc, #196]	; (8003234 <HAL_GPIO_Init+0x718>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_GPIO_Init+0x674>
        {
          temp |= iocurrent;
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003190:	4a28      	ldr	r2, [pc, #160]	; (8003234 <HAL_GPIO_Init+0x718>)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003196:	4b27      	ldr	r3, [pc, #156]	; (8003234 <HAL_GPIO_Init+0x718>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_Init+0x69e>
        {
          temp |= iocurrent;
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ba:	4a1e      	ldr	r2, [pc, #120]	; (8003234 <HAL_GPIO_Init+0x718>)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031c0:	4b1c      	ldr	r3, [pc, #112]	; (8003234 <HAL_GPIO_Init+0x718>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_GPIO_Init+0x6c8>
        {
          temp |= iocurrent;
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031e4:	4a13      	ldr	r2, [pc, #76]	; (8003234 <HAL_GPIO_Init+0x718>)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	3301      	adds	r3, #1
 80031ee:	61fb      	str	r3, [r7, #28]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	2b0f      	cmp	r3, #15
 80031f4:	f67f ad4a 	bls.w	8002c8c <HAL_GPIO_Init+0x170>
      }
    }
  }
}
 80031f8:	bf00      	nop
 80031fa:	3720      	adds	r7, #32
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	08007e64 	.word	0x08007e64
 8003204:	40023800 	.word	0x40023800
 8003208:	40013800 	.word	0x40013800
 800320c:	40020000 	.word	0x40020000
 8003210:	40020400 	.word	0x40020400
 8003214:	40020800 	.word	0x40020800
 8003218:	40020c00 	.word	0x40020c00
 800321c:	40021000 	.word	0x40021000
 8003220:	40021400 	.word	0x40021400
 8003224:	40021800 	.word	0x40021800
 8003228:	40021c00 	.word	0x40021c00
 800322c:	40022000 	.word	0x40022000
 8003230:	40022400 	.word	0x40022400
 8003234:	40013c00 	.word	0x40013c00

08003238 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003244:	887b      	ldrh	r3, [r7, #2]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d104      	bne.n	8003254 <HAL_GPIO_ReadPin+0x1c>
 800324a:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800324e:	4809      	ldr	r0, [pc, #36]	; (8003274 <HAL_GPIO_ReadPin+0x3c>)
 8003250:	f7fe fbeb 	bl	8001a2a <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	887b      	ldrh	r3, [r7, #2]
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
 8003264:	e001      	b.n	800326a <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003266:	2300      	movs	r3, #0
 8003268:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800326a:	7bfb      	ldrb	r3, [r7, #15]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	08007e64 	.word	0x08007e64

08003278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	807b      	strh	r3, [r7, #2]
 8003284:	4613      	mov	r3, r2
 8003286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003288:	887b      	ldrh	r3, [r7, #2]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d104      	bne.n	8003298 <HAL_GPIO_WritePin+0x20>
 800328e:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8003292:	480e      	ldr	r0, [pc, #56]	; (80032cc <HAL_GPIO_WritePin+0x54>)
 8003294:	f7fe fbc9 	bl	8001a2a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003298:	787b      	ldrb	r3, [r7, #1]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d007      	beq.n	80032ae <HAL_GPIO_WritePin+0x36>
 800329e:	787b      	ldrb	r3, [r7, #1]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d004      	beq.n	80032ae <HAL_GPIO_WritePin+0x36>
 80032a4:	f240 119b 	movw	r1, #411	; 0x19b
 80032a8:	4808      	ldr	r0, [pc, #32]	; (80032cc <HAL_GPIO_WritePin+0x54>)
 80032aa:	f7fe fbbe 	bl	8001a2a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80032ae:	787b      	ldrb	r3, [r7, #1]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032b4:	887a      	ldrh	r2, [r7, #2]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80032ba:	e003      	b.n	80032c4 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80032bc:	887b      	ldrh	r3, [r7, #2]
 80032be:	041a      	lsls	r2, r3, #16
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	619a      	str	r2, [r3, #24]
}
 80032c4:	bf00      	nop
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	08007e64 	.word	0x08007e64

080032d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80032dc:	887b      	ldrh	r3, [r7, #2]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d104      	bne.n	80032ec <HAL_GPIO_TogglePin+0x1c>
 80032e2:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80032e6:	480a      	ldr	r0, [pc, #40]	; (8003310 <HAL_GPIO_TogglePin+0x40>)
 80032e8:	f7fe fb9f 	bl	8001a2a <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	887b      	ldrh	r3, [r7, #2]
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d004      	beq.n	8003302 <HAL_GPIO_TogglePin+0x32>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80032f8:	887b      	ldrh	r3, [r7, #2]
 80032fa:	041a      	lsls	r2, r3, #16
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003300:	e002      	b.n	8003308 <HAL_GPIO_TogglePin+0x38>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003302:	887a      	ldrh	r2, [r7, #2]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	619a      	str	r2, [r3, #24]
}
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	08007e64 	.word	0x08007e64

08003314 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800331e:	4b08      	ldr	r3, [pc, #32]	; (8003340 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	88fb      	ldrh	r3, [r7, #6]
 8003324:	4013      	ands	r3, r2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d006      	beq.n	8003338 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800332a:	4a05      	ldr	r2, [pc, #20]	; (8003340 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003330:	88fb      	ldrh	r3, [r7, #6]
 8003332:	4618      	mov	r0, r3
 8003334:	f000 f806 	bl	8003344 <HAL_GPIO_EXTI_Callback>
  }
}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40013c00 	.word	0x40013c00

08003344 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
	...

0800335c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003366:	4b23      	ldr	r3, [pc, #140]	; (80033f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	4a22      	ldr	r2, [pc, #136]	; (80033f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800336c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003370:	6413      	str	r3, [r2, #64]	; 0x40
 8003372:	4b20      	ldr	r3, [pc, #128]	; (80033f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800337e:	4b1e      	ldr	r3, [pc, #120]	; (80033f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a1d      	ldr	r2, [pc, #116]	; (80033f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003388:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800338a:	f7ff f8e7 	bl	800255c <HAL_GetTick>
 800338e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003390:	e009      	b.n	80033a6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003392:	f7ff f8e3 	bl	800255c <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033a0:	d901      	bls.n	80033a6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e022      	b.n	80033ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033a6:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b2:	d1ee      	bne.n	8003392 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80033b4:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a0f      	ldr	r2, [pc, #60]	; (80033f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033c0:	f7ff f8cc 	bl	800255c <HAL_GetTick>
 80033c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033c6:	e009      	b.n	80033dc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033c8:	f7ff f8c8 	bl	800255c <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033d6:	d901      	bls.n	80033dc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e007      	b.n	80033ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033dc:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033e8:	d1ee      	bne.n	80033c8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40007000 	.word	0x40007000

080033fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003404:	2300      	movs	r3, #0
 8003406:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e35c      	b.n	8003acc <HAL_RCC_OscConfig+0x6d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b0f      	cmp	r3, #15
 8003418:	d904      	bls.n	8003424 <HAL_RCC_OscConfig+0x28>
 800341a:	f240 1165 	movw	r1, #357	; 0x165
 800341e:	4892      	ldr	r0, [pc, #584]	; (8003668 <HAL_RCC_OscConfig+0x26c>)
 8003420:	f7fe fb03 	bl	8001a2a <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 809a 	beq.w	8003566 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00e      	beq.n	8003458 <HAL_RCC_OscConfig+0x5c>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003442:	d009      	beq.n	8003458 <HAL_RCC_OscConfig+0x5c>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800344c:	d004      	beq.n	8003458 <HAL_RCC_OscConfig+0x5c>
 800344e:	f240 116b 	movw	r1, #363	; 0x16b
 8003452:	4885      	ldr	r0, [pc, #532]	; (8003668 <HAL_RCC_OscConfig+0x26c>)
 8003454:	f7fe fae9 	bl	8001a2a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003458:	4b84      	ldr	r3, [pc, #528]	; (800366c <HAL_RCC_OscConfig+0x270>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 030c 	and.w	r3, r3, #12
 8003460:	2b04      	cmp	r3, #4
 8003462:	d00c      	beq.n	800347e <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003464:	4b81      	ldr	r3, [pc, #516]	; (800366c <HAL_RCC_OscConfig+0x270>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 030c 	and.w	r3, r3, #12
 800346c:	2b08      	cmp	r3, #8
 800346e:	d112      	bne.n	8003496 <HAL_RCC_OscConfig+0x9a>
 8003470:	4b7e      	ldr	r3, [pc, #504]	; (800366c <HAL_RCC_OscConfig+0x270>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003478:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800347c:	d10b      	bne.n	8003496 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347e:	4b7b      	ldr	r3, [pc, #492]	; (800366c <HAL_RCC_OscConfig+0x270>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d06c      	beq.n	8003564 <HAL_RCC_OscConfig+0x168>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d168      	bne.n	8003564 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e31a      	b.n	8003acc <HAL_RCC_OscConfig+0x6d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800349e:	d106      	bne.n	80034ae <HAL_RCC_OscConfig+0xb2>
 80034a0:	4b72      	ldr	r3, [pc, #456]	; (800366c <HAL_RCC_OscConfig+0x270>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a71      	ldr	r2, [pc, #452]	; (800366c <HAL_RCC_OscConfig+0x270>)
 80034a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	e02e      	b.n	800350c <HAL_RCC_OscConfig+0x110>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCC_OscConfig+0xd4>
 80034b6:	4b6d      	ldr	r3, [pc, #436]	; (800366c <HAL_RCC_OscConfig+0x270>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a6c      	ldr	r2, [pc, #432]	; (800366c <HAL_RCC_OscConfig+0x270>)
 80034bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	4b6a      	ldr	r3, [pc, #424]	; (800366c <HAL_RCC_OscConfig+0x270>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a69      	ldr	r2, [pc, #420]	; (800366c <HAL_RCC_OscConfig+0x270>)
 80034c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	e01d      	b.n	800350c <HAL_RCC_OscConfig+0x110>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034d8:	d10c      	bne.n	80034f4 <HAL_RCC_OscConfig+0xf8>
 80034da:	4b64      	ldr	r3, [pc, #400]	; (800366c <HAL_RCC_OscConfig+0x270>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a63      	ldr	r2, [pc, #396]	; (800366c <HAL_RCC_OscConfig+0x270>)
 80034e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	4b61      	ldr	r3, [pc, #388]	; (800366c <HAL_RCC_OscConfig+0x270>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a60      	ldr	r2, [pc, #384]	; (800366c <HAL_RCC_OscConfig+0x270>)
 80034ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	e00b      	b.n	800350c <HAL_RCC_OscConfig+0x110>
 80034f4:	4b5d      	ldr	r3, [pc, #372]	; (800366c <HAL_RCC_OscConfig+0x270>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a5c      	ldr	r2, [pc, #368]	; (800366c <HAL_RCC_OscConfig+0x270>)
 80034fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	4b5a      	ldr	r3, [pc, #360]	; (800366c <HAL_RCC_OscConfig+0x270>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a59      	ldr	r2, [pc, #356]	; (800366c <HAL_RCC_OscConfig+0x270>)
 8003506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800350a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d013      	beq.n	800353c <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7ff f822 	bl	800255c <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800351c:	f7ff f81e 	bl	800255c <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b64      	cmp	r3, #100	; 0x64
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e2ce      	b.n	8003acc <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352e:	4b4f      	ldr	r3, [pc, #316]	; (800366c <HAL_RCC_OscConfig+0x270>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f0      	beq.n	800351c <HAL_RCC_OscConfig+0x120>
 800353a:	e014      	b.n	8003566 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353c:	f7ff f80e 	bl	800255c <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003544:	f7ff f80a 	bl	800255c <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b64      	cmp	r3, #100	; 0x64
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e2ba      	b.n	8003acc <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003556:	4b45      	ldr	r3, [pc, #276]	; (800366c <HAL_RCC_OscConfig+0x270>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f0      	bne.n	8003544 <HAL_RCC_OscConfig+0x148>
 8003562:	e000      	b.n	8003566 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 8084 	beq.w	800367c <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <HAL_RCC_OscConfig+0x192>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d004      	beq.n	800358e <HAL_RCC_OscConfig+0x192>
 8003584:	f240 119d 	movw	r1, #413	; 0x19d
 8003588:	4837      	ldr	r0, [pc, #220]	; (8003668 <HAL_RCC_OscConfig+0x26c>)
 800358a:	f7fe fa4e 	bl	8001a2a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	2b1f      	cmp	r3, #31
 8003594:	d904      	bls.n	80035a0 <HAL_RCC_OscConfig+0x1a4>
 8003596:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800359a:	4833      	ldr	r0, [pc, #204]	; (8003668 <HAL_RCC_OscConfig+0x26c>)
 800359c:	f7fe fa45 	bl	8001a2a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035a0:	4b32      	ldr	r3, [pc, #200]	; (800366c <HAL_RCC_OscConfig+0x270>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 030c 	and.w	r3, r3, #12
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00b      	beq.n	80035c4 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ac:	4b2f      	ldr	r3, [pc, #188]	; (800366c <HAL_RCC_OscConfig+0x270>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 030c 	and.w	r3, r3, #12
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d11c      	bne.n	80035f2 <HAL_RCC_OscConfig+0x1f6>
 80035b8:	4b2c      	ldr	r3, [pc, #176]	; (800366c <HAL_RCC_OscConfig+0x270>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d116      	bne.n	80035f2 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c4:	4b29      	ldr	r3, [pc, #164]	; (800366c <HAL_RCC_OscConfig+0x270>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d005      	beq.n	80035dc <HAL_RCC_OscConfig+0x1e0>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d001      	beq.n	80035dc <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e277      	b.n	8003acc <HAL_RCC_OscConfig+0x6d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035dc:	4b23      	ldr	r3, [pc, #140]	; (800366c <HAL_RCC_OscConfig+0x270>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	4920      	ldr	r1, [pc, #128]	; (800366c <HAL_RCC_OscConfig+0x270>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035f0:	e044      	b.n	800367c <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d023      	beq.n	8003642 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035fa:	4b1c      	ldr	r3, [pc, #112]	; (800366c <HAL_RCC_OscConfig+0x270>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a1b      	ldr	r2, [pc, #108]	; (800366c <HAL_RCC_OscConfig+0x270>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003606:	f7fe ffa9 	bl	800255c <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800360e:	f7fe ffa5 	bl	800255c <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e255      	b.n	8003acc <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003620:	4b12      	ldr	r3, [pc, #72]	; (800366c <HAL_RCC_OscConfig+0x270>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0f0      	beq.n	800360e <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362c:	4b0f      	ldr	r3, [pc, #60]	; (800366c <HAL_RCC_OscConfig+0x270>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	490c      	ldr	r1, [pc, #48]	; (800366c <HAL_RCC_OscConfig+0x270>)
 800363c:	4313      	orrs	r3, r2
 800363e:	600b      	str	r3, [r1, #0]
 8003640:	e01c      	b.n	800367c <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003642:	4b0a      	ldr	r3, [pc, #40]	; (800366c <HAL_RCC_OscConfig+0x270>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a09      	ldr	r2, [pc, #36]	; (800366c <HAL_RCC_OscConfig+0x270>)
 8003648:	f023 0301 	bic.w	r3, r3, #1
 800364c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364e:	f7fe ff85 	bl	800255c <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003654:	e00c      	b.n	8003670 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003656:	f7fe ff81 	bl	800255c <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d905      	bls.n	8003670 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e231      	b.n	8003acc <HAL_RCC_OscConfig+0x6d0>
 8003668:	08007ea0 	.word	0x08007ea0
 800366c:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003670:	4b7e      	ldr	r3, [pc, #504]	; (800386c <HAL_RCC_OscConfig+0x470>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1ec      	bne.n	8003656 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b00      	cmp	r3, #0
 8003686:	d043      	beq.n	8003710 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_RCC_OscConfig+0x2a6>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d004      	beq.n	80036a2 <HAL_RCC_OscConfig+0x2a6>
 8003698:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800369c:	4874      	ldr	r0, [pc, #464]	; (8003870 <HAL_RCC_OscConfig+0x474>)
 800369e:	f7fe f9c4 	bl	8001a2a <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d019      	beq.n	80036de <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036aa:	4b70      	ldr	r3, [pc, #448]	; (800386c <HAL_RCC_OscConfig+0x470>)
 80036ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ae:	4a6f      	ldr	r2, [pc, #444]	; (800386c <HAL_RCC_OscConfig+0x470>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b6:	f7fe ff51 	bl	800255c <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036be:	f7fe ff4d 	bl	800255c <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e1fd      	b.n	8003acc <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d0:	4b66      	ldr	r3, [pc, #408]	; (800386c <HAL_RCC_OscConfig+0x470>)
 80036d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0f0      	beq.n	80036be <HAL_RCC_OscConfig+0x2c2>
 80036dc:	e018      	b.n	8003710 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036de:	4b63      	ldr	r3, [pc, #396]	; (800386c <HAL_RCC_OscConfig+0x470>)
 80036e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e2:	4a62      	ldr	r2, [pc, #392]	; (800386c <HAL_RCC_OscConfig+0x470>)
 80036e4:	f023 0301 	bic.w	r3, r3, #1
 80036e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ea:	f7fe ff37 	bl	800255c <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f2:	f7fe ff33 	bl	800255c <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e1e3      	b.n	8003acc <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003704:	4b59      	ldr	r3, [pc, #356]	; (800386c <HAL_RCC_OscConfig+0x470>)
 8003706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f0      	bne.n	80036f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80bc 	beq.w	8003896 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00c      	beq.n	8003740 <HAL_RCC_OscConfig+0x344>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d008      	beq.n	8003740 <HAL_RCC_OscConfig+0x344>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2b05      	cmp	r3, #5
 8003734:	d004      	beq.n	8003740 <HAL_RCC_OscConfig+0x344>
 8003736:	f44f 7102 	mov.w	r1, #520	; 0x208
 800373a:	484d      	ldr	r0, [pc, #308]	; (8003870 <HAL_RCC_OscConfig+0x474>)
 800373c:	f7fe f975 	bl	8001a2a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003740:	4b4a      	ldr	r3, [pc, #296]	; (800386c <HAL_RCC_OscConfig+0x470>)
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10d      	bne.n	8003768 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800374c:	4b47      	ldr	r3, [pc, #284]	; (800386c <HAL_RCC_OscConfig+0x470>)
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	4a46      	ldr	r2, [pc, #280]	; (800386c <HAL_RCC_OscConfig+0x470>)
 8003752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003756:	6413      	str	r3, [r2, #64]	; 0x40
 8003758:	4b44      	ldr	r3, [pc, #272]	; (800386c <HAL_RCC_OscConfig+0x470>)
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003764:	2301      	movs	r3, #1
 8003766:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003768:	4b42      	ldr	r3, [pc, #264]	; (8003874 <HAL_RCC_OscConfig+0x478>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d118      	bne.n	80037a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003774:	4b3f      	ldr	r3, [pc, #252]	; (8003874 <HAL_RCC_OscConfig+0x478>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a3e      	ldr	r2, [pc, #248]	; (8003874 <HAL_RCC_OscConfig+0x478>)
 800377a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800377e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003780:	f7fe feec 	bl	800255c <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003788:	f7fe fee8 	bl	800255c <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b64      	cmp	r3, #100	; 0x64
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e198      	b.n	8003acc <HAL_RCC_OscConfig+0x6d0>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800379a:	4b36      	ldr	r3, [pc, #216]	; (8003874 <HAL_RCC_OscConfig+0x478>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0f0      	beq.n	8003788 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d106      	bne.n	80037bc <HAL_RCC_OscConfig+0x3c0>
 80037ae:	4b2f      	ldr	r3, [pc, #188]	; (800386c <HAL_RCC_OscConfig+0x470>)
 80037b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b2:	4a2e      	ldr	r2, [pc, #184]	; (800386c <HAL_RCC_OscConfig+0x470>)
 80037b4:	f043 0301 	orr.w	r3, r3, #1
 80037b8:	6713      	str	r3, [r2, #112]	; 0x70
 80037ba:	e02d      	b.n	8003818 <HAL_RCC_OscConfig+0x41c>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10c      	bne.n	80037de <HAL_RCC_OscConfig+0x3e2>
 80037c4:	4b29      	ldr	r3, [pc, #164]	; (800386c <HAL_RCC_OscConfig+0x470>)
 80037c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c8:	4a28      	ldr	r2, [pc, #160]	; (800386c <HAL_RCC_OscConfig+0x470>)
 80037ca:	f023 0301 	bic.w	r3, r3, #1
 80037ce:	6713      	str	r3, [r2, #112]	; 0x70
 80037d0:	4b26      	ldr	r3, [pc, #152]	; (800386c <HAL_RCC_OscConfig+0x470>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d4:	4a25      	ldr	r2, [pc, #148]	; (800386c <HAL_RCC_OscConfig+0x470>)
 80037d6:	f023 0304 	bic.w	r3, r3, #4
 80037da:	6713      	str	r3, [r2, #112]	; 0x70
 80037dc:	e01c      	b.n	8003818 <HAL_RCC_OscConfig+0x41c>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b05      	cmp	r3, #5
 80037e4:	d10c      	bne.n	8003800 <HAL_RCC_OscConfig+0x404>
 80037e6:	4b21      	ldr	r3, [pc, #132]	; (800386c <HAL_RCC_OscConfig+0x470>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ea:	4a20      	ldr	r2, [pc, #128]	; (800386c <HAL_RCC_OscConfig+0x470>)
 80037ec:	f043 0304 	orr.w	r3, r3, #4
 80037f0:	6713      	str	r3, [r2, #112]	; 0x70
 80037f2:	4b1e      	ldr	r3, [pc, #120]	; (800386c <HAL_RCC_OscConfig+0x470>)
 80037f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f6:	4a1d      	ldr	r2, [pc, #116]	; (800386c <HAL_RCC_OscConfig+0x470>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	6713      	str	r3, [r2, #112]	; 0x70
 80037fe:	e00b      	b.n	8003818 <HAL_RCC_OscConfig+0x41c>
 8003800:	4b1a      	ldr	r3, [pc, #104]	; (800386c <HAL_RCC_OscConfig+0x470>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	4a19      	ldr	r2, [pc, #100]	; (800386c <HAL_RCC_OscConfig+0x470>)
 8003806:	f023 0301 	bic.w	r3, r3, #1
 800380a:	6713      	str	r3, [r2, #112]	; 0x70
 800380c:	4b17      	ldr	r3, [pc, #92]	; (800386c <HAL_RCC_OscConfig+0x470>)
 800380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003810:	4a16      	ldr	r2, [pc, #88]	; (800386c <HAL_RCC_OscConfig+0x470>)
 8003812:	f023 0304 	bic.w	r3, r3, #4
 8003816:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d015      	beq.n	800384c <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003820:	f7fe fe9c 	bl	800255c <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003826:	e00a      	b.n	800383e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003828:	f7fe fe98 	bl	800255c <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	f241 3288 	movw	r2, #5000	; 0x1388
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e146      	b.n	8003acc <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383e:	4b0b      	ldr	r3, [pc, #44]	; (800386c <HAL_RCC_OscConfig+0x470>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0ee      	beq.n	8003828 <HAL_RCC_OscConfig+0x42c>
 800384a:	e01b      	b.n	8003884 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384c:	f7fe fe86 	bl	800255c <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003852:	e011      	b.n	8003878 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003854:	f7fe fe82 	bl	800255c <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003862:	4293      	cmp	r3, r2
 8003864:	d908      	bls.n	8003878 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e130      	b.n	8003acc <HAL_RCC_OscConfig+0x6d0>
 800386a:	bf00      	nop
 800386c:	40023800 	.word	0x40023800
 8003870:	08007ea0 	.word	0x08007ea0
 8003874:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003878:	4b96      	ldr	r3, [pc, #600]	; (8003ad4 <HAL_RCC_OscConfig+0x6d8>)
 800387a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1e7      	bne.n	8003854 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003884:	7dfb      	ldrb	r3, [r7, #23]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d105      	bne.n	8003896 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800388a:	4b92      	ldr	r3, [pc, #584]	; (8003ad4 <HAL_RCC_OscConfig+0x6d8>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	4a91      	ldr	r2, [pc, #580]	; (8003ad4 <HAL_RCC_OscConfig+0x6d8>)
 8003890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003894:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00c      	beq.n	80038b8 <HAL_RCC_OscConfig+0x4bc>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d008      	beq.n	80038b8 <HAL_RCC_OscConfig+0x4bc>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d004      	beq.n	80038b8 <HAL_RCC_OscConfig+0x4bc>
 80038ae:	f44f 7113 	mov.w	r1, #588	; 0x24c
 80038b2:	4889      	ldr	r0, [pc, #548]	; (8003ad8 <HAL_RCC_OscConfig+0x6dc>)
 80038b4:	f7fe f8b9 	bl	8001a2a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 8104 	beq.w	8003aca <HAL_RCC_OscConfig+0x6ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038c2:	4b84      	ldr	r3, [pc, #528]	; (8003ad4 <HAL_RCC_OscConfig+0x6d8>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	f000 80c3 	beq.w	8003a56 <HAL_RCC_OscConfig+0x65a>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	f040 80a4 	bne.w	8003a22 <HAL_RCC_OscConfig+0x626>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d009      	beq.n	80038f6 <HAL_RCC_OscConfig+0x4fa>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ea:	d004      	beq.n	80038f6 <HAL_RCC_OscConfig+0x4fa>
 80038ec:	f240 2155 	movw	r1, #597	; 0x255
 80038f0:	4879      	ldr	r0, [pc, #484]	; (8003ad8 <HAL_RCC_OscConfig+0x6dc>)
 80038f2:	f7fe f89a 	bl	8001a2a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d903      	bls.n	8003906 <HAL_RCC_OscConfig+0x50a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	2b3f      	cmp	r3, #63	; 0x3f
 8003904:	d904      	bls.n	8003910 <HAL_RCC_OscConfig+0x514>
 8003906:	f240 2156 	movw	r1, #598	; 0x256
 800390a:	4873      	ldr	r0, [pc, #460]	; (8003ad8 <HAL_RCC_OscConfig+0x6dc>)
 800390c:	f7fe f88d 	bl	8001a2a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	2b31      	cmp	r3, #49	; 0x31
 8003916:	d904      	bls.n	8003922 <HAL_RCC_OscConfig+0x526>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003920:	d904      	bls.n	800392c <HAL_RCC_OscConfig+0x530>
 8003922:	f240 2157 	movw	r1, #599	; 0x257
 8003926:	486c      	ldr	r0, [pc, #432]	; (8003ad8 <HAL_RCC_OscConfig+0x6dc>)
 8003928:	f7fe f87f 	bl	8001a2a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003930:	2b02      	cmp	r3, #2
 8003932:	d010      	beq.n	8003956 <HAL_RCC_OscConfig+0x55a>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	2b04      	cmp	r3, #4
 800393a:	d00c      	beq.n	8003956 <HAL_RCC_OscConfig+0x55a>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003940:	2b06      	cmp	r3, #6
 8003942:	d008      	beq.n	8003956 <HAL_RCC_OscConfig+0x55a>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003948:	2b08      	cmp	r3, #8
 800394a:	d004      	beq.n	8003956 <HAL_RCC_OscConfig+0x55a>
 800394c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003950:	4861      	ldr	r0, [pc, #388]	; (8003ad8 <HAL_RCC_OscConfig+0x6dc>)
 8003952:	f7fe f86a 	bl	8001a2a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395a:	2b01      	cmp	r3, #1
 800395c:	d903      	bls.n	8003966 <HAL_RCC_OscConfig+0x56a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	2b0f      	cmp	r3, #15
 8003964:	d904      	bls.n	8003970 <HAL_RCC_OscConfig+0x574>
 8003966:	f240 2159 	movw	r1, #601	; 0x259
 800396a:	485b      	ldr	r0, [pc, #364]	; (8003ad8 <HAL_RCC_OscConfig+0x6dc>)
 800396c:	f7fe f85d 	bl	8001a2a <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	2b01      	cmp	r3, #1
 8003976:	d903      	bls.n	8003980 <HAL_RCC_OscConfig+0x584>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	2b07      	cmp	r3, #7
 800397e:	d904      	bls.n	800398a <HAL_RCC_OscConfig+0x58e>
 8003980:	f240 215b 	movw	r1, #603	; 0x25b
 8003984:	4854      	ldr	r0, [pc, #336]	; (8003ad8 <HAL_RCC_OscConfig+0x6dc>)
 8003986:	f7fe f850 	bl	8001a2a <assert_failed>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398a:	4b52      	ldr	r3, [pc, #328]	; (8003ad4 <HAL_RCC_OscConfig+0x6d8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a51      	ldr	r2, [pc, #324]	; (8003ad4 <HAL_RCC_OscConfig+0x6d8>)
 8003990:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003996:	f7fe fde1 	bl	800255c <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x5b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800399e:	f7fe fddd 	bl	800255c <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x5b4>
          {
            return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e08d      	b.n	8003acc <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b0:	4b48      	ldr	r3, [pc, #288]	; (8003ad4 <HAL_RCC_OscConfig+0x6d8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1f0      	bne.n	800399e <HAL_RCC_OscConfig+0x5a2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69da      	ldr	r2, [r3, #28]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	431a      	orrs	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	019b      	lsls	r3, r3, #6
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	085b      	lsrs	r3, r3, #1
 80039d4:	3b01      	subs	r3, #1
 80039d6:	041b      	lsls	r3, r3, #16
 80039d8:	431a      	orrs	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	061b      	lsls	r3, r3, #24
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	071b      	lsls	r3, r3, #28
 80039e8:	493a      	ldr	r1, [pc, #232]	; (8003ad4 <HAL_RCC_OscConfig+0x6d8>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ee:	4b39      	ldr	r3, [pc, #228]	; (8003ad4 <HAL_RCC_OscConfig+0x6d8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a38      	ldr	r2, [pc, #224]	; (8003ad4 <HAL_RCC_OscConfig+0x6d8>)
 80039f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fa:	f7fe fdaf 	bl	800255c <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x618>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a02:	f7fe fdab 	bl	800255c <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e05b      	b.n	8003acc <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a14:	4b2f      	ldr	r3, [pc, #188]	; (8003ad4 <HAL_RCC_OscConfig+0x6d8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0f0      	beq.n	8003a02 <HAL_RCC_OscConfig+0x606>
 8003a20:	e053      	b.n	8003aca <HAL_RCC_OscConfig+0x6ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a22:	4b2c      	ldr	r3, [pc, #176]	; (8003ad4 <HAL_RCC_OscConfig+0x6d8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a2b      	ldr	r2, [pc, #172]	; (8003ad4 <HAL_RCC_OscConfig+0x6d8>)
 8003a28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2e:	f7fe fd95 	bl	800255c <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x64c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a36:	f7fe fd91 	bl	800255c <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e041      	b.n	8003acc <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a48:	4b22      	ldr	r3, [pc, #136]	; (8003ad4 <HAL_RCC_OscConfig+0x6d8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1f0      	bne.n	8003a36 <HAL_RCC_OscConfig+0x63a>
 8003a54:	e039      	b.n	8003aca <HAL_RCC_OscConfig+0x6ce>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a56:	4b1f      	ldr	r3, [pc, #124]	; (8003ad4 <HAL_RCC_OscConfig+0x6d8>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d030      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d129      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d122      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a86:	4013      	ands	r3, r2
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a8c:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d119      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9c:	085b      	lsrs	r3, r3, #1
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d10f      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d107      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d001      	beq.n	8003aca <HAL_RCC_OscConfig+0x6ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <HAL_RCC_OscConfig+0x6d0>
      }
    }
  }
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	08007ea0 	.word	0x08007ea0

08003adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e18c      	b.n	8003e0e <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x28>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b0f      	cmp	r3, #15
 8003b02:	d904      	bls.n	8003b0e <HAL_RCC_ClockConfig+0x32>
 8003b04:	f240 21df 	movw	r1, #735	; 0x2df
 8003b08:	4887      	ldr	r0, [pc, #540]	; (8003d28 <HAL_RCC_ClockConfig+0x24c>)
 8003b0a:	f7fd ff8e 	bl	8001a2a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d031      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x9c>
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d02e      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x9c>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d02b      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x9c>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	d028      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x9c>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d025      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x9c>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b05      	cmp	r3, #5
 8003b30:	d022      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x9c>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b06      	cmp	r3, #6
 8003b36:	d01f      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x9c>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2b07      	cmp	r3, #7
 8003b3c:	d01c      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x9c>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d019      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x9c>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	2b09      	cmp	r3, #9
 8003b48:	d016      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x9c>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b0a      	cmp	r3, #10
 8003b4e:	d013      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x9c>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2b0b      	cmp	r3, #11
 8003b54:	d010      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x9c>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b0c      	cmp	r3, #12
 8003b5a:	d00d      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x9c>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2b0d      	cmp	r3, #13
 8003b60:	d00a      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x9c>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b0e      	cmp	r3, #14
 8003b66:	d007      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x9c>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	2b0f      	cmp	r3, #15
 8003b6c:	d004      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x9c>
 8003b6e:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8003b72:	486d      	ldr	r0, [pc, #436]	; (8003d28 <HAL_RCC_ClockConfig+0x24c>)
 8003b74:	f7fd ff59 	bl	8001a2a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b78:	4b6c      	ldr	r3, [pc, #432]	; (8003d2c <HAL_RCC_ClockConfig+0x250>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d910      	bls.n	8003ba8 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b86:	4b69      	ldr	r3, [pc, #420]	; (8003d2c <HAL_RCC_ClockConfig+0x250>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f023 020f 	bic.w	r2, r3, #15
 8003b8e:	4967      	ldr	r1, [pc, #412]	; (8003d2c <HAL_RCC_ClockConfig+0x250>)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b96:	4b65      	ldr	r3, [pc, #404]	; (8003d2c <HAL_RCC_ClockConfig+0x250>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e132      	b.n	8003e0e <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d049      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bc0:	4b5b      	ldr	r3, [pc, #364]	; (8003d30 <HAL_RCC_ClockConfig+0x254>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	4a5a      	ldr	r2, [pc, #360]	; (8003d30 <HAL_RCC_ClockConfig+0x254>)
 8003bc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0308 	and.w	r3, r3, #8
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bd8:	4b55      	ldr	r3, [pc, #340]	; (8003d30 <HAL_RCC_ClockConfig+0x254>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	4a54      	ldr	r2, [pc, #336]	; (8003d30 <HAL_RCC_ClockConfig+0x254>)
 8003bde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003be2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d024      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x15a>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b80      	cmp	r3, #128	; 0x80
 8003bf2:	d020      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x15a>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	2b90      	cmp	r3, #144	; 0x90
 8003bfa:	d01c      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x15a>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2ba0      	cmp	r3, #160	; 0xa0
 8003c02:	d018      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x15a>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	2bb0      	cmp	r3, #176	; 0xb0
 8003c0a:	d014      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x15a>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	2bc0      	cmp	r3, #192	; 0xc0
 8003c12:	d010      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x15a>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2bd0      	cmp	r3, #208	; 0xd0
 8003c1a:	d00c      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x15a>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2be0      	cmp	r3, #224	; 0xe0
 8003c22:	d008      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x15a>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2bf0      	cmp	r3, #240	; 0xf0
 8003c2a:	d004      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x15a>
 8003c2c:	f44f 7141 	mov.w	r1, #772	; 0x304
 8003c30:	483d      	ldr	r0, [pc, #244]	; (8003d28 <HAL_RCC_ClockConfig+0x24c>)
 8003c32:	f7fd fefa 	bl	8001a2a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c36:	4b3e      	ldr	r3, [pc, #248]	; (8003d30 <HAL_RCC_ClockConfig+0x254>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	493b      	ldr	r1, [pc, #236]	; (8003d30 <HAL_RCC_ClockConfig+0x254>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d051      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00c      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x19a>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d008      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x19a>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d004      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x19a>
 8003c6c:	f240 310b 	movw	r1, #779	; 0x30b
 8003c70:	482d      	ldr	r0, [pc, #180]	; (8003d28 <HAL_RCC_ClockConfig+0x24c>)
 8003c72:	f7fd feda 	bl	8001a2a <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d107      	bne.n	8003c8e <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7e:	4b2c      	ldr	r3, [pc, #176]	; (8003d30 <HAL_RCC_ClockConfig+0x254>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d115      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e0bf      	b.n	8003e0e <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d107      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c96:	4b26      	ldr	r3, [pc, #152]	; (8003d30 <HAL_RCC_ClockConfig+0x254>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d109      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e0b3      	b.n	8003e0e <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca6:	4b22      	ldr	r3, [pc, #136]	; (8003d30 <HAL_RCC_ClockConfig+0x254>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e0ab      	b.n	8003e0e <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cb6:	4b1e      	ldr	r3, [pc, #120]	; (8003d30 <HAL_RCC_ClockConfig+0x254>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f023 0203 	bic.w	r2, r3, #3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	491b      	ldr	r1, [pc, #108]	; (8003d30 <HAL_RCC_ClockConfig+0x254>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cc8:	f7fe fc48 	bl	800255c <HAL_GetTick>
 8003ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cce:	e00a      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd0:	f7fe fc44 	bl	800255c <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e093      	b.n	8003e0e <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce6:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <HAL_RCC_ClockConfig+0x254>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 020c 	and.w	r2, r3, #12
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d1eb      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf8:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <HAL_RCC_ClockConfig+0x250>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d216      	bcs.n	8003d34 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d06:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <HAL_RCC_ClockConfig+0x250>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f023 020f 	bic.w	r2, r3, #15
 8003d0e:	4907      	ldr	r1, [pc, #28]	; (8003d2c <HAL_RCC_ClockConfig+0x250>)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d16:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <HAL_RCC_ClockConfig+0x250>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d007      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e072      	b.n	8003e0e <HAL_RCC_ClockConfig+0x332>
 8003d28:	08007ea0 	.word	0x08007ea0
 8003d2c:	40023c00 	.word	0x40023c00
 8003d30:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d025      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d018      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x29e>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d50:	d013      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x29e>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d5a:	d00e      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x29e>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003d64:	d009      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x29e>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003d6e:	d004      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x29e>
 8003d70:	f44f 7152 	mov.w	r1, #840	; 0x348
 8003d74:	4828      	ldr	r0, [pc, #160]	; (8003e18 <HAL_RCC_ClockConfig+0x33c>)
 8003d76:	f7fd fe58 	bl	8001a2a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d7a:	4b28      	ldr	r3, [pc, #160]	; (8003e1c <HAL_RCC_ClockConfig+0x340>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	4925      	ldr	r1, [pc, #148]	; (8003e1c <HAL_RCC_ClockConfig+0x340>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d026      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d018      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x2f6>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da8:	d013      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x2f6>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003db2:	d00e      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x2f6>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003dbc:	d009      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x2f6>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003dc6:	d004      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x2f6>
 8003dc8:	f240 314f 	movw	r1, #847	; 0x34f
 8003dcc:	4812      	ldr	r0, [pc, #72]	; (8003e18 <HAL_RCC_ClockConfig+0x33c>)
 8003dce:	f7fd fe2c 	bl	8001a2a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dd2:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <HAL_RCC_ClockConfig+0x340>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	490e      	ldr	r1, [pc, #56]	; (8003e1c <HAL_RCC_ClockConfig+0x340>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003de6:	f000 f821 	bl	8003e2c <HAL_RCC_GetSysClockFreq>
 8003dea:	4601      	mov	r1, r0
 8003dec:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <HAL_RCC_ClockConfig+0x340>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	091b      	lsrs	r3, r3, #4
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	4a0a      	ldr	r2, [pc, #40]	; (8003e20 <HAL_RCC_ClockConfig+0x344>)
 8003df8:	5cd3      	ldrb	r3, [r2, r3]
 8003dfa:	fa21 f303 	lsr.w	r3, r1, r3
 8003dfe:	4a09      	ldr	r2, [pc, #36]	; (8003e24 <HAL_RCC_ClockConfig+0x348>)
 8003e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e02:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <HAL_RCC_ClockConfig+0x34c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fe fb64 	bl	80024d4 <HAL_InitTick>

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	08007ea0 	.word	0x08007ea0
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	08007f88 	.word	0x08007f88
 8003e24:	20000000 	.word	0x20000000
 8003e28:	20000004 	.word	0x20000004

08003e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003e32:	2300      	movs	r3, #0
 8003e34:	607b      	str	r3, [r7, #4]
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e42:	4b50      	ldr	r3, [pc, #320]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d007      	beq.n	8003e5e <HAL_RCC_GetSysClockFreq+0x32>
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	d008      	beq.n	8003e64 <HAL_RCC_GetSysClockFreq+0x38>
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f040 808d 	bne.w	8003f72 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e58:	4b4b      	ldr	r3, [pc, #300]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003e5a:	60bb      	str	r3, [r7, #8]
      break;
 8003e5c:	e08c      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e5e:	4b4b      	ldr	r3, [pc, #300]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x160>)
 8003e60:	60bb      	str	r3, [r7, #8]
      break;
 8003e62:	e089      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e64:	4b47      	ldr	r3, [pc, #284]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e6c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e6e:	4b45      	ldr	r3, [pc, #276]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d023      	beq.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e7a:	4b42      	ldr	r3, [pc, #264]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	099b      	lsrs	r3, r3, #6
 8003e80:	f04f 0400 	mov.w	r4, #0
 8003e84:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	ea03 0501 	and.w	r5, r3, r1
 8003e90:	ea04 0602 	and.w	r6, r4, r2
 8003e94:	4a3d      	ldr	r2, [pc, #244]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x160>)
 8003e96:	fb02 f106 	mul.w	r1, r2, r6
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	fb02 f205 	mul.w	r2, r2, r5
 8003ea0:	440a      	add	r2, r1
 8003ea2:	493a      	ldr	r1, [pc, #232]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x160>)
 8003ea4:	fba5 0101 	umull	r0, r1, r5, r1
 8003ea8:	1853      	adds	r3, r2, r1
 8003eaa:	4619      	mov	r1, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f04f 0400 	mov.w	r4, #0
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	4623      	mov	r3, r4
 8003eb6:	f7fc fa1b 	bl	80002f0 <__aeabi_uldivmod>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	460c      	mov	r4, r1
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	e049      	b.n	8003f56 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ec2:	4b30      	ldr	r3, [pc, #192]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x158>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	099b      	lsrs	r3, r3, #6
 8003ec8:	f04f 0400 	mov.w	r4, #0
 8003ecc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	ea03 0501 	and.w	r5, r3, r1
 8003ed8:	ea04 0602 	and.w	r6, r4, r2
 8003edc:	4629      	mov	r1, r5
 8003ede:	4632      	mov	r2, r6
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	f04f 0400 	mov.w	r4, #0
 8003ee8:	0154      	lsls	r4, r2, #5
 8003eea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003eee:	014b      	lsls	r3, r1, #5
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4622      	mov	r2, r4
 8003ef4:	1b49      	subs	r1, r1, r5
 8003ef6:	eb62 0206 	sbc.w	r2, r2, r6
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	f04f 0400 	mov.w	r4, #0
 8003f02:	0194      	lsls	r4, r2, #6
 8003f04:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f08:	018b      	lsls	r3, r1, #6
 8003f0a:	1a5b      	subs	r3, r3, r1
 8003f0c:	eb64 0402 	sbc.w	r4, r4, r2
 8003f10:	f04f 0100 	mov.w	r1, #0
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	00e2      	lsls	r2, r4, #3
 8003f1a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f1e:	00d9      	lsls	r1, r3, #3
 8003f20:	460b      	mov	r3, r1
 8003f22:	4614      	mov	r4, r2
 8003f24:	195b      	adds	r3, r3, r5
 8003f26:	eb44 0406 	adc.w	r4, r4, r6
 8003f2a:	f04f 0100 	mov.w	r1, #0
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	02a2      	lsls	r2, r4, #10
 8003f34:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003f38:	0299      	lsls	r1, r3, #10
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4614      	mov	r4, r2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	4621      	mov	r1, r4
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f04f 0400 	mov.w	r4, #0
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4623      	mov	r3, r4
 8003f4c:	f7fc f9d0 	bl	80002f0 <__aeabi_uldivmod>
 8003f50:	4603      	mov	r3, r0
 8003f52:	460c      	mov	r4, r1
 8003f54:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003f56:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x158>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	0c1b      	lsrs	r3, r3, #16
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	3301      	adds	r3, #1
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6e:	60bb      	str	r3, [r7, #8]
      break;
 8003f70:	e002      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f72:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003f74:	60bb      	str	r3, [r7, #8]
      break;
 8003f76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f78:	68bb      	ldr	r3, [r7, #8]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40023800 	.word	0x40023800
 8003f88:	00f42400 	.word	0x00f42400
 8003f8c:	017d7840 	.word	0x017d7840

08003f90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f94:	4b03      	ldr	r3, [pc, #12]	; (8003fa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f96:	681b      	ldr	r3, [r3, #0]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	20000000 	.word	0x20000000

08003fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fac:	f7ff fff0 	bl	8003f90 <HAL_RCC_GetHCLKFreq>
 8003fb0:	4601      	mov	r1, r0
 8003fb2:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	0a9b      	lsrs	r3, r3, #10
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	4a03      	ldr	r2, [pc, #12]	; (8003fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fbe:	5cd3      	ldrb	r3, [r2, r3]
 8003fc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	08007f98 	.word	0x08007f98

08003fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fd4:	f7ff ffdc 	bl	8003f90 <HAL_RCC_GetHCLKFreq>
 8003fd8:	4601      	mov	r1, r0
 8003fda:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	0b5b      	lsrs	r3, r3, #13
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	4a03      	ldr	r2, [pc, #12]	; (8003ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fe6:	5cd3      	ldrb	r3, [r2, r3]
 8003fe8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	08007f98 	.word	0x08007f98

08003ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004000:	2300      	movs	r3, #0
 8004002:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004004:	2300      	movs	r3, #0
 8004006:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004008:	2300      	movs	r3, #0
 800400a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800400c:	2300      	movs	r3, #0
 800400e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004010:	2300      	movs	r3, #0
 8004012:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	f040 809e 	bne.w	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	f040 8097 	bne.w	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	2b00      	cmp	r3, #0
 800403a:	f040 8090 	bne.w	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	f040 8089 	bne.w	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004054:	2b00      	cmp	r3, #0
 8004056:	f040 8082 	bne.w	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d17b      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800406e:	2b00      	cmp	r3, #0
 8004070:	d175      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800407a:	2b00      	cmp	r3, #0
 800407c:	d16f      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004086:	2b00      	cmp	r3, #0
 8004088:	d169      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d163      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d15d      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d157      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d151      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d14b      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d145      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d13f      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d139      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d133      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d12d      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d127      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d121      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d11b      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d115      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10f      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0320 	and.w	r3, r3, #32
 8004152:	2b00      	cmp	r3, #0
 8004154:	d103      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004156:	2174      	movs	r1, #116	; 0x74
 8004158:	48a2      	ldr	r0, [pc, #648]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800415a:	f7fd fc66 	bl	8001a2a <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d01f      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416e:	2b00      	cmp	r3, #0
 8004170:	d008      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004176:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800417a:	d003      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800417c:	217a      	movs	r1, #122	; 0x7a
 800417e:	4899      	ldr	r0, [pc, #612]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004180:	f7fd fc53 	bl	8001a2a <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004184:	4b98      	ldr	r3, [pc, #608]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	4a97      	ldr	r2, [pc, #604]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 800418a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800418e:	6093      	str	r3, [r2, #8]
 8004190:	4b95      	ldr	r3, [pc, #596]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004198:	4993      	ldr	r1, [pc, #588]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 800419a:	4313      	orrs	r3, r2
 800419c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      plli2sused = 1;
 80041a6:	2301      	movs	r3, #1
 80041a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d02e      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d012      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041c6:	d00d      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041d0:	d008      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041da:	d003      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80041dc:	218a      	movs	r1, #138	; 0x8a
 80041de:	4881      	ldr	r0, [pc, #516]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80041e0:	f7fd fc23 	bl	8001a2a <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041e4:	4b80      	ldr	r3, [pc, #512]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80041e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f2:	497d      	ldr	r1, [pc, #500]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004202:	d101      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x210>
    {
      plli2sused = 1;
 8004204:	2301      	movs	r3, #1
 8004206:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      pllsaiused = 1;
 8004210:	2301      	movs	r3, #1
 8004212:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d02e      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	2b00      	cmp	r3, #0
 8004226:	d012      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004230:	d00d      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800423a:	d008      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x256>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004244:	d003      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004246:	219e      	movs	r1, #158	; 0x9e
 8004248:	4866      	ldr	r0, [pc, #408]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800424a:	f7fd fbee 	bl	8001a2a <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800424e:	4b66      	ldr	r3, [pc, #408]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8004250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004254:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	4962      	ldr	r1, [pc, #392]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800426c:	d101      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      plli2sused = 1;
 800426e:	2301      	movs	r3, #1
 8004270:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      pllsaiused = 1;
 800427a:	2301      	movs	r3, #1
 800427c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
      plli2sused = 1;
 800428a:	2301      	movs	r3, #1
 800428c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 8187 	beq.w	80045aa <HAL_RCCEx_PeriphCLKConfig+0x5b2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042a4:	f000 80eb 	beq.w	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042b0:	f000 80e5 	beq.w	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b8:	4a4c      	ldr	r2, [pc, #304]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	f000 80df 	beq.w	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c4:	4a4a      	ldr	r2, [pc, #296]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	f000 80d9 	beq.w	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d0:	4a48      	ldr	r2, [pc, #288]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	f000 80d3 	beq.w	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042dc:	4a46      	ldr	r2, [pc, #280]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	f000 80cd 	beq.w	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e8:	4a44      	ldr	r2, [pc, #272]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x404>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	f000 80c7 	beq.w	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	4a42      	ldr	r2, [pc, #264]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	f000 80c1 	beq.w	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004300:	4a40      	ldr	r2, [pc, #256]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	f000 80bb 	beq.w	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430c:	4a3e      	ldr	r2, [pc, #248]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x410>)
 800430e:	4293      	cmp	r3, r2
 8004310:	f000 80b5 	beq.w	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004318:	4a3c      	ldr	r2, [pc, #240]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x414>)
 800431a:	4293      	cmp	r3, r2
 800431c:	f000 80af 	beq.w	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004324:	4a3a      	ldr	r2, [pc, #232]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 8004326:	4293      	cmp	r3, r2
 8004328:	f000 80a9 	beq.w	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004330:	4a38      	ldr	r2, [pc, #224]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	f000 80a3 	beq.w	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433c:	4a36      	ldr	r2, [pc, #216]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 800433e:	4293      	cmp	r3, r2
 8004340:	f000 809d 	beq.w	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004348:	4a34      	ldr	r2, [pc, #208]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800434a:	4293      	cmp	r3, r2
 800434c:	f000 8097 	beq.w	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004354:	4a32      	ldr	r2, [pc, #200]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8004356:	4293      	cmp	r3, r2
 8004358:	f000 8091 	beq.w	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	4a30      	ldr	r2, [pc, #192]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	f000 808b 	beq.w	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436c:	4a2e      	ldr	r2, [pc, #184]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 800436e:	4293      	cmp	r3, r2
 8004370:	f000 8085 	beq.w	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	4a2c      	ldr	r2, [pc, #176]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d07f      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004382:	4a2b      	ldr	r2, [pc, #172]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d07a      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438c:	4a29      	ldr	r2, [pc, #164]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d075      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004396:	4a28      	ldr	r2, [pc, #160]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d070      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a0:	4a26      	ldr	r2, [pc, #152]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d06b      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043aa:	4a25      	ldr	r2, [pc, #148]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d066      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b4:	4a23      	ldr	r2, [pc, #140]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d061      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043be:	4a22      	ldr	r2, [pc, #136]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d05c      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c8:	4a20      	ldr	r2, [pc, #128]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d057      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	4a1f      	ldr	r2, [pc, #124]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d052      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	4a1d      	ldr	r2, [pc, #116]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d04d      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 80043e2:	e039      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80043e4:	08007ed8 	.word	0x08007ed8
 80043e8:	40023800 	.word	0x40023800
 80043ec:	00020300 	.word	0x00020300
 80043f0:	00030300 	.word	0x00030300
 80043f4:	00040300 	.word	0x00040300
 80043f8:	00050300 	.word	0x00050300
 80043fc:	00060300 	.word	0x00060300
 8004400:	00070300 	.word	0x00070300
 8004404:	00080300 	.word	0x00080300
 8004408:	00090300 	.word	0x00090300
 800440c:	000a0300 	.word	0x000a0300
 8004410:	000b0300 	.word	0x000b0300
 8004414:	000c0300 	.word	0x000c0300
 8004418:	000d0300 	.word	0x000d0300
 800441c:	000e0300 	.word	0x000e0300
 8004420:	000f0300 	.word	0x000f0300
 8004424:	00100300 	.word	0x00100300
 8004428:	00110300 	.word	0x00110300
 800442c:	00120300 	.word	0x00120300
 8004430:	00130300 	.word	0x00130300
 8004434:	00140300 	.word	0x00140300
 8004438:	00150300 	.word	0x00150300
 800443c:	00160300 	.word	0x00160300
 8004440:	00170300 	.word	0x00170300
 8004444:	00180300 	.word	0x00180300
 8004448:	00190300 	.word	0x00190300
 800444c:	001a0300 	.word	0x001a0300
 8004450:	001b0300 	.word	0x001b0300
 8004454:	001c0300 	.word	0x001c0300
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	4a44      	ldr	r2, [pc, #272]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d00d      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	4a43      	ldr	r2, [pc, #268]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d008      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	4a41      	ldr	r2, [pc, #260]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d003      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004476:	21b9      	movs	r1, #185	; 0xb9
 8004478:	4840      	ldr	r0, [pc, #256]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800447a:	f7fd fad6 	bl	8001a2a <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800447e:	4b40      	ldr	r3, [pc, #256]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	4a3f      	ldr	r2, [pc, #252]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004488:	6413      	str	r3, [r2, #64]	; 0x40
 800448a:	4b3d      	ldr	r3, [pc, #244]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004492:	60bb      	str	r3, [r7, #8]
 8004494:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004496:	4b3b      	ldr	r3, [pc, #236]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a3a      	ldr	r2, [pc, #232]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800449c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a2:	f7fe f85b 	bl	800255c <HAL_GetTick>
 80044a6:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044a8:	e009      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044aa:	f7fe f857 	bl	800255c <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b64      	cmp	r3, #100	; 0x64
 80044b6:	d902      	bls.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x4c6>
      {
        return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	f000 be00 	b.w	80050be <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044be:	4b31      	ldr	r3, [pc, #196]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0ef      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044ca:	4b2d      	ldr	r3, [pc, #180]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d036      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d02f      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044e8:	4b25      	ldr	r3, [pc, #148]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80044ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044f2:	4b23      	ldr	r3, [pc, #140]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80044f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f6:	4a22      	ldr	r2, [pc, #136]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80044f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044fe:	4b20      	ldr	r3, [pc, #128]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	4a1f      	ldr	r2, [pc, #124]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004508:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800450a:	4a1d      	ldr	r2, [pc, #116]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004510:	4b1b      	ldr	r3, [pc, #108]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b01      	cmp	r3, #1
 800451a:	d115      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x550>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451c:	f7fe f81e 	bl	800255c <HAL_GetTick>
 8004520:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004522:	e00b      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x544>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004524:	f7fe f81a 	bl	800255c <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004532:	4293      	cmp	r3, r2
 8004534:	d902      	bls.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x544>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	f000 bdc1 	b.w	80050be <HAL_RCCEx_PeriphCLKConfig+0x10c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453c:	4b10      	ldr	r3, [pc, #64]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800453e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0ed      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x52c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004550:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004554:	d11a      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004556:	4b0a      	ldr	r3, [pc, #40]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004562:	4b09      	ldr	r3, [pc, #36]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004564:	400b      	ands	r3, r1
 8004566:	4906      	ldr	r1, [pc, #24]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004568:	4313      	orrs	r3, r2
 800456a:	608b      	str	r3, [r1, #8]
 800456c:	e014      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 800456e:	bf00      	nop
 8004570:	001d0300 	.word	0x001d0300
 8004574:	001e0300 	.word	0x001e0300
 8004578:	001f0300 	.word	0x001f0300
 800457c:	08007ed8 	.word	0x08007ed8
 8004580:	40023800 	.word	0x40023800
 8004584:	40007000 	.word	0x40007000
 8004588:	0ffffcff 	.word	0x0ffffcff
 800458c:	4ba7      	ldr	r3, [pc, #668]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	4aa6      	ldr	r2, [pc, #664]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004592:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004596:	6093      	str	r3, [r2, #8]
 8004598:	4ba4      	ldr	r3, [pc, #656]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800459a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a4:	49a1      	ldr	r1, [pc, #644]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0310 	and.w	r3, r3, #16
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d01d      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d008      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045c6:	d003      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 80045c8:	21f3      	movs	r1, #243	; 0xf3
 80045ca:	4899      	ldr	r0, [pc, #612]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80045cc:	f7fd fa2d 	bl	8001a2a <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045d0:	4b96      	ldr	r3, [pc, #600]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045d6:	4a95      	ldr	r2, [pc, #596]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045dc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80045e0:	4b92      	ldr	r3, [pc, #584]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045e2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ea:	4990      	ldr	r1, [pc, #576]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d01c      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00d      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800460a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800460e:	d008      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004614:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004618:	d003      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 800461a:	21fd      	movs	r1, #253	; 0xfd
 800461c:	4884      	ldr	r0, [pc, #528]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800461e:	f7fd fa04 	bl	8001a2a <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004622:	4b82      	ldr	r3, [pc, #520]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004628:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004630:	497e      	ldr	r1, [pc, #504]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01d      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00e      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004650:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004654:	d009      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800465a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800465e:	d004      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004660:	f240 1107 	movw	r1, #263	; 0x107
 8004664:	4872      	ldr	r0, [pc, #456]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004666:	f7fd f9e0 	bl	8001a2a <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800466a:	4b70      	ldr	r3, [pc, #448]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800466c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004670:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004678:	496c      	ldr	r1, [pc, #432]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d01d      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00e      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004698:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800469c:	d009      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046a6:	d004      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 80046a8:	f240 1111 	movw	r1, #273	; 0x111
 80046ac:	4860      	ldr	r0, [pc, #384]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80046ae:	f7fd f9bc 	bl	8001a2a <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046b2:	4b5e      	ldr	r3, [pc, #376]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80046b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046c0:	495a      	ldr	r1, [pc, #360]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01d      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x718>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00e      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x702>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046e4:	d009      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x702>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046ee:	d004      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x702>
 80046f0:	f240 111b 	movw	r1, #283	; 0x11b
 80046f4:	484e      	ldr	r0, [pc, #312]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80046f6:	f7fd f998 	bl	8001a2a <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046fa:	4b4c      	ldr	r3, [pc, #304]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80046fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004700:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004708:	4948      	ldr	r1, [pc, #288]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800470a:	4313      	orrs	r3, r2
 800470c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004718:	2b00      	cmp	r3, #0
 800471a:	d01f      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x764>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004720:	2b00      	cmp	r3, #0
 8004722:	d010      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004728:	2b01      	cmp	r3, #1
 800472a:	d00c      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004730:	2b03      	cmp	r3, #3
 8004732:	d008      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004738:	2b02      	cmp	r3, #2
 800473a:	d004      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 800473c:	f240 1125 	movw	r1, #293	; 0x125
 8004740:	483b      	ldr	r0, [pc, #236]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004742:	f7fd f972 	bl	8001a2a <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004746:	4b39      	ldr	r3, [pc, #228]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474c:	f023 0203 	bic.w	r2, r3, #3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004754:	4935      	ldr	r1, [pc, #212]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004764:	2b00      	cmp	r3, #0
 8004766:	d01f      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800476c:	2b00      	cmp	r3, #0
 800476e:	d010      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004774:	2b04      	cmp	r3, #4
 8004776:	d00c      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800477c:	2b0c      	cmp	r3, #12
 800477e:	d008      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004784:	2b08      	cmp	r3, #8
 8004786:	d004      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8004788:	f240 112f 	movw	r1, #303	; 0x12f
 800478c:	4828      	ldr	r0, [pc, #160]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800478e:	f7fd f94c 	bl	8001a2a <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004792:	4b26      	ldr	r3, [pc, #152]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004798:	f023 020c 	bic.w	r2, r3, #12
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a0:	4922      	ldr	r1, [pc, #136]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01f      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d010      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d00c      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c8:	2b30      	cmp	r3, #48	; 0x30
 80047ca:	d008      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d0:	2b20      	cmp	r3, #32
 80047d2:	d004      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80047d4:	f240 1139 	movw	r1, #313	; 0x139
 80047d8:	4815      	ldr	r0, [pc, #84]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80047da:	f7fd f926 	bl	8001a2a <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047de:	4b13      	ldr	r3, [pc, #76]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ec:	490f      	ldr	r1, [pc, #60]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d024      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004804:	2b00      	cmp	r3, #0
 8004806:	d015      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800480c:	2b40      	cmp	r3, #64	; 0x40
 800480e:	d011      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004814:	2bc0      	cmp	r3, #192	; 0xc0
 8004816:	d00d      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800481c:	2b80      	cmp	r3, #128	; 0x80
 800481e:	d009      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004820:	f240 1143 	movw	r1, #323	; 0x143
 8004824:	4802      	ldr	r0, [pc, #8]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004826:	f7fd f900 	bl	8001a2a <assert_failed>
 800482a:	e003      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800482c:	40023800 	.word	0x40023800
 8004830:	08007ed8 	.word	0x08007ed8

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004834:	4bae      	ldr	r3, [pc, #696]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004842:	49ab      	ldr	r1, [pc, #684]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004844:	4313      	orrs	r3, r2
 8004846:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004852:	2b00      	cmp	r3, #0
 8004854:	d022      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485a:	2b00      	cmp	r3, #0
 800485c:	d013      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004866:	d00e      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004870:	d009      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800487a:	d004      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 800487c:	f240 114d 	movw	r1, #333	; 0x14d
 8004880:	489c      	ldr	r0, [pc, #624]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004882:	f7fd f8d2 	bl	8001a2a <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004886:	4b9a      	ldr	r3, [pc, #616]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004894:	4996      	ldr	r1, [pc, #600]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d022      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d013      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b8:	d00e      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048c2:	d009      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048cc:	d004      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 80048ce:	f240 1157 	movw	r1, #343	; 0x157
 80048d2:	4888      	ldr	r0, [pc, #544]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80048d4:	f7fd f8a9 	bl	8001a2a <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80048d8:	4b85      	ldr	r3, [pc, #532]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80048da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e6:	4982      	ldr	r1, [pc, #520]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d022      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d013      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x932>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800490a:	d00e      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x932>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004910:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004914:	d009      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x932>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800491e:	d004      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x932>
 8004920:	f240 1161 	movw	r1, #353	; 0x161
 8004924:	4873      	ldr	r0, [pc, #460]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004926:	f7fd f880 	bl	8001a2a <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800492a:	4b71      	ldr	r3, [pc, #452]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800492c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004930:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004938:	496d      	ldr	r1, [pc, #436]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d022      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004950:	2b00      	cmp	r3, #0
 8004952:	d013      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004958:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800495c:	d00e      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x984>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004962:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004966:	d009      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800496c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004970:	d004      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004972:	f240 116b 	movw	r1, #363	; 0x16b
 8004976:	485f      	ldr	r0, [pc, #380]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004978:	f7fd f857 	bl	8001a2a <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800497c:	4b5c      	ldr	r3, [pc, #368]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004982:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498a:	4959      	ldr	r1, [pc, #356]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d018      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049a6:	d008      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d004      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80049b0:	f240 1175 	movw	r1, #373	; 0x175
 80049b4:	484f      	ldr	r0, [pc, #316]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80049b6:	f7fd f838 	bl	8001a2a <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049ba:	4b4d      	ldr	r3, [pc, #308]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80049bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049c8:	4949      	ldr	r1, [pc, #292]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d01f      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049e4:	d008      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d004      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80049ee:	f240 117f 	movw	r1, #383	; 0x17f
 80049f2:	4840      	ldr	r0, [pc, #256]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80049f4:	f7fd f819 	bl	8001a2a <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80049f8:	4b3d      	ldr	r3, [pc, #244]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80049fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fe:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a06:	493a      	ldr	r1, [pc, #232]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a16:	d101      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      pllsaiused = 1;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    pllsaiused = 1;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d022      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xa86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d013      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a48:	d00e      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a52:	d009      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a5c:	d004      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004a5e:	f240 1197 	movw	r1, #407	; 0x197
 8004a62:	4824      	ldr	r0, [pc, #144]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004a64:	f7fc ffe1 	bl	8001a2a <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a68:	4b21      	ldr	r3, [pc, #132]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a76:	491e      	ldr	r1, [pc, #120]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d01b      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0xaca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a94:	d009      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d004      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004aa0:	f240 11a1 	movw	r1, #417	; 0x1a1
 8004aa4:	4813      	ldr	r0, [pc, #76]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004aa6:	f7fc ffc0 	bl	8001a2a <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004aaa:	4b11      	ldr	r3, [pc, #68]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aba:	490d      	ldr	r1, [pc, #52]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d020      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ad8:	d00e      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d009      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8004ae4:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8004ae8:	4802      	ldr	r0, [pc, #8]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004aea:	f7fc ff9e 	bl	8001a2a <assert_failed>
 8004aee:	e003      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8004af0:	40023800 	.word	0x40023800
 8004af4:	08007ed8 	.word	0x08007ed8

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004af8:	4b35      	ldr	r3, [pc, #212]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b08:	4931      	ldr	r1, [pc, #196]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d01b      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xb44>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b30:	d004      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xb44>
 8004b32:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8004b36:	4827      	ldr	r0, [pc, #156]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004b38:	f7fc ff77 	bl	8001a2a <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b3c:	4b24      	ldr	r3, [pc, #144]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004b3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b42:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4c:	4920      	ldr	r1, [pc, #128]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01b      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b74:	d004      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004b76:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004b7a:	4816      	ldr	r0, [pc, #88]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004b7c:	f7fc ff55 	bl	8001a2a <assert_failed>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b80:	4b13      	ldr	r3, [pc, #76]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b86:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b90:	490f      	ldr	r1, [pc, #60]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d005      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ba6:	f040 8153 	bne.w	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xe58>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004baa:	4b09      	ldr	r3, [pc, #36]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a08      	ldr	r2, [pc, #32]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004bb0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb6:	f7fd fcd1 	bl	800255c <HAL_GetTick>
 8004bba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bbc:	e00c      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bbe:	f7fd fccd 	bl	800255c <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b64      	cmp	r3, #100	; 0x64
 8004bca:	d905      	bls.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e276      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	08007ed8 	.word	0x08007ed8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bd8:	4ba9      	ldr	r3, [pc, #676]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1ec      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xbc6>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b31      	cmp	r3, #49	; 0x31
 8004bea:	d904      	bls.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004bf4:	d904      	bls.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004bf6:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8004bfa:	48a2      	ldr	r0, [pc, #648]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004bfc:	f7fc ff15 	bl	8001a2a <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d02e      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d12a      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d903      	bls.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	2b07      	cmp	r3, #7
 8004c22:	d904      	bls.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8004c24:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8004c28:	4896      	ldr	r0, [pc, #600]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004c2a:	f7fc fefe 	bl	8001a2a <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c2e:	4b94      	ldr	r3, [pc, #592]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c34:	0c1b      	lsrs	r3, r3, #16
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c3c:	4b90      	ldr	r3, [pc, #576]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c42:	0e1b      	lsrs	r3, r3, #24
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	019a      	lsls	r2, r3, #6
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	041b      	lsls	r3, r3, #16
 8004c54:	431a      	orrs	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	061b      	lsls	r3, r3, #24
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	071b      	lsls	r3, r3, #28
 8004c62:	4987      	ldr	r1, [pc, #540]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d004      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xc88>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c7e:	d00a      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d048      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xd26>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c94:	d143      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d903      	bls.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xcae>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	2b0f      	cmp	r3, #15
 8004ca4:	d904      	bls.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 8004ca6:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8004caa:	4876      	ldr	r0, [pc, #472]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004cac:	f7fc febd 	bl	8001a2a <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d003      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	2b20      	cmp	r3, #32
 8004cbe:	d904      	bls.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 8004cc0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004cc4:	486f      	ldr	r0, [pc, #444]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004cc6:	f7fc feb0 	bl	8001a2a <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004cca:	4b6d      	ldr	r3, [pc, #436]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cd0:	0c1b      	lsrs	r3, r3, #16
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004cd8:	4b69      	ldr	r3, [pc, #420]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cde:	0f1b      	lsrs	r3, r3, #28
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	019a      	lsls	r2, r3, #6
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	041b      	lsls	r3, r3, #16
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	061b      	lsls	r3, r3, #24
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	071b      	lsls	r3, r3, #28
 8004cfe:	4960      	ldr	r1, [pc, #384]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d06:	4b5e      	ldr	r3, [pc, #376]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d0c:	f023 021f 	bic.w	r2, r3, #31
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	3b01      	subs	r3, #1
 8004d16:	495a      	ldr	r1, [pc, #360]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d032      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0xd98>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d010      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d00c      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d008      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d004      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8004d4a:	f240 2107 	movw	r1, #519	; 0x207
 8004d4e:	484d      	ldr	r0, [pc, #308]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004d50:	f7fc fe6b 	bl	8001a2a <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d54:	4b4a      	ldr	r3, [pc, #296]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d5a:	0e1b      	lsrs	r3, r3, #24
 8004d5c:	f003 030f 	and.w	r3, r3, #15
 8004d60:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d62:	4b47      	ldr	r3, [pc, #284]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d68:	0f1b      	lsrs	r3, r3, #28
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	019a      	lsls	r2, r3, #6
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	041b      	lsls	r3, r3, #16
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	061b      	lsls	r3, r3, #24
 8004d82:	431a      	orrs	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	071b      	lsls	r3, r3, #28
 8004d88:	493d      	ldr	r1, [pc, #244]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d040      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xe26>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d010      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d00c      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d008      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	2b03      	cmp	r3, #3
 8004dba:	d004      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004dbc:	f240 2116 	movw	r1, #534	; 0x216
 8004dc0:	4830      	ldr	r0, [pc, #192]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004dc2:	f7fc fe32 	bl	8001a2a <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d903      	bls.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b07      	cmp	r3, #7
 8004dd4:	d904      	bls.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
 8004dd6:	f240 2117 	movw	r1, #535	; 0x217
 8004dda:	482a      	ldr	r0, [pc, #168]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004ddc:	f7fc fe25 	bl	8001a2a <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d903      	bls.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	2b0f      	cmp	r3, #15
 8004dee:	d904      	bls.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0xe02>
 8004df0:	f44f 7106 	mov.w	r1, #536	; 0x218
 8004df4:	4823      	ldr	r0, [pc, #140]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004df6:	f7fc fe18 	bl	8001a2a <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	019a      	lsls	r2, r3, #6
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	041b      	lsls	r3, r3, #16
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	061b      	lsls	r3, r3, #24
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	071b      	lsls	r3, r3, #28
 8004e16:	491a      	ldr	r1, [pc, #104]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e1e:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a17      	ldr	r2, [pc, #92]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e2a:	f7fd fb97 	bl	800255c <HAL_GetTick>
 8004e2e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e30:	e008      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e32:	f7fd fb93 	bl	800255c <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b64      	cmp	r3, #100	; 0x64
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e13c      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e44:	4b0e      	ldr	r3, [pc, #56]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0f0      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	f040 8132 	bne.w	80050bc <HAL_RCCEx_PeriphCLKConfig+0x10c4>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e58:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a08      	ldr	r2, [pc, #32]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e64:	f7fd fb7a 	bl	800255c <HAL_GetTick>
 8004e68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e6a:	e00d      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xe90>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e6c:	f7fd fb76 	bl	800255c <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b64      	cmp	r3, #100	; 0x64
 8004e78:	d906      	bls.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xe90>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e11f      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 8004e7e:	bf00      	nop
 8004e80:	40023800 	.word	0x40023800
 8004e84:	08007ed8 	.word	0x08007ed8
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e88:	4b8f      	ldr	r3, [pc, #572]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e94:	d0ea      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0xe74>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	2b31      	cmp	r3, #49	; 0x31
 8004e9c:	d904      	bls.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xeb0>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004ea6:	d904      	bls.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xeba>
 8004ea8:	f240 2146 	movw	r1, #582	; 0x246
 8004eac:	4887      	ldr	r0, [pc, #540]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004eae:	f7fc fdbc 	bl	8001a2a <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xece>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d009      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xee2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d048      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d144      	bne.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d903      	bls.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xef2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	2b0f      	cmp	r3, #15
 8004ee8:	d904      	bls.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xefc>
 8004eea:	f240 214d 	movw	r1, #589	; 0x24d
 8004eee:	4877      	ldr	r0, [pc, #476]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004ef0:	f7fc fd9b 	bl	8001a2a <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f00:	2b20      	cmp	r3, #32
 8004f02:	d904      	bls.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004f04:	f240 214f 	movw	r1, #591	; 0x24f
 8004f08:	4870      	ldr	r0, [pc, #448]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004f0a:	f7fc fd8e 	bl	8001a2a <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f0e:	4b6e      	ldr	r3, [pc, #440]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f14:	0c1b      	lsrs	r3, r3, #16
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f1c:	4b6a      	ldr	r3, [pc, #424]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f22:	0f1b      	lsrs	r3, r3, #28
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	019a      	lsls	r2, r3, #6
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	041b      	lsls	r3, r3, #16
 8004f34:	431a      	orrs	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	061b      	lsls	r3, r3, #24
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	071b      	lsls	r3, r3, #28
 8004f42:	4961      	ldr	r1, [pc, #388]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f4a:	4b5f      	ldr	r3, [pc, #380]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f50:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	021b      	lsls	r3, r3, #8
 8004f5c:	495a      	ldr	r1, [pc, #360]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d037      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f78:	d132      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d010      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d00c      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d008      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	d004      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004f9a:	f240 2162 	movw	r1, #610	; 0x262
 8004f9e:	484b      	ldr	r0, [pc, #300]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004fa0:	f7fc fd43 	bl	8001a2a <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004fa4:	4b48      	ldr	r3, [pc, #288]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004faa:	0e1b      	lsrs	r3, r3, #24
 8004fac:	f003 030f 	and.w	r3, r3, #15
 8004fb0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fb2:	4b45      	ldr	r3, [pc, #276]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb8:	0f1b      	lsrs	r3, r3, #28
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	019a      	lsls	r2, r3, #6
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	041b      	lsls	r3, r3, #16
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	061b      	lsls	r3, r3, #24
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	071b      	lsls	r3, r3, #28
 8004fd8:	493b      	ldr	r1, [pc, #236]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0308 	and.w	r3, r3, #8
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d04d      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1090>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d903      	bls.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1004>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	2b07      	cmp	r3, #7
 8004ffa:	d904      	bls.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x100e>
 8004ffc:	f240 2171 	movw	r1, #625	; 0x271
 8005000:	4832      	ldr	r0, [pc, #200]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8005002:	f7fc fd12 	bl	8001a2a <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500a:	2b00      	cmp	r3, #0
 800500c:	d013      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005016:	d00e      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005020:	d009      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005026:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800502a:	d004      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 800502c:	f240 2172 	movw	r1, #626	; 0x272
 8005030:	4826      	ldr	r0, [pc, #152]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8005032:	f7fc fcfa 	bl	8001a2a <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005036:	4b24      	ldr	r3, [pc, #144]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503c:	0e1b      	lsrs	r3, r3, #24
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005044:	4b20      	ldr	r3, [pc, #128]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504a:	0c1b      	lsrs	r3, r3, #16
 800504c:	f003 0303 	and.w	r3, r3, #3
 8005050:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	019a      	lsls	r2, r3, #6
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	041b      	lsls	r3, r3, #16
 800505c:	431a      	orrs	r2, r3
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	061b      	lsls	r3, r3, #24
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	071b      	lsls	r3, r3, #28
 800506a:	4917      	ldr	r1, [pc, #92]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005072:	4b15      	ldr	r3, [pc, #84]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005078:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005080:	4911      	ldr	r1, [pc, #68]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005082:	4313      	orrs	r3, r2
 8005084:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005088:	4b0f      	ldr	r3, [pc, #60]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a0e      	ldr	r2, [pc, #56]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800508e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005092:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005094:	f7fd fa62 	bl	800255c <HAL_GetTick>
 8005098:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800509a:	e008      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800509c:	f7fd fa5e 	bl	800255c <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b64      	cmp	r3, #100	; 0x64
 80050a8:	d901      	bls.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x10b6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e007      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050ae:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050ba:	d1ef      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
      }
    }
  }
  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3720      	adds	r7, #32
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	40023800 	.word	0x40023800
 80050cc:	08007ed8 	.word	0x08007ed8

080050d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e199      	b.n	8005416 <HAL_SPI_Init+0x346>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a94      	ldr	r2, [pc, #592]	; (8005338 <HAL_SPI_Init+0x268>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d01d      	beq.n	8005128 <HAL_SPI_Init+0x58>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a92      	ldr	r2, [pc, #584]	; (800533c <HAL_SPI_Init+0x26c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d018      	beq.n	8005128 <HAL_SPI_Init+0x58>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a91      	ldr	r2, [pc, #580]	; (8005340 <HAL_SPI_Init+0x270>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d013      	beq.n	8005128 <HAL_SPI_Init+0x58>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a8f      	ldr	r2, [pc, #572]	; (8005344 <HAL_SPI_Init+0x274>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00e      	beq.n	8005128 <HAL_SPI_Init+0x58>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a8e      	ldr	r2, [pc, #568]	; (8005348 <HAL_SPI_Init+0x278>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d009      	beq.n	8005128 <HAL_SPI_Init+0x58>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a8c      	ldr	r2, [pc, #560]	; (800534c <HAL_SPI_Init+0x27c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d004      	beq.n	8005128 <HAL_SPI_Init+0x58>
 800511e:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8005122:	488b      	ldr	r0, [pc, #556]	; (8005350 <HAL_SPI_Init+0x280>)
 8005124:	f7fc fc81 	bl	8001a2a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d009      	beq.n	8005144 <HAL_SPI_Init+0x74>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005138:	d004      	beq.n	8005144 <HAL_SPI_Init+0x74>
 800513a:	f240 1145 	movw	r1, #325	; 0x145
 800513e:	4884      	ldr	r0, [pc, #528]	; (8005350 <HAL_SPI_Init+0x280>)
 8005140:	f7fc fc73 	bl	8001a2a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00e      	beq.n	800516a <HAL_SPI_Init+0x9a>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005154:	d009      	beq.n	800516a <HAL_SPI_Init+0x9a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800515e:	d004      	beq.n	800516a <HAL_SPI_Init+0x9a>
 8005160:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005164:	487a      	ldr	r0, [pc, #488]	; (8005350 <HAL_SPI_Init+0x280>)
 8005166:	f7fc fc60 	bl	8001a2a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005172:	d040      	beq.n	80051f6 <HAL_SPI_Init+0x126>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800517c:	d03b      	beq.n	80051f6 <HAL_SPI_Init+0x126>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8005186:	d036      	beq.n	80051f6 <HAL_SPI_Init+0x126>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005190:	d031      	beq.n	80051f6 <HAL_SPI_Init+0x126>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 800519a:	d02c      	beq.n	80051f6 <HAL_SPI_Init+0x126>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80051a4:	d027      	beq.n	80051f6 <HAL_SPI_Init+0x126>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80051ae:	d022      	beq.n	80051f6 <HAL_SPI_Init+0x126>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051b8:	d01d      	beq.n	80051f6 <HAL_SPI_Init+0x126>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051c2:	d018      	beq.n	80051f6 <HAL_SPI_Init+0x126>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80051cc:	d013      	beq.n	80051f6 <HAL_SPI_Init+0x126>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80051d6:	d00e      	beq.n	80051f6 <HAL_SPI_Init+0x126>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e0:	d009      	beq.n	80051f6 <HAL_SPI_Init+0x126>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051ea:	d004      	beq.n	80051f6 <HAL_SPI_Init+0x126>
 80051ec:	f240 1147 	movw	r1, #327	; 0x147
 80051f0:	4857      	ldr	r0, [pc, #348]	; (8005350 <HAL_SPI_Init+0x280>)
 80051f2:	f7fc fc1a 	bl	8001a2a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051fe:	d00d      	beq.n	800521c <HAL_SPI_Init+0x14c>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d009      	beq.n	800521c <HAL_SPI_Init+0x14c>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005210:	d004      	beq.n	800521c <HAL_SPI_Init+0x14c>
 8005212:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005216:	484e      	ldr	r0, [pc, #312]	; (8005350 <HAL_SPI_Init+0x280>)
 8005218:	f7fc fc07 	bl	8001a2a <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005220:	2b08      	cmp	r3, #8
 8005222:	d008      	beq.n	8005236 <HAL_SPI_Init+0x166>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005228:	2b00      	cmp	r3, #0
 800522a:	d004      	beq.n	8005236 <HAL_SPI_Init+0x166>
 800522c:	f240 1149 	movw	r1, #329	; 0x149
 8005230:	4847      	ldr	r0, [pc, #284]	; (8005350 <HAL_SPI_Init+0x280>)
 8005232:	f7fc fbfa 	bl	8001a2a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d020      	beq.n	8005280 <HAL_SPI_Init+0x1b0>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	2b08      	cmp	r3, #8
 8005244:	d01c      	beq.n	8005280 <HAL_SPI_Init+0x1b0>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	2b10      	cmp	r3, #16
 800524c:	d018      	beq.n	8005280 <HAL_SPI_Init+0x1b0>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	2b18      	cmp	r3, #24
 8005254:	d014      	beq.n	8005280 <HAL_SPI_Init+0x1b0>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	2b20      	cmp	r3, #32
 800525c:	d010      	beq.n	8005280 <HAL_SPI_Init+0x1b0>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	2b28      	cmp	r3, #40	; 0x28
 8005264:	d00c      	beq.n	8005280 <HAL_SPI_Init+0x1b0>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	2b30      	cmp	r3, #48	; 0x30
 800526c:	d008      	beq.n	8005280 <HAL_SPI_Init+0x1b0>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	2b38      	cmp	r3, #56	; 0x38
 8005274:	d004      	beq.n	8005280 <HAL_SPI_Init+0x1b0>
 8005276:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800527a:	4835      	ldr	r0, [pc, #212]	; (8005350 <HAL_SPI_Init+0x280>)
 800527c:	f7fc fbd5 	bl	8001a2a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d008      	beq.n	800529a <HAL_SPI_Init+0x1ca>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	2b80      	cmp	r3, #128	; 0x80
 800528e:	d004      	beq.n	800529a <HAL_SPI_Init+0x1ca>
 8005290:	f240 114b 	movw	r1, #331	; 0x14b
 8005294:	482e      	ldr	r0, [pc, #184]	; (8005350 <HAL_SPI_Init+0x280>)
 8005296:	f7fc fbc8 	bl	8001a2a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d008      	beq.n	80052b4 <HAL_SPI_Init+0x1e4>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	2b10      	cmp	r3, #16
 80052a8:	d004      	beq.n	80052b4 <HAL_SPI_Init+0x1e4>
 80052aa:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80052ae:	4828      	ldr	r0, [pc, #160]	; (8005350 <HAL_SPI_Init+0x280>)
 80052b0:	f7fc fbbb 	bl	8001a2a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d119      	bne.n	80052f0 <HAL_SPI_Init+0x220>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d008      	beq.n	80052d6 <HAL_SPI_Init+0x206>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d004      	beq.n	80052d6 <HAL_SPI_Init+0x206>
 80052cc:	f240 114f 	movw	r1, #335	; 0x14f
 80052d0:	481f      	ldr	r0, [pc, #124]	; (8005350 <HAL_SPI_Init+0x280>)
 80052d2:	f7fc fbaa 	bl	8001a2a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d008      	beq.n	80052f0 <HAL_SPI_Init+0x220>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d004      	beq.n	80052f0 <HAL_SPI_Init+0x220>
 80052e6:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80052ea:	4819      	ldr	r0, [pc, #100]	; (8005350 <HAL_SPI_Init+0x280>)
 80052ec:	f7fc fb9d 	bl	8001a2a <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <HAL_SPI_Init+0x240>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fc fcce 	bl	8001cac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005326:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005330:	d910      	bls.n	8005354 <HAL_SPI_Init+0x284>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005332:	2300      	movs	r3, #0
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	e010      	b.n	800535a <HAL_SPI_Init+0x28a>
 8005338:	40013000 	.word	0x40013000
 800533c:	40003800 	.word	0x40003800
 8005340:	40003c00 	.word	0x40003c00
 8005344:	40013400 	.word	0x40013400
 8005348:	40015000 	.word	0x40015000
 800534c:	40015400 	.word	0x40015400
 8005350:	08007f14 	.word	0x08007f14
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005358:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005362:	d007      	beq.n	8005374 <HAL_SPI_Init+0x2a4>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800536c:	d002      	beq.n	8005374 <HAL_SPI_Init+0x2a4>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10b      	bne.n	8005394 <HAL_SPI_Init+0x2c4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005384:	d903      	bls.n	800538e <HAL_SPI_Init+0x2be>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2202      	movs	r2, #2
 800538a:	631a      	str	r2, [r3, #48]	; 0x30
 800538c:	e002      	b.n	8005394 <HAL_SPI_Init+0x2c4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	431a      	orrs	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	431a      	orrs	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	431a      	orrs	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	431a      	orrs	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	ea42 0103 	orr.w	r1, r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	0c1b      	lsrs	r3, r3, #16
 80053d4:	f003 0204 	and.w	r2, r3, #4
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	ea42 0103 	orr.w	r1, r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69da      	ldr	r2, [r3, #28]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005404:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop

08005420 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	603b      	str	r3, [r7, #0]
 800542c:	4613      	mov	r3, r2
 800542e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005430:	2300      	movs	r3, #0
 8005432:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d009      	beq.n	8005450 <HAL_SPI_Transmit+0x30>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005444:	d004      	beq.n	8005450 <HAL_SPI_Transmit+0x30>
 8005446:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800544a:	4895      	ldr	r0, [pc, #596]	; (80056a0 <HAL_SPI_Transmit+0x280>)
 800544c:	f7fc faed 	bl	8001a2a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005456:	2b01      	cmp	r3, #1
 8005458:	d101      	bne.n	800545e <HAL_SPI_Transmit+0x3e>
 800545a:	2302      	movs	r3, #2
 800545c:	e152      	b.n	8005704 <HAL_SPI_Transmit+0x2e4>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005466:	f7fd f879 	bl	800255c <HAL_GetTick>
 800546a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800546c:	88fb      	ldrh	r3, [r7, #6]
 800546e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b01      	cmp	r3, #1
 800547a:	d002      	beq.n	8005482 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 800547c:	2302      	movs	r3, #2
 800547e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005480:	e137      	b.n	80056f2 <HAL_SPI_Transmit+0x2d2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <HAL_SPI_Transmit+0x6e>
 8005488:	88fb      	ldrh	r3, [r7, #6]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d102      	bne.n	8005494 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005492:	e12e      	b.n	80056f2 <HAL_SPI_Transmit+0x2d2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2203      	movs	r2, #3
 8005498:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	88fa      	ldrh	r2, [r7, #6]
 80054ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	88fa      	ldrh	r2, [r7, #6]
 80054b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054de:	d107      	bne.n	80054f0 <HAL_SPI_Transmit+0xd0>
  {
    SPI_1LINE_TX(hspi);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fa:	2b40      	cmp	r3, #64	; 0x40
 80054fc:	d007      	beq.n	800550e <HAL_SPI_Transmit+0xee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800550c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005516:	d94b      	bls.n	80055b0 <HAL_SPI_Transmit+0x190>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <HAL_SPI_Transmit+0x106>
 8005520:	8afb      	ldrh	r3, [r7, #22]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d13e      	bne.n	80055a4 <HAL_SPI_Transmit+0x184>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552a:	881a      	ldrh	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005536:	1c9a      	adds	r2, r3, #2
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005540:	b29b      	uxth	r3, r3
 8005542:	3b01      	subs	r3, #1
 8005544:	b29a      	uxth	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800554a:	e02b      	b.n	80055a4 <HAL_SPI_Transmit+0x184>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b02      	cmp	r3, #2
 8005558:	d112      	bne.n	8005580 <HAL_SPI_Transmit+0x160>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555e:	881a      	ldrh	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556a:	1c9a      	adds	r2, r3, #2
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800557e:	e011      	b.n	80055a4 <HAL_SPI_Transmit+0x184>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005580:	f7fc ffec 	bl	800255c <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	429a      	cmp	r2, r3
 800558e:	d803      	bhi.n	8005598 <HAL_SPI_Transmit+0x178>
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005596:	d102      	bne.n	800559e <HAL_SPI_Transmit+0x17e>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d102      	bne.n	80055a4 <HAL_SPI_Transmit+0x184>
        {
          errorcode = HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055a2:	e0a6      	b.n	80056f2 <HAL_SPI_Transmit+0x2d2>
    while (hspi->TxXferCount > 0U)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1ce      	bne.n	800554c <HAL_SPI_Transmit+0x12c>
 80055ae:	e07e      	b.n	80056ae <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <HAL_SPI_Transmit+0x19e>
 80055b8:	8afb      	ldrh	r3, [r7, #22]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d172      	bne.n	80056a4 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d912      	bls.n	80055ee <HAL_SPI_Transmit+0x1ce>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055cc:	881a      	ldrh	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d8:	1c9a      	adds	r2, r3, #2
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3b02      	subs	r3, #2
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055ec:	e05a      	b.n	80056a4 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	330c      	adds	r3, #12
 80055f8:	7812      	ldrb	r2, [r2, #0]
 80055fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	1c5a      	adds	r2, r3, #1
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800560a:	b29b      	uxth	r3, r3
 800560c:	3b01      	subs	r3, #1
 800560e:	b29a      	uxth	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005614:	e046      	b.n	80056a4 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b02      	cmp	r3, #2
 8005622:	d12b      	bne.n	800567c <HAL_SPI_Transmit+0x25c>
      {
        if (hspi->TxXferCount > 1U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005628:	b29b      	uxth	r3, r3
 800562a:	2b01      	cmp	r3, #1
 800562c:	d912      	bls.n	8005654 <HAL_SPI_Transmit+0x234>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	881a      	ldrh	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563e:	1c9a      	adds	r2, r3, #2
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005648:	b29b      	uxth	r3, r3
 800564a:	3b02      	subs	r3, #2
 800564c:	b29a      	uxth	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005652:	e027      	b.n	80056a4 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	330c      	adds	r3, #12
 800565e:	7812      	ldrb	r2, [r2, #0]
 8005660:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005670:	b29b      	uxth	r3, r3
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	87da      	strh	r2, [r3, #62]	; 0x3e
 800567a:	e013      	b.n	80056a4 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800567c:	f7fc ff6e 	bl	800255c <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	429a      	cmp	r2, r3
 800568a:	d803      	bhi.n	8005694 <HAL_SPI_Transmit+0x274>
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005692:	d102      	bne.n	800569a <HAL_SPI_Transmit+0x27a>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d104      	bne.n	80056a4 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800569e:	e028      	b.n	80056f2 <HAL_SPI_Transmit+0x2d2>
 80056a0:	08007f14 	.word	0x08007f14
    while (hspi->TxXferCount > 0U)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1b3      	bne.n	8005616 <HAL_SPI_Transmit+0x1f6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	6839      	ldr	r1, [r7, #0]
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 fdbe 	bl	8006234 <SPI_EndRxTxTransaction>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2220      	movs	r2, #32
 80056c2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10a      	bne.n	80056e2 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056cc:	2300      	movs	r3, #0
 80056ce:	613b      	str	r3, [r7, #16]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	613b      	str	r3, [r7, #16]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	613b      	str	r3, [r7, #16]
 80056e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	77fb      	strb	r3, [r7, #31]
 80056ee:	e000      	b.n	80056f2 <HAL_SPI_Transmit+0x2d2>
  }

error:
 80056f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005702:	7ffb      	ldrb	r3, [r7, #31]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3720      	adds	r7, #32
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b088      	sub	sp, #32
 8005710:	af02      	add	r7, sp, #8
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	603b      	str	r3, [r7, #0]
 8005718:	4613      	mov	r3, r2
 800571a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800571c:	2300      	movs	r3, #0
 800571e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005728:	d112      	bne.n	8005750 <HAL_SPI_Receive+0x44>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10e      	bne.n	8005750 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2204      	movs	r2, #4
 8005736:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800573a:	88fa      	ldrh	r2, [r7, #6]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	4613      	mov	r3, r2
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	68b9      	ldr	r1, [r7, #8]
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 f908 	bl	800595c <HAL_SPI_TransmitReceive>
 800574c:	4603      	mov	r3, r0
 800574e:	e101      	b.n	8005954 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005756:	2b01      	cmp	r3, #1
 8005758:	d101      	bne.n	800575e <HAL_SPI_Receive+0x52>
 800575a:	2302      	movs	r3, #2
 800575c:	e0fa      	b.n	8005954 <HAL_SPI_Receive+0x248>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005766:	f7fc fef9 	bl	800255c <HAL_GetTick>
 800576a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b01      	cmp	r3, #1
 8005776:	d002      	beq.n	800577e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005778:	2302      	movs	r3, #2
 800577a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800577c:	e0e1      	b.n	8005942 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <HAL_SPI_Receive+0x7e>
 8005784:	88fb      	ldrh	r3, [r7, #6]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d102      	bne.n	8005790 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800578e:	e0d8      	b.n	8005942 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2204      	movs	r2, #4
 8005794:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	88fa      	ldrh	r2, [r7, #6]
 80057a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	88fa      	ldrh	r2, [r7, #6]
 80057b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057da:	d908      	bls.n	80057ee <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057ea:	605a      	str	r2, [r3, #4]
 80057ec:	e007      	b.n	80057fe <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057fc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005806:	d107      	bne.n	8005818 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005816:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005822:	2b40      	cmp	r3, #64	; 0x40
 8005824:	d007      	beq.n	8005836 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005834:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800583e:	d867      	bhi.n	8005910 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005840:	e030      	b.n	80058a4 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b01      	cmp	r3, #1
 800584e:	d117      	bne.n	8005880 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f103 020c 	add.w	r2, r3, #12
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585c:	7812      	ldrb	r2, [r2, #0]
 800585e:	b2d2      	uxtb	r2, r2
 8005860:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005872:	b29b      	uxth	r3, r3
 8005874:	3b01      	subs	r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800587e:	e011      	b.n	80058a4 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005880:	f7fc fe6c 	bl	800255c <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	429a      	cmp	r2, r3
 800588e:	d803      	bhi.n	8005898 <HAL_SPI_Receive+0x18c>
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005896:	d102      	bne.n	800589e <HAL_SPI_Receive+0x192>
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d102      	bne.n	80058a4 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80058a2:	e04e      	b.n	8005942 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1c8      	bne.n	8005842 <HAL_SPI_Receive+0x136>
 80058b0:	e034      	b.n	800591c <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d115      	bne.n	80058ec <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	b292      	uxth	r2, r2
 80058cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d2:	1c9a      	adds	r2, r3, #2
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058de:	b29b      	uxth	r3, r3
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80058ea:	e011      	b.n	8005910 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058ec:	f7fc fe36 	bl	800255c <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d803      	bhi.n	8005904 <HAL_SPI_Receive+0x1f8>
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005902:	d102      	bne.n	800590a <HAL_SPI_Receive+0x1fe>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d102      	bne.n	8005910 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800590e:	e018      	b.n	8005942 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005916:	b29b      	uxth	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1ca      	bne.n	80058b2 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	6839      	ldr	r1, [r7, #0]
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 fc2f 	bl	8006184 <SPI_EndRxTransaction>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2220      	movs	r2, #32
 8005930:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005936:	2b00      	cmp	r3, #0
 8005938:	d002      	beq.n	8005940 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	75fb      	strb	r3, [r7, #23]
 800593e:	e000      	b.n	8005942 <HAL_SPI_Receive+0x236>
  }

error :
 8005940:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005952:	7dfb      	ldrb	r3, [r7, #23]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3718      	adds	r7, #24
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b08a      	sub	sp, #40	; 0x28
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
 8005968:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800596a:	2301      	movs	r3, #1
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800596e:	2300      	movs	r3, #0
 8005970:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d004      	beq.n	8005986 <HAL_SPI_TransmitReceive+0x2a>
 800597c:	f240 41bf 	movw	r1, #1215	; 0x4bf
 8005980:	4895      	ldr	r0, [pc, #596]	; (8005bd8 <HAL_SPI_TransmitReceive+0x27c>)
 8005982:	f7fc f852 	bl	8001a2a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800598c:	2b01      	cmp	r3, #1
 800598e:	d101      	bne.n	8005994 <HAL_SPI_TransmitReceive+0x38>
 8005990:	2302      	movs	r3, #2
 8005992:	e1fd      	b.n	8005d90 <HAL_SPI_TransmitReceive+0x434>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800599c:	f7fc fdde 	bl	800255c <HAL_GetTick>
 80059a0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059a8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80059b0:	887b      	ldrh	r3, [r7, #2]
 80059b2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80059b4:	887b      	ldrh	r3, [r7, #2]
 80059b6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059b8:	7efb      	ldrb	r3, [r7, #27]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d00e      	beq.n	80059dc <HAL_SPI_TransmitReceive+0x80>
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059c4:	d106      	bne.n	80059d4 <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d102      	bne.n	80059d4 <HAL_SPI_TransmitReceive+0x78>
 80059ce:	7efb      	ldrb	r3, [r7, #27]
 80059d0:	2b04      	cmp	r3, #4
 80059d2:	d003      	beq.n	80059dc <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 80059d4:	2302      	movs	r3, #2
 80059d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80059da:	e1cf      	b.n	8005d7c <HAL_SPI_TransmitReceive+0x420>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d005      	beq.n	80059ee <HAL_SPI_TransmitReceive+0x92>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <HAL_SPI_TransmitReceive+0x92>
 80059e8:	887b      	ldrh	r3, [r7, #2]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d103      	bne.n	80059f6 <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80059f4:	e1c2      	b.n	8005d7c <HAL_SPI_TransmitReceive+0x420>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d003      	beq.n	8005a0a <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2205      	movs	r2, #5
 8005a06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	887a      	ldrh	r2, [r7, #2]
 8005a1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	887a      	ldrh	r2, [r7, #2]
 8005a22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	887a      	ldrh	r2, [r7, #2]
 8005a30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	887a      	ldrh	r2, [r7, #2]
 8005a36:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a4c:	d802      	bhi.n	8005a54 <HAL_SPI_TransmitReceive+0xf8>
 8005a4e:	8a3b      	ldrh	r3, [r7, #16]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d908      	bls.n	8005a66 <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a62:	605a      	str	r2, [r3, #4]
 8005a64:	e007      	b.n	8005a76 <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a74:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a80:	2b40      	cmp	r3, #64	; 0x40
 8005a82:	d007      	beq.n	8005a94 <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a9c:	d97c      	bls.n	8005b98 <HAL_SPI_TransmitReceive+0x23c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <HAL_SPI_TransmitReceive+0x150>
 8005aa6:	8a7b      	ldrh	r3, [r7, #18]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d169      	bne.n	8005b80 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab0:	881a      	ldrh	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abc:	1c9a      	adds	r2, r3, #2
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ad0:	e056      	b.n	8005b80 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d11b      	bne.n	8005b18 <HAL_SPI_TransmitReceive+0x1bc>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d016      	beq.n	8005b18 <HAL_SPI_TransmitReceive+0x1bc>
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d113      	bne.n	8005b18 <HAL_SPI_TransmitReceive+0x1bc>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af4:	881a      	ldrh	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	1c9a      	adds	r2, r3, #2
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b14:	2300      	movs	r3, #0
 8005b16:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d11c      	bne.n	8005b60 <HAL_SPI_TransmitReceive+0x204>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d016      	beq.n	8005b60 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3c:	b292      	uxth	r2, r2
 8005b3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b44:	1c9a      	adds	r2, r3, #2
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b60:	f7fc fcfc 	bl	800255c <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d807      	bhi.n	8005b80 <HAL_SPI_TransmitReceive+0x224>
 8005b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b76:	d003      	beq.n	8005b80 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005b7e:	e0fd      	b.n	8005d7c <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1a3      	bne.n	8005ad2 <HAL_SPI_TransmitReceive+0x176>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d19d      	bne.n	8005ad2 <HAL_SPI_TransmitReceive+0x176>
 8005b96:	e0e1      	b.n	8005d5c <HAL_SPI_TransmitReceive+0x400>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <HAL_SPI_TransmitReceive+0x24c>
 8005ba0:	8a7b      	ldrh	r3, [r7, #18]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	f040 80cd 	bne.w	8005d42 <HAL_SPI_TransmitReceive+0x3e6>
    {
      if (hspi->TxXferCount > 1U)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d914      	bls.n	8005bdc <HAL_SPI_TransmitReceive+0x280>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	881a      	ldrh	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc2:	1c9a      	adds	r2, r3, #2
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	3b02      	subs	r3, #2
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bd6:	e0b4      	b.n	8005d42 <HAL_SPI_TransmitReceive+0x3e6>
 8005bd8:	08007f14 	.word	0x08007f14
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	330c      	adds	r3, #12
 8005be6:	7812      	ldrb	r2, [r2, #0]
 8005be8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bee:	1c5a      	adds	r2, r3, #1
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c02:	e09e      	b.n	8005d42 <HAL_SPI_TransmitReceive+0x3e6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d134      	bne.n	8005c7c <HAL_SPI_TransmitReceive+0x320>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d02f      	beq.n	8005c7c <HAL_SPI_TransmitReceive+0x320>
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d12c      	bne.n	8005c7c <HAL_SPI_TransmitReceive+0x320>
      {
        if (hspi->TxXferCount > 1U)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d912      	bls.n	8005c52 <HAL_SPI_TransmitReceive+0x2f6>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c30:	881a      	ldrh	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3c:	1c9a      	adds	r2, r3, #2
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	3b02      	subs	r3, #2
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c50:	e012      	b.n	8005c78 <HAL_SPI_TransmitReceive+0x31c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	330c      	adds	r3, #12
 8005c5c:	7812      	ldrb	r2, [r2, #0]
 8005c5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c64:	1c5a      	adds	r2, r3, #1
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	3b01      	subs	r3, #1
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d148      	bne.n	8005d1c <HAL_SPI_TransmitReceive+0x3c0>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d042      	beq.n	8005d1c <HAL_SPI_TransmitReceive+0x3c0>
      {
        if (hspi->RxXferCount > 1U)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d923      	bls.n	8005cea <HAL_SPI_TransmitReceive+0x38e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68da      	ldr	r2, [r3, #12]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cac:	b292      	uxth	r2, r2
 8005cae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb4:	1c9a      	adds	r2, r3, #2
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b02      	subs	r3, #2
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d81f      	bhi.n	8005d18 <HAL_SPI_TransmitReceive+0x3bc>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ce6:	605a      	str	r2, [r3, #4]
 8005ce8:	e016      	b.n	8005d18 <HAL_SPI_TransmitReceive+0x3bc>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f103 020c 	add.w	r2, r3, #12
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	7812      	ldrb	r2, [r2, #0]
 8005cf8:	b2d2      	uxtb	r2, r2
 8005cfa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d00:	1c5a      	adds	r2, r3, #1
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d1c:	f7fc fc1e 	bl	800255c <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d803      	bhi.n	8005d34 <HAL_SPI_TransmitReceive+0x3d8>
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d32:	d102      	bne.n	8005d3a <HAL_SPI_TransmitReceive+0x3de>
 8005d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d103      	bne.n	8005d42 <HAL_SPI_TransmitReceive+0x3e6>
      {
        errorcode = HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005d40:	e01c      	b.n	8005d7c <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f47f af5b 	bne.w	8005c04 <HAL_SPI_TransmitReceive+0x2a8>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f47f af54 	bne.w	8005c04 <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d5c:	69fa      	ldr	r2, [r7, #28]
 8005d5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 fa67 	bl	8006234 <SPI_EndRxTxTransaction>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d006      	beq.n	8005d7a <HAL_SPI_TransmitReceive+0x41e>
  {
    errorcode = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2220      	movs	r2, #32
 8005d76:	661a      	str	r2, [r3, #96]	; 0x60
 8005d78:	e000      	b.n	8005d7c <HAL_SPI_TransmitReceive+0x420>
  }

error :
 8005d7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3728      	adds	r7, #40	; 0x28
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	099b      	lsrs	r3, r3, #6
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10f      	bne.n	8005ddc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	099b      	lsrs	r3, r3, #6
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d004      	beq.n	8005ddc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	4798      	blx	r3
    return;
 8005dda:	e0d8      	b.n	8005f8e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	085b      	lsrs	r3, r3, #1
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00a      	beq.n	8005dfe <HAL_SPI_IRQHandler+0x66>
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	09db      	lsrs	r3, r3, #7
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d004      	beq.n	8005dfe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	4798      	blx	r3
    return;
 8005dfc:	e0c7      	b.n	8005f8e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	095b      	lsrs	r3, r3, #5
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10c      	bne.n	8005e24 <HAL_SPI_IRQHandler+0x8c>
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	099b      	lsrs	r3, r3, #6
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <HAL_SPI_IRQHandler+0x8c>
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	0a1b      	lsrs	r3, r3, #8
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 80b5 	beq.w	8005f8e <HAL_SPI_IRQHandler+0x1f6>
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	095b      	lsrs	r3, r3, #5
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 80ae 	beq.w	8005f8e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	099b      	lsrs	r3, r3, #6
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d023      	beq.n	8005e86 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	d011      	beq.n	8005e6e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e4e:	f043 0204 	orr.w	r2, r3, #4
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e56:	2300      	movs	r3, #0
 8005e58:	617b      	str	r3, [r7, #20]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	617b      	str	r3, [r7, #20]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	617b      	str	r3, [r7, #20]
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	e00b      	b.n	8005e86 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e6e:	2300      	movs	r3, #0
 8005e70:	613b      	str	r3, [r7, #16]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	613b      	str	r3, [r7, #16]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	613b      	str	r3, [r7, #16]
 8005e82:	693b      	ldr	r3, [r7, #16]
        return;
 8005e84:	e083      	b.n	8005f8e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	095b      	lsrs	r3, r3, #5
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d014      	beq.n	8005ebc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e96:	f043 0201 	orr.w	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60fb      	str	r3, [r7, #12]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eb8:	601a      	str	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	0a1b      	lsrs	r3, r3, #8
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00c      	beq.n	8005ee2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ecc:	f043 0208 	orr.w	r2, r3, #8
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	60bb      	str	r3, [r7, #8]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	60bb      	str	r3, [r7, #8]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d050      	beq.n	8005f8c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ef8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d104      	bne.n	8005f16 <HAL_SPI_IRQHandler+0x17e>
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d034      	beq.n	8005f80 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f022 0203 	bic.w	r2, r2, #3
 8005f24:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d011      	beq.n	8005f52 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f32:	4a18      	ldr	r2, [pc, #96]	; (8005f94 <HAL_SPI_IRQHandler+0x1fc>)
 8005f34:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fc fdcc 	bl	8002ad8 <HAL_DMA_Abort_IT>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d005      	beq.n	8005f52 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d016      	beq.n	8005f88 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5e:	4a0d      	ldr	r2, [pc, #52]	; (8005f94 <HAL_SPI_IRQHandler+0x1fc>)
 8005f60:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fc fdb6 	bl	8002ad8 <HAL_DMA_Abort_IT>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00a      	beq.n	8005f88 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005f7e:	e003      	b.n	8005f88 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f809 	bl	8005f98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f86:	e000      	b.n	8005f8a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005f88:	bf00      	nop
    return;
 8005f8a:	bf00      	nop
 8005f8c:	bf00      	nop
  }
}
 8005f8e:	3720      	adds	r7, #32
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	08005fad 	.word	0x08005fad

08005f98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f7ff ffe5 	bl	8005f98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fce:	bf00      	nop
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b084      	sub	sp, #16
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	603b      	str	r3, [r7, #0]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fe6:	e04c      	b.n	8006082 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fee:	d048      	beq.n	8006082 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005ff0:	f7fc fab4 	bl	800255c <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d902      	bls.n	8006006 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d13d      	bne.n	8006082 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006014:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800601e:	d111      	bne.n	8006044 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006028:	d004      	beq.n	8006034 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006032:	d107      	bne.n	8006044 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006042:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800604c:	d10f      	bne.n	800606e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800606c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e00f      	b.n	80060a2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	4013      	ands	r3, r2
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	429a      	cmp	r2, r3
 8006090:	bf0c      	ite	eq
 8006092:	2301      	moveq	r3, #1
 8006094:	2300      	movne	r3, #0
 8006096:	b2db      	uxtb	r3, r3
 8006098:	461a      	mov	r2, r3
 800609a:	79fb      	ldrb	r3, [r7, #7]
 800609c:	429a      	cmp	r2, r3
 800609e:	d1a3      	bne.n	8005fe8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	60f8      	str	r0, [r7, #12]
 80060b2:	60b9      	str	r1, [r7, #8]
 80060b4:	607a      	str	r2, [r7, #4]
 80060b6:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80060b8:	e057      	b.n	800616a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80060c0:	d106      	bne.n	80060d0 <SPI_WaitFifoStateUntilTimeout+0x26>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d103      	bne.n	80060d0 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	330c      	adds	r3, #12
 80060ce:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d6:	d048      	beq.n	800616a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80060d8:	f7fc fa40 	bl	800255c <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d902      	bls.n	80060ee <SPI_WaitFifoStateUntilTimeout+0x44>
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d13d      	bne.n	800616a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006106:	d111      	bne.n	800612c <SPI_WaitFifoStateUntilTimeout+0x82>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006110:	d004      	beq.n	800611c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800611a:	d107      	bne.n	800612c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800612a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006134:	d10f      	bne.n	8006156 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006144:	601a      	str	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006154:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e008      	b.n	800617c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	4013      	ands	r3, r2
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	429a      	cmp	r2, r3
 8006178:	d19f      	bne.n	80060ba <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af02      	add	r7, sp, #8
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006198:	d111      	bne.n	80061be <SPI_EndRxTransaction+0x3a>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061a2:	d004      	beq.n	80061ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ac:	d107      	bne.n	80061be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061bc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2200      	movs	r2, #0
 80061c6:	2180      	movs	r1, #128	; 0x80
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f7ff ff04 	bl	8005fd6 <SPI_WaitFlagStateUntilTimeout>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d007      	beq.n	80061e4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061d8:	f043 0220 	orr.w	r2, r3, #32
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e023      	b.n	800622c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061ec:	d11d      	bne.n	800622a <SPI_EndRxTransaction+0xa6>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f6:	d004      	beq.n	8006202 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006200:	d113      	bne.n	800622a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	2200      	movs	r2, #0
 800620a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f7ff ff4b 	bl	80060aa <SPI_WaitFifoStateUntilTimeout>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d007      	beq.n	800622a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800621e:	f043 0220 	orr.w	r2, r3, #32
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e000      	b.n	800622c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af02      	add	r7, sp, #8
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2200      	movs	r2, #0
 8006248:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f7ff ff2c 	bl	80060aa <SPI_WaitFifoStateUntilTimeout>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d007      	beq.n	8006268 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800625c:	f043 0220 	orr.w	r2, r3, #32
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e027      	b.n	80062b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2200      	movs	r2, #0
 8006270:	2180      	movs	r1, #128	; 0x80
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f7ff feaf 	bl	8005fd6 <SPI_WaitFlagStateUntilTimeout>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d007      	beq.n	800628e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006282:	f043 0220 	orr.w	r2, r3, #32
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e014      	b.n	80062b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2200      	movs	r2, #0
 8006296:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f7ff ff05 	bl	80060aa <SPI_WaitFifoStateUntilTimeout>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d007      	beq.n	80062b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062aa:	f043 0220 	orr.w	r2, r3, #32
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e000      	b.n	80062b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e09f      	b.n	8006412 <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d02d      	beq.n	8006336 <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a4f      	ldr	r2, [pc, #316]	; (800641c <HAL_UART_Init+0x15c>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d055      	beq.n	8006390 <HAL_UART_Init+0xd0>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a4d      	ldr	r2, [pc, #308]	; (8006420 <HAL_UART_Init+0x160>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d050      	beq.n	8006390 <HAL_UART_Init+0xd0>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a4c      	ldr	r2, [pc, #304]	; (8006424 <HAL_UART_Init+0x164>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d04b      	beq.n	8006390 <HAL_UART_Init+0xd0>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a4a      	ldr	r2, [pc, #296]	; (8006428 <HAL_UART_Init+0x168>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d046      	beq.n	8006390 <HAL_UART_Init+0xd0>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a49      	ldr	r2, [pc, #292]	; (800642c <HAL_UART_Init+0x16c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d041      	beq.n	8006390 <HAL_UART_Init+0xd0>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a47      	ldr	r2, [pc, #284]	; (8006430 <HAL_UART_Init+0x170>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d03c      	beq.n	8006390 <HAL_UART_Init+0xd0>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a46      	ldr	r2, [pc, #280]	; (8006434 <HAL_UART_Init+0x174>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d037      	beq.n	8006390 <HAL_UART_Init+0xd0>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a44      	ldr	r2, [pc, #272]	; (8006438 <HAL_UART_Init+0x178>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d032      	beq.n	8006390 <HAL_UART_Init+0xd0>
 800632a:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800632e:	4843      	ldr	r0, [pc, #268]	; (800643c <HAL_UART_Init+0x17c>)
 8006330:	f7fb fb7b 	bl	8001a2a <assert_failed>
 8006334:	e02c      	b.n	8006390 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a38      	ldr	r2, [pc, #224]	; (800641c <HAL_UART_Init+0x15c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d027      	beq.n	8006390 <HAL_UART_Init+0xd0>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a36      	ldr	r2, [pc, #216]	; (8006420 <HAL_UART_Init+0x160>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d022      	beq.n	8006390 <HAL_UART_Init+0xd0>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a35      	ldr	r2, [pc, #212]	; (8006424 <HAL_UART_Init+0x164>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d01d      	beq.n	8006390 <HAL_UART_Init+0xd0>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a33      	ldr	r2, [pc, #204]	; (8006428 <HAL_UART_Init+0x168>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d018      	beq.n	8006390 <HAL_UART_Init+0xd0>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a32      	ldr	r2, [pc, #200]	; (800642c <HAL_UART_Init+0x16c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d013      	beq.n	8006390 <HAL_UART_Init+0xd0>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a30      	ldr	r2, [pc, #192]	; (8006430 <HAL_UART_Init+0x170>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d00e      	beq.n	8006390 <HAL_UART_Init+0xd0>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a2f      	ldr	r2, [pc, #188]	; (8006434 <HAL_UART_Init+0x174>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d009      	beq.n	8006390 <HAL_UART_Init+0xd0>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a2d      	ldr	r2, [pc, #180]	; (8006438 <HAL_UART_Init+0x178>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d004      	beq.n	8006390 <HAL_UART_Init+0xd0>
 8006386:	f240 112f 	movw	r1, #303	; 0x12f
 800638a:	482c      	ldr	r0, [pc, #176]	; (800643c <HAL_UART_Init+0x17c>)
 800638c:	f7fb fb4d 	bl	8001a2a <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006394:	2b00      	cmp	r3, #0
 8006396:	d106      	bne.n	80063a6 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7fb ff63 	bl	800226c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2224      	movs	r2, #36	; 0x24
 80063aa:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0201 	bic.w	r2, r2, #1
 80063ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fb01 	bl	80069c4 <UART_SetConfig>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d101      	bne.n	80063cc <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e022      	b.n	8006412 <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fe31 	bl	800703c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f042 0201 	orr.w	r2, r2, #1
 8006408:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 ff6a 	bl	80072e4 <UART_CheckIdleState>
 8006410:	4603      	mov	r3, r0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	40011000 	.word	0x40011000
 8006420:	40004400 	.word	0x40004400
 8006424:	40004800 	.word	0x40004800
 8006428:	40004c00 	.word	0x40004c00
 800642c:	40005000 	.word	0x40005000
 8006430:	40011400 	.word	0x40011400
 8006434:	40007800 	.word	0x40007800
 8006438:	40007c00 	.word	0x40007c00
 800643c:	08007f4c 	.word	0x08007f4c

08006440 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08a      	sub	sp, #40	; 0x28
 8006444:	af02      	add	r7, sp, #8
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	603b      	str	r3, [r7, #0]
 800644c:	4613      	mov	r3, r2
 800644e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006454:	2b20      	cmp	r3, #32
 8006456:	d17f      	bne.n	8006558 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <HAL_UART_Transmit+0x24>
 800645e:	88fb      	ldrh	r3, [r7, #6]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e078      	b.n	800655a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800646e:	2b01      	cmp	r3, #1
 8006470:	d101      	bne.n	8006476 <HAL_UART_Transmit+0x36>
 8006472:	2302      	movs	r3, #2
 8006474:	e071      	b.n	800655a <HAL_UART_Transmit+0x11a>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2221      	movs	r2, #33	; 0x21
 8006488:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800648a:	f7fc f867 	bl	800255c <HAL_GetTick>
 800648e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	88fa      	ldrh	r2, [r7, #6]
 8006494:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	88fa      	ldrh	r2, [r7, #6]
 800649c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a8:	d108      	bne.n	80064bc <HAL_UART_Transmit+0x7c>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d104      	bne.n	80064bc <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80064b2:	2300      	movs	r3, #0
 80064b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	61bb      	str	r3, [r7, #24]
 80064ba:	e003      	b.n	80064c4 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064c0:	2300      	movs	r3, #0
 80064c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80064cc:	e02c      	b.n	8006528 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2200      	movs	r2, #0
 80064d6:	2180      	movs	r1, #128	; 0x80
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 ff48 	bl	800736e <UART_WaitOnFlagUntilTimeout>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e038      	b.n	800655a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10b      	bne.n	8006506 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	3302      	adds	r3, #2
 8006502:	61bb      	str	r3, [r7, #24]
 8006504:	e007      	b.n	8006516 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	781a      	ldrb	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	3301      	adds	r3, #1
 8006514:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800651c:	b29b      	uxth	r3, r3
 800651e:	3b01      	subs	r3, #1
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800652e:	b29b      	uxth	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1cc      	bne.n	80064ce <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	2200      	movs	r2, #0
 800653c:	2140      	movs	r1, #64	; 0x40
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 ff15 	bl	800736e <UART_WaitOnFlagUntilTimeout>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e005      	b.n	800655a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2220      	movs	r2, #32
 8006552:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	e000      	b.n	800655a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8006558:	2302      	movs	r3, #2
  }
}
 800655a:	4618      	mov	r0, r3
 800655c:	3720      	adds	r7, #32
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b08a      	sub	sp, #40	; 0x28
 8006566:	af02      	add	r7, sp, #8
 8006568:	60f8      	str	r0, [r7, #12]
 800656a:	60b9      	str	r1, [r7, #8]
 800656c:	603b      	str	r3, [r7, #0]
 800656e:	4613      	mov	r3, r2
 8006570:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006576:	2b20      	cmp	r3, #32
 8006578:	f040 80ba 	bne.w	80066f0 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <HAL_UART_Receive+0x26>
 8006582:	88fb      	ldrh	r3, [r7, #6]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e0b2      	b.n	80066f2 <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006592:	2b01      	cmp	r3, #1
 8006594:	d101      	bne.n	800659a <HAL_UART_Receive+0x38>
 8006596:	2302      	movs	r3, #2
 8006598:	e0ab      	b.n	80066f2 <HAL_UART_Receive+0x190>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2222      	movs	r2, #34	; 0x22
 80065ac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80065ae:	f7fb ffd5 	bl	800255c <HAL_GetTick>
 80065b2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	88fa      	ldrh	r2, [r7, #6]
 80065b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	88fa      	ldrh	r2, [r7, #6]
 80065c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065cc:	d10e      	bne.n	80065ec <HAL_UART_Receive+0x8a>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d105      	bne.n	80065e2 <HAL_UART_Receive+0x80>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80065dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065e0:	e02d      	b.n	800663e <HAL_UART_Receive+0xdc>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	22ff      	movs	r2, #255	; 0xff
 80065e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065ea:	e028      	b.n	800663e <HAL_UART_Receive+0xdc>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10d      	bne.n	8006610 <HAL_UART_Receive+0xae>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d104      	bne.n	8006606 <HAL_UART_Receive+0xa4>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	22ff      	movs	r2, #255	; 0xff
 8006600:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006604:	e01b      	b.n	800663e <HAL_UART_Receive+0xdc>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	227f      	movs	r2, #127	; 0x7f
 800660a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800660e:	e016      	b.n	800663e <HAL_UART_Receive+0xdc>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006618:	d10d      	bne.n	8006636 <HAL_UART_Receive+0xd4>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d104      	bne.n	800662c <HAL_UART_Receive+0xca>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	227f      	movs	r2, #127	; 0x7f
 8006626:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800662a:	e008      	b.n	800663e <HAL_UART_Receive+0xdc>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	223f      	movs	r2, #63	; 0x3f
 8006630:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006634:	e003      	b.n	800663e <HAL_UART_Receive+0xdc>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006644:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800664e:	d108      	bne.n	8006662 <HAL_UART_Receive+0x100>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d104      	bne.n	8006662 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8006658:	2300      	movs	r3, #0
 800665a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	61bb      	str	r3, [r7, #24]
 8006660:	e003      	b.n	800666a <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006666:	2300      	movs	r3, #0
 8006668:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006672:	e032      	b.n	80066da <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2200      	movs	r2, #0
 800667c:	2120      	movs	r1, #32
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f000 fe75 	bl	800736e <UART_WaitOnFlagUntilTimeout>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e031      	b.n	80066f2 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10c      	bne.n	80066ae <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669a:	b29a      	uxth	r2, r3
 800669c:	8a7b      	ldrh	r3, [r7, #18]
 800669e:	4013      	ands	r3, r2
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	3302      	adds	r3, #2
 80066aa:	61bb      	str	r3, [r7, #24]
 80066ac:	e00c      	b.n	80066c8 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	8a7b      	ldrh	r3, [r7, #18]
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	4013      	ands	r3, r2
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	3301      	adds	r3, #1
 80066c6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	3b01      	subs	r3, #1
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1c6      	bne.n	8006674 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2220      	movs	r2, #32
 80066ea:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	e000      	b.n	80066f2 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 80066f0:	2302      	movs	r3, #2
  }
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3720      	adds	r7, #32
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b088      	sub	sp, #32
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800671c:	69fa      	ldr	r2, [r7, #28]
 800671e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006722:	4013      	ands	r3, r2
 8006724:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d113      	bne.n	8006754 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	f003 0320 	and.w	r3, r3, #32
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00e      	beq.n	8006754 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	f003 0320 	and.w	r3, r3, #32
 800673c:	2b00      	cmp	r3, #0
 800673e:	d009      	beq.n	8006754 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006744:	2b00      	cmp	r3, #0
 8006746:	f000 8114 	beq.w	8006972 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	4798      	blx	r3
      }
      return;
 8006752:	e10e      	b.n	8006972 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 80d6 	beq.w	8006908 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	2b00      	cmp	r3, #0
 8006764:	d105      	bne.n	8006772 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 80cb 	beq.w	8006908 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00e      	beq.n	800679a <HAL_UART_IRQHandler+0x9e>
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006782:	2b00      	cmp	r3, #0
 8006784:	d009      	beq.n	800679a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2201      	movs	r2, #1
 800678c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006792:	f043 0201 	orr.w	r2, r3, #1
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00e      	beq.n	80067c2 <HAL_UART_IRQHandler+0xc6>
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d009      	beq.n	80067c2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2202      	movs	r2, #2
 80067b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067ba:	f043 0204 	orr.w	r2, r3, #4
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00e      	beq.n	80067ea <HAL_UART_IRQHandler+0xee>
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d009      	beq.n	80067ea <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2204      	movs	r2, #4
 80067dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067e2:	f043 0202 	orr.w	r2, r3, #2
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	f003 0308 	and.w	r3, r3, #8
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d013      	beq.n	800681c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	f003 0320 	and.w	r3, r3, #32
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d104      	bne.n	8006808 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006804:	2b00      	cmp	r3, #0
 8006806:	d009      	beq.n	800681c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2208      	movs	r2, #8
 800680e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006814:	f043 0208 	orr.w	r2, r3, #8
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00f      	beq.n	8006846 <HAL_UART_IRQHandler+0x14a>
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00a      	beq.n	8006846 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006838:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800683e:	f043 0220 	orr.w	r2, r3, #32
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 8093 	beq.w	8006976 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	f003 0320 	and.w	r3, r3, #32
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00c      	beq.n	8006874 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	f003 0320 	and.w	r3, r3, #32
 8006860:	2b00      	cmp	r3, #0
 8006862:	d007      	beq.n	8006874 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006868:	2b00      	cmp	r3, #0
 800686a:	d003      	beq.n	8006874 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006878:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006884:	2b40      	cmp	r3, #64	; 0x40
 8006886:	d004      	beq.n	8006892 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800688e:	2b00      	cmp	r3, #0
 8006890:	d031      	beq.n	80068f6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fde6 	bl	8007464 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a2:	2b40      	cmp	r3, #64	; 0x40
 80068a4:	d123      	bne.n	80068ee <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068b4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d013      	beq.n	80068e6 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068c2:	4a30      	ldr	r2, [pc, #192]	; (8006984 <HAL_UART_IRQHandler+0x288>)
 80068c4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fc f904 	bl	8002ad8 <HAL_DMA_Abort_IT>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d016      	beq.n	8006904 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80068e0:	4610      	mov	r0, r2
 80068e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e4:	e00e      	b.n	8006904 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f858 	bl	800699c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ec:	e00a      	b.n	8006904 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f854 	bl	800699c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f4:	e006      	b.n	8006904 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f850 	bl	800699c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006902:	e038      	b.n	8006976 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006904:	bf00      	nop
    return;
 8006906:	e036      	b.n	8006976 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00d      	beq.n	800692e <HAL_UART_IRQHandler+0x232>
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d008      	beq.n	800692e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006924:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f842 	bl	80069b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800692c:	e026      	b.n	800697c <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00d      	beq.n	8006954 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693e:	2b00      	cmp	r3, #0
 8006940:	d008      	beq.n	8006954 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006946:	2b00      	cmp	r3, #0
 8006948:	d017      	beq.n	800697a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	4798      	blx	r3
    }
    return;
 8006952:	e012      	b.n	800697a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00e      	beq.n	800697c <HAL_UART_IRQHandler+0x280>
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006964:	2b00      	cmp	r3, #0
 8006966:	d009      	beq.n	800697c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fdb1 	bl	80074d0 <UART_EndTransmit_IT>
    return;
 800696e:	bf00      	nop
 8006970:	e004      	b.n	800697c <HAL_UART_IRQHandler+0x280>
      return;
 8006972:	bf00      	nop
 8006974:	e002      	b.n	800697c <HAL_UART_IRQHandler+0x280>
    return;
 8006976:	bf00      	nop
 8006978:	e000      	b.n	800697c <HAL_UART_IRQHandler+0x280>
    return;
 800697a:	bf00      	nop
  }

}
 800697c:	3720      	adds	r7, #32
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	080074a5 	.word	0x080074a5

08006988 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b088      	sub	sp, #32
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	75fb      	strb	r3, [r7, #23]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	4aaa      	ldr	r2, [pc, #680]	; (8006c84 <UART_SetConfig+0x2c0>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d904      	bls.n	80069e8 <UART_SetConfig+0x24>
 80069de:	f640 21be 	movw	r1, #2750	; 0xabe
 80069e2:	48a9      	ldr	r0, [pc, #676]	; (8006c88 <UART_SetConfig+0x2c4>)
 80069e4:	f7fb f821 	bl	8001a2a <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069f0:	d00d      	beq.n	8006a0e <UART_SetConfig+0x4a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d009      	beq.n	8006a0e <UART_SetConfig+0x4a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a02:	d004      	beq.n	8006a0e <UART_SetConfig+0x4a>
 8006a04:	f640 21bf 	movw	r1, #2751	; 0xabf
 8006a08:	489f      	ldr	r0, [pc, #636]	; (8006c88 <UART_SetConfig+0x2c4>)
 8006a0a:	f7fb f80e 	bl	8001a2a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a16:	d012      	beq.n	8006a3e <UART_SetConfig+0x7a>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00e      	beq.n	8006a3e <UART_SetConfig+0x7a>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a28:	d009      	beq.n	8006a3e <UART_SetConfig+0x7a>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a32:	d004      	beq.n	8006a3e <UART_SetConfig+0x7a>
 8006a34:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 8006a38:	4893      	ldr	r0, [pc, #588]	; (8006c88 <UART_SetConfig+0x2c4>)
 8006a3a:	f7fa fff6 	bl	8001a2a <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d009      	beq.n	8006a5a <UART_SetConfig+0x96>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a4e:	d004      	beq.n	8006a5a <UART_SetConfig+0x96>
 8006a50:	f640 21c1 	movw	r1, #2753	; 0xac1
 8006a54:	488c      	ldr	r0, [pc, #560]	; (8006c88 <UART_SetConfig+0x2c4>)
 8006a56:	f7fa ffe8 	bl	8001a2a <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00e      	beq.n	8006a80 <UART_SetConfig+0xbc>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a6a:	d009      	beq.n	8006a80 <UART_SetConfig+0xbc>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006a74:	d004      	beq.n	8006a80 <UART_SetConfig+0xbc>
 8006a76:	f640 21c3 	movw	r1, #2755	; 0xac3
 8006a7a:	4883      	ldr	r0, [pc, #524]	; (8006c88 <UART_SetConfig+0x2c4>)
 8006a7c:	f7fa ffd5 	bl	8001a2a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	f023 030c 	bic.w	r3, r3, #12
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d103      	bne.n	8006a94 <UART_SetConfig+0xd0>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d104      	bne.n	8006a9e <UART_SetConfig+0xda>
 8006a94:	f640 21c4 	movw	r1, #2756	; 0xac4
 8006a98:	487b      	ldr	r0, [pc, #492]	; (8006c88 <UART_SetConfig+0x2c4>)
 8006a9a:	f7fa ffc6 	bl	8001a2a <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d013      	beq.n	8006ace <UART_SetConfig+0x10a>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aae:	d00e      	beq.n	8006ace <UART_SetConfig+0x10a>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ab8:	d009      	beq.n	8006ace <UART_SetConfig+0x10a>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ac2:	d004      	beq.n	8006ace <UART_SetConfig+0x10a>
 8006ac4:	f640 21c5 	movw	r1, #2757	; 0xac5
 8006ac8:	486f      	ldr	r0, [pc, #444]	; (8006c88 <UART_SetConfig+0x2c4>)
 8006aca:	f7fa ffae 	bl	8001a2a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d009      	beq.n	8006aea <UART_SetConfig+0x126>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ade:	d004      	beq.n	8006aea <UART_SetConfig+0x126>
 8006ae0:	f640 21c6 	movw	r1, #2758	; 0xac6
 8006ae4:	4868      	ldr	r0, [pc, #416]	; (8006c88 <UART_SetConfig+0x2c4>)
 8006ae6:	f7fa ffa0 	bl	8001a2a <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	431a      	orrs	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	431a      	orrs	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	4b60      	ldr	r3, [pc, #384]	; (8006c8c <UART_SetConfig+0x2c8>)
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	6812      	ldr	r2, [r2, #0]
 8006b10:	6939      	ldr	r1, [r7, #16]
 8006b12:	430b      	orrs	r3, r1
 8006b14:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68da      	ldr	r2, [r3, #12]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a4e      	ldr	r2, [pc, #312]	; (8006c90 <UART_SetConfig+0x2cc>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d122      	bne.n	8006ba0 <UART_SetConfig+0x1dc>
 8006b5a:	4b4e      	ldr	r3, [pc, #312]	; (8006c94 <UART_SetConfig+0x2d0>)
 8006b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b60:	f003 0303 	and.w	r3, r3, #3
 8006b64:	2b03      	cmp	r3, #3
 8006b66:	d817      	bhi.n	8006b98 <UART_SetConfig+0x1d4>
 8006b68:	a201      	add	r2, pc, #4	; (adr r2, 8006b70 <UART_SetConfig+0x1ac>)
 8006b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6e:	bf00      	nop
 8006b70:	08006b81 	.word	0x08006b81
 8006b74:	08006b8d 	.word	0x08006b8d
 8006b78:	08006b87 	.word	0x08006b87
 8006b7c:	08006b93 	.word	0x08006b93
 8006b80:	2301      	movs	r3, #1
 8006b82:	77fb      	strb	r3, [r7, #31]
 8006b84:	e14d      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006b86:	2302      	movs	r3, #2
 8006b88:	77fb      	strb	r3, [r7, #31]
 8006b8a:	e14a      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006b8c:	2304      	movs	r3, #4
 8006b8e:	77fb      	strb	r3, [r7, #31]
 8006b90:	e147      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006b92:	2308      	movs	r3, #8
 8006b94:	77fb      	strb	r3, [r7, #31]
 8006b96:	e144      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006b98:	2310      	movs	r3, #16
 8006b9a:	77fb      	strb	r3, [r7, #31]
 8006b9c:	bf00      	nop
 8006b9e:	e140      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a3c      	ldr	r2, [pc, #240]	; (8006c98 <UART_SetConfig+0x2d4>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d134      	bne.n	8006c14 <UART_SetConfig+0x250>
 8006baa:	4b3a      	ldr	r3, [pc, #232]	; (8006c94 <UART_SetConfig+0x2d0>)
 8006bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb0:	f003 030c 	and.w	r3, r3, #12
 8006bb4:	2b0c      	cmp	r3, #12
 8006bb6:	d829      	bhi.n	8006c0c <UART_SetConfig+0x248>
 8006bb8:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <UART_SetConfig+0x1fc>)
 8006bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbe:	bf00      	nop
 8006bc0:	08006bf5 	.word	0x08006bf5
 8006bc4:	08006c0d 	.word	0x08006c0d
 8006bc8:	08006c0d 	.word	0x08006c0d
 8006bcc:	08006c0d 	.word	0x08006c0d
 8006bd0:	08006c01 	.word	0x08006c01
 8006bd4:	08006c0d 	.word	0x08006c0d
 8006bd8:	08006c0d 	.word	0x08006c0d
 8006bdc:	08006c0d 	.word	0x08006c0d
 8006be0:	08006bfb 	.word	0x08006bfb
 8006be4:	08006c0d 	.word	0x08006c0d
 8006be8:	08006c0d 	.word	0x08006c0d
 8006bec:	08006c0d 	.word	0x08006c0d
 8006bf0:	08006c07 	.word	0x08006c07
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	77fb      	strb	r3, [r7, #31]
 8006bf8:	e113      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	77fb      	strb	r3, [r7, #31]
 8006bfe:	e110      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006c00:	2304      	movs	r3, #4
 8006c02:	77fb      	strb	r3, [r7, #31]
 8006c04:	e10d      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006c06:	2308      	movs	r3, #8
 8006c08:	77fb      	strb	r3, [r7, #31]
 8006c0a:	e10a      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006c0c:	2310      	movs	r3, #16
 8006c0e:	77fb      	strb	r3, [r7, #31]
 8006c10:	bf00      	nop
 8006c12:	e106      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a20      	ldr	r2, [pc, #128]	; (8006c9c <UART_SetConfig+0x2d8>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d120      	bne.n	8006c60 <UART_SetConfig+0x29c>
 8006c1e:	4b1d      	ldr	r3, [pc, #116]	; (8006c94 <UART_SetConfig+0x2d0>)
 8006c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c28:	2b10      	cmp	r3, #16
 8006c2a:	d00f      	beq.n	8006c4c <UART_SetConfig+0x288>
 8006c2c:	2b10      	cmp	r3, #16
 8006c2e:	d802      	bhi.n	8006c36 <UART_SetConfig+0x272>
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d005      	beq.n	8006c40 <UART_SetConfig+0x27c>
 8006c34:	e010      	b.n	8006c58 <UART_SetConfig+0x294>
 8006c36:	2b20      	cmp	r3, #32
 8006c38:	d005      	beq.n	8006c46 <UART_SetConfig+0x282>
 8006c3a:	2b30      	cmp	r3, #48	; 0x30
 8006c3c:	d009      	beq.n	8006c52 <UART_SetConfig+0x28e>
 8006c3e:	e00b      	b.n	8006c58 <UART_SetConfig+0x294>
 8006c40:	2300      	movs	r3, #0
 8006c42:	77fb      	strb	r3, [r7, #31]
 8006c44:	e0ed      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006c46:	2302      	movs	r3, #2
 8006c48:	77fb      	strb	r3, [r7, #31]
 8006c4a:	e0ea      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006c4c:	2304      	movs	r3, #4
 8006c4e:	77fb      	strb	r3, [r7, #31]
 8006c50:	e0e7      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006c52:	2308      	movs	r3, #8
 8006c54:	77fb      	strb	r3, [r7, #31]
 8006c56:	e0e4      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006c58:	2310      	movs	r3, #16
 8006c5a:	77fb      	strb	r3, [r7, #31]
 8006c5c:	bf00      	nop
 8006c5e:	e0e0      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a0e      	ldr	r2, [pc, #56]	; (8006ca0 <UART_SetConfig+0x2dc>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d131      	bne.n	8006cce <UART_SetConfig+0x30a>
 8006c6a:	4b0a      	ldr	r3, [pc, #40]	; (8006c94 <UART_SetConfig+0x2d0>)
 8006c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c74:	2b40      	cmp	r3, #64	; 0x40
 8006c76:	d020      	beq.n	8006cba <UART_SetConfig+0x2f6>
 8006c78:	2b40      	cmp	r3, #64	; 0x40
 8006c7a:	d813      	bhi.n	8006ca4 <UART_SetConfig+0x2e0>
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d016      	beq.n	8006cae <UART_SetConfig+0x2ea>
 8006c80:	e021      	b.n	8006cc6 <UART_SetConfig+0x302>
 8006c82:	bf00      	nop
 8006c84:	019bfcc0 	.word	0x019bfcc0
 8006c88:	08007f4c 	.word	0x08007f4c
 8006c8c:	efff69f3 	.word	0xefff69f3
 8006c90:	40011000 	.word	0x40011000
 8006c94:	40023800 	.word	0x40023800
 8006c98:	40004400 	.word	0x40004400
 8006c9c:	40004800 	.word	0x40004800
 8006ca0:	40004c00 	.word	0x40004c00
 8006ca4:	2b80      	cmp	r3, #128	; 0x80
 8006ca6:	d005      	beq.n	8006cb4 <UART_SetConfig+0x2f0>
 8006ca8:	2bc0      	cmp	r3, #192	; 0xc0
 8006caa:	d009      	beq.n	8006cc0 <UART_SetConfig+0x2fc>
 8006cac:	e00b      	b.n	8006cc6 <UART_SetConfig+0x302>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	77fb      	strb	r3, [r7, #31]
 8006cb2:	e0b6      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	77fb      	strb	r3, [r7, #31]
 8006cb8:	e0b3      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006cba:	2304      	movs	r3, #4
 8006cbc:	77fb      	strb	r3, [r7, #31]
 8006cbe:	e0b0      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006cc0:	2308      	movs	r3, #8
 8006cc2:	77fb      	strb	r3, [r7, #31]
 8006cc4:	e0ad      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006cc6:	2310      	movs	r3, #16
 8006cc8:	77fb      	strb	r3, [r7, #31]
 8006cca:	bf00      	nop
 8006ccc:	e0a9      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4aaa      	ldr	r2, [pc, #680]	; (8006f7c <UART_SetConfig+0x5b8>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d124      	bne.n	8006d22 <UART_SetConfig+0x35e>
 8006cd8:	4ba9      	ldr	r3, [pc, #676]	; (8006f80 <UART_SetConfig+0x5bc>)
 8006cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ce6:	d012      	beq.n	8006d0e <UART_SetConfig+0x34a>
 8006ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cec:	d802      	bhi.n	8006cf4 <UART_SetConfig+0x330>
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d007      	beq.n	8006d02 <UART_SetConfig+0x33e>
 8006cf2:	e012      	b.n	8006d1a <UART_SetConfig+0x356>
 8006cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cf8:	d006      	beq.n	8006d08 <UART_SetConfig+0x344>
 8006cfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cfe:	d009      	beq.n	8006d14 <UART_SetConfig+0x350>
 8006d00:	e00b      	b.n	8006d1a <UART_SetConfig+0x356>
 8006d02:	2300      	movs	r3, #0
 8006d04:	77fb      	strb	r3, [r7, #31]
 8006d06:	e08c      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	77fb      	strb	r3, [r7, #31]
 8006d0c:	e089      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006d0e:	2304      	movs	r3, #4
 8006d10:	77fb      	strb	r3, [r7, #31]
 8006d12:	e086      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006d14:	2308      	movs	r3, #8
 8006d16:	77fb      	strb	r3, [r7, #31]
 8006d18:	e083      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006d1a:	2310      	movs	r3, #16
 8006d1c:	77fb      	strb	r3, [r7, #31]
 8006d1e:	bf00      	nop
 8006d20:	e07f      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a97      	ldr	r2, [pc, #604]	; (8006f84 <UART_SetConfig+0x5c0>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d124      	bne.n	8006d76 <UART_SetConfig+0x3b2>
 8006d2c:	4b94      	ldr	r3, [pc, #592]	; (8006f80 <UART_SetConfig+0x5bc>)
 8006d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d32:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d3a:	d012      	beq.n	8006d62 <UART_SetConfig+0x39e>
 8006d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d40:	d802      	bhi.n	8006d48 <UART_SetConfig+0x384>
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d007      	beq.n	8006d56 <UART_SetConfig+0x392>
 8006d46:	e012      	b.n	8006d6e <UART_SetConfig+0x3aa>
 8006d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d4c:	d006      	beq.n	8006d5c <UART_SetConfig+0x398>
 8006d4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d52:	d009      	beq.n	8006d68 <UART_SetConfig+0x3a4>
 8006d54:	e00b      	b.n	8006d6e <UART_SetConfig+0x3aa>
 8006d56:	2301      	movs	r3, #1
 8006d58:	77fb      	strb	r3, [r7, #31]
 8006d5a:	e062      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	77fb      	strb	r3, [r7, #31]
 8006d60:	e05f      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006d62:	2304      	movs	r3, #4
 8006d64:	77fb      	strb	r3, [r7, #31]
 8006d66:	e05c      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006d68:	2308      	movs	r3, #8
 8006d6a:	77fb      	strb	r3, [r7, #31]
 8006d6c:	e059      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006d6e:	2310      	movs	r3, #16
 8006d70:	77fb      	strb	r3, [r7, #31]
 8006d72:	bf00      	nop
 8006d74:	e055      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a83      	ldr	r2, [pc, #524]	; (8006f88 <UART_SetConfig+0x5c4>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d124      	bne.n	8006dca <UART_SetConfig+0x406>
 8006d80:	4b7f      	ldr	r3, [pc, #508]	; (8006f80 <UART_SetConfig+0x5bc>)
 8006d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d86:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d8e:	d012      	beq.n	8006db6 <UART_SetConfig+0x3f2>
 8006d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d94:	d802      	bhi.n	8006d9c <UART_SetConfig+0x3d8>
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d007      	beq.n	8006daa <UART_SetConfig+0x3e6>
 8006d9a:	e012      	b.n	8006dc2 <UART_SetConfig+0x3fe>
 8006d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006da0:	d006      	beq.n	8006db0 <UART_SetConfig+0x3ec>
 8006da2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006da6:	d009      	beq.n	8006dbc <UART_SetConfig+0x3f8>
 8006da8:	e00b      	b.n	8006dc2 <UART_SetConfig+0x3fe>
 8006daa:	2300      	movs	r3, #0
 8006dac:	77fb      	strb	r3, [r7, #31]
 8006dae:	e038      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006db0:	2302      	movs	r3, #2
 8006db2:	77fb      	strb	r3, [r7, #31]
 8006db4:	e035      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006db6:	2304      	movs	r3, #4
 8006db8:	77fb      	strb	r3, [r7, #31]
 8006dba:	e032      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006dbc:	2308      	movs	r3, #8
 8006dbe:	77fb      	strb	r3, [r7, #31]
 8006dc0:	e02f      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006dc2:	2310      	movs	r3, #16
 8006dc4:	77fb      	strb	r3, [r7, #31]
 8006dc6:	bf00      	nop
 8006dc8:	e02b      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a6f      	ldr	r2, [pc, #444]	; (8006f8c <UART_SetConfig+0x5c8>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d124      	bne.n	8006e1e <UART_SetConfig+0x45a>
 8006dd4:	4b6a      	ldr	r3, [pc, #424]	; (8006f80 <UART_SetConfig+0x5bc>)
 8006dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dda:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006dde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006de2:	d012      	beq.n	8006e0a <UART_SetConfig+0x446>
 8006de4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006de8:	d802      	bhi.n	8006df0 <UART_SetConfig+0x42c>
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d007      	beq.n	8006dfe <UART_SetConfig+0x43a>
 8006dee:	e012      	b.n	8006e16 <UART_SetConfig+0x452>
 8006df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006df4:	d006      	beq.n	8006e04 <UART_SetConfig+0x440>
 8006df6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006dfa:	d009      	beq.n	8006e10 <UART_SetConfig+0x44c>
 8006dfc:	e00b      	b.n	8006e16 <UART_SetConfig+0x452>
 8006dfe:	2300      	movs	r3, #0
 8006e00:	77fb      	strb	r3, [r7, #31]
 8006e02:	e00e      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006e04:	2302      	movs	r3, #2
 8006e06:	77fb      	strb	r3, [r7, #31]
 8006e08:	e00b      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006e0a:	2304      	movs	r3, #4
 8006e0c:	77fb      	strb	r3, [r7, #31]
 8006e0e:	e008      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006e10:	2308      	movs	r3, #8
 8006e12:	77fb      	strb	r3, [r7, #31]
 8006e14:	e005      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006e16:	2310      	movs	r3, #16
 8006e18:	77fb      	strb	r3, [r7, #31]
 8006e1a:	bf00      	nop
 8006e1c:	e001      	b.n	8006e22 <UART_SetConfig+0x45e>
 8006e1e:	2310      	movs	r3, #16
 8006e20:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e2a:	d17f      	bne.n	8006f2c <UART_SetConfig+0x568>
  {
    switch (clocksource)
 8006e2c:	7ffb      	ldrb	r3, [r7, #31]
 8006e2e:	2b08      	cmp	r3, #8
 8006e30:	d85c      	bhi.n	8006eec <UART_SetConfig+0x528>
 8006e32:	a201      	add	r2, pc, #4	; (adr r2, 8006e38 <UART_SetConfig+0x474>)
 8006e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e38:	08006e5d 	.word	0x08006e5d
 8006e3c:	08006e7d 	.word	0x08006e7d
 8006e40:	08006e9d 	.word	0x08006e9d
 8006e44:	08006eed 	.word	0x08006eed
 8006e48:	08006eb5 	.word	0x08006eb5
 8006e4c:	08006eed 	.word	0x08006eed
 8006e50:	08006eed 	.word	0x08006eed
 8006e54:	08006eed 	.word	0x08006eed
 8006e58:	08006ed5 	.word	0x08006ed5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e5c:	f7fd f8a4 	bl	8003fa8 <HAL_RCC_GetPCLK1Freq>
 8006e60:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	005a      	lsls	r2, r3, #1
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	085b      	lsrs	r3, r3, #1
 8006e6c:	441a      	add	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	61bb      	str	r3, [r7, #24]
        break;
 8006e7a:	e03a      	b.n	8006ef2 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e7c:	f7fd f8a8 	bl	8003fd0 <HAL_RCC_GetPCLK2Freq>
 8006e80:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	005a      	lsls	r2, r3, #1
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	085b      	lsrs	r3, r3, #1
 8006e8c:	441a      	add	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	61bb      	str	r3, [r7, #24]
        break;
 8006e9a:	e02a      	b.n	8006ef2 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	085a      	lsrs	r2, r3, #1
 8006ea2:	4b3b      	ldr	r3, [pc, #236]	; (8006f90 <UART_SetConfig+0x5cc>)
 8006ea4:	4413      	add	r3, r2
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	6852      	ldr	r2, [r2, #4]
 8006eaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	61bb      	str	r3, [r7, #24]
        break;
 8006eb2:	e01e      	b.n	8006ef2 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eb4:	f7fc ffba 	bl	8003e2c <HAL_RCC_GetSysClockFreq>
 8006eb8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	005a      	lsls	r2, r3, #1
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	085b      	lsrs	r3, r3, #1
 8006ec4:	441a      	add	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	61bb      	str	r3, [r7, #24]
        break;
 8006ed2:	e00e      	b.n	8006ef2 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	085b      	lsrs	r3, r3, #1
 8006eda:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	61bb      	str	r3, [r7, #24]
        break;
 8006eea:	e002      	b.n	8006ef2 <UART_SetConfig+0x52e>
      default:
        ret = HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	75fb      	strb	r3, [r7, #23]
        break;
 8006ef0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	2b0f      	cmp	r3, #15
 8006ef6:	d916      	bls.n	8006f26 <UART_SetConfig+0x562>
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006efe:	d212      	bcs.n	8006f26 <UART_SetConfig+0x562>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	f023 030f 	bic.w	r3, r3, #15
 8006f08:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	085b      	lsrs	r3, r3, #1
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	f003 0307 	and.w	r3, r3, #7
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	897b      	ldrh	r3, [r7, #10]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	897a      	ldrh	r2, [r7, #10]
 8006f22:	60da      	str	r2, [r3, #12]
 8006f24:	e07d      	b.n	8007022 <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	75fb      	strb	r3, [r7, #23]
 8006f2a:	e07a      	b.n	8007022 <UART_SetConfig+0x65e>
    }
  }
  else
  {
    switch (clocksource)
 8006f2c:	7ffb      	ldrb	r3, [r7, #31]
 8006f2e:	2b08      	cmp	r3, #8
 8006f30:	d866      	bhi.n	8007000 <UART_SetConfig+0x63c>
 8006f32:	a201      	add	r2, pc, #4	; (adr r2, 8006f38 <UART_SetConfig+0x574>)
 8006f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f38:	08006f5d 	.word	0x08006f5d
 8006f3c:	08006f95 	.word	0x08006f95
 8006f40:	08006fb3 	.word	0x08006fb3
 8006f44:	08007001 	.word	0x08007001
 8006f48:	08006fcb 	.word	0x08006fcb
 8006f4c:	08007001 	.word	0x08007001
 8006f50:	08007001 	.word	0x08007001
 8006f54:	08007001 	.word	0x08007001
 8006f58:	08006fe9 	.word	0x08006fe9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f5c:	f7fd f824 	bl	8003fa8 <HAL_RCC_GetPCLK1Freq>
 8006f60:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	085a      	lsrs	r2, r3, #1
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	441a      	add	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	61bb      	str	r3, [r7, #24]
        break;
 8006f78:	e045      	b.n	8007006 <UART_SetConfig+0x642>
 8006f7a:	bf00      	nop
 8006f7c:	40005000 	.word	0x40005000
 8006f80:	40023800 	.word	0x40023800
 8006f84:	40011400 	.word	0x40011400
 8006f88:	40007800 	.word	0x40007800
 8006f8c:	40007c00 	.word	0x40007c00
 8006f90:	01e84800 	.word	0x01e84800
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f94:	f7fd f81c 	bl	8003fd0 <HAL_RCC_GetPCLK2Freq>
 8006f98:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	085a      	lsrs	r2, r3, #1
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	441a      	add	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	61bb      	str	r3, [r7, #24]
        break;
 8006fb0:	e029      	b.n	8007006 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	085a      	lsrs	r2, r3, #1
 8006fb8:	4b1f      	ldr	r3, [pc, #124]	; (8007038 <UART_SetConfig+0x674>)
 8006fba:	4413      	add	r3, r2
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	6852      	ldr	r2, [r2, #4]
 8006fc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	61bb      	str	r3, [r7, #24]
        break;
 8006fc8:	e01d      	b.n	8007006 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fca:	f7fc ff2f 	bl	8003e2c <HAL_RCC_GetSysClockFreq>
 8006fce:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	085a      	lsrs	r2, r3, #1
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	441a      	add	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	61bb      	str	r3, [r7, #24]
        break;
 8006fe6:	e00e      	b.n	8007006 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	085b      	lsrs	r3, r3, #1
 8006fee:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	61bb      	str	r3, [r7, #24]
        break;
 8006ffe:	e002      	b.n	8007006 <UART_SetConfig+0x642>
      default:
        ret = HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	75fb      	strb	r3, [r7, #23]
        break;
 8007004:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	2b0f      	cmp	r3, #15
 800700a:	d908      	bls.n	800701e <UART_SetConfig+0x65a>
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007012:	d204      	bcs.n	800701e <UART_SetConfig+0x65a>
    {
      huart->Instance->BRR = usartdiv;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	60da      	str	r2, [r3, #12]
 800701c:	e001      	b.n	8007022 <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800702e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3720      	adds	r7, #32
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	00f42400 	.word	0x00f42400

0800703c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007048:	2bff      	cmp	r3, #255	; 0xff
 800704a:	d904      	bls.n	8007056 <UART_AdvFeatureConfig+0x1a>
 800704c:	f640 3143 	movw	r1, #2883	; 0xb43
 8007050:	489f      	ldr	r0, [pc, #636]	; (80072d0 <UART_AdvFeatureConfig+0x294>)
 8007052:	f7fa fcea 	bl	8001a2a <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d018      	beq.n	8007094 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007066:	2b00      	cmp	r3, #0
 8007068:	d009      	beq.n	800707e <UART_AdvFeatureConfig+0x42>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007072:	d004      	beq.n	800707e <UART_AdvFeatureConfig+0x42>
 8007074:	f640 3148 	movw	r1, #2888	; 0xb48
 8007078:	4895      	ldr	r0, [pc, #596]	; (80072d0 <UART_AdvFeatureConfig+0x294>)
 800707a:	f7fa fcd6 	bl	8001a2a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	430a      	orrs	r2, r1
 8007092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b00      	cmp	r3, #0
 800709e:	d018      	beq.n	80070d2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d009      	beq.n	80070bc <UART_AdvFeatureConfig+0x80>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070b0:	d004      	beq.n	80070bc <UART_AdvFeatureConfig+0x80>
 80070b2:	f640 314f 	movw	r1, #2895	; 0xb4f
 80070b6:	4886      	ldr	r0, [pc, #536]	; (80072d0 <UART_AdvFeatureConfig+0x294>)
 80070b8:	f7fa fcb7 	bl	8001a2a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	430a      	orrs	r2, r1
 80070d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d6:	f003 0304 	and.w	r3, r3, #4
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d018      	beq.n	8007110 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d009      	beq.n	80070fa <UART_AdvFeatureConfig+0xbe>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80070ee:	d004      	beq.n	80070fa <UART_AdvFeatureConfig+0xbe>
 80070f0:	f640 3156 	movw	r1, #2902	; 0xb56
 80070f4:	4876      	ldr	r0, [pc, #472]	; (80072d0 <UART_AdvFeatureConfig+0x294>)
 80070f6:	f7fa fc98 	bl	8001a2a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	430a      	orrs	r2, r1
 800710e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007114:	f003 0308 	and.w	r3, r3, #8
 8007118:	2b00      	cmp	r3, #0
 800711a:	d018      	beq.n	800714e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007120:	2b00      	cmp	r3, #0
 8007122:	d009      	beq.n	8007138 <UART_AdvFeatureConfig+0xfc>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800712c:	d004      	beq.n	8007138 <UART_AdvFeatureConfig+0xfc>
 800712e:	f640 315d 	movw	r1, #2909	; 0xb5d
 8007132:	4867      	ldr	r0, [pc, #412]	; (80072d0 <UART_AdvFeatureConfig+0x294>)
 8007134:	f7fa fc79 	bl	8001a2a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007152:	f003 0310 	and.w	r3, r3, #16
 8007156:	2b00      	cmp	r3, #0
 8007158:	d018      	beq.n	800718c <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715e:	2b00      	cmp	r3, #0
 8007160:	d009      	beq.n	8007176 <UART_AdvFeatureConfig+0x13a>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800716a:	d004      	beq.n	8007176 <UART_AdvFeatureConfig+0x13a>
 800716c:	f640 3164 	movw	r1, #2916	; 0xb64
 8007170:	4857      	ldr	r0, [pc, #348]	; (80072d0 <UART_AdvFeatureConfig+0x294>)
 8007172:	f7fa fc5a 	bl	8001a2a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	430a      	orrs	r2, r1
 800718a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007190:	f003 0320 	and.w	r3, r3, #32
 8007194:	2b00      	cmp	r3, #0
 8007196:	d018      	beq.n	80071ca <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800719c:	2b00      	cmp	r3, #0
 800719e:	d009      	beq.n	80071b4 <UART_AdvFeatureConfig+0x178>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071a8:	d004      	beq.n	80071b4 <UART_AdvFeatureConfig+0x178>
 80071aa:	f640 316b 	movw	r1, #2923	; 0xb6b
 80071ae:	4848      	ldr	r0, [pc, #288]	; (80072d0 <UART_AdvFeatureConfig+0x294>)
 80071b0:	f7fa fc3b 	bl	8001a2a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d059      	beq.n	800728a <UART_AdvFeatureConfig+0x24e>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a3e      	ldr	r2, [pc, #248]	; (80072d4 <UART_AdvFeatureConfig+0x298>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d013      	beq.n	8007208 <UART_AdvFeatureConfig+0x1cc>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a3c      	ldr	r2, [pc, #240]	; (80072d8 <UART_AdvFeatureConfig+0x29c>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d00e      	beq.n	8007208 <UART_AdvFeatureConfig+0x1cc>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a3b      	ldr	r2, [pc, #236]	; (80072dc <UART_AdvFeatureConfig+0x2a0>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d009      	beq.n	8007208 <UART_AdvFeatureConfig+0x1cc>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a39      	ldr	r2, [pc, #228]	; (80072e0 <UART_AdvFeatureConfig+0x2a4>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d004      	beq.n	8007208 <UART_AdvFeatureConfig+0x1cc>
 80071fe:	f640 3172 	movw	r1, #2930	; 0xb72
 8007202:	4833      	ldr	r0, [pc, #204]	; (80072d0 <UART_AdvFeatureConfig+0x294>)
 8007204:	f7fa fc11 	bl	8001a2a <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720c:	2b00      	cmp	r3, #0
 800720e:	d009      	beq.n	8007224 <UART_AdvFeatureConfig+0x1e8>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007214:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007218:	d004      	beq.n	8007224 <UART_AdvFeatureConfig+0x1e8>
 800721a:	f640 3173 	movw	r1, #2931	; 0xb73
 800721e:	482c      	ldr	r0, [pc, #176]	; (80072d0 <UART_AdvFeatureConfig+0x294>)
 8007220:	f7fa fc03 	bl	8001a2a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007242:	d122      	bne.n	800728a <UART_AdvFeatureConfig+0x24e>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007248:	2b00      	cmp	r3, #0
 800724a:	d013      	beq.n	8007274 <UART_AdvFeatureConfig+0x238>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007250:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007254:	d00e      	beq.n	8007274 <UART_AdvFeatureConfig+0x238>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800725a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800725e:	d009      	beq.n	8007274 <UART_AdvFeatureConfig+0x238>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007264:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007268:	d004      	beq.n	8007274 <UART_AdvFeatureConfig+0x238>
 800726a:	f640 3178 	movw	r1, #2936	; 0xb78
 800726e:	4818      	ldr	r0, [pc, #96]	; (80072d0 <UART_AdvFeatureConfig+0x294>)
 8007270:	f7fa fbdb 	bl	8001a2a <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007292:	2b00      	cmp	r3, #0
 8007294:	d018      	beq.n	80072c8 <UART_AdvFeatureConfig+0x28c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800729a:	2b00      	cmp	r3, #0
 800729c:	d009      	beq.n	80072b2 <UART_AdvFeatureConfig+0x276>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80072a6:	d004      	beq.n	80072b2 <UART_AdvFeatureConfig+0x276>
 80072a8:	f44f 6138 	mov.w	r1, #2944	; 0xb80
 80072ac:	4808      	ldr	r0, [pc, #32]	; (80072d0 <UART_AdvFeatureConfig+0x294>)
 80072ae:	f7fa fbbc 	bl	8001a2a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	430a      	orrs	r2, r1
 80072c6:	605a      	str	r2, [r3, #4]
  }
}
 80072c8:	bf00      	nop
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	08007f4c 	.word	0x08007f4c
 80072d4:	40011000 	.word	0x40011000
 80072d8:	40004400 	.word	0x40004400
 80072dc:	40004800 	.word	0x40004800
 80072e0:	40011400 	.word	0x40011400

080072e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af02      	add	r7, sp, #8
 80072ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80072f2:	f7fb f933 	bl	800255c <HAL_GetTick>
 80072f6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0308 	and.w	r3, r3, #8
 8007302:	2b08      	cmp	r3, #8
 8007304:	d10e      	bne.n	8007324 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007306:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f82a 	bl	800736e <UART_WaitOnFlagUntilTimeout>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e020      	b.n	8007366 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0304 	and.w	r3, r3, #4
 800732e:	2b04      	cmp	r3, #4
 8007330:	d10e      	bne.n	8007350 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007332:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f814 	bl	800736e <UART_WaitOnFlagUntilTimeout>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e00a      	b.n	8007366 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2220      	movs	r2, #32
 8007354:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2220      	movs	r2, #32
 800735a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	603b      	str	r3, [r7, #0]
 800737a:	4613      	mov	r3, r2
 800737c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800737e:	e05d      	b.n	800743c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007386:	d059      	beq.n	800743c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007388:	f7fb f8e8 	bl	800255c <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	69ba      	ldr	r2, [r7, #24]
 8007394:	429a      	cmp	r2, r3
 8007396:	d302      	bcc.n	800739e <UART_WaitOnFlagUntilTimeout+0x30>
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d11b      	bne.n	80073d6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80073ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	689a      	ldr	r2, [r3, #8]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f022 0201 	bic.w	r2, r2, #1
 80073bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2220      	movs	r2, #32
 80073c2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2220      	movs	r2, #32
 80073c8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e042      	b.n	800745c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 0304 	and.w	r3, r3, #4
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d02b      	beq.n	800743c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073f2:	d123      	bne.n	800743c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073fc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800740c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f022 0201 	bic.w	r2, r2, #1
 800741c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2220      	movs	r2, #32
 8007422:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2220      	movs	r2, #32
 8007428:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2220      	movs	r2, #32
 800742e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e00f      	b.n	800745c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	69da      	ldr	r2, [r3, #28]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	4013      	ands	r3, r2
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	429a      	cmp	r2, r3
 800744a:	bf0c      	ite	eq
 800744c:	2301      	moveq	r3, #1
 800744e:	2300      	movne	r3, #0
 8007450:	b2db      	uxtb	r3, r3
 8007452:	461a      	mov	r2, r3
 8007454:	79fb      	ldrb	r3, [r7, #7]
 8007456:	429a      	cmp	r2, r3
 8007458:	d092      	beq.n	8007380 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800747a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689a      	ldr	r2, [r3, #8]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 0201 	bic.w	r2, r2, #1
 800748a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2220      	movs	r2, #32
 8007490:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f7ff fa6a 	bl	800699c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074c8:	bf00      	nop
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074e6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2220      	movs	r2, #32
 80074ec:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7ff fa47 	bl	8006988 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074fa:	bf00      	nop
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <__errno>:
 8007504:	4b01      	ldr	r3, [pc, #4]	; (800750c <__errno+0x8>)
 8007506:	6818      	ldr	r0, [r3, #0]
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	2000000c 	.word	0x2000000c

08007510 <__libc_init_array>:
 8007510:	b570      	push	{r4, r5, r6, lr}
 8007512:	4e0d      	ldr	r6, [pc, #52]	; (8007548 <__libc_init_array+0x38>)
 8007514:	4c0d      	ldr	r4, [pc, #52]	; (800754c <__libc_init_array+0x3c>)
 8007516:	1ba4      	subs	r4, r4, r6
 8007518:	10a4      	asrs	r4, r4, #2
 800751a:	2500      	movs	r5, #0
 800751c:	42a5      	cmp	r5, r4
 800751e:	d109      	bne.n	8007534 <__libc_init_array+0x24>
 8007520:	4e0b      	ldr	r6, [pc, #44]	; (8007550 <__libc_init_array+0x40>)
 8007522:	4c0c      	ldr	r4, [pc, #48]	; (8007554 <__libc_init_array+0x44>)
 8007524:	f000 fc26 	bl	8007d74 <_init>
 8007528:	1ba4      	subs	r4, r4, r6
 800752a:	10a4      	asrs	r4, r4, #2
 800752c:	2500      	movs	r5, #0
 800752e:	42a5      	cmp	r5, r4
 8007530:	d105      	bne.n	800753e <__libc_init_array+0x2e>
 8007532:	bd70      	pop	{r4, r5, r6, pc}
 8007534:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007538:	4798      	blx	r3
 800753a:	3501      	adds	r5, #1
 800753c:	e7ee      	b.n	800751c <__libc_init_array+0xc>
 800753e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007542:	4798      	blx	r3
 8007544:	3501      	adds	r5, #1
 8007546:	e7f2      	b.n	800752e <__libc_init_array+0x1e>
 8007548:	08007fdc 	.word	0x08007fdc
 800754c:	08007fdc 	.word	0x08007fdc
 8007550:	08007fdc 	.word	0x08007fdc
 8007554:	08007fe0 	.word	0x08007fe0

08007558 <memset>:
 8007558:	4402      	add	r2, r0
 800755a:	4603      	mov	r3, r0
 800755c:	4293      	cmp	r3, r2
 800755e:	d100      	bne.n	8007562 <memset+0xa>
 8007560:	4770      	bx	lr
 8007562:	f803 1b01 	strb.w	r1, [r3], #1
 8007566:	e7f9      	b.n	800755c <memset+0x4>

08007568 <siprintf>:
 8007568:	b40e      	push	{r1, r2, r3}
 800756a:	b500      	push	{lr}
 800756c:	b09c      	sub	sp, #112	; 0x70
 800756e:	ab1d      	add	r3, sp, #116	; 0x74
 8007570:	9002      	str	r0, [sp, #8]
 8007572:	9006      	str	r0, [sp, #24]
 8007574:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007578:	4809      	ldr	r0, [pc, #36]	; (80075a0 <siprintf+0x38>)
 800757a:	9107      	str	r1, [sp, #28]
 800757c:	9104      	str	r1, [sp, #16]
 800757e:	4909      	ldr	r1, [pc, #36]	; (80075a4 <siprintf+0x3c>)
 8007580:	f853 2b04 	ldr.w	r2, [r3], #4
 8007584:	9105      	str	r1, [sp, #20]
 8007586:	6800      	ldr	r0, [r0, #0]
 8007588:	9301      	str	r3, [sp, #4]
 800758a:	a902      	add	r1, sp, #8
 800758c:	f000 f866 	bl	800765c <_svfiprintf_r>
 8007590:	9b02      	ldr	r3, [sp, #8]
 8007592:	2200      	movs	r2, #0
 8007594:	701a      	strb	r2, [r3, #0]
 8007596:	b01c      	add	sp, #112	; 0x70
 8007598:	f85d eb04 	ldr.w	lr, [sp], #4
 800759c:	b003      	add	sp, #12
 800759e:	4770      	bx	lr
 80075a0:	2000000c 	.word	0x2000000c
 80075a4:	ffff0208 	.word	0xffff0208

080075a8 <__ssputs_r>:
 80075a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075ac:	688e      	ldr	r6, [r1, #8]
 80075ae:	429e      	cmp	r6, r3
 80075b0:	4682      	mov	sl, r0
 80075b2:	460c      	mov	r4, r1
 80075b4:	4690      	mov	r8, r2
 80075b6:	4699      	mov	r9, r3
 80075b8:	d837      	bhi.n	800762a <__ssputs_r+0x82>
 80075ba:	898a      	ldrh	r2, [r1, #12]
 80075bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075c0:	d031      	beq.n	8007626 <__ssputs_r+0x7e>
 80075c2:	6825      	ldr	r5, [r4, #0]
 80075c4:	6909      	ldr	r1, [r1, #16]
 80075c6:	1a6f      	subs	r7, r5, r1
 80075c8:	6965      	ldr	r5, [r4, #20]
 80075ca:	2302      	movs	r3, #2
 80075cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075d0:	fb95 f5f3 	sdiv	r5, r5, r3
 80075d4:	f109 0301 	add.w	r3, r9, #1
 80075d8:	443b      	add	r3, r7
 80075da:	429d      	cmp	r5, r3
 80075dc:	bf38      	it	cc
 80075de:	461d      	movcc	r5, r3
 80075e0:	0553      	lsls	r3, r2, #21
 80075e2:	d530      	bpl.n	8007646 <__ssputs_r+0x9e>
 80075e4:	4629      	mov	r1, r5
 80075e6:	f000 fb2b 	bl	8007c40 <_malloc_r>
 80075ea:	4606      	mov	r6, r0
 80075ec:	b950      	cbnz	r0, 8007604 <__ssputs_r+0x5c>
 80075ee:	230c      	movs	r3, #12
 80075f0:	f8ca 3000 	str.w	r3, [sl]
 80075f4:	89a3      	ldrh	r3, [r4, #12]
 80075f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075fa:	81a3      	strh	r3, [r4, #12]
 80075fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007604:	463a      	mov	r2, r7
 8007606:	6921      	ldr	r1, [r4, #16]
 8007608:	f000 faa8 	bl	8007b5c <memcpy>
 800760c:	89a3      	ldrh	r3, [r4, #12]
 800760e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007616:	81a3      	strh	r3, [r4, #12]
 8007618:	6126      	str	r6, [r4, #16]
 800761a:	6165      	str	r5, [r4, #20]
 800761c:	443e      	add	r6, r7
 800761e:	1bed      	subs	r5, r5, r7
 8007620:	6026      	str	r6, [r4, #0]
 8007622:	60a5      	str	r5, [r4, #8]
 8007624:	464e      	mov	r6, r9
 8007626:	454e      	cmp	r6, r9
 8007628:	d900      	bls.n	800762c <__ssputs_r+0x84>
 800762a:	464e      	mov	r6, r9
 800762c:	4632      	mov	r2, r6
 800762e:	4641      	mov	r1, r8
 8007630:	6820      	ldr	r0, [r4, #0]
 8007632:	f000 fa9e 	bl	8007b72 <memmove>
 8007636:	68a3      	ldr	r3, [r4, #8]
 8007638:	1b9b      	subs	r3, r3, r6
 800763a:	60a3      	str	r3, [r4, #8]
 800763c:	6823      	ldr	r3, [r4, #0]
 800763e:	441e      	add	r6, r3
 8007640:	6026      	str	r6, [r4, #0]
 8007642:	2000      	movs	r0, #0
 8007644:	e7dc      	b.n	8007600 <__ssputs_r+0x58>
 8007646:	462a      	mov	r2, r5
 8007648:	f000 fb54 	bl	8007cf4 <_realloc_r>
 800764c:	4606      	mov	r6, r0
 800764e:	2800      	cmp	r0, #0
 8007650:	d1e2      	bne.n	8007618 <__ssputs_r+0x70>
 8007652:	6921      	ldr	r1, [r4, #16]
 8007654:	4650      	mov	r0, sl
 8007656:	f000 faa5 	bl	8007ba4 <_free_r>
 800765a:	e7c8      	b.n	80075ee <__ssputs_r+0x46>

0800765c <_svfiprintf_r>:
 800765c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007660:	461d      	mov	r5, r3
 8007662:	898b      	ldrh	r3, [r1, #12]
 8007664:	061f      	lsls	r7, r3, #24
 8007666:	b09d      	sub	sp, #116	; 0x74
 8007668:	4680      	mov	r8, r0
 800766a:	460c      	mov	r4, r1
 800766c:	4616      	mov	r6, r2
 800766e:	d50f      	bpl.n	8007690 <_svfiprintf_r+0x34>
 8007670:	690b      	ldr	r3, [r1, #16]
 8007672:	b96b      	cbnz	r3, 8007690 <_svfiprintf_r+0x34>
 8007674:	2140      	movs	r1, #64	; 0x40
 8007676:	f000 fae3 	bl	8007c40 <_malloc_r>
 800767a:	6020      	str	r0, [r4, #0]
 800767c:	6120      	str	r0, [r4, #16]
 800767e:	b928      	cbnz	r0, 800768c <_svfiprintf_r+0x30>
 8007680:	230c      	movs	r3, #12
 8007682:	f8c8 3000 	str.w	r3, [r8]
 8007686:	f04f 30ff 	mov.w	r0, #4294967295
 800768a:	e0c8      	b.n	800781e <_svfiprintf_r+0x1c2>
 800768c:	2340      	movs	r3, #64	; 0x40
 800768e:	6163      	str	r3, [r4, #20]
 8007690:	2300      	movs	r3, #0
 8007692:	9309      	str	r3, [sp, #36]	; 0x24
 8007694:	2320      	movs	r3, #32
 8007696:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800769a:	2330      	movs	r3, #48	; 0x30
 800769c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076a0:	9503      	str	r5, [sp, #12]
 80076a2:	f04f 0b01 	mov.w	fp, #1
 80076a6:	4637      	mov	r7, r6
 80076a8:	463d      	mov	r5, r7
 80076aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80076ae:	b10b      	cbz	r3, 80076b4 <_svfiprintf_r+0x58>
 80076b0:	2b25      	cmp	r3, #37	; 0x25
 80076b2:	d13e      	bne.n	8007732 <_svfiprintf_r+0xd6>
 80076b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80076b8:	d00b      	beq.n	80076d2 <_svfiprintf_r+0x76>
 80076ba:	4653      	mov	r3, sl
 80076bc:	4632      	mov	r2, r6
 80076be:	4621      	mov	r1, r4
 80076c0:	4640      	mov	r0, r8
 80076c2:	f7ff ff71 	bl	80075a8 <__ssputs_r>
 80076c6:	3001      	adds	r0, #1
 80076c8:	f000 80a4 	beq.w	8007814 <_svfiprintf_r+0x1b8>
 80076cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ce:	4453      	add	r3, sl
 80076d0:	9309      	str	r3, [sp, #36]	; 0x24
 80076d2:	783b      	ldrb	r3, [r7, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f000 809d 	beq.w	8007814 <_svfiprintf_r+0x1b8>
 80076da:	2300      	movs	r3, #0
 80076dc:	f04f 32ff 	mov.w	r2, #4294967295
 80076e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076e4:	9304      	str	r3, [sp, #16]
 80076e6:	9307      	str	r3, [sp, #28]
 80076e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076ec:	931a      	str	r3, [sp, #104]	; 0x68
 80076ee:	462f      	mov	r7, r5
 80076f0:	2205      	movs	r2, #5
 80076f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80076f6:	4850      	ldr	r0, [pc, #320]	; (8007838 <_svfiprintf_r+0x1dc>)
 80076f8:	f7f8 fdaa 	bl	8000250 <memchr>
 80076fc:	9b04      	ldr	r3, [sp, #16]
 80076fe:	b9d0      	cbnz	r0, 8007736 <_svfiprintf_r+0xda>
 8007700:	06d9      	lsls	r1, r3, #27
 8007702:	bf44      	itt	mi
 8007704:	2220      	movmi	r2, #32
 8007706:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800770a:	071a      	lsls	r2, r3, #28
 800770c:	bf44      	itt	mi
 800770e:	222b      	movmi	r2, #43	; 0x2b
 8007710:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007714:	782a      	ldrb	r2, [r5, #0]
 8007716:	2a2a      	cmp	r2, #42	; 0x2a
 8007718:	d015      	beq.n	8007746 <_svfiprintf_r+0xea>
 800771a:	9a07      	ldr	r2, [sp, #28]
 800771c:	462f      	mov	r7, r5
 800771e:	2000      	movs	r0, #0
 8007720:	250a      	movs	r5, #10
 8007722:	4639      	mov	r1, r7
 8007724:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007728:	3b30      	subs	r3, #48	; 0x30
 800772a:	2b09      	cmp	r3, #9
 800772c:	d94d      	bls.n	80077ca <_svfiprintf_r+0x16e>
 800772e:	b1b8      	cbz	r0, 8007760 <_svfiprintf_r+0x104>
 8007730:	e00f      	b.n	8007752 <_svfiprintf_r+0xf6>
 8007732:	462f      	mov	r7, r5
 8007734:	e7b8      	b.n	80076a8 <_svfiprintf_r+0x4c>
 8007736:	4a40      	ldr	r2, [pc, #256]	; (8007838 <_svfiprintf_r+0x1dc>)
 8007738:	1a80      	subs	r0, r0, r2
 800773a:	fa0b f000 	lsl.w	r0, fp, r0
 800773e:	4318      	orrs	r0, r3
 8007740:	9004      	str	r0, [sp, #16]
 8007742:	463d      	mov	r5, r7
 8007744:	e7d3      	b.n	80076ee <_svfiprintf_r+0x92>
 8007746:	9a03      	ldr	r2, [sp, #12]
 8007748:	1d11      	adds	r1, r2, #4
 800774a:	6812      	ldr	r2, [r2, #0]
 800774c:	9103      	str	r1, [sp, #12]
 800774e:	2a00      	cmp	r2, #0
 8007750:	db01      	blt.n	8007756 <_svfiprintf_r+0xfa>
 8007752:	9207      	str	r2, [sp, #28]
 8007754:	e004      	b.n	8007760 <_svfiprintf_r+0x104>
 8007756:	4252      	negs	r2, r2
 8007758:	f043 0302 	orr.w	r3, r3, #2
 800775c:	9207      	str	r2, [sp, #28]
 800775e:	9304      	str	r3, [sp, #16]
 8007760:	783b      	ldrb	r3, [r7, #0]
 8007762:	2b2e      	cmp	r3, #46	; 0x2e
 8007764:	d10c      	bne.n	8007780 <_svfiprintf_r+0x124>
 8007766:	787b      	ldrb	r3, [r7, #1]
 8007768:	2b2a      	cmp	r3, #42	; 0x2a
 800776a:	d133      	bne.n	80077d4 <_svfiprintf_r+0x178>
 800776c:	9b03      	ldr	r3, [sp, #12]
 800776e:	1d1a      	adds	r2, r3, #4
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	9203      	str	r2, [sp, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	bfb8      	it	lt
 8007778:	f04f 33ff 	movlt.w	r3, #4294967295
 800777c:	3702      	adds	r7, #2
 800777e:	9305      	str	r3, [sp, #20]
 8007780:	4d2e      	ldr	r5, [pc, #184]	; (800783c <_svfiprintf_r+0x1e0>)
 8007782:	7839      	ldrb	r1, [r7, #0]
 8007784:	2203      	movs	r2, #3
 8007786:	4628      	mov	r0, r5
 8007788:	f7f8 fd62 	bl	8000250 <memchr>
 800778c:	b138      	cbz	r0, 800779e <_svfiprintf_r+0x142>
 800778e:	2340      	movs	r3, #64	; 0x40
 8007790:	1b40      	subs	r0, r0, r5
 8007792:	fa03 f000 	lsl.w	r0, r3, r0
 8007796:	9b04      	ldr	r3, [sp, #16]
 8007798:	4303      	orrs	r3, r0
 800779a:	3701      	adds	r7, #1
 800779c:	9304      	str	r3, [sp, #16]
 800779e:	7839      	ldrb	r1, [r7, #0]
 80077a0:	4827      	ldr	r0, [pc, #156]	; (8007840 <_svfiprintf_r+0x1e4>)
 80077a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077a6:	2206      	movs	r2, #6
 80077a8:	1c7e      	adds	r6, r7, #1
 80077aa:	f7f8 fd51 	bl	8000250 <memchr>
 80077ae:	2800      	cmp	r0, #0
 80077b0:	d038      	beq.n	8007824 <_svfiprintf_r+0x1c8>
 80077b2:	4b24      	ldr	r3, [pc, #144]	; (8007844 <_svfiprintf_r+0x1e8>)
 80077b4:	bb13      	cbnz	r3, 80077fc <_svfiprintf_r+0x1a0>
 80077b6:	9b03      	ldr	r3, [sp, #12]
 80077b8:	3307      	adds	r3, #7
 80077ba:	f023 0307 	bic.w	r3, r3, #7
 80077be:	3308      	adds	r3, #8
 80077c0:	9303      	str	r3, [sp, #12]
 80077c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c4:	444b      	add	r3, r9
 80077c6:	9309      	str	r3, [sp, #36]	; 0x24
 80077c8:	e76d      	b.n	80076a6 <_svfiprintf_r+0x4a>
 80077ca:	fb05 3202 	mla	r2, r5, r2, r3
 80077ce:	2001      	movs	r0, #1
 80077d0:	460f      	mov	r7, r1
 80077d2:	e7a6      	b.n	8007722 <_svfiprintf_r+0xc6>
 80077d4:	2300      	movs	r3, #0
 80077d6:	3701      	adds	r7, #1
 80077d8:	9305      	str	r3, [sp, #20]
 80077da:	4619      	mov	r1, r3
 80077dc:	250a      	movs	r5, #10
 80077de:	4638      	mov	r0, r7
 80077e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077e4:	3a30      	subs	r2, #48	; 0x30
 80077e6:	2a09      	cmp	r2, #9
 80077e8:	d903      	bls.n	80077f2 <_svfiprintf_r+0x196>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d0c8      	beq.n	8007780 <_svfiprintf_r+0x124>
 80077ee:	9105      	str	r1, [sp, #20]
 80077f0:	e7c6      	b.n	8007780 <_svfiprintf_r+0x124>
 80077f2:	fb05 2101 	mla	r1, r5, r1, r2
 80077f6:	2301      	movs	r3, #1
 80077f8:	4607      	mov	r7, r0
 80077fa:	e7f0      	b.n	80077de <_svfiprintf_r+0x182>
 80077fc:	ab03      	add	r3, sp, #12
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	4622      	mov	r2, r4
 8007802:	4b11      	ldr	r3, [pc, #68]	; (8007848 <_svfiprintf_r+0x1ec>)
 8007804:	a904      	add	r1, sp, #16
 8007806:	4640      	mov	r0, r8
 8007808:	f3af 8000 	nop.w
 800780c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007810:	4681      	mov	r9, r0
 8007812:	d1d6      	bne.n	80077c2 <_svfiprintf_r+0x166>
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	065b      	lsls	r3, r3, #25
 8007818:	f53f af35 	bmi.w	8007686 <_svfiprintf_r+0x2a>
 800781c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800781e:	b01d      	add	sp, #116	; 0x74
 8007820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007824:	ab03      	add	r3, sp, #12
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	4622      	mov	r2, r4
 800782a:	4b07      	ldr	r3, [pc, #28]	; (8007848 <_svfiprintf_r+0x1ec>)
 800782c:	a904      	add	r1, sp, #16
 800782e:	4640      	mov	r0, r8
 8007830:	f000 f882 	bl	8007938 <_printf_i>
 8007834:	e7ea      	b.n	800780c <_svfiprintf_r+0x1b0>
 8007836:	bf00      	nop
 8007838:	08007fa0 	.word	0x08007fa0
 800783c:	08007fa6 	.word	0x08007fa6
 8007840:	08007faa 	.word	0x08007faa
 8007844:	00000000 	.word	0x00000000
 8007848:	080075a9 	.word	0x080075a9

0800784c <_printf_common>:
 800784c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007850:	4691      	mov	r9, r2
 8007852:	461f      	mov	r7, r3
 8007854:	688a      	ldr	r2, [r1, #8]
 8007856:	690b      	ldr	r3, [r1, #16]
 8007858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800785c:	4293      	cmp	r3, r2
 800785e:	bfb8      	it	lt
 8007860:	4613      	movlt	r3, r2
 8007862:	f8c9 3000 	str.w	r3, [r9]
 8007866:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800786a:	4606      	mov	r6, r0
 800786c:	460c      	mov	r4, r1
 800786e:	b112      	cbz	r2, 8007876 <_printf_common+0x2a>
 8007870:	3301      	adds	r3, #1
 8007872:	f8c9 3000 	str.w	r3, [r9]
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	0699      	lsls	r1, r3, #26
 800787a:	bf42      	ittt	mi
 800787c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007880:	3302      	addmi	r3, #2
 8007882:	f8c9 3000 	strmi.w	r3, [r9]
 8007886:	6825      	ldr	r5, [r4, #0]
 8007888:	f015 0506 	ands.w	r5, r5, #6
 800788c:	d107      	bne.n	800789e <_printf_common+0x52>
 800788e:	f104 0a19 	add.w	sl, r4, #25
 8007892:	68e3      	ldr	r3, [r4, #12]
 8007894:	f8d9 2000 	ldr.w	r2, [r9]
 8007898:	1a9b      	subs	r3, r3, r2
 800789a:	42ab      	cmp	r3, r5
 800789c:	dc28      	bgt.n	80078f0 <_printf_common+0xa4>
 800789e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80078a2:	6822      	ldr	r2, [r4, #0]
 80078a4:	3300      	adds	r3, #0
 80078a6:	bf18      	it	ne
 80078a8:	2301      	movne	r3, #1
 80078aa:	0692      	lsls	r2, r2, #26
 80078ac:	d42d      	bmi.n	800790a <_printf_common+0xbe>
 80078ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078b2:	4639      	mov	r1, r7
 80078b4:	4630      	mov	r0, r6
 80078b6:	47c0      	blx	r8
 80078b8:	3001      	adds	r0, #1
 80078ba:	d020      	beq.n	80078fe <_printf_common+0xb2>
 80078bc:	6823      	ldr	r3, [r4, #0]
 80078be:	68e5      	ldr	r5, [r4, #12]
 80078c0:	f8d9 2000 	ldr.w	r2, [r9]
 80078c4:	f003 0306 	and.w	r3, r3, #6
 80078c8:	2b04      	cmp	r3, #4
 80078ca:	bf08      	it	eq
 80078cc:	1aad      	subeq	r5, r5, r2
 80078ce:	68a3      	ldr	r3, [r4, #8]
 80078d0:	6922      	ldr	r2, [r4, #16]
 80078d2:	bf0c      	ite	eq
 80078d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078d8:	2500      	movne	r5, #0
 80078da:	4293      	cmp	r3, r2
 80078dc:	bfc4      	itt	gt
 80078de:	1a9b      	subgt	r3, r3, r2
 80078e0:	18ed      	addgt	r5, r5, r3
 80078e2:	f04f 0900 	mov.w	r9, #0
 80078e6:	341a      	adds	r4, #26
 80078e8:	454d      	cmp	r5, r9
 80078ea:	d11a      	bne.n	8007922 <_printf_common+0xd6>
 80078ec:	2000      	movs	r0, #0
 80078ee:	e008      	b.n	8007902 <_printf_common+0xb6>
 80078f0:	2301      	movs	r3, #1
 80078f2:	4652      	mov	r2, sl
 80078f4:	4639      	mov	r1, r7
 80078f6:	4630      	mov	r0, r6
 80078f8:	47c0      	blx	r8
 80078fa:	3001      	adds	r0, #1
 80078fc:	d103      	bne.n	8007906 <_printf_common+0xba>
 80078fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007906:	3501      	adds	r5, #1
 8007908:	e7c3      	b.n	8007892 <_printf_common+0x46>
 800790a:	18e1      	adds	r1, r4, r3
 800790c:	1c5a      	adds	r2, r3, #1
 800790e:	2030      	movs	r0, #48	; 0x30
 8007910:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007914:	4422      	add	r2, r4
 8007916:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800791a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800791e:	3302      	adds	r3, #2
 8007920:	e7c5      	b.n	80078ae <_printf_common+0x62>
 8007922:	2301      	movs	r3, #1
 8007924:	4622      	mov	r2, r4
 8007926:	4639      	mov	r1, r7
 8007928:	4630      	mov	r0, r6
 800792a:	47c0      	blx	r8
 800792c:	3001      	adds	r0, #1
 800792e:	d0e6      	beq.n	80078fe <_printf_common+0xb2>
 8007930:	f109 0901 	add.w	r9, r9, #1
 8007934:	e7d8      	b.n	80078e8 <_printf_common+0x9c>
	...

08007938 <_printf_i>:
 8007938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800793c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007940:	460c      	mov	r4, r1
 8007942:	7e09      	ldrb	r1, [r1, #24]
 8007944:	b085      	sub	sp, #20
 8007946:	296e      	cmp	r1, #110	; 0x6e
 8007948:	4617      	mov	r7, r2
 800794a:	4606      	mov	r6, r0
 800794c:	4698      	mov	r8, r3
 800794e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007950:	f000 80b3 	beq.w	8007aba <_printf_i+0x182>
 8007954:	d822      	bhi.n	800799c <_printf_i+0x64>
 8007956:	2963      	cmp	r1, #99	; 0x63
 8007958:	d036      	beq.n	80079c8 <_printf_i+0x90>
 800795a:	d80a      	bhi.n	8007972 <_printf_i+0x3a>
 800795c:	2900      	cmp	r1, #0
 800795e:	f000 80b9 	beq.w	8007ad4 <_printf_i+0x19c>
 8007962:	2958      	cmp	r1, #88	; 0x58
 8007964:	f000 8083 	beq.w	8007a6e <_printf_i+0x136>
 8007968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800796c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007970:	e032      	b.n	80079d8 <_printf_i+0xa0>
 8007972:	2964      	cmp	r1, #100	; 0x64
 8007974:	d001      	beq.n	800797a <_printf_i+0x42>
 8007976:	2969      	cmp	r1, #105	; 0x69
 8007978:	d1f6      	bne.n	8007968 <_printf_i+0x30>
 800797a:	6820      	ldr	r0, [r4, #0]
 800797c:	6813      	ldr	r3, [r2, #0]
 800797e:	0605      	lsls	r5, r0, #24
 8007980:	f103 0104 	add.w	r1, r3, #4
 8007984:	d52a      	bpl.n	80079dc <_printf_i+0xa4>
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6011      	str	r1, [r2, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	da03      	bge.n	8007996 <_printf_i+0x5e>
 800798e:	222d      	movs	r2, #45	; 0x2d
 8007990:	425b      	negs	r3, r3
 8007992:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007996:	486f      	ldr	r0, [pc, #444]	; (8007b54 <_printf_i+0x21c>)
 8007998:	220a      	movs	r2, #10
 800799a:	e039      	b.n	8007a10 <_printf_i+0xd8>
 800799c:	2973      	cmp	r1, #115	; 0x73
 800799e:	f000 809d 	beq.w	8007adc <_printf_i+0x1a4>
 80079a2:	d808      	bhi.n	80079b6 <_printf_i+0x7e>
 80079a4:	296f      	cmp	r1, #111	; 0x6f
 80079a6:	d020      	beq.n	80079ea <_printf_i+0xb2>
 80079a8:	2970      	cmp	r1, #112	; 0x70
 80079aa:	d1dd      	bne.n	8007968 <_printf_i+0x30>
 80079ac:	6823      	ldr	r3, [r4, #0]
 80079ae:	f043 0320 	orr.w	r3, r3, #32
 80079b2:	6023      	str	r3, [r4, #0]
 80079b4:	e003      	b.n	80079be <_printf_i+0x86>
 80079b6:	2975      	cmp	r1, #117	; 0x75
 80079b8:	d017      	beq.n	80079ea <_printf_i+0xb2>
 80079ba:	2978      	cmp	r1, #120	; 0x78
 80079bc:	d1d4      	bne.n	8007968 <_printf_i+0x30>
 80079be:	2378      	movs	r3, #120	; 0x78
 80079c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079c4:	4864      	ldr	r0, [pc, #400]	; (8007b58 <_printf_i+0x220>)
 80079c6:	e055      	b.n	8007a74 <_printf_i+0x13c>
 80079c8:	6813      	ldr	r3, [r2, #0]
 80079ca:	1d19      	adds	r1, r3, #4
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	6011      	str	r1, [r2, #0]
 80079d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079d8:	2301      	movs	r3, #1
 80079da:	e08c      	b.n	8007af6 <_printf_i+0x1be>
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	6011      	str	r1, [r2, #0]
 80079e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80079e4:	bf18      	it	ne
 80079e6:	b21b      	sxthne	r3, r3
 80079e8:	e7cf      	b.n	800798a <_printf_i+0x52>
 80079ea:	6813      	ldr	r3, [r2, #0]
 80079ec:	6825      	ldr	r5, [r4, #0]
 80079ee:	1d18      	adds	r0, r3, #4
 80079f0:	6010      	str	r0, [r2, #0]
 80079f2:	0628      	lsls	r0, r5, #24
 80079f4:	d501      	bpl.n	80079fa <_printf_i+0xc2>
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	e002      	b.n	8007a00 <_printf_i+0xc8>
 80079fa:	0668      	lsls	r0, r5, #25
 80079fc:	d5fb      	bpl.n	80079f6 <_printf_i+0xbe>
 80079fe:	881b      	ldrh	r3, [r3, #0]
 8007a00:	4854      	ldr	r0, [pc, #336]	; (8007b54 <_printf_i+0x21c>)
 8007a02:	296f      	cmp	r1, #111	; 0x6f
 8007a04:	bf14      	ite	ne
 8007a06:	220a      	movne	r2, #10
 8007a08:	2208      	moveq	r2, #8
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a10:	6865      	ldr	r5, [r4, #4]
 8007a12:	60a5      	str	r5, [r4, #8]
 8007a14:	2d00      	cmp	r5, #0
 8007a16:	f2c0 8095 	blt.w	8007b44 <_printf_i+0x20c>
 8007a1a:	6821      	ldr	r1, [r4, #0]
 8007a1c:	f021 0104 	bic.w	r1, r1, #4
 8007a20:	6021      	str	r1, [r4, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d13d      	bne.n	8007aa2 <_printf_i+0x16a>
 8007a26:	2d00      	cmp	r5, #0
 8007a28:	f040 808e 	bne.w	8007b48 <_printf_i+0x210>
 8007a2c:	4665      	mov	r5, ip
 8007a2e:	2a08      	cmp	r2, #8
 8007a30:	d10b      	bne.n	8007a4a <_printf_i+0x112>
 8007a32:	6823      	ldr	r3, [r4, #0]
 8007a34:	07db      	lsls	r3, r3, #31
 8007a36:	d508      	bpl.n	8007a4a <_printf_i+0x112>
 8007a38:	6923      	ldr	r3, [r4, #16]
 8007a3a:	6862      	ldr	r2, [r4, #4]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	bfde      	ittt	le
 8007a40:	2330      	movle	r3, #48	; 0x30
 8007a42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a4a:	ebac 0305 	sub.w	r3, ip, r5
 8007a4e:	6123      	str	r3, [r4, #16]
 8007a50:	f8cd 8000 	str.w	r8, [sp]
 8007a54:	463b      	mov	r3, r7
 8007a56:	aa03      	add	r2, sp, #12
 8007a58:	4621      	mov	r1, r4
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	f7ff fef6 	bl	800784c <_printf_common>
 8007a60:	3001      	adds	r0, #1
 8007a62:	d14d      	bne.n	8007b00 <_printf_i+0x1c8>
 8007a64:	f04f 30ff 	mov.w	r0, #4294967295
 8007a68:	b005      	add	sp, #20
 8007a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a6e:	4839      	ldr	r0, [pc, #228]	; (8007b54 <_printf_i+0x21c>)
 8007a70:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007a74:	6813      	ldr	r3, [r2, #0]
 8007a76:	6821      	ldr	r1, [r4, #0]
 8007a78:	1d1d      	adds	r5, r3, #4
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6015      	str	r5, [r2, #0]
 8007a7e:	060a      	lsls	r2, r1, #24
 8007a80:	d50b      	bpl.n	8007a9a <_printf_i+0x162>
 8007a82:	07ca      	lsls	r2, r1, #31
 8007a84:	bf44      	itt	mi
 8007a86:	f041 0120 	orrmi.w	r1, r1, #32
 8007a8a:	6021      	strmi	r1, [r4, #0]
 8007a8c:	b91b      	cbnz	r3, 8007a96 <_printf_i+0x15e>
 8007a8e:	6822      	ldr	r2, [r4, #0]
 8007a90:	f022 0220 	bic.w	r2, r2, #32
 8007a94:	6022      	str	r2, [r4, #0]
 8007a96:	2210      	movs	r2, #16
 8007a98:	e7b7      	b.n	8007a0a <_printf_i+0xd2>
 8007a9a:	064d      	lsls	r5, r1, #25
 8007a9c:	bf48      	it	mi
 8007a9e:	b29b      	uxthmi	r3, r3
 8007aa0:	e7ef      	b.n	8007a82 <_printf_i+0x14a>
 8007aa2:	4665      	mov	r5, ip
 8007aa4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007aa8:	fb02 3311 	mls	r3, r2, r1, r3
 8007aac:	5cc3      	ldrb	r3, [r0, r3]
 8007aae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	2900      	cmp	r1, #0
 8007ab6:	d1f5      	bne.n	8007aa4 <_printf_i+0x16c>
 8007ab8:	e7b9      	b.n	8007a2e <_printf_i+0xf6>
 8007aba:	6813      	ldr	r3, [r2, #0]
 8007abc:	6825      	ldr	r5, [r4, #0]
 8007abe:	6961      	ldr	r1, [r4, #20]
 8007ac0:	1d18      	adds	r0, r3, #4
 8007ac2:	6010      	str	r0, [r2, #0]
 8007ac4:	0628      	lsls	r0, r5, #24
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	d501      	bpl.n	8007ace <_printf_i+0x196>
 8007aca:	6019      	str	r1, [r3, #0]
 8007acc:	e002      	b.n	8007ad4 <_printf_i+0x19c>
 8007ace:	066a      	lsls	r2, r5, #25
 8007ad0:	d5fb      	bpl.n	8007aca <_printf_i+0x192>
 8007ad2:	8019      	strh	r1, [r3, #0]
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	6123      	str	r3, [r4, #16]
 8007ad8:	4665      	mov	r5, ip
 8007ada:	e7b9      	b.n	8007a50 <_printf_i+0x118>
 8007adc:	6813      	ldr	r3, [r2, #0]
 8007ade:	1d19      	adds	r1, r3, #4
 8007ae0:	6011      	str	r1, [r2, #0]
 8007ae2:	681d      	ldr	r5, [r3, #0]
 8007ae4:	6862      	ldr	r2, [r4, #4]
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	4628      	mov	r0, r5
 8007aea:	f7f8 fbb1 	bl	8000250 <memchr>
 8007aee:	b108      	cbz	r0, 8007af4 <_printf_i+0x1bc>
 8007af0:	1b40      	subs	r0, r0, r5
 8007af2:	6060      	str	r0, [r4, #4]
 8007af4:	6863      	ldr	r3, [r4, #4]
 8007af6:	6123      	str	r3, [r4, #16]
 8007af8:	2300      	movs	r3, #0
 8007afa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007afe:	e7a7      	b.n	8007a50 <_printf_i+0x118>
 8007b00:	6923      	ldr	r3, [r4, #16]
 8007b02:	462a      	mov	r2, r5
 8007b04:	4639      	mov	r1, r7
 8007b06:	4630      	mov	r0, r6
 8007b08:	47c0      	blx	r8
 8007b0a:	3001      	adds	r0, #1
 8007b0c:	d0aa      	beq.n	8007a64 <_printf_i+0x12c>
 8007b0e:	6823      	ldr	r3, [r4, #0]
 8007b10:	079b      	lsls	r3, r3, #30
 8007b12:	d413      	bmi.n	8007b3c <_printf_i+0x204>
 8007b14:	68e0      	ldr	r0, [r4, #12]
 8007b16:	9b03      	ldr	r3, [sp, #12]
 8007b18:	4298      	cmp	r0, r3
 8007b1a:	bfb8      	it	lt
 8007b1c:	4618      	movlt	r0, r3
 8007b1e:	e7a3      	b.n	8007a68 <_printf_i+0x130>
 8007b20:	2301      	movs	r3, #1
 8007b22:	464a      	mov	r2, r9
 8007b24:	4639      	mov	r1, r7
 8007b26:	4630      	mov	r0, r6
 8007b28:	47c0      	blx	r8
 8007b2a:	3001      	adds	r0, #1
 8007b2c:	d09a      	beq.n	8007a64 <_printf_i+0x12c>
 8007b2e:	3501      	adds	r5, #1
 8007b30:	68e3      	ldr	r3, [r4, #12]
 8007b32:	9a03      	ldr	r2, [sp, #12]
 8007b34:	1a9b      	subs	r3, r3, r2
 8007b36:	42ab      	cmp	r3, r5
 8007b38:	dcf2      	bgt.n	8007b20 <_printf_i+0x1e8>
 8007b3a:	e7eb      	b.n	8007b14 <_printf_i+0x1dc>
 8007b3c:	2500      	movs	r5, #0
 8007b3e:	f104 0919 	add.w	r9, r4, #25
 8007b42:	e7f5      	b.n	8007b30 <_printf_i+0x1f8>
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1ac      	bne.n	8007aa2 <_printf_i+0x16a>
 8007b48:	7803      	ldrb	r3, [r0, #0]
 8007b4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b52:	e76c      	b.n	8007a2e <_printf_i+0xf6>
 8007b54:	08007fb1 	.word	0x08007fb1
 8007b58:	08007fc2 	.word	0x08007fc2

08007b5c <memcpy>:
 8007b5c:	b510      	push	{r4, lr}
 8007b5e:	1e43      	subs	r3, r0, #1
 8007b60:	440a      	add	r2, r1
 8007b62:	4291      	cmp	r1, r2
 8007b64:	d100      	bne.n	8007b68 <memcpy+0xc>
 8007b66:	bd10      	pop	{r4, pc}
 8007b68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b70:	e7f7      	b.n	8007b62 <memcpy+0x6>

08007b72 <memmove>:
 8007b72:	4288      	cmp	r0, r1
 8007b74:	b510      	push	{r4, lr}
 8007b76:	eb01 0302 	add.w	r3, r1, r2
 8007b7a:	d807      	bhi.n	8007b8c <memmove+0x1a>
 8007b7c:	1e42      	subs	r2, r0, #1
 8007b7e:	4299      	cmp	r1, r3
 8007b80:	d00a      	beq.n	8007b98 <memmove+0x26>
 8007b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b86:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007b8a:	e7f8      	b.n	8007b7e <memmove+0xc>
 8007b8c:	4283      	cmp	r3, r0
 8007b8e:	d9f5      	bls.n	8007b7c <memmove+0xa>
 8007b90:	1881      	adds	r1, r0, r2
 8007b92:	1ad2      	subs	r2, r2, r3
 8007b94:	42d3      	cmn	r3, r2
 8007b96:	d100      	bne.n	8007b9a <memmove+0x28>
 8007b98:	bd10      	pop	{r4, pc}
 8007b9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b9e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007ba2:	e7f7      	b.n	8007b94 <memmove+0x22>

08007ba4 <_free_r>:
 8007ba4:	b538      	push	{r3, r4, r5, lr}
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	2900      	cmp	r1, #0
 8007baa:	d045      	beq.n	8007c38 <_free_r+0x94>
 8007bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bb0:	1f0c      	subs	r4, r1, #4
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	bfb8      	it	lt
 8007bb6:	18e4      	addlt	r4, r4, r3
 8007bb8:	f000 f8d2 	bl	8007d60 <__malloc_lock>
 8007bbc:	4a1f      	ldr	r2, [pc, #124]	; (8007c3c <_free_r+0x98>)
 8007bbe:	6813      	ldr	r3, [r2, #0]
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	b933      	cbnz	r3, 8007bd2 <_free_r+0x2e>
 8007bc4:	6063      	str	r3, [r4, #4]
 8007bc6:	6014      	str	r4, [r2, #0]
 8007bc8:	4628      	mov	r0, r5
 8007bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bce:	f000 b8c8 	b.w	8007d62 <__malloc_unlock>
 8007bd2:	42a3      	cmp	r3, r4
 8007bd4:	d90c      	bls.n	8007bf0 <_free_r+0x4c>
 8007bd6:	6821      	ldr	r1, [r4, #0]
 8007bd8:	1862      	adds	r2, r4, r1
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	bf04      	itt	eq
 8007bde:	681a      	ldreq	r2, [r3, #0]
 8007be0:	685b      	ldreq	r3, [r3, #4]
 8007be2:	6063      	str	r3, [r4, #4]
 8007be4:	bf04      	itt	eq
 8007be6:	1852      	addeq	r2, r2, r1
 8007be8:	6022      	streq	r2, [r4, #0]
 8007bea:	6004      	str	r4, [r0, #0]
 8007bec:	e7ec      	b.n	8007bc8 <_free_r+0x24>
 8007bee:	4613      	mov	r3, r2
 8007bf0:	685a      	ldr	r2, [r3, #4]
 8007bf2:	b10a      	cbz	r2, 8007bf8 <_free_r+0x54>
 8007bf4:	42a2      	cmp	r2, r4
 8007bf6:	d9fa      	bls.n	8007bee <_free_r+0x4a>
 8007bf8:	6819      	ldr	r1, [r3, #0]
 8007bfa:	1858      	adds	r0, r3, r1
 8007bfc:	42a0      	cmp	r0, r4
 8007bfe:	d10b      	bne.n	8007c18 <_free_r+0x74>
 8007c00:	6820      	ldr	r0, [r4, #0]
 8007c02:	4401      	add	r1, r0
 8007c04:	1858      	adds	r0, r3, r1
 8007c06:	4282      	cmp	r2, r0
 8007c08:	6019      	str	r1, [r3, #0]
 8007c0a:	d1dd      	bne.n	8007bc8 <_free_r+0x24>
 8007c0c:	6810      	ldr	r0, [r2, #0]
 8007c0e:	6852      	ldr	r2, [r2, #4]
 8007c10:	605a      	str	r2, [r3, #4]
 8007c12:	4401      	add	r1, r0
 8007c14:	6019      	str	r1, [r3, #0]
 8007c16:	e7d7      	b.n	8007bc8 <_free_r+0x24>
 8007c18:	d902      	bls.n	8007c20 <_free_r+0x7c>
 8007c1a:	230c      	movs	r3, #12
 8007c1c:	602b      	str	r3, [r5, #0]
 8007c1e:	e7d3      	b.n	8007bc8 <_free_r+0x24>
 8007c20:	6820      	ldr	r0, [r4, #0]
 8007c22:	1821      	adds	r1, r4, r0
 8007c24:	428a      	cmp	r2, r1
 8007c26:	bf04      	itt	eq
 8007c28:	6811      	ldreq	r1, [r2, #0]
 8007c2a:	6852      	ldreq	r2, [r2, #4]
 8007c2c:	6062      	str	r2, [r4, #4]
 8007c2e:	bf04      	itt	eq
 8007c30:	1809      	addeq	r1, r1, r0
 8007c32:	6021      	streq	r1, [r4, #0]
 8007c34:	605c      	str	r4, [r3, #4]
 8007c36:	e7c7      	b.n	8007bc8 <_free_r+0x24>
 8007c38:	bd38      	pop	{r3, r4, r5, pc}
 8007c3a:	bf00      	nop
 8007c3c:	20000094 	.word	0x20000094

08007c40 <_malloc_r>:
 8007c40:	b570      	push	{r4, r5, r6, lr}
 8007c42:	1ccd      	adds	r5, r1, #3
 8007c44:	f025 0503 	bic.w	r5, r5, #3
 8007c48:	3508      	adds	r5, #8
 8007c4a:	2d0c      	cmp	r5, #12
 8007c4c:	bf38      	it	cc
 8007c4e:	250c      	movcc	r5, #12
 8007c50:	2d00      	cmp	r5, #0
 8007c52:	4606      	mov	r6, r0
 8007c54:	db01      	blt.n	8007c5a <_malloc_r+0x1a>
 8007c56:	42a9      	cmp	r1, r5
 8007c58:	d903      	bls.n	8007c62 <_malloc_r+0x22>
 8007c5a:	230c      	movs	r3, #12
 8007c5c:	6033      	str	r3, [r6, #0]
 8007c5e:	2000      	movs	r0, #0
 8007c60:	bd70      	pop	{r4, r5, r6, pc}
 8007c62:	f000 f87d 	bl	8007d60 <__malloc_lock>
 8007c66:	4a21      	ldr	r2, [pc, #132]	; (8007cec <_malloc_r+0xac>)
 8007c68:	6814      	ldr	r4, [r2, #0]
 8007c6a:	4621      	mov	r1, r4
 8007c6c:	b991      	cbnz	r1, 8007c94 <_malloc_r+0x54>
 8007c6e:	4c20      	ldr	r4, [pc, #128]	; (8007cf0 <_malloc_r+0xb0>)
 8007c70:	6823      	ldr	r3, [r4, #0]
 8007c72:	b91b      	cbnz	r3, 8007c7c <_malloc_r+0x3c>
 8007c74:	4630      	mov	r0, r6
 8007c76:	f000 f863 	bl	8007d40 <_sbrk_r>
 8007c7a:	6020      	str	r0, [r4, #0]
 8007c7c:	4629      	mov	r1, r5
 8007c7e:	4630      	mov	r0, r6
 8007c80:	f000 f85e 	bl	8007d40 <_sbrk_r>
 8007c84:	1c43      	adds	r3, r0, #1
 8007c86:	d124      	bne.n	8007cd2 <_malloc_r+0x92>
 8007c88:	230c      	movs	r3, #12
 8007c8a:	6033      	str	r3, [r6, #0]
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f000 f868 	bl	8007d62 <__malloc_unlock>
 8007c92:	e7e4      	b.n	8007c5e <_malloc_r+0x1e>
 8007c94:	680b      	ldr	r3, [r1, #0]
 8007c96:	1b5b      	subs	r3, r3, r5
 8007c98:	d418      	bmi.n	8007ccc <_malloc_r+0x8c>
 8007c9a:	2b0b      	cmp	r3, #11
 8007c9c:	d90f      	bls.n	8007cbe <_malloc_r+0x7e>
 8007c9e:	600b      	str	r3, [r1, #0]
 8007ca0:	50cd      	str	r5, [r1, r3]
 8007ca2:	18cc      	adds	r4, r1, r3
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	f000 f85c 	bl	8007d62 <__malloc_unlock>
 8007caa:	f104 000b 	add.w	r0, r4, #11
 8007cae:	1d23      	adds	r3, r4, #4
 8007cb0:	f020 0007 	bic.w	r0, r0, #7
 8007cb4:	1ac3      	subs	r3, r0, r3
 8007cb6:	d0d3      	beq.n	8007c60 <_malloc_r+0x20>
 8007cb8:	425a      	negs	r2, r3
 8007cba:	50e2      	str	r2, [r4, r3]
 8007cbc:	e7d0      	b.n	8007c60 <_malloc_r+0x20>
 8007cbe:	428c      	cmp	r4, r1
 8007cc0:	684b      	ldr	r3, [r1, #4]
 8007cc2:	bf16      	itet	ne
 8007cc4:	6063      	strne	r3, [r4, #4]
 8007cc6:	6013      	streq	r3, [r2, #0]
 8007cc8:	460c      	movne	r4, r1
 8007cca:	e7eb      	b.n	8007ca4 <_malloc_r+0x64>
 8007ccc:	460c      	mov	r4, r1
 8007cce:	6849      	ldr	r1, [r1, #4]
 8007cd0:	e7cc      	b.n	8007c6c <_malloc_r+0x2c>
 8007cd2:	1cc4      	adds	r4, r0, #3
 8007cd4:	f024 0403 	bic.w	r4, r4, #3
 8007cd8:	42a0      	cmp	r0, r4
 8007cda:	d005      	beq.n	8007ce8 <_malloc_r+0xa8>
 8007cdc:	1a21      	subs	r1, r4, r0
 8007cde:	4630      	mov	r0, r6
 8007ce0:	f000 f82e 	bl	8007d40 <_sbrk_r>
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	d0cf      	beq.n	8007c88 <_malloc_r+0x48>
 8007ce8:	6025      	str	r5, [r4, #0]
 8007cea:	e7db      	b.n	8007ca4 <_malloc_r+0x64>
 8007cec:	20000094 	.word	0x20000094
 8007cf0:	20000098 	.word	0x20000098

08007cf4 <_realloc_r>:
 8007cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf6:	4607      	mov	r7, r0
 8007cf8:	4614      	mov	r4, r2
 8007cfa:	460e      	mov	r6, r1
 8007cfc:	b921      	cbnz	r1, 8007d08 <_realloc_r+0x14>
 8007cfe:	4611      	mov	r1, r2
 8007d00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d04:	f7ff bf9c 	b.w	8007c40 <_malloc_r>
 8007d08:	b922      	cbnz	r2, 8007d14 <_realloc_r+0x20>
 8007d0a:	f7ff ff4b 	bl	8007ba4 <_free_r>
 8007d0e:	4625      	mov	r5, r4
 8007d10:	4628      	mov	r0, r5
 8007d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d14:	f000 f826 	bl	8007d64 <_malloc_usable_size_r>
 8007d18:	42a0      	cmp	r0, r4
 8007d1a:	d20f      	bcs.n	8007d3c <_realloc_r+0x48>
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	4638      	mov	r0, r7
 8007d20:	f7ff ff8e 	bl	8007c40 <_malloc_r>
 8007d24:	4605      	mov	r5, r0
 8007d26:	2800      	cmp	r0, #0
 8007d28:	d0f2      	beq.n	8007d10 <_realloc_r+0x1c>
 8007d2a:	4631      	mov	r1, r6
 8007d2c:	4622      	mov	r2, r4
 8007d2e:	f7ff ff15 	bl	8007b5c <memcpy>
 8007d32:	4631      	mov	r1, r6
 8007d34:	4638      	mov	r0, r7
 8007d36:	f7ff ff35 	bl	8007ba4 <_free_r>
 8007d3a:	e7e9      	b.n	8007d10 <_realloc_r+0x1c>
 8007d3c:	4635      	mov	r5, r6
 8007d3e:	e7e7      	b.n	8007d10 <_realloc_r+0x1c>

08007d40 <_sbrk_r>:
 8007d40:	b538      	push	{r3, r4, r5, lr}
 8007d42:	4c06      	ldr	r4, [pc, #24]	; (8007d5c <_sbrk_r+0x1c>)
 8007d44:	2300      	movs	r3, #0
 8007d46:	4605      	mov	r5, r0
 8007d48:	4608      	mov	r0, r1
 8007d4a:	6023      	str	r3, [r4, #0]
 8007d4c:	f7fa f9b2 	bl	80020b4 <_sbrk>
 8007d50:	1c43      	adds	r3, r0, #1
 8007d52:	d102      	bne.n	8007d5a <_sbrk_r+0x1a>
 8007d54:	6823      	ldr	r3, [r4, #0]
 8007d56:	b103      	cbz	r3, 8007d5a <_sbrk_r+0x1a>
 8007d58:	602b      	str	r3, [r5, #0]
 8007d5a:	bd38      	pop	{r3, r4, r5, pc}
 8007d5c:	20000438 	.word	0x20000438

08007d60 <__malloc_lock>:
 8007d60:	4770      	bx	lr

08007d62 <__malloc_unlock>:
 8007d62:	4770      	bx	lr

08007d64 <_malloc_usable_size_r>:
 8007d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d68:	1f18      	subs	r0, r3, #4
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	bfbc      	itt	lt
 8007d6e:	580b      	ldrlt	r3, [r1, r0]
 8007d70:	18c0      	addlt	r0, r0, r3
 8007d72:	4770      	bx	lr

08007d74 <_init>:
 8007d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d76:	bf00      	nop
 8007d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d7a:	bc08      	pop	{r3}
 8007d7c:	469e      	mov	lr, r3
 8007d7e:	4770      	bx	lr

08007d80 <_fini>:
 8007d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d82:	bf00      	nop
 8007d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d86:	bc08      	pop	{r3}
 8007d88:	469e      	mov	lr, r3
 8007d8a:	4770      	bx	lr
