
CubeRev21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d80  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08007f80  08007f80  00017f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081c8  080081c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080081c8  080081c8  000181c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081d0  080081d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081d0  080081d0  000181d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081d4  080081d4  000181d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080081d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  20000070  08008248  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08008248  00020440  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa94  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027b9  00000000  00000000  0002fb32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c58  00000000  00000000  000322f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af0  00000000  00000000  00032f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e911  00000000  00000000  00033a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dd98  00000000  00000000  00062349  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00113176  00000000  00000000  000700e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00183257  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032f8  00000000  00000000  001832d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08007f68 	.word	0x08007f68

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08007f68 	.word	0x08007f68

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <MemoryTest>:
/**
 * @brief: tests the memory
 * TEST: Write to memory, wait, read form memory.
 * @return 0: Passed.
 */
uint32_t MemoryTest(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08e      	sub	sp, #56	; 0x38
 80005f4:	af00      	add	r7, sp, #0
	SPI_Values DUT0;
 	DUT0.CS_Pin = FL2_CS1_Pin;
 80005f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
	DUT0.CS_Port = FL2_CS1_GPIO_Port;
 80005fc:	4b25      	ldr	r3, [pc, #148]	; (8000694 <MemoryTest+0xa4>)
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
	DUT0.spihandle = &hspi2;
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <MemoryTest+0xa8>)
 8000602:	62bb      	str	r3, [r7, #40]	; 0x28
	//
	SPI_Values DUT1;
	DUT1.CS_Pin = FL2_CS2_Pin;
 8000604:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000608:	843b      	strh	r3, [r7, #32]
	DUT1.CS_Port = FL2_CS2_GPIO_Port;
 800060a:	4b22      	ldr	r3, [pc, #136]	; (8000694 <MemoryTest+0xa4>)
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
	DUT1.spihandle = &hspi2;
 800060e:	4b22      	ldr	r3, [pc, #136]	; (8000698 <MemoryTest+0xa8>)
 8000610:	61fb      	str	r3, [r7, #28]
	//
	SPI_Values DUT2;
	DUT2.CS_Pin = FL1_CS1_Pin;
 8000612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000616:	82bb      	strh	r3, [r7, #20]
	DUT2.CS_Port = FL1_CS1_GPIO_Port;
 8000618:	4b20      	ldr	r3, [pc, #128]	; (800069c <MemoryTest+0xac>)
 800061a:	61bb      	str	r3, [r7, #24]
	DUT2.spihandle = &hspi6;
 800061c:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <MemoryTest+0xb0>)
 800061e:	613b      	str	r3, [r7, #16]
	//
	SPI_Values DUT3;
	DUT1.CS_Pin = FL1_CS2_Pin;
 8000620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000624:	843b      	strh	r3, [r7, #32]
	DUT1.CS_Port = FL1_CS2_GPIO_Port;
 8000626:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <MemoryTest+0xb4>)
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
	DUT1.spihandle = &hspi6;
 800062a:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <MemoryTest+0xb0>)
 800062c:	61fb      	str	r3, [r7, #28]

 	uint32_t result = 1;
 800062e:	2301      	movs	r3, #1
 8000630:	637b      	str	r3, [r7, #52]	; 0x34
	result &= MemoryTestDUT(DUT0);
 8000632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000636:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800063a:	f000 f835 	bl	80006a8 <MemoryTestDUT>
 800063e:	4602      	mov	r2, r0
 8000640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000642:	4013      	ands	r3, r2
 8000644:	637b      	str	r3, [r7, #52]	; 0x34
	result &= MemoryTestDUT(DUT1);
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800064e:	f000 f82b 	bl	80006a8 <MemoryTestDUT>
 8000652:	4602      	mov	r2, r0
 8000654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000656:	4013      	ands	r3, r2
 8000658:	637b      	str	r3, [r7, #52]	; 0x34
	result &= MemoryTestDUT(DUT2);
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000662:	f000 f821 	bl	80006a8 <MemoryTestDUT>
 8000666:	4602      	mov	r2, r0
 8000668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800066a:	4013      	ands	r3, r2
 800066c:	637b      	str	r3, [r7, #52]	; 0x34
	result &= MemoryTestDUT(DUT3);
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000674:	f000 f818 	bl	80006a8 <MemoryTestDUT>
 8000678:	4602      	mov	r2, r0
 800067a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800067c:	4013      	ands	r3, r2
 800067e:	637b      	str	r3, [r7, #52]	; 0x34
	return !result; //to create the 0 if the test passed!
 8000680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000682:	2b00      	cmp	r3, #0
 8000684:	bf0c      	ite	eq
 8000686:	2301      	moveq	r3, #1
 8000688:	2300      	movne	r3, #0
 800068a:	b2db      	uxtb	r3, r3

}
 800068c:	4618      	mov	r0, r3
 800068e:	3738      	adds	r7, #56	; 0x38
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40020c00 	.word	0x40020c00
 8000698:	200000c4 	.word	0x200000c4
 800069c:	40020400 	.word	0x40020400
 80006a0:	2000018c 	.word	0x2000018c
 80006a4:	40021c00 	.word	0x40021c00

080006a8 <MemoryTestDUT>:

/**
 * @retun: 1: passed
 */
uint32_t MemoryTestDUT(SPI_Values dut) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 80006ae:	af02      	add	r7, sp, #8
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t writeBuffer[256] = { 0 };
 80006b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80006ba:	4618      	mov	r0, r3
 80006bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006c0:	461a      	mov	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f007 f842 	bl	800774c <memset>
	uint8_t readBuffer[256] = { 0 };
 80006c8:	f107 0318 	add.w	r3, r7, #24
 80006cc:	4618      	mov	r0, r3
 80006ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d2:	461a      	mov	r2, r3
 80006d4:	2100      	movs	r1, #0
 80006d6:	f007 f839 	bl	800774c <memset>
	volatile uint8_t SR1;
	uint32_t adresse = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

	//Testdaten initialisieren
	for (int i = 0; i < 256; i++) {
 80006e0:	2300      	movs	r3, #0
 80006e2:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80006e6:	e00e      	b.n	8000706 <MemoryTestDUT+0x5e>
		writeBuffer[i] = i;
 80006e8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80006ec:	b2d9      	uxtb	r1, r3
 80006ee:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80006f2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80006f6:	4413      	add	r3, r2
 80006f8:	460a      	mov	r2, r1
 80006fa:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 256; i++) {
 80006fc:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000700:	3301      	adds	r3, #1
 8000702:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8000706:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800070a:	2bff      	cmp	r3, #255	; 0xff
 800070c:	ddec      	ble.n	80006e8 <MemoryTestDUT+0x40>
	}
	//CHIP löschen
	chipErase(dut);
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000714:	f000 fa08 	bl	8000b28 <chipErase>
	//evtl Zusätzliche Schleife für die verschiedenen Chips und CS pins
	for (int i = 0; i < PAGE_COUNT; i++) {
 8000718:	2300      	movs	r3, #0
 800071a:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800071e:	e049      	b.n	80007b4 <MemoryTestDUT+0x10c>
		adresse = i * 0x1000;
 8000720:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000724:	031b      	lsls	r3, r3, #12
 8000726:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		//Daten für eine Page schicken
		writePage(writeBuffer, adresse, dut);
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8000730:	689a      	ldr	r2, [r3, #8]
 8000732:	9200      	str	r2, [sp, #0]
 8000734:	cb0c      	ldmia	r3, {r2, r3}
 8000736:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 800073a:	f000 f91d 	bl	8000978 <writePage>
		//Warten bis fertig geschrieben wurde
		writeReady(dut);
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000744:	f000 fa0f 	bl	8000b66 <writeReady>
		//Selbe page auslesen
		readPage(readBuffer, adresse, dut);
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	f107 0018 	add.w	r0, r7, #24
 800074e:	689a      	ldr	r2, [r3, #8]
 8000750:	9200      	str	r2, [sp, #0]
 8000752:	cb0c      	ldmia	r3, {r2, r3}
 8000754:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8000758:	f000 f980 	bl	8000a5c <readPage>
		//Inhalt vergleichen
		for (int y = 0; y < 256; y++) {
 800075c:	2300      	movs	r3, #0
 800075e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000762:	e01e      	b.n	80007a2 <MemoryTestDUT+0xfa>
			//Wenn inhalt nicht gleich
			if (writeBuffer[y] != readBuffer[y]) {
 8000764:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000768:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800076c:	4413      	add	r3, r2
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	f107 0118 	add.w	r1, r7, #24
 8000774:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000778:	440b      	add	r3, r1
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	429a      	cmp	r2, r3
 800077e:	d00b      	beq.n	8000798 <MemoryTestDUT+0xf0>
				 SR1 = readStatus(dut);
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000786:	f000 f8ad 	bl	80008e4 <readStatus>
 800078a:	4603      	mov	r3, r0
 800078c:	461a      	mov	r2, r3
 800078e:	f107 0317 	add.w	r3, r7, #23
 8000792:	701a      	strb	r2, [r3, #0]
				return 0;
 8000794:	2300      	movs	r3, #0
 8000796:	e013      	b.n	80007c0 <MemoryTestDUT+0x118>
		for (int y = 0; y < 256; y++) {
 8000798:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800079c:	3301      	adds	r3, #1
 800079e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80007a2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80007a6:	2bff      	cmp	r3, #255	; 0xff
 80007a8:	dddc      	ble.n	8000764 <MemoryTestDUT+0xbc>
	for (int i = 0; i < PAGE_COUNT; i++) {
 80007aa:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80007ae:	3301      	adds	r3, #1
 80007b0:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 80007b4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80007b8:	4a04      	ldr	r2, [pc, #16]	; (80007cc <MemoryTestDUT+0x124>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	ddb0      	ble.n	8000720 <MemoryTestDUT+0x78>
			}
		}
	}
	return 1;
 80007be:	2301      	movs	r3, #1
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	f507 770a 	add.w	r7, r7, #552	; 0x228
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	0001e847 	.word	0x0001e847

080007d0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <MX_CRC_Init+0x3c>)
 80007d6:	4a0e      	ldr	r2, [pc, #56]	; (8000810 <MX_CRC_Init+0x40>)
 80007d8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_CRC_Init+0x3c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_CRC_Init+0x3c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_CRC_Init+0x3c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <MX_CRC_Init+0x3c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_CRC_Init+0x3c>)
 80007f4:	2203      	movs	r2, #3
 80007f6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_CRC_Init+0x3c>)
 80007fa:	f002 f917 	bl	8002a2c <HAL_CRC_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000804:	f001 fa04 	bl	8001c10 <Error_Handler>
  }

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	2000009c 	.word	0x2000009c
 8000810:	40023000 	.word	0x40023000

08000814 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a0a      	ldr	r2, [pc, #40]	; (800084c <HAL_CRC_MspInit+0x38>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d10b      	bne.n	800083e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <HAL_CRC_MspInit+0x3c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a09      	ldr	r2, [pc, #36]	; (8000850 <HAL_CRC_MspInit+0x3c>)
 800082c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b07      	ldr	r3, [pc, #28]	; (8000850 <HAL_CRC_MspInit+0x3c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800083e:	bf00      	nop
 8000840:	3714      	adds	r7, #20
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40023000 	.word	0x40023000
 8000850:	40023800 	.word	0x40023800

08000854 <InitMemory>:

/**
 * Sets the pin to the right state
 * @returns 0: ok
 */
int32_t InitMemory(void) {
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FL1_HLD_GPIO_Port, FL1_HLD_Pin, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800085e:	481f      	ldr	r0, [pc, #124]	; (80008dc <InitMemory+0x88>)
 8000860:	f002 fe04 	bl	800346c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL2_HLD_GPIO_Port, FL2_HLD_Pin, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	f44f 7100 	mov.w	r1, #512	; 0x200
 800086a:	481d      	ldr	r0, [pc, #116]	; (80008e0 <InitMemory+0x8c>)
 800086c:	f002 fdfe 	bl	800346c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL1_WP_GPIO_Port, FL1_WP_Pin, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000876:	4819      	ldr	r0, [pc, #100]	; (80008dc <InitMemory+0x88>)
 8000878:	f002 fdf8 	bl	800346c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL2_WP_GPIO_Port, FL2_WP_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000882:	4817      	ldr	r0, [pc, #92]	; (80008e0 <InitMemory+0x8c>)
 8000884:	f002 fdf2 	bl	800346c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL1_RES_GPIO_Port, FL1_RES_Pin, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800088e:	4813      	ldr	r0, [pc, #76]	; (80008dc <InitMemory+0x88>)
 8000890:	f002 fdec 	bl	800346c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL2_RES_GPIO_Port, FL2_RES_Pin, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800089a:	4811      	ldr	r0, [pc, #68]	; (80008e0 <InitMemory+0x8c>)
 800089c:	f002 fde6 	bl	800346c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL1_RES_GPIO_Port, FL1_RES_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008a6:	480d      	ldr	r0, [pc, #52]	; (80008dc <InitMemory+0x88>)
 80008a8:	f002 fde0 	bl	800346c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL2_RES_GPIO_Port, FL2_RES_Pin, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b2:	480b      	ldr	r0, [pc, #44]	; (80008e0 <InitMemory+0x8c>)
 80008b4:	f002 fdda 	bl	800346c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80008b8:	2001      	movs	r0, #1
 80008ba:	f001 ff55 	bl	8002768 <HAL_Delay>
	HAL_GPIO_WritePin(FL1_RES_GPIO_Port, FL1_RES_Pin, GPIO_PIN_SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <InitMemory+0x88>)
 80008c6:	f002 fdd1 	bl	800346c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL2_RES_GPIO_Port, FL2_RES_Pin, GPIO_PIN_SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d0:	4803      	ldr	r0, [pc, #12]	; (80008e0 <InitMemory+0x8c>)
 80008d2:	f002 fdcb 	bl	800346c <HAL_GPIO_WritePin>

}
 80008d6:	bf00      	nop
 80008d8:	4618      	mov	r0, r3
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40021c00 	.word	0x40021c00
 80008e0:	40020c00 	.word	0x40020c00

080008e4 <readStatus>:
 * Function Read Status
 * reads the status byte from the memory unit
 * @param: SPI_val
 * @return 8 bit status register
 */
uint8_t readStatus(SPI_Values SPI_val) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t data;
	uint8_t command = c_READSTATUSREG1;
 80008f0:	2305      	movs	r3, #5
 80008f2:	75bb      	strb	r3, [r7, #22]
	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	8939      	ldrh	r1, [r7, #8]
 80008f8:	2200      	movs	r2, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f002 fdb6 	bl	800346c <HAL_GPIO_WritePin>
	//send command
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f107 0116 	add.w	r1, r7, #22
 8000906:	230a      	movs	r3, #10
 8000908:	2201      	movs	r2, #1
 800090a:	f004 fe83 	bl	8005614 <HAL_SPI_Transmit>
	//read data from status register
	HAL_SPI_Receive(SPI_val.spihandle, &data, 1, 10);
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f107 0117 	add.w	r1, r7, #23
 8000914:	230a      	movs	r3, #10
 8000916:	2201      	movs	r2, #1
 8000918:	f004 fff2 	bl	8005900 <HAL_SPI_Receive>
	//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	8939      	ldrh	r1, [r7, #8]
 8000920:	2201      	movs	r2, #1
 8000922:	4618      	mov	r0, r3
 8000924:	f002 fda2 	bl	800346c <HAL_GPIO_WritePin>
	return data;
 8000928:	7dfb      	ldrb	r3, [r7, #23]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <writeByte>:
 *  @brief Writes one byte so SPI
 *  @param uint8_t data: the one byte
 *  @param SPI_Val: the specifier of the SPI
 *  @return 0: Ok.
 */
int writeByte(uint8_t data, SPI_Values SPI_val) {
 8000932:	b590      	push	{r4, r7, lr}
 8000934:	b087      	sub	sp, #28
 8000936:	af00      	add	r7, sp, #0
 8000938:	4604      	mov	r4, r0
 800093a:	4638      	mov	r0, r7
 800093c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000940:	4623      	mov	r3, r4
 8000942:	73fb      	strb	r3, [r7, #15]
	uint8_t command = data;
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	75fb      	strb	r3, [r7, #23]
	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	88b9      	ldrh	r1, [r7, #4]
 800094c:	2200      	movs	r2, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f002 fd8c 	bl	800346c <HAL_GPIO_WritePin>
	//Ausgabe lesen
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 8000954:	6838      	ldr	r0, [r7, #0]
 8000956:	f107 0117 	add.w	r1, r7, #23
 800095a:	230a      	movs	r3, #10
 800095c:	2201      	movs	r2, #1
 800095e:	f004 fe59 	bl	8005614 <HAL_SPI_Transmit>
	//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	88b9      	ldrh	r1, [r7, #4]
 8000966:	2201      	movs	r2, #1
 8000968:	4618      	mov	r0, r3
 800096a:	f002 fd7f 	bl	800346c <HAL_GPIO_WritePin>
	return 0;
 800096e:	2300      	movs	r3, #0
}
 8000970:	4618      	mov	r0, r3
 8000972:	371c      	adds	r7, #28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd90      	pop	{r4, r7, pc}

08000978 <writePage>:
 * @param uint8_t * data: Pointer to the data field
 * @param uint32_t address: the address on the memory chip
 * @param SPI_Values SPI_val
 * @return 0: ok
 */
int writePage(uint8_t *data, uint32_t address, SPI_Values SPI_val) {
 8000978:	b082      	sub	sp, #8
 800097a:	b580      	push	{r7, lr}
 800097c:	b084      	sub	sp, #16
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
 8000982:	6039      	str	r1, [r7, #0]
 8000984:	f107 0118 	add.w	r1, r7, #24
 8000988:	e881 000c 	stmia.w	r1, {r2, r3}

	uint8_t command = c_WRITEPAGE;
 800098c:	2312      	movs	r3, #18
 800098e:	72fb      	strb	r3, [r7, #11]
	uint8_t tmp_add;

//Write enable
	writeByte(c_WREN, SPI_val);
 8000990:	f107 0318 	add.w	r3, r7, #24
 8000994:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000996:	2006      	movs	r0, #6
 8000998:	f7ff ffcb 	bl	8000932 <writeByte>

	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 800099c:	6a3b      	ldr	r3, [r7, #32]
 800099e:	8bb9      	ldrh	r1, [r7, #28]
 80009a0:	2200      	movs	r2, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f002 fd62 	bl	800346c <HAL_GPIO_WritePin>

	//commando schicken
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 80009a8:	69b8      	ldr	r0, [r7, #24]
 80009aa:	f107 010b 	add.w	r1, r7, #11
 80009ae:	230a      	movs	r3, #10
 80009b0:	2201      	movs	r2, #1
 80009b2:	f004 fe2f 	bl	8005614 <HAL_SPI_Transmit>
	HAL_Delay(10);
 80009b6:	200a      	movs	r0, #10
 80009b8:	f001 fed6 	bl	8002768 <HAL_Delay>
	//Addressse schicken MSB to LSB
//	HAL_SPI_Transmit(SPI_val.spihandle, (uint8_t*) (&address), 4, 40);

	tmp_add = (uint8_t) ((address >> 24) & 0x000000FF);
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	0e1b      	lsrs	r3, r3, #24
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 80009c4:	69b8      	ldr	r0, [r7, #24]
 80009c6:	f107 010a 	add.w	r1, r7, #10
 80009ca:	230a      	movs	r3, #10
 80009cc:	2201      	movs	r2, #1
 80009ce:	f004 fe21 	bl	8005614 <HAL_SPI_Transmit>
	tmp_add = (uint8_t) ((address >> 16) & 0x000000FF);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	0c1b      	lsrs	r3, r3, #16
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 80009da:	69b8      	ldr	r0, [r7, #24]
 80009dc:	f107 010a 	add.w	r1, r7, #10
 80009e0:	230a      	movs	r3, #10
 80009e2:	2201      	movs	r2, #1
 80009e4:	f004 fe16 	bl	8005614 <HAL_SPI_Transmit>
	tmp_add = (uint8_t) ((address >> 8) & 0x000000FF);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	0a1b      	lsrs	r3, r3, #8
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 80009f0:	69b8      	ldr	r0, [r7, #24]
 80009f2:	f107 010a 	add.w	r1, r7, #10
 80009f6:	230a      	movs	r3, #10
 80009f8:	2201      	movs	r2, #1
 80009fa:	f004 fe0b 	bl	8005614 <HAL_SPI_Transmit>
	tmp_add = (uint8_t) (address & 0x000000FF);
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000a04:	69b8      	ldr	r0, [r7, #24]
 8000a06:	f107 010a 	add.w	r1, r7, #10
 8000a0a:	230a      	movs	r3, #10
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f004 fe01 	bl	8005614 <HAL_SPI_Transmit>

	//Daten schicken
//	HAL_SPI_Transmit(SPI_val.spihandle, data, 256, HAL_MAX_DELAY);
	for (int i = 0; i < 256; i++) {
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	e00a      	b.n	8000a2e <writePage+0xb6>
		HAL_SPI_Transmit(SPI_val.spihandle, &data[i], 1, 10);
 8000a18:	69b8      	ldr	r0, [r7, #24]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	18d1      	adds	r1, r2, r3
 8000a20:	230a      	movs	r3, #10
 8000a22:	2201      	movs	r2, #1
 8000a24:	f004 fdf6 	bl	8005614 <HAL_SPI_Transmit>
	for (int i = 0; i < 256; i++) {
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	2bff      	cmp	r3, #255	; 0xff
 8000a32:	ddf1      	ble.n	8000a18 <writePage+0xa0>
	}

	//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 8000a34:	6a3b      	ldr	r3, [r7, #32]
 8000a36:	8bb9      	ldrh	r1, [r7, #28]
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 fd16 	bl	800346c <HAL_GPIO_WritePin>

	//Write disable
	writeByte(c_WRDI, SPI_val);
 8000a40:	f107 0318 	add.w	r3, r7, #24
 8000a44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a46:	2004      	movs	r0, #4
 8000a48:	f7ff ff73 	bl	8000932 <writeByte>
	return 0;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a58:	b002      	add	sp, #8
 8000a5a:	4770      	bx	lr

08000a5c <readPage>:
 * @param uint8_t  * data: Pointer to the data array
 * @param uint32_t address: Address of the momory unit to be read
 * @param SPI_Values SPI_val: the corresponding SPI values
 * @return 0: ok
 */
int readPage(uint8_t *data, uint32_t address, SPI_Values SPI_val) {
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b084      	sub	sp, #16
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	6039      	str	r1, [r7, #0]
 8000a68:	f107 0118 	add.w	r1, r7, #24
 8000a6c:	e881 000c 	stmia.w	r1, {r2, r3}

	uint8_t command = c_READ;
 8000a70:	2313      	movs	r3, #19
 8000a72:	72fb      	strb	r3, [r7, #11]

	//CS1 low
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_RESET);
 8000a74:	6a3b      	ldr	r3, [r7, #32]
 8000a76:	8bb9      	ldrh	r1, [r7, #28]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 fcf6 	bl	800346c <HAL_GPIO_WritePin>

	//commando schicken
//	writeByte(c_READ, SPI_val);
	HAL_SPI_Transmit(SPI_val.spihandle, &command, 1, 10);
 8000a80:	69b8      	ldr	r0, [r7, #24]
 8000a82:	f107 010b 	add.w	r1, r7, #11
 8000a86:	230a      	movs	r3, #10
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f004 fdc3 	bl	8005614 <HAL_SPI_Transmit>

//4 Byte Addressse schicken MSB to LSB
//	HAL_SPI_Transmit(SPI_val.spihandle, (uint8_t*) (&address), 4, 40);
	tmp_add = (uint8_t) ((address >> 24) & 0x000000FF);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	0e1b      	lsrs	r3, r3, #24
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <readPage+0xc8>)
 8000a96:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000a98:	69b8      	ldr	r0, [r7, #24]
 8000a9a:	230a      	movs	r3, #10
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4921      	ldr	r1, [pc, #132]	; (8000b24 <readPage+0xc8>)
 8000aa0:	f004 fdb8 	bl	8005614 <HAL_SPI_Transmit>
	tmp_add = (uint8_t) ((address >> 16) & 0x000000FF);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	0c1b      	lsrs	r3, r3, #16
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <readPage+0xc8>)
 8000aac:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000aae:	69b8      	ldr	r0, [r7, #24]
 8000ab0:	230a      	movs	r3, #10
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	491b      	ldr	r1, [pc, #108]	; (8000b24 <readPage+0xc8>)
 8000ab6:	f004 fdad 	bl	8005614 <HAL_SPI_Transmit>
	tmp_add = (uint8_t) ((address >> 8) & 0x000000FF);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	0a1b      	lsrs	r3, r3, #8
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <readPage+0xc8>)
 8000ac2:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000ac4:	69b8      	ldr	r0, [r7, #24]
 8000ac6:	230a      	movs	r3, #10
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4916      	ldr	r1, [pc, #88]	; (8000b24 <readPage+0xc8>)
 8000acc:	f004 fda2 	bl	8005614 <HAL_SPI_Transmit>
	tmp_add = (uint8_t) (address & 0x000000FF);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <readPage+0xc8>)
 8000ad6:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_val.spihandle, &tmp_add, 1, 10);
 8000ad8:	69b8      	ldr	r0, [r7, #24]
 8000ada:	230a      	movs	r3, #10
 8000adc:	2201      	movs	r2, #1
 8000ade:	4911      	ldr	r1, [pc, #68]	; (8000b24 <readPage+0xc8>)
 8000ae0:	f004 fd98 	bl	8005614 <HAL_SPI_Transmit>

//Daten lesen
//	HAL_SPI_Receive(SPI_val.spihandle, data, 256, 2560);
	for (int i = 0; i < 256; i++) {
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	e00a      	b.n	8000b00 <readPage+0xa4>
		HAL_SPI_Receive(SPI_val.spihandle, &data[i], 1, 10);
 8000aea:	69b8      	ldr	r0, [r7, #24]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	18d1      	adds	r1, r2, r3
 8000af2:	230a      	movs	r3, #10
 8000af4:	2201      	movs	r2, #1
 8000af6:	f004 ff03 	bl	8005900 <HAL_SPI_Receive>
	for (int i = 0; i < 256; i++) {
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	3301      	adds	r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2bff      	cmp	r3, #255	; 0xff
 8000b04:	ddf1      	ble.n	8000aea <readPage+0x8e>
	}

//CS1 high
	HAL_GPIO_WritePin(SPI_val.CS_Port, SPI_val.CS_Pin, GPIO_PIN_SET);
 8000b06:	6a3b      	ldr	r3, [r7, #32]
 8000b08:	8bb9      	ldrh	r1, [r7, #28]
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f002 fcad 	bl	800346c <HAL_GPIO_WritePin>

	return 0;
 8000b12:	2300      	movs	r3, #0
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b1e:	b002      	add	sp, #8
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	200000c0 	.word	0x200000c0

08000b28 <chipErase>:
/**
 * Function Chip Erase
 * Erases the whole chip
 * @param SPI_Values SPI_val: the corresponding memory ic
 */
int chipErase(SPI_Values SPI_val) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Write enable
	writeByte(c_WREN, SPI_val);
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b38:	2006      	movs	r0, #6
 8000b3a:	f7ff fefa 	bl	8000932 <writeByte>
	//erase chip
	writeByte(c_CE, SPI_val);
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b42:	20c7      	movs	r0, #199	; 0xc7
 8000b44:	f7ff fef5 	bl	8000932 <writeByte>
	//Write Disable
	writeByte(c_WRDI, SPI_val);
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b4c:	2004      	movs	r0, #4
 8000b4e:	f7ff fef0 	bl	8000932 <writeByte>
	//warte bis Schreiben beendet ist
	writeReady(SPI_val);
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b58:	f000 f805 	bl	8000b66 <writeReady>

	return 0;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <writeReady>:

/**
 * Waits for the bit WIP (Write in Progress) bit to toggle
 * Reads SR1 register from memory
 */
void writeReady(SPI_Values SPI_val) {
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint32_t status = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
	uint8_t SR1 = 0xF;
 8000b76:	230f      	movs	r3, #15
 8000b78:	74fb      	strb	r3, [r7, #19]
	while (status == 0) {
 8000b7a:	e00d      	b.n	8000b98 <writeReady+0x32>
		SR1 = readStatus(SPI_val);
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b82:	f7ff feaf 	bl	80008e4 <readStatus>
 8000b86:	4603      	mov	r3, r0
 8000b88:	74fb      	strb	r3, [r7, #19]
		if ((SR1 & 0x1) == 0)
 8000b8a:	7cfb      	ldrb	r3, [r7, #19]
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d101      	bne.n	8000b98 <writeReady+0x32>
			status = 1;
 8000b94:	2301      	movs	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
	while (status == 0) {
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d0ee      	beq.n	8000b7c <writeReady+0x16>
	}
}
 8000b9e:	bf00      	nop
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b090      	sub	sp, #64	; 0x40
 8000bac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bbe:	4bb2      	ldr	r3, [pc, #712]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4ab1      	ldr	r2, [pc, #708]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000bc4:	f043 0310 	orr.w	r3, r3, #16
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4baf      	ldr	r3, [pc, #700]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0310 	and.w	r3, r3, #16
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000bd6:	4bac      	ldr	r3, [pc, #688]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4aab      	ldr	r2, [pc, #684]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4ba9      	ldr	r3, [pc, #676]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
 8000bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	4ba6      	ldr	r3, [pc, #664]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4aa5      	ldr	r2, [pc, #660]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4ba3      	ldr	r3, [pc, #652]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	623b      	str	r3, [r7, #32]
 8000c04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c06:	4ba0      	ldr	r3, [pc, #640]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a9f      	ldr	r2, [pc, #636]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c0c:	f043 0320 	orr.w	r3, r3, #32
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b9d      	ldr	r3, [pc, #628]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0320 	and.w	r3, r3, #32
 8000c1a:	61fb      	str	r3, [r7, #28]
 8000c1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1e:	4b9a      	ldr	r3, [pc, #616]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a99      	ldr	r2, [pc, #612]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b97      	ldr	r3, [pc, #604]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c32:	61bb      	str	r3, [r7, #24]
 8000c34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b94      	ldr	r3, [pc, #592]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a93      	ldr	r2, [pc, #588]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b91      	ldr	r3, [pc, #580]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	4b8e      	ldr	r3, [pc, #568]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a8d      	ldr	r2, [pc, #564]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b8b      	ldr	r3, [pc, #556]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c66:	4b88      	ldr	r3, [pc, #544]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a87      	ldr	r2, [pc, #540]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b85      	ldr	r3, [pc, #532]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c7e:	4b82      	ldr	r3, [pc, #520]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a81      	ldr	r2, [pc, #516]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b7f      	ldr	r3, [pc, #508]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c96:	4b7c      	ldr	r3, [pc, #496]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a7b      	ldr	r2, [pc, #492]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c9c:	f043 0308 	orr.w	r3, r3, #8
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b79      	ldr	r3, [pc, #484]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0308 	and.w	r3, r3, #8
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000cae:	4b76      	ldr	r3, [pc, #472]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a75      	ldr	r2, [pc, #468]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000cb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b73      	ldr	r3, [pc, #460]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED_4_Pin|LWL_OUT_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f244 0108 	movw	r1, #16392	; 0x4008
 8000ccc:	486f      	ldr	r0, [pc, #444]	; (8000e8c <MX_GPIO_Init+0x2e4>)
 8000cce:	f002 fbcd 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_3_Pin|LED_2_Pin|LED_1_Pin|SD_CS_Pin
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f24e 4138 	movw	r1, #58424	; 0xe438
 8000cd8:	486d      	ldr	r0, [pc, #436]	; (8000e90 <MX_GPIO_Init+0x2e8>)
 8000cda:	f002 fbc7 	bl	800346c <HAL_GPIO_WritePin>
                          |nCS_DMS1_Pin|nCS_DMS2_Pin|nCS_DMS3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, nCS_DMS4_Pin|nCS_DMS5_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2103      	movs	r1, #3
 8000ce2:	486c      	ldr	r0, [pc, #432]	; (8000e94 <MX_GPIO_Init+0x2ec>)
 8000ce4:	f002 fbc2 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCS_DMS6_GPIO_Port, nCS_DMS6_Pin, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2180      	movs	r1, #128	; 0x80
 8000cec:	486a      	ldr	r0, [pc, #424]	; (8000e98 <MX_GPIO_Init+0x2f0>)
 8000cee:	f002 fbbd 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, FL1_HLD_Pin|FL1_WP_Pin|FL1_RES_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8000cf8:	4868      	ldr	r0, [pc, #416]	; (8000e9c <MX_GPIO_Init+0x2f4>)
 8000cfa:	f002 fbb7 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL1_CS2_GPIO_Port, FL1_CS2_Pin, GPIO_PIN_SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d04:	4865      	ldr	r0, [pc, #404]	; (8000e9c <MX_GPIO_Init+0x2f4>)
 8000d06:	f002 fbb1 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL1_CS1_GPIO_Port, FL1_CS1_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d10:	4863      	ldr	r0, [pc, #396]	; (8000ea0 <MX_GPIO_Init+0x2f8>)
 8000d12:	f002 fbab 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, nCS_PT3_Pin|FL2_HLD_Pin|FL2_RES_Pin|FL2_WP_Pin
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 4167 	mov.w	r1, #59136	; 0xe700
 8000d1c:	4861      	ldr	r0, [pc, #388]	; (8000ea4 <MX_GPIO_Init+0x2fc>)
 8000d1e:	f002 fba5 	bl	800346c <HAL_GPIO_WritePin>
                          |nCS_PT2_Pin|nCS_PT1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FL2_CS2_Pin|FL2_CS1_Pin, GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000d28:	485e      	ldr	r0, [pc, #376]	; (8000ea4 <MX_GPIO_Init+0x2fc>)
 8000d2a:	f002 fb9f 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
 8000d2e:	f64f 7318 	movw	r3, #65304	; 0xff18
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d34:	2303      	movs	r3, #3
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d40:	4619      	mov	r1, r3
 8000d42:	4855      	ldr	r0, [pc, #340]	; (8000e98 <MX_GPIO_Init+0x2f0>)
 8000d44:	f001 ffe4 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LWL_IN_Pin;
 8000d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LWL_IN_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	484b      	ldr	r0, [pc, #300]	; (8000e8c <MX_GPIO_Init+0x2e4>)
 8000d5e:	f001 ffd7 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000d62:	f24e 33ff 	movw	r3, #58367	; 0xe3ff
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d74:	4619      	mov	r1, r3
 8000d76:	484c      	ldr	r0, [pc, #304]	; (8000ea8 <MX_GPIO_Init+0x300>)
 8000d78:	f001 ffca 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI10 PI11 PI12 PI13
                           PI15 PI0 PI1 PI2
                           PI4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000d7c:	f64b 4317 	movw	r3, #48151	; 0xbc17
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d82:	2303      	movs	r3, #3
 8000d84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	483e      	ldr	r0, [pc, #248]	; (8000e8c <MX_GPIO_Init+0x2e4>)
 8000d92:	f001 ffbd 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF6
                           PF11 PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8000d96:	f641 0347 	movw	r3, #6215	; 0x1847
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000da4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da8:	4619      	mov	r1, r3
 8000daa:	4839      	ldr	r0, [pc, #228]	; (8000e90 <MX_GPIO_Init+0x2e8>)
 8000dac:	f001 ffb0 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LED_4_Pin|LWL_OUT_Pin;
 8000db0:	f244 0308 	movw	r3, #16392	; 0x4008
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4830      	ldr	r0, [pc, #192]	; (8000e8c <MX_GPIO_Init+0x2e4>)
 8000dca:	f001 ffa1 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LED_1_Pin|SD_CS_Pin
 8000dce:	f24e 4338 	movw	r3, #58424	; 0xe438
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |nCS_DMS1_Pin|nCS_DMS2_Pin|nCS_DMS3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000de0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de4:	4619      	mov	r1, r3
 8000de6:	482a      	ldr	r0, [pc, #168]	; (8000e90 <MX_GPIO_Init+0x2e8>)
 8000de8:	f001 ff92 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH2 PH3
                           PH4 PH5 PH6 PH7
                           PH8 PH13 PH14 PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000dec:	f24e 13ff 	movw	r3, #57855	; 0xe1ff
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df2:	2303      	movs	r3, #3
 8000df4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4826      	ldr	r0, [pc, #152]	; (8000e9c <MX_GPIO_Init+0x2f4>)
 8000e02:	f001 ff85 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000e06:	231e      	movs	r3, #30
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e16:	4619      	mov	r1, r3
 8000e18:	4824      	ldr	r0, [pc, #144]	; (8000eac <MX_GPIO_Init+0x304>)
 8000e1a:	f001 ff79 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000e1e:	f640 73e3 	movw	r3, #4067	; 0xfe3
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e24:	2303      	movs	r3, #3
 8000e26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e30:	4619      	mov	r1, r3
 8000e32:	481b      	ldr	r0, [pc, #108]	; (8000ea0 <MX_GPIO_Init+0x2f8>)
 8000e34:	f001 ff6c 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ0 PJ1 PJ2 PJ3
                           PJ4 PJ5 PJ12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e38:	f241 033f 	movw	r3, #4159	; 0x103f
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4818      	ldr	r0, [pc, #96]	; (8000eb0 <MX_GPIO_Init+0x308>)
 8000e4e:	f001 ff5f 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = nCS_DMS4_Pin|nCS_DMS5_Pin;
 8000e52:	2303      	movs	r3, #3
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e56:	2301      	movs	r3, #1
 8000e58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e66:	4619      	mov	r1, r3
 8000e68:	480a      	ldr	r0, [pc, #40]	; (8000e94 <MX_GPIO_Init+0x2ec>)
 8000e6a:	f001 ff51 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nCS_DMS6_Pin;
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(nCS_DMS6_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e82:	4619      	mov	r1, r3
 8000e84:	e016      	b.n	8000eb4 <MX_GPIO_Init+0x30c>
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40022000 	.word	0x40022000
 8000e90:	40021400 	.word	0x40021400
 8000e94:	40021800 	.word	0x40021800
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40021c00 	.word	0x40021c00
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40020c00 	.word	0x40020c00
 8000ea8:	40020800 	.word	0x40020800
 8000eac:	40020000 	.word	0x40020000
 8000eb0:	40022400 	.word	0x40022400
 8000eb4:	485d      	ldr	r0, [pc, #372]	; (800102c <MX_GPIO_Init+0x484>)
 8000eb6:	f001 ff2b 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = FL1_HLD_Pin|FL1_WP_Pin|FL1_RES_Pin|FL1_CS2_Pin;
 8000eba:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ecc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4857      	ldr	r0, [pc, #348]	; (8001030 <MX_GPIO_Init+0x488>)
 8000ed4:	f001 ff1c 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FL1_CS1_Pin;
 8000ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FL1_CS1_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4850      	ldr	r0, [pc, #320]	; (8001034 <MX_GPIO_Init+0x48c>)
 8000ef2:	f001 ff0d 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = nCS_PT3_Pin|FL2_HLD_Pin|FL2_RES_Pin|FL2_CS2_Pin
 8000ef6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FL2_CS1_Pin|FL2_WP_Pin|nCS_PT2_Pin|nCS_PT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	484a      	ldr	r0, [pc, #296]	; (8001038 <MX_GPIO_Init+0x490>)
 8000f10:	f001 fefe 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MS_SEL_Pin;
 8000f14:	2304      	movs	r3, #4
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MS_SEL_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f24:	4619      	mov	r1, r3
 8000f26:	4845      	ldr	r0, [pc, #276]	; (800103c <MX_GPIO_Init+0x494>)
 8000f28:	f001 fef2 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG5 PG6 PG7
                           PG8 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000f2c:	f64f 73e8 	movw	r3, #65512	; 0xffe8
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f32:	2303      	movs	r3, #3
 8000f34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f3e:	4619      	mov	r1, r3
 8000f40:	483e      	ldr	r0, [pc, #248]	; (800103c <MX_GPIO_Init+0x494>)
 8000f42:	f001 fee5 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDRDY_DMS1_Pin;
 8000f46:	2310      	movs	r3, #16
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f4a:	4b3d      	ldr	r3, [pc, #244]	; (8001040 <MX_GPIO_Init+0x498>)
 8000f4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(nDRDY_DMS1_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f56:	4619      	mov	r1, r3
 8000f58:	4838      	ldr	r0, [pc, #224]	; (800103c <MX_GPIO_Init+0x494>)
 8000f5a:	f001 fed9 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = nDRDY_DMS2_Pin|nDRDY_DMS3_Pin|nDRDY_DMS5_Pin|nDRDY_DMS6_Pin;
 8000f5e:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f64:	4b36      	ldr	r3, [pc, #216]	; (8001040 <MX_GPIO_Init+0x498>)
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f70:	4619      	mov	r1, r3
 8000f72:	4834      	ldr	r0, [pc, #208]	; (8001044 <MX_GPIO_Init+0x49c>)
 8000f74:	f001 fecc 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDRDY_DMS4_Pin;
 8000f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(nDRDY_DMS4_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	482d      	ldr	r0, [pc, #180]	; (8001044 <MX_GPIO_Init+0x49c>)
 8000f8e:	f001 febf 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8000f92:	23fb      	movs	r3, #251	; 0xfb
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f96:	2303      	movs	r3, #3
 8000f98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4824      	ldr	r0, [pc, #144]	; (8001038 <MX_GPIO_Init+0x490>)
 8000fa6:	f001 feb3 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = nDRDY_PT3_Pin|nDRDY_PT2_Pin|nDRDY_PT1_Pin;
 8000faa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb0:	4b23      	ldr	r3, [pc, #140]	; (8001040 <MX_GPIO_Init+0x498>)
 8000fb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000fb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4822      	ldr	r0, [pc, #136]	; (8001048 <MX_GPIO_Init+0x4a0>)
 8000fc0:	f001 fea6 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK3 PK4 PK5 PK6
                           PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000fc4:	23f8      	movs	r3, #248	; 0xf8
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000fd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481d      	ldr	r0, [pc, #116]	; (800104c <MX_GPIO_Init+0x4a4>)
 8000fd8:	f001 fe9a 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SODS_OPT_Pin|SOE_OPT_Pin|LO_OPT_Pin;
 8000fdc:	23e0      	movs	r3, #224	; 0xe0
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <MX_GPIO_Init+0x498>)
 8000fe2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fe8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fec:	4619      	mov	r1, r3
 8000fee:	4818      	ldr	r0, [pc, #96]	; (8001050 <MX_GPIO_Init+0x4a8>)
 8000ff0:	f001 fe8e 	bl	8002d10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2105      	movs	r1, #5
 8000ff8:	200a      	movs	r0, #10
 8000ffa:	f001 fcc7 	bl	800298c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ffe:	200a      	movs	r0, #10
 8001000:	f001 fcf0 	bl	80029e4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2105      	movs	r1, #5
 8001008:	2017      	movs	r0, #23
 800100a:	f001 fcbf 	bl	800298c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800100e:	2017      	movs	r0, #23
 8001010:	f001 fce8 	bl	80029e4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	2105      	movs	r1, #5
 8001018:	2028      	movs	r0, #40	; 0x28
 800101a:	f001 fcb7 	bl	800298c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800101e:	2028      	movs	r0, #40	; 0x28
 8001020:	f001 fce0 	bl	80029e4 <HAL_NVIC_EnableIRQ>

}
 8001024:	bf00      	nop
 8001026:	3740      	adds	r7, #64	; 0x40
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40021000 	.word	0x40021000
 8001030:	40021c00 	.word	0x40021c00
 8001034:	40020400 	.word	0x40020400
 8001038:	40020c00 	.word	0x40020c00
 800103c:	40021800 	.word	0x40021800
 8001040:	10110000 	.word	0x10110000
 8001044:	40020000 	.word	0x40020000
 8001048:	40022400 	.word	0x40022400
 800104c:	40022800 	.word	0x40022800
 8001050:	40022000 	.word	0x40022000

08001054 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 	HAL_Init();
 8001058:	f001 fb29 	bl	80026ae <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800105c:	f000 f83c 	bl	80010d8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001060:	f7ff fda2 	bl	8000ba8 <MX_GPIO_Init>
	MX_SPI2_Init();
 8001064:	f000 fde6 	bl	8001c34 <MX_SPI2_Init>
	MX_SPI3_Init();
 8001068:	f000 fe22 	bl	8001cb0 <MX_SPI3_Init>
	MX_SPI6_Init();
 800106c:	f000 feda 	bl	8001e24 <MX_SPI6_Init>
	MX_UART4_Init();
 8001070:	f001 f966 	bl	8002340 <MX_UART4_Init>
	MX_UART8_Init();
 8001074:	f001 f9c4 	bl	8002400 <MX_UART8_Init>
	MX_UART5_Init();
 8001078:	f001 f992 	bl	80023a0 <MX_UART5_Init>
	MX_CRC_Init();
 800107c:	f7ff fba8 	bl	80007d0 <MX_CRC_Init>
	MX_SPI4_Init();
 8001080:	f000 fe54 	bl	8001d2c <MX_SPI4_Init>
	MX_SPI5_Init();
 8001084:	f000 fe90 	bl	8001da8 <MX_SPI5_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET); //clear all LEDs
 8001088:	2200      	movs	r2, #0
 800108a:	2120      	movs	r1, #32
 800108c:	480f      	ldr	r0, [pc, #60]	; (80010cc <main+0x78>)
 800108e:	f002 f9ed 	bl	800346c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2110      	movs	r1, #16
 8001096:	480d      	ldr	r0, [pc, #52]	; (80010cc <main+0x78>)
 8001098:	f002 f9e8 	bl	800346c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	2108      	movs	r1, #8
 80010a0:	480a      	ldr	r0, [pc, #40]	; (80010cc <main+0x78>)
 80010a2:	f002 f9e3 	bl	800346c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ac:	4808      	ldr	r0, [pc, #32]	; (80010d0 <main+0x7c>)
 80010ae:	f002 f9dd 	bl	800346c <HAL_GPIO_WritePin>

	if (!HAL_GPIO_ReadPin(MS_SEL_GPIO_Port, MS_SEL_Pin)) {
 80010b2:	2104      	movs	r1, #4
 80010b4:	4807      	ldr	r0, [pc, #28]	; (80010d4 <main+0x80>)
 80010b6:	f002 f9b9 	bl	800342c <HAL_GPIO_ReadPin>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <main+0x72>
		main_master();
 80010c0:	f000 f89e 	bl	8001200 <main_master>
 80010c4:	e001      	b.n	80010ca <main+0x76>
	} else { //Slave loop
		main_slave();
 80010c6:	f000 f97b 	bl	80013c0 <main_slave>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80010ca:	e7fe      	b.n	80010ca <main+0x76>
 80010cc:	40021400 	.word	0x40021400
 80010d0:	40022000 	.word	0x40022000
 80010d4:	40021800 	.word	0x40021800

080010d8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b0b8      	sub	sp, #224	; 0xe0
 80010dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80010e2:	2234      	movs	r2, #52	; 0x34
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f006 fb30 	bl	800774c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010ec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80010fc:	f107 0308 	add.w	r3, r7, #8
 8001100:	2290      	movs	r2, #144	; 0x90
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f006 fb21 	bl	800774c <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800110a:	4b3b      	ldr	r3, [pc, #236]	; (80011f8 <SystemClock_Config+0x120>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	4a3a      	ldr	r2, [pc, #232]	; (80011f8 <SystemClock_Config+0x120>)
 8001110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001114:	6413      	str	r3, [r2, #64]	; 0x40
 8001116:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <SystemClock_Config+0x120>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001122:	4b36      	ldr	r3, [pc, #216]	; (80011fc <SystemClock_Config+0x124>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a35      	ldr	r2, [pc, #212]	; (80011fc <SystemClock_Config+0x124>)
 8001128:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	4b33      	ldr	r3, [pc, #204]	; (80011fc <SystemClock_Config+0x124>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800113a:	2302      	movs	r3, #2
 800113c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001140:	2301      	movs	r3, #1
 8001142:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001146:	2310      	movs	r3, #16
 8001148:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114c:	2302      	movs	r3, #2
 800114e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001152:	2300      	movs	r3, #0
 8001154:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001158:	2308      	movs	r3, #8
 800115a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 192;
 800115e:	23c0      	movs	r3, #192	; 0xc0
 8001160:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001164:	2302      	movs	r3, #2
 8001166:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800116a:	2302      	movs	r3, #2
 800116c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001170:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001174:	4618      	mov	r0, r3
 8001176:	f002 fa3b 	bl	80035f0 <HAL_RCC_OscConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <SystemClock_Config+0xac>
		Error_Handler();
 8001180:	f000 fd46 	bl	8001c10 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8001184:	f002 f9e4 	bl	8003550 <HAL_PWREx_EnableOverDrive>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0xba>
		Error_Handler();
 800118e:	f000 fd3f 	bl	8001c10 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001192:	230f      	movs	r3, #15
 8001194:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001198:	2302      	movs	r3, #2
 800119a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80011ac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 80011b4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80011b8:	2106      	movs	r1, #6
 80011ba:	4618      	mov	r0, r3
 80011bc:	f002 fd88 	bl	8003cd0 <HAL_RCC_ClockConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0xf2>
		Error_Handler();
 80011c6:	f000 fd23 	bl	8001c10 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4
 80011ca:	f44f 5318 	mov.w	r3, #9728	; 0x2600
 80011ce:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_UART5 | RCC_PERIPHCLK_UART8;
	PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	65bb      	str	r3, [r7, #88]	; 0x58
	PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	65fb      	str	r3, [r7, #92]	; 0x5c
	PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 80011d8:	2300      	movs	r3, #0
 80011da:	66bb      	str	r3, [r7, #104]	; 0x68
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80011dc:	f107 0308 	add.w	r3, r7, #8
 80011e0:	4618      	mov	r0, r3
 80011e2:	f003 f803 	bl	80041ec <HAL_RCCEx_PeriphCLKConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0x118>
		Error_Handler();
 80011ec:	f000 fd10 	bl	8001c10 <Error_Handler>
	}
}
 80011f0:	bf00      	nop
 80011f2:	37e0      	adds	r7, #224	; 0xe0
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40007000 	.word	0x40007000

08001200 <main_master>:

/* USER CODE BEGIN 4 */
void main_master(void) {
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b0c9      	sub	sp, #292	; 0x124
 8001204:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);  //ON = MS set to Master
	//uint8_t bufferOff[3] = {0x01, 0x03, 0x05};
	//uint8_t bufferOn[3] = {0x02, 0x04, 0x06};

	uint32_t lastInit = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	uint32_t lastBlinky = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	uint8_t writeBuffer[256] = { 0 };
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	4618      	mov	r0, r3
 8001218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800121c:	461a      	mov	r2, r3
 800121e:	2100      	movs	r1, #0
 8001220:	f006 fa94 	bl	800774c <memset>

	uint8_t readSensor = 3; //DMS: 0-5, PT100: 6-8
 8001224:	2303      	movs	r3, #3
 8001226:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113

	/* Performing the memory test */
	InitMemory();
 800122a:	f7ff fb13 	bl	8000854 <InitMemory>
	uint32_t memoryTest = MemoryTest();
 800122e:	f7ff f9df 	bl	80005f0 <MemoryTest>
 8001232:	4603      	mov	r3, r0
 8001234:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(writeBuffer, " \n\rMemory test: %s\n\r\0",
 8001238:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <main_master+0x44>
 8001240:	4a58      	ldr	r2, [pc, #352]	; (80013a4 <main_master+0x1a4>)
 8001242:	e000      	b.n	8001246 <main_master+0x46>
 8001244:	4a58      	ldr	r2, [pc, #352]	; (80013a8 <main_master+0x1a8>)
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	4958      	ldr	r1, [pc, #352]	; (80013ac <main_master+0x1ac>)
 800124c:	4618      	mov	r0, r3
 800124e:	f006 fa85 	bl	800775c <siprintf>
			(memoryTest == 0 ? "Passed" : "Failed"));
	HAL_UART_Transmit(&huart4, writeBuffer, strlen(writeBuffer), HAL_MAX_DELAY);
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	4618      	mov	r0, r3
 8001258:	f7fe fff2 	bl	8000240 <strlen>
 800125c:	4603      	mov	r3, r0
 800125e:	b29a      	uxth	r2, r3
 8001260:	f107 0108 	add.w	r1, r7, #8
 8001264:	f04f 33ff 	mov.w	r3, #4294967295
 8001268:	4851      	ldr	r0, [pc, #324]	; (80013b0 <main_master+0x1b0>)
 800126a:	f005 f9e3 	bl	8006634 <HAL_UART_Transmit>
	/*For Framerate*/
	HAL_Delay(5000);
 800126e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001272:	f001 fa79 	bl	8002768 <HAL_Delay>

	for (int sensors = 0; sensors <= 8; sensors++) {
 8001276:	2300      	movs	r3, #0
 8001278:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800127c:	e01b      	b.n	80012b6 <main_master+0xb6>
		if (sensors <= 5)
 800127e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001282:	2b05      	cmp	r3, #5
 8001284:	dc09      	bgt.n	800129a <main_master+0x9a>
			adc_scan_start(sensors, 2000, 128, 0);
 8001286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800128a:	b258      	sxtb	r0, r3
 800128c:	2300      	movs	r3, #0
 800128e:	2280      	movs	r2, #128	; 0x80
 8001290:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001294:	f000 f946 	bl	8001524 <adc_scan_start>
 8001298:	e008      	b.n	80012ac <main_master+0xac>
		else
			adc_scan_start(sensors, 2000, 1, 0);
 800129a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800129e:	b258      	sxtb	r0, r3
 80012a0:	2300      	movs	r3, #0
 80012a2:	2201      	movs	r2, #1
 80012a4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80012a8:	f000 f93c 	bl	8001524 <adc_scan_start>
	for (int sensors = 0; sensors <= 8; sensors++) {
 80012ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012b0:	3301      	adds	r3, #1
 80012b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80012b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	dddf      	ble.n	800127e <main_master+0x7e>
	}

	HAL_Delay(1000);
 80012be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012c2:	f001 fa51 	bl	8002768 <HAL_Delay>

	uint8_t softgain = 1;
 80012c6:	2301      	movs	r3, #1
 80012c8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint8_t offset = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
	uint8_t dout = 0;
 80012d2:	1dfb      	adds	r3, r7, #7
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart4, (uint8_t*) &dout, sizeof(dout), HAL_MAX_DELAY);
 80012d8:	1df9      	adds	r1, r7, #7
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	2201      	movs	r2, #1
 80012e0:	4833      	ldr	r0, [pc, #204]	; (80013b0 <main_master+0x1b0>)
 80012e2:	f005 f9a7 	bl	8006634 <HAL_UART_Transmit>

	while (1) { //Master loop

		data = adc_scan(readSensor, 0x01);
 80012e6:	f997 3113 	ldrsb.w	r3, [r7, #275]	; 0x113
 80012ea:	2101      	movs	r1, #1
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 f907 	bl	8001500 <adc_scan>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b2f      	ldr	r3, [pc, #188]	; (80013b4 <main_master+0x1b4>)
 80012f8:	801a      	strh	r2, [r3, #0]
		dout = data * softgain + offset;
 80012fa:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <main_master+0x1b4>)
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8001304:	fb12 f303 	smulbb	r3, r2, r3
 8001308:	b2da      	uxtb	r2, r3
 800130a:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 800130e:	4413      	add	r3, r2
 8001310:	b2da      	uxtb	r2, r3
 8001312:	1dfb      	adds	r3, r7, #7
 8001314:	701a      	strb	r2, [r3, #0]
		write_DAPI(&dout);
 8001316:	1dfb      	adds	r3, r7, #7
 8001318:	4618      	mov	r0, r3
 800131a:	f000 fc67 	bl	8001bec <write_DAPI>
		write_EXP(&dout);
 800131e:	1dfb      	adds	r3, r7, #7
 8001320:	4618      	mov	r0, r3
 8001322:	f000 fc51 	bl	8001bc8 <write_EXP>

		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin,
 8001326:	2120      	movs	r1, #32
 8001328:	4823      	ldr	r0, [pc, #140]	; (80013b8 <main_master+0x1b8>)
 800132a:	f002 f87f 	bl	800342c <HAL_GPIO_ReadPin>
 800132e:	4603      	mov	r3, r0
 8001330:	461a      	mov	r2, r3
 8001332:	2110      	movs	r1, #16
 8001334:	4821      	ldr	r0, [pc, #132]	; (80013bc <main_master+0x1bc>)
 8001336:	f002 f899 	bl	800346c <HAL_GPIO_WritePin>
				HAL_GPIO_ReadPin(SODS_OPT_GPIO_Port, SODS_OPT_Pin));
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin,
 800133a:	2180      	movs	r1, #128	; 0x80
 800133c:	481e      	ldr	r0, [pc, #120]	; (80013b8 <main_master+0x1b8>)
 800133e:	f002 f875 	bl	800342c <HAL_GPIO_ReadPin>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	2108      	movs	r1, #8
 8001348:	481c      	ldr	r0, [pc, #112]	; (80013bc <main_master+0x1bc>)
 800134a:	f002 f88f 	bl	800346c <HAL_GPIO_WritePin>
				HAL_GPIO_ReadPin(LO_OPT_GPIO_Port, LO_OPT_Pin));
		HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin,
 800134e:	2140      	movs	r1, #64	; 0x40
 8001350:	4819      	ldr	r0, [pc, #100]	; (80013b8 <main_master+0x1b8>)
 8001352:	f002 f86b 	bl	800342c <HAL_GPIO_ReadPin>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800135e:	4816      	ldr	r0, [pc, #88]	; (80013b8 <main_master+0x1b8>)
 8001360:	f002 f884 	bl	800346c <HAL_GPIO_WritePin>
				HAL_GPIO_ReadPin(SOE_OPT_GPIO_Port, SOE_OPT_Pin));

		if (lastInit + 5000 < HAL_GetTick()) {
 8001364:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001368:	f241 3488 	movw	r4, #5000	; 0x1388
 800136c:	441c      	add	r4, r3
 800136e:	f001 f9ef 	bl	8002750 <HAL_GetTick>
 8001372:	4603      	mov	r3, r0
 8001374:	429c      	cmp	r4, r3
 8001376:	d203      	bcs.n	8001380 <main_master+0x180>
			lastInit = HAL_GetTick();
 8001378:	f001 f9ea 	bl	8002750 <HAL_GetTick>
 800137c:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
			 }
			 */

		}

		if (lastBlinky + 1000 < HAL_GetTick()) {
 8001380:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001384:	f503 747a 	add.w	r4, r3, #1000	; 0x3e8
 8001388:	f001 f9e2 	bl	8002750 <HAL_GetTick>
 800138c:	4603      	mov	r3, r0
 800138e:	429c      	cmp	r4, r3
 8001390:	d2a9      	bcs.n	80012e6 <main_master+0xe6>
			lastBlinky = HAL_GetTick();
 8001392:	f001 f9dd 	bl	8002750 <HAL_GetTick>
 8001396:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
			HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 800139a:	2120      	movs	r1, #32
 800139c:	4807      	ldr	r0, [pc, #28]	; (80013bc <main_master+0x1bc>)
 800139e:	f002 f891 	bl	80034c4 <HAL_GPIO_TogglePin>
		data = adc_scan(readSensor, 0x01);
 80013a2:	e7a0      	b.n	80012e6 <main_master+0xe6>
 80013a4:	08007f80 	.word	0x08007f80
 80013a8:	08007f88 	.word	0x08007f88
 80013ac:	08007f90 	.word	0x08007f90
 80013b0:	200003b8 	.word	0x200003b8
 80013b4:	2000008c 	.word	0x2000008c
 80013b8:	40022000 	.word	0x40022000
 80013bc:	40021400 	.word	0x40021400

080013c0 <main_slave>:
		 HAL_Delay(100);
		 */
	}
}

void main_slave(void) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
	uint8_t buffer[1] = { 0x00 };
 80013c6:	2300      	movs	r3, #0
 80013c8:	713b      	strb	r3, [r7, #4]
	while (1) {
		HAL_UART_Receive(&huart5, buffer, sizeof(buffer), 5);
 80013ca:	1d39      	adds	r1, r7, #4
 80013cc:	2305      	movs	r3, #5
 80013ce:	2201      	movs	r2, #1
 80013d0:	481e      	ldr	r0, [pc, #120]	; (800144c <main_slave+0x8c>)
 80013d2:	f005 f9c0 	bl	8006756 <HAL_UART_Receive>
		if (buffer[0] == 0x01) {
 80013d6:	793b      	ldrb	r3, [r7, #4]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d105      	bne.n	80013e8 <main_slave+0x28>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2110      	movs	r1, #16
 80013e0:	481b      	ldr	r0, [pc, #108]	; (8001450 <main_slave+0x90>)
 80013e2:	f002 f843 	bl	800346c <HAL_GPIO_WritePin>
 80013e6:	e02d      	b.n	8001444 <main_slave+0x84>
		} else if (buffer[0] == 0x02) {
 80013e8:	793b      	ldrb	r3, [r7, #4]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d105      	bne.n	80013fa <main_slave+0x3a>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80013ee:	2201      	movs	r2, #1
 80013f0:	2110      	movs	r1, #16
 80013f2:	4817      	ldr	r0, [pc, #92]	; (8001450 <main_slave+0x90>)
 80013f4:	f002 f83a 	bl	800346c <HAL_GPIO_WritePin>
 80013f8:	e024      	b.n	8001444 <main_slave+0x84>
		} else if (buffer[0] == 0x03) {
 80013fa:	793b      	ldrb	r3, [r7, #4]
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	d105      	bne.n	800140c <main_slave+0x4c>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	2108      	movs	r1, #8
 8001404:	4812      	ldr	r0, [pc, #72]	; (8001450 <main_slave+0x90>)
 8001406:	f002 f831 	bl	800346c <HAL_GPIO_WritePin>
 800140a:	e01b      	b.n	8001444 <main_slave+0x84>
		} else if (buffer[0] == 0x04) {
 800140c:	793b      	ldrb	r3, [r7, #4]
 800140e:	2b04      	cmp	r3, #4
 8001410:	d105      	bne.n	800141e <main_slave+0x5e>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001412:	2201      	movs	r2, #1
 8001414:	2108      	movs	r1, #8
 8001416:	480e      	ldr	r0, [pc, #56]	; (8001450 <main_slave+0x90>)
 8001418:	f002 f828 	bl	800346c <HAL_GPIO_WritePin>
 800141c:	e012      	b.n	8001444 <main_slave+0x84>
		} else if (buffer[0] == 0x05) {
 800141e:	793b      	ldrb	r3, [r7, #4]
 8001420:	2b05      	cmp	r3, #5
 8001422:	d106      	bne.n	8001432 <main_slave+0x72>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800142a:	480a      	ldr	r0, [pc, #40]	; (8001454 <main_slave+0x94>)
 800142c:	f002 f81e 	bl	800346c <HAL_GPIO_WritePin>
 8001430:	e008      	b.n	8001444 <main_slave+0x84>
		} else if (buffer[0] == 0x06) {
 8001432:	793b      	ldrb	r3, [r7, #4]
 8001434:	2b06      	cmp	r3, #6
 8001436:	d105      	bne.n	8001444 <main_slave+0x84>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <main_slave+0x94>)
 8001440:	f002 f814 	bl	800346c <HAL_GPIO_WritePin>
		}
		buffer[1] = 0x00;
 8001444:	2300      	movs	r3, #0
 8001446:	717b      	strb	r3, [r7, #5]
		HAL_UART_Receive(&huart5, buffer, sizeof(buffer), 5);
 8001448:	e7bf      	b.n	80013ca <main_slave+0xa>
 800144a:	bf00      	nop
 800144c:	200002b8 	.word	0x200002b8
 8001450:	40021400 	.word	0x40021400
 8001454:	40022000 	.word	0x40022000

08001458 <cs_enable>:
	}
}

int cs_enable(int8_t id) {
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(port_from_id(id), pin_from_id(id), GPIO_PIN_RESET);
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	4618      	mov	r0, r3
 8001468:	f000 fa3a 	bl	80018e0 <port_from_id>
 800146c:	4604      	mov	r4, r0
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f9f6 	bl	8001864 <pin_from_id>
 8001478:	4603      	mov	r3, r0
 800147a:	2200      	movs	r2, #0
 800147c:	4619      	mov	r1, r3
 800147e:	4620      	mov	r0, r4
 8001480:	f001 fff4 	bl	800346c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001484:	2001      	movs	r0, #1
 8001486:	f001 f96f 	bl	8002768 <HAL_Delay>
	return 0;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	bd90      	pop	{r4, r7, pc}

08001494 <cs_disable>:

int cs_disable(int8_t id) {
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(port_from_id(id), pin_from_id(id), GPIO_PIN_SET);
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 fa1c 	bl	80018e0 <port_from_id>
 80014a8:	4604      	mov	r4, r0
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 f9d8 	bl	8001864 <pin_from_id>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2201      	movs	r2, #1
 80014b8:	4619      	mov	r1, r3
 80014ba:	4620      	mov	r0, r4
 80014bc:	f001 ffd6 	bl	800346c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80014c0:	2001      	movs	r0, #1
 80014c2:	f001 f951 	bl	8002768 <HAL_Delay>
	return 0;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd90      	pop	{r4, r7, pc}

080014d0 <wr_spi>:

int wr_spi(int8_t id, uint8_t cmd) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	460a      	mov	r2, r1
 80014da:	71fb      	strb	r3, [r7, #7]
 80014dc:	4613      	mov	r3, r2
 80014de:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Transmit(get_hspi_from_id(id), &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80014e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 fab9 	bl	8001a5c <get_hspi_from_id>
 80014ea:	1db9      	adds	r1, r7, #6
 80014ec:	f04f 33ff 	mov.w	r3, #4294967295
 80014f0:	2201      	movs	r2, #1
 80014f2:	f004 f88f 	bl	8005614 <HAL_SPI_Transmit>
	return 0;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <adc_scan>:

uint16_t adc_scan(int8_t id, uint8_t chn) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	460a      	mov	r2, r1
 800150a:	71fb      	strb	r3, [r7, #7]
 800150c:	4613      	mov	r3, r2
 800150e:	71bb      	strb	r3, [r7, #6]
	return rd_data(id);
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f000 f947 	bl	80017a8 <rd_data>
 800151a:	4603      	mov	r3, r0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <adc_scan_start>:

int16_t adc_scan_start(int8_t id, uint_least16_t drate, uint_least8_t gain,
		uint_least16_t current) {
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	4604      	mov	r4, r0
 800152c:	4608      	mov	r0, r1
 800152e:	4611      	mov	r1, r2
 8001530:	461a      	mov	r2, r3
 8001532:	4623      	mov	r3, r4
 8001534:	71fb      	strb	r3, [r7, #7]
 8001536:	4603      	mov	r3, r0
 8001538:	80bb      	strh	r3, [r7, #4]
 800153a:	460b      	mov	r3, r1
 800153c:	71bb      	strb	r3, [r7, #6]
 800153e:	4613      	mov	r3, r2
 8001540:	807b      	strh	r3, [r7, #2]
	int16_t r = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	81fb      	strh	r3, [r7, #14]
	switch (drate) {
 8001546:	88bb      	ldrh	r3, [r7, #4]
 8001548:	2ba0      	cmp	r3, #160	; 0xa0
 800154a:	d02d      	beq.n	80015a8 <adc_scan_start+0x84>
 800154c:	2ba0      	cmp	r3, #160	; 0xa0
 800154e:	dc0b      	bgt.n	8001568 <adc_scan_start+0x44>
 8001550:	2b0a      	cmp	r3, #10
 8001552:	d01d      	beq.n	8001590 <adc_scan_start+0x6c>
 8001554:	2b0a      	cmp	r3, #10
 8001556:	dc02      	bgt.n	800155e <adc_scan_start+0x3a>
 8001558:	2b05      	cmp	r3, #5
 800155a:	d016      	beq.n	800158a <adc_scan_start+0x66>
 800155c:	e01e      	b.n	800159c <adc_scan_start+0x78>
 800155e:	2b14      	cmp	r3, #20
 8001560:	d019      	beq.n	8001596 <adc_scan_start+0x72>
 8001562:	2b50      	cmp	r3, #80	; 0x50
 8001564:	d01d      	beq.n	80015a2 <adc_scan_start+0x7e>
 8001566:	e019      	b.n	800159c <adc_scan_start+0x78>
 8001568:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800156c:	d022      	beq.n	80015b4 <adc_scan_start+0x90>
 800156e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001572:	dc03      	bgt.n	800157c <adc_scan_start+0x58>
 8001574:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001578:	d019      	beq.n	80015ae <adc_scan_start+0x8a>
 800157a:	e00f      	b.n	800159c <adc_scan_start+0x78>
 800157c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001580:	d01b      	beq.n	80015ba <adc_scan_start+0x96>
 8001582:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001586:	d01b      	beq.n	80015c0 <adc_scan_start+0x9c>
 8001588:	e008      	b.n	800159c <adc_scan_start+0x78>
	case 5:
		drate = SYS0_DOR5;
 800158a:	2300      	movs	r3, #0
 800158c:	80bb      	strh	r3, [r7, #4]
		break;
 800158e:	e01a      	b.n	80015c6 <adc_scan_start+0xa2>
	case 10:
		drate = SYS0_DOR10;
 8001590:	2301      	movs	r3, #1
 8001592:	80bb      	strh	r3, [r7, #4]
		break;
 8001594:	e017      	b.n	80015c6 <adc_scan_start+0xa2>
	case 20:
		drate = SYS0_DOR20;
 8001596:	2302      	movs	r3, #2
 8001598:	80bb      	strh	r3, [r7, #4]
		break;
 800159a:	e014      	b.n	80015c6 <adc_scan_start+0xa2>
	default:
	case 40:
		drate = SYS0_DOR40;
 800159c:	2303      	movs	r3, #3
 800159e:	80bb      	strh	r3, [r7, #4]
		break;
 80015a0:	e011      	b.n	80015c6 <adc_scan_start+0xa2>
	case 80:
		drate = SYS0_DOR80;
 80015a2:	2304      	movs	r3, #4
 80015a4:	80bb      	strh	r3, [r7, #4]
		break;
 80015a6:	e00e      	b.n	80015c6 <adc_scan_start+0xa2>
	case 160:
		drate = SYS0_DOR160;
 80015a8:	2305      	movs	r3, #5
 80015aa:	80bb      	strh	r3, [r7, #4]
		break;
 80015ac:	e00b      	b.n	80015c6 <adc_scan_start+0xa2>
	case 320:
		drate = SYS0_DOR320;
 80015ae:	2306      	movs	r3, #6
 80015b0:	80bb      	strh	r3, [r7, #4]
		break;
 80015b2:	e008      	b.n	80015c6 <adc_scan_start+0xa2>
	case 640:
		drate = SYS0_DOR640;
 80015b4:	2307      	movs	r3, #7
 80015b6:	80bb      	strh	r3, [r7, #4]
		break;
 80015b8:	e005      	b.n	80015c6 <adc_scan_start+0xa2>
	case 1000:
		drate = SYS0_DOR1000;
 80015ba:	2308      	movs	r3, #8
 80015bc:	80bb      	strh	r3, [r7, #4]
		break;
 80015be:	e002      	b.n	80015c6 <adc_scan_start+0xa2>
	case 2000:
		drate = SYS0_DOR2000;
 80015c0:	2309      	movs	r3, #9
 80015c2:	80bb      	strh	r3, [r7, #4]
		break;
 80015c4:	bf00      	nop
	}

	switch (gain) {
 80015c6:	79bb      	ldrb	r3, [r7, #6]
 80015c8:	2b10      	cmp	r3, #16
 80015ca:	d01a      	beq.n	8001602 <adc_scan_start+0xde>
 80015cc:	2b10      	cmp	r3, #16
 80015ce:	dc06      	bgt.n	80015de <adc_scan_start+0xba>
 80015d0:	2b04      	cmp	r3, #4
 80015d2:	d010      	beq.n	80015f6 <adc_scan_start+0xd2>
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	d011      	beq.n	80015fc <adc_scan_start+0xd8>
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d009      	beq.n	80015f0 <adc_scan_start+0xcc>
 80015dc:	e005      	b.n	80015ea <adc_scan_start+0xc6>
 80015de:	2b40      	cmp	r3, #64	; 0x40
 80015e0:	d015      	beq.n	800160e <adc_scan_start+0xea>
 80015e2:	2b80      	cmp	r3, #128	; 0x80
 80015e4:	d016      	beq.n	8001614 <adc_scan_start+0xf0>
 80015e6:	2b20      	cmp	r3, #32
 80015e8:	d00e      	beq.n	8001608 <adc_scan_start+0xe4>
	default:
	case 1:
		gain = SYS0_PGA1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	71bb      	strb	r3, [r7, #6]
		break;
 80015ee:	e014      	b.n	800161a <adc_scan_start+0xf6>
	case 2:
		gain = SYS0_PGA2;
 80015f0:	2310      	movs	r3, #16
 80015f2:	71bb      	strb	r3, [r7, #6]
		break;
 80015f4:	e011      	b.n	800161a <adc_scan_start+0xf6>
	case 4:
		gain = SYS0_PGA4;
 80015f6:	2320      	movs	r3, #32
 80015f8:	71bb      	strb	r3, [r7, #6]
		break;
 80015fa:	e00e      	b.n	800161a <adc_scan_start+0xf6>
	case 8:
		gain = SYS0_PGA8;
 80015fc:	2330      	movs	r3, #48	; 0x30
 80015fe:	71bb      	strb	r3, [r7, #6]
		break;
 8001600:	e00b      	b.n	800161a <adc_scan_start+0xf6>
	case 16:
		gain = SYS0_PGA16;
 8001602:	2340      	movs	r3, #64	; 0x40
 8001604:	71bb      	strb	r3, [r7, #6]
		break;
 8001606:	e008      	b.n	800161a <adc_scan_start+0xf6>
	case 32:
		gain = SYS0_PGA32;
 8001608:	2350      	movs	r3, #80	; 0x50
 800160a:	71bb      	strb	r3, [r7, #6]
		break;
 800160c:	e005      	b.n	800161a <adc_scan_start+0xf6>
	case 64:
		gain = SYS0_PGA64;
 800160e:	2360      	movs	r3, #96	; 0x60
 8001610:	71bb      	strb	r3, [r7, #6]
		break;
 8001612:	e002      	b.n	800161a <adc_scan_start+0xf6>
	case 128:
		gain = SYS0_PGA128;
 8001614:	2370      	movs	r3, #112	; 0x70
 8001616:	71bb      	strb	r3, [r7, #6]
		break;
 8001618:	bf00      	nop
	}

	switch (current) {
 800161a:	887b      	ldrh	r3, [r7, #2]
 800161c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001620:	d020      	beq.n	8001664 <adc_scan_start+0x140>
 8001622:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001626:	dc06      	bgt.n	8001636 <adc_scan_start+0x112>
 8001628:	2b64      	cmp	r3, #100	; 0x64
 800162a:	d015      	beq.n	8001658 <adc_scan_start+0x134>
 800162c:	2bfa      	cmp	r3, #250	; 0xfa
 800162e:	d016      	beq.n	800165e <adc_scan_start+0x13a>
 8001630:	2b32      	cmp	r3, #50	; 0x32
 8001632:	d00e      	beq.n	8001652 <adc_scan_start+0x12e>
 8001634:	e00a      	b.n	800164c <adc_scan_start+0x128>
 8001636:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800163a:	d019      	beq.n	8001670 <adc_scan_start+0x14c>
 800163c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001640:	4293      	cmp	r3, r2
 8001642:	d018      	beq.n	8001676 <adc_scan_start+0x152>
 8001644:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001648:	4293      	cmp	r3, r2
 800164a:	d00e      	beq.n	800166a <adc_scan_start+0x146>
	default:
	case 0:
		current = IDAC0_MAGOFF;
 800164c:	2300      	movs	r3, #0
 800164e:	807b      	strh	r3, [r7, #2]
		break;
 8001650:	e014      	b.n	800167c <adc_scan_start+0x158>
	case 50:
		current = IDAC0_MAG50UA;
 8001652:	2301      	movs	r3, #1
 8001654:	807b      	strh	r3, [r7, #2]
		break;
 8001656:	e011      	b.n	800167c <adc_scan_start+0x158>
	case 100:
		current = IDAC0_MAG100UA;
 8001658:	2302      	movs	r3, #2
 800165a:	807b      	strh	r3, [r7, #2]
		break;
 800165c:	e00e      	b.n	800167c <adc_scan_start+0x158>
	case 250:
		current = IDAC0_MAG250UA;
 800165e:	2303      	movs	r3, #3
 8001660:	807b      	strh	r3, [r7, #2]
		break;
 8001662:	e00b      	b.n	800167c <adc_scan_start+0x158>
	case 500:
		current = IDAC0_MAG500UA;
 8001664:	2304      	movs	r3, #4
 8001666:	807b      	strh	r3, [r7, #2]
		break;
 8001668:	e008      	b.n	800167c <adc_scan_start+0x158>
	case 750:
		current = IDAC0_MAG750UA;
 800166a:	2305      	movs	r3, #5
 800166c:	807b      	strh	r3, [r7, #2]
		break;
 800166e:	e005      	b.n	800167c <adc_scan_start+0x158>
	case 1000:
		current = IDAC0_MAG1000UA;
 8001670:	2306      	movs	r3, #6
 8001672:	807b      	strh	r3, [r7, #2]
		break;
 8001674:	e002      	b.n	800167c <adc_scan_start+0x158>
	case 1500:
		current = IDAC0_MAG1500UA;
 8001676:	2307      	movs	r3, #7
 8001678:	807b      	strh	r3, [r7, #2]
		break;
 800167a:	bf00      	nop
	}

	cs_enable(id);
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fee9 	bl	8001458 <cs_enable>

	if (id <= 5) {	//DMS
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	2b05      	cmp	r3, #5
 800168c:	dc40      	bgt.n	8001710 <adc_scan_start+0x1ec>

		wr_cmd(id, CMD_RESET);
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	2106      	movs	r1, #6
 8001694:	4618      	mov	r0, r3
 8001696:	f000 fa1d 	bl	8001ad4 <wr_cmd>
		wr_cmd(id, CMD_SDATAC);
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	2116      	movs	r1, #22
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 fa17 	bl	8001ad4 <wr_cmd>
		wr_reg(id, REG_MUX0, 0b00000001);
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	2201      	movs	r2, #1
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 fa50 	bl	8001b54 <wr_reg>
		wr_reg(id, REG_VBIAS, 0x00);
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	2200      	movs	r2, #0
 80016ba:	2101      	movs	r1, #1
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 fa49 	bl	8001b54 <wr_reg>
		wr_reg(id, REG_MUX1, 0b00110000);
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	2230      	movs	r2, #48	; 0x30
 80016c8:	2102      	movs	r1, #2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 fa42 	bl	8001b54 <wr_reg>
		wr_reg(id, REG_SYS0, gain | drate);
 80016d0:	88bb      	ldrh	r3, [r7, #4]
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	79bb      	ldrb	r3, [r7, #6]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	2103      	movs	r1, #3
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 fa37 	bl	8001b54 <wr_reg>
		wr_reg(id, REG_IDAC0, 0x00);
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	2200      	movs	r2, #0
 80016ec:	210a      	movs	r1, #10
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 fa30 	bl	8001b54 <wr_reg>
		wr_reg(id, REG_IDAC1, 0b11001100);
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	22cc      	movs	r2, #204	; 0xcc
 80016fa:	210b      	movs	r1, #11
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 fa29 	bl	8001b54 <wr_reg>
		wr_cmd(id, CMD_SYNC);
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	2104      	movs	r1, #4
 8001708:	4618      	mov	r0, r3
 800170a:	f000 f9e3 	bl	8001ad4 <wr_cmd>
 800170e:	e040      	b.n	8001792 <adc_scan_start+0x26e>
		//uint8_t rdata = CMD_RDATAC;
		//HAL_SPI_Transmit(get_hspi_from_id(id), &rdata, 2, HAL_MAX_DELAY);

	} else {	//PT100

		wr_cmd(id, CMD_RESET);
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	2106      	movs	r1, #6
 8001716:	4618      	mov	r0, r3
 8001718:	f000 f9dc 	bl	8001ad4 <wr_cmd>
		wr_cmd(id, CMD_SDATAC);
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	2116      	movs	r1, #22
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f9d6 	bl	8001ad4 <wr_cmd>
		wr_reg(id, REG_VBIAS, 0x00);
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	2200      	movs	r2, #0
 800172e:	2101      	movs	r1, #1
 8001730:	4618      	mov	r0, r3
 8001732:	f000 fa0f 	bl	8001b54 <wr_reg>
		wr_reg(id, REG_MUX0, 0x01); //?
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	2201      	movs	r2, #1
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f000 fa08 	bl	8001b54 <wr_reg>
		wr_reg(id, REG_MUX1, 0b00100000); //int ref on, REFP0/REFN0 ref inp selected
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	2220      	movs	r2, #32
 800174a:	2102      	movs	r1, #2
 800174c:	4618      	mov	r0, r3
 800174e:	f000 fa01 	bl	8001b54 <wr_reg>
		//wr_reg(id, REG_VBIAS, 0x00);
		//wr_reg(id, REG_MUX1, 0b00110000);
		wr_reg(id, REG_SYS0, gain | drate); //Gain 4, SPS 20
 8001752:	88bb      	ldrh	r3, [r7, #4]
 8001754:	b2da      	uxtb	r2, r3
 8001756:	79bb      	ldrb	r3, [r7, #6]
 8001758:	4313      	orrs	r3, r2
 800175a:	b2da      	uxtb	r2, r3
 800175c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001760:	2103      	movs	r1, #3
 8001762:	4618      	mov	r0, r3
 8001764:	f000 f9f6 	bl	8001b54 <wr_reg>
		wr_reg(id, REG_IDAC0, current); //1mA;
 8001768:	887b      	ldrh	r3, [r7, #2]
 800176a:	b2da      	uxtb	r2, r3
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	210a      	movs	r1, #10
 8001772:	4618      	mov	r0, r3
 8001774:	f000 f9ee 	bl	8001b54 <wr_reg>
		wr_reg(id, REG_IDAC1, 0b00000010); //IDAC1 = AIN0, IDAC2 = AIN3
 8001778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177c:	2202      	movs	r2, #2
 800177e:	210b      	movs	r1, #11
 8001780:	4618      	mov	r0, r3
 8001782:	f000 f9e7 	bl	8001b54 <wr_reg>
		wr_cmd(id, CMD_SYNC);
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	2104      	movs	r1, #4
 800178c:	4618      	mov	r0, r3
 800178e:	f000 f9a1 	bl	8001ad4 <wr_cmd>
		//uint8_t rdata = CMD_RDATAC;
		//HAL_SPI_Transmit(get_hspi_from_id(id), &rdata, 2, HAL_MAX_DELAY);
	}

	cs_disable(id);
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fe7c 	bl	8001494 <cs_disable>

	return r;
 800179c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd90      	pop	{r4, r7, pc}

080017a8 <rd_data>:

uint16_t rd_data(int8_t id) {
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
	uint8_t d1, d3;
	uint16_t dR;

	while (HAL_GPIO_ReadPin(port_drdy_from_id(id), pin_drdy_from_id(id))
 80017b2:	bf00      	nop
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 f911 	bl	80019e0 <port_drdy_from_id>
 80017be:	4604      	mov	r4, r0
 80017c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 f8cb 	bl	8001960 <pin_drdy_from_id>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4619      	mov	r1, r3
 80017ce:	4620      	mov	r0, r4
 80017d0:	f001 fe2c 	bl	800342c <HAL_GPIO_ReadPin>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d0ec      	beq.n	80017b4 <rd_data+0xc>
			== GPIO_PIN_SET)
		;
	cs_enable(id);
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fe3a 	bl	8001458 <cs_enable>

	uint8_t rdata = CMD_RDATA;
 80017e4:	2312      	movs	r3, #18
 80017e6:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_Transmit(get_hspi_from_id(id), &rdata, 2, HAL_MAX_DELAY);
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 f935 	bl	8001a5c <get_hspi_from_id>
 80017f2:	f107 010b 	add.w	r1, r7, #11
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295
 80017fa:	2202      	movs	r2, #2
 80017fc:	f003 ff0a 	bl	8005614 <HAL_SPI_Transmit>
	//HAL_Delay(1);

	uint8_t nope = CMD_NOP;
 8001800:	23ff      	movs	r3, #255	; 0xff
 8001802:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_TransmitReceive(get_hspi_from_id(id), &nope, &d1, 2, HAL_MAX_DELAY);
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	4618      	mov	r0, r3
 800180a:	f000 f927 	bl	8001a5c <get_hspi_from_id>
 800180e:	f107 020d 	add.w	r2, r7, #13
 8001812:	f107 010a 	add.w	r1, r7, #10
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	2302      	movs	r3, #2
 800181e:	f004 f997 	bl	8005b50 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(get_hspi_from_id(id), &nope, &d3, 2, HAL_MAX_DELAY);
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	4618      	mov	r0, r3
 8001828:	f000 f918 	bl	8001a5c <get_hspi_from_id>
 800182c:	f107 020c 	add.w	r2, r7, #12
 8001830:	f107 010a 	add.w	r1, r7, #10
 8001834:	f04f 33ff 	mov.w	r3, #4294967295
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2302      	movs	r3, #2
 800183c:	f004 f988 	bl	8005b50 <HAL_SPI_TransmitReceive>
	dR = (d1 << 8) | d3;
 8001840:	7b7b      	ldrb	r3, [r7, #13]
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	b21a      	sxth	r2, r3
 8001846:	7b3b      	ldrb	r3, [r7, #12]
 8001848:	b21b      	sxth	r3, r3
 800184a:	4313      	orrs	r3, r2
 800184c:	b21b      	sxth	r3, r3
 800184e:	81fb      	strh	r3, [r7, #14]
	cs_disable(id);
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fe1d 	bl	8001494 <cs_disable>

	return dR;
 800185a:	89fb      	ldrh	r3, [r7, #14]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	bd90      	pop	{r4, r7, pc}

08001864 <pin_from_id>:
	//cs_disable(id);
	return d1;
}

//
uint16_t pin_from_id(int8_t id) {
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	2b08      	cmp	r3, #8
 8001874:	d82c      	bhi.n	80018d0 <pin_from_id+0x6c>
 8001876:	a201      	add	r2, pc, #4	; (adr r2, 800187c <pin_from_id+0x18>)
 8001878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187c:	080018a1 	.word	0x080018a1
 8001880:	080018a7 	.word	0x080018a7
 8001884:	080018ad 	.word	0x080018ad
 8001888:	080018b3 	.word	0x080018b3
 800188c:	080018b7 	.word	0x080018b7
 8001890:	080018bb 	.word	0x080018bb
 8001894:	080018bf 	.word	0x080018bf
 8001898:	080018c5 	.word	0x080018c5
 800189c:	080018cb 	.word	0x080018cb
	case 0: //DMS 1
		return nCS_DMS1_Pin;
 80018a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a4:	e016      	b.n	80018d4 <pin_from_id+0x70>
	case 1: //DMS 2
		return nCS_DMS2_Pin;
 80018a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018aa:	e013      	b.n	80018d4 <pin_from_id+0x70>
	case 2: //DMS 3
		return nCS_DMS3_Pin;
 80018ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018b0:	e010      	b.n	80018d4 <pin_from_id+0x70>
	case 3: //DMS 4
		return nCS_DMS4_Pin;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00e      	b.n	80018d4 <pin_from_id+0x70>
	case 4: //DMS 5
		return nCS_DMS5_Pin;
 80018b6:	2302      	movs	r3, #2
 80018b8:	e00c      	b.n	80018d4 <pin_from_id+0x70>
	case 5: //DMS 6
		return nCS_DMS6_Pin;
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	e00a      	b.n	80018d4 <pin_from_id+0x70>
	case 6: //PT 1
		return nCS_PT1_Pin;
 80018be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018c2:	e007      	b.n	80018d4 <pin_from_id+0x70>
	case 7: //PT 2
		return nCS_PT2_Pin;
 80018c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018c8:	e004      	b.n	80018d4 <pin_from_id+0x70>
	case 8: //PT 3
		return nCS_PT3_Pin;
 80018ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ce:	e001      	b.n	80018d4 <pin_from_id+0x70>
	default: //DMS 1
		return nCS_DMS1_Pin;
 80018d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	}
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <port_from_id>:

//
GPIO_TypeDef* port_from_id(int8_t id) {
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d826      	bhi.n	8001940 <port_from_id+0x60>
 80018f2:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <port_from_id+0x18>)
 80018f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f8:	0800191d 	.word	0x0800191d
 80018fc:	08001921 	.word	0x08001921
 8001900:	08001925 	.word	0x08001925
 8001904:	08001929 	.word	0x08001929
 8001908:	0800192d 	.word	0x0800192d
 800190c:	08001931 	.word	0x08001931
 8001910:	08001935 	.word	0x08001935
 8001914:	08001939 	.word	0x08001939
 8001918:	0800193d 	.word	0x0800193d
	case 0: //DMS 1
		return nCS_DMS1_GPIO_Port;
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <port_from_id+0x70>)
 800191e:	e010      	b.n	8001942 <port_from_id+0x62>
	case 1: //DMS 2
		return nCS_DMS2_GPIO_Port;
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <port_from_id+0x70>)
 8001922:	e00e      	b.n	8001942 <port_from_id+0x62>
	case 2: //DMS 3
		return nCS_DMS3_GPIO_Port;
 8001924:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <port_from_id+0x70>)
 8001926:	e00c      	b.n	8001942 <port_from_id+0x62>
	case 3: //DMS 4
		return nCS_DMS4_GPIO_Port;
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <port_from_id+0x74>)
 800192a:	e00a      	b.n	8001942 <port_from_id+0x62>
	case 4: //DMS 5
		return nCS_DMS5_GPIO_Port;
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <port_from_id+0x74>)
 800192e:	e008      	b.n	8001942 <port_from_id+0x62>
	case 5: //DMS 6
		return nCS_DMS6_GPIO_Port;
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <port_from_id+0x78>)
 8001932:	e006      	b.n	8001942 <port_from_id+0x62>
	case 6: //PT 1
		return nCS_PT1_GPIO_Port;
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <port_from_id+0x7c>)
 8001936:	e004      	b.n	8001942 <port_from_id+0x62>
	case 7: //PT 2
		return nCS_PT2_GPIO_Port;
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <port_from_id+0x7c>)
 800193a:	e002      	b.n	8001942 <port_from_id+0x62>
	case 8: //PT 3
		return nCS_PT3_GPIO_Port;
 800193c:	4b07      	ldr	r3, [pc, #28]	; (800195c <port_from_id+0x7c>)
 800193e:	e000      	b.n	8001942 <port_from_id+0x62>
	default: //DMS 1
		return nCS_DMS1_GPIO_Port;
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <port_from_id+0x70>)
	}
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40021400 	.word	0x40021400
 8001954:	40021800 	.word	0x40021800
 8001958:	40021000 	.word	0x40021000
 800195c:	40020c00 	.word	0x40020c00

08001960 <pin_drdy_from_id>:

//
uint16_t pin_drdy_from_id(int8_t id) {
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	2b08      	cmp	r3, #8
 8001970:	d82e      	bhi.n	80019d0 <pin_drdy_from_id+0x70>
 8001972:	a201      	add	r2, pc, #4	; (adr r2, 8001978 <pin_drdy_from_id+0x18>)
 8001974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001978:	0800199d 	.word	0x0800199d
 800197c:	080019a1 	.word	0x080019a1
 8001980:	080019a7 	.word	0x080019a7
 8001984:	080019ad 	.word	0x080019ad
 8001988:	080019b3 	.word	0x080019b3
 800198c:	080019b9 	.word	0x080019b9
 8001990:	080019bf 	.word	0x080019bf
 8001994:	080019c5 	.word	0x080019c5
 8001998:	080019cb 	.word	0x080019cb
	case 0: //DMS 1
		return nDRDY_DMS1_Pin;
 800199c:	2310      	movs	r3, #16
 800199e:	e018      	b.n	80019d2 <pin_drdy_from_id+0x72>
	case 1: //DMS 2
		return nDRDY_DMS2_Pin;
 80019a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a4:	e015      	b.n	80019d2 <pin_drdy_from_id+0x72>
	case 2: //DMS 3
		return nDRDY_DMS3_Pin;
 80019a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019aa:	e012      	b.n	80019d2 <pin_drdy_from_id+0x72>
	case 3: //DMS 4
		return nDRDY_DMS4_Pin;
 80019ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019b0:	e00f      	b.n	80019d2 <pin_drdy_from_id+0x72>
	case 4: //DMS 5
		return nDRDY_DMS5_Pin;
 80019b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019b6:	e00c      	b.n	80019d2 <pin_drdy_from_id+0x72>
	case 5: //DMS 6
		return nDRDY_DMS6_Pin;
 80019b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019bc:	e009      	b.n	80019d2 <pin_drdy_from_id+0x72>
	case 6: //PT 1
		return nDRDY_PT1_Pin;
 80019be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019c2:	e006      	b.n	80019d2 <pin_drdy_from_id+0x72>
	case 7: //PT 2
		return nDRDY_PT2_Pin;
 80019c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019c8:	e003      	b.n	80019d2 <pin_drdy_from_id+0x72>
	case 8: //PT 3
		return nDRDY_PT3_Pin;
 80019ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ce:	e000      	b.n	80019d2 <pin_drdy_from_id+0x72>
	default: //DMS 1
		return nDRDY_DMS1_Pin;
 80019d0:	2310      	movs	r3, #16
	}
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop

080019e0 <port_drdy_from_id>:

//
GPIO_TypeDef* port_drdy_from_id(int8_t id) {
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d826      	bhi.n	8001a40 <port_drdy_from_id+0x60>
 80019f2:	a201      	add	r2, pc, #4	; (adr r2, 80019f8 <port_drdy_from_id+0x18>)
 80019f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f8:	08001a1d 	.word	0x08001a1d
 80019fc:	08001a21 	.word	0x08001a21
 8001a00:	08001a25 	.word	0x08001a25
 8001a04:	08001a29 	.word	0x08001a29
 8001a08:	08001a2d 	.word	0x08001a2d
 8001a0c:	08001a31 	.word	0x08001a31
 8001a10:	08001a35 	.word	0x08001a35
 8001a14:	08001a39 	.word	0x08001a39
 8001a18:	08001a3d 	.word	0x08001a3d
	case 0: //DMS 1
		return nDRDY_DMS1_GPIO_Port;
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <port_drdy_from_id+0x70>)
 8001a1e:	e010      	b.n	8001a42 <port_drdy_from_id+0x62>
	case 1: //DMS 2
		return nDRDY_DMS2_GPIO_Port;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <port_drdy_from_id+0x74>)
 8001a22:	e00e      	b.n	8001a42 <port_drdy_from_id+0x62>
	case 2: //DMS 3
		return nDRDY_DMS3_GPIO_Port;
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <port_drdy_from_id+0x74>)
 8001a26:	e00c      	b.n	8001a42 <port_drdy_from_id+0x62>
	case 3: //DMS 4
		return nDRDY_DMS4_GPIO_Port;
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <port_drdy_from_id+0x74>)
 8001a2a:	e00a      	b.n	8001a42 <port_drdy_from_id+0x62>
	case 4: //DMS 5
		return nDRDY_DMS5_GPIO_Port;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <port_drdy_from_id+0x74>)
 8001a2e:	e008      	b.n	8001a42 <port_drdy_from_id+0x62>
	case 5: //DMS 6
		return nDRDY_DMS6_GPIO_Port;
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <port_drdy_from_id+0x74>)
 8001a32:	e006      	b.n	8001a42 <port_drdy_from_id+0x62>
	case 6: //PT 1
		return nDRDY_PT1_GPIO_Port;
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <port_drdy_from_id+0x78>)
 8001a36:	e004      	b.n	8001a42 <port_drdy_from_id+0x62>
	case 7: //PT 2
		return nDRDY_PT2_GPIO_Port;
 8001a38:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <port_drdy_from_id+0x78>)
 8001a3a:	e002      	b.n	8001a42 <port_drdy_from_id+0x62>
	case 8: //PT 3
		return nDRDY_PT3_GPIO_Port;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <port_drdy_from_id+0x78>)
 8001a3e:	e000      	b.n	8001a42 <port_drdy_from_id+0x62>
	default: //DMS 1
		return nDRDY_DMS1_GPIO_Port;
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <port_drdy_from_id+0x70>)
	}
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40021800 	.word	0x40021800
 8001a54:	40020000 	.word	0x40020000
 8001a58:	40022400 	.word	0x40022400

08001a5c <get_hspi_from_id>:

//
SPI_HandleTypeDef* get_hspi_from_id(int8_t id) {
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d826      	bhi.n	8001abc <get_hspi_from_id+0x60>
 8001a6e:	a201      	add	r2, pc, #4	; (adr r2, 8001a74 <get_hspi_from_id+0x18>)
 8001a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a74:	08001a99 	.word	0x08001a99
 8001a78:	08001a9d 	.word	0x08001a9d
 8001a7c:	08001aa1 	.word	0x08001aa1
 8001a80:	08001aa5 	.word	0x08001aa5
 8001a84:	08001aa9 	.word	0x08001aa9
 8001a88:	08001aad 	.word	0x08001aad
 8001a8c:	08001ab1 	.word	0x08001ab1
 8001a90:	08001ab5 	.word	0x08001ab5
 8001a94:	08001ab9 	.word	0x08001ab9
	case 0: //DMS 1
		return &hspi4;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <get_hspi_from_id+0x70>)
 8001a9a:	e010      	b.n	8001abe <get_hspi_from_id+0x62>
	case 1: //DMS 2
		return &hspi4;
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <get_hspi_from_id+0x70>)
 8001a9e:	e00e      	b.n	8001abe <get_hspi_from_id+0x62>
	case 2: //DMS 3
		return &hspi4;
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <get_hspi_from_id+0x70>)
 8001aa2:	e00c      	b.n	8001abe <get_hspi_from_id+0x62>
	case 3: //DMS 4
		return &hspi4;
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <get_hspi_from_id+0x70>)
 8001aa6:	e00a      	b.n	8001abe <get_hspi_from_id+0x62>
	case 4: //DMS 5
		return &hspi4;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <get_hspi_from_id+0x70>)
 8001aaa:	e008      	b.n	8001abe <get_hspi_from_id+0x62>
	case 5: //DMS 6
		return &hspi4;
 8001aac:	4b07      	ldr	r3, [pc, #28]	; (8001acc <get_hspi_from_id+0x70>)
 8001aae:	e006      	b.n	8001abe <get_hspi_from_id+0x62>
	case 6: //PT 1
		return &hspi3;
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <get_hspi_from_id+0x74>)
 8001ab2:	e004      	b.n	8001abe <get_hspi_from_id+0x62>
	case 7: //PT 2
		return &hspi3;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <get_hspi_from_id+0x74>)
 8001ab6:	e002      	b.n	8001abe <get_hspi_from_id+0x62>
	case 8: //PT 3
		return &hspi3;
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <get_hspi_from_id+0x74>)
 8001aba:	e000      	b.n	8001abe <get_hspi_from_id+0x62>
	default: //DMS 1
		return &hspi4;
 8001abc:	4b03      	ldr	r3, [pc, #12]	; (8001acc <get_hspi_from_id+0x70>)
	}
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20000254 	.word	0x20000254
 8001ad0:	200001f0 	.word	0x200001f0

08001ad4 <wr_cmd>:

//
int wr_cmd(int8_t id, uint8_t cmd) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	460a      	mov	r2, r1
 8001ade:	71fb      	strb	r3, [r7, #7]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	71bb      	strb	r3, [r7, #6]
	int8_t status = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	73fb      	strb	r3, [r7, #15]
	//status+= cs_enable(id);
	status += wr_spi(id, cmd);
 8001ae8:	79ba      	ldrb	r2, [r7, #6]
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fced 	bl	80014d0 <wr_spi>
 8001af6:	4603      	mov	r3, r0
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	4413      	add	r3, r2
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD_SYNC) {
 8001b02:	79bb      	ldrb	r3, [r7, #6]
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d10c      	bne.n	8001b22 <wr_cmd+0x4e>
		status += wr_spi(id, cmd);
 8001b08:	79ba      	ldrb	r2, [r7, #6]
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fcdd 	bl	80014d0 <wr_spi>
 8001b16:	4603      	mov	r3, r0
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	73fb      	strb	r3, [r7, #15]
	}
	//status+= cs_disable(id);
	if (cmd == CMD_RESET) {
 8001b22:	79bb      	ldrb	r3, [r7, #6]
 8001b24:	2b06      	cmp	r3, #6
 8001b26:	d103      	bne.n	8001b30 <wr_cmd+0x5c>
		HAL_Delay(1); //1ms
 8001b28:	2001      	movs	r0, #1
 8001b2a:	f000 fe1d 	bl	8002768 <HAL_Delay>
 8001b2e:	e00c      	b.n	8001b4a <wr_cmd+0x76>
	} else if (cmd == CMD_SELFOCAL) {
 8001b30:	79bb      	ldrb	r3, [r7, #6]
 8001b32:	2b62      	cmp	r3, #98	; 0x62
 8001b34:	d103      	bne.n	8001b3e <wr_cmd+0x6a>
		HAL_Delay(10); //10ms
 8001b36:	200a      	movs	r0, #10
 8001b38:	f000 fe16 	bl	8002768 <HAL_Delay>
 8001b3c:	e005      	b.n	8001b4a <wr_cmd+0x76>
	} else if (cmd == CMD_SDATAC) {
 8001b3e:	79bb      	ldrb	r3, [r7, #6]
 8001b40:	2b16      	cmp	r3, #22
 8001b42:	d102      	bne.n	8001b4a <wr_cmd+0x76>
		HAL_Delay(1); //1ms
 8001b44:	2001      	movs	r0, #1
 8001b46:	f000 fe0f 	bl	8002768 <HAL_Delay>
	}
	return 0;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <wr_reg>:

int wr_reg(int8_t id, uint8_t reg, uint8_t data) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	71bb      	strb	r3, [r7, #6]
 8001b62:	4613      	mov	r3, r2
 8001b64:	717b      	strb	r3, [r7, #5]
	int8_t status = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, CMD_WREG | reg);
 8001b6a:	79bb      	ldrb	r3, [r7, #6]
 8001b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fca9 	bl	80014d0 <wr_spi>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	4413      	add	r3, r2
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, 0);
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fc9d 	bl	80014d0 <wr_spi>
 8001b96:	4603      	mov	r3, r0
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, data);
 8001ba2:	797a      	ldrb	r2, [r7, #5]
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	4611      	mov	r1, r2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fc90 	bl	80014d0 <wr_spi>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	73fb      	strb	r3, [r7, #15]
	return 0;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <write_EXP>:
	data = rd_spi(id);
	//status += cs_disable(id);
	return data;
}

int write_EXP(uint8_t *dout) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart8, &dout, sizeof(dout), HAL_MAX_DELAY);
 8001bd0:	1d39      	adds	r1, r7, #4
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	4803      	ldr	r0, [pc, #12]	; (8001be8 <write_EXP+0x20>)
 8001bda:	f004 fd2b 	bl	8006634 <HAL_UART_Transmit>
	return 0;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000338 	.word	0x20000338

08001bec <write_DAPI>:

int write_DAPI(uint8_t *dout) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, &dout, sizeof(dout), HAL_MAX_DELAY);
 8001bf4:	1d39      	adds	r1, r7, #4
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	4803      	ldr	r0, [pc, #12]	; (8001c0c <write_DAPI+0x20>)
 8001bfe:	f004 fd19 	bl	8006634 <HAL_UART_Transmit>
	return 0;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	200003b8 	.word	0x200003b8

08001c10 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <assert_failed>:
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line) {
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi5;
SPI_HandleTypeDef hspi6;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001c38:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <MX_SPI2_Init+0x74>)
 8001c3a:	4a1c      	ldr	r2, [pc, #112]	; (8001cac <MX_SPI2_Init+0x78>)
 8001c3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <MX_SPI2_Init+0x74>)
 8001c40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c46:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <MX_SPI2_Init+0x74>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c4c:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <MX_SPI2_Init+0x74>)
 8001c4e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c52:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c54:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <MX_SPI2_Init+0x74>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <MX_SPI2_Init+0x74>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <MX_SPI2_Init+0x74>)
 8001c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c66:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c68:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <MX_SPI2_Init+0x74>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <MX_SPI2_Init+0x74>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <MX_SPI2_Init+0x74>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <MX_SPI2_Init+0x74>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <MX_SPI2_Init+0x74>)
 8001c82:	2207      	movs	r2, #7
 8001c84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <MX_SPI2_Init+0x74>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <MX_SPI2_Init+0x74>)
 8001c8e:	2208      	movs	r2, #8
 8001c90:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c92:	4805      	ldr	r0, [pc, #20]	; (8001ca8 <MX_SPI2_Init+0x74>)
 8001c94:	f003 fb16 	bl	80052c4 <HAL_SPI_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001c9e:	f7ff ffb7 	bl	8001c10 <Error_Handler>
  }

}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200000c4 	.word	0x200000c4
 8001cac:	40003800 	.word	0x40003800

08001cb0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <MX_SPI3_Init+0x74>)
 8001cb6:	4a1c      	ldr	r2, [pc, #112]	; (8001d28 <MX_SPI3_Init+0x78>)
 8001cb8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001cba:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <MX_SPI3_Init+0x74>)
 8001cbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cc0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001cc2:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <MX_SPI3_Init+0x74>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cc8:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <MX_SPI3_Init+0x74>)
 8001cca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001cce:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cd0:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <MX_SPI3_Init+0x74>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cd6:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <MX_SPI3_Init+0x74>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <MX_SPI3_Init+0x74>)
 8001cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ce2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <MX_SPI3_Init+0x74>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <MX_SPI3_Init+0x74>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <MX_SPI3_Init+0x74>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <MX_SPI3_Init+0x74>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <MX_SPI3_Init+0x74>)
 8001cfe:	2207      	movs	r2, #7
 8001d00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d02:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <MX_SPI3_Init+0x74>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <MX_SPI3_Init+0x74>)
 8001d0a:	2208      	movs	r2, #8
 8001d0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d0e:	4805      	ldr	r0, [pc, #20]	; (8001d24 <MX_SPI3_Init+0x74>)
 8001d10:	f003 fad8 	bl	80052c4 <HAL_SPI_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001d1a:	f7ff ff79 	bl	8001c10 <Error_Handler>
  }

}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200001f0 	.word	0x200001f0
 8001d28:	40003c00 	.word	0x40003c00

08001d2c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8001d30:	4b1b      	ldr	r3, [pc, #108]	; (8001da0 <MX_SPI4_Init+0x74>)
 8001d32:	4a1c      	ldr	r2, [pc, #112]	; (8001da4 <MX_SPI4_Init+0x78>)
 8001d34:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001d36:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <MX_SPI4_Init+0x74>)
 8001d38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d3c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001d3e:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <MX_SPI4_Init+0x74>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d44:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <MX_SPI4_Init+0x74>)
 8001d46:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d4a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <MX_SPI4_Init+0x74>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d52:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <MX_SPI4_Init+0x74>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <MX_SPI4_Init+0x74>)
 8001d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d5e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <MX_SPI4_Init+0x74>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <MX_SPI4_Init+0x74>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <MX_SPI4_Init+0x74>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <MX_SPI4_Init+0x74>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001d78:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <MX_SPI4_Init+0x74>)
 8001d7a:	2207      	movs	r2, #7
 8001d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <MX_SPI4_Init+0x74>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <MX_SPI4_Init+0x74>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001d8a:	4805      	ldr	r0, [pc, #20]	; (8001da0 <MX_SPI4_Init+0x74>)
 8001d8c:	f003 fa9a 	bl	80052c4 <HAL_SPI_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001d96:	f7ff ff3b 	bl	8001c10 <Error_Handler>
  }

}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000254 	.word	0x20000254
 8001da4:	40013400 	.word	0x40013400

08001da8 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001dac:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <MX_SPI5_Init+0x74>)
 8001dae:	4a1c      	ldr	r2, [pc, #112]	; (8001e20 <MX_SPI5_Init+0x78>)
 8001db0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001db2:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <MX_SPI5_Init+0x74>)
 8001db4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001db8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001dba:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <MX_SPI5_Init+0x74>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8001dc0:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <MX_SPI5_Init+0x74>)
 8001dc2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001dc6:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dc8:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <MX_SPI5_Init+0x74>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dce:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <MX_SPI5_Init+0x74>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <MX_SPI5_Init+0x74>)
 8001dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dda:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <MX_SPI5_Init+0x74>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001de2:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <MX_SPI5_Init+0x74>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <MX_SPI5_Init+0x74>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dee:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <MX_SPI5_Init+0x74>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001df4:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <MX_SPI5_Init+0x74>)
 8001df6:	2207      	movs	r2, #7
 8001df8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <MX_SPI5_Init+0x74>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <MX_SPI5_Init+0x74>)
 8001e02:	2208      	movs	r2, #8
 8001e04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001e06:	4805      	ldr	r0, [pc, #20]	; (8001e1c <MX_SPI5_Init+0x74>)
 8001e08:	f003 fa5c 	bl	80052c4 <HAL_SPI_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001e12:	f7ff fefd 	bl	8001c10 <Error_Handler>
  }

}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000128 	.word	0x20000128
 8001e20:	40015000 	.word	0x40015000

08001e24 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
 8001e28:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <MX_SPI6_Init+0x74>)
 8001e2a:	4a1c      	ldr	r2, [pc, #112]	; (8001e9c <MX_SPI6_Init+0x78>)
 8001e2c:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <MX_SPI6_Init+0x74>)
 8001e30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e34:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8001e36:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <MX_SPI6_Init+0x74>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e3c:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <MX_SPI6_Init+0x74>)
 8001e3e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e42:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e44:	4b14      	ldr	r3, [pc, #80]	; (8001e98 <MX_SPI6_Init+0x74>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e4a:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <MX_SPI6_Init+0x74>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <MX_SPI6_Init+0x74>)
 8001e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e56:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e58:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <MX_SPI6_Init+0x74>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <MX_SPI6_Init+0x74>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <MX_SPI6_Init+0x74>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <MX_SPI6_Init+0x74>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <MX_SPI6_Init+0x74>)
 8001e72:	2207      	movs	r2, #7
 8001e74:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e76:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <MX_SPI6_Init+0x74>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <MX_SPI6_Init+0x74>)
 8001e7e:	2208      	movs	r2, #8
 8001e80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8001e82:	4805      	ldr	r0, [pc, #20]	; (8001e98 <MX_SPI6_Init+0x74>)
 8001e84:	f003 fa1e 	bl	80052c4 <HAL_SPI_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_SPI6_Init+0x6e>
  {
    Error_Handler();
 8001e8e:	f7ff febf 	bl	8001c10 <Error_Handler>
  }

}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000018c 	.word	0x2000018c
 8001e9c:	40015400 	.word	0x40015400

08001ea0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b092      	sub	sp, #72	; 0x48
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a8e      	ldr	r2, [pc, #568]	; (80020f8 <HAL_SPI_MspInit+0x258>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d131      	bne.n	8001f26 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ec2:	4b8e      	ldr	r3, [pc, #568]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	4a8d      	ldr	r2, [pc, #564]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8001ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ece:	4b8b      	ldr	r3, [pc, #556]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
 8001ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eda:	4b88      	ldr	r3, [pc, #544]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a87      	ldr	r2, [pc, #540]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8001ee0:	f043 0302 	orr.w	r3, r3, #2
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b85      	ldr	r3, [pc, #532]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001ef2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ef6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f00:	2303      	movs	r3, #3
 8001f02:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f04:	2305      	movs	r3, #5
 8001f06:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	487c      	ldr	r0, [pc, #496]	; (8002100 <HAL_SPI_MspInit+0x260>)
 8001f10:	f000 fefe 	bl	8002d10 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 6, 0);
 8001f14:	2200      	movs	r2, #0
 8001f16:	2106      	movs	r1, #6
 8001f18:	2024      	movs	r0, #36	; 0x24
 8001f1a:	f000 fd37 	bl	800298c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001f1e:	2024      	movs	r0, #36	; 0x24
 8001f20:	f000 fd60 	bl	80029e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8001f24:	e0e4      	b.n	80020f0 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI3)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a76      	ldr	r2, [pc, #472]	; (8002104 <HAL_SPI_MspInit+0x264>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d145      	bne.n	8001fbc <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f30:	4b72      	ldr	r3, [pc, #456]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	4a71      	ldr	r2, [pc, #452]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8001f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3c:	4b6f      	ldr	r3, [pc, #444]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f48:	4b6c      	ldr	r3, [pc, #432]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	4a6b      	ldr	r2, [pc, #428]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8001f4e:	f043 0302 	orr.w	r3, r3, #2
 8001f52:	6313      	str	r3, [r2, #48]	; 0x30
 8001f54:	4b69      	ldr	r3, [pc, #420]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8001f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f60:	4b66      	ldr	r3, [pc, #408]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	4a65      	ldr	r2, [pc, #404]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8001f66:	f043 0304 	orr.w	r3, r3, #4
 8001f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6c:	4b63      	ldr	r3, [pc, #396]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	623b      	str	r3, [r7, #32]
 8001f76:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f78:	2304      	movs	r3, #4
 8001f7a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f84:	2303      	movs	r3, #3
 8001f86:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001f88:	2307      	movs	r3, #7
 8001f8a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f90:	4619      	mov	r1, r3
 8001f92:	485b      	ldr	r0, [pc, #364]	; (8002100 <HAL_SPI_MspInit+0x260>)
 8001f94:	f000 febc 	bl	8002d10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f98:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f9c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001faa:	2306      	movs	r3, #6
 8001fac:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4854      	ldr	r0, [pc, #336]	; (8002108 <HAL_SPI_MspInit+0x268>)
 8001fb6:	f000 feab 	bl	8002d10 <HAL_GPIO_Init>
}
 8001fba:	e099      	b.n	80020f0 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI4)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a52      	ldr	r2, [pc, #328]	; (800210c <HAL_SPI_MspInit+0x26c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d130      	bne.n	8002028 <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001fc6:	4b4d      	ldr	r3, [pc, #308]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	4a4c      	ldr	r2, [pc, #304]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8001fcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd2:	4b4a      	ldr	r3, [pc, #296]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fda:	61fb      	str	r3, [r7, #28]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fde:	4b47      	ldr	r3, [pc, #284]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a46      	ldr	r2, [pc, #280]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8001fe4:	f043 0310 	orr.w	r3, r3, #16
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b44      	ldr	r3, [pc, #272]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	61bb      	str	r3, [r7, #24]
 8001ff4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001ff6:	2364      	movs	r3, #100	; 0x64
 8001ff8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002002:	2303      	movs	r3, #3
 8002004:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002006:	2305      	movs	r3, #5
 8002008:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800200a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800200e:	4619      	mov	r1, r3
 8002010:	483f      	ldr	r0, [pc, #252]	; (8002110 <HAL_SPI_MspInit+0x270>)
 8002012:	f000 fe7d 	bl	8002d10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 6, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	2106      	movs	r1, #6
 800201a:	2054      	movs	r0, #84	; 0x54
 800201c:	f000 fcb6 	bl	800298c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002020:	2054      	movs	r0, #84	; 0x54
 8002022:	f000 fcdf 	bl	80029e4 <HAL_NVIC_EnableIRQ>
}
 8002026:	e063      	b.n	80020f0 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI5)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a39      	ldr	r2, [pc, #228]	; (8002114 <HAL_SPI_MspInit+0x274>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d129      	bne.n	8002086 <HAL_SPI_MspInit+0x1e6>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002032:	4b32      	ldr	r3, [pc, #200]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	4a31      	ldr	r2, [pc, #196]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8002038:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800203c:	6453      	str	r3, [r2, #68]	; 0x44
 800203e:	4b2f      	ldr	r3, [pc, #188]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800204a:	4b2c      	ldr	r3, [pc, #176]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a2b      	ldr	r2, [pc, #172]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8002050:	f043 0320 	orr.w	r3, r3, #32
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b29      	ldr	r3, [pc, #164]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002062:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002066:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002074:	2305      	movs	r3, #5
 8002076:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002078:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800207c:	4619      	mov	r1, r3
 800207e:	4826      	ldr	r0, [pc, #152]	; (8002118 <HAL_SPI_MspInit+0x278>)
 8002080:	f000 fe46 	bl	8002d10 <HAL_GPIO_Init>
}
 8002084:	e034      	b.n	80020f0 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI6)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a24      	ldr	r2, [pc, #144]	; (800211c <HAL_SPI_MspInit+0x27c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d12f      	bne.n	80020f0 <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8002090:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8002092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002094:	4a19      	ldr	r2, [pc, #100]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 8002096:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800209a:	6453      	str	r3, [r2, #68]	; 0x44
 800209c:	4b17      	ldr	r3, [pc, #92]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 800209e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a8:	4b14      	ldr	r3, [pc, #80]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	4a13      	ldr	r2, [pc, #76]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6313      	str	r3, [r2, #48]	; 0x30
 80020b4:	4b11      	ldr	r3, [pc, #68]	; (80020fc <HAL_SPI_MspInit+0x25c>)
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80020c0:	23e0      	movs	r3, #224	; 0xe0
 80020c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020cc:	2303      	movs	r3, #3
 80020ce:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 80020d0:	2308      	movs	r3, #8
 80020d2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020d8:	4619      	mov	r1, r3
 80020da:	4811      	ldr	r0, [pc, #68]	; (8002120 <HAL_SPI_MspInit+0x280>)
 80020dc:	f000 fe18 	bl	8002d10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 6, 0);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2106      	movs	r1, #6
 80020e4:	2056      	movs	r0, #86	; 0x56
 80020e6:	f000 fc51 	bl	800298c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 80020ea:	2056      	movs	r0, #86	; 0x56
 80020ec:	f000 fc7a 	bl	80029e4 <HAL_NVIC_EnableIRQ>
}
 80020f0:	bf00      	nop
 80020f2:	3748      	adds	r7, #72	; 0x48
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40003800 	.word	0x40003800
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020400 	.word	0x40020400
 8002104:	40003c00 	.word	0x40003c00
 8002108:	40020800 	.word	0x40020800
 800210c:	40013400 	.word	0x40013400
 8002110:	40021000 	.word	0x40021000
 8002114:	40015000 	.word	0x40015000
 8002118:	40021400 	.word	0x40021400
 800211c:	40015400 	.word	0x40015400
 8002120:	40020000 	.word	0x40020000

08002124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800212a:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <HAL_MspInit+0x44>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	4a0e      	ldr	r2, [pc, #56]	; (8002168 <HAL_MspInit+0x44>)
 8002130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002134:	6413      	str	r3, [r2, #64]	; 0x40
 8002136:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <HAL_MspInit+0x44>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <HAL_MspInit+0x44>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	4a08      	ldr	r2, [pc, #32]	; (8002168 <HAL_MspInit+0x44>)
 8002148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800214c:	6453      	str	r3, [r2, #68]	; 0x44
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_MspInit+0x44>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800

0800216c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800217e:	e7fe      	b.n	800217e <HardFault_Handler+0x4>

08002180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002184:	e7fe      	b.n	8002184 <MemManage_Handler+0x4>

08002186 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800218a:	e7fe      	b.n	800218a <BusFault_Handler+0x4>

0800218c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002190:	e7fe      	b.n	8002190 <UsageFault_Handler+0x4>

08002192 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80021c0:	2010      	movs	r0, #16
 80021c2:	f001 f9a1 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}

080021ca <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80021ce:	2020      	movs	r0, #32
 80021d0:	f001 f99a 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80021d4:	2040      	movs	r0, #64	; 0x40
 80021d6:	f001 f997 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80021da:	2080      	movs	r0, #128	; 0x80
 80021dc:	f001 f994 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80021e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80021e4:	f001 f990 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80021e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80021ec:	f001 f98c 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <SPI2_IRQHandler+0x10>)
 80021fa:	f003 fec7 	bl	8005f8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200000c4 	.word	0x200000c4

08002208 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800220c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002210:	f001 f97a 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002214:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002218:	f001 f976 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800221c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002220:	f001 f972 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002224:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002228:	f001 f96e 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800222c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002230:	f001 f96a 	bl	8003508 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002234:	bf00      	nop
 8002236:	bd80      	pop	{r7, pc}

08002238 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800223c:	4802      	ldr	r0, [pc, #8]	; (8002248 <UART4_IRQHandler+0x10>)
 800223e:	f004 fb57 	bl	80068f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	200003b8 	.word	0x200003b8

0800224c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002250:	4802      	ldr	r0, [pc, #8]	; (800225c <UART5_IRQHandler+0x10>)
 8002252:	f004 fb4d 	bl	80068f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	200002b8 	.word	0x200002b8

08002260 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8002264:	4802      	ldr	r0, [pc, #8]	; (8002270 <UART8_IRQHandler+0x10>)
 8002266:	f004 fb43 	bl	80068f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000338 	.word	0x20000338

08002274 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002278:	4802      	ldr	r0, [pc, #8]	; (8002284 <SPI4_IRQHandler+0x10>)
 800227a:	f003 fe87 	bl	8005f8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000254 	.word	0x20000254

08002288 <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 800228c:	4802      	ldr	r0, [pc, #8]	; (8002298 <SPI6_IRQHandler+0x10>)
 800228e:	f003 fe7d 	bl	8005f8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	2000018c 	.word	0x2000018c

0800229c <SysTick_Handler>:

/* USER CODE BEGIN 1 */
void SysTick_Handler(void) {
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80022a0:	f000 fa42 	bl	8002728 <HAL_IncTick>
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022b0:	4a14      	ldr	r2, [pc, #80]	; (8002304 <_sbrk+0x5c>)
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <_sbrk+0x60>)
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022bc:	4b13      	ldr	r3, [pc, #76]	; (800230c <_sbrk+0x64>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d102      	bne.n	80022ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <_sbrk+0x64>)
 80022c6:	4a12      	ldr	r2, [pc, #72]	; (8002310 <_sbrk+0x68>)
 80022c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <_sbrk+0x64>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d207      	bcs.n	80022e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022d8:	f005 fa0e 	bl	80076f8 <__errno>
 80022dc:	4602      	mov	r2, r0
 80022de:	230c      	movs	r3, #12
 80022e0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80022e2:	f04f 33ff 	mov.w	r3, #4294967295
 80022e6:	e009      	b.n	80022fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022e8:	4b08      	ldr	r3, [pc, #32]	; (800230c <_sbrk+0x64>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ee:	4b07      	ldr	r3, [pc, #28]	; (800230c <_sbrk+0x64>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	4a05      	ldr	r2, [pc, #20]	; (800230c <_sbrk+0x64>)
 80022f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022fa:	68fb      	ldr	r3, [r7, #12]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20080000 	.word	0x20080000
 8002308:	00000400 	.word	0x00000400
 800230c:	20000090 	.word	0x20000090
 8002310:	20000440 	.word	0x20000440

08002314 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <SystemInit+0x28>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231e:	4a07      	ldr	r2, [pc, #28]	; (800233c <SystemInit+0x28>)
 8002320:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002324:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002328:	4b04      	ldr	r3, [pc, #16]	; (800233c <SystemInit+0x28>)
 800232a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800232e:	609a      	str	r2, [r3, #8]
#endif
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart8;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8002344:	4b14      	ldr	r3, [pc, #80]	; (8002398 <MX_UART4_Init+0x58>)
 8002346:	4a15      	ldr	r2, [pc, #84]	; (800239c <MX_UART4_Init+0x5c>)
 8002348:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800234a:	4b13      	ldr	r3, [pc, #76]	; (8002398 <MX_UART4_Init+0x58>)
 800234c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002350:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002352:	4b11      	ldr	r3, [pc, #68]	; (8002398 <MX_UART4_Init+0x58>)
 8002354:	2200      	movs	r2, #0
 8002356:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002358:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <MX_UART4_Init+0x58>)
 800235a:	2200      	movs	r2, #0
 800235c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <MX_UART4_Init+0x58>)
 8002360:	2200      	movs	r2, #0
 8002362:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <MX_UART4_Init+0x58>)
 8002366:	220c      	movs	r2, #12
 8002368:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <MX_UART4_Init+0x58>)
 800236c:	2200      	movs	r2, #0
 800236e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <MX_UART4_Init+0x58>)
 8002372:	2200      	movs	r2, #0
 8002374:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <MX_UART4_Init+0x58>)
 8002378:	2200      	movs	r2, #0
 800237a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <MX_UART4_Init+0x58>)
 800237e:	2200      	movs	r2, #0
 8002380:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002382:	4805      	ldr	r0, [pc, #20]	; (8002398 <MX_UART4_Init+0x58>)
 8002384:	f004 f896 	bl	80064b4 <HAL_UART_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800238e:	f7ff fc3f 	bl	8001c10 <Error_Handler>
  }

}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	200003b8 	.word	0x200003b8
 800239c:	40004c00 	.word	0x40004c00

080023a0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 80023a4:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <MX_UART5_Init+0x58>)
 80023a6:	4a15      	ldr	r2, [pc, #84]	; (80023fc <MX_UART5_Init+0x5c>)
 80023a8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80023aa:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <MX_UART5_Init+0x58>)
 80023ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023b0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80023b2:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <MX_UART5_Init+0x58>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <MX_UART5_Init+0x58>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80023be:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <MX_UART5_Init+0x58>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <MX_UART5_Init+0x58>)
 80023c6:	220c      	movs	r2, #12
 80023c8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <MX_UART5_Init+0x58>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d0:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <MX_UART5_Init+0x58>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <MX_UART5_Init+0x58>)
 80023d8:	2200      	movs	r2, #0
 80023da:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <MX_UART5_Init+0x58>)
 80023de:	2200      	movs	r2, #0
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80023e2:	4805      	ldr	r0, [pc, #20]	; (80023f8 <MX_UART5_Init+0x58>)
 80023e4:	f004 f866 	bl	80064b4 <HAL_UART_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80023ee:	f7ff fc0f 	bl	8001c10 <Error_Handler>
  }

}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200002b8 	.word	0x200002b8
 80023fc:	40005000 	.word	0x40005000

08002400 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 8002404:	4b14      	ldr	r3, [pc, #80]	; (8002458 <MX_UART8_Init+0x58>)
 8002406:	4a15      	ldr	r2, [pc, #84]	; (800245c <MX_UART8_Init+0x5c>)
 8002408:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 30000;
 800240a:	4b13      	ldr	r3, [pc, #76]	; (8002458 <MX_UART8_Init+0x58>)
 800240c:	f247 5230 	movw	r2, #30000	; 0x7530
 8002410:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002412:	4b11      	ldr	r3, [pc, #68]	; (8002458 <MX_UART8_Init+0x58>)
 8002414:	2200      	movs	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002418:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <MX_UART8_Init+0x58>)
 800241a:	2200      	movs	r2, #0
 800241c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800241e:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <MX_UART8_Init+0x58>)
 8002420:	2200      	movs	r2, #0
 8002422:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <MX_UART8_Init+0x58>)
 8002426:	220c      	movs	r2, #12
 8002428:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800242a:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <MX_UART8_Init+0x58>)
 800242c:	2200      	movs	r2, #0
 800242e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002430:	4b09      	ldr	r3, [pc, #36]	; (8002458 <MX_UART8_Init+0x58>)
 8002432:	2200      	movs	r2, #0
 8002434:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002436:	4b08      	ldr	r3, [pc, #32]	; (8002458 <MX_UART8_Init+0x58>)
 8002438:	2200      	movs	r2, #0
 800243a:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <MX_UART8_Init+0x58>)
 800243e:	2200      	movs	r2, #0
 8002440:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002442:	4805      	ldr	r0, [pc, #20]	; (8002458 <MX_UART8_Init+0x58>)
 8002444:	f004 f836 	bl	80064b4 <HAL_UART_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_UART8_Init+0x52>
  {
    Error_Handler();
 800244e:	f7ff fbdf 	bl	8001c10 <Error_Handler>
  }

}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000338 	.word	0x20000338
 800245c:	40007c00 	.word	0x40007c00

08002460 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b090      	sub	sp, #64	; 0x40
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a6e      	ldr	r2, [pc, #440]	; (8002638 <HAL_UART_MspInit+0x1d8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d14d      	bne.n	800251e <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002482:	4b6e      	ldr	r3, [pc, #440]	; (800263c <HAL_UART_MspInit+0x1dc>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	4a6d      	ldr	r2, [pc, #436]	; (800263c <HAL_UART_MspInit+0x1dc>)
 8002488:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800248c:	6413      	str	r3, [r2, #64]	; 0x40
 800248e:	4b6b      	ldr	r3, [pc, #428]	; (800263c <HAL_UART_MspInit+0x1dc>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28
 8002498:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800249a:	4b68      	ldr	r3, [pc, #416]	; (800263c <HAL_UART_MspInit+0x1dc>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	4a67      	ldr	r2, [pc, #412]	; (800263c <HAL_UART_MspInit+0x1dc>)
 80024a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a4:	6313      	str	r3, [r2, #48]	; 0x30
 80024a6:	4b65      	ldr	r3, [pc, #404]	; (800263c <HAL_UART_MspInit+0x1dc>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b2:	4b62      	ldr	r3, [pc, #392]	; (800263c <HAL_UART_MspInit+0x1dc>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a61      	ldr	r2, [pc, #388]	; (800263c <HAL_UART_MspInit+0x1dc>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b5f      	ldr	r3, [pc, #380]	; (800263c <HAL_UART_MspInit+0x1dc>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	623b      	str	r3, [r7, #32]
 80024c8:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PI9     ------> UART4_RX
    PA0/WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = DAPI_RX_Pin;
 80024ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d0:	2302      	movs	r3, #2
 80024d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d8:	2303      	movs	r3, #3
 80024da:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80024dc:	2308      	movs	r3, #8
 80024de:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(DAPI_RX_GPIO_Port, &GPIO_InitStruct);
 80024e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024e4:	4619      	mov	r1, r3
 80024e6:	4856      	ldr	r0, [pc, #344]	; (8002640 <HAL_UART_MspInit+0x1e0>)
 80024e8:	f000 fc12 	bl	8002d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DAPI_TX_Pin;
 80024ec:	2301      	movs	r3, #1
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f0:	2302      	movs	r3, #2
 80024f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f8:	2303      	movs	r3, #3
 80024fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80024fc:	2308      	movs	r3, #8
 80024fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(DAPI_TX_GPIO_Port, &GPIO_InitStruct);
 8002500:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002504:	4619      	mov	r1, r3
 8002506:	484f      	ldr	r0, [pc, #316]	; (8002644 <HAL_UART_MspInit+0x1e4>)
 8002508:	f000 fc02 	bl	8002d10 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 800250c:	2200      	movs	r2, #0
 800250e:	2106      	movs	r1, #6
 8002510:	2034      	movs	r0, #52	; 0x34
 8002512:	f000 fa3b 	bl	800298c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002516:	2034      	movs	r0, #52	; 0x34
 8002518:	f000 fa64 	bl	80029e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 800251c:	e087      	b.n	800262e <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==UART5)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a49      	ldr	r2, [pc, #292]	; (8002648 <HAL_UART_MspInit+0x1e8>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d14d      	bne.n	80025c4 <HAL_UART_MspInit+0x164>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002528:	4b44      	ldr	r3, [pc, #272]	; (800263c <HAL_UART_MspInit+0x1dc>)
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	4a43      	ldr	r2, [pc, #268]	; (800263c <HAL_UART_MspInit+0x1dc>)
 800252e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002532:	6413      	str	r3, [r2, #64]	; 0x40
 8002534:	4b41      	ldr	r3, [pc, #260]	; (800263c <HAL_UART_MspInit+0x1dc>)
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002540:	4b3e      	ldr	r3, [pc, #248]	; (800263c <HAL_UART_MspInit+0x1dc>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	4a3d      	ldr	r2, [pc, #244]	; (800263c <HAL_UART_MspInit+0x1dc>)
 8002546:	f043 0304 	orr.w	r3, r3, #4
 800254a:	6313      	str	r3, [r2, #48]	; 0x30
 800254c:	4b3b      	ldr	r3, [pc, #236]	; (800263c <HAL_UART_MspInit+0x1dc>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002558:	4b38      	ldr	r3, [pc, #224]	; (800263c <HAL_UART_MspInit+0x1dc>)
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	4a37      	ldr	r2, [pc, #220]	; (800263c <HAL_UART_MspInit+0x1dc>)
 800255e:	f043 0308 	orr.w	r3, r3, #8
 8002562:	6313      	str	r3, [r2, #48]	; 0x30
 8002564:	4b35      	ldr	r3, [pc, #212]	; (800263c <HAL_UART_MspInit+0x1dc>)
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = INTERSPU_TX_Pin;
 8002570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002576:	2302      	movs	r3, #2
 8002578:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257e:	2303      	movs	r3, #3
 8002580:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002582:	2308      	movs	r3, #8
 8002584:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(INTERSPU_TX_GPIO_Port, &GPIO_InitStruct);
 8002586:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800258a:	4619      	mov	r1, r3
 800258c:	482f      	ldr	r0, [pc, #188]	; (800264c <HAL_UART_MspInit+0x1ec>)
 800258e:	f000 fbbf 	bl	8002d10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = INTERSPU_RX_Pin;
 8002592:	2304      	movs	r3, #4
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002596:	2302      	movs	r3, #2
 8002598:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259e:	2303      	movs	r3, #3
 80025a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80025a2:	2308      	movs	r3, #8
 80025a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(INTERSPU_RX_GPIO_Port, &GPIO_InitStruct);
 80025a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025aa:	4619      	mov	r1, r3
 80025ac:	4828      	ldr	r0, [pc, #160]	; (8002650 <HAL_UART_MspInit+0x1f0>)
 80025ae:	f000 fbaf 	bl	8002d10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 6, 0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2106      	movs	r1, #6
 80025b6:	2035      	movs	r0, #53	; 0x35
 80025b8:	f000 f9e8 	bl	800298c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80025bc:	2035      	movs	r0, #53	; 0x35
 80025be:	f000 fa11 	bl	80029e4 <HAL_NVIC_EnableIRQ>
}
 80025c2:	e034      	b.n	800262e <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==UART8)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a22      	ldr	r2, [pc, #136]	; (8002654 <HAL_UART_MspInit+0x1f4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d12f      	bne.n	800262e <HAL_UART_MspInit+0x1ce>
    __HAL_RCC_UART8_CLK_ENABLE();
 80025ce:	4b1b      	ldr	r3, [pc, #108]	; (800263c <HAL_UART_MspInit+0x1dc>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	4a1a      	ldr	r2, [pc, #104]	; (800263c <HAL_UART_MspInit+0x1dc>)
 80025d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025d8:	6413      	str	r3, [r2, #64]	; 0x40
 80025da:	4b18      	ldr	r3, [pc, #96]	; (800263c <HAL_UART_MspInit+0x1dc>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_UART_MspInit+0x1dc>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	4a14      	ldr	r2, [pc, #80]	; (800263c <HAL_UART_MspInit+0x1dc>)
 80025ec:	f043 0310 	orr.w	r3, r3, #16
 80025f0:	6313      	str	r3, [r2, #48]	; 0x30
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_UART_MspInit+0x1dc>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f003 0310 	and.w	r3, r3, #16
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EXP_IN_Pin|EXP_OUT_Pin;
 80025fe:	2303      	movs	r3, #3
 8002600:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260a:	2303      	movs	r3, #3
 800260c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800260e:	2308      	movs	r3, #8
 8002610:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002612:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002616:	4619      	mov	r1, r3
 8002618:	480f      	ldr	r0, [pc, #60]	; (8002658 <HAL_UART_MspInit+0x1f8>)
 800261a:	f000 fb79 	bl	8002d10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 6, 0);
 800261e:	2200      	movs	r2, #0
 8002620:	2106      	movs	r1, #6
 8002622:	2053      	movs	r0, #83	; 0x53
 8002624:	f000 f9b2 	bl	800298c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002628:	2053      	movs	r0, #83	; 0x53
 800262a:	f000 f9db 	bl	80029e4 <HAL_NVIC_EnableIRQ>
}
 800262e:	bf00      	nop
 8002630:	3740      	adds	r7, #64	; 0x40
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40004c00 	.word	0x40004c00
 800263c:	40023800 	.word	0x40023800
 8002640:	40022000 	.word	0x40022000
 8002644:	40020000 	.word	0x40020000
 8002648:	40005000 	.word	0x40005000
 800264c:	40020800 	.word	0x40020800
 8002650:	40020c00 	.word	0x40020c00
 8002654:	40007c00 	.word	0x40007c00
 8002658:	40021000 	.word	0x40021000

0800265c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800265c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002694 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002660:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002662:	e003      	b.n	800266c <LoopCopyDataInit>

08002664 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002666:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002668:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800266a:	3104      	adds	r1, #4

0800266c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800266c:	480b      	ldr	r0, [pc, #44]	; (800269c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800266e:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002670:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002672:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002674:	d3f6      	bcc.n	8002664 <CopyDataInit>
  ldr  r2, =_sbss
 8002676:	4a0b      	ldr	r2, [pc, #44]	; (80026a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002678:	e002      	b.n	8002680 <LoopFillZerobss>

0800267a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800267a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800267c:	f842 3b04 	str.w	r3, [r2], #4

08002680 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002682:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002684:	d3f9      	bcc.n	800267a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002686:	f7ff fe45 	bl	8002314 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800268a:	f005 f83b 	bl	8007704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800268e:	f7fe fce1 	bl	8001054 <main>
  bx  lr    
 8002692:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002694:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002698:	080081d8 	.word	0x080081d8
  ldr  r0, =_sdata
 800269c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80026a0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80026a4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80026a8:	20000440 	.word	0x20000440

080026ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026ac:	e7fe      	b.n	80026ac <ADC_IRQHandler>

080026ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026b2:	2003      	movs	r0, #3
 80026b4:	f000 f94a 	bl	800294c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026b8:	2000      	movs	r0, #0
 80026ba:	f000 f805 	bl	80026c8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80026be:	f7ff fd31 	bl	8002124 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026d0:	4b12      	ldr	r3, [pc, #72]	; (800271c <HAL_InitTick+0x54>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b12      	ldr	r3, [pc, #72]	; (8002720 <HAL_InitTick+0x58>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	4619      	mov	r1, r3
 80026da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026de:	fbb3 f3f1 	udiv	r3, r3, r1
 80026e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 f994 	bl	8002a14 <HAL_SYSTICK_Config>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e00e      	b.n	8002714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b0f      	cmp	r3, #15
 80026fa:	d80a      	bhi.n	8002712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026fc:	2200      	movs	r2, #0
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	f04f 30ff 	mov.w	r0, #4294967295
 8002704:	f000 f942 	bl	800298c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002708:	4a06      	ldr	r2, [pc, #24]	; (8002724 <HAL_InitTick+0x5c>)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	e000      	b.n	8002714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000000 	.word	0x20000000
 8002720:	20000008 	.word	0x20000008
 8002724:	20000004 	.word	0x20000004

08002728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <HAL_IncTick+0x20>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_IncTick+0x24>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4413      	add	r3, r2
 8002738:	4a04      	ldr	r2, [pc, #16]	; (800274c <HAL_IncTick+0x24>)
 800273a:	6013      	str	r3, [r2, #0]
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	20000008 	.word	0x20000008
 800274c:	20000438 	.word	0x20000438

08002750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return uwTick;
 8002754:	4b03      	ldr	r3, [pc, #12]	; (8002764 <HAL_GetTick+0x14>)
 8002756:	681b      	ldr	r3, [r3, #0]
}
 8002758:	4618      	mov	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	20000438 	.word	0x20000438

08002768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002770:	f7ff ffee 	bl	8002750 <HAL_GetTick>
 8002774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002780:	d005      	beq.n	800278e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002782:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <HAL_Delay+0x40>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4413      	add	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800278e:	bf00      	nop
 8002790:	f7ff ffde 	bl	8002750 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	429a      	cmp	r2, r3
 800279e:	d8f7      	bhi.n	8002790 <HAL_Delay+0x28>
  {
  }
}
 80027a0:	bf00      	nop
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20000008 	.word	0x20000008

080027ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <__NVIC_SetPriorityGrouping+0x40>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027c8:	4013      	ands	r3, r2
 80027ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <__NVIC_SetPriorityGrouping+0x44>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027da:	4a04      	ldr	r2, [pc, #16]	; (80027ec <__NVIC_SetPriorityGrouping+0x40>)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	60d3      	str	r3, [r2, #12]
}
 80027e0:	bf00      	nop
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000ed00 	.word	0xe000ed00
 80027f0:	05fa0000 	.word	0x05fa0000

080027f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f8:	4b04      	ldr	r3, [pc, #16]	; (800280c <__NVIC_GetPriorityGrouping+0x18>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	0a1b      	lsrs	r3, r3, #8
 80027fe:	f003 0307 	and.w	r3, r3, #7
}
 8002802:	4618      	mov	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	2b00      	cmp	r3, #0
 8002820:	db0b      	blt.n	800283a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	f003 021f 	and.w	r2, r3, #31
 8002828:	4907      	ldr	r1, [pc, #28]	; (8002848 <__NVIC_EnableIRQ+0x38>)
 800282a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	2001      	movs	r0, #1
 8002832:	fa00 f202 	lsl.w	r2, r0, r2
 8002836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	e000e100 	.word	0xe000e100

0800284c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	6039      	str	r1, [r7, #0]
 8002856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285c:	2b00      	cmp	r3, #0
 800285e:	db0a      	blt.n	8002876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	b2da      	uxtb	r2, r3
 8002864:	490c      	ldr	r1, [pc, #48]	; (8002898 <__NVIC_SetPriority+0x4c>)
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	0112      	lsls	r2, r2, #4
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	440b      	add	r3, r1
 8002870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002874:	e00a      	b.n	800288c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	b2da      	uxtb	r2, r3
 800287a:	4908      	ldr	r1, [pc, #32]	; (800289c <__NVIC_SetPriority+0x50>)
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	3b04      	subs	r3, #4
 8002884:	0112      	lsls	r2, r2, #4
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	440b      	add	r3, r1
 800288a:	761a      	strb	r2, [r3, #24]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	e000e100 	.word	0xe000e100
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b089      	sub	sp, #36	; 0x24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f1c3 0307 	rsb	r3, r3, #7
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	bf28      	it	cs
 80028be:	2304      	movcs	r3, #4
 80028c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3304      	adds	r3, #4
 80028c6:	2b06      	cmp	r3, #6
 80028c8:	d902      	bls.n	80028d0 <NVIC_EncodePriority+0x30>
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3b03      	subs	r3, #3
 80028ce:	e000      	b.n	80028d2 <NVIC_EncodePriority+0x32>
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d4:	f04f 32ff 	mov.w	r2, #4294967295
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43da      	mvns	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	401a      	ands	r2, r3
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e8:	f04f 31ff 	mov.w	r1, #4294967295
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	fa01 f303 	lsl.w	r3, r1, r3
 80028f2:	43d9      	mvns	r1, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f8:	4313      	orrs	r3, r2
         );
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3724      	adds	r7, #36	; 0x24
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3b01      	subs	r3, #1
 8002914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002918:	d301      	bcc.n	800291e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800291a:	2301      	movs	r3, #1
 800291c:	e00f      	b.n	800293e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800291e:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <SysTick_Config+0x40>)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3b01      	subs	r3, #1
 8002924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002926:	210f      	movs	r1, #15
 8002928:	f04f 30ff 	mov.w	r0, #4294967295
 800292c:	f7ff ff8e 	bl	800284c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <SysTick_Config+0x40>)
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002936:	4b04      	ldr	r3, [pc, #16]	; (8002948 <SysTick_Config+0x40>)
 8002938:	2207      	movs	r2, #7
 800293a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	e000e010 	.word	0xe000e010

0800294c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b07      	cmp	r3, #7
 8002958:	d00f      	beq.n	800297a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b06      	cmp	r3, #6
 800295e:	d00c      	beq.n	800297a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b05      	cmp	r3, #5
 8002964:	d009      	beq.n	800297a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b04      	cmp	r3, #4
 800296a:	d006      	beq.n	800297a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b03      	cmp	r3, #3
 8002970:	d003      	beq.n	800297a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002972:	2192      	movs	r1, #146	; 0x92
 8002974:	4804      	ldr	r0, [pc, #16]	; (8002988 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002976:	f7ff f952 	bl	8001c1e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7ff ff16 	bl	80027ac <__NVIC_SetPriorityGrouping>
}
 8002980:	bf00      	nop
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	08007fa8 	.word	0x08007fa8

0800298c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b0f      	cmp	r3, #15
 80029a2:	d903      	bls.n	80029ac <HAL_NVIC_SetPriority+0x20>
 80029a4:	21aa      	movs	r1, #170	; 0xaa
 80029a6:	480e      	ldr	r0, [pc, #56]	; (80029e0 <HAL_NVIC_SetPriority+0x54>)
 80029a8:	f7ff f939 	bl	8001c1e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b0f      	cmp	r3, #15
 80029b0:	d903      	bls.n	80029ba <HAL_NVIC_SetPriority+0x2e>
 80029b2:	21ab      	movs	r1, #171	; 0xab
 80029b4:	480a      	ldr	r0, [pc, #40]	; (80029e0 <HAL_NVIC_SetPriority+0x54>)
 80029b6:	f7ff f932 	bl	8001c1e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029ba:	f7ff ff1b 	bl	80027f4 <__NVIC_GetPriorityGrouping>
 80029be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	68b9      	ldr	r1, [r7, #8]
 80029c4:	6978      	ldr	r0, [r7, #20]
 80029c6:	f7ff ff6b 	bl	80028a0 <NVIC_EncodePriority>
 80029ca:	4602      	mov	r2, r0
 80029cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d0:	4611      	mov	r1, r2
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff ff3a 	bl	800284c <__NVIC_SetPriority>
}
 80029d8:	bf00      	nop
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	08007fa8 	.word	0x08007fa8

080029e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	da03      	bge.n	80029fe <HAL_NVIC_EnableIRQ+0x1a>
 80029f6:	21be      	movs	r1, #190	; 0xbe
 80029f8:	4805      	ldr	r0, [pc, #20]	; (8002a10 <HAL_NVIC_EnableIRQ+0x2c>)
 80029fa:	f7ff f910 	bl	8001c1e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff ff04 	bl	8002810 <__NVIC_EnableIRQ>
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	08007fa8 	.word	0x08007fa8

08002a14 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff ff73 	bl	8002908 <SysTick_Config>
 8002a22:	4603      	mov	r3, r0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e0a5      	b.n	8002b8a <HAL_CRC_Init+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a54      	ldr	r2, [pc, #336]	; (8002b94 <HAL_CRC_Init+0x168>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d003      	beq.n	8002a50 <HAL_CRC_Init+0x24>
 8002a48:	2170      	movs	r1, #112	; 0x70
 8002a4a:	4853      	ldr	r0, [pc, #332]	; (8002b98 <HAL_CRC_Init+0x16c>)
 8002a4c:	f7ff f8e7 	bl	8001c1e <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7f5b      	ldrb	r3, [r3, #29]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d105      	bne.n	8002a66 <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7fd fed7 	bl	8000814 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2202      	movs	r2, #2
 8002a6a:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	791b      	ldrb	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d007      	beq.n	8002a84 <HAL_CRC_Init+0x58>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	791b      	ldrb	r3, [r3, #4]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d003      	beq.n	8002a84 <HAL_CRC_Init+0x58>
 8002a7c:	217e      	movs	r1, #126	; 0x7e
 8002a7e:	4846      	ldr	r0, [pc, #280]	; (8002b98 <HAL_CRC_Init+0x16c>)
 8002a80:	f7ff f8cd 	bl	8001c1e <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	791b      	ldrb	r3, [r3, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10c      	bne.n	8002aa6 <HAL_CRC_Init+0x7a>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a42      	ldr	r2, [pc, #264]	; (8002b9c <HAL_CRC_Init+0x170>)
 8002a92:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0218 	bic.w	r2, r2, #24
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	e00c      	b.n	8002ac0 <HAL_CRC_Init+0x94>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6899      	ldr	r1, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f875 	bl	8002ba0 <HAL_CRCEx_Polynomial_Set>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_CRC_Init+0x94>
    {
      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e064      	b.n	8002b8a <HAL_CRC_Init+0x15e>
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	795b      	ldrb	r3, [r3, #5]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d007      	beq.n	8002ad8 <HAL_CRC_Init+0xac>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	795b      	ldrb	r3, [r3, #5]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d003      	beq.n	8002ad8 <HAL_CRC_Init+0xac>
 8002ad0:	2190      	movs	r1, #144	; 0x90
 8002ad2:	4831      	ldr	r0, [pc, #196]	; (8002b98 <HAL_CRC_Init+0x16c>)
 8002ad4:	f7ff f8a3 	bl	8001c1e <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	795b      	ldrb	r3, [r3, #5]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d105      	bne.n	8002aec <HAL_CRC_Init+0xc0>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae8:	611a      	str	r2, [r3, #16]
 8002aea:	e004      	b.n	8002af6 <HAL_CRC_Init+0xca>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6912      	ldr	r2, [r2, #16]
 8002af4:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00f      	beq.n	8002b1e <HAL_CRC_Init+0xf2>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d00b      	beq.n	8002b1e <HAL_CRC_Init+0xf2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	2b40      	cmp	r3, #64	; 0x40
 8002b0c:	d007      	beq.n	8002b1e <HAL_CRC_Init+0xf2>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	2b60      	cmp	r3, #96	; 0x60
 8002b14:	d003      	beq.n	8002b1e <HAL_CRC_Init+0xf2>
 8002b16:	219c      	movs	r1, #156	; 0x9c
 8002b18:	481f      	ldr	r0, [pc, #124]	; (8002b98 <HAL_CRC_Init+0x16c>)
 8002b1a:	f7ff f880 	bl	8001c1e <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	695a      	ldr	r2, [r3, #20]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d007      	beq.n	8002b4c <HAL_CRC_Init+0x120>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	2b80      	cmp	r3, #128	; 0x80
 8002b42:	d003      	beq.n	8002b4c <HAL_CRC_Init+0x120>
 8002b44:	21a0      	movs	r1, #160	; 0xa0
 8002b46:	4814      	ldr	r0, [pc, #80]	; (8002b98 <HAL_CRC_Init+0x16c>)
 8002b48:	f7ff f869 	bl	8001c1e <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699a      	ldr	r2, [r3, #24]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	609a      	str	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d00b      	beq.n	8002b82 <HAL_CRC_Init+0x156>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d007      	beq.n	8002b82 <HAL_CRC_Init+0x156>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	d003      	beq.n	8002b82 <HAL_CRC_Init+0x156>
 8002b7a:	21a5      	movs	r1, #165	; 0xa5
 8002b7c:	4806      	ldr	r0, [pc, #24]	; (8002b98 <HAL_CRC_Init+0x16c>)
 8002b7e:	f7ff f84e 	bl	8001c1e <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40023000 	.word	0x40023000
 8002b98:	08007fe4 	.word	0x08007fe4
 8002b9c:	04c11db7 	.word	0x04c11db7

08002ba0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002bb0:	231f      	movs	r3, #31
 8002bb2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00c      	beq.n	8002bd4 <HAL_CRCEx_Polynomial_Set+0x34>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d009      	beq.n	8002bd4 <HAL_CRCEx_Polynomial_Set+0x34>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b10      	cmp	r3, #16
 8002bc4:	d006      	beq.n	8002bd4 <HAL_CRCEx_Polynomial_Set+0x34>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b18      	cmp	r3, #24
 8002bca:	d003      	beq.n	8002bd4 <HAL_CRCEx_Polynomial_Set+0x34>
 8002bcc:	215f      	movs	r1, #95	; 0x5f
 8002bce:	483e      	ldr	r0, [pc, #248]	; (8002cc8 <HAL_CRCEx_Polynomial_Set+0x128>)
 8002bd0:	f7ff f825 	bl	8001c1e <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002bd4:	bf00      	nop
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1e5a      	subs	r2, r3, #1
 8002bda:	613a      	str	r2, [r7, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d009      	beq.n	8002bf4 <HAL_CRCEx_Polynomial_Set+0x54>
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f003 031f 	and.w	r3, r3, #31
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_CRCEx_Polynomial_Set+0x36>
  {
  }

  switch (PolyLength)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b18      	cmp	r3, #24
 8002bf8:	d846      	bhi.n	8002c88 <HAL_CRCEx_Polynomial_Set+0xe8>
 8002bfa:	a201      	add	r2, pc, #4	; (adr r2, 8002c00 <HAL_CRCEx_Polynomial_Set+0x60>)
 8002bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c00:	08002c8f 	.word	0x08002c8f
 8002c04:	08002c89 	.word	0x08002c89
 8002c08:	08002c89 	.word	0x08002c89
 8002c0c:	08002c89 	.word	0x08002c89
 8002c10:	08002c89 	.word	0x08002c89
 8002c14:	08002c89 	.word	0x08002c89
 8002c18:	08002c89 	.word	0x08002c89
 8002c1c:	08002c89 	.word	0x08002c89
 8002c20:	08002c7d 	.word	0x08002c7d
 8002c24:	08002c89 	.word	0x08002c89
 8002c28:	08002c89 	.word	0x08002c89
 8002c2c:	08002c89 	.word	0x08002c89
 8002c30:	08002c89 	.word	0x08002c89
 8002c34:	08002c89 	.word	0x08002c89
 8002c38:	08002c89 	.word	0x08002c89
 8002c3c:	08002c89 	.word	0x08002c89
 8002c40:	08002c71 	.word	0x08002c71
 8002c44:	08002c89 	.word	0x08002c89
 8002c48:	08002c89 	.word	0x08002c89
 8002c4c:	08002c89 	.word	0x08002c89
 8002c50:	08002c89 	.word	0x08002c89
 8002c54:	08002c89 	.word	0x08002c89
 8002c58:	08002c89 	.word	0x08002c89
 8002c5c:	08002c89 	.word	0x08002c89
 8002c60:	08002c65 	.word	0x08002c65
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	2b06      	cmp	r3, #6
 8002c68:	d913      	bls.n	8002c92 <HAL_CRCEx_Polynomial_Set+0xf2>
      {
        status =   HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002c6e:	e010      	b.n	8002c92 <HAL_CRCEx_Polynomial_Set+0xf2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	2b07      	cmp	r3, #7
 8002c74:	d90f      	bls.n	8002c96 <HAL_CRCEx_Polynomial_Set+0xf6>
      {
        status =   HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002c7a:	e00c      	b.n	8002c96 <HAL_CRCEx_Polynomial_Set+0xf6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	2b0f      	cmp	r3, #15
 8002c80:	d90b      	bls.n	8002c9a <HAL_CRCEx_Polynomial_Set+0xfa>
      {
        status =   HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002c86:	e008      	b.n	8002c9a <HAL_CRCEx_Polynomial_Set+0xfa>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c8c:	e006      	b.n	8002c9c <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8002c8e:	bf00      	nop
 8002c90:	e004      	b.n	8002c9c <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8002c92:	bf00      	nop
 8002c94:	e002      	b.n	8002c9c <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8002c96:	bf00      	nop
 8002c98:	e000      	b.n	8002c9c <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8002c9a:	bf00      	nop
  }
  if (status == HAL_OK)
 8002c9c:	7dfb      	ldrb	r3, [r7, #23]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10d      	bne.n	8002cbe <HAL_CRCEx_Polynomial_Set+0x11e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f023 0118 	bic.w	r1, r3, #24
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	0800801c 	.word	0x0800801c

08002ccc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d004      	beq.n	8002cea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2280      	movs	r2, #128	; 0x80
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e00c      	b.n	8002d04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2205      	movs	r2, #5
 8002cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0201 	bic.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a42      	ldr	r2, [pc, #264]	; (8002e38 <HAL_GPIO_Init+0x128>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d02b      	beq.n	8002d8a <HAL_GPIO_Init+0x7a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a41      	ldr	r2, [pc, #260]	; (8002e3c <HAL_GPIO_Init+0x12c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d027      	beq.n	8002d8a <HAL_GPIO_Init+0x7a>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a40      	ldr	r2, [pc, #256]	; (8002e40 <HAL_GPIO_Init+0x130>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d023      	beq.n	8002d8a <HAL_GPIO_Init+0x7a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a3f      	ldr	r2, [pc, #252]	; (8002e44 <HAL_GPIO_Init+0x134>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d01f      	beq.n	8002d8a <HAL_GPIO_Init+0x7a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a3e      	ldr	r2, [pc, #248]	; (8002e48 <HAL_GPIO_Init+0x138>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d01b      	beq.n	8002d8a <HAL_GPIO_Init+0x7a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a3d      	ldr	r2, [pc, #244]	; (8002e4c <HAL_GPIO_Init+0x13c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d017      	beq.n	8002d8a <HAL_GPIO_Init+0x7a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a3c      	ldr	r2, [pc, #240]	; (8002e50 <HAL_GPIO_Init+0x140>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d013      	beq.n	8002d8a <HAL_GPIO_Init+0x7a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a3b      	ldr	r2, [pc, #236]	; (8002e54 <HAL_GPIO_Init+0x144>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d00f      	beq.n	8002d8a <HAL_GPIO_Init+0x7a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a3a      	ldr	r2, [pc, #232]	; (8002e58 <HAL_GPIO_Init+0x148>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00b      	beq.n	8002d8a <HAL_GPIO_Init+0x7a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a39      	ldr	r2, [pc, #228]	; (8002e5c <HAL_GPIO_Init+0x14c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d007      	beq.n	8002d8a <HAL_GPIO_Init+0x7a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a38      	ldr	r2, [pc, #224]	; (8002e60 <HAL_GPIO_Init+0x150>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x7a>
 8002d82:	21b1      	movs	r1, #177	; 0xb1
 8002d84:	4837      	ldr	r0, [pc, #220]	; (8002e64 <HAL_GPIO_Init+0x154>)
 8002d86:	f7fe ff4a 	bl	8001c1e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d103      	bne.n	8002d9c <HAL_GPIO_Init+0x8c>
 8002d94:	21b2      	movs	r1, #178	; 0xb2
 8002d96:	4833      	ldr	r0, [pc, #204]	; (8002e64 <HAL_GPIO_Init+0x154>)
 8002d98:	f7fe ff41 	bl	8001c1e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d035      	beq.n	8002e10 <HAL_GPIO_Init+0x100>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d031      	beq.n	8002e10 <HAL_GPIO_Init+0x100>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b11      	cmp	r3, #17
 8002db2:	d02d      	beq.n	8002e10 <HAL_GPIO_Init+0x100>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d029      	beq.n	8002e10 <HAL_GPIO_Init+0x100>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b12      	cmp	r3, #18
 8002dc2:	d025      	beq.n	8002e10 <HAL_GPIO_Init+0x100>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	4a27      	ldr	r2, [pc, #156]	; (8002e68 <HAL_GPIO_Init+0x158>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d020      	beq.n	8002e10 <HAL_GPIO_Init+0x100>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	4a26      	ldr	r2, [pc, #152]	; (8002e6c <HAL_GPIO_Init+0x15c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d01b      	beq.n	8002e10 <HAL_GPIO_Init+0x100>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	4a24      	ldr	r2, [pc, #144]	; (8002e70 <HAL_GPIO_Init+0x160>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d016      	beq.n	8002e10 <HAL_GPIO_Init+0x100>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4a23      	ldr	r2, [pc, #140]	; (8002e74 <HAL_GPIO_Init+0x164>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d011      	beq.n	8002e10 <HAL_GPIO_Init+0x100>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	4a21      	ldr	r2, [pc, #132]	; (8002e78 <HAL_GPIO_Init+0x168>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00c      	beq.n	8002e10 <HAL_GPIO_Init+0x100>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	4a20      	ldr	r2, [pc, #128]	; (8002e7c <HAL_GPIO_Init+0x16c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d007      	beq.n	8002e10 <HAL_GPIO_Init+0x100>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d003      	beq.n	8002e10 <HAL_GPIO_Init+0x100>
 8002e08:	21b3      	movs	r1, #179	; 0xb3
 8002e0a:	4816      	ldr	r0, [pc, #88]	; (8002e64 <HAL_GPIO_Init+0x154>)
 8002e0c:	f7fe ff07 	bl	8001c1e <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00b      	beq.n	8002e30 <HAL_GPIO_Init+0x120>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d007      	beq.n	8002e30 <HAL_GPIO_Init+0x120>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d003      	beq.n	8002e30 <HAL_GPIO_Init+0x120>
 8002e28:	21b4      	movs	r1, #180	; 0xb4
 8002e2a:	480e      	ldr	r0, [pc, #56]	; (8002e64 <HAL_GPIO_Init+0x154>)
 8002e2c:	f7fe fef7 	bl	8001c1e <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
 8002e34:	e2d6      	b.n	80033e4 <HAL_GPIO_Init+0x6d4>
 8002e36:	bf00      	nop
 8002e38:	40020000 	.word	0x40020000
 8002e3c:	40020400 	.word	0x40020400
 8002e40:	40020800 	.word	0x40020800
 8002e44:	40020c00 	.word	0x40020c00
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40021400 	.word	0x40021400
 8002e50:	40021800 	.word	0x40021800
 8002e54:	40021c00 	.word	0x40021c00
 8002e58:	40022000 	.word	0x40022000
 8002e5c:	40022400 	.word	0x40022400
 8002e60:	40022800 	.word	0x40022800
 8002e64:	08008058 	.word	0x08008058
 8002e68:	10110000 	.word	0x10110000
 8002e6c:	10210000 	.word	0x10210000
 8002e70:	10310000 	.word	0x10310000
 8002e74:	10120000 	.word	0x10120000
 8002e78:	10220000 	.word	0x10220000
 8002e7c:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e80:	2201      	movs	r2, #1
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	f040 82a0 	bne.w	80033de <HAL_GPIO_Init+0x6ce>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d00b      	beq.n	8002ebe <HAL_GPIO_Init+0x1ae>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d007      	beq.n	8002ebe <HAL_GPIO_Init+0x1ae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002eb2:	2b11      	cmp	r3, #17
 8002eb4:	d003      	beq.n	8002ebe <HAL_GPIO_Init+0x1ae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b12      	cmp	r3, #18
 8002ebc:	d144      	bne.n	8002f48 <HAL_GPIO_Init+0x238>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00f      	beq.n	8002ee6 <HAL_GPIO_Init+0x1d6>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d00b      	beq.n	8002ee6 <HAL_GPIO_Init+0x1d6>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d007      	beq.n	8002ee6 <HAL_GPIO_Init+0x1d6>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d003      	beq.n	8002ee6 <HAL_GPIO_Init+0x1d6>
 8002ede:	21c6      	movs	r1, #198	; 0xc6
 8002ee0:	482a      	ldr	r0, [pc, #168]	; (8002f8c <HAL_GPIO_Init+0x27c>)
 8002ee2:	f7fe fe9c 	bl	8001c1e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4013      	ands	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 0201 	and.w	r2, r3, #1
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	2203      	movs	r2, #3
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d007      	beq.n	8002f90 <HAL_GPIO_Init+0x280>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b12      	cmp	r3, #18
 8002f86:	f040 814b 	bne.w	8003220 <HAL_GPIO_Init+0x510>
 8002f8a:	e001      	b.n	8002f90 <HAL_GPIO_Init+0x280>
 8002f8c:	08008058 	.word	0x08008058
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 811f 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	f000 811a 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 8115 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 8110 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 810b 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	f000 8106 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	f000 8101 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	f000 80fc 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	f000 80f7 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	f000 80f2 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	f000 80ed 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	2b03      	cmp	r3, #3
 8003004:	f000 80e8 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	2b03      	cmp	r3, #3
 800300e:	f000 80e3 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	2b03      	cmp	r3, #3
 8003018:	f000 80de 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	2b03      	cmp	r3, #3
 8003022:	f000 80d9 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2b04      	cmp	r3, #4
 800302c:	f000 80d4 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	2b04      	cmp	r3, #4
 8003036:	f000 80cf 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b04      	cmp	r3, #4
 8003040:	f000 80ca 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	2b04      	cmp	r3, #4
 800304a:	f000 80c5 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b04      	cmp	r3, #4
 8003054:	f000 80c0 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	2b05      	cmp	r3, #5
 800305e:	f000 80bb 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	2b05      	cmp	r3, #5
 8003068:	f000 80b6 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	2b05      	cmp	r3, #5
 8003072:	f000 80b1 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	2b05      	cmp	r3, #5
 800307c:	f000 80ac 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	2b05      	cmp	r3, #5
 8003086:	f000 80a7 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	2b05      	cmp	r3, #5
 8003090:	f000 80a2 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	2b06      	cmp	r3, #6
 800309a:	f000 809d 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	2b06      	cmp	r3, #6
 80030a4:	f000 8098 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	2b07      	cmp	r3, #7
 80030ae:	f000 8093 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	2b07      	cmp	r3, #7
 80030b8:	f000 808e 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	2b07      	cmp	r3, #7
 80030c2:	f000 8089 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	2b07      	cmp	r3, #7
 80030cc:	f000 8084 	beq.w	80031d8 <HAL_GPIO_Init+0x4c8>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2b07      	cmp	r3, #7
 80030d6:	d07f      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	2b07      	cmp	r3, #7
 80030de:	d07b      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	2b07      	cmp	r3, #7
 80030e6:	d077      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d073      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d06f      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d06b      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	2b08      	cmp	r3, #8
 8003106:	d067      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	2b08      	cmp	r3, #8
 800310e:	d063      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	2b08      	cmp	r3, #8
 8003116:	d05f      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	2b08      	cmp	r3, #8
 800311e:	d05b      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	2b09      	cmp	r3, #9
 8003126:	d057      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	2b09      	cmp	r3, #9
 800312e:	d053      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	2b09      	cmp	r3, #9
 8003136:	d04f      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	2b09      	cmp	r3, #9
 800313e:	d04b      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	2b09      	cmp	r3, #9
 8003146:	d047      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	2b09      	cmp	r3, #9
 800314e:	d043      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	2b09      	cmp	r3, #9
 8003156:	d03f      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	2b0a      	cmp	r3, #10
 800315e:	d03b      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	2b0a      	cmp	r3, #10
 8003166:	d037      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	2b0a      	cmp	r3, #10
 800316e:	d033      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	2b0a      	cmp	r3, #10
 8003176:	d02f      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	2b0b      	cmp	r3, #11
 800317e:	d02b      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	2b0a      	cmp	r3, #10
 8003186:	d027      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	2b0b      	cmp	r3, #11
 800318e:	d023      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	2b0b      	cmp	r3, #11
 8003196:	d01f      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	2b0c      	cmp	r3, #12
 800319e:	d01b      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	2b0c      	cmp	r3, #12
 80031a6:	d017      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2b0c      	cmp	r3, #12
 80031ae:	d013      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	2b0f      	cmp	r3, #15
 80031b6:	d00f      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	2b0d      	cmp	r3, #13
 80031be:	d00b      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	2b0e      	cmp	r3, #14
 80031c6:	d007      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2b0d      	cmp	r3, #13
 80031ce:	d003      	beq.n	80031d8 <HAL_GPIO_Init+0x4c8>
 80031d0:	21de      	movs	r1, #222	; 0xde
 80031d2:	4888      	ldr	r0, [pc, #544]	; (80033f4 <HAL_GPIO_Init+0x6e4>)
 80031d4:	f7fe fd23 	bl	8001c1e <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	08da      	lsrs	r2, r3, #3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3208      	adds	r2, #8
 80031e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	220f      	movs	r2, #15
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	08da      	lsrs	r2, r3, #3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3208      	adds	r2, #8
 800321a:	69b9      	ldr	r1, [r7, #24]
 800321c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	2203      	movs	r2, #3
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 0203 	and.w	r2, r3, #3
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 80be 	beq.w	80033de <HAL_GPIO_Init+0x6ce>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003262:	4b65      	ldr	r3, [pc, #404]	; (80033f8 <HAL_GPIO_Init+0x6e8>)
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	4a64      	ldr	r2, [pc, #400]	; (80033f8 <HAL_GPIO_Init+0x6e8>)
 8003268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800326c:	6453      	str	r3, [r2, #68]	; 0x44
 800326e:	4b62      	ldr	r3, [pc, #392]	; (80033f8 <HAL_GPIO_Init+0x6e8>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800327a:	4a60      	ldr	r2, [pc, #384]	; (80033fc <HAL_GPIO_Init+0x6ec>)
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	089b      	lsrs	r3, r3, #2
 8003280:	3302      	adds	r3, #2
 8003282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003286:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	220f      	movs	r2, #15
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43db      	mvns	r3, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4013      	ands	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a57      	ldr	r2, [pc, #348]	; (8003400 <HAL_GPIO_Init+0x6f0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d037      	beq.n	8003316 <HAL_GPIO_Init+0x606>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a56      	ldr	r2, [pc, #344]	; (8003404 <HAL_GPIO_Init+0x6f4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d031      	beq.n	8003312 <HAL_GPIO_Init+0x602>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a55      	ldr	r2, [pc, #340]	; (8003408 <HAL_GPIO_Init+0x6f8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d02b      	beq.n	800330e <HAL_GPIO_Init+0x5fe>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a54      	ldr	r2, [pc, #336]	; (800340c <HAL_GPIO_Init+0x6fc>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d025      	beq.n	800330a <HAL_GPIO_Init+0x5fa>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a53      	ldr	r2, [pc, #332]	; (8003410 <HAL_GPIO_Init+0x700>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d01f      	beq.n	8003306 <HAL_GPIO_Init+0x5f6>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a52      	ldr	r2, [pc, #328]	; (8003414 <HAL_GPIO_Init+0x704>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d019      	beq.n	8003302 <HAL_GPIO_Init+0x5f2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a51      	ldr	r2, [pc, #324]	; (8003418 <HAL_GPIO_Init+0x708>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d013      	beq.n	80032fe <HAL_GPIO_Init+0x5ee>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a50      	ldr	r2, [pc, #320]	; (800341c <HAL_GPIO_Init+0x70c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d00d      	beq.n	80032fa <HAL_GPIO_Init+0x5ea>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a4f      	ldr	r2, [pc, #316]	; (8003420 <HAL_GPIO_Init+0x710>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d007      	beq.n	80032f6 <HAL_GPIO_Init+0x5e6>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a4e      	ldr	r2, [pc, #312]	; (8003424 <HAL_GPIO_Init+0x714>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d101      	bne.n	80032f2 <HAL_GPIO_Init+0x5e2>
 80032ee:	2309      	movs	r3, #9
 80032f0:	e012      	b.n	8003318 <HAL_GPIO_Init+0x608>
 80032f2:	230a      	movs	r3, #10
 80032f4:	e010      	b.n	8003318 <HAL_GPIO_Init+0x608>
 80032f6:	2308      	movs	r3, #8
 80032f8:	e00e      	b.n	8003318 <HAL_GPIO_Init+0x608>
 80032fa:	2307      	movs	r3, #7
 80032fc:	e00c      	b.n	8003318 <HAL_GPIO_Init+0x608>
 80032fe:	2306      	movs	r3, #6
 8003300:	e00a      	b.n	8003318 <HAL_GPIO_Init+0x608>
 8003302:	2305      	movs	r3, #5
 8003304:	e008      	b.n	8003318 <HAL_GPIO_Init+0x608>
 8003306:	2304      	movs	r3, #4
 8003308:	e006      	b.n	8003318 <HAL_GPIO_Init+0x608>
 800330a:	2303      	movs	r3, #3
 800330c:	e004      	b.n	8003318 <HAL_GPIO_Init+0x608>
 800330e:	2302      	movs	r3, #2
 8003310:	e002      	b.n	8003318 <HAL_GPIO_Init+0x608>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <HAL_GPIO_Init+0x608>
 8003316:	2300      	movs	r3, #0
 8003318:	69fa      	ldr	r2, [r7, #28]
 800331a:	f002 0203 	and.w	r2, r2, #3
 800331e:	0092      	lsls	r2, r2, #2
 8003320:	4093      	lsls	r3, r2
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	4313      	orrs	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003328:	4934      	ldr	r1, [pc, #208]	; (80033fc <HAL_GPIO_Init+0x6ec>)
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	089b      	lsrs	r3, r3, #2
 800332e:	3302      	adds	r3, #2
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003336:	4b3c      	ldr	r3, [pc, #240]	; (8003428 <HAL_GPIO_Init+0x718>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	43db      	mvns	r3, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4013      	ands	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_GPIO_Init+0x64a>
        {
          temp |= iocurrent;
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800335a:	4a33      	ldr	r2, [pc, #204]	; (8003428 <HAL_GPIO_Init+0x718>)
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003360:	4b31      	ldr	r3, [pc, #196]	; (8003428 <HAL_GPIO_Init+0x718>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	43db      	mvns	r3, r3
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	4013      	ands	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_GPIO_Init+0x674>
        {
          temp |= iocurrent;
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003384:	4a28      	ldr	r2, [pc, #160]	; (8003428 <HAL_GPIO_Init+0x718>)
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800338a:	4b27      	ldr	r3, [pc, #156]	; (8003428 <HAL_GPIO_Init+0x718>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	43db      	mvns	r3, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4013      	ands	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_Init+0x69e>
        {
          temp |= iocurrent;
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033ae:	4a1e      	ldr	r2, [pc, #120]	; (8003428 <HAL_GPIO_Init+0x718>)
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033b4:	4b1c      	ldr	r3, [pc, #112]	; (8003428 <HAL_GPIO_Init+0x718>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	43db      	mvns	r3, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4013      	ands	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <HAL_GPIO_Init+0x6c8>
        {
          temp |= iocurrent;
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033d8:	4a13      	ldr	r2, [pc, #76]	; (8003428 <HAL_GPIO_Init+0x718>)
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	3301      	adds	r3, #1
 80033e2:	61fb      	str	r3, [r7, #28]
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	2b0f      	cmp	r3, #15
 80033e8:	f67f ad4a 	bls.w	8002e80 <HAL_GPIO_Init+0x170>
      }
    }
  }
}
 80033ec:	bf00      	nop
 80033ee:	3720      	adds	r7, #32
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	08008058 	.word	0x08008058
 80033f8:	40023800 	.word	0x40023800
 80033fc:	40013800 	.word	0x40013800
 8003400:	40020000 	.word	0x40020000
 8003404:	40020400 	.word	0x40020400
 8003408:	40020800 	.word	0x40020800
 800340c:	40020c00 	.word	0x40020c00
 8003410:	40021000 	.word	0x40021000
 8003414:	40021400 	.word	0x40021400
 8003418:	40021800 	.word	0x40021800
 800341c:	40021c00 	.word	0x40021c00
 8003420:	40022000 	.word	0x40022000
 8003424:	40022400 	.word	0x40022400
 8003428:	40013c00 	.word	0x40013c00

0800342c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003438:	887b      	ldrh	r3, [r7, #2]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d104      	bne.n	8003448 <HAL_GPIO_ReadPin+0x1c>
 800343e:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8003442:	4809      	ldr	r0, [pc, #36]	; (8003468 <HAL_GPIO_ReadPin+0x3c>)
 8003444:	f7fe fbeb 	bl	8001c1e <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	887b      	ldrh	r3, [r7, #2]
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8003454:	2301      	movs	r3, #1
 8003456:	73fb      	strb	r3, [r7, #15]
 8003458:	e001      	b.n	800345e <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800345a:	2300      	movs	r3, #0
 800345c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800345e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	08008058 	.word	0x08008058

0800346c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	807b      	strh	r3, [r7, #2]
 8003478:	4613      	mov	r3, r2
 800347a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800347c:	887b      	ldrh	r3, [r7, #2]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d104      	bne.n	800348c <HAL_GPIO_WritePin+0x20>
 8003482:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8003486:	480e      	ldr	r0, [pc, #56]	; (80034c0 <HAL_GPIO_WritePin+0x54>)
 8003488:	f7fe fbc9 	bl	8001c1e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800348c:	787b      	ldrb	r3, [r7, #1]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d007      	beq.n	80034a2 <HAL_GPIO_WritePin+0x36>
 8003492:	787b      	ldrb	r3, [r7, #1]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d004      	beq.n	80034a2 <HAL_GPIO_WritePin+0x36>
 8003498:	f240 119b 	movw	r1, #411	; 0x19b
 800349c:	4808      	ldr	r0, [pc, #32]	; (80034c0 <HAL_GPIO_WritePin+0x54>)
 800349e:	f7fe fbbe 	bl	8001c1e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80034a2:	787b      	ldrb	r3, [r7, #1]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034a8:	887a      	ldrh	r2, [r7, #2]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80034ae:	e003      	b.n	80034b8 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80034b0:	887b      	ldrh	r3, [r7, #2]
 80034b2:	041a      	lsls	r2, r3, #16
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	619a      	str	r2, [r3, #24]
}
 80034b8:	bf00      	nop
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	08008058 	.word	0x08008058

080034c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80034d0:	887b      	ldrh	r3, [r7, #2]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d104      	bne.n	80034e0 <HAL_GPIO_TogglePin+0x1c>
 80034d6:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80034da:	480a      	ldr	r0, [pc, #40]	; (8003504 <HAL_GPIO_TogglePin+0x40>)
 80034dc:	f7fe fb9f 	bl	8001c1e <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695a      	ldr	r2, [r3, #20]
 80034e4:	887b      	ldrh	r3, [r7, #2]
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d004      	beq.n	80034f6 <HAL_GPIO_TogglePin+0x32>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80034ec:	887b      	ldrh	r3, [r7, #2]
 80034ee:	041a      	lsls	r2, r3, #16
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80034f4:	e002      	b.n	80034fc <HAL_GPIO_TogglePin+0x38>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034f6:	887a      	ldrh	r2, [r7, #2]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	619a      	str	r2, [r3, #24]
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	08008058 	.word	0x08008058

08003508 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003512:	4b08      	ldr	r3, [pc, #32]	; (8003534 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	88fb      	ldrh	r3, [r7, #6]
 8003518:	4013      	ands	r3, r2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d006      	beq.n	800352c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800351e:	4a05      	ldr	r2, [pc, #20]	; (8003534 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003524:	88fb      	ldrh	r3, [r7, #6]
 8003526:	4618      	mov	r0, r3
 8003528:	f000 f806 	bl	8003538 <HAL_GPIO_EXTI_Callback>
  }
}
 800352c:	bf00      	nop
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40013c00 	.word	0x40013c00

08003538 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800355a:	4b23      	ldr	r3, [pc, #140]	; (80035e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	4a22      	ldr	r2, [pc, #136]	; (80035e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003564:	6413      	str	r3, [r2, #64]	; 0x40
 8003566:	4b20      	ldr	r3, [pc, #128]	; (80035e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356e:	603b      	str	r3, [r7, #0]
 8003570:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003572:	4b1e      	ldr	r3, [pc, #120]	; (80035ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1d      	ldr	r2, [pc, #116]	; (80035ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800357e:	f7ff f8e7 	bl	8002750 <HAL_GetTick>
 8003582:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003584:	e009      	b.n	800359a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003586:	f7ff f8e3 	bl	8002750 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003594:	d901      	bls.n	800359a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e022      	b.n	80035e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800359a:	4b14      	ldr	r3, [pc, #80]	; (80035ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a6:	d1ee      	bne.n	8003586 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80035a8:	4b10      	ldr	r3, [pc, #64]	; (80035ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a0f      	ldr	r2, [pc, #60]	; (80035ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80035ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035b4:	f7ff f8cc 	bl	8002750 <HAL_GetTick>
 80035b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035ba:	e009      	b.n	80035d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035bc:	f7ff f8c8 	bl	8002750 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035ca:	d901      	bls.n	80035d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e007      	b.n	80035e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035d0:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035dc:	d1ee      	bne.n	80035bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40023800 	.word	0x40023800
 80035ec:	40007000 	.word	0x40007000

080035f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80035f8:	2300      	movs	r3, #0
 80035fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e35c      	b.n	8003cc0 <HAL_RCC_OscConfig+0x6d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b0f      	cmp	r3, #15
 800360c:	d904      	bls.n	8003618 <HAL_RCC_OscConfig+0x28>
 800360e:	f240 1165 	movw	r1, #357	; 0x165
 8003612:	4892      	ldr	r0, [pc, #584]	; (800385c <HAL_RCC_OscConfig+0x26c>)
 8003614:	f7fe fb03 	bl	8001c1e <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 809a 	beq.w	800375a <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00e      	beq.n	800364c <HAL_RCC_OscConfig+0x5c>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003636:	d009      	beq.n	800364c <HAL_RCC_OscConfig+0x5c>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003640:	d004      	beq.n	800364c <HAL_RCC_OscConfig+0x5c>
 8003642:	f240 116b 	movw	r1, #363	; 0x16b
 8003646:	4885      	ldr	r0, [pc, #532]	; (800385c <HAL_RCC_OscConfig+0x26c>)
 8003648:	f7fe fae9 	bl	8001c1e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800364c:	4b84      	ldr	r3, [pc, #528]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 030c 	and.w	r3, r3, #12
 8003654:	2b04      	cmp	r3, #4
 8003656:	d00c      	beq.n	8003672 <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003658:	4b81      	ldr	r3, [pc, #516]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 030c 	and.w	r3, r3, #12
 8003660:	2b08      	cmp	r3, #8
 8003662:	d112      	bne.n	800368a <HAL_RCC_OscConfig+0x9a>
 8003664:	4b7e      	ldr	r3, [pc, #504]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800366c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003670:	d10b      	bne.n	800368a <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003672:	4b7b      	ldr	r3, [pc, #492]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d06c      	beq.n	8003758 <HAL_RCC_OscConfig+0x168>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d168      	bne.n	8003758 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e31a      	b.n	8003cc0 <HAL_RCC_OscConfig+0x6d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003692:	d106      	bne.n	80036a2 <HAL_RCC_OscConfig+0xb2>
 8003694:	4b72      	ldr	r3, [pc, #456]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a71      	ldr	r2, [pc, #452]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 800369a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	e02e      	b.n	8003700 <HAL_RCC_OscConfig+0x110>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10c      	bne.n	80036c4 <HAL_RCC_OscConfig+0xd4>
 80036aa:	4b6d      	ldr	r3, [pc, #436]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a6c      	ldr	r2, [pc, #432]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	4b6a      	ldr	r3, [pc, #424]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a69      	ldr	r2, [pc, #420]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e01d      	b.n	8003700 <HAL_RCC_OscConfig+0x110>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036cc:	d10c      	bne.n	80036e8 <HAL_RCC_OscConfig+0xf8>
 80036ce:	4b64      	ldr	r3, [pc, #400]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a63      	ldr	r2, [pc, #396]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	4b61      	ldr	r3, [pc, #388]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a60      	ldr	r2, [pc, #384]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	e00b      	b.n	8003700 <HAL_RCC_OscConfig+0x110>
 80036e8:	4b5d      	ldr	r3, [pc, #372]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a5c      	ldr	r2, [pc, #368]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	4b5a      	ldr	r3, [pc, #360]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a59      	ldr	r2, [pc, #356]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d013      	beq.n	8003730 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7ff f822 	bl	8002750 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003710:	f7ff f81e 	bl	8002750 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	; 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e2ce      	b.n	8003cc0 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	4b4f      	ldr	r3, [pc, #316]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0x120>
 800372e:	e014      	b.n	800375a <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003730:	f7ff f80e 	bl	8002750 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003738:	f7ff f80a 	bl	8002750 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b64      	cmp	r3, #100	; 0x64
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e2ba      	b.n	8003cc0 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374a:	4b45      	ldr	r3, [pc, #276]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f0      	bne.n	8003738 <HAL_RCC_OscConfig+0x148>
 8003756:	e000      	b.n	800375a <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 8084 	beq.w	8003870 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d008      	beq.n	8003782 <HAL_RCC_OscConfig+0x192>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d004      	beq.n	8003782 <HAL_RCC_OscConfig+0x192>
 8003778:	f240 119d 	movw	r1, #413	; 0x19d
 800377c:	4837      	ldr	r0, [pc, #220]	; (800385c <HAL_RCC_OscConfig+0x26c>)
 800377e:	f7fe fa4e 	bl	8001c1e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	2b1f      	cmp	r3, #31
 8003788:	d904      	bls.n	8003794 <HAL_RCC_OscConfig+0x1a4>
 800378a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800378e:	4833      	ldr	r0, [pc, #204]	; (800385c <HAL_RCC_OscConfig+0x26c>)
 8003790:	f7fe fa45 	bl	8001c1e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003794:	4b32      	ldr	r3, [pc, #200]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 030c 	and.w	r3, r3, #12
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00b      	beq.n	80037b8 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037a0:	4b2f      	ldr	r3, [pc, #188]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 030c 	and.w	r3, r3, #12
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d11c      	bne.n	80037e6 <HAL_RCC_OscConfig+0x1f6>
 80037ac:	4b2c      	ldr	r3, [pc, #176]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d116      	bne.n	80037e6 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b8:	4b29      	ldr	r3, [pc, #164]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_RCC_OscConfig+0x1e0>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e277      	b.n	8003cc0 <HAL_RCC_OscConfig+0x6d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d0:	4b23      	ldr	r3, [pc, #140]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	4920      	ldr	r1, [pc, #128]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e4:	e044      	b.n	8003870 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d023      	beq.n	8003836 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037ee:	4b1c      	ldr	r3, [pc, #112]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a1b      	ldr	r2, [pc, #108]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fa:	f7fe ffa9 	bl	8002750 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003802:	f7fe ffa5 	bl	8002750 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e255      	b.n	8003cc0 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003814:	4b12      	ldr	r3, [pc, #72]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0f0      	beq.n	8003802 <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003820:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	490c      	ldr	r1, [pc, #48]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003830:	4313      	orrs	r3, r2
 8003832:	600b      	str	r3, [r1, #0]
 8003834:	e01c      	b.n	8003870 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003836:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a09      	ldr	r2, [pc, #36]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 800383c:	f023 0301 	bic.w	r3, r3, #1
 8003840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003842:	f7fe ff85 	bl	8002750 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003848:	e00c      	b.n	8003864 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800384a:	f7fe ff81 	bl	8002750 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d905      	bls.n	8003864 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e231      	b.n	8003cc0 <HAL_RCC_OscConfig+0x6d0>
 800385c:	08008094 	.word	0x08008094
 8003860:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003864:	4b7e      	ldr	r3, [pc, #504]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1ec      	bne.n	800384a <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b00      	cmp	r3, #0
 800387a:	d043      	beq.n	8003904 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d008      	beq.n	8003896 <HAL_RCC_OscConfig+0x2a6>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d004      	beq.n	8003896 <HAL_RCC_OscConfig+0x2a6>
 800388c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8003890:	4874      	ldr	r0, [pc, #464]	; (8003a64 <HAL_RCC_OscConfig+0x474>)
 8003892:	f7fe f9c4 	bl	8001c1e <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d019      	beq.n	80038d2 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800389e:	4b70      	ldr	r3, [pc, #448]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 80038a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a2:	4a6f      	ldr	r2, [pc, #444]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038aa:	f7fe ff51 	bl	8002750 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b2:	f7fe ff4d 	bl	8002750 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e1fd      	b.n	8003cc0 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c4:	4b66      	ldr	r3, [pc, #408]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 80038c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f0      	beq.n	80038b2 <HAL_RCC_OscConfig+0x2c2>
 80038d0:	e018      	b.n	8003904 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038d2:	4b63      	ldr	r3, [pc, #396]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 80038d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d6:	4a62      	ldr	r2, [pc, #392]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 80038d8:	f023 0301 	bic.w	r3, r3, #1
 80038dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038de:	f7fe ff37 	bl	8002750 <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e6:	f7fe ff33 	bl	8002750 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e1e3      	b.n	8003cc0 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f8:	4b59      	ldr	r3, [pc, #356]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 80038fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1f0      	bne.n	80038e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 80bc 	beq.w	8003a8a <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00c      	beq.n	8003934 <HAL_RCC_OscConfig+0x344>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d008      	beq.n	8003934 <HAL_RCC_OscConfig+0x344>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b05      	cmp	r3, #5
 8003928:	d004      	beq.n	8003934 <HAL_RCC_OscConfig+0x344>
 800392a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800392e:	484d      	ldr	r0, [pc, #308]	; (8003a64 <HAL_RCC_OscConfig+0x474>)
 8003930:	f7fe f975 	bl	8001c1e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003934:	4b4a      	ldr	r3, [pc, #296]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10d      	bne.n	800395c <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003940:	4b47      	ldr	r3, [pc, #284]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	4a46      	ldr	r2, [pc, #280]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 8003946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800394a:	6413      	str	r3, [r2, #64]	; 0x40
 800394c:	4b44      	ldr	r3, [pc, #272]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003958:	2301      	movs	r3, #1
 800395a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800395c:	4b42      	ldr	r3, [pc, #264]	; (8003a68 <HAL_RCC_OscConfig+0x478>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003964:	2b00      	cmp	r3, #0
 8003966:	d118      	bne.n	800399a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003968:	4b3f      	ldr	r3, [pc, #252]	; (8003a68 <HAL_RCC_OscConfig+0x478>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a3e      	ldr	r2, [pc, #248]	; (8003a68 <HAL_RCC_OscConfig+0x478>)
 800396e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003972:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003974:	f7fe feec 	bl	8002750 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800397c:	f7fe fee8 	bl	8002750 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b64      	cmp	r3, #100	; 0x64
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e198      	b.n	8003cc0 <HAL_RCC_OscConfig+0x6d0>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800398e:	4b36      	ldr	r3, [pc, #216]	; (8003a68 <HAL_RCC_OscConfig+0x478>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0f0      	beq.n	800397c <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d106      	bne.n	80039b0 <HAL_RCC_OscConfig+0x3c0>
 80039a2:	4b2f      	ldr	r3, [pc, #188]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	4a2e      	ldr	r2, [pc, #184]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	6713      	str	r3, [r2, #112]	; 0x70
 80039ae:	e02d      	b.n	8003a0c <HAL_RCC_OscConfig+0x41c>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10c      	bne.n	80039d2 <HAL_RCC_OscConfig+0x3e2>
 80039b8:	4b29      	ldr	r3, [pc, #164]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 80039ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039bc:	4a28      	ldr	r2, [pc, #160]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 80039be:	f023 0301 	bic.w	r3, r3, #1
 80039c2:	6713      	str	r3, [r2, #112]	; 0x70
 80039c4:	4b26      	ldr	r3, [pc, #152]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 80039c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c8:	4a25      	ldr	r2, [pc, #148]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 80039ca:	f023 0304 	bic.w	r3, r3, #4
 80039ce:	6713      	str	r3, [r2, #112]	; 0x70
 80039d0:	e01c      	b.n	8003a0c <HAL_RCC_OscConfig+0x41c>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b05      	cmp	r3, #5
 80039d8:	d10c      	bne.n	80039f4 <HAL_RCC_OscConfig+0x404>
 80039da:	4b21      	ldr	r3, [pc, #132]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	4a20      	ldr	r2, [pc, #128]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 80039e0:	f043 0304 	orr.w	r3, r3, #4
 80039e4:	6713      	str	r3, [r2, #112]	; 0x70
 80039e6:	4b1e      	ldr	r3, [pc, #120]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 80039e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ea:	4a1d      	ldr	r2, [pc, #116]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	6713      	str	r3, [r2, #112]	; 0x70
 80039f2:	e00b      	b.n	8003a0c <HAL_RCC_OscConfig+0x41c>
 80039f4:	4b1a      	ldr	r3, [pc, #104]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	4a19      	ldr	r2, [pc, #100]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 80039fa:	f023 0301 	bic.w	r3, r3, #1
 80039fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003a00:	4b17      	ldr	r3, [pc, #92]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 8003a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a04:	4a16      	ldr	r2, [pc, #88]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 8003a06:	f023 0304 	bic.w	r3, r3, #4
 8003a0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d015      	beq.n	8003a40 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a14:	f7fe fe9c 	bl	8002750 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1a:	e00a      	b.n	8003a32 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a1c:	f7fe fe98 	bl	8002750 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e146      	b.n	8003cc0 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a32:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <HAL_RCC_OscConfig+0x470>)
 8003a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0ee      	beq.n	8003a1c <HAL_RCC_OscConfig+0x42c>
 8003a3e:	e01b      	b.n	8003a78 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a40:	f7fe fe86 	bl	8002750 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a46:	e011      	b.n	8003a6c <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a48:	f7fe fe82 	bl	8002750 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d908      	bls.n	8003a6c <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e130      	b.n	8003cc0 <HAL_RCC_OscConfig+0x6d0>
 8003a5e:	bf00      	nop
 8003a60:	40023800 	.word	0x40023800
 8003a64:	08008094 	.word	0x08008094
 8003a68:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a6c:	4b96      	ldr	r3, [pc, #600]	; (8003cc8 <HAL_RCC_OscConfig+0x6d8>)
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1e7      	bne.n	8003a48 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a78:	7dfb      	ldrb	r3, [r7, #23]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d105      	bne.n	8003a8a <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a7e:	4b92      	ldr	r3, [pc, #584]	; (8003cc8 <HAL_RCC_OscConfig+0x6d8>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	4a91      	ldr	r2, [pc, #580]	; (8003cc8 <HAL_RCC_OscConfig+0x6d8>)
 8003a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00c      	beq.n	8003aac <HAL_RCC_OscConfig+0x4bc>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d008      	beq.n	8003aac <HAL_RCC_OscConfig+0x4bc>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d004      	beq.n	8003aac <HAL_RCC_OscConfig+0x4bc>
 8003aa2:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8003aa6:	4889      	ldr	r0, [pc, #548]	; (8003ccc <HAL_RCC_OscConfig+0x6dc>)
 8003aa8:	f7fe f8b9 	bl	8001c1e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 8104 	beq.w	8003cbe <HAL_RCC_OscConfig+0x6ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ab6:	4b84      	ldr	r3, [pc, #528]	; (8003cc8 <HAL_RCC_OscConfig+0x6d8>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	f000 80c3 	beq.w	8003c4a <HAL_RCC_OscConfig+0x65a>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	f040 80a4 	bne.w	8003c16 <HAL_RCC_OscConfig+0x626>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d009      	beq.n	8003aea <HAL_RCC_OscConfig+0x4fa>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ade:	d004      	beq.n	8003aea <HAL_RCC_OscConfig+0x4fa>
 8003ae0:	f240 2155 	movw	r1, #597	; 0x255
 8003ae4:	4879      	ldr	r0, [pc, #484]	; (8003ccc <HAL_RCC_OscConfig+0x6dc>)
 8003ae6:	f7fe f89a 	bl	8001c1e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d903      	bls.n	8003afa <HAL_RCC_OscConfig+0x50a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	2b3f      	cmp	r3, #63	; 0x3f
 8003af8:	d904      	bls.n	8003b04 <HAL_RCC_OscConfig+0x514>
 8003afa:	f240 2156 	movw	r1, #598	; 0x256
 8003afe:	4873      	ldr	r0, [pc, #460]	; (8003ccc <HAL_RCC_OscConfig+0x6dc>)
 8003b00:	f7fe f88d 	bl	8001c1e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	2b31      	cmp	r3, #49	; 0x31
 8003b0a:	d904      	bls.n	8003b16 <HAL_RCC_OscConfig+0x526>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003b14:	d904      	bls.n	8003b20 <HAL_RCC_OscConfig+0x530>
 8003b16:	f240 2157 	movw	r1, #599	; 0x257
 8003b1a:	486c      	ldr	r0, [pc, #432]	; (8003ccc <HAL_RCC_OscConfig+0x6dc>)
 8003b1c:	f7fe f87f 	bl	8001c1e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d010      	beq.n	8003b4a <HAL_RCC_OscConfig+0x55a>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d00c      	beq.n	8003b4a <HAL_RCC_OscConfig+0x55a>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b34:	2b06      	cmp	r3, #6
 8003b36:	d008      	beq.n	8003b4a <HAL_RCC_OscConfig+0x55a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d004      	beq.n	8003b4a <HAL_RCC_OscConfig+0x55a>
 8003b40:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003b44:	4861      	ldr	r0, [pc, #388]	; (8003ccc <HAL_RCC_OscConfig+0x6dc>)
 8003b46:	f7fe f86a 	bl	8001c1e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d903      	bls.n	8003b5a <HAL_RCC_OscConfig+0x56a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b56:	2b0f      	cmp	r3, #15
 8003b58:	d904      	bls.n	8003b64 <HAL_RCC_OscConfig+0x574>
 8003b5a:	f240 2159 	movw	r1, #601	; 0x259
 8003b5e:	485b      	ldr	r0, [pc, #364]	; (8003ccc <HAL_RCC_OscConfig+0x6dc>)
 8003b60:	f7fe f85d 	bl	8001c1e <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d903      	bls.n	8003b74 <HAL_RCC_OscConfig+0x584>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	2b07      	cmp	r3, #7
 8003b72:	d904      	bls.n	8003b7e <HAL_RCC_OscConfig+0x58e>
 8003b74:	f240 215b 	movw	r1, #603	; 0x25b
 8003b78:	4854      	ldr	r0, [pc, #336]	; (8003ccc <HAL_RCC_OscConfig+0x6dc>)
 8003b7a:	f7fe f850 	bl	8001c1e <assert_failed>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7e:	4b52      	ldr	r3, [pc, #328]	; (8003cc8 <HAL_RCC_OscConfig+0x6d8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a51      	ldr	r2, [pc, #324]	; (8003cc8 <HAL_RCC_OscConfig+0x6d8>)
 8003b84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8a:	f7fe fde1 	bl	8002750 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x5b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b92:	f7fe fddd 	bl	8002750 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x5b4>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e08d      	b.n	8003cc0 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba4:	4b48      	ldr	r3, [pc, #288]	; (8003cc8 <HAL_RCC_OscConfig+0x6d8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1f0      	bne.n	8003b92 <HAL_RCC_OscConfig+0x5a2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69da      	ldr	r2, [r3, #28]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	019b      	lsls	r3, r3, #6
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	041b      	lsls	r3, r3, #16
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	061b      	lsls	r3, r3, #24
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	071b      	lsls	r3, r3, #28
 8003bdc:	493a      	ldr	r1, [pc, #232]	; (8003cc8 <HAL_RCC_OscConfig+0x6d8>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003be2:	4b39      	ldr	r3, [pc, #228]	; (8003cc8 <HAL_RCC_OscConfig+0x6d8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a38      	ldr	r2, [pc, #224]	; (8003cc8 <HAL_RCC_OscConfig+0x6d8>)
 8003be8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bee:	f7fe fdaf 	bl	8002750 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x618>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf6:	f7fe fdab 	bl	8002750 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e05b      	b.n	8003cc0 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c08:	4b2f      	ldr	r3, [pc, #188]	; (8003cc8 <HAL_RCC_OscConfig+0x6d8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0f0      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x606>
 8003c14:	e053      	b.n	8003cbe <HAL_RCC_OscConfig+0x6ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c16:	4b2c      	ldr	r3, [pc, #176]	; (8003cc8 <HAL_RCC_OscConfig+0x6d8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a2b      	ldr	r2, [pc, #172]	; (8003cc8 <HAL_RCC_OscConfig+0x6d8>)
 8003c1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c22:	f7fe fd95 	bl	8002750 <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x64c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c2a:	f7fe fd91 	bl	8002750 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e041      	b.n	8003cc0 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3c:	4b22      	ldr	r3, [pc, #136]	; (8003cc8 <HAL_RCC_OscConfig+0x6d8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1f0      	bne.n	8003c2a <HAL_RCC_OscConfig+0x63a>
 8003c48:	e039      	b.n	8003cbe <HAL_RCC_OscConfig+0x6ce>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003c4a:	4b1f      	ldr	r3, [pc, #124]	; (8003cc8 <HAL_RCC_OscConfig+0x6d8>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d030      	beq.n	8003cba <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d129      	bne.n	8003cba <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d122      	bne.n	8003cba <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c80:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d119      	bne.n	8003cba <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c90:	085b      	lsrs	r3, r3, #1
 8003c92:	3b01      	subs	r3, #1
 8003c94:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d10f      	bne.n	8003cba <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d107      	bne.n	8003cba <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d001      	beq.n	8003cbe <HAL_RCC_OscConfig+0x6ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <HAL_RCC_OscConfig+0x6d0>
      }
    }
  }
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	08008094 	.word	0x08008094

08003cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e18c      	b.n	8004002 <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x28>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b0f      	cmp	r3, #15
 8003cf6:	d904      	bls.n	8003d02 <HAL_RCC_ClockConfig+0x32>
 8003cf8:	f240 21df 	movw	r1, #735	; 0x2df
 8003cfc:	4887      	ldr	r0, [pc, #540]	; (8003f1c <HAL_RCC_ClockConfig+0x24c>)
 8003cfe:	f7fd ff8e 	bl	8001c1e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d031      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x9c>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d02e      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x9c>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d02b      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x9c>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d028      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x9c>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d025      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x9c>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	2b05      	cmp	r3, #5
 8003d24:	d022      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x9c>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b06      	cmp	r3, #6
 8003d2a:	d01f      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x9c>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	2b07      	cmp	r3, #7
 8003d30:	d01c      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x9c>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d019      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x9c>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	2b09      	cmp	r3, #9
 8003d3c:	d016      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x9c>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b0a      	cmp	r3, #10
 8003d42:	d013      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x9c>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	2b0b      	cmp	r3, #11
 8003d48:	d010      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x9c>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2b0c      	cmp	r3, #12
 8003d4e:	d00d      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x9c>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	2b0d      	cmp	r3, #13
 8003d54:	d00a      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x9c>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b0e      	cmp	r3, #14
 8003d5a:	d007      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x9c>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	2b0f      	cmp	r3, #15
 8003d60:	d004      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x9c>
 8003d62:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8003d66:	486d      	ldr	r0, [pc, #436]	; (8003f1c <HAL_RCC_ClockConfig+0x24c>)
 8003d68:	f7fd ff59 	bl	8001c1e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d6c:	4b6c      	ldr	r3, [pc, #432]	; (8003f20 <HAL_RCC_ClockConfig+0x250>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d910      	bls.n	8003d9c <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7a:	4b69      	ldr	r3, [pc, #420]	; (8003f20 <HAL_RCC_ClockConfig+0x250>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f023 020f 	bic.w	r2, r3, #15
 8003d82:	4967      	ldr	r1, [pc, #412]	; (8003f20 <HAL_RCC_ClockConfig+0x250>)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8a:	4b65      	ldr	r3, [pc, #404]	; (8003f20 <HAL_RCC_ClockConfig+0x250>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e132      	b.n	8004002 <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d049      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003db4:	4b5b      	ldr	r3, [pc, #364]	; (8003f24 <HAL_RCC_ClockConfig+0x254>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	4a5a      	ldr	r2, [pc, #360]	; (8003f24 <HAL_RCC_ClockConfig+0x254>)
 8003dba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dcc:	4b55      	ldr	r3, [pc, #340]	; (8003f24 <HAL_RCC_ClockConfig+0x254>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	4a54      	ldr	r2, [pc, #336]	; (8003f24 <HAL_RCC_ClockConfig+0x254>)
 8003dd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dd6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d024      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x15a>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b80      	cmp	r3, #128	; 0x80
 8003de6:	d020      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x15a>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b90      	cmp	r3, #144	; 0x90
 8003dee:	d01c      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x15a>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2ba0      	cmp	r3, #160	; 0xa0
 8003df6:	d018      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x15a>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	2bb0      	cmp	r3, #176	; 0xb0
 8003dfe:	d014      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x15a>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2bc0      	cmp	r3, #192	; 0xc0
 8003e06:	d010      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x15a>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2bd0      	cmp	r3, #208	; 0xd0
 8003e0e:	d00c      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x15a>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	2be0      	cmp	r3, #224	; 0xe0
 8003e16:	d008      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x15a>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2bf0      	cmp	r3, #240	; 0xf0
 8003e1e:	d004      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x15a>
 8003e20:	f44f 7141 	mov.w	r1, #772	; 0x304
 8003e24:	483d      	ldr	r0, [pc, #244]	; (8003f1c <HAL_RCC_ClockConfig+0x24c>)
 8003e26:	f7fd fefa 	bl	8001c1e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e2a:	4b3e      	ldr	r3, [pc, #248]	; (8003f24 <HAL_RCC_ClockConfig+0x254>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	493b      	ldr	r1, [pc, #236]	; (8003f24 <HAL_RCC_ClockConfig+0x254>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d051      	beq.n	8003eec <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00c      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x19a>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d008      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x19a>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d004      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x19a>
 8003e60:	f240 310b 	movw	r1, #779	; 0x30b
 8003e64:	482d      	ldr	r0, [pc, #180]	; (8003f1c <HAL_RCC_ClockConfig+0x24c>)
 8003e66:	f7fd feda 	bl	8001c1e <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d107      	bne.n	8003e82 <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e72:	4b2c      	ldr	r3, [pc, #176]	; (8003f24 <HAL_RCC_ClockConfig+0x254>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d115      	bne.n	8003eaa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e0bf      	b.n	8004002 <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d107      	bne.n	8003e9a <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e8a:	4b26      	ldr	r3, [pc, #152]	; (8003f24 <HAL_RCC_ClockConfig+0x254>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d109      	bne.n	8003eaa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e0b3      	b.n	8004002 <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9a:	4b22      	ldr	r3, [pc, #136]	; (8003f24 <HAL_RCC_ClockConfig+0x254>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e0ab      	b.n	8004002 <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eaa:	4b1e      	ldr	r3, [pc, #120]	; (8003f24 <HAL_RCC_ClockConfig+0x254>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f023 0203 	bic.w	r2, r3, #3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	491b      	ldr	r1, [pc, #108]	; (8003f24 <HAL_RCC_ClockConfig+0x254>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ebc:	f7fe fc48 	bl	8002750 <HAL_GetTick>
 8003ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec2:	e00a      	b.n	8003eda <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec4:	f7fe fc44 	bl	8002750 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e093      	b.n	8004002 <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eda:	4b12      	ldr	r3, [pc, #72]	; (8003f24 <HAL_RCC_ClockConfig+0x254>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 020c 	and.w	r2, r3, #12
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d1eb      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003eec:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <HAL_RCC_ClockConfig+0x250>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 030f 	and.w	r3, r3, #15
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d216      	bcs.n	8003f28 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efa:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <HAL_RCC_ClockConfig+0x250>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f023 020f 	bic.w	r2, r3, #15
 8003f02:	4907      	ldr	r1, [pc, #28]	; (8003f20 <HAL_RCC_ClockConfig+0x250>)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0a:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <HAL_RCC_ClockConfig+0x250>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d007      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e072      	b.n	8004002 <HAL_RCC_ClockConfig+0x332>
 8003f1c:	08008094 	.word	0x08008094
 8003f20:	40023c00 	.word	0x40023c00
 8003f24:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d025      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d018      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x29e>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f44:	d013      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x29e>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f4e:	d00e      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x29e>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003f58:	d009      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x29e>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003f62:	d004      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x29e>
 8003f64:	f44f 7152 	mov.w	r1, #840	; 0x348
 8003f68:	4828      	ldr	r0, [pc, #160]	; (800400c <HAL_RCC_ClockConfig+0x33c>)
 8003f6a:	f7fd fe58 	bl	8001c1e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f6e:	4b28      	ldr	r3, [pc, #160]	; (8004010 <HAL_RCC_ClockConfig+0x340>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	4925      	ldr	r1, [pc, #148]	; (8004010 <HAL_RCC_ClockConfig+0x340>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d026      	beq.n	8003fda <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d018      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x2f6>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f9c:	d013      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x2f6>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003fa6:	d00e      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x2f6>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003fb0:	d009      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x2f6>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003fba:	d004      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x2f6>
 8003fbc:	f240 314f 	movw	r1, #847	; 0x34f
 8003fc0:	4812      	ldr	r0, [pc, #72]	; (800400c <HAL_RCC_ClockConfig+0x33c>)
 8003fc2:	f7fd fe2c 	bl	8001c1e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fc6:	4b12      	ldr	r3, [pc, #72]	; (8004010 <HAL_RCC_ClockConfig+0x340>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	490e      	ldr	r1, [pc, #56]	; (8004010 <HAL_RCC_ClockConfig+0x340>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fda:	f000 f821 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 8003fde:	4601      	mov	r1, r0
 8003fe0:	4b0b      	ldr	r3, [pc, #44]	; (8004010 <HAL_RCC_ClockConfig+0x340>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	091b      	lsrs	r3, r3, #4
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	4a0a      	ldr	r2, [pc, #40]	; (8004014 <HAL_RCC_ClockConfig+0x344>)
 8003fec:	5cd3      	ldrb	r3, [r2, r3]
 8003fee:	fa21 f303 	lsr.w	r3, r1, r3
 8003ff2:	4a09      	ldr	r2, [pc, #36]	; (8004018 <HAL_RCC_ClockConfig+0x348>)
 8003ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ff6:	4b09      	ldr	r3, [pc, #36]	; (800401c <HAL_RCC_ClockConfig+0x34c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fe fb64 	bl	80026c8 <HAL_InitTick>

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	08008094 	.word	0x08008094
 8004010:	40023800 	.word	0x40023800
 8004014:	0800817c 	.word	0x0800817c
 8004018:	20000000 	.word	0x20000000
 800401c:	20000004 	.word	0x20000004

08004020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004026:	2300      	movs	r3, #0
 8004028:	607b      	str	r3, [r7, #4]
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	2300      	movs	r3, #0
 8004030:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004032:	2300      	movs	r3, #0
 8004034:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004036:	4b50      	ldr	r3, [pc, #320]	; (8004178 <HAL_RCC_GetSysClockFreq+0x158>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 030c 	and.w	r3, r3, #12
 800403e:	2b04      	cmp	r3, #4
 8004040:	d007      	beq.n	8004052 <HAL_RCC_GetSysClockFreq+0x32>
 8004042:	2b08      	cmp	r3, #8
 8004044:	d008      	beq.n	8004058 <HAL_RCC_GetSysClockFreq+0x38>
 8004046:	2b00      	cmp	r3, #0
 8004048:	f040 808d 	bne.w	8004166 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800404c:	4b4b      	ldr	r3, [pc, #300]	; (800417c <HAL_RCC_GetSysClockFreq+0x15c>)
 800404e:	60bb      	str	r3, [r7, #8]
      break;
 8004050:	e08c      	b.n	800416c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004052:	4b4b      	ldr	r3, [pc, #300]	; (8004180 <HAL_RCC_GetSysClockFreq+0x160>)
 8004054:	60bb      	str	r3, [r7, #8]
      break;
 8004056:	e089      	b.n	800416c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004058:	4b47      	ldr	r3, [pc, #284]	; (8004178 <HAL_RCC_GetSysClockFreq+0x158>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004060:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004062:	4b45      	ldr	r3, [pc, #276]	; (8004178 <HAL_RCC_GetSysClockFreq+0x158>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d023      	beq.n	80040b6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800406e:	4b42      	ldr	r3, [pc, #264]	; (8004178 <HAL_RCC_GetSysClockFreq+0x158>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	099b      	lsrs	r3, r3, #6
 8004074:	f04f 0400 	mov.w	r4, #0
 8004078:	f240 11ff 	movw	r1, #511	; 0x1ff
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	ea03 0501 	and.w	r5, r3, r1
 8004084:	ea04 0602 	and.w	r6, r4, r2
 8004088:	4a3d      	ldr	r2, [pc, #244]	; (8004180 <HAL_RCC_GetSysClockFreq+0x160>)
 800408a:	fb02 f106 	mul.w	r1, r2, r6
 800408e:	2200      	movs	r2, #0
 8004090:	fb02 f205 	mul.w	r2, r2, r5
 8004094:	440a      	add	r2, r1
 8004096:	493a      	ldr	r1, [pc, #232]	; (8004180 <HAL_RCC_GetSysClockFreq+0x160>)
 8004098:	fba5 0101 	umull	r0, r1, r5, r1
 800409c:	1853      	adds	r3, r2, r1
 800409e:	4619      	mov	r1, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f04f 0400 	mov.w	r4, #0
 80040a6:	461a      	mov	r2, r3
 80040a8:	4623      	mov	r3, r4
 80040aa:	f7fc f921 	bl	80002f0 <__aeabi_uldivmod>
 80040ae:	4603      	mov	r3, r0
 80040b0:	460c      	mov	r4, r1
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	e049      	b.n	800414a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040b6:	4b30      	ldr	r3, [pc, #192]	; (8004178 <HAL_RCC_GetSysClockFreq+0x158>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	099b      	lsrs	r3, r3, #6
 80040bc:	f04f 0400 	mov.w	r4, #0
 80040c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	ea03 0501 	and.w	r5, r3, r1
 80040cc:	ea04 0602 	and.w	r6, r4, r2
 80040d0:	4629      	mov	r1, r5
 80040d2:	4632      	mov	r2, r6
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	f04f 0400 	mov.w	r4, #0
 80040dc:	0154      	lsls	r4, r2, #5
 80040de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80040e2:	014b      	lsls	r3, r1, #5
 80040e4:	4619      	mov	r1, r3
 80040e6:	4622      	mov	r2, r4
 80040e8:	1b49      	subs	r1, r1, r5
 80040ea:	eb62 0206 	sbc.w	r2, r2, r6
 80040ee:	f04f 0300 	mov.w	r3, #0
 80040f2:	f04f 0400 	mov.w	r4, #0
 80040f6:	0194      	lsls	r4, r2, #6
 80040f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80040fc:	018b      	lsls	r3, r1, #6
 80040fe:	1a5b      	subs	r3, r3, r1
 8004100:	eb64 0402 	sbc.w	r4, r4, r2
 8004104:	f04f 0100 	mov.w	r1, #0
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	00e2      	lsls	r2, r4, #3
 800410e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004112:	00d9      	lsls	r1, r3, #3
 8004114:	460b      	mov	r3, r1
 8004116:	4614      	mov	r4, r2
 8004118:	195b      	adds	r3, r3, r5
 800411a:	eb44 0406 	adc.w	r4, r4, r6
 800411e:	f04f 0100 	mov.w	r1, #0
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	02a2      	lsls	r2, r4, #10
 8004128:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800412c:	0299      	lsls	r1, r3, #10
 800412e:	460b      	mov	r3, r1
 8004130:	4614      	mov	r4, r2
 8004132:	4618      	mov	r0, r3
 8004134:	4621      	mov	r1, r4
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f04f 0400 	mov.w	r4, #0
 800413c:	461a      	mov	r2, r3
 800413e:	4623      	mov	r3, r4
 8004140:	f7fc f8d6 	bl	80002f0 <__aeabi_uldivmod>
 8004144:	4603      	mov	r3, r0
 8004146:	460c      	mov	r4, r1
 8004148:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800414a:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <HAL_RCC_GetSysClockFreq+0x158>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	0c1b      	lsrs	r3, r3, #16
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	3301      	adds	r3, #1
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004162:	60bb      	str	r3, [r7, #8]
      break;
 8004164:	e002      	b.n	800416c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004166:	4b05      	ldr	r3, [pc, #20]	; (800417c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004168:	60bb      	str	r3, [r7, #8]
      break;
 800416a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800416c:	68bb      	ldr	r3, [r7, #8]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004176:	bf00      	nop
 8004178:	40023800 	.word	0x40023800
 800417c:	00f42400 	.word	0x00f42400
 8004180:	017d7840 	.word	0x017d7840

08004184 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004188:	4b03      	ldr	r3, [pc, #12]	; (8004198 <HAL_RCC_GetHCLKFreq+0x14>)
 800418a:	681b      	ldr	r3, [r3, #0]
}
 800418c:	4618      	mov	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	20000000 	.word	0x20000000

0800419c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041a0:	f7ff fff0 	bl	8004184 <HAL_RCC_GetHCLKFreq>
 80041a4:	4601      	mov	r1, r0
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	0a9b      	lsrs	r3, r3, #10
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	4a03      	ldr	r2, [pc, #12]	; (80041c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041b2:	5cd3      	ldrb	r3, [r2, r3]
 80041b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40023800 	.word	0x40023800
 80041c0:	0800818c 	.word	0x0800818c

080041c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041c8:	f7ff ffdc 	bl	8004184 <HAL_RCC_GetHCLKFreq>
 80041cc:	4601      	mov	r1, r0
 80041ce:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	0b5b      	lsrs	r3, r3, #13
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	4a03      	ldr	r2, [pc, #12]	; (80041e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041da:	5cd3      	ldrb	r3, [r2, r3]
 80041dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40023800 	.word	0x40023800
 80041e8:	0800818c 	.word	0x0800818c

080041ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80041fc:	2300      	movs	r3, #0
 80041fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004200:	2300      	movs	r3, #0
 8004202:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	f040 809e 	bne.w	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	f040 8097 	bne.w	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2b00      	cmp	r3, #0
 800422e:	f040 8090 	bne.w	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423a:	2b00      	cmp	r3, #0
 800423c:	f040 8089 	bne.w	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004248:	2b00      	cmp	r3, #0
 800424a:	f040 8082 	bne.w	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d17b      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004262:	2b00      	cmp	r3, #0
 8004264:	d175      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800426e:	2b00      	cmp	r3, #0
 8004270:	d16f      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800427a:	2b00      	cmp	r3, #0
 800427c:	d169      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d163      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d15d      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d157      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d151      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d14b      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d145      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d13f      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d139      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d133      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d12d      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d127      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d121      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d11b      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d115      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10f      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d109      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	d103      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800434a:	2174      	movs	r1, #116	; 0x74
 800434c:	48a2      	ldr	r0, [pc, #648]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800434e:	f7fd fc66 	bl	8001c1e <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d01f      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004362:	2b00      	cmp	r3, #0
 8004364:	d008      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800436e:	d003      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004370:	217a      	movs	r1, #122	; 0x7a
 8004372:	4899      	ldr	r0, [pc, #612]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004374:	f7fd fc53 	bl	8001c1e <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004378:	4b98      	ldr	r3, [pc, #608]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	4a97      	ldr	r2, [pc, #604]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 800437e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004382:	6093      	str	r3, [r2, #8]
 8004384:	4b95      	ldr	r3, [pc, #596]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438c:	4993      	ldr	r1, [pc, #588]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 800438e:	4313      	orrs	r3, r2
 8004390:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      plli2sused = 1;
 800439a:	2301      	movs	r3, #1
 800439c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d02e      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d012      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ba:	d00d      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043c4:	d008      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043ce:	d003      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80043d0:	218a      	movs	r1, #138	; 0x8a
 80043d2:	4881      	ldr	r0, [pc, #516]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80043d4:	f7fd fc23 	bl	8001c1e <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043d8:	4b80      	ldr	r3, [pc, #512]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80043da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e6:	497d      	ldr	r1, [pc, #500]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043f6:	d101      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x210>
    {
      plli2sused = 1;
 80043f8:	2301      	movs	r3, #1
 80043fa:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      pllsaiused = 1;
 8004404:	2301      	movs	r3, #1
 8004406:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d02e      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d012      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004424:	d00d      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800442e:	d008      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004438:	d003      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800443a:	219e      	movs	r1, #158	; 0x9e
 800443c:	4866      	ldr	r0, [pc, #408]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800443e:	f7fd fbee 	bl	8001c1e <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004442:	4b66      	ldr	r3, [pc, #408]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8004444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004448:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	4962      	ldr	r1, [pc, #392]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004460:	d101      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      plli2sused = 1;
 8004462:	2301      	movs	r3, #1
 8004464:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      pllsaiused = 1;
 800446e:	2301      	movs	r3, #1
 8004470:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
      plli2sused = 1;
 800447e:	2301      	movs	r3, #1
 8004480:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0320 	and.w	r3, r3, #32
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 8187 	beq.w	800479e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004498:	f000 80eb 	beq.w	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044a4:	f000 80e5 	beq.w	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	4a4c      	ldr	r2, [pc, #304]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	f000 80df 	beq.w	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b8:	4a4a      	ldr	r2, [pc, #296]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	f000 80d9 	beq.w	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c4:	4a48      	ldr	r2, [pc, #288]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	f000 80d3 	beq.w	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	4a46      	ldr	r2, [pc, #280]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	f000 80cd 	beq.w	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044dc:	4a44      	ldr	r2, [pc, #272]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	f000 80c7 	beq.w	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e8:	4a42      	ldr	r2, [pc, #264]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	f000 80c1 	beq.w	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f4:	4a40      	ldr	r2, [pc, #256]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	f000 80bb 	beq.w	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004500:	4a3e      	ldr	r2, [pc, #248]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x410>)
 8004502:	4293      	cmp	r3, r2
 8004504:	f000 80b5 	beq.w	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450c:	4a3c      	ldr	r2, [pc, #240]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x414>)
 800450e:	4293      	cmp	r3, r2
 8004510:	f000 80af 	beq.w	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	4a3a      	ldr	r2, [pc, #232]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 800451a:	4293      	cmp	r3, r2
 800451c:	f000 80a9 	beq.w	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004524:	4a38      	ldr	r2, [pc, #224]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	f000 80a3 	beq.w	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004530:	4a36      	ldr	r2, [pc, #216]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8004532:	4293      	cmp	r3, r2
 8004534:	f000 809d 	beq.w	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453c:	4a34      	ldr	r2, [pc, #208]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800453e:	4293      	cmp	r3, r2
 8004540:	f000 8097 	beq.w	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004548:	4a32      	ldr	r2, [pc, #200]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800454a:	4293      	cmp	r3, r2
 800454c:	f000 8091 	beq.w	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004554:	4a30      	ldr	r2, [pc, #192]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	f000 808b 	beq.w	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	4a2e      	ldr	r2, [pc, #184]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8004562:	4293      	cmp	r3, r2
 8004564:	f000 8085 	beq.w	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	4a2c      	ldr	r2, [pc, #176]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d07f      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004576:	4a2b      	ldr	r2, [pc, #172]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d07a      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004580:	4a29      	ldr	r2, [pc, #164]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d075      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458a:	4a28      	ldr	r2, [pc, #160]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x440>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d070      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004594:	4a26      	ldr	r2, [pc, #152]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d06b      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	4a25      	ldr	r2, [pc, #148]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d066      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a8:	4a23      	ldr	r2, [pc, #140]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d061      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	4a22      	ldr	r2, [pc, #136]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d05c      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	4a20      	ldr	r2, [pc, #128]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d057      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	4a1f      	ldr	r2, [pc, #124]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d052      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	4a1d      	ldr	r2, [pc, #116]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d04d      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80045d6:	e039      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x460>
 80045d8:	080080cc 	.word	0x080080cc
 80045dc:	40023800 	.word	0x40023800
 80045e0:	00020300 	.word	0x00020300
 80045e4:	00030300 	.word	0x00030300
 80045e8:	00040300 	.word	0x00040300
 80045ec:	00050300 	.word	0x00050300
 80045f0:	00060300 	.word	0x00060300
 80045f4:	00070300 	.word	0x00070300
 80045f8:	00080300 	.word	0x00080300
 80045fc:	00090300 	.word	0x00090300
 8004600:	000a0300 	.word	0x000a0300
 8004604:	000b0300 	.word	0x000b0300
 8004608:	000c0300 	.word	0x000c0300
 800460c:	000d0300 	.word	0x000d0300
 8004610:	000e0300 	.word	0x000e0300
 8004614:	000f0300 	.word	0x000f0300
 8004618:	00100300 	.word	0x00100300
 800461c:	00110300 	.word	0x00110300
 8004620:	00120300 	.word	0x00120300
 8004624:	00130300 	.word	0x00130300
 8004628:	00140300 	.word	0x00140300
 800462c:	00150300 	.word	0x00150300
 8004630:	00160300 	.word	0x00160300
 8004634:	00170300 	.word	0x00170300
 8004638:	00180300 	.word	0x00180300
 800463c:	00190300 	.word	0x00190300
 8004640:	001a0300 	.word	0x001a0300
 8004644:	001b0300 	.word	0x001b0300
 8004648:	001c0300 	.word	0x001c0300
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004650:	4a44      	ldr	r2, [pc, #272]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00d      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	4a43      	ldr	r2, [pc, #268]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d008      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004664:	4a41      	ldr	r2, [pc, #260]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d003      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800466a:	21b9      	movs	r1, #185	; 0xb9
 800466c:	4840      	ldr	r0, [pc, #256]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800466e:	f7fd fad6 	bl	8001c1e <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004672:	4b40      	ldr	r3, [pc, #256]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	4a3f      	ldr	r2, [pc, #252]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467c:	6413      	str	r3, [r2, #64]	; 0x40
 800467e:	4b3d      	ldr	r3, [pc, #244]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004686:	60bb      	str	r3, [r7, #8]
 8004688:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800468a:	4b3b      	ldr	r3, [pc, #236]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a3a      	ldr	r2, [pc, #232]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004696:	f7fe f85b 	bl	8002750 <HAL_GetTick>
 800469a:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800469c:	e009      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800469e:	f7fe f857 	bl	8002750 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b64      	cmp	r3, #100	; 0x64
 80046aa:	d902      	bls.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
      {
        return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	f000 be00 	b.w	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046b2:	4b31      	ldr	r3, [pc, #196]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0ef      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046be:	4b2d      	ldr	r3, [pc, #180]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d036      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x550>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d02f      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046dc:	4b25      	ldr	r3, [pc, #148]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80046de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046e6:	4b23      	ldr	r3, [pc, #140]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	4a22      	ldr	r2, [pc, #136]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80046ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046f2:	4b20      	ldr	r3, [pc, #128]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f6:	4a1f      	ldr	r2, [pc, #124]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80046f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80046fe:	4a1d      	ldr	r2, [pc, #116]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004704:	4b1b      	ldr	r3, [pc, #108]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b01      	cmp	r3, #1
 800470e:	d115      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x550>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004710:	f7fe f81e 	bl	8002750 <HAL_GetTick>
 8004714:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004716:	e00b      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x544>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004718:	f7fe f81a 	bl	8002750 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f241 3288 	movw	r2, #5000	; 0x1388
 8004726:	4293      	cmp	r3, r2
 8004728:	d902      	bls.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x544>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	f000 bdc1 	b.w	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004730:	4b10      	ldr	r3, [pc, #64]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0ed      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x52c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004744:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004748:	d11a      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800474a:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004756:	4b09      	ldr	r3, [pc, #36]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004758:	400b      	ands	r3, r1
 800475a:	4906      	ldr	r1, [pc, #24]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800475c:	4313      	orrs	r3, r2
 800475e:	608b      	str	r3, [r1, #8]
 8004760:	e014      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 8004762:	bf00      	nop
 8004764:	001d0300 	.word	0x001d0300
 8004768:	001e0300 	.word	0x001e0300
 800476c:	001f0300 	.word	0x001f0300
 8004770:	080080cc 	.word	0x080080cc
 8004774:	40023800 	.word	0x40023800
 8004778:	40007000 	.word	0x40007000
 800477c:	0ffffcff 	.word	0x0ffffcff
 8004780:	4ba7      	ldr	r3, [pc, #668]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	4aa6      	ldr	r2, [pc, #664]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004786:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800478a:	6093      	str	r3, [r2, #8]
 800478c:	4ba4      	ldr	r3, [pc, #656]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800478e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004798:	49a1      	ldr	r1, [pc, #644]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800479a:	4313      	orrs	r3, r2
 800479c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d01d      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d008      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047ba:	d003      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 80047bc:	21f3      	movs	r1, #243	; 0xf3
 80047be:	4899      	ldr	r0, [pc, #612]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80047c0:	f7fd fa2d 	bl	8001c1e <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047c4:	4b96      	ldr	r3, [pc, #600]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ca:	4a95      	ldr	r2, [pc, #596]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047d0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80047d4:	4b92      	ldr	r3, [pc, #584]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047d6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	4990      	ldr	r1, [pc, #576]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d01c      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00d      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004802:	d008      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004808:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800480c:	d003      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 800480e:	21fd      	movs	r1, #253	; 0xfd
 8004810:	4884      	ldr	r0, [pc, #528]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004812:	f7fd fa04 	bl	8001c1e <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004816:	4b82      	ldr	r3, [pc, #520]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004824:	497e      	ldr	r1, [pc, #504]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d01d      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00e      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004844:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004848:	d009      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800484e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004852:	d004      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004854:	f240 1107 	movw	r1, #263	; 0x107
 8004858:	4872      	ldr	r0, [pc, #456]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800485a:	f7fd f9e0 	bl	8001c1e <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800485e:	4b70      	ldr	r3, [pc, #448]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004864:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800486c:	496c      	ldr	r1, [pc, #432]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800486e:	4313      	orrs	r3, r2
 8004870:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01d      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00e      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800488c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004890:	d009      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004896:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800489a:	d004      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 800489c:	f240 1111 	movw	r1, #273	; 0x111
 80048a0:	4860      	ldr	r0, [pc, #384]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80048a2:	f7fd f9bc 	bl	8001c1e <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048a6:	4b5e      	ldr	r3, [pc, #376]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048b4:	495a      	ldr	r1, [pc, #360]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01d      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x718>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00e      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x702>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048d8:	d009      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x702>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048e2:	d004      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x702>
 80048e4:	f240 111b 	movw	r1, #283	; 0x11b
 80048e8:	484e      	ldr	r0, [pc, #312]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80048ea:	f7fd f998 	bl	8001c1e <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048ee:	4b4c      	ldr	r3, [pc, #304]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fc:	4948      	ldr	r1, [pc, #288]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490c:	2b00      	cmp	r3, #0
 800490e:	d01f      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x764>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004914:	2b00      	cmp	r3, #0
 8004916:	d010      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491c:	2b01      	cmp	r3, #1
 800491e:	d00c      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004924:	2b03      	cmp	r3, #3
 8004926:	d008      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492c:	2b02      	cmp	r3, #2
 800492e:	d004      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004930:	f240 1125 	movw	r1, #293	; 0x125
 8004934:	483b      	ldr	r0, [pc, #236]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004936:	f7fd f972 	bl	8001c1e <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800493a:	4b39      	ldr	r3, [pc, #228]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800493c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004940:	f023 0203 	bic.w	r2, r3, #3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004948:	4935      	ldr	r1, [pc, #212]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004958:	2b00      	cmp	r3, #0
 800495a:	d01f      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004960:	2b00      	cmp	r3, #0
 8004962:	d010      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004968:	2b04      	cmp	r3, #4
 800496a:	d00c      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004970:	2b0c      	cmp	r3, #12
 8004972:	d008      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004978:	2b08      	cmp	r3, #8
 800497a:	d004      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 800497c:	f240 112f 	movw	r1, #303	; 0x12f
 8004980:	4828      	ldr	r0, [pc, #160]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004982:	f7fd f94c 	bl	8001c1e <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004986:	4b26      	ldr	r3, [pc, #152]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498c:	f023 020c 	bic.w	r2, r3, #12
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004994:	4922      	ldr	r1, [pc, #136]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004996:	4313      	orrs	r3, r2
 8004998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d01f      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d010      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b4:	2b10      	cmp	r3, #16
 80049b6:	d00c      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049bc:	2b30      	cmp	r3, #48	; 0x30
 80049be:	d008      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	d004      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80049c8:	f240 1139 	movw	r1, #313	; 0x139
 80049cc:	4815      	ldr	r0, [pc, #84]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80049ce:	f7fd f926 	bl	8001c1e <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049d2:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049e0:	490f      	ldr	r1, [pc, #60]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d024      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d015      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a00:	2b40      	cmp	r3, #64	; 0x40
 8004a02:	d011      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a08:	2bc0      	cmp	r3, #192	; 0xc0
 8004a0a:	d00d      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a10:	2b80      	cmp	r3, #128	; 0x80
 8004a12:	d009      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004a14:	f240 1143 	movw	r1, #323	; 0x143
 8004a18:	4802      	ldr	r0, [pc, #8]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004a1a:	f7fd f900 	bl	8001c1e <assert_failed>
 8004a1e:	e003      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004a20:	40023800 	.word	0x40023800
 8004a24:	080080cc 	.word	0x080080cc

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a28:	4bae      	ldr	r3, [pc, #696]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a36:	49ab      	ldr	r1, [pc, #684]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d022      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d013      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a5a:	d00e      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a64:	d009      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a6e:	d004      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004a70:	f240 114d 	movw	r1, #333	; 0x14d
 8004a74:	489c      	ldr	r0, [pc, #624]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004a76:	f7fd f8d2 	bl	8001c1e <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a7a:	4b9a      	ldr	r3, [pc, #616]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a88:	4996      	ldr	r1, [pc, #600]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d022      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d013      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aac:	d00e      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ab6:	d009      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ac0:	d004      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8004ac2:	f240 1157 	movw	r1, #343	; 0x157
 8004ac6:	4888      	ldr	r0, [pc, #544]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004ac8:	f7fd f8a9 	bl	8001c1e <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004acc:	4b85      	ldr	r3, [pc, #532]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ada:	4982      	ldr	r1, [pc, #520]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d022      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d013      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x932>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afe:	d00e      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x932>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b08:	d009      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x932>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b12:	d004      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x932>
 8004b14:	f240 1161 	movw	r1, #353	; 0x161
 8004b18:	4873      	ldr	r0, [pc, #460]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004b1a:	f7fd f880 	bl	8001c1e <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004b1e:	4b71      	ldr	r3, [pc, #452]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b2c:	496d      	ldr	r1, [pc, #436]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d022      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d013      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b50:	d00e      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b56:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b5a:	d009      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b64:	d004      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004b66:	f240 116b 	movw	r1, #363	; 0x16b
 8004b6a:	485f      	ldr	r0, [pc, #380]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004b6c:	f7fd f857 	bl	8001c1e <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004b70:	4b5c      	ldr	r3, [pc, #368]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b7e:	4959      	ldr	r1, [pc, #356]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d018      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b9a:	d008      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d004      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8004ba4:	f240 1175 	movw	r1, #373	; 0x175
 8004ba8:	484f      	ldr	r0, [pc, #316]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004baa:	f7fd f838 	bl	8001c1e <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004bae:	4b4d      	ldr	r3, [pc, #308]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bbc:	4949      	ldr	r1, [pc, #292]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01f      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bd8:	d008      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d004      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004be2:	f240 117f 	movw	r1, #383	; 0x17f
 8004be6:	4840      	ldr	r0, [pc, #256]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004be8:	f7fd f819 	bl	8001c1e <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004bec:	4b3d      	ldr	r3, [pc, #244]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bfa:	493a      	ldr	r1, [pc, #232]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c0a:	d101      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      pllsaiused = 1;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    pllsaiused = 1;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d022      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xa86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d013      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c3c:	d00e      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c46:	d009      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c50:	d004      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004c52:	f240 1197 	movw	r1, #407	; 0x197
 8004c56:	4824      	ldr	r0, [pc, #144]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004c58:	f7fc ffe1 	bl	8001c1e <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c5c:	4b21      	ldr	r3, [pc, #132]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c6a:	491e      	ldr	r1, [pc, #120]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d01b      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xaca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c88:	d009      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d004      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004c94:	f240 11a1 	movw	r1, #417	; 0x1a1
 8004c98:	4813      	ldr	r0, [pc, #76]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004c9a:	f7fc ffc0 	bl	8001c1e <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c9e:	4b11      	ldr	r3, [pc, #68]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cae:	490d      	ldr	r1, [pc, #52]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d020      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ccc:	d00e      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d009      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8004cd8:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8004cdc:	4802      	ldr	r0, [pc, #8]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004cde:	f7fc ff9e 	bl	8001c1e <assert_failed>
 8004ce2:	e003      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	080080cc 	.word	0x080080cc

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004cec:	4b35      	ldr	r3, [pc, #212]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cfc:	4931      	ldr	r1, [pc, #196]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01b      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d24:	d004      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 8004d26:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8004d2a:	4827      	ldr	r0, [pc, #156]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004d2c:	f7fc ff77 	bl	8001c1e <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d30:	4b24      	ldr	r3, [pc, #144]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d36:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d40:	4920      	ldr	r1, [pc, #128]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01b      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d68:	d004      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004d6a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004d6e:	4816      	ldr	r0, [pc, #88]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004d70:	f7fc ff55 	bl	8001c1e <assert_failed>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004d74:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d7a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d84:	490f      	ldr	r1, [pc, #60]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d005      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d9a:	f040 8153 	bne.w	8005044 <HAL_RCCEx_PeriphCLKConfig+0xe58>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d9e:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a08      	ldr	r2, [pc, #32]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004da4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004da8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004daa:	f7fd fcd1 	bl	8002750 <HAL_GetTick>
 8004dae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004db0:	e00c      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004db2:	f7fd fccd 	bl	8002750 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b64      	cmp	r3, #100	; 0x64
 8004dbe:	d905      	bls.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e276      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	080080cc 	.word	0x080080cc
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dcc:	4ba9      	ldr	r3, [pc, #676]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1ec      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2b31      	cmp	r3, #49	; 0x31
 8004dde:	d904      	bls.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004de8:	d904      	bls.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004dea:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8004dee:	48a2      	ldr	r0, [pc, #648]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004df0:	f7fc ff15 	bl	8001c1e <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d02e      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d12a      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d903      	bls.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	2b07      	cmp	r3, #7
 8004e16:	d904      	bls.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8004e18:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8004e1c:	4896      	ldr	r0, [pc, #600]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004e1e:	f7fc fefe 	bl	8001c1e <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e22:	4b94      	ldr	r3, [pc, #592]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e28:	0c1b      	lsrs	r3, r3, #16
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e30:	4b90      	ldr	r3, [pc, #576]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e36:	0e1b      	lsrs	r3, r3, #24
 8004e38:	f003 030f 	and.w	r3, r3, #15
 8004e3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	019a      	lsls	r2, r3, #6
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	041b      	lsls	r3, r3, #16
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	061b      	lsls	r3, r3, #24
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	071b      	lsls	r3, r3, #28
 8004e56:	4987      	ldr	r1, [pc, #540]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d004      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0xc88>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e72:	d00a      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d048      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xd26>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e88:	d143      	bne.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d903      	bls.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0xcae>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	2b0f      	cmp	r3, #15
 8004e98:	d904      	bls.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 8004e9a:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8004e9e:	4876      	ldr	r0, [pc, #472]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004ea0:	f7fc febd 	bl	8001c1e <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	2b20      	cmp	r3, #32
 8004eb2:	d904      	bls.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 8004eb4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004eb8:	486f      	ldr	r0, [pc, #444]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004eba:	f7fc feb0 	bl	8001c1e <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ebe:	4b6d      	ldr	r3, [pc, #436]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ec4:	0c1b      	lsrs	r3, r3, #16
 8004ec6:	f003 0303 	and.w	r3, r3, #3
 8004eca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ecc:	4b69      	ldr	r3, [pc, #420]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ed2:	0f1b      	lsrs	r3, r3, #28
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	019a      	lsls	r2, r3, #6
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	041b      	lsls	r3, r3, #16
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	061b      	lsls	r3, r3, #24
 8004eec:	431a      	orrs	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	071b      	lsls	r3, r3, #28
 8004ef2:	4960      	ldr	r1, [pc, #384]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004efa:	4b5e      	ldr	r3, [pc, #376]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f00:	f023 021f 	bic.w	r2, r3, #31
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	495a      	ldr	r1, [pc, #360]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d032      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xd98>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d010      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d00c      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d008      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	d004      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8004f3e:	f240 2107 	movw	r1, #519	; 0x207
 8004f42:	484d      	ldr	r0, [pc, #308]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004f44:	f7fc fe6b 	bl	8001c1e <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f48:	4b4a      	ldr	r3, [pc, #296]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f4e:	0e1b      	lsrs	r3, r3, #24
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f56:	4b47      	ldr	r3, [pc, #284]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f5c:	0f1b      	lsrs	r3, r3, #28
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	019a      	lsls	r2, r3, #6
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	041b      	lsls	r3, r3, #16
 8004f70:	431a      	orrs	r2, r3
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	061b      	lsls	r3, r3, #24
 8004f76:	431a      	orrs	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	071b      	lsls	r3, r3, #28
 8004f7c:	493d      	ldr	r1, [pc, #244]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d040      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d010      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d00c      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d008      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	2b03      	cmp	r3, #3
 8004fae:	d004      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004fb0:	f240 2116 	movw	r1, #534	; 0x216
 8004fb4:	4830      	ldr	r0, [pc, #192]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004fb6:	f7fc fe32 	bl	8001c1e <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d903      	bls.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	2b07      	cmp	r3, #7
 8004fc8:	d904      	bls.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
 8004fca:	f240 2117 	movw	r1, #535	; 0x217
 8004fce:	482a      	ldr	r0, [pc, #168]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004fd0:	f7fc fe25 	bl	8001c1e <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d903      	bls.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	2b0f      	cmp	r3, #15
 8004fe2:	d904      	bls.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0xe02>
 8004fe4:	f44f 7106 	mov.w	r1, #536	; 0x218
 8004fe8:	4823      	ldr	r0, [pc, #140]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004fea:	f7fc fe18 	bl	8001c1e <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	019a      	lsls	r2, r3, #6
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	041b      	lsls	r3, r3, #16
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	061b      	lsls	r3, r3, #24
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	071b      	lsls	r3, r3, #28
 800500a:	491a      	ldr	r1, [pc, #104]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005012:	4b18      	ldr	r3, [pc, #96]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a17      	ldr	r2, [pc, #92]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005018:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800501c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800501e:	f7fd fb97 	bl	8002750 <HAL_GetTick>
 8005022:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005024:	e008      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005026:	f7fd fb93 	bl	8002750 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b64      	cmp	r3, #100	; 0x64
 8005032:	d901      	bls.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e13c      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005038:	4b0e      	ldr	r3, [pc, #56]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0f0      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	2b01      	cmp	r3, #1
 8005048:	f040 8132 	bne.w	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800504c:	4b09      	ldr	r3, [pc, #36]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a08      	ldr	r2, [pc, #32]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005056:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005058:	f7fd fb7a 	bl	8002750 <HAL_GetTick>
 800505c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800505e:	e00d      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xe90>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005060:	f7fd fb76 	bl	8002750 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b64      	cmp	r3, #100	; 0x64
 800506c:	d906      	bls.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xe90>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e11f      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 8005072:	bf00      	nop
 8005074:	40023800 	.word	0x40023800
 8005078:	080080cc 	.word	0x080080cc
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800507c:	4b8f      	ldr	r3, [pc, #572]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005084:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005088:	d0ea      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xe74>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	2b31      	cmp	r3, #49	; 0x31
 8005090:	d904      	bls.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xeb0>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800509a:	d904      	bls.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xeba>
 800509c:	f240 2146 	movw	r1, #582	; 0x246
 80050a0:	4887      	ldr	r0, [pc, #540]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 80050a2:	f7fc fdbc 	bl	8001c1e <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xece>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d009      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xee2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d048      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d144      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d903      	bls.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xef2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	2b0f      	cmp	r3, #15
 80050dc:	d904      	bls.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xefc>
 80050de:	f240 214d 	movw	r1, #589	; 0x24d
 80050e2:	4877      	ldr	r0, [pc, #476]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 80050e4:	f7fc fd9b 	bl	8001c1e <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	d904      	bls.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80050f8:	f240 214f 	movw	r1, #591	; 0x24f
 80050fc:	4870      	ldr	r0, [pc, #448]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 80050fe:	f7fc fd8e 	bl	8001c1e <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005102:	4b6e      	ldr	r3, [pc, #440]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005108:	0c1b      	lsrs	r3, r3, #16
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005110:	4b6a      	ldr	r3, [pc, #424]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005116:	0f1b      	lsrs	r3, r3, #28
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	019a      	lsls	r2, r3, #6
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	041b      	lsls	r3, r3, #16
 8005128:	431a      	orrs	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	061b      	lsls	r3, r3, #24
 8005130:	431a      	orrs	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	071b      	lsls	r3, r3, #28
 8005136:	4961      	ldr	r1, [pc, #388]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800513e:	4b5f      	ldr	r3, [pc, #380]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005144:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514c:	3b01      	subs	r3, #1
 800514e:	021b      	lsls	r3, r3, #8
 8005150:	495a      	ldr	r1, [pc, #360]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d037      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005168:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800516c:	d132      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d010      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d00c      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	2b02      	cmp	r3, #2
 8005184:	d008      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	2b03      	cmp	r3, #3
 800518c:	d004      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 800518e:	f240 2162 	movw	r1, #610	; 0x262
 8005192:	484b      	ldr	r0, [pc, #300]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8005194:	f7fc fd43 	bl	8001c1e <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005198:	4b48      	ldr	r3, [pc, #288]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800519a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519e:	0e1b      	lsrs	r3, r3, #24
 80051a0:	f003 030f 	and.w	r3, r3, #15
 80051a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051a6:	4b45      	ldr	r3, [pc, #276]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80051a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ac:	0f1b      	lsrs	r3, r3, #28
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	019a      	lsls	r2, r3, #6
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	041b      	lsls	r3, r3, #16
 80051c0:	431a      	orrs	r2, r3
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	061b      	lsls	r3, r3, #24
 80051c6:	431a      	orrs	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	071b      	lsls	r3, r3, #28
 80051cc:	493b      	ldr	r1, [pc, #236]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0308 	and.w	r3, r3, #8
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d04d      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x1090>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d903      	bls.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x1004>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	2b07      	cmp	r3, #7
 80051ee:	d904      	bls.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x100e>
 80051f0:	f240 2171 	movw	r1, #625	; 0x271
 80051f4:	4832      	ldr	r0, [pc, #200]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 80051f6:	f7fc fd12 	bl	8001c1e <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d013      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800520a:	d00e      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x103e>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005214:	d009      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800521e:	d004      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8005220:	f240 2172 	movw	r1, #626	; 0x272
 8005224:	4826      	ldr	r0, [pc, #152]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8005226:	f7fc fcfa 	bl	8001c1e <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800522a:	4b24      	ldr	r3, [pc, #144]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800522c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005230:	0e1b      	lsrs	r3, r3, #24
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005238:	4b20      	ldr	r3, [pc, #128]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523e:	0c1b      	lsrs	r3, r3, #16
 8005240:	f003 0303 	and.w	r3, r3, #3
 8005244:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	019a      	lsls	r2, r3, #6
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	041b      	lsls	r3, r3, #16
 8005250:	431a      	orrs	r2, r3
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	061b      	lsls	r3, r3, #24
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	69db      	ldr	r3, [r3, #28]
 800525c:	071b      	lsls	r3, r3, #28
 800525e:	4917      	ldr	r1, [pc, #92]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005266:	4b15      	ldr	r3, [pc, #84]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800526c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005274:	4911      	ldr	r1, [pc, #68]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800527c:	4b0f      	ldr	r3, [pc, #60]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a0e      	ldr	r2, [pc, #56]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8005282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005286:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005288:	f7fd fa62 	bl	8002750 <HAL_GetTick>
 800528c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800528e:	e008      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005290:	f7fd fa5e 	bl	8002750 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b64      	cmp	r3, #100	; 0x64
 800529c:	d901      	bls.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e007      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052a2:	4b06      	ldr	r3, [pc, #24]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ae:	d1ef      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
      }
    }
  }
  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3720      	adds	r7, #32
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	40023800 	.word	0x40023800
 80052c0:	080080cc 	.word	0x080080cc

080052c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e199      	b.n	800560a <HAL_SPI_Init+0x346>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a94      	ldr	r2, [pc, #592]	; (800552c <HAL_SPI_Init+0x268>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d01d      	beq.n	800531c <HAL_SPI_Init+0x58>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a92      	ldr	r2, [pc, #584]	; (8005530 <HAL_SPI_Init+0x26c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d018      	beq.n	800531c <HAL_SPI_Init+0x58>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a91      	ldr	r2, [pc, #580]	; (8005534 <HAL_SPI_Init+0x270>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d013      	beq.n	800531c <HAL_SPI_Init+0x58>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a8f      	ldr	r2, [pc, #572]	; (8005538 <HAL_SPI_Init+0x274>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00e      	beq.n	800531c <HAL_SPI_Init+0x58>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a8e      	ldr	r2, [pc, #568]	; (800553c <HAL_SPI_Init+0x278>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d009      	beq.n	800531c <HAL_SPI_Init+0x58>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a8c      	ldr	r2, [pc, #560]	; (8005540 <HAL_SPI_Init+0x27c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d004      	beq.n	800531c <HAL_SPI_Init+0x58>
 8005312:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8005316:	488b      	ldr	r0, [pc, #556]	; (8005544 <HAL_SPI_Init+0x280>)
 8005318:	f7fc fc81 	bl	8001c1e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d009      	beq.n	8005338 <HAL_SPI_Init+0x74>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800532c:	d004      	beq.n	8005338 <HAL_SPI_Init+0x74>
 800532e:	f240 1145 	movw	r1, #325	; 0x145
 8005332:	4884      	ldr	r0, [pc, #528]	; (8005544 <HAL_SPI_Init+0x280>)
 8005334:	f7fc fc73 	bl	8001c1e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00e      	beq.n	800535e <HAL_SPI_Init+0x9a>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005348:	d009      	beq.n	800535e <HAL_SPI_Init+0x9a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005352:	d004      	beq.n	800535e <HAL_SPI_Init+0x9a>
 8005354:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005358:	487a      	ldr	r0, [pc, #488]	; (8005544 <HAL_SPI_Init+0x280>)
 800535a:	f7fc fc60 	bl	8001c1e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005366:	d040      	beq.n	80053ea <HAL_SPI_Init+0x126>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8005370:	d03b      	beq.n	80053ea <HAL_SPI_Init+0x126>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 800537a:	d036      	beq.n	80053ea <HAL_SPI_Init+0x126>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005384:	d031      	beq.n	80053ea <HAL_SPI_Init+0x126>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 800538e:	d02c      	beq.n	80053ea <HAL_SPI_Init+0x126>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005398:	d027      	beq.n	80053ea <HAL_SPI_Init+0x126>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80053a2:	d022      	beq.n	80053ea <HAL_SPI_Init+0x126>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ac:	d01d      	beq.n	80053ea <HAL_SPI_Init+0x126>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053b6:	d018      	beq.n	80053ea <HAL_SPI_Init+0x126>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80053c0:	d013      	beq.n	80053ea <HAL_SPI_Init+0x126>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80053ca:	d00e      	beq.n	80053ea <HAL_SPI_Init+0x126>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d4:	d009      	beq.n	80053ea <HAL_SPI_Init+0x126>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053de:	d004      	beq.n	80053ea <HAL_SPI_Init+0x126>
 80053e0:	f240 1147 	movw	r1, #327	; 0x147
 80053e4:	4857      	ldr	r0, [pc, #348]	; (8005544 <HAL_SPI_Init+0x280>)
 80053e6:	f7fc fc1a 	bl	8001c1e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053f2:	d00d      	beq.n	8005410 <HAL_SPI_Init+0x14c>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d009      	beq.n	8005410 <HAL_SPI_Init+0x14c>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005404:	d004      	beq.n	8005410 <HAL_SPI_Init+0x14c>
 8005406:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800540a:	484e      	ldr	r0, [pc, #312]	; (8005544 <HAL_SPI_Init+0x280>)
 800540c:	f7fc fc07 	bl	8001c1e <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005414:	2b08      	cmp	r3, #8
 8005416:	d008      	beq.n	800542a <HAL_SPI_Init+0x166>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541c:	2b00      	cmp	r3, #0
 800541e:	d004      	beq.n	800542a <HAL_SPI_Init+0x166>
 8005420:	f240 1149 	movw	r1, #329	; 0x149
 8005424:	4847      	ldr	r0, [pc, #284]	; (8005544 <HAL_SPI_Init+0x280>)
 8005426:	f7fc fbfa 	bl	8001c1e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d020      	beq.n	8005474 <HAL_SPI_Init+0x1b0>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	2b08      	cmp	r3, #8
 8005438:	d01c      	beq.n	8005474 <HAL_SPI_Init+0x1b0>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	2b10      	cmp	r3, #16
 8005440:	d018      	beq.n	8005474 <HAL_SPI_Init+0x1b0>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	2b18      	cmp	r3, #24
 8005448:	d014      	beq.n	8005474 <HAL_SPI_Init+0x1b0>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	2b20      	cmp	r3, #32
 8005450:	d010      	beq.n	8005474 <HAL_SPI_Init+0x1b0>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	2b28      	cmp	r3, #40	; 0x28
 8005458:	d00c      	beq.n	8005474 <HAL_SPI_Init+0x1b0>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	2b30      	cmp	r3, #48	; 0x30
 8005460:	d008      	beq.n	8005474 <HAL_SPI_Init+0x1b0>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	2b38      	cmp	r3, #56	; 0x38
 8005468:	d004      	beq.n	8005474 <HAL_SPI_Init+0x1b0>
 800546a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800546e:	4835      	ldr	r0, [pc, #212]	; (8005544 <HAL_SPI_Init+0x280>)
 8005470:	f7fc fbd5 	bl	8001c1e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d008      	beq.n	800548e <HAL_SPI_Init+0x1ca>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	2b80      	cmp	r3, #128	; 0x80
 8005482:	d004      	beq.n	800548e <HAL_SPI_Init+0x1ca>
 8005484:	f240 114b 	movw	r1, #331	; 0x14b
 8005488:	482e      	ldr	r0, [pc, #184]	; (8005544 <HAL_SPI_Init+0x280>)
 800548a:	f7fc fbc8 	bl	8001c1e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	2b00      	cmp	r3, #0
 8005494:	d008      	beq.n	80054a8 <HAL_SPI_Init+0x1e4>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	2b10      	cmp	r3, #16
 800549c:	d004      	beq.n	80054a8 <HAL_SPI_Init+0x1e4>
 800549e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80054a2:	4828      	ldr	r0, [pc, #160]	; (8005544 <HAL_SPI_Init+0x280>)
 80054a4:	f7fc fbbb 	bl	8001c1e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d119      	bne.n	80054e4 <HAL_SPI_Init+0x220>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d008      	beq.n	80054ca <HAL_SPI_Init+0x206>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d004      	beq.n	80054ca <HAL_SPI_Init+0x206>
 80054c0:	f240 114f 	movw	r1, #335	; 0x14f
 80054c4:	481f      	ldr	r0, [pc, #124]	; (8005544 <HAL_SPI_Init+0x280>)
 80054c6:	f7fc fbaa 	bl	8001c1e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d008      	beq.n	80054e4 <HAL_SPI_Init+0x220>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d004      	beq.n	80054e4 <HAL_SPI_Init+0x220>
 80054da:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80054de:	4819      	ldr	r0, [pc, #100]	; (8005544 <HAL_SPI_Init+0x280>)
 80054e0:	f7fc fb9d 	bl	8001c1e <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d106      	bne.n	8005504 <HAL_SPI_Init+0x240>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7fc fcce 	bl	8001ea0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800551a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005524:	d910      	bls.n	8005548 <HAL_SPI_Init+0x284>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	e010      	b.n	800554e <HAL_SPI_Init+0x28a>
 800552c:	40013000 	.word	0x40013000
 8005530:	40003800 	.word	0x40003800
 8005534:	40003c00 	.word	0x40003c00
 8005538:	40013400 	.word	0x40013400
 800553c:	40015000 	.word	0x40015000
 8005540:	40015400 	.word	0x40015400
 8005544:	08008108 	.word	0x08008108
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800554c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005556:	d007      	beq.n	8005568 <HAL_SPI_Init+0x2a4>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005560:	d002      	beq.n	8005568 <HAL_SPI_Init+0x2a4>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10b      	bne.n	8005588 <HAL_SPI_Init+0x2c4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005578:	d903      	bls.n	8005582 <HAL_SPI_Init+0x2be>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2202      	movs	r2, #2
 800557e:	631a      	str	r2, [r3, #48]	; 0x30
 8005580:	e002      	b.n	8005588 <HAL_SPI_Init+0x2c4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	431a      	orrs	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	431a      	orrs	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	431a      	orrs	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	ea42 0103 	orr.w	r1, r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	0c1b      	lsrs	r3, r3, #16
 80055c8:	f003 0204 	and.w	r2, r3, #4
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	431a      	orrs	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	ea42 0103 	orr.w	r1, r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop

08005614 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b088      	sub	sp, #32
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	603b      	str	r3, [r7, #0]
 8005620:	4613      	mov	r3, r2
 8005622:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005624:	2300      	movs	r3, #0
 8005626:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d009      	beq.n	8005644 <HAL_SPI_Transmit+0x30>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005638:	d004      	beq.n	8005644 <HAL_SPI_Transmit+0x30>
 800563a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800563e:	4895      	ldr	r0, [pc, #596]	; (8005894 <HAL_SPI_Transmit+0x280>)
 8005640:	f7fc faed 	bl	8001c1e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800564a:	2b01      	cmp	r3, #1
 800564c:	d101      	bne.n	8005652 <HAL_SPI_Transmit+0x3e>
 800564e:	2302      	movs	r3, #2
 8005650:	e152      	b.n	80058f8 <HAL_SPI_Transmit+0x2e4>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800565a:	f7fd f879 	bl	8002750 <HAL_GetTick>
 800565e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005660:	88fb      	ldrh	r3, [r7, #6]
 8005662:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b01      	cmp	r3, #1
 800566e:	d002      	beq.n	8005676 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8005670:	2302      	movs	r3, #2
 8005672:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005674:	e137      	b.n	80058e6 <HAL_SPI_Transmit+0x2d2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <HAL_SPI_Transmit+0x6e>
 800567c:	88fb      	ldrh	r3, [r7, #6]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d102      	bne.n	8005688 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005686:	e12e      	b.n	80058e6 <HAL_SPI_Transmit+0x2d2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2203      	movs	r2, #3
 800568c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	88fa      	ldrh	r2, [r7, #6]
 80056a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	88fa      	ldrh	r2, [r7, #6]
 80056a6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d2:	d107      	bne.n	80056e4 <HAL_SPI_Transmit+0xd0>
  {
    SPI_1LINE_TX(hspi);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ee:	2b40      	cmp	r3, #64	; 0x40
 80056f0:	d007      	beq.n	8005702 <HAL_SPI_Transmit+0xee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005700:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800570a:	d94b      	bls.n	80057a4 <HAL_SPI_Transmit+0x190>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <HAL_SPI_Transmit+0x106>
 8005714:	8afb      	ldrh	r3, [r7, #22]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d13e      	bne.n	8005798 <HAL_SPI_Transmit+0x184>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571e:	881a      	ldrh	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572a:	1c9a      	adds	r2, r3, #2
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005734:	b29b      	uxth	r3, r3
 8005736:	3b01      	subs	r3, #1
 8005738:	b29a      	uxth	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800573e:	e02b      	b.n	8005798 <HAL_SPI_Transmit+0x184>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b02      	cmp	r3, #2
 800574c:	d112      	bne.n	8005774 <HAL_SPI_Transmit+0x160>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	881a      	ldrh	r2, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575e:	1c9a      	adds	r2, r3, #2
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005768:	b29b      	uxth	r3, r3
 800576a:	3b01      	subs	r3, #1
 800576c:	b29a      	uxth	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005772:	e011      	b.n	8005798 <HAL_SPI_Transmit+0x184>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005774:	f7fc ffec 	bl	8002750 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	429a      	cmp	r2, r3
 8005782:	d803      	bhi.n	800578c <HAL_SPI_Transmit+0x178>
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578a:	d102      	bne.n	8005792 <HAL_SPI_Transmit+0x17e>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d102      	bne.n	8005798 <HAL_SPI_Transmit+0x184>
        {
          errorcode = HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005796:	e0a6      	b.n	80058e6 <HAL_SPI_Transmit+0x2d2>
    while (hspi->TxXferCount > 0U)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800579c:	b29b      	uxth	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1ce      	bne.n	8005740 <HAL_SPI_Transmit+0x12c>
 80057a2:	e07e      	b.n	80058a2 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_SPI_Transmit+0x19e>
 80057ac:	8afb      	ldrh	r3, [r7, #22]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d172      	bne.n	8005898 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d912      	bls.n	80057e2 <HAL_SPI_Transmit+0x1ce>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	881a      	ldrh	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	1c9a      	adds	r2, r3, #2
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	3b02      	subs	r3, #2
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057e0:	e05a      	b.n	8005898 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	330c      	adds	r3, #12
 80057ec:	7812      	ldrb	r2, [r2, #0]
 80057ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057fe:	b29b      	uxth	r3, r3
 8005800:	3b01      	subs	r3, #1
 8005802:	b29a      	uxth	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005808:	e046      	b.n	8005898 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b02      	cmp	r3, #2
 8005816:	d12b      	bne.n	8005870 <HAL_SPI_Transmit+0x25c>
      {
        if (hspi->TxXferCount > 1U)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800581c:	b29b      	uxth	r3, r3
 800581e:	2b01      	cmp	r3, #1
 8005820:	d912      	bls.n	8005848 <HAL_SPI_Transmit+0x234>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005826:	881a      	ldrh	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005832:	1c9a      	adds	r2, r3, #2
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800583c:	b29b      	uxth	r3, r3
 800583e:	3b02      	subs	r3, #2
 8005840:	b29a      	uxth	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005846:	e027      	b.n	8005898 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	330c      	adds	r3, #12
 8005852:	7812      	ldrb	r2, [r2, #0]
 8005854:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005864:	b29b      	uxth	r3, r3
 8005866:	3b01      	subs	r3, #1
 8005868:	b29a      	uxth	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800586e:	e013      	b.n	8005898 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005870:	f7fc ff6e 	bl	8002750 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d803      	bhi.n	8005888 <HAL_SPI_Transmit+0x274>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005886:	d102      	bne.n	800588e <HAL_SPI_Transmit+0x27a>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d104      	bne.n	8005898 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005892:	e028      	b.n	80058e6 <HAL_SPI_Transmit+0x2d2>
 8005894:	08008108 	.word	0x08008108
    while (hspi->TxXferCount > 0U)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800589c:	b29b      	uxth	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1b3      	bne.n	800580a <HAL_SPI_Transmit+0x1f6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	6839      	ldr	r1, [r7, #0]
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 fdbe 	bl	8006428 <SPI_EndRxTxTransaction>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2220      	movs	r2, #32
 80058b6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058c0:	2300      	movs	r3, #0
 80058c2:	613b      	str	r3, [r7, #16]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	613b      	str	r3, [r7, #16]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	613b      	str	r3, [r7, #16]
 80058d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	77fb      	strb	r3, [r7, #31]
 80058e2:	e000      	b.n	80058e6 <HAL_SPI_Transmit+0x2d2>
  }

error:
 80058e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80058f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3720      	adds	r7, #32
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b088      	sub	sp, #32
 8005904:	af02      	add	r7, sp, #8
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	4613      	mov	r3, r2
 800590e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005910:	2300      	movs	r3, #0
 8005912:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800591c:	d112      	bne.n	8005944 <HAL_SPI_Receive+0x44>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10e      	bne.n	8005944 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2204      	movs	r2, #4
 800592a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800592e:	88fa      	ldrh	r2, [r7, #6]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	4613      	mov	r3, r2
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	68b9      	ldr	r1, [r7, #8]
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 f908 	bl	8005b50 <HAL_SPI_TransmitReceive>
 8005940:	4603      	mov	r3, r0
 8005942:	e101      	b.n	8005b48 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800594a:	2b01      	cmp	r3, #1
 800594c:	d101      	bne.n	8005952 <HAL_SPI_Receive+0x52>
 800594e:	2302      	movs	r3, #2
 8005950:	e0fa      	b.n	8005b48 <HAL_SPI_Receive+0x248>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800595a:	f7fc fef9 	bl	8002750 <HAL_GetTick>
 800595e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b01      	cmp	r3, #1
 800596a:	d002      	beq.n	8005972 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800596c:	2302      	movs	r3, #2
 800596e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005970:	e0e1      	b.n	8005b36 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <HAL_SPI_Receive+0x7e>
 8005978:	88fb      	ldrh	r3, [r7, #6]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d102      	bne.n	8005984 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005982:	e0d8      	b.n	8005b36 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2204      	movs	r2, #4
 8005988:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	88fa      	ldrh	r2, [r7, #6]
 800599c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	88fa      	ldrh	r2, [r7, #6]
 80059a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059ce:	d908      	bls.n	80059e2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059de:	605a      	str	r2, [r3, #4]
 80059e0:	e007      	b.n	80059f2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059f0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059fa:	d107      	bne.n	8005a0c <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a0a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a16:	2b40      	cmp	r3, #64	; 0x40
 8005a18:	d007      	beq.n	8005a2a <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a28:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a32:	d867      	bhi.n	8005b04 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005a34:	e030      	b.n	8005a98 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d117      	bne.n	8005a74 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f103 020c 	add.w	r2, r3, #12
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	7812      	ldrb	r2, [r2, #0]
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005a72:	e011      	b.n	8005a98 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a74:	f7fc fe6c 	bl	8002750 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d803      	bhi.n	8005a8c <HAL_SPI_Receive+0x18c>
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8a:	d102      	bne.n	8005a92 <HAL_SPI_Receive+0x192>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d102      	bne.n	8005a98 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005a96:	e04e      	b.n	8005b36 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1c8      	bne.n	8005a36 <HAL_SPI_Receive+0x136>
 8005aa4:	e034      	b.n	8005b10 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d115      	bne.n	8005ae0 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abe:	b292      	uxth	r2, r2
 8005ac0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	1c9a      	adds	r2, r3, #2
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005ade:	e011      	b.n	8005b04 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ae0:	f7fc fe36 	bl	8002750 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d803      	bhi.n	8005af8 <HAL_SPI_Receive+0x1f8>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af6:	d102      	bne.n	8005afe <HAL_SPI_Receive+0x1fe>
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d102      	bne.n	8005b04 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005b02:	e018      	b.n	8005b36 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1ca      	bne.n	8005aa6 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	6839      	ldr	r1, [r7, #0]
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 fc2f 	bl	8006378 <SPI_EndRxTransaction>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d002      	beq.n	8005b26 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2220      	movs	r2, #32
 8005b24:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d002      	beq.n	8005b34 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	75fb      	strb	r3, [r7, #23]
 8005b32:	e000      	b.n	8005b36 <HAL_SPI_Receive+0x236>
  }

error :
 8005b34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3718      	adds	r7, #24
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08a      	sub	sp, #40	; 0x28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d004      	beq.n	8005b7a <HAL_SPI_TransmitReceive+0x2a>
 8005b70:	f240 41bf 	movw	r1, #1215	; 0x4bf
 8005b74:	4895      	ldr	r0, [pc, #596]	; (8005dcc <HAL_SPI_TransmitReceive+0x27c>)
 8005b76:	f7fc f852 	bl	8001c1e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d101      	bne.n	8005b88 <HAL_SPI_TransmitReceive+0x38>
 8005b84:	2302      	movs	r3, #2
 8005b86:	e1fd      	b.n	8005f84 <HAL_SPI_TransmitReceive+0x434>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b90:	f7fc fdde 	bl	8002750 <HAL_GetTick>
 8005b94:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b9c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005ba4:	887b      	ldrh	r3, [r7, #2]
 8005ba6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005ba8:	887b      	ldrh	r3, [r7, #2]
 8005baa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005bac:	7efb      	ldrb	r3, [r7, #27]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d00e      	beq.n	8005bd0 <HAL_SPI_TransmitReceive+0x80>
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bb8:	d106      	bne.n	8005bc8 <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d102      	bne.n	8005bc8 <HAL_SPI_TransmitReceive+0x78>
 8005bc2:	7efb      	ldrb	r3, [r7, #27]
 8005bc4:	2b04      	cmp	r3, #4
 8005bc6:	d003      	beq.n	8005bd0 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 8005bc8:	2302      	movs	r3, #2
 8005bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005bce:	e1cf      	b.n	8005f70 <HAL_SPI_TransmitReceive+0x420>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d005      	beq.n	8005be2 <HAL_SPI_TransmitReceive+0x92>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <HAL_SPI_TransmitReceive+0x92>
 8005bdc:	887b      	ldrh	r3, [r7, #2]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d103      	bne.n	8005bea <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005be8:	e1c2      	b.n	8005f70 <HAL_SPI_TransmitReceive+0x420>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d003      	beq.n	8005bfe <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2205      	movs	r2, #5
 8005bfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	887a      	ldrh	r2, [r7, #2]
 8005c0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	887a      	ldrh	r2, [r7, #2]
 8005c16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	887a      	ldrh	r2, [r7, #2]
 8005c24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	887a      	ldrh	r2, [r7, #2]
 8005c2a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c40:	d802      	bhi.n	8005c48 <HAL_SPI_TransmitReceive+0xf8>
 8005c42:	8a3b      	ldrh	r3, [r7, #16]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d908      	bls.n	8005c5a <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c56:	605a      	str	r2, [r3, #4]
 8005c58:	e007      	b.n	8005c6a <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c68:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c74:	2b40      	cmp	r3, #64	; 0x40
 8005c76:	d007      	beq.n	8005c88 <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c90:	d97c      	bls.n	8005d8c <HAL_SPI_TransmitReceive+0x23c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d002      	beq.n	8005ca0 <HAL_SPI_TransmitReceive+0x150>
 8005c9a:	8a7b      	ldrh	r3, [r7, #18]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d169      	bne.n	8005d74 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca4:	881a      	ldrh	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	1c9a      	adds	r2, r3, #2
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cc4:	e056      	b.n	8005d74 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d11b      	bne.n	8005d0c <HAL_SPI_TransmitReceive+0x1bc>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d016      	beq.n	8005d0c <HAL_SPI_TransmitReceive+0x1bc>
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d113      	bne.n	8005d0c <HAL_SPI_TransmitReceive+0x1bc>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce8:	881a      	ldrh	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf4:	1c9a      	adds	r2, r3, #2
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d11c      	bne.n	8005d54 <HAL_SPI_TransmitReceive+0x204>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d016      	beq.n	8005d54 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68da      	ldr	r2, [r3, #12]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d30:	b292      	uxth	r2, r2
 8005d32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d38:	1c9a      	adds	r2, r3, #2
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d50:	2301      	movs	r3, #1
 8005d52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d54:	f7fc fcfc 	bl	8002750 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d807      	bhi.n	8005d74 <HAL_SPI_TransmitReceive+0x224>
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6a:	d003      	beq.n	8005d74 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005d72:	e0fd      	b.n	8005f70 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1a3      	bne.n	8005cc6 <HAL_SPI_TransmitReceive+0x176>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d19d      	bne.n	8005cc6 <HAL_SPI_TransmitReceive+0x176>
 8005d8a:	e0e1      	b.n	8005f50 <HAL_SPI_TransmitReceive+0x400>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d003      	beq.n	8005d9c <HAL_SPI_TransmitReceive+0x24c>
 8005d94:	8a7b      	ldrh	r3, [r7, #18]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	f040 80cd 	bne.w	8005f36 <HAL_SPI_TransmitReceive+0x3e6>
    {
      if (hspi->TxXferCount > 1U)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d914      	bls.n	8005dd0 <HAL_SPI_TransmitReceive+0x280>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005daa:	881a      	ldrh	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db6:	1c9a      	adds	r2, r3, #2
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	3b02      	subs	r3, #2
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dca:	e0b4      	b.n	8005f36 <HAL_SPI_TransmitReceive+0x3e6>
 8005dcc:	08008108 	.word	0x08008108
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	330c      	adds	r3, #12
 8005dda:	7812      	ldrb	r2, [r2, #0]
 8005ddc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	3b01      	subs	r3, #1
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005df6:	e09e      	b.n	8005f36 <HAL_SPI_TransmitReceive+0x3e6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d134      	bne.n	8005e70 <HAL_SPI_TransmitReceive+0x320>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d02f      	beq.n	8005e70 <HAL_SPI_TransmitReceive+0x320>
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d12c      	bne.n	8005e70 <HAL_SPI_TransmitReceive+0x320>
      {
        if (hspi->TxXferCount > 1U)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d912      	bls.n	8005e46 <HAL_SPI_TransmitReceive+0x2f6>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e24:	881a      	ldrh	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	1c9a      	adds	r2, r3, #2
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	3b02      	subs	r3, #2
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e44:	e012      	b.n	8005e6c <HAL_SPI_TransmitReceive+0x31c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	330c      	adds	r3, #12
 8005e50:	7812      	ldrb	r2, [r2, #0]
 8005e52:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	3b01      	subs	r3, #1
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d148      	bne.n	8005f10 <HAL_SPI_TransmitReceive+0x3c0>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d042      	beq.n	8005f10 <HAL_SPI_TransmitReceive+0x3c0>
      {
        if (hspi->RxXferCount > 1U)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d923      	bls.n	8005ede <HAL_SPI_TransmitReceive+0x38e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68da      	ldr	r2, [r3, #12]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea0:	b292      	uxth	r2, r2
 8005ea2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea8:	1c9a      	adds	r2, r3, #2
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	3b02      	subs	r3, #2
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d81f      	bhi.n	8005f0c <HAL_SPI_TransmitReceive+0x3bc>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005eda:	605a      	str	r2, [r3, #4]
 8005edc:	e016      	b.n	8005f0c <HAL_SPI_TransmitReceive+0x3bc>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f103 020c 	add.w	r2, r3, #12
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	7812      	ldrb	r2, [r2, #0]
 8005eec:	b2d2      	uxtb	r2, r2
 8005eee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef4:	1c5a      	adds	r2, r3, #1
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f10:	f7fc fc1e 	bl	8002750 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d803      	bhi.n	8005f28 <HAL_SPI_TransmitReceive+0x3d8>
 8005f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f26:	d102      	bne.n	8005f2e <HAL_SPI_TransmitReceive+0x3de>
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d103      	bne.n	8005f36 <HAL_SPI_TransmitReceive+0x3e6>
      {
        errorcode = HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005f34:	e01c      	b.n	8005f70 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f47f af5b 	bne.w	8005df8 <HAL_SPI_TransmitReceive+0x2a8>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f47f af54 	bne.w	8005df8 <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f50:	69fa      	ldr	r2, [r7, #28]
 8005f52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 fa67 	bl	8006428 <SPI_EndRxTxTransaction>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d006      	beq.n	8005f6e <HAL_SPI_TransmitReceive+0x41e>
  {
    errorcode = HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	661a      	str	r2, [r3, #96]	; 0x60
 8005f6c:	e000      	b.n	8005f70 <HAL_SPI_TransmitReceive+0x420>
  }

error :
 8005f6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005f80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3728      	adds	r7, #40	; 0x28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	099b      	lsrs	r3, r3, #6
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10f      	bne.n	8005fd0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	099b      	lsrs	r3, r3, #6
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d004      	beq.n	8005fd0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	4798      	blx	r3
    return;
 8005fce:	e0d8      	b.n	8006182 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	085b      	lsrs	r3, r3, #1
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00a      	beq.n	8005ff2 <HAL_SPI_IRQHandler+0x66>
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	09db      	lsrs	r3, r3, #7
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d004      	beq.n	8005ff2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	4798      	blx	r3
    return;
 8005ff0:	e0c7      	b.n	8006182 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10c      	bne.n	8006018 <HAL_SPI_IRQHandler+0x8c>
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	099b      	lsrs	r3, r3, #6
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d106      	bne.n	8006018 <HAL_SPI_IRQHandler+0x8c>
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	0a1b      	lsrs	r3, r3, #8
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	f000 80b5 	beq.w	8006182 <HAL_SPI_IRQHandler+0x1f6>
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	095b      	lsrs	r3, r3, #5
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 80ae 	beq.w	8006182 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	099b      	lsrs	r3, r3, #6
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	2b00      	cmp	r3, #0
 8006030:	d023      	beq.n	800607a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b03      	cmp	r3, #3
 800603c:	d011      	beq.n	8006062 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006042:	f043 0204 	orr.w	r2, r3, #4
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800604a:	2300      	movs	r3, #0
 800604c:	617b      	str	r3, [r7, #20]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	617b      	str	r3, [r7, #20]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	e00b      	b.n	800607a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006062:	2300      	movs	r3, #0
 8006064:	613b      	str	r3, [r7, #16]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	613b      	str	r3, [r7, #16]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	693b      	ldr	r3, [r7, #16]
        return;
 8006078:	e083      	b.n	8006182 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	095b      	lsrs	r3, r3, #5
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d014      	beq.n	80060b0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800608a:	f043 0201 	orr.w	r2, r3, #1
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006092:	2300      	movs	r3, #0
 8006094:	60fb      	str	r3, [r7, #12]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	0a1b      	lsrs	r3, r3, #8
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00c      	beq.n	80060d6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c0:	f043 0208 	orr.w	r2, r3, #8
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80060c8:	2300      	movs	r3, #0
 80060ca:	60bb      	str	r3, [r7, #8]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	60bb      	str	r3, [r7, #8]
 80060d4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d050      	beq.n	8006180 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060ec:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d104      	bne.n	800610a <HAL_SPI_IRQHandler+0x17e>
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	2b00      	cmp	r3, #0
 8006108:	d034      	beq.n	8006174 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f022 0203 	bic.w	r2, r2, #3
 8006118:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800611e:	2b00      	cmp	r3, #0
 8006120:	d011      	beq.n	8006146 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006126:	4a18      	ldr	r2, [pc, #96]	; (8006188 <HAL_SPI_IRQHandler+0x1fc>)
 8006128:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612e:	4618      	mov	r0, r3
 8006130:	f7fc fdcc 	bl	8002ccc <HAL_DMA_Abort_IT>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d005      	beq.n	8006146 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800613e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614a:	2b00      	cmp	r3, #0
 800614c:	d016      	beq.n	800617c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006152:	4a0d      	ldr	r2, [pc, #52]	; (8006188 <HAL_SPI_IRQHandler+0x1fc>)
 8006154:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615a:	4618      	mov	r0, r3
 800615c:	f7fc fdb6 	bl	8002ccc <HAL_DMA_Abort_IT>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00a      	beq.n	800617c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800616a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006172:	e003      	b.n	800617c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f809 	bl	800618c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800617a:	e000      	b.n	800617e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800617c:	bf00      	nop
    return;
 800617e:	bf00      	nop
 8006180:	bf00      	nop
  }
}
 8006182:	3720      	adds	r7, #32
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	080061a1 	.word	0x080061a1

0800618c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f7ff ffe5 	bl	800618c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80061c2:	bf00      	nop
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b084      	sub	sp, #16
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	60f8      	str	r0, [r7, #12]
 80061d2:	60b9      	str	r1, [r7, #8]
 80061d4:	603b      	str	r3, [r7, #0]
 80061d6:	4613      	mov	r3, r2
 80061d8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061da:	e04c      	b.n	8006276 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e2:	d048      	beq.n	8006276 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80061e4:	f7fc fab4 	bl	8002750 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d902      	bls.n	80061fa <SPI_WaitFlagStateUntilTimeout+0x30>
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d13d      	bne.n	8006276 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006208:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006212:	d111      	bne.n	8006238 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800621c:	d004      	beq.n	8006228 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006226:	d107      	bne.n	8006238 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006236:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006240:	d10f      	bne.n	8006262 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006260:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e00f      	b.n	8006296 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4013      	ands	r3, r2
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	429a      	cmp	r2, r3
 8006284:	bf0c      	ite	eq
 8006286:	2301      	moveq	r3, #1
 8006288:	2300      	movne	r3, #0
 800628a:	b2db      	uxtb	r3, r3
 800628c:	461a      	mov	r2, r3
 800628e:	79fb      	ldrb	r3, [r7, #7]
 8006290:	429a      	cmp	r2, r3
 8006292:	d1a3      	bne.n	80061dc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b084      	sub	sp, #16
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	60f8      	str	r0, [r7, #12]
 80062a6:	60b9      	str	r1, [r7, #8]
 80062a8:	607a      	str	r2, [r7, #4]
 80062aa:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80062ac:	e057      	b.n	800635e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80062b4:	d106      	bne.n	80062c4 <SPI_WaitFifoStateUntilTimeout+0x26>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d103      	bne.n	80062c4 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	330c      	adds	r3, #12
 80062c2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ca:	d048      	beq.n	800635e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80062cc:	f7fc fa40 	bl	8002750 <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d902      	bls.n	80062e2 <SPI_WaitFifoStateUntilTimeout+0x44>
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d13d      	bne.n	800635e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80062f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062fa:	d111      	bne.n	8006320 <SPI_WaitFifoStateUntilTimeout+0x82>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006304:	d004      	beq.n	8006310 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800630e:	d107      	bne.n	8006320 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800631e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006328:	d10f      	bne.n	800634a <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006348:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e008      	b.n	8006370 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	4013      	ands	r3, r2
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	429a      	cmp	r2, r3
 800636c:	d19f      	bne.n	80062ae <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af02      	add	r7, sp, #8
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800638c:	d111      	bne.n	80063b2 <SPI_EndRxTransaction+0x3a>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006396:	d004      	beq.n	80063a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063a0:	d107      	bne.n	80063b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063b0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2200      	movs	r2, #0
 80063ba:	2180      	movs	r1, #128	; 0x80
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f7ff ff04 	bl	80061ca <SPI_WaitFlagStateUntilTimeout>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d007      	beq.n	80063d8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063cc:	f043 0220 	orr.w	r2, r3, #32
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e023      	b.n	8006420 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063e0:	d11d      	bne.n	800641e <SPI_EndRxTransaction+0xa6>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063ea:	d004      	beq.n	80063f6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063f4:	d113      	bne.n	800641e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f7ff ff4b 	bl	800629e <SPI_WaitFifoStateUntilTimeout>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d007      	beq.n	800641e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006412:	f043 0220 	orr.w	r2, r3, #32
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e000      	b.n	8006420 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af02      	add	r7, sp, #8
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2200      	movs	r2, #0
 800643c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f7ff ff2c 	bl	800629e <SPI_WaitFifoStateUntilTimeout>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d007      	beq.n	800645c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006450:	f043 0220 	orr.w	r2, r3, #32
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e027      	b.n	80064ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2200      	movs	r2, #0
 8006464:	2180      	movs	r1, #128	; 0x80
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f7ff feaf 	bl	80061ca <SPI_WaitFlagStateUntilTimeout>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d007      	beq.n	8006482 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006476:	f043 0220 	orr.w	r2, r3, #32
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e014      	b.n	80064ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2200      	movs	r2, #0
 800648a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f7ff ff05 	bl	800629e <SPI_WaitFifoStateUntilTimeout>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d007      	beq.n	80064aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800649e:	f043 0220 	orr.w	r2, r3, #32
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e000      	b.n	80064ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e09f      	b.n	8006606 <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d02d      	beq.n	800652a <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a4f      	ldr	r2, [pc, #316]	; (8006610 <HAL_UART_Init+0x15c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d055      	beq.n	8006584 <HAL_UART_Init+0xd0>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a4d      	ldr	r2, [pc, #308]	; (8006614 <HAL_UART_Init+0x160>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d050      	beq.n	8006584 <HAL_UART_Init+0xd0>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a4c      	ldr	r2, [pc, #304]	; (8006618 <HAL_UART_Init+0x164>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d04b      	beq.n	8006584 <HAL_UART_Init+0xd0>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a4a      	ldr	r2, [pc, #296]	; (800661c <HAL_UART_Init+0x168>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d046      	beq.n	8006584 <HAL_UART_Init+0xd0>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a49      	ldr	r2, [pc, #292]	; (8006620 <HAL_UART_Init+0x16c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d041      	beq.n	8006584 <HAL_UART_Init+0xd0>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a47      	ldr	r2, [pc, #284]	; (8006624 <HAL_UART_Init+0x170>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d03c      	beq.n	8006584 <HAL_UART_Init+0xd0>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a46      	ldr	r2, [pc, #280]	; (8006628 <HAL_UART_Init+0x174>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d037      	beq.n	8006584 <HAL_UART_Init+0xd0>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a44      	ldr	r2, [pc, #272]	; (800662c <HAL_UART_Init+0x178>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d032      	beq.n	8006584 <HAL_UART_Init+0xd0>
 800651e:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8006522:	4843      	ldr	r0, [pc, #268]	; (8006630 <HAL_UART_Init+0x17c>)
 8006524:	f7fb fb7b 	bl	8001c1e <assert_failed>
 8006528:	e02c      	b.n	8006584 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a38      	ldr	r2, [pc, #224]	; (8006610 <HAL_UART_Init+0x15c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d027      	beq.n	8006584 <HAL_UART_Init+0xd0>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a36      	ldr	r2, [pc, #216]	; (8006614 <HAL_UART_Init+0x160>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d022      	beq.n	8006584 <HAL_UART_Init+0xd0>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a35      	ldr	r2, [pc, #212]	; (8006618 <HAL_UART_Init+0x164>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d01d      	beq.n	8006584 <HAL_UART_Init+0xd0>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a33      	ldr	r2, [pc, #204]	; (800661c <HAL_UART_Init+0x168>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d018      	beq.n	8006584 <HAL_UART_Init+0xd0>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a32      	ldr	r2, [pc, #200]	; (8006620 <HAL_UART_Init+0x16c>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d013      	beq.n	8006584 <HAL_UART_Init+0xd0>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a30      	ldr	r2, [pc, #192]	; (8006624 <HAL_UART_Init+0x170>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d00e      	beq.n	8006584 <HAL_UART_Init+0xd0>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a2f      	ldr	r2, [pc, #188]	; (8006628 <HAL_UART_Init+0x174>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d009      	beq.n	8006584 <HAL_UART_Init+0xd0>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a2d      	ldr	r2, [pc, #180]	; (800662c <HAL_UART_Init+0x178>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d004      	beq.n	8006584 <HAL_UART_Init+0xd0>
 800657a:	f240 112f 	movw	r1, #303	; 0x12f
 800657e:	482c      	ldr	r0, [pc, #176]	; (8006630 <HAL_UART_Init+0x17c>)
 8006580:	f7fb fb4d 	bl	8001c1e <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006588:	2b00      	cmp	r3, #0
 800658a:	d106      	bne.n	800659a <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7fb ff63 	bl	8002460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2224      	movs	r2, #36	; 0x24
 800659e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f022 0201 	bic.w	r2, r2, #1
 80065ae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fb01 	bl	8006bb8 <UART_SetConfig>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d101      	bne.n	80065c0 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e022      	b.n	8006606 <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d002      	beq.n	80065ce <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fe31 	bl	8007230 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689a      	ldr	r2, [r3, #8]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f042 0201 	orr.w	r2, r2, #1
 80065fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 ff6a 	bl	80074d8 <UART_CheckIdleState>
 8006604:	4603      	mov	r3, r0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	40011000 	.word	0x40011000
 8006614:	40004400 	.word	0x40004400
 8006618:	40004800 	.word	0x40004800
 800661c:	40004c00 	.word	0x40004c00
 8006620:	40005000 	.word	0x40005000
 8006624:	40011400 	.word	0x40011400
 8006628:	40007800 	.word	0x40007800
 800662c:	40007c00 	.word	0x40007c00
 8006630:	08008140 	.word	0x08008140

08006634 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b08a      	sub	sp, #40	; 0x28
 8006638:	af02      	add	r7, sp, #8
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	603b      	str	r3, [r7, #0]
 8006640:	4613      	mov	r3, r2
 8006642:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006648:	2b20      	cmp	r3, #32
 800664a:	d17f      	bne.n	800674c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <HAL_UART_Transmit+0x24>
 8006652:	88fb      	ldrh	r3, [r7, #6]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e078      	b.n	800674e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006662:	2b01      	cmp	r3, #1
 8006664:	d101      	bne.n	800666a <HAL_UART_Transmit+0x36>
 8006666:	2302      	movs	r3, #2
 8006668:	e071      	b.n	800674e <HAL_UART_Transmit+0x11a>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2221      	movs	r2, #33	; 0x21
 800667c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800667e:	f7fc f867 	bl	8002750 <HAL_GetTick>
 8006682:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	88fa      	ldrh	r2, [r7, #6]
 8006688:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	88fa      	ldrh	r2, [r7, #6]
 8006690:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800669c:	d108      	bne.n	80066b0 <HAL_UART_Transmit+0x7c>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d104      	bne.n	80066b0 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80066a6:	2300      	movs	r3, #0
 80066a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	61bb      	str	r3, [r7, #24]
 80066ae:	e003      	b.n	80066b8 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066b4:	2300      	movs	r3, #0
 80066b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80066c0:	e02c      	b.n	800671c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2200      	movs	r2, #0
 80066ca:	2180      	movs	r1, #128	; 0x80
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 ff48 	bl	8007562 <UART_WaitOnFlagUntilTimeout>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e038      	b.n	800674e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10b      	bne.n	80066fa <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	881b      	ldrh	r3, [r3, #0]
 80066e6:	461a      	mov	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	3302      	adds	r3, #2
 80066f6:	61bb      	str	r3, [r7, #24]
 80066f8:	e007      	b.n	800670a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	781a      	ldrb	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	3301      	adds	r3, #1
 8006708:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006710:	b29b      	uxth	r3, r3
 8006712:	3b01      	subs	r3, #1
 8006714:	b29a      	uxth	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006722:	b29b      	uxth	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1cc      	bne.n	80066c2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	2200      	movs	r2, #0
 8006730:	2140      	movs	r1, #64	; 0x40
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f000 ff15 	bl	8007562 <UART_WaitOnFlagUntilTimeout>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e005      	b.n	800674e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2220      	movs	r2, #32
 8006746:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006748:	2300      	movs	r3, #0
 800674a:	e000      	b.n	800674e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800674c:	2302      	movs	r3, #2
  }
}
 800674e:	4618      	mov	r0, r3
 8006750:	3720      	adds	r7, #32
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b08a      	sub	sp, #40	; 0x28
 800675a:	af02      	add	r7, sp, #8
 800675c:	60f8      	str	r0, [r7, #12]
 800675e:	60b9      	str	r1, [r7, #8]
 8006760:	603b      	str	r3, [r7, #0]
 8006762:	4613      	mov	r3, r2
 8006764:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800676a:	2b20      	cmp	r3, #32
 800676c:	f040 80ba 	bne.w	80068e4 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <HAL_UART_Receive+0x26>
 8006776:	88fb      	ldrh	r3, [r7, #6]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e0b2      	b.n	80068e6 <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006786:	2b01      	cmp	r3, #1
 8006788:	d101      	bne.n	800678e <HAL_UART_Receive+0x38>
 800678a:	2302      	movs	r3, #2
 800678c:	e0ab      	b.n	80068e6 <HAL_UART_Receive+0x190>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2222      	movs	r2, #34	; 0x22
 80067a0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80067a2:	f7fb ffd5 	bl	8002750 <HAL_GetTick>
 80067a6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	88fa      	ldrh	r2, [r7, #6]
 80067ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	88fa      	ldrh	r2, [r7, #6]
 80067b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067c0:	d10e      	bne.n	80067e0 <HAL_UART_Receive+0x8a>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d105      	bne.n	80067d6 <HAL_UART_Receive+0x80>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f240 12ff 	movw	r2, #511	; 0x1ff
 80067d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067d4:	e02d      	b.n	8006832 <HAL_UART_Receive+0xdc>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	22ff      	movs	r2, #255	; 0xff
 80067da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067de:	e028      	b.n	8006832 <HAL_UART_Receive+0xdc>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10d      	bne.n	8006804 <HAL_UART_Receive+0xae>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d104      	bne.n	80067fa <HAL_UART_Receive+0xa4>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	22ff      	movs	r2, #255	; 0xff
 80067f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067f8:	e01b      	b.n	8006832 <HAL_UART_Receive+0xdc>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	227f      	movs	r2, #127	; 0x7f
 80067fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006802:	e016      	b.n	8006832 <HAL_UART_Receive+0xdc>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800680c:	d10d      	bne.n	800682a <HAL_UART_Receive+0xd4>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d104      	bne.n	8006820 <HAL_UART_Receive+0xca>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	227f      	movs	r2, #127	; 0x7f
 800681a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800681e:	e008      	b.n	8006832 <HAL_UART_Receive+0xdc>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	223f      	movs	r2, #63	; 0x3f
 8006824:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006828:	e003      	b.n	8006832 <HAL_UART_Receive+0xdc>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006838:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006842:	d108      	bne.n	8006856 <HAL_UART_Receive+0x100>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d104      	bne.n	8006856 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800684c:	2300      	movs	r3, #0
 800684e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	61bb      	str	r3, [r7, #24]
 8006854:	e003      	b.n	800685e <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800685a:	2300      	movs	r3, #0
 800685c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006866:	e032      	b.n	80068ce <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	9300      	str	r3, [sp, #0]
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	2200      	movs	r2, #0
 8006870:	2120      	movs	r1, #32
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 fe75 	bl	8007562 <UART_WaitOnFlagUntilTimeout>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e031      	b.n	80068e6 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10c      	bne.n	80068a2 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	b29a      	uxth	r2, r3
 8006890:	8a7b      	ldrh	r3, [r7, #18]
 8006892:	4013      	ands	r3, r2
 8006894:	b29a      	uxth	r2, r3
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	3302      	adds	r3, #2
 800689e:	61bb      	str	r3, [r7, #24]
 80068a0:	e00c      	b.n	80068bc <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	8a7b      	ldrh	r3, [r7, #18]
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	4013      	ands	r3, r2
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	3301      	adds	r3, #1
 80068ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1c6      	bne.n	8006868 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2220      	movs	r2, #32
 80068de:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80068e0:	2300      	movs	r3, #0
 80068e2:	e000      	b.n	80068e6 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 80068e4:	2302      	movs	r3, #2
  }
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3720      	adds	r7, #32
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
	...

080068f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b088      	sub	sp, #32
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006910:	69fa      	ldr	r2, [r7, #28]
 8006912:	f640 030f 	movw	r3, #2063	; 0x80f
 8006916:	4013      	ands	r3, r2
 8006918:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d113      	bne.n	8006948 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	f003 0320 	and.w	r3, r3, #32
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00e      	beq.n	8006948 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	f003 0320 	and.w	r3, r3, #32
 8006930:	2b00      	cmp	r3, #0
 8006932:	d009      	beq.n	8006948 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 8114 	beq.w	8006b66 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	4798      	blx	r3
      }
      return;
 8006946:	e10e      	b.n	8006b66 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 80d6 	beq.w	8006afc <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	d105      	bne.n	8006966 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 80cb 	beq.w	8006afc <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00e      	beq.n	800698e <HAL_UART_IRQHandler+0x9e>
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006976:	2b00      	cmp	r3, #0
 8006978:	d009      	beq.n	800698e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2201      	movs	r2, #1
 8006980:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006986:	f043 0201 	orr.w	r2, r3, #1
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00e      	beq.n	80069b6 <HAL_UART_IRQHandler+0xc6>
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d009      	beq.n	80069b6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2202      	movs	r2, #2
 80069a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069ae:	f043 0204 	orr.w	r2, r3, #4
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00e      	beq.n	80069de <HAL_UART_IRQHandler+0xee>
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d009      	beq.n	80069de <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2204      	movs	r2, #4
 80069d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069d6:	f043 0202 	orr.w	r2, r3, #2
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	f003 0308 	and.w	r3, r3, #8
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d013      	beq.n	8006a10 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	f003 0320 	and.w	r3, r3, #32
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d104      	bne.n	80069fc <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d009      	beq.n	8006a10 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2208      	movs	r2, #8
 8006a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a08:	f043 0208 	orr.w	r2, r3, #8
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00f      	beq.n	8006a3a <HAL_UART_IRQHandler+0x14a>
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00a      	beq.n	8006a3a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a32:	f043 0220 	orr.w	r2, r3, #32
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f000 8093 	beq.w	8006b6a <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	f003 0320 	and.w	r3, r3, #32
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00c      	beq.n	8006a68 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	f003 0320 	and.w	r3, r3, #32
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d007      	beq.n	8006a68 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a6c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a78:	2b40      	cmp	r3, #64	; 0x40
 8006a7a:	d004      	beq.n	8006a86 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d031      	beq.n	8006aea <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fde6 	bl	8007658 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a96:	2b40      	cmp	r3, #64	; 0x40
 8006a98:	d123      	bne.n	8006ae2 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aa8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d013      	beq.n	8006ada <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ab6:	4a30      	ldr	r2, [pc, #192]	; (8006b78 <HAL_UART_IRQHandler+0x288>)
 8006ab8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fc f904 	bl	8002ccc <HAL_DMA_Abort_IT>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d016      	beq.n	8006af8 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad8:	e00e      	b.n	8006af8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f858 	bl	8006b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae0:	e00a      	b.n	8006af8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f854 	bl	8006b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae8:	e006      	b.n	8006af8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f850 	bl	8006b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006af6:	e038      	b.n	8006b6a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af8:	bf00      	nop
    return;
 8006afa:	e036      	b.n	8006b6a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00d      	beq.n	8006b22 <HAL_UART_IRQHandler+0x232>
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d008      	beq.n	8006b22 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006b18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f842 	bl	8006ba4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b20:	e026      	b.n	8006b70 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00d      	beq.n	8006b48 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d008      	beq.n	8006b48 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d017      	beq.n	8006b6e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	4798      	blx	r3
    }
    return;
 8006b46:	e012      	b.n	8006b6e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00e      	beq.n	8006b70 <HAL_UART_IRQHandler+0x280>
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d009      	beq.n	8006b70 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fdb1 	bl	80076c4 <UART_EndTransmit_IT>
    return;
 8006b62:	bf00      	nop
 8006b64:	e004      	b.n	8006b70 <HAL_UART_IRQHandler+0x280>
      return;
 8006b66:	bf00      	nop
 8006b68:	e002      	b.n	8006b70 <HAL_UART_IRQHandler+0x280>
    return;
 8006b6a:	bf00      	nop
 8006b6c:	e000      	b.n	8006b70 <HAL_UART_IRQHandler+0x280>
    return;
 8006b6e:	bf00      	nop
  }

}
 8006b70:	3720      	adds	r7, #32
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	08007699 	.word	0x08007699

08006b7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	75fb      	strb	r3, [r7, #23]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	4aaa      	ldr	r2, [pc, #680]	; (8006e78 <UART_SetConfig+0x2c0>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d904      	bls.n	8006bdc <UART_SetConfig+0x24>
 8006bd2:	f640 21be 	movw	r1, #2750	; 0xabe
 8006bd6:	48a9      	ldr	r0, [pc, #676]	; (8006e7c <UART_SetConfig+0x2c4>)
 8006bd8:	f7fb f821 	bl	8001c1e <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006be4:	d00d      	beq.n	8006c02 <UART_SetConfig+0x4a>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d009      	beq.n	8006c02 <UART_SetConfig+0x4a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf6:	d004      	beq.n	8006c02 <UART_SetConfig+0x4a>
 8006bf8:	f640 21bf 	movw	r1, #2751	; 0xabf
 8006bfc:	489f      	ldr	r0, [pc, #636]	; (8006e7c <UART_SetConfig+0x2c4>)
 8006bfe:	f7fb f80e 	bl	8001c1e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c0a:	d012      	beq.n	8006c32 <UART_SetConfig+0x7a>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00e      	beq.n	8006c32 <UART_SetConfig+0x7a>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c1c:	d009      	beq.n	8006c32 <UART_SetConfig+0x7a>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c26:	d004      	beq.n	8006c32 <UART_SetConfig+0x7a>
 8006c28:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 8006c2c:	4893      	ldr	r0, [pc, #588]	; (8006e7c <UART_SetConfig+0x2c4>)
 8006c2e:	f7fa fff6 	bl	8001c1e <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d009      	beq.n	8006c4e <UART_SetConfig+0x96>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c42:	d004      	beq.n	8006c4e <UART_SetConfig+0x96>
 8006c44:	f640 21c1 	movw	r1, #2753	; 0xac1
 8006c48:	488c      	ldr	r0, [pc, #560]	; (8006e7c <UART_SetConfig+0x2c4>)
 8006c4a:	f7fa ffe8 	bl	8001c1e <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00e      	beq.n	8006c74 <UART_SetConfig+0xbc>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c5e:	d009      	beq.n	8006c74 <UART_SetConfig+0xbc>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006c68:	d004      	beq.n	8006c74 <UART_SetConfig+0xbc>
 8006c6a:	f640 21c3 	movw	r1, #2755	; 0xac3
 8006c6e:	4883      	ldr	r0, [pc, #524]	; (8006e7c <UART_SetConfig+0x2c4>)
 8006c70:	f7fa ffd5 	bl	8001c1e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	695b      	ldr	r3, [r3, #20]
 8006c78:	f023 030c 	bic.w	r3, r3, #12
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d103      	bne.n	8006c88 <UART_SetConfig+0xd0>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d104      	bne.n	8006c92 <UART_SetConfig+0xda>
 8006c88:	f640 21c4 	movw	r1, #2756	; 0xac4
 8006c8c:	487b      	ldr	r0, [pc, #492]	; (8006e7c <UART_SetConfig+0x2c4>)
 8006c8e:	f7fa ffc6 	bl	8001c1e <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d013      	beq.n	8006cc2 <UART_SetConfig+0x10a>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ca2:	d00e      	beq.n	8006cc2 <UART_SetConfig+0x10a>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cac:	d009      	beq.n	8006cc2 <UART_SetConfig+0x10a>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cb6:	d004      	beq.n	8006cc2 <UART_SetConfig+0x10a>
 8006cb8:	f640 21c5 	movw	r1, #2757	; 0xac5
 8006cbc:	486f      	ldr	r0, [pc, #444]	; (8006e7c <UART_SetConfig+0x2c4>)
 8006cbe:	f7fa ffae 	bl	8001c1e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d009      	beq.n	8006cde <UART_SetConfig+0x126>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cd2:	d004      	beq.n	8006cde <UART_SetConfig+0x126>
 8006cd4:	f640 21c6 	movw	r1, #2758	; 0xac6
 8006cd8:	4868      	ldr	r0, [pc, #416]	; (8006e7c <UART_SetConfig+0x2c4>)
 8006cda:	f7fa ffa0 	bl	8001c1e <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689a      	ldr	r2, [r3, #8]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	431a      	orrs	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	4b60      	ldr	r3, [pc, #384]	; (8006e80 <UART_SetConfig+0x2c8>)
 8006cfe:	4013      	ands	r3, r2
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	6812      	ldr	r2, [r2, #0]
 8006d04:	6939      	ldr	r1, [r7, #16]
 8006d06:	430b      	orrs	r3, r1
 8006d08:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	68da      	ldr	r2, [r3, #12]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a4e      	ldr	r2, [pc, #312]	; (8006e84 <UART_SetConfig+0x2cc>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d122      	bne.n	8006d94 <UART_SetConfig+0x1dc>
 8006d4e:	4b4e      	ldr	r3, [pc, #312]	; (8006e88 <UART_SetConfig+0x2d0>)
 8006d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d54:	f003 0303 	and.w	r3, r3, #3
 8006d58:	2b03      	cmp	r3, #3
 8006d5a:	d817      	bhi.n	8006d8c <UART_SetConfig+0x1d4>
 8006d5c:	a201      	add	r2, pc, #4	; (adr r2, 8006d64 <UART_SetConfig+0x1ac>)
 8006d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d62:	bf00      	nop
 8006d64:	08006d75 	.word	0x08006d75
 8006d68:	08006d81 	.word	0x08006d81
 8006d6c:	08006d7b 	.word	0x08006d7b
 8006d70:	08006d87 	.word	0x08006d87
 8006d74:	2301      	movs	r3, #1
 8006d76:	77fb      	strb	r3, [r7, #31]
 8006d78:	e14d      	b.n	8007016 <UART_SetConfig+0x45e>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	77fb      	strb	r3, [r7, #31]
 8006d7e:	e14a      	b.n	8007016 <UART_SetConfig+0x45e>
 8006d80:	2304      	movs	r3, #4
 8006d82:	77fb      	strb	r3, [r7, #31]
 8006d84:	e147      	b.n	8007016 <UART_SetConfig+0x45e>
 8006d86:	2308      	movs	r3, #8
 8006d88:	77fb      	strb	r3, [r7, #31]
 8006d8a:	e144      	b.n	8007016 <UART_SetConfig+0x45e>
 8006d8c:	2310      	movs	r3, #16
 8006d8e:	77fb      	strb	r3, [r7, #31]
 8006d90:	bf00      	nop
 8006d92:	e140      	b.n	8007016 <UART_SetConfig+0x45e>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a3c      	ldr	r2, [pc, #240]	; (8006e8c <UART_SetConfig+0x2d4>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d134      	bne.n	8006e08 <UART_SetConfig+0x250>
 8006d9e:	4b3a      	ldr	r3, [pc, #232]	; (8006e88 <UART_SetConfig+0x2d0>)
 8006da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da4:	f003 030c 	and.w	r3, r3, #12
 8006da8:	2b0c      	cmp	r3, #12
 8006daa:	d829      	bhi.n	8006e00 <UART_SetConfig+0x248>
 8006dac:	a201      	add	r2, pc, #4	; (adr r2, 8006db4 <UART_SetConfig+0x1fc>)
 8006dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db2:	bf00      	nop
 8006db4:	08006de9 	.word	0x08006de9
 8006db8:	08006e01 	.word	0x08006e01
 8006dbc:	08006e01 	.word	0x08006e01
 8006dc0:	08006e01 	.word	0x08006e01
 8006dc4:	08006df5 	.word	0x08006df5
 8006dc8:	08006e01 	.word	0x08006e01
 8006dcc:	08006e01 	.word	0x08006e01
 8006dd0:	08006e01 	.word	0x08006e01
 8006dd4:	08006def 	.word	0x08006def
 8006dd8:	08006e01 	.word	0x08006e01
 8006ddc:	08006e01 	.word	0x08006e01
 8006de0:	08006e01 	.word	0x08006e01
 8006de4:	08006dfb 	.word	0x08006dfb
 8006de8:	2300      	movs	r3, #0
 8006dea:	77fb      	strb	r3, [r7, #31]
 8006dec:	e113      	b.n	8007016 <UART_SetConfig+0x45e>
 8006dee:	2302      	movs	r3, #2
 8006df0:	77fb      	strb	r3, [r7, #31]
 8006df2:	e110      	b.n	8007016 <UART_SetConfig+0x45e>
 8006df4:	2304      	movs	r3, #4
 8006df6:	77fb      	strb	r3, [r7, #31]
 8006df8:	e10d      	b.n	8007016 <UART_SetConfig+0x45e>
 8006dfa:	2308      	movs	r3, #8
 8006dfc:	77fb      	strb	r3, [r7, #31]
 8006dfe:	e10a      	b.n	8007016 <UART_SetConfig+0x45e>
 8006e00:	2310      	movs	r3, #16
 8006e02:	77fb      	strb	r3, [r7, #31]
 8006e04:	bf00      	nop
 8006e06:	e106      	b.n	8007016 <UART_SetConfig+0x45e>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a20      	ldr	r2, [pc, #128]	; (8006e90 <UART_SetConfig+0x2d8>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d120      	bne.n	8006e54 <UART_SetConfig+0x29c>
 8006e12:	4b1d      	ldr	r3, [pc, #116]	; (8006e88 <UART_SetConfig+0x2d0>)
 8006e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e1c:	2b10      	cmp	r3, #16
 8006e1e:	d00f      	beq.n	8006e40 <UART_SetConfig+0x288>
 8006e20:	2b10      	cmp	r3, #16
 8006e22:	d802      	bhi.n	8006e2a <UART_SetConfig+0x272>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <UART_SetConfig+0x27c>
 8006e28:	e010      	b.n	8006e4c <UART_SetConfig+0x294>
 8006e2a:	2b20      	cmp	r3, #32
 8006e2c:	d005      	beq.n	8006e3a <UART_SetConfig+0x282>
 8006e2e:	2b30      	cmp	r3, #48	; 0x30
 8006e30:	d009      	beq.n	8006e46 <UART_SetConfig+0x28e>
 8006e32:	e00b      	b.n	8006e4c <UART_SetConfig+0x294>
 8006e34:	2300      	movs	r3, #0
 8006e36:	77fb      	strb	r3, [r7, #31]
 8006e38:	e0ed      	b.n	8007016 <UART_SetConfig+0x45e>
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	77fb      	strb	r3, [r7, #31]
 8006e3e:	e0ea      	b.n	8007016 <UART_SetConfig+0x45e>
 8006e40:	2304      	movs	r3, #4
 8006e42:	77fb      	strb	r3, [r7, #31]
 8006e44:	e0e7      	b.n	8007016 <UART_SetConfig+0x45e>
 8006e46:	2308      	movs	r3, #8
 8006e48:	77fb      	strb	r3, [r7, #31]
 8006e4a:	e0e4      	b.n	8007016 <UART_SetConfig+0x45e>
 8006e4c:	2310      	movs	r3, #16
 8006e4e:	77fb      	strb	r3, [r7, #31]
 8006e50:	bf00      	nop
 8006e52:	e0e0      	b.n	8007016 <UART_SetConfig+0x45e>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a0e      	ldr	r2, [pc, #56]	; (8006e94 <UART_SetConfig+0x2dc>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d131      	bne.n	8006ec2 <UART_SetConfig+0x30a>
 8006e5e:	4b0a      	ldr	r3, [pc, #40]	; (8006e88 <UART_SetConfig+0x2d0>)
 8006e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e68:	2b40      	cmp	r3, #64	; 0x40
 8006e6a:	d020      	beq.n	8006eae <UART_SetConfig+0x2f6>
 8006e6c:	2b40      	cmp	r3, #64	; 0x40
 8006e6e:	d813      	bhi.n	8006e98 <UART_SetConfig+0x2e0>
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d016      	beq.n	8006ea2 <UART_SetConfig+0x2ea>
 8006e74:	e021      	b.n	8006eba <UART_SetConfig+0x302>
 8006e76:	bf00      	nop
 8006e78:	019bfcc0 	.word	0x019bfcc0
 8006e7c:	08008140 	.word	0x08008140
 8006e80:	efff69f3 	.word	0xefff69f3
 8006e84:	40011000 	.word	0x40011000
 8006e88:	40023800 	.word	0x40023800
 8006e8c:	40004400 	.word	0x40004400
 8006e90:	40004800 	.word	0x40004800
 8006e94:	40004c00 	.word	0x40004c00
 8006e98:	2b80      	cmp	r3, #128	; 0x80
 8006e9a:	d005      	beq.n	8006ea8 <UART_SetConfig+0x2f0>
 8006e9c:	2bc0      	cmp	r3, #192	; 0xc0
 8006e9e:	d009      	beq.n	8006eb4 <UART_SetConfig+0x2fc>
 8006ea0:	e00b      	b.n	8006eba <UART_SetConfig+0x302>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	77fb      	strb	r3, [r7, #31]
 8006ea6:	e0b6      	b.n	8007016 <UART_SetConfig+0x45e>
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	77fb      	strb	r3, [r7, #31]
 8006eac:	e0b3      	b.n	8007016 <UART_SetConfig+0x45e>
 8006eae:	2304      	movs	r3, #4
 8006eb0:	77fb      	strb	r3, [r7, #31]
 8006eb2:	e0b0      	b.n	8007016 <UART_SetConfig+0x45e>
 8006eb4:	2308      	movs	r3, #8
 8006eb6:	77fb      	strb	r3, [r7, #31]
 8006eb8:	e0ad      	b.n	8007016 <UART_SetConfig+0x45e>
 8006eba:	2310      	movs	r3, #16
 8006ebc:	77fb      	strb	r3, [r7, #31]
 8006ebe:	bf00      	nop
 8006ec0:	e0a9      	b.n	8007016 <UART_SetConfig+0x45e>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4aaa      	ldr	r2, [pc, #680]	; (8007170 <UART_SetConfig+0x5b8>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d124      	bne.n	8006f16 <UART_SetConfig+0x35e>
 8006ecc:	4ba9      	ldr	r3, [pc, #676]	; (8007174 <UART_SetConfig+0x5bc>)
 8006ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eda:	d012      	beq.n	8006f02 <UART_SetConfig+0x34a>
 8006edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ee0:	d802      	bhi.n	8006ee8 <UART_SetConfig+0x330>
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d007      	beq.n	8006ef6 <UART_SetConfig+0x33e>
 8006ee6:	e012      	b.n	8006f0e <UART_SetConfig+0x356>
 8006ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eec:	d006      	beq.n	8006efc <UART_SetConfig+0x344>
 8006eee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ef2:	d009      	beq.n	8006f08 <UART_SetConfig+0x350>
 8006ef4:	e00b      	b.n	8006f0e <UART_SetConfig+0x356>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	77fb      	strb	r3, [r7, #31]
 8006efa:	e08c      	b.n	8007016 <UART_SetConfig+0x45e>
 8006efc:	2302      	movs	r3, #2
 8006efe:	77fb      	strb	r3, [r7, #31]
 8006f00:	e089      	b.n	8007016 <UART_SetConfig+0x45e>
 8006f02:	2304      	movs	r3, #4
 8006f04:	77fb      	strb	r3, [r7, #31]
 8006f06:	e086      	b.n	8007016 <UART_SetConfig+0x45e>
 8006f08:	2308      	movs	r3, #8
 8006f0a:	77fb      	strb	r3, [r7, #31]
 8006f0c:	e083      	b.n	8007016 <UART_SetConfig+0x45e>
 8006f0e:	2310      	movs	r3, #16
 8006f10:	77fb      	strb	r3, [r7, #31]
 8006f12:	bf00      	nop
 8006f14:	e07f      	b.n	8007016 <UART_SetConfig+0x45e>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a97      	ldr	r2, [pc, #604]	; (8007178 <UART_SetConfig+0x5c0>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d124      	bne.n	8006f6a <UART_SetConfig+0x3b2>
 8006f20:	4b94      	ldr	r3, [pc, #592]	; (8007174 <UART_SetConfig+0x5bc>)
 8006f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f26:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f2e:	d012      	beq.n	8006f56 <UART_SetConfig+0x39e>
 8006f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f34:	d802      	bhi.n	8006f3c <UART_SetConfig+0x384>
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d007      	beq.n	8006f4a <UART_SetConfig+0x392>
 8006f3a:	e012      	b.n	8006f62 <UART_SetConfig+0x3aa>
 8006f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f40:	d006      	beq.n	8006f50 <UART_SetConfig+0x398>
 8006f42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f46:	d009      	beq.n	8006f5c <UART_SetConfig+0x3a4>
 8006f48:	e00b      	b.n	8006f62 <UART_SetConfig+0x3aa>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	77fb      	strb	r3, [r7, #31]
 8006f4e:	e062      	b.n	8007016 <UART_SetConfig+0x45e>
 8006f50:	2302      	movs	r3, #2
 8006f52:	77fb      	strb	r3, [r7, #31]
 8006f54:	e05f      	b.n	8007016 <UART_SetConfig+0x45e>
 8006f56:	2304      	movs	r3, #4
 8006f58:	77fb      	strb	r3, [r7, #31]
 8006f5a:	e05c      	b.n	8007016 <UART_SetConfig+0x45e>
 8006f5c:	2308      	movs	r3, #8
 8006f5e:	77fb      	strb	r3, [r7, #31]
 8006f60:	e059      	b.n	8007016 <UART_SetConfig+0x45e>
 8006f62:	2310      	movs	r3, #16
 8006f64:	77fb      	strb	r3, [r7, #31]
 8006f66:	bf00      	nop
 8006f68:	e055      	b.n	8007016 <UART_SetConfig+0x45e>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a83      	ldr	r2, [pc, #524]	; (800717c <UART_SetConfig+0x5c4>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d124      	bne.n	8006fbe <UART_SetConfig+0x406>
 8006f74:	4b7f      	ldr	r3, [pc, #508]	; (8007174 <UART_SetConfig+0x5bc>)
 8006f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f7a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f82:	d012      	beq.n	8006faa <UART_SetConfig+0x3f2>
 8006f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f88:	d802      	bhi.n	8006f90 <UART_SetConfig+0x3d8>
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d007      	beq.n	8006f9e <UART_SetConfig+0x3e6>
 8006f8e:	e012      	b.n	8006fb6 <UART_SetConfig+0x3fe>
 8006f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f94:	d006      	beq.n	8006fa4 <UART_SetConfig+0x3ec>
 8006f96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f9a:	d009      	beq.n	8006fb0 <UART_SetConfig+0x3f8>
 8006f9c:	e00b      	b.n	8006fb6 <UART_SetConfig+0x3fe>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	77fb      	strb	r3, [r7, #31]
 8006fa2:	e038      	b.n	8007016 <UART_SetConfig+0x45e>
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	77fb      	strb	r3, [r7, #31]
 8006fa8:	e035      	b.n	8007016 <UART_SetConfig+0x45e>
 8006faa:	2304      	movs	r3, #4
 8006fac:	77fb      	strb	r3, [r7, #31]
 8006fae:	e032      	b.n	8007016 <UART_SetConfig+0x45e>
 8006fb0:	2308      	movs	r3, #8
 8006fb2:	77fb      	strb	r3, [r7, #31]
 8006fb4:	e02f      	b.n	8007016 <UART_SetConfig+0x45e>
 8006fb6:	2310      	movs	r3, #16
 8006fb8:	77fb      	strb	r3, [r7, #31]
 8006fba:	bf00      	nop
 8006fbc:	e02b      	b.n	8007016 <UART_SetConfig+0x45e>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a6f      	ldr	r2, [pc, #444]	; (8007180 <UART_SetConfig+0x5c8>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d124      	bne.n	8007012 <UART_SetConfig+0x45a>
 8006fc8:	4b6a      	ldr	r3, [pc, #424]	; (8007174 <UART_SetConfig+0x5bc>)
 8006fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006fd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fd6:	d012      	beq.n	8006ffe <UART_SetConfig+0x446>
 8006fd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fdc:	d802      	bhi.n	8006fe4 <UART_SetConfig+0x42c>
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d007      	beq.n	8006ff2 <UART_SetConfig+0x43a>
 8006fe2:	e012      	b.n	800700a <UART_SetConfig+0x452>
 8006fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fe8:	d006      	beq.n	8006ff8 <UART_SetConfig+0x440>
 8006fea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006fee:	d009      	beq.n	8007004 <UART_SetConfig+0x44c>
 8006ff0:	e00b      	b.n	800700a <UART_SetConfig+0x452>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	77fb      	strb	r3, [r7, #31]
 8006ff6:	e00e      	b.n	8007016 <UART_SetConfig+0x45e>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	77fb      	strb	r3, [r7, #31]
 8006ffc:	e00b      	b.n	8007016 <UART_SetConfig+0x45e>
 8006ffe:	2304      	movs	r3, #4
 8007000:	77fb      	strb	r3, [r7, #31]
 8007002:	e008      	b.n	8007016 <UART_SetConfig+0x45e>
 8007004:	2308      	movs	r3, #8
 8007006:	77fb      	strb	r3, [r7, #31]
 8007008:	e005      	b.n	8007016 <UART_SetConfig+0x45e>
 800700a:	2310      	movs	r3, #16
 800700c:	77fb      	strb	r3, [r7, #31]
 800700e:	bf00      	nop
 8007010:	e001      	b.n	8007016 <UART_SetConfig+0x45e>
 8007012:	2310      	movs	r3, #16
 8007014:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800701e:	d17f      	bne.n	8007120 <UART_SetConfig+0x568>
  {
    switch (clocksource)
 8007020:	7ffb      	ldrb	r3, [r7, #31]
 8007022:	2b08      	cmp	r3, #8
 8007024:	d85c      	bhi.n	80070e0 <UART_SetConfig+0x528>
 8007026:	a201      	add	r2, pc, #4	; (adr r2, 800702c <UART_SetConfig+0x474>)
 8007028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702c:	08007051 	.word	0x08007051
 8007030:	08007071 	.word	0x08007071
 8007034:	08007091 	.word	0x08007091
 8007038:	080070e1 	.word	0x080070e1
 800703c:	080070a9 	.word	0x080070a9
 8007040:	080070e1 	.word	0x080070e1
 8007044:	080070e1 	.word	0x080070e1
 8007048:	080070e1 	.word	0x080070e1
 800704c:	080070c9 	.word	0x080070c9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007050:	f7fd f8a4 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 8007054:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	005a      	lsls	r2, r3, #1
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	085b      	lsrs	r3, r3, #1
 8007060:	441a      	add	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	fbb2 f3f3 	udiv	r3, r2, r3
 800706a:	b29b      	uxth	r3, r3
 800706c:	61bb      	str	r3, [r7, #24]
        break;
 800706e:	e03a      	b.n	80070e6 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007070:	f7fd f8a8 	bl	80041c4 <HAL_RCC_GetPCLK2Freq>
 8007074:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	005a      	lsls	r2, r3, #1
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	085b      	lsrs	r3, r3, #1
 8007080:	441a      	add	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	fbb2 f3f3 	udiv	r3, r2, r3
 800708a:	b29b      	uxth	r3, r3
 800708c:	61bb      	str	r3, [r7, #24]
        break;
 800708e:	e02a      	b.n	80070e6 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	085a      	lsrs	r2, r3, #1
 8007096:	4b3b      	ldr	r3, [pc, #236]	; (8007184 <UART_SetConfig+0x5cc>)
 8007098:	4413      	add	r3, r2
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	6852      	ldr	r2, [r2, #4]
 800709e:	fbb3 f3f2 	udiv	r3, r3, r2
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	61bb      	str	r3, [r7, #24]
        break;
 80070a6:	e01e      	b.n	80070e6 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070a8:	f7fc ffba 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 80070ac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	005a      	lsls	r2, r3, #1
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	085b      	lsrs	r3, r3, #1
 80070b8:	441a      	add	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	61bb      	str	r3, [r7, #24]
        break;
 80070c6:	e00e      	b.n	80070e6 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	085b      	lsrs	r3, r3, #1
 80070ce:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070da:	b29b      	uxth	r3, r3
 80070dc:	61bb      	str	r3, [r7, #24]
        break;
 80070de:	e002      	b.n	80070e6 <UART_SetConfig+0x52e>
      default:
        ret = HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	75fb      	strb	r3, [r7, #23]
        break;
 80070e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	2b0f      	cmp	r3, #15
 80070ea:	d916      	bls.n	800711a <UART_SetConfig+0x562>
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070f2:	d212      	bcs.n	800711a <UART_SetConfig+0x562>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	f023 030f 	bic.w	r3, r3, #15
 80070fc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	085b      	lsrs	r3, r3, #1
 8007102:	b29b      	uxth	r3, r3
 8007104:	f003 0307 	and.w	r3, r3, #7
 8007108:	b29a      	uxth	r2, r3
 800710a:	897b      	ldrh	r3, [r7, #10]
 800710c:	4313      	orrs	r3, r2
 800710e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	897a      	ldrh	r2, [r7, #10]
 8007116:	60da      	str	r2, [r3, #12]
 8007118:	e07d      	b.n	8007216 <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	75fb      	strb	r3, [r7, #23]
 800711e:	e07a      	b.n	8007216 <UART_SetConfig+0x65e>
    }
  }
  else
  {
    switch (clocksource)
 8007120:	7ffb      	ldrb	r3, [r7, #31]
 8007122:	2b08      	cmp	r3, #8
 8007124:	d866      	bhi.n	80071f4 <UART_SetConfig+0x63c>
 8007126:	a201      	add	r2, pc, #4	; (adr r2, 800712c <UART_SetConfig+0x574>)
 8007128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712c:	08007151 	.word	0x08007151
 8007130:	08007189 	.word	0x08007189
 8007134:	080071a7 	.word	0x080071a7
 8007138:	080071f5 	.word	0x080071f5
 800713c:	080071bf 	.word	0x080071bf
 8007140:	080071f5 	.word	0x080071f5
 8007144:	080071f5 	.word	0x080071f5
 8007148:	080071f5 	.word	0x080071f5
 800714c:	080071dd 	.word	0x080071dd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007150:	f7fd f824 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 8007154:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	085a      	lsrs	r2, r3, #1
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	441a      	add	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	fbb2 f3f3 	udiv	r3, r2, r3
 8007168:	b29b      	uxth	r3, r3
 800716a:	61bb      	str	r3, [r7, #24]
        break;
 800716c:	e045      	b.n	80071fa <UART_SetConfig+0x642>
 800716e:	bf00      	nop
 8007170:	40005000 	.word	0x40005000
 8007174:	40023800 	.word	0x40023800
 8007178:	40011400 	.word	0x40011400
 800717c:	40007800 	.word	0x40007800
 8007180:	40007c00 	.word	0x40007c00
 8007184:	01e84800 	.word	0x01e84800
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007188:	f7fd f81c 	bl	80041c4 <HAL_RCC_GetPCLK2Freq>
 800718c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	085a      	lsrs	r2, r3, #1
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	441a      	add	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	61bb      	str	r3, [r7, #24]
        break;
 80071a4:	e029      	b.n	80071fa <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	085a      	lsrs	r2, r3, #1
 80071ac:	4b1f      	ldr	r3, [pc, #124]	; (800722c <UART_SetConfig+0x674>)
 80071ae:	4413      	add	r3, r2
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	6852      	ldr	r2, [r2, #4]
 80071b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	61bb      	str	r3, [r7, #24]
        break;
 80071bc:	e01d      	b.n	80071fa <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071be:	f7fc ff2f 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 80071c2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	085a      	lsrs	r2, r3, #1
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	441a      	add	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	61bb      	str	r3, [r7, #24]
        break;
 80071da:	e00e      	b.n	80071fa <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	085b      	lsrs	r3, r3, #1
 80071e2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	61bb      	str	r3, [r7, #24]
        break;
 80071f2:	e002      	b.n	80071fa <UART_SetConfig+0x642>
      default:
        ret = HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	75fb      	strb	r3, [r7, #23]
        break;
 80071f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	2b0f      	cmp	r3, #15
 80071fe:	d908      	bls.n	8007212 <UART_SetConfig+0x65a>
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007206:	d204      	bcs.n	8007212 <UART_SetConfig+0x65a>
    {
      huart->Instance->BRR = usartdiv;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	69ba      	ldr	r2, [r7, #24]
 800720e:	60da      	str	r2, [r3, #12]
 8007210:	e001      	b.n	8007216 <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007222:	7dfb      	ldrb	r3, [r7, #23]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3720      	adds	r7, #32
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	00f42400 	.word	0x00f42400

08007230 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723c:	2bff      	cmp	r3, #255	; 0xff
 800723e:	d904      	bls.n	800724a <UART_AdvFeatureConfig+0x1a>
 8007240:	f640 3143 	movw	r1, #2883	; 0xb43
 8007244:	489f      	ldr	r0, [pc, #636]	; (80074c4 <UART_AdvFeatureConfig+0x294>)
 8007246:	f7fa fcea 	bl	8001c1e <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b00      	cmp	r3, #0
 8007254:	d018      	beq.n	8007288 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725a:	2b00      	cmp	r3, #0
 800725c:	d009      	beq.n	8007272 <UART_AdvFeatureConfig+0x42>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007262:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007266:	d004      	beq.n	8007272 <UART_AdvFeatureConfig+0x42>
 8007268:	f640 3148 	movw	r1, #2888	; 0xb48
 800726c:	4895      	ldr	r0, [pc, #596]	; (80074c4 <UART_AdvFeatureConfig+0x294>)
 800726e:	f7fa fcd6 	bl	8001c1e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728c:	f003 0302 	and.w	r3, r3, #2
 8007290:	2b00      	cmp	r3, #0
 8007292:	d018      	beq.n	80072c6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007298:	2b00      	cmp	r3, #0
 800729a:	d009      	beq.n	80072b0 <UART_AdvFeatureConfig+0x80>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072a4:	d004      	beq.n	80072b0 <UART_AdvFeatureConfig+0x80>
 80072a6:	f640 314f 	movw	r1, #2895	; 0xb4f
 80072aa:	4886      	ldr	r0, [pc, #536]	; (80074c4 <UART_AdvFeatureConfig+0x294>)
 80072ac:	f7fa fcb7 	bl	8001c1e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	430a      	orrs	r2, r1
 80072c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ca:	f003 0304 	and.w	r3, r3, #4
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d018      	beq.n	8007304 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d009      	beq.n	80072ee <UART_AdvFeatureConfig+0xbe>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072e2:	d004      	beq.n	80072ee <UART_AdvFeatureConfig+0xbe>
 80072e4:	f640 3156 	movw	r1, #2902	; 0xb56
 80072e8:	4876      	ldr	r0, [pc, #472]	; (80074c4 <UART_AdvFeatureConfig+0x294>)
 80072ea:	f7fa fc98 	bl	8001c1e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	430a      	orrs	r2, r1
 8007302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	f003 0308 	and.w	r3, r3, #8
 800730c:	2b00      	cmp	r3, #0
 800730e:	d018      	beq.n	8007342 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007314:	2b00      	cmp	r3, #0
 8007316:	d009      	beq.n	800732c <UART_AdvFeatureConfig+0xfc>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800731c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007320:	d004      	beq.n	800732c <UART_AdvFeatureConfig+0xfc>
 8007322:	f640 315d 	movw	r1, #2909	; 0xb5d
 8007326:	4867      	ldr	r0, [pc, #412]	; (80074c4 <UART_AdvFeatureConfig+0x294>)
 8007328:	f7fa fc79 	bl	8001c1e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007346:	f003 0310 	and.w	r3, r3, #16
 800734a:	2b00      	cmp	r3, #0
 800734c:	d018      	beq.n	8007380 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007352:	2b00      	cmp	r3, #0
 8007354:	d009      	beq.n	800736a <UART_AdvFeatureConfig+0x13a>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800735e:	d004      	beq.n	800736a <UART_AdvFeatureConfig+0x13a>
 8007360:	f640 3164 	movw	r1, #2916	; 0xb64
 8007364:	4857      	ldr	r0, [pc, #348]	; (80074c4 <UART_AdvFeatureConfig+0x294>)
 8007366:	f7fa fc5a 	bl	8001c1e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	430a      	orrs	r2, r1
 800737e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007384:	f003 0320 	and.w	r3, r3, #32
 8007388:	2b00      	cmp	r3, #0
 800738a:	d018      	beq.n	80073be <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007390:	2b00      	cmp	r3, #0
 8007392:	d009      	beq.n	80073a8 <UART_AdvFeatureConfig+0x178>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800739c:	d004      	beq.n	80073a8 <UART_AdvFeatureConfig+0x178>
 800739e:	f640 316b 	movw	r1, #2923	; 0xb6b
 80073a2:	4848      	ldr	r0, [pc, #288]	; (80074c4 <UART_AdvFeatureConfig+0x294>)
 80073a4:	f7fa fc3b 	bl	8001c1e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	430a      	orrs	r2, r1
 80073bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d059      	beq.n	800747e <UART_AdvFeatureConfig+0x24e>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a3e      	ldr	r2, [pc, #248]	; (80074c8 <UART_AdvFeatureConfig+0x298>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d013      	beq.n	80073fc <UART_AdvFeatureConfig+0x1cc>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a3c      	ldr	r2, [pc, #240]	; (80074cc <UART_AdvFeatureConfig+0x29c>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d00e      	beq.n	80073fc <UART_AdvFeatureConfig+0x1cc>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a3b      	ldr	r2, [pc, #236]	; (80074d0 <UART_AdvFeatureConfig+0x2a0>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d009      	beq.n	80073fc <UART_AdvFeatureConfig+0x1cc>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a39      	ldr	r2, [pc, #228]	; (80074d4 <UART_AdvFeatureConfig+0x2a4>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d004      	beq.n	80073fc <UART_AdvFeatureConfig+0x1cc>
 80073f2:	f640 3172 	movw	r1, #2930	; 0xb72
 80073f6:	4833      	ldr	r0, [pc, #204]	; (80074c4 <UART_AdvFeatureConfig+0x294>)
 80073f8:	f7fa fc11 	bl	8001c1e <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007400:	2b00      	cmp	r3, #0
 8007402:	d009      	beq.n	8007418 <UART_AdvFeatureConfig+0x1e8>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007408:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800740c:	d004      	beq.n	8007418 <UART_AdvFeatureConfig+0x1e8>
 800740e:	f640 3173 	movw	r1, #2931	; 0xb73
 8007412:	482c      	ldr	r0, [pc, #176]	; (80074c4 <UART_AdvFeatureConfig+0x294>)
 8007414:	f7fa fc03 	bl	8001c1e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007436:	d122      	bne.n	800747e <UART_AdvFeatureConfig+0x24e>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743c:	2b00      	cmp	r3, #0
 800743e:	d013      	beq.n	8007468 <UART_AdvFeatureConfig+0x238>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007444:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007448:	d00e      	beq.n	8007468 <UART_AdvFeatureConfig+0x238>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800744e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007452:	d009      	beq.n	8007468 <UART_AdvFeatureConfig+0x238>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007458:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800745c:	d004      	beq.n	8007468 <UART_AdvFeatureConfig+0x238>
 800745e:	f640 3178 	movw	r1, #2936	; 0xb78
 8007462:	4818      	ldr	r0, [pc, #96]	; (80074c4 <UART_AdvFeatureConfig+0x294>)
 8007464:	f7fa fbdb 	bl	8001c1e <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007486:	2b00      	cmp	r3, #0
 8007488:	d018      	beq.n	80074bc <UART_AdvFeatureConfig+0x28c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800748e:	2b00      	cmp	r3, #0
 8007490:	d009      	beq.n	80074a6 <UART_AdvFeatureConfig+0x276>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007496:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800749a:	d004      	beq.n	80074a6 <UART_AdvFeatureConfig+0x276>
 800749c:	f44f 6138 	mov.w	r1, #2944	; 0xb80
 80074a0:	4808      	ldr	r0, [pc, #32]	; (80074c4 <UART_AdvFeatureConfig+0x294>)
 80074a2:	f7fa fbbc 	bl	8001c1e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	430a      	orrs	r2, r1
 80074ba:	605a      	str	r2, [r3, #4]
  }
}
 80074bc:	bf00      	nop
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	08008140 	.word	0x08008140
 80074c8:	40011000 	.word	0x40011000
 80074cc:	40004400 	.word	0x40004400
 80074d0:	40004800 	.word	0x40004800
 80074d4:	40011400 	.word	0x40011400

080074d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af02      	add	r7, sp, #8
 80074de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80074e6:	f7fb f933 	bl	8002750 <HAL_GetTick>
 80074ea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0308 	and.w	r3, r3, #8
 80074f6:	2b08      	cmp	r3, #8
 80074f8:	d10e      	bne.n	8007518 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f82a 	bl	8007562 <UART_WaitOnFlagUntilTimeout>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d001      	beq.n	8007518 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e020      	b.n	800755a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0304 	and.w	r3, r3, #4
 8007522:	2b04      	cmp	r3, #4
 8007524:	d10e      	bne.n	8007544 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007526:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f814 	bl	8007562 <UART_WaitOnFlagUntilTimeout>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e00a      	b.n	800755a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2220      	movs	r2, #32
 8007548:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2220      	movs	r2, #32
 800754e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b084      	sub	sp, #16
 8007566:	af00      	add	r7, sp, #0
 8007568:	60f8      	str	r0, [r7, #12]
 800756a:	60b9      	str	r1, [r7, #8]
 800756c:	603b      	str	r3, [r7, #0]
 800756e:	4613      	mov	r3, r2
 8007570:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007572:	e05d      	b.n	8007630 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757a:	d059      	beq.n	8007630 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800757c:	f7fb f8e8 	bl	8002750 <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	429a      	cmp	r2, r3
 800758a:	d302      	bcc.n	8007592 <UART_WaitOnFlagUntilTimeout+0x30>
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d11b      	bne.n	80075ca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80075a0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f022 0201 	bic.w	r2, r2, #1
 80075b0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2220      	movs	r2, #32
 80075b6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2220      	movs	r2, #32
 80075bc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e042      	b.n	8007650 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0304 	and.w	r3, r3, #4
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d02b      	beq.n	8007630 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075e6:	d123      	bne.n	8007630 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075f0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007600:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689a      	ldr	r2, [r3, #8]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f022 0201 	bic.w	r2, r2, #1
 8007610:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2220      	movs	r2, #32
 8007616:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2220      	movs	r2, #32
 800761c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2220      	movs	r2, #32
 8007622:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	e00f      	b.n	8007650 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	69da      	ldr	r2, [r3, #28]
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	4013      	ands	r3, r2
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	429a      	cmp	r2, r3
 800763e:	bf0c      	ite	eq
 8007640:	2301      	moveq	r3, #1
 8007642:	2300      	movne	r3, #0
 8007644:	b2db      	uxtb	r3, r3
 8007646:	461a      	mov	r2, r3
 8007648:	79fb      	ldrb	r3, [r7, #7]
 800764a:	429a      	cmp	r2, r3
 800764c:	d092      	beq.n	8007574 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800766e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	689a      	ldr	r2, [r3, #8]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f022 0201 	bic.w	r2, r2, #1
 800767e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2220      	movs	r2, #32
 8007684:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800768c:	bf00      	nop
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f7ff fa6a 	bl	8006b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076bc:	bf00      	nop
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076da:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2220      	movs	r2, #32
 80076e0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f7ff fa47 	bl	8006b7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076ee:	bf00      	nop
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <__errno>:
 80076f8:	4b01      	ldr	r3, [pc, #4]	; (8007700 <__errno+0x8>)
 80076fa:	6818      	ldr	r0, [r3, #0]
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	2000000c 	.word	0x2000000c

08007704 <__libc_init_array>:
 8007704:	b570      	push	{r4, r5, r6, lr}
 8007706:	4e0d      	ldr	r6, [pc, #52]	; (800773c <__libc_init_array+0x38>)
 8007708:	4c0d      	ldr	r4, [pc, #52]	; (8007740 <__libc_init_array+0x3c>)
 800770a:	1ba4      	subs	r4, r4, r6
 800770c:	10a4      	asrs	r4, r4, #2
 800770e:	2500      	movs	r5, #0
 8007710:	42a5      	cmp	r5, r4
 8007712:	d109      	bne.n	8007728 <__libc_init_array+0x24>
 8007714:	4e0b      	ldr	r6, [pc, #44]	; (8007744 <__libc_init_array+0x40>)
 8007716:	4c0c      	ldr	r4, [pc, #48]	; (8007748 <__libc_init_array+0x44>)
 8007718:	f000 fc26 	bl	8007f68 <_init>
 800771c:	1ba4      	subs	r4, r4, r6
 800771e:	10a4      	asrs	r4, r4, #2
 8007720:	2500      	movs	r5, #0
 8007722:	42a5      	cmp	r5, r4
 8007724:	d105      	bne.n	8007732 <__libc_init_array+0x2e>
 8007726:	bd70      	pop	{r4, r5, r6, pc}
 8007728:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800772c:	4798      	blx	r3
 800772e:	3501      	adds	r5, #1
 8007730:	e7ee      	b.n	8007710 <__libc_init_array+0xc>
 8007732:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007736:	4798      	blx	r3
 8007738:	3501      	adds	r5, #1
 800773a:	e7f2      	b.n	8007722 <__libc_init_array+0x1e>
 800773c:	080081d0 	.word	0x080081d0
 8007740:	080081d0 	.word	0x080081d0
 8007744:	080081d0 	.word	0x080081d0
 8007748:	080081d4 	.word	0x080081d4

0800774c <memset>:
 800774c:	4402      	add	r2, r0
 800774e:	4603      	mov	r3, r0
 8007750:	4293      	cmp	r3, r2
 8007752:	d100      	bne.n	8007756 <memset+0xa>
 8007754:	4770      	bx	lr
 8007756:	f803 1b01 	strb.w	r1, [r3], #1
 800775a:	e7f9      	b.n	8007750 <memset+0x4>

0800775c <siprintf>:
 800775c:	b40e      	push	{r1, r2, r3}
 800775e:	b500      	push	{lr}
 8007760:	b09c      	sub	sp, #112	; 0x70
 8007762:	ab1d      	add	r3, sp, #116	; 0x74
 8007764:	9002      	str	r0, [sp, #8]
 8007766:	9006      	str	r0, [sp, #24]
 8007768:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800776c:	4809      	ldr	r0, [pc, #36]	; (8007794 <siprintf+0x38>)
 800776e:	9107      	str	r1, [sp, #28]
 8007770:	9104      	str	r1, [sp, #16]
 8007772:	4909      	ldr	r1, [pc, #36]	; (8007798 <siprintf+0x3c>)
 8007774:	f853 2b04 	ldr.w	r2, [r3], #4
 8007778:	9105      	str	r1, [sp, #20]
 800777a:	6800      	ldr	r0, [r0, #0]
 800777c:	9301      	str	r3, [sp, #4]
 800777e:	a902      	add	r1, sp, #8
 8007780:	f000 f866 	bl	8007850 <_svfiprintf_r>
 8007784:	9b02      	ldr	r3, [sp, #8]
 8007786:	2200      	movs	r2, #0
 8007788:	701a      	strb	r2, [r3, #0]
 800778a:	b01c      	add	sp, #112	; 0x70
 800778c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007790:	b003      	add	sp, #12
 8007792:	4770      	bx	lr
 8007794:	2000000c 	.word	0x2000000c
 8007798:	ffff0208 	.word	0xffff0208

0800779c <__ssputs_r>:
 800779c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077a0:	688e      	ldr	r6, [r1, #8]
 80077a2:	429e      	cmp	r6, r3
 80077a4:	4682      	mov	sl, r0
 80077a6:	460c      	mov	r4, r1
 80077a8:	4690      	mov	r8, r2
 80077aa:	4699      	mov	r9, r3
 80077ac:	d837      	bhi.n	800781e <__ssputs_r+0x82>
 80077ae:	898a      	ldrh	r2, [r1, #12]
 80077b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077b4:	d031      	beq.n	800781a <__ssputs_r+0x7e>
 80077b6:	6825      	ldr	r5, [r4, #0]
 80077b8:	6909      	ldr	r1, [r1, #16]
 80077ba:	1a6f      	subs	r7, r5, r1
 80077bc:	6965      	ldr	r5, [r4, #20]
 80077be:	2302      	movs	r3, #2
 80077c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077c4:	fb95 f5f3 	sdiv	r5, r5, r3
 80077c8:	f109 0301 	add.w	r3, r9, #1
 80077cc:	443b      	add	r3, r7
 80077ce:	429d      	cmp	r5, r3
 80077d0:	bf38      	it	cc
 80077d2:	461d      	movcc	r5, r3
 80077d4:	0553      	lsls	r3, r2, #21
 80077d6:	d530      	bpl.n	800783a <__ssputs_r+0x9e>
 80077d8:	4629      	mov	r1, r5
 80077da:	f000 fb2b 	bl	8007e34 <_malloc_r>
 80077de:	4606      	mov	r6, r0
 80077e0:	b950      	cbnz	r0, 80077f8 <__ssputs_r+0x5c>
 80077e2:	230c      	movs	r3, #12
 80077e4:	f8ca 3000 	str.w	r3, [sl]
 80077e8:	89a3      	ldrh	r3, [r4, #12]
 80077ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ee:	81a3      	strh	r3, [r4, #12]
 80077f0:	f04f 30ff 	mov.w	r0, #4294967295
 80077f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077f8:	463a      	mov	r2, r7
 80077fa:	6921      	ldr	r1, [r4, #16]
 80077fc:	f000 faa8 	bl	8007d50 <memcpy>
 8007800:	89a3      	ldrh	r3, [r4, #12]
 8007802:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800780a:	81a3      	strh	r3, [r4, #12]
 800780c:	6126      	str	r6, [r4, #16]
 800780e:	6165      	str	r5, [r4, #20]
 8007810:	443e      	add	r6, r7
 8007812:	1bed      	subs	r5, r5, r7
 8007814:	6026      	str	r6, [r4, #0]
 8007816:	60a5      	str	r5, [r4, #8]
 8007818:	464e      	mov	r6, r9
 800781a:	454e      	cmp	r6, r9
 800781c:	d900      	bls.n	8007820 <__ssputs_r+0x84>
 800781e:	464e      	mov	r6, r9
 8007820:	4632      	mov	r2, r6
 8007822:	4641      	mov	r1, r8
 8007824:	6820      	ldr	r0, [r4, #0]
 8007826:	f000 fa9e 	bl	8007d66 <memmove>
 800782a:	68a3      	ldr	r3, [r4, #8]
 800782c:	1b9b      	subs	r3, r3, r6
 800782e:	60a3      	str	r3, [r4, #8]
 8007830:	6823      	ldr	r3, [r4, #0]
 8007832:	441e      	add	r6, r3
 8007834:	6026      	str	r6, [r4, #0]
 8007836:	2000      	movs	r0, #0
 8007838:	e7dc      	b.n	80077f4 <__ssputs_r+0x58>
 800783a:	462a      	mov	r2, r5
 800783c:	f000 fb54 	bl	8007ee8 <_realloc_r>
 8007840:	4606      	mov	r6, r0
 8007842:	2800      	cmp	r0, #0
 8007844:	d1e2      	bne.n	800780c <__ssputs_r+0x70>
 8007846:	6921      	ldr	r1, [r4, #16]
 8007848:	4650      	mov	r0, sl
 800784a:	f000 faa5 	bl	8007d98 <_free_r>
 800784e:	e7c8      	b.n	80077e2 <__ssputs_r+0x46>

08007850 <_svfiprintf_r>:
 8007850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007854:	461d      	mov	r5, r3
 8007856:	898b      	ldrh	r3, [r1, #12]
 8007858:	061f      	lsls	r7, r3, #24
 800785a:	b09d      	sub	sp, #116	; 0x74
 800785c:	4680      	mov	r8, r0
 800785e:	460c      	mov	r4, r1
 8007860:	4616      	mov	r6, r2
 8007862:	d50f      	bpl.n	8007884 <_svfiprintf_r+0x34>
 8007864:	690b      	ldr	r3, [r1, #16]
 8007866:	b96b      	cbnz	r3, 8007884 <_svfiprintf_r+0x34>
 8007868:	2140      	movs	r1, #64	; 0x40
 800786a:	f000 fae3 	bl	8007e34 <_malloc_r>
 800786e:	6020      	str	r0, [r4, #0]
 8007870:	6120      	str	r0, [r4, #16]
 8007872:	b928      	cbnz	r0, 8007880 <_svfiprintf_r+0x30>
 8007874:	230c      	movs	r3, #12
 8007876:	f8c8 3000 	str.w	r3, [r8]
 800787a:	f04f 30ff 	mov.w	r0, #4294967295
 800787e:	e0c8      	b.n	8007a12 <_svfiprintf_r+0x1c2>
 8007880:	2340      	movs	r3, #64	; 0x40
 8007882:	6163      	str	r3, [r4, #20]
 8007884:	2300      	movs	r3, #0
 8007886:	9309      	str	r3, [sp, #36]	; 0x24
 8007888:	2320      	movs	r3, #32
 800788a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800788e:	2330      	movs	r3, #48	; 0x30
 8007890:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007894:	9503      	str	r5, [sp, #12]
 8007896:	f04f 0b01 	mov.w	fp, #1
 800789a:	4637      	mov	r7, r6
 800789c:	463d      	mov	r5, r7
 800789e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80078a2:	b10b      	cbz	r3, 80078a8 <_svfiprintf_r+0x58>
 80078a4:	2b25      	cmp	r3, #37	; 0x25
 80078a6:	d13e      	bne.n	8007926 <_svfiprintf_r+0xd6>
 80078a8:	ebb7 0a06 	subs.w	sl, r7, r6
 80078ac:	d00b      	beq.n	80078c6 <_svfiprintf_r+0x76>
 80078ae:	4653      	mov	r3, sl
 80078b0:	4632      	mov	r2, r6
 80078b2:	4621      	mov	r1, r4
 80078b4:	4640      	mov	r0, r8
 80078b6:	f7ff ff71 	bl	800779c <__ssputs_r>
 80078ba:	3001      	adds	r0, #1
 80078bc:	f000 80a4 	beq.w	8007a08 <_svfiprintf_r+0x1b8>
 80078c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c2:	4453      	add	r3, sl
 80078c4:	9309      	str	r3, [sp, #36]	; 0x24
 80078c6:	783b      	ldrb	r3, [r7, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f000 809d 	beq.w	8007a08 <_svfiprintf_r+0x1b8>
 80078ce:	2300      	movs	r3, #0
 80078d0:	f04f 32ff 	mov.w	r2, #4294967295
 80078d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078d8:	9304      	str	r3, [sp, #16]
 80078da:	9307      	str	r3, [sp, #28]
 80078dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078e0:	931a      	str	r3, [sp, #104]	; 0x68
 80078e2:	462f      	mov	r7, r5
 80078e4:	2205      	movs	r2, #5
 80078e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80078ea:	4850      	ldr	r0, [pc, #320]	; (8007a2c <_svfiprintf_r+0x1dc>)
 80078ec:	f7f8 fcb0 	bl	8000250 <memchr>
 80078f0:	9b04      	ldr	r3, [sp, #16]
 80078f2:	b9d0      	cbnz	r0, 800792a <_svfiprintf_r+0xda>
 80078f4:	06d9      	lsls	r1, r3, #27
 80078f6:	bf44      	itt	mi
 80078f8:	2220      	movmi	r2, #32
 80078fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80078fe:	071a      	lsls	r2, r3, #28
 8007900:	bf44      	itt	mi
 8007902:	222b      	movmi	r2, #43	; 0x2b
 8007904:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007908:	782a      	ldrb	r2, [r5, #0]
 800790a:	2a2a      	cmp	r2, #42	; 0x2a
 800790c:	d015      	beq.n	800793a <_svfiprintf_r+0xea>
 800790e:	9a07      	ldr	r2, [sp, #28]
 8007910:	462f      	mov	r7, r5
 8007912:	2000      	movs	r0, #0
 8007914:	250a      	movs	r5, #10
 8007916:	4639      	mov	r1, r7
 8007918:	f811 3b01 	ldrb.w	r3, [r1], #1
 800791c:	3b30      	subs	r3, #48	; 0x30
 800791e:	2b09      	cmp	r3, #9
 8007920:	d94d      	bls.n	80079be <_svfiprintf_r+0x16e>
 8007922:	b1b8      	cbz	r0, 8007954 <_svfiprintf_r+0x104>
 8007924:	e00f      	b.n	8007946 <_svfiprintf_r+0xf6>
 8007926:	462f      	mov	r7, r5
 8007928:	e7b8      	b.n	800789c <_svfiprintf_r+0x4c>
 800792a:	4a40      	ldr	r2, [pc, #256]	; (8007a2c <_svfiprintf_r+0x1dc>)
 800792c:	1a80      	subs	r0, r0, r2
 800792e:	fa0b f000 	lsl.w	r0, fp, r0
 8007932:	4318      	orrs	r0, r3
 8007934:	9004      	str	r0, [sp, #16]
 8007936:	463d      	mov	r5, r7
 8007938:	e7d3      	b.n	80078e2 <_svfiprintf_r+0x92>
 800793a:	9a03      	ldr	r2, [sp, #12]
 800793c:	1d11      	adds	r1, r2, #4
 800793e:	6812      	ldr	r2, [r2, #0]
 8007940:	9103      	str	r1, [sp, #12]
 8007942:	2a00      	cmp	r2, #0
 8007944:	db01      	blt.n	800794a <_svfiprintf_r+0xfa>
 8007946:	9207      	str	r2, [sp, #28]
 8007948:	e004      	b.n	8007954 <_svfiprintf_r+0x104>
 800794a:	4252      	negs	r2, r2
 800794c:	f043 0302 	orr.w	r3, r3, #2
 8007950:	9207      	str	r2, [sp, #28]
 8007952:	9304      	str	r3, [sp, #16]
 8007954:	783b      	ldrb	r3, [r7, #0]
 8007956:	2b2e      	cmp	r3, #46	; 0x2e
 8007958:	d10c      	bne.n	8007974 <_svfiprintf_r+0x124>
 800795a:	787b      	ldrb	r3, [r7, #1]
 800795c:	2b2a      	cmp	r3, #42	; 0x2a
 800795e:	d133      	bne.n	80079c8 <_svfiprintf_r+0x178>
 8007960:	9b03      	ldr	r3, [sp, #12]
 8007962:	1d1a      	adds	r2, r3, #4
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	9203      	str	r2, [sp, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	bfb8      	it	lt
 800796c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007970:	3702      	adds	r7, #2
 8007972:	9305      	str	r3, [sp, #20]
 8007974:	4d2e      	ldr	r5, [pc, #184]	; (8007a30 <_svfiprintf_r+0x1e0>)
 8007976:	7839      	ldrb	r1, [r7, #0]
 8007978:	2203      	movs	r2, #3
 800797a:	4628      	mov	r0, r5
 800797c:	f7f8 fc68 	bl	8000250 <memchr>
 8007980:	b138      	cbz	r0, 8007992 <_svfiprintf_r+0x142>
 8007982:	2340      	movs	r3, #64	; 0x40
 8007984:	1b40      	subs	r0, r0, r5
 8007986:	fa03 f000 	lsl.w	r0, r3, r0
 800798a:	9b04      	ldr	r3, [sp, #16]
 800798c:	4303      	orrs	r3, r0
 800798e:	3701      	adds	r7, #1
 8007990:	9304      	str	r3, [sp, #16]
 8007992:	7839      	ldrb	r1, [r7, #0]
 8007994:	4827      	ldr	r0, [pc, #156]	; (8007a34 <_svfiprintf_r+0x1e4>)
 8007996:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800799a:	2206      	movs	r2, #6
 800799c:	1c7e      	adds	r6, r7, #1
 800799e:	f7f8 fc57 	bl	8000250 <memchr>
 80079a2:	2800      	cmp	r0, #0
 80079a4:	d038      	beq.n	8007a18 <_svfiprintf_r+0x1c8>
 80079a6:	4b24      	ldr	r3, [pc, #144]	; (8007a38 <_svfiprintf_r+0x1e8>)
 80079a8:	bb13      	cbnz	r3, 80079f0 <_svfiprintf_r+0x1a0>
 80079aa:	9b03      	ldr	r3, [sp, #12]
 80079ac:	3307      	adds	r3, #7
 80079ae:	f023 0307 	bic.w	r3, r3, #7
 80079b2:	3308      	adds	r3, #8
 80079b4:	9303      	str	r3, [sp, #12]
 80079b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b8:	444b      	add	r3, r9
 80079ba:	9309      	str	r3, [sp, #36]	; 0x24
 80079bc:	e76d      	b.n	800789a <_svfiprintf_r+0x4a>
 80079be:	fb05 3202 	mla	r2, r5, r2, r3
 80079c2:	2001      	movs	r0, #1
 80079c4:	460f      	mov	r7, r1
 80079c6:	e7a6      	b.n	8007916 <_svfiprintf_r+0xc6>
 80079c8:	2300      	movs	r3, #0
 80079ca:	3701      	adds	r7, #1
 80079cc:	9305      	str	r3, [sp, #20]
 80079ce:	4619      	mov	r1, r3
 80079d0:	250a      	movs	r5, #10
 80079d2:	4638      	mov	r0, r7
 80079d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079d8:	3a30      	subs	r2, #48	; 0x30
 80079da:	2a09      	cmp	r2, #9
 80079dc:	d903      	bls.n	80079e6 <_svfiprintf_r+0x196>
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d0c8      	beq.n	8007974 <_svfiprintf_r+0x124>
 80079e2:	9105      	str	r1, [sp, #20]
 80079e4:	e7c6      	b.n	8007974 <_svfiprintf_r+0x124>
 80079e6:	fb05 2101 	mla	r1, r5, r1, r2
 80079ea:	2301      	movs	r3, #1
 80079ec:	4607      	mov	r7, r0
 80079ee:	e7f0      	b.n	80079d2 <_svfiprintf_r+0x182>
 80079f0:	ab03      	add	r3, sp, #12
 80079f2:	9300      	str	r3, [sp, #0]
 80079f4:	4622      	mov	r2, r4
 80079f6:	4b11      	ldr	r3, [pc, #68]	; (8007a3c <_svfiprintf_r+0x1ec>)
 80079f8:	a904      	add	r1, sp, #16
 80079fa:	4640      	mov	r0, r8
 80079fc:	f3af 8000 	nop.w
 8007a00:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007a04:	4681      	mov	r9, r0
 8007a06:	d1d6      	bne.n	80079b6 <_svfiprintf_r+0x166>
 8007a08:	89a3      	ldrh	r3, [r4, #12]
 8007a0a:	065b      	lsls	r3, r3, #25
 8007a0c:	f53f af35 	bmi.w	800787a <_svfiprintf_r+0x2a>
 8007a10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a12:	b01d      	add	sp, #116	; 0x74
 8007a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a18:	ab03      	add	r3, sp, #12
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	4622      	mov	r2, r4
 8007a1e:	4b07      	ldr	r3, [pc, #28]	; (8007a3c <_svfiprintf_r+0x1ec>)
 8007a20:	a904      	add	r1, sp, #16
 8007a22:	4640      	mov	r0, r8
 8007a24:	f000 f882 	bl	8007b2c <_printf_i>
 8007a28:	e7ea      	b.n	8007a00 <_svfiprintf_r+0x1b0>
 8007a2a:	bf00      	nop
 8007a2c:	08008194 	.word	0x08008194
 8007a30:	0800819a 	.word	0x0800819a
 8007a34:	0800819e 	.word	0x0800819e
 8007a38:	00000000 	.word	0x00000000
 8007a3c:	0800779d 	.word	0x0800779d

08007a40 <_printf_common>:
 8007a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a44:	4691      	mov	r9, r2
 8007a46:	461f      	mov	r7, r3
 8007a48:	688a      	ldr	r2, [r1, #8]
 8007a4a:	690b      	ldr	r3, [r1, #16]
 8007a4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a50:	4293      	cmp	r3, r2
 8007a52:	bfb8      	it	lt
 8007a54:	4613      	movlt	r3, r2
 8007a56:	f8c9 3000 	str.w	r3, [r9]
 8007a5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a5e:	4606      	mov	r6, r0
 8007a60:	460c      	mov	r4, r1
 8007a62:	b112      	cbz	r2, 8007a6a <_printf_common+0x2a>
 8007a64:	3301      	adds	r3, #1
 8007a66:	f8c9 3000 	str.w	r3, [r9]
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	0699      	lsls	r1, r3, #26
 8007a6e:	bf42      	ittt	mi
 8007a70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007a74:	3302      	addmi	r3, #2
 8007a76:	f8c9 3000 	strmi.w	r3, [r9]
 8007a7a:	6825      	ldr	r5, [r4, #0]
 8007a7c:	f015 0506 	ands.w	r5, r5, #6
 8007a80:	d107      	bne.n	8007a92 <_printf_common+0x52>
 8007a82:	f104 0a19 	add.w	sl, r4, #25
 8007a86:	68e3      	ldr	r3, [r4, #12]
 8007a88:	f8d9 2000 	ldr.w	r2, [r9]
 8007a8c:	1a9b      	subs	r3, r3, r2
 8007a8e:	42ab      	cmp	r3, r5
 8007a90:	dc28      	bgt.n	8007ae4 <_printf_common+0xa4>
 8007a92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007a96:	6822      	ldr	r2, [r4, #0]
 8007a98:	3300      	adds	r3, #0
 8007a9a:	bf18      	it	ne
 8007a9c:	2301      	movne	r3, #1
 8007a9e:	0692      	lsls	r2, r2, #26
 8007aa0:	d42d      	bmi.n	8007afe <_printf_common+0xbe>
 8007aa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007aa6:	4639      	mov	r1, r7
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	47c0      	blx	r8
 8007aac:	3001      	adds	r0, #1
 8007aae:	d020      	beq.n	8007af2 <_printf_common+0xb2>
 8007ab0:	6823      	ldr	r3, [r4, #0]
 8007ab2:	68e5      	ldr	r5, [r4, #12]
 8007ab4:	f8d9 2000 	ldr.w	r2, [r9]
 8007ab8:	f003 0306 	and.w	r3, r3, #6
 8007abc:	2b04      	cmp	r3, #4
 8007abe:	bf08      	it	eq
 8007ac0:	1aad      	subeq	r5, r5, r2
 8007ac2:	68a3      	ldr	r3, [r4, #8]
 8007ac4:	6922      	ldr	r2, [r4, #16]
 8007ac6:	bf0c      	ite	eq
 8007ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007acc:	2500      	movne	r5, #0
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	bfc4      	itt	gt
 8007ad2:	1a9b      	subgt	r3, r3, r2
 8007ad4:	18ed      	addgt	r5, r5, r3
 8007ad6:	f04f 0900 	mov.w	r9, #0
 8007ada:	341a      	adds	r4, #26
 8007adc:	454d      	cmp	r5, r9
 8007ade:	d11a      	bne.n	8007b16 <_printf_common+0xd6>
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	e008      	b.n	8007af6 <_printf_common+0xb6>
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	4652      	mov	r2, sl
 8007ae8:	4639      	mov	r1, r7
 8007aea:	4630      	mov	r0, r6
 8007aec:	47c0      	blx	r8
 8007aee:	3001      	adds	r0, #1
 8007af0:	d103      	bne.n	8007afa <_printf_common+0xba>
 8007af2:	f04f 30ff 	mov.w	r0, #4294967295
 8007af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007afa:	3501      	adds	r5, #1
 8007afc:	e7c3      	b.n	8007a86 <_printf_common+0x46>
 8007afe:	18e1      	adds	r1, r4, r3
 8007b00:	1c5a      	adds	r2, r3, #1
 8007b02:	2030      	movs	r0, #48	; 0x30
 8007b04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b08:	4422      	add	r2, r4
 8007b0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b12:	3302      	adds	r3, #2
 8007b14:	e7c5      	b.n	8007aa2 <_printf_common+0x62>
 8007b16:	2301      	movs	r3, #1
 8007b18:	4622      	mov	r2, r4
 8007b1a:	4639      	mov	r1, r7
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	47c0      	blx	r8
 8007b20:	3001      	adds	r0, #1
 8007b22:	d0e6      	beq.n	8007af2 <_printf_common+0xb2>
 8007b24:	f109 0901 	add.w	r9, r9, #1
 8007b28:	e7d8      	b.n	8007adc <_printf_common+0x9c>
	...

08007b2c <_printf_i>:
 8007b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b30:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007b34:	460c      	mov	r4, r1
 8007b36:	7e09      	ldrb	r1, [r1, #24]
 8007b38:	b085      	sub	sp, #20
 8007b3a:	296e      	cmp	r1, #110	; 0x6e
 8007b3c:	4617      	mov	r7, r2
 8007b3e:	4606      	mov	r6, r0
 8007b40:	4698      	mov	r8, r3
 8007b42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b44:	f000 80b3 	beq.w	8007cae <_printf_i+0x182>
 8007b48:	d822      	bhi.n	8007b90 <_printf_i+0x64>
 8007b4a:	2963      	cmp	r1, #99	; 0x63
 8007b4c:	d036      	beq.n	8007bbc <_printf_i+0x90>
 8007b4e:	d80a      	bhi.n	8007b66 <_printf_i+0x3a>
 8007b50:	2900      	cmp	r1, #0
 8007b52:	f000 80b9 	beq.w	8007cc8 <_printf_i+0x19c>
 8007b56:	2958      	cmp	r1, #88	; 0x58
 8007b58:	f000 8083 	beq.w	8007c62 <_printf_i+0x136>
 8007b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007b64:	e032      	b.n	8007bcc <_printf_i+0xa0>
 8007b66:	2964      	cmp	r1, #100	; 0x64
 8007b68:	d001      	beq.n	8007b6e <_printf_i+0x42>
 8007b6a:	2969      	cmp	r1, #105	; 0x69
 8007b6c:	d1f6      	bne.n	8007b5c <_printf_i+0x30>
 8007b6e:	6820      	ldr	r0, [r4, #0]
 8007b70:	6813      	ldr	r3, [r2, #0]
 8007b72:	0605      	lsls	r5, r0, #24
 8007b74:	f103 0104 	add.w	r1, r3, #4
 8007b78:	d52a      	bpl.n	8007bd0 <_printf_i+0xa4>
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6011      	str	r1, [r2, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	da03      	bge.n	8007b8a <_printf_i+0x5e>
 8007b82:	222d      	movs	r2, #45	; 0x2d
 8007b84:	425b      	negs	r3, r3
 8007b86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007b8a:	486f      	ldr	r0, [pc, #444]	; (8007d48 <_printf_i+0x21c>)
 8007b8c:	220a      	movs	r2, #10
 8007b8e:	e039      	b.n	8007c04 <_printf_i+0xd8>
 8007b90:	2973      	cmp	r1, #115	; 0x73
 8007b92:	f000 809d 	beq.w	8007cd0 <_printf_i+0x1a4>
 8007b96:	d808      	bhi.n	8007baa <_printf_i+0x7e>
 8007b98:	296f      	cmp	r1, #111	; 0x6f
 8007b9a:	d020      	beq.n	8007bde <_printf_i+0xb2>
 8007b9c:	2970      	cmp	r1, #112	; 0x70
 8007b9e:	d1dd      	bne.n	8007b5c <_printf_i+0x30>
 8007ba0:	6823      	ldr	r3, [r4, #0]
 8007ba2:	f043 0320 	orr.w	r3, r3, #32
 8007ba6:	6023      	str	r3, [r4, #0]
 8007ba8:	e003      	b.n	8007bb2 <_printf_i+0x86>
 8007baa:	2975      	cmp	r1, #117	; 0x75
 8007bac:	d017      	beq.n	8007bde <_printf_i+0xb2>
 8007bae:	2978      	cmp	r1, #120	; 0x78
 8007bb0:	d1d4      	bne.n	8007b5c <_printf_i+0x30>
 8007bb2:	2378      	movs	r3, #120	; 0x78
 8007bb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007bb8:	4864      	ldr	r0, [pc, #400]	; (8007d4c <_printf_i+0x220>)
 8007bba:	e055      	b.n	8007c68 <_printf_i+0x13c>
 8007bbc:	6813      	ldr	r3, [r2, #0]
 8007bbe:	1d19      	adds	r1, r3, #4
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6011      	str	r1, [r2, #0]
 8007bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e08c      	b.n	8007cea <_printf_i+0x1be>
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	6011      	str	r1, [r2, #0]
 8007bd4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007bd8:	bf18      	it	ne
 8007bda:	b21b      	sxthne	r3, r3
 8007bdc:	e7cf      	b.n	8007b7e <_printf_i+0x52>
 8007bde:	6813      	ldr	r3, [r2, #0]
 8007be0:	6825      	ldr	r5, [r4, #0]
 8007be2:	1d18      	adds	r0, r3, #4
 8007be4:	6010      	str	r0, [r2, #0]
 8007be6:	0628      	lsls	r0, r5, #24
 8007be8:	d501      	bpl.n	8007bee <_printf_i+0xc2>
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	e002      	b.n	8007bf4 <_printf_i+0xc8>
 8007bee:	0668      	lsls	r0, r5, #25
 8007bf0:	d5fb      	bpl.n	8007bea <_printf_i+0xbe>
 8007bf2:	881b      	ldrh	r3, [r3, #0]
 8007bf4:	4854      	ldr	r0, [pc, #336]	; (8007d48 <_printf_i+0x21c>)
 8007bf6:	296f      	cmp	r1, #111	; 0x6f
 8007bf8:	bf14      	ite	ne
 8007bfa:	220a      	movne	r2, #10
 8007bfc:	2208      	moveq	r2, #8
 8007bfe:	2100      	movs	r1, #0
 8007c00:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c04:	6865      	ldr	r5, [r4, #4]
 8007c06:	60a5      	str	r5, [r4, #8]
 8007c08:	2d00      	cmp	r5, #0
 8007c0a:	f2c0 8095 	blt.w	8007d38 <_printf_i+0x20c>
 8007c0e:	6821      	ldr	r1, [r4, #0]
 8007c10:	f021 0104 	bic.w	r1, r1, #4
 8007c14:	6021      	str	r1, [r4, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d13d      	bne.n	8007c96 <_printf_i+0x16a>
 8007c1a:	2d00      	cmp	r5, #0
 8007c1c:	f040 808e 	bne.w	8007d3c <_printf_i+0x210>
 8007c20:	4665      	mov	r5, ip
 8007c22:	2a08      	cmp	r2, #8
 8007c24:	d10b      	bne.n	8007c3e <_printf_i+0x112>
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	07db      	lsls	r3, r3, #31
 8007c2a:	d508      	bpl.n	8007c3e <_printf_i+0x112>
 8007c2c:	6923      	ldr	r3, [r4, #16]
 8007c2e:	6862      	ldr	r2, [r4, #4]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	bfde      	ittt	le
 8007c34:	2330      	movle	r3, #48	; 0x30
 8007c36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c3e:	ebac 0305 	sub.w	r3, ip, r5
 8007c42:	6123      	str	r3, [r4, #16]
 8007c44:	f8cd 8000 	str.w	r8, [sp]
 8007c48:	463b      	mov	r3, r7
 8007c4a:	aa03      	add	r2, sp, #12
 8007c4c:	4621      	mov	r1, r4
 8007c4e:	4630      	mov	r0, r6
 8007c50:	f7ff fef6 	bl	8007a40 <_printf_common>
 8007c54:	3001      	adds	r0, #1
 8007c56:	d14d      	bne.n	8007cf4 <_printf_i+0x1c8>
 8007c58:	f04f 30ff 	mov.w	r0, #4294967295
 8007c5c:	b005      	add	sp, #20
 8007c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c62:	4839      	ldr	r0, [pc, #228]	; (8007d48 <_printf_i+0x21c>)
 8007c64:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007c68:	6813      	ldr	r3, [r2, #0]
 8007c6a:	6821      	ldr	r1, [r4, #0]
 8007c6c:	1d1d      	adds	r5, r3, #4
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	6015      	str	r5, [r2, #0]
 8007c72:	060a      	lsls	r2, r1, #24
 8007c74:	d50b      	bpl.n	8007c8e <_printf_i+0x162>
 8007c76:	07ca      	lsls	r2, r1, #31
 8007c78:	bf44      	itt	mi
 8007c7a:	f041 0120 	orrmi.w	r1, r1, #32
 8007c7e:	6021      	strmi	r1, [r4, #0]
 8007c80:	b91b      	cbnz	r3, 8007c8a <_printf_i+0x15e>
 8007c82:	6822      	ldr	r2, [r4, #0]
 8007c84:	f022 0220 	bic.w	r2, r2, #32
 8007c88:	6022      	str	r2, [r4, #0]
 8007c8a:	2210      	movs	r2, #16
 8007c8c:	e7b7      	b.n	8007bfe <_printf_i+0xd2>
 8007c8e:	064d      	lsls	r5, r1, #25
 8007c90:	bf48      	it	mi
 8007c92:	b29b      	uxthmi	r3, r3
 8007c94:	e7ef      	b.n	8007c76 <_printf_i+0x14a>
 8007c96:	4665      	mov	r5, ip
 8007c98:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c9c:	fb02 3311 	mls	r3, r2, r1, r3
 8007ca0:	5cc3      	ldrb	r3, [r0, r3]
 8007ca2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	2900      	cmp	r1, #0
 8007caa:	d1f5      	bne.n	8007c98 <_printf_i+0x16c>
 8007cac:	e7b9      	b.n	8007c22 <_printf_i+0xf6>
 8007cae:	6813      	ldr	r3, [r2, #0]
 8007cb0:	6825      	ldr	r5, [r4, #0]
 8007cb2:	6961      	ldr	r1, [r4, #20]
 8007cb4:	1d18      	adds	r0, r3, #4
 8007cb6:	6010      	str	r0, [r2, #0]
 8007cb8:	0628      	lsls	r0, r5, #24
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	d501      	bpl.n	8007cc2 <_printf_i+0x196>
 8007cbe:	6019      	str	r1, [r3, #0]
 8007cc0:	e002      	b.n	8007cc8 <_printf_i+0x19c>
 8007cc2:	066a      	lsls	r2, r5, #25
 8007cc4:	d5fb      	bpl.n	8007cbe <_printf_i+0x192>
 8007cc6:	8019      	strh	r1, [r3, #0]
 8007cc8:	2300      	movs	r3, #0
 8007cca:	6123      	str	r3, [r4, #16]
 8007ccc:	4665      	mov	r5, ip
 8007cce:	e7b9      	b.n	8007c44 <_printf_i+0x118>
 8007cd0:	6813      	ldr	r3, [r2, #0]
 8007cd2:	1d19      	adds	r1, r3, #4
 8007cd4:	6011      	str	r1, [r2, #0]
 8007cd6:	681d      	ldr	r5, [r3, #0]
 8007cd8:	6862      	ldr	r2, [r4, #4]
 8007cda:	2100      	movs	r1, #0
 8007cdc:	4628      	mov	r0, r5
 8007cde:	f7f8 fab7 	bl	8000250 <memchr>
 8007ce2:	b108      	cbz	r0, 8007ce8 <_printf_i+0x1bc>
 8007ce4:	1b40      	subs	r0, r0, r5
 8007ce6:	6060      	str	r0, [r4, #4]
 8007ce8:	6863      	ldr	r3, [r4, #4]
 8007cea:	6123      	str	r3, [r4, #16]
 8007cec:	2300      	movs	r3, #0
 8007cee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cf2:	e7a7      	b.n	8007c44 <_printf_i+0x118>
 8007cf4:	6923      	ldr	r3, [r4, #16]
 8007cf6:	462a      	mov	r2, r5
 8007cf8:	4639      	mov	r1, r7
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	47c0      	blx	r8
 8007cfe:	3001      	adds	r0, #1
 8007d00:	d0aa      	beq.n	8007c58 <_printf_i+0x12c>
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	079b      	lsls	r3, r3, #30
 8007d06:	d413      	bmi.n	8007d30 <_printf_i+0x204>
 8007d08:	68e0      	ldr	r0, [r4, #12]
 8007d0a:	9b03      	ldr	r3, [sp, #12]
 8007d0c:	4298      	cmp	r0, r3
 8007d0e:	bfb8      	it	lt
 8007d10:	4618      	movlt	r0, r3
 8007d12:	e7a3      	b.n	8007c5c <_printf_i+0x130>
 8007d14:	2301      	movs	r3, #1
 8007d16:	464a      	mov	r2, r9
 8007d18:	4639      	mov	r1, r7
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	47c0      	blx	r8
 8007d1e:	3001      	adds	r0, #1
 8007d20:	d09a      	beq.n	8007c58 <_printf_i+0x12c>
 8007d22:	3501      	adds	r5, #1
 8007d24:	68e3      	ldr	r3, [r4, #12]
 8007d26:	9a03      	ldr	r2, [sp, #12]
 8007d28:	1a9b      	subs	r3, r3, r2
 8007d2a:	42ab      	cmp	r3, r5
 8007d2c:	dcf2      	bgt.n	8007d14 <_printf_i+0x1e8>
 8007d2e:	e7eb      	b.n	8007d08 <_printf_i+0x1dc>
 8007d30:	2500      	movs	r5, #0
 8007d32:	f104 0919 	add.w	r9, r4, #25
 8007d36:	e7f5      	b.n	8007d24 <_printf_i+0x1f8>
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1ac      	bne.n	8007c96 <_printf_i+0x16a>
 8007d3c:	7803      	ldrb	r3, [r0, #0]
 8007d3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d46:	e76c      	b.n	8007c22 <_printf_i+0xf6>
 8007d48:	080081a5 	.word	0x080081a5
 8007d4c:	080081b6 	.word	0x080081b6

08007d50 <memcpy>:
 8007d50:	b510      	push	{r4, lr}
 8007d52:	1e43      	subs	r3, r0, #1
 8007d54:	440a      	add	r2, r1
 8007d56:	4291      	cmp	r1, r2
 8007d58:	d100      	bne.n	8007d5c <memcpy+0xc>
 8007d5a:	bd10      	pop	{r4, pc}
 8007d5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d64:	e7f7      	b.n	8007d56 <memcpy+0x6>

08007d66 <memmove>:
 8007d66:	4288      	cmp	r0, r1
 8007d68:	b510      	push	{r4, lr}
 8007d6a:	eb01 0302 	add.w	r3, r1, r2
 8007d6e:	d807      	bhi.n	8007d80 <memmove+0x1a>
 8007d70:	1e42      	subs	r2, r0, #1
 8007d72:	4299      	cmp	r1, r3
 8007d74:	d00a      	beq.n	8007d8c <memmove+0x26>
 8007d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d7a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007d7e:	e7f8      	b.n	8007d72 <memmove+0xc>
 8007d80:	4283      	cmp	r3, r0
 8007d82:	d9f5      	bls.n	8007d70 <memmove+0xa>
 8007d84:	1881      	adds	r1, r0, r2
 8007d86:	1ad2      	subs	r2, r2, r3
 8007d88:	42d3      	cmn	r3, r2
 8007d8a:	d100      	bne.n	8007d8e <memmove+0x28>
 8007d8c:	bd10      	pop	{r4, pc}
 8007d8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d92:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007d96:	e7f7      	b.n	8007d88 <memmove+0x22>

08007d98 <_free_r>:
 8007d98:	b538      	push	{r3, r4, r5, lr}
 8007d9a:	4605      	mov	r5, r0
 8007d9c:	2900      	cmp	r1, #0
 8007d9e:	d045      	beq.n	8007e2c <_free_r+0x94>
 8007da0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007da4:	1f0c      	subs	r4, r1, #4
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	bfb8      	it	lt
 8007daa:	18e4      	addlt	r4, r4, r3
 8007dac:	f000 f8d2 	bl	8007f54 <__malloc_lock>
 8007db0:	4a1f      	ldr	r2, [pc, #124]	; (8007e30 <_free_r+0x98>)
 8007db2:	6813      	ldr	r3, [r2, #0]
 8007db4:	4610      	mov	r0, r2
 8007db6:	b933      	cbnz	r3, 8007dc6 <_free_r+0x2e>
 8007db8:	6063      	str	r3, [r4, #4]
 8007dba:	6014      	str	r4, [r2, #0]
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dc2:	f000 b8c8 	b.w	8007f56 <__malloc_unlock>
 8007dc6:	42a3      	cmp	r3, r4
 8007dc8:	d90c      	bls.n	8007de4 <_free_r+0x4c>
 8007dca:	6821      	ldr	r1, [r4, #0]
 8007dcc:	1862      	adds	r2, r4, r1
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	bf04      	itt	eq
 8007dd2:	681a      	ldreq	r2, [r3, #0]
 8007dd4:	685b      	ldreq	r3, [r3, #4]
 8007dd6:	6063      	str	r3, [r4, #4]
 8007dd8:	bf04      	itt	eq
 8007dda:	1852      	addeq	r2, r2, r1
 8007ddc:	6022      	streq	r2, [r4, #0]
 8007dde:	6004      	str	r4, [r0, #0]
 8007de0:	e7ec      	b.n	8007dbc <_free_r+0x24>
 8007de2:	4613      	mov	r3, r2
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	b10a      	cbz	r2, 8007dec <_free_r+0x54>
 8007de8:	42a2      	cmp	r2, r4
 8007dea:	d9fa      	bls.n	8007de2 <_free_r+0x4a>
 8007dec:	6819      	ldr	r1, [r3, #0]
 8007dee:	1858      	adds	r0, r3, r1
 8007df0:	42a0      	cmp	r0, r4
 8007df2:	d10b      	bne.n	8007e0c <_free_r+0x74>
 8007df4:	6820      	ldr	r0, [r4, #0]
 8007df6:	4401      	add	r1, r0
 8007df8:	1858      	adds	r0, r3, r1
 8007dfa:	4282      	cmp	r2, r0
 8007dfc:	6019      	str	r1, [r3, #0]
 8007dfe:	d1dd      	bne.n	8007dbc <_free_r+0x24>
 8007e00:	6810      	ldr	r0, [r2, #0]
 8007e02:	6852      	ldr	r2, [r2, #4]
 8007e04:	605a      	str	r2, [r3, #4]
 8007e06:	4401      	add	r1, r0
 8007e08:	6019      	str	r1, [r3, #0]
 8007e0a:	e7d7      	b.n	8007dbc <_free_r+0x24>
 8007e0c:	d902      	bls.n	8007e14 <_free_r+0x7c>
 8007e0e:	230c      	movs	r3, #12
 8007e10:	602b      	str	r3, [r5, #0]
 8007e12:	e7d3      	b.n	8007dbc <_free_r+0x24>
 8007e14:	6820      	ldr	r0, [r4, #0]
 8007e16:	1821      	adds	r1, r4, r0
 8007e18:	428a      	cmp	r2, r1
 8007e1a:	bf04      	itt	eq
 8007e1c:	6811      	ldreq	r1, [r2, #0]
 8007e1e:	6852      	ldreq	r2, [r2, #4]
 8007e20:	6062      	str	r2, [r4, #4]
 8007e22:	bf04      	itt	eq
 8007e24:	1809      	addeq	r1, r1, r0
 8007e26:	6021      	streq	r1, [r4, #0]
 8007e28:	605c      	str	r4, [r3, #4]
 8007e2a:	e7c7      	b.n	8007dbc <_free_r+0x24>
 8007e2c:	bd38      	pop	{r3, r4, r5, pc}
 8007e2e:	bf00      	nop
 8007e30:	20000094 	.word	0x20000094

08007e34 <_malloc_r>:
 8007e34:	b570      	push	{r4, r5, r6, lr}
 8007e36:	1ccd      	adds	r5, r1, #3
 8007e38:	f025 0503 	bic.w	r5, r5, #3
 8007e3c:	3508      	adds	r5, #8
 8007e3e:	2d0c      	cmp	r5, #12
 8007e40:	bf38      	it	cc
 8007e42:	250c      	movcc	r5, #12
 8007e44:	2d00      	cmp	r5, #0
 8007e46:	4606      	mov	r6, r0
 8007e48:	db01      	blt.n	8007e4e <_malloc_r+0x1a>
 8007e4a:	42a9      	cmp	r1, r5
 8007e4c:	d903      	bls.n	8007e56 <_malloc_r+0x22>
 8007e4e:	230c      	movs	r3, #12
 8007e50:	6033      	str	r3, [r6, #0]
 8007e52:	2000      	movs	r0, #0
 8007e54:	bd70      	pop	{r4, r5, r6, pc}
 8007e56:	f000 f87d 	bl	8007f54 <__malloc_lock>
 8007e5a:	4a21      	ldr	r2, [pc, #132]	; (8007ee0 <_malloc_r+0xac>)
 8007e5c:	6814      	ldr	r4, [r2, #0]
 8007e5e:	4621      	mov	r1, r4
 8007e60:	b991      	cbnz	r1, 8007e88 <_malloc_r+0x54>
 8007e62:	4c20      	ldr	r4, [pc, #128]	; (8007ee4 <_malloc_r+0xb0>)
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	b91b      	cbnz	r3, 8007e70 <_malloc_r+0x3c>
 8007e68:	4630      	mov	r0, r6
 8007e6a:	f000 f863 	bl	8007f34 <_sbrk_r>
 8007e6e:	6020      	str	r0, [r4, #0]
 8007e70:	4629      	mov	r1, r5
 8007e72:	4630      	mov	r0, r6
 8007e74:	f000 f85e 	bl	8007f34 <_sbrk_r>
 8007e78:	1c43      	adds	r3, r0, #1
 8007e7a:	d124      	bne.n	8007ec6 <_malloc_r+0x92>
 8007e7c:	230c      	movs	r3, #12
 8007e7e:	6033      	str	r3, [r6, #0]
 8007e80:	4630      	mov	r0, r6
 8007e82:	f000 f868 	bl	8007f56 <__malloc_unlock>
 8007e86:	e7e4      	b.n	8007e52 <_malloc_r+0x1e>
 8007e88:	680b      	ldr	r3, [r1, #0]
 8007e8a:	1b5b      	subs	r3, r3, r5
 8007e8c:	d418      	bmi.n	8007ec0 <_malloc_r+0x8c>
 8007e8e:	2b0b      	cmp	r3, #11
 8007e90:	d90f      	bls.n	8007eb2 <_malloc_r+0x7e>
 8007e92:	600b      	str	r3, [r1, #0]
 8007e94:	50cd      	str	r5, [r1, r3]
 8007e96:	18cc      	adds	r4, r1, r3
 8007e98:	4630      	mov	r0, r6
 8007e9a:	f000 f85c 	bl	8007f56 <__malloc_unlock>
 8007e9e:	f104 000b 	add.w	r0, r4, #11
 8007ea2:	1d23      	adds	r3, r4, #4
 8007ea4:	f020 0007 	bic.w	r0, r0, #7
 8007ea8:	1ac3      	subs	r3, r0, r3
 8007eaa:	d0d3      	beq.n	8007e54 <_malloc_r+0x20>
 8007eac:	425a      	negs	r2, r3
 8007eae:	50e2      	str	r2, [r4, r3]
 8007eb0:	e7d0      	b.n	8007e54 <_malloc_r+0x20>
 8007eb2:	428c      	cmp	r4, r1
 8007eb4:	684b      	ldr	r3, [r1, #4]
 8007eb6:	bf16      	itet	ne
 8007eb8:	6063      	strne	r3, [r4, #4]
 8007eba:	6013      	streq	r3, [r2, #0]
 8007ebc:	460c      	movne	r4, r1
 8007ebe:	e7eb      	b.n	8007e98 <_malloc_r+0x64>
 8007ec0:	460c      	mov	r4, r1
 8007ec2:	6849      	ldr	r1, [r1, #4]
 8007ec4:	e7cc      	b.n	8007e60 <_malloc_r+0x2c>
 8007ec6:	1cc4      	adds	r4, r0, #3
 8007ec8:	f024 0403 	bic.w	r4, r4, #3
 8007ecc:	42a0      	cmp	r0, r4
 8007ece:	d005      	beq.n	8007edc <_malloc_r+0xa8>
 8007ed0:	1a21      	subs	r1, r4, r0
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f000 f82e 	bl	8007f34 <_sbrk_r>
 8007ed8:	3001      	adds	r0, #1
 8007eda:	d0cf      	beq.n	8007e7c <_malloc_r+0x48>
 8007edc:	6025      	str	r5, [r4, #0]
 8007ede:	e7db      	b.n	8007e98 <_malloc_r+0x64>
 8007ee0:	20000094 	.word	0x20000094
 8007ee4:	20000098 	.word	0x20000098

08007ee8 <_realloc_r>:
 8007ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eea:	4607      	mov	r7, r0
 8007eec:	4614      	mov	r4, r2
 8007eee:	460e      	mov	r6, r1
 8007ef0:	b921      	cbnz	r1, 8007efc <_realloc_r+0x14>
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ef8:	f7ff bf9c 	b.w	8007e34 <_malloc_r>
 8007efc:	b922      	cbnz	r2, 8007f08 <_realloc_r+0x20>
 8007efe:	f7ff ff4b 	bl	8007d98 <_free_r>
 8007f02:	4625      	mov	r5, r4
 8007f04:	4628      	mov	r0, r5
 8007f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f08:	f000 f826 	bl	8007f58 <_malloc_usable_size_r>
 8007f0c:	42a0      	cmp	r0, r4
 8007f0e:	d20f      	bcs.n	8007f30 <_realloc_r+0x48>
 8007f10:	4621      	mov	r1, r4
 8007f12:	4638      	mov	r0, r7
 8007f14:	f7ff ff8e 	bl	8007e34 <_malloc_r>
 8007f18:	4605      	mov	r5, r0
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d0f2      	beq.n	8007f04 <_realloc_r+0x1c>
 8007f1e:	4631      	mov	r1, r6
 8007f20:	4622      	mov	r2, r4
 8007f22:	f7ff ff15 	bl	8007d50 <memcpy>
 8007f26:	4631      	mov	r1, r6
 8007f28:	4638      	mov	r0, r7
 8007f2a:	f7ff ff35 	bl	8007d98 <_free_r>
 8007f2e:	e7e9      	b.n	8007f04 <_realloc_r+0x1c>
 8007f30:	4635      	mov	r5, r6
 8007f32:	e7e7      	b.n	8007f04 <_realloc_r+0x1c>

08007f34 <_sbrk_r>:
 8007f34:	b538      	push	{r3, r4, r5, lr}
 8007f36:	4c06      	ldr	r4, [pc, #24]	; (8007f50 <_sbrk_r+0x1c>)
 8007f38:	2300      	movs	r3, #0
 8007f3a:	4605      	mov	r5, r0
 8007f3c:	4608      	mov	r0, r1
 8007f3e:	6023      	str	r3, [r4, #0]
 8007f40:	f7fa f9b2 	bl	80022a8 <_sbrk>
 8007f44:	1c43      	adds	r3, r0, #1
 8007f46:	d102      	bne.n	8007f4e <_sbrk_r+0x1a>
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	b103      	cbz	r3, 8007f4e <_sbrk_r+0x1a>
 8007f4c:	602b      	str	r3, [r5, #0]
 8007f4e:	bd38      	pop	{r3, r4, r5, pc}
 8007f50:	2000043c 	.word	0x2000043c

08007f54 <__malloc_lock>:
 8007f54:	4770      	bx	lr

08007f56 <__malloc_unlock>:
 8007f56:	4770      	bx	lr

08007f58 <_malloc_usable_size_r>:
 8007f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f5c:	1f18      	subs	r0, r3, #4
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	bfbc      	itt	lt
 8007f62:	580b      	ldrlt	r3, [r1, r0]
 8007f64:	18c0      	addlt	r0, r0, r3
 8007f66:	4770      	bx	lr

08007f68 <_init>:
 8007f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6a:	bf00      	nop
 8007f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f6e:	bc08      	pop	{r3}
 8007f70:	469e      	mov	lr, r3
 8007f72:	4770      	bx	lr

08007f74 <_fini>:
 8007f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f76:	bf00      	nop
 8007f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f7a:	bc08      	pop	{r3}
 8007f7c:	469e      	mov	lr, r3
 8007f7e:	4770      	bx	lr
