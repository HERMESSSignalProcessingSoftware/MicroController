
CubeRev21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067bc  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  080069b4  080069b4  000169b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c1c  08006c1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c1c  08006c1c  00016c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c24  08006c24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c24  08006c24  00016c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c28  08006c28  00016c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  2000000c  08006c38  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08006c38  00020404  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011654  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000277f  00000000  00000000  0003168e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001068  00000000  00000000  00033e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f00  00000000  00000000  00034e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e9ea  00000000  00000000  00035d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000125f8  00000000  00000000  00064762  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001188df  00000000  00000000  00076d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018f639  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042f8  00000000  00000000  0018f6b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800699c 	.word	0x0800699c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800699c 	.word	0x0800699c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800053c:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <MX_CRC_Init+0x3c>)
 800053e:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <MX_CRC_Init+0x40>)
 8000540:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_CRC_Init+0x3c>)
 8000544:	2200      	movs	r2, #0
 8000546:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000548:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <MX_CRC_Init+0x3c>)
 800054a:	2200      	movs	r2, #0
 800054c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_CRC_Init+0x3c>)
 8000550:	2200      	movs	r2, #0
 8000552:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <MX_CRC_Init+0x3c>)
 8000556:	2200      	movs	r2, #0
 8000558:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <MX_CRC_Init+0x3c>)
 800055c:	2203      	movs	r2, #3
 800055e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <MX_CRC_Init+0x3c>)
 8000562:	f001 fb2f 	bl	8001bc4 <HAL_CRC_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800056c:	f000 fbda 	bl	8000d24 <Error_Handler>
  }

}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000028 	.word	0x20000028
 8000578:	40023000 	.word	0x40023000

0800057c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <HAL_CRC_MspInit+0x38>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d10b      	bne.n	80005a6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <HAL_CRC_MspInit+0x3c>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a09      	ldr	r2, [pc, #36]	; (80005b8 <HAL_CRC_MspInit+0x3c>)
 8000594:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <HAL_CRC_MspInit+0x3c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	40023000 	.word	0x40023000
 80005b8:	40023800 	.word	0x40023800

080005bc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b090      	sub	sp, #64	; 0x40
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005d2:	4bb2      	ldr	r3, [pc, #712]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4ab1      	ldr	r2, [pc, #708]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005d8:	f043 0310 	orr.w	r3, r3, #16
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4baf      	ldr	r3, [pc, #700]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0310 	and.w	r3, r3, #16
 80005e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80005e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80005ea:	4bac      	ldr	r3, [pc, #688]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4aab      	ldr	r2, [pc, #684]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4ba9      	ldr	r3, [pc, #676]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4ba6      	ldr	r3, [pc, #664]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4aa5      	ldr	r2, [pc, #660]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4ba3      	ldr	r3, [pc, #652]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	623b      	str	r3, [r7, #32]
 8000618:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800061a:	4ba0      	ldr	r3, [pc, #640]	; (800089c <MX_GPIO_Init+0x2e0>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a9f      	ldr	r2, [pc, #636]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000620:	f043 0320 	orr.w	r3, r3, #32
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b9d      	ldr	r3, [pc, #628]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0320 	and.w	r3, r3, #32
 800062e:	61fb      	str	r3, [r7, #28]
 8000630:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000632:	4b9a      	ldr	r3, [pc, #616]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a99      	ldr	r2, [pc, #612]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b97      	ldr	r3, [pc, #604]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000646:	61bb      	str	r3, [r7, #24]
 8000648:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b94      	ldr	r3, [pc, #592]	; (800089c <MX_GPIO_Init+0x2e0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a93      	ldr	r2, [pc, #588]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b91      	ldr	r3, [pc, #580]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b8e      	ldr	r3, [pc, #568]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a8d      	ldr	r2, [pc, #564]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b8b      	ldr	r3, [pc, #556]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800067a:	4b88      	ldr	r3, [pc, #544]	; (800089c <MX_GPIO_Init+0x2e0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a87      	ldr	r2, [pc, #540]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000680:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b85      	ldr	r3, [pc, #532]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000692:	4b82      	ldr	r3, [pc, #520]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a81      	ldr	r2, [pc, #516]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b7f      	ldr	r3, [pc, #508]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006aa:	4b7c      	ldr	r3, [pc, #496]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a7b      	ldr	r2, [pc, #492]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006b0:	f043 0308 	orr.w	r3, r3, #8
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b79      	ldr	r3, [pc, #484]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0308 	and.w	r3, r3, #8
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80006c2:	4b76      	ldr	r3, [pc, #472]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a75      	ldr	r2, [pc, #468]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b73      	ldr	r3, [pc, #460]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e0:	486f      	ldr	r0, [pc, #444]	; (80008a0 <MX_GPIO_Init+0x2e4>)
 80006e2:	f001 ff8f 	bl	8002604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_3_Pin|LED_2_Pin|LED_1_Pin|SD_CS_Pin
 80006e6:	2200      	movs	r2, #0
 80006e8:	f24e 4138 	movw	r1, #58424	; 0xe438
 80006ec:	486d      	ldr	r0, [pc, #436]	; (80008a4 <MX_GPIO_Init+0x2e8>)
 80006ee:	f001 ff89 	bl	8002604 <HAL_GPIO_WritePin>
                          |nCS_DMS1_Pin|nCS_DMS2_Pin|nCS_DMS3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IO8_Pin|IO7_Pin|IO6_Pin|IO5_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	210f      	movs	r1, #15
 80006f6:	486c      	ldr	r0, [pc, #432]	; (80008a8 <MX_GPIO_Init+0x2ec>)
 80006f8:	f001 ff84 	bl	8002604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, nCS_DMS4_Pin|nCS_DMS5_Pin, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2103      	movs	r1, #3
 8000700:	486a      	ldr	r0, [pc, #424]	; (80008ac <MX_GPIO_Init+0x2f0>)
 8000702:	f001 ff7f 	bl	8002604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCS_DMS7_GPIO_Port, nCS_DMS7_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2180      	movs	r1, #128	; 0x80
 800070a:	4869      	ldr	r0, [pc, #420]	; (80008b0 <MX_GPIO_Init+0x2f4>)
 800070c:	f001 ff7a 	bl	8002604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, FL1_HLD_Pin|FL1_WP_Pin|FL1_RES_Pin, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8000716:	4867      	ldr	r0, [pc, #412]	; (80008b4 <MX_GPIO_Init+0x2f8>)
 8000718:	f001 ff74 	bl	8002604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL1_CS2_GPIO_Port, FL1_CS2_Pin, GPIO_PIN_SET);
 800071c:	2201      	movs	r2, #1
 800071e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000722:	4864      	ldr	r0, [pc, #400]	; (80008b4 <MX_GPIO_Init+0x2f8>)
 8000724:	f001 ff6e 	bl	8002604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL1_CS1_GPIO_Port, FL1_CS1_Pin, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800072e:	4862      	ldr	r0, [pc, #392]	; (80008b8 <MX_GPIO_Init+0x2fc>)
 8000730:	f001 ff68 	bl	8002604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, nCS_PT3_Pin|FL2_HLD_Pin|FL2_RES_Pin|FL2_WP_Pin
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 4167 	mov.w	r1, #59136	; 0xe700
 800073a:	4860      	ldr	r0, [pc, #384]	; (80008bc <MX_GPIO_Init+0x300>)
 800073c:	f001 ff62 	bl	8002604 <HAL_GPIO_WritePin>
                          |nCS_PT2_Pin|nCS_PT1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FL2_CS2_Pin|FL2_CS1_Pin, GPIO_PIN_SET);
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000746:	485d      	ldr	r0, [pc, #372]	; (80008bc <MX_GPIO_Init+0x300>)
 8000748:	f001 ff5c 	bl	8002604 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
 800074c:	f64f 7318 	movw	r3, #65304	; 0xff18
 8000750:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000752:	2303      	movs	r3, #3
 8000754:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800075a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800075e:	4619      	mov	r1, r3
 8000760:	4853      	ldr	r0, [pc, #332]	; (80008b0 <MX_GPIO_Init+0x2f4>)
 8000762:	f001 fba1 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI10 PI11 PI12
                           PI13 PI15 PI0 PI1
                           PI2 PI3 PI4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8000766:	f64b 531f 	movw	r3, #48415	; 0xbd1f
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800076c:	2303      	movs	r3, #3
 800076e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000774:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000778:	4619      	mov	r1, r3
 800077a:	4849      	ldr	r0, [pc, #292]	; (80008a0 <MX_GPIO_Init+0x2e4>)
 800077c:	f001 fb94 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC4
                           PC5 PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8000780:	f24e 33f0 	movw	r3, #58352	; 0xe3f0
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000786:	2303      	movs	r3, #3
 8000788:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000792:	4619      	mov	r1, r3
 8000794:	4844      	ldr	r0, [pc, #272]	; (80008a8 <MX_GPIO_Init+0x2ec>)
 8000796:	f001 fb87 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF6
                           PF11 PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 800079a:	f641 0347 	movw	r3, #6215	; 0x1847
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a0:	2303      	movs	r3, #3
 80007a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ac:	4619      	mov	r1, r3
 80007ae:	483d      	ldr	r0, [pc, #244]	; (80008a4 <MX_GPIO_Init+0x2e8>)
 80007b0:	f001 fb7a 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_4_Pin;
 80007b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED_4_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ca:	4619      	mov	r1, r3
 80007cc:	4834      	ldr	r0, [pc, #208]	; (80008a0 <MX_GPIO_Init+0x2e4>)
 80007ce:	f001 fb6b 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LED_1_Pin|SD_CS_Pin
 80007d2:	f24e 4338 	movw	r3, #58424	; 0xe438
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |nCS_DMS1_Pin|nCS_DMS2_Pin|nCS_DMS3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007e8:	4619      	mov	r1, r3
 80007ea:	482e      	ldr	r0, [pc, #184]	; (80008a4 <MX_GPIO_Init+0x2e8>)
 80007ec:	f001 fb5c 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH2 PH6
                           PH7 PH8 PH13 PH14
                           PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 80007f0:	f24e 13c7 	movw	r3, #57799	; 0xe1c7
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f6:	2303      	movs	r3, #3
 80007f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80007fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000802:	4619      	mov	r1, r3
 8000804:	482b      	ldr	r0, [pc, #172]	; (80008b4 <MX_GPIO_Init+0x2f8>)
 8000806:	f001 fb4f 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IO8_Pin|IO7_Pin|IO6_Pin|IO5_Pin;
 800080a:	230f      	movs	r3, #15
 800080c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800081e:	4619      	mov	r1, r3
 8000820:	4821      	ldr	r0, [pc, #132]	; (80008a8 <MX_GPIO_Init+0x2ec>)
 8000822:	f001 fb41 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8000826:	2316      	movs	r3, #22
 8000828:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082a:	2303      	movs	r3, #3
 800082c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000832:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000836:	4619      	mov	r1, r3
 8000838:	4821      	ldr	r0, [pc, #132]	; (80008c0 <MX_GPIO_Init+0x304>)
 800083a:	f001 fb35 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = IO4_Pin|IO3_Pin|IO2_Pin;
 800083e:	2338      	movs	r3, #56	; 0x38
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000842:	2300      	movs	r3, #0
 8000844:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800084a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800084e:	4619      	mov	r1, r3
 8000850:	4818      	ldr	r0, [pc, #96]	; (80008b4 <MX_GPIO_Init+0x2f8>)
 8000852:	f001 fb29 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IO1_Pin;
 8000856:	2308      	movs	r3, #8
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085a:	2300      	movs	r3, #0
 800085c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IO1_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000866:	4619      	mov	r1, r3
 8000868:	4815      	ldr	r0, [pc, #84]	; (80008c0 <MX_GPIO_Init+0x304>)
 800086a:	f001 fb1d 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800086e:	f640 73e3 	movw	r3, #4067	; 0xfe3
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000874:	2303      	movs	r3, #3
 8000876:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000880:	4619      	mov	r1, r3
 8000882:	480d      	ldr	r0, [pc, #52]	; (80008b8 <MX_GPIO_Init+0x2fc>)
 8000884:	f001 fb10 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ0 PJ1 PJ2 PJ3
                           PJ4 PJ5 PJ12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000888:	f241 033f 	movw	r3, #4159	; 0x103f
 800088c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088e:	2303      	movs	r3, #3
 8000890:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000896:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800089a:	e013      	b.n	80008c4 <MX_GPIO_Init+0x308>
 800089c:	40023800 	.word	0x40023800
 80008a0:	40022000 	.word	0x40022000
 80008a4:	40021400 	.word	0x40021400
 80008a8:	40020800 	.word	0x40020800
 80008ac:	40021800 	.word	0x40021800
 80008b0:	40021000 	.word	0x40021000
 80008b4:	40021c00 	.word	0x40021c00
 80008b8:	40020400 	.word	0x40020400
 80008bc:	40020c00 	.word	0x40020c00
 80008c0:	40020000 	.word	0x40020000
 80008c4:	4619      	mov	r1, r3
 80008c6:	4865      	ldr	r0, [pc, #404]	; (8000a5c <MX_GPIO_Init+0x4a0>)
 80008c8:	f001 faee 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = nCS_DMS4_Pin|nCS_DMS5_Pin;
 80008cc:	2303      	movs	r3, #3
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e0:	4619      	mov	r1, r3
 80008e2:	485f      	ldr	r0, [pc, #380]	; (8000a60 <MX_GPIO_Init+0x4a4>)
 80008e4:	f001 fae0 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nCS_DMS7_Pin;
 80008e8:	2380      	movs	r3, #128	; 0x80
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(nCS_DMS7_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008fc:	4619      	mov	r1, r3
 80008fe:	4859      	ldr	r0, [pc, #356]	; (8000a64 <MX_GPIO_Init+0x4a8>)
 8000900:	f001 fad2 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = FL1_HLD_Pin|FL1_WP_Pin|FL1_RES_Pin|FL1_CS2_Pin;
 8000904:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800091a:	4619      	mov	r1, r3
 800091c:	4852      	ldr	r0, [pc, #328]	; (8000a68 <MX_GPIO_Init+0x4ac>)
 800091e:	f001 fac3 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FL1_CS1_Pin;
 8000922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FL1_CS1_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000938:	4619      	mov	r1, r3
 800093a:	484c      	ldr	r0, [pc, #304]	; (8000a6c <MX_GPIO_Init+0x4b0>)
 800093c:	f001 fab4 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = nCS_PT3_Pin|FL2_HLD_Pin|FL2_RES_Pin|FL2_CS2_Pin
 8000940:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FL2_CS1_Pin|FL2_WP_Pin|nCS_PT2_Pin|nCS_PT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000956:	4619      	mov	r1, r3
 8000958:	4845      	ldr	r0, [pc, #276]	; (8000a70 <MX_GPIO_Init+0x4b4>)
 800095a:	f001 faa5 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MS_SEL_Pin;
 800095e:	2304      	movs	r3, #4
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MS_SEL_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800096e:	4619      	mov	r1, r3
 8000970:	483b      	ldr	r0, [pc, #236]	; (8000a60 <MX_GPIO_Init+0x4a4>)
 8000972:	f001 fa99 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG5 PG6 PG7
                           PG8 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000976:	f64f 73e8 	movw	r3, #65512	; 0xffe8
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800097c:	2303      	movs	r3, #3
 800097e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000988:	4619      	mov	r1, r3
 800098a:	4835      	ldr	r0, [pc, #212]	; (8000a60 <MX_GPIO_Init+0x4a4>)
 800098c:	f001 fa8c 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDRDY_DMS1_Pin;
 8000990:	2310      	movs	r3, #16
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000994:	4b37      	ldr	r3, [pc, #220]	; (8000a74 <MX_GPIO_Init+0x4b8>)
 8000996:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(nDRDY_DMS1_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009a0:	4619      	mov	r1, r3
 80009a2:	482f      	ldr	r0, [pc, #188]	; (8000a60 <MX_GPIO_Init+0x4a4>)
 80009a4:	f001 fa80 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = nDRDY_DMS2_Pin|nDRDY_DMS3_Pin|nDRDY_DMS4_Pin|nDRDY_DMS5_Pin
 80009a8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |nDRDY_DMS6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ae:	4b31      	ldr	r3, [pc, #196]	; (8000a74 <MX_GPIO_Init+0x4b8>)
 80009b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ba:	4619      	mov	r1, r3
 80009bc:	482e      	ldr	r0, [pc, #184]	; (8000a78 <MX_GPIO_Init+0x4bc>)
 80009be:	f001 fa73 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80009c2:	23fb      	movs	r3, #251	; 0xfb
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009c6:	2303      	movs	r3, #3
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d2:	4619      	mov	r1, r3
 80009d4:	4826      	ldr	r0, [pc, #152]	; (8000a70 <MX_GPIO_Init+0x4b4>)
 80009d6:	f001 fa67 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = nDRDY_PT3_Pin|nDRDY_PT2_Pin|nDRDY_PT1_Pin;
 80009da:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e0:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <MX_GPIO_Init+0x4b8>)
 80009e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80009e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ec:	4619      	mov	r1, r3
 80009ee:	481b      	ldr	r0, [pc, #108]	; (8000a5c <MX_GPIO_Init+0x4a0>)
 80009f0:	f001 fa5a 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK3 PK4 PK5 PK6
                           PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80009f4:	23f8      	movs	r3, #248	; 0xf8
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f8:	2303      	movs	r3, #3
 80009fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a04:	4619      	mov	r1, r3
 8000a06:	481d      	ldr	r0, [pc, #116]	; (8000a7c <MX_GPIO_Init+0x4c0>)
 8000a08:	f001 fa4e 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SODS_OPT_Pin|SOE_OPT_Pin|LO_OPT_Pin;
 8000a0c:	23e0      	movs	r3, #224	; 0xe0
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <MX_GPIO_Init+0x4b8>)
 8000a12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4818      	ldr	r0, [pc, #96]	; (8000a80 <MX_GPIO_Init+0x4c4>)
 8000a20:	f001 fa42 	bl	8001ea8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2105      	movs	r1, #5
 8000a28:	200a      	movs	r0, #10
 8000a2a:	f001 f87b 	bl	8001b24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000a2e:	200a      	movs	r0, #10
 8000a30:	f001 f8a4 	bl	8001b7c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2105      	movs	r1, #5
 8000a38:	2017      	movs	r0, #23
 8000a3a:	f001 f873 	bl	8001b24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a3e:	2017      	movs	r0, #23
 8000a40:	f001 f89c 	bl	8001b7c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2105      	movs	r1, #5
 8000a48:	2028      	movs	r0, #40	; 0x28
 8000a4a:	f001 f86b 	bl	8001b24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a4e:	2028      	movs	r0, #40	; 0x28
 8000a50:	f001 f894 	bl	8001b7c <HAL_NVIC_EnableIRQ>

}
 8000a54:	bf00      	nop
 8000a56:	3740      	adds	r7, #64	; 0x40
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40022400 	.word	0x40022400
 8000a60:	40021800 	.word	0x40021800
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40021c00 	.word	0x40021c00
 8000a6c:	40020400 	.word	0x40020400
 8000a70:	40020c00 	.word	0x40020c00
 8000a74:	10110000 	.word	0x10110000
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	40022800 	.word	0x40022800
 8000a80:	40022000 	.word	0x40022000

08000a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8a:	f000 fedc 	bl	8001846 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a8e:	f000 f8b5 	bl	8000bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a92:	f7ff fd93 	bl	80005bc <MX_GPIO_Init>
  MX_SPI2_Init();
 8000a96:	f000 f957 	bl	8000d48 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000a9a:	f000 f993 	bl	8000dc4 <MX_SPI3_Init>
  MX_SPI6_Init();
 8000a9e:	f000 fa4b 	bl	8000f38 <MX_SPI6_Init>
  MX_UART4_Init();
 8000aa2:	f000 fd19 	bl	80014d8 <MX_UART4_Init>
  MX_UART8_Init();
 8000aa6:	f000 fd77 	bl	8001598 <MX_UART8_Init>
  MX_UART5_Init();
 8000aaa:	f000 fd45 	bl	8001538 <MX_UART5_Init>
  MX_CRC_Init();
 8000aae:	f7ff fd43 	bl	8000538 <MX_CRC_Init>
  MX_SPI4_Init();
 8000ab2:	f000 f9c5 	bl	8000e40 <MX_SPI4_Init>
  MX_SPI5_Init();
 8000ab6:	f000 fa01 	bl	8000ebc <MX_SPI5_Init>
  MX_TIM1_Init();
 8000aba:	f000 fc99 	bl	80013f0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);	//clear all LEDs
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	4848      	ldr	r0, [pc, #288]	; (8000be4 <main+0x160>)
 8000ac4:	f001 fd9e 	bl	8002604 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2110      	movs	r1, #16
 8000acc:	4845      	ldr	r0, [pc, #276]	; (8000be4 <main+0x160>)
 8000ace:	f001 fd99 	bl	8002604 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2108      	movs	r1, #8
 8000ad6:	4843      	ldr	r0, [pc, #268]	; (8000be4 <main+0x160>)
 8000ad8:	f001 fd94 	bl	8002604 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ae2:	4841      	ldr	r0, [pc, #260]	; (8000be8 <main+0x164>)
 8000ae4:	f001 fd8e 	bl	8002604 <HAL_GPIO_WritePin>

  if(!HAL_GPIO_ReadPin(MS_SEL_GPIO_Port, MS_SEL_Pin)){
 8000ae8:	2104      	movs	r1, #4
 8000aea:	4840      	ldr	r0, [pc, #256]	; (8000bec <main+0x168>)
 8000aec:	f001 fd6a 	bl	80025c4 <HAL_GPIO_ReadPin>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d133      	bne.n	8000b5e <main+0xda>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);	//ON = MS set to Master
 8000af6:	2201      	movs	r2, #1
 8000af8:	2120      	movs	r1, #32
 8000afa:	483a      	ldr	r0, [pc, #232]	; (8000be4 <main+0x160>)
 8000afc:	f001 fd82 	bl	8002604 <HAL_GPIO_WritePin>

	  uint8_t bufferOff[3] = {0x01, 0x03, 0x05};
 8000b00:	4a3b      	ldr	r2, [pc, #236]	; (8000bf0 <main+0x16c>)
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	6812      	ldr	r2, [r2, #0]
 8000b08:	4611      	mov	r1, r2
 8000b0a:	8019      	strh	r1, [r3, #0]
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	0c12      	lsrs	r2, r2, #16
 8000b10:	701a      	strb	r2, [r3, #0]
	  uint8_t bufferOn[3] = {0x02, 0x04, 0x06};
 8000b12:	4a38      	ldr	r2, [pc, #224]	; (8000bf4 <main+0x170>)
 8000b14:	f107 0308 	add.w	r3, r7, #8
 8000b18:	6812      	ldr	r2, [r2, #0]
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	8019      	strh	r1, [r3, #0]
 8000b1e:	3302      	adds	r3, #2
 8000b20:	0c12      	lsrs	r2, r2, #16
 8000b22:	701a      	strb	r2, [r3, #0]

	  while(1){	//Master loop
		  HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8000b24:	2108      	movs	r1, #8
 8000b26:	482f      	ldr	r0, [pc, #188]	; (8000be4 <main+0x160>)
 8000b28:	f001 fd98 	bl	800265c <HAL_GPIO_TogglePin>
		  HAL_UART_Transmit(&huart5, bufferOff, sizeof(bufferOff), 5);
 8000b2c:	f107 010c 	add.w	r1, r7, #12
 8000b30:	2305      	movs	r3, #5
 8000b32:	2203      	movs	r2, #3
 8000b34:	4830      	ldr	r0, [pc, #192]	; (8000bf8 <main+0x174>)
 8000b36:	f004 fea3 	bl	8005880 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8000b3a:	2064      	movs	r0, #100	; 0x64
 8000b3c:	f000 fee0 	bl	8001900 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8000b40:	2108      	movs	r1, #8
 8000b42:	4828      	ldr	r0, [pc, #160]	; (8000be4 <main+0x160>)
 8000b44:	f001 fd8a 	bl	800265c <HAL_GPIO_TogglePin>
		  HAL_UART_Transmit(&huart5, bufferOn, sizeof(bufferOn), 5);
 8000b48:	f107 0108 	add.w	r1, r7, #8
 8000b4c:	2305      	movs	r3, #5
 8000b4e:	2203      	movs	r2, #3
 8000b50:	4829      	ldr	r0, [pc, #164]	; (8000bf8 <main+0x174>)
 8000b52:	f004 fe95 	bl	8005880 <HAL_UART_Transmit>
		  HAL_Delay(100);
 8000b56:	2064      	movs	r0, #100	; 0x64
 8000b58:	f000 fed2 	bl	8001900 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8000b5c:	e7e2      	b.n	8000b24 <main+0xa0>

	  }
  } else { //Slave loop
	  uint8_t buffer[1] = {0x00};
 8000b5e:	2300      	movs	r3, #0
 8000b60:	713b      	strb	r3, [r7, #4]
	  while(1){

		  HAL_UART_Receive(&huart5, buffer, sizeof(buffer), 5);
 8000b62:	1d39      	adds	r1, r7, #4
 8000b64:	2305      	movs	r3, #5
 8000b66:	2201      	movs	r2, #1
 8000b68:	4823      	ldr	r0, [pc, #140]	; (8000bf8 <main+0x174>)
 8000b6a:	f004 ff1a 	bl	80059a2 <HAL_UART_Receive>

		  if(buffer[0] == 0x01){
 8000b6e:	793b      	ldrb	r3, [r7, #4]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d105      	bne.n	8000b80 <main+0xfc>
			  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2110      	movs	r1, #16
 8000b78:	481a      	ldr	r0, [pc, #104]	; (8000be4 <main+0x160>)
 8000b7a:	f001 fd43 	bl	8002604 <HAL_GPIO_WritePin>
 8000b7e:	e02d      	b.n	8000bdc <main+0x158>
		  } else if(buffer[0] == 0x02){
 8000b80:	793b      	ldrb	r3, [r7, #4]
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d105      	bne.n	8000b92 <main+0x10e>
			  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	2110      	movs	r1, #16
 8000b8a:	4816      	ldr	r0, [pc, #88]	; (8000be4 <main+0x160>)
 8000b8c:	f001 fd3a 	bl	8002604 <HAL_GPIO_WritePin>
 8000b90:	e024      	b.n	8000bdc <main+0x158>
		  } else if(buffer[0] == 0x03){
 8000b92:	793b      	ldrb	r3, [r7, #4]
 8000b94:	2b03      	cmp	r3, #3
 8000b96:	d105      	bne.n	8000ba4 <main+0x120>
			  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2108      	movs	r1, #8
 8000b9c:	4811      	ldr	r0, [pc, #68]	; (8000be4 <main+0x160>)
 8000b9e:	f001 fd31 	bl	8002604 <HAL_GPIO_WritePin>
 8000ba2:	e01b      	b.n	8000bdc <main+0x158>
		  } else if(buffer[0] == 0x04){
 8000ba4:	793b      	ldrb	r3, [r7, #4]
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	d105      	bne.n	8000bb6 <main+0x132>
			  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000baa:	2201      	movs	r2, #1
 8000bac:	2108      	movs	r1, #8
 8000bae:	480d      	ldr	r0, [pc, #52]	; (8000be4 <main+0x160>)
 8000bb0:	f001 fd28 	bl	8002604 <HAL_GPIO_WritePin>
 8000bb4:	e012      	b.n	8000bdc <main+0x158>
		  }  else if(buffer[0] == 0x05){
 8000bb6:	793b      	ldrb	r3, [r7, #4]
 8000bb8:	2b05      	cmp	r3, #5
 8000bba:	d106      	bne.n	8000bca <main+0x146>
			  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bc2:	4809      	ldr	r0, [pc, #36]	; (8000be8 <main+0x164>)
 8000bc4:	f001 fd1e 	bl	8002604 <HAL_GPIO_WritePin>
 8000bc8:	e008      	b.n	8000bdc <main+0x158>
		  } else if(buffer[0] == 0x06){
 8000bca:	793b      	ldrb	r3, [r7, #4]
 8000bcc:	2b06      	cmp	r3, #6
 8000bce:	d105      	bne.n	8000bdc <main+0x158>
			  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bd6:	4804      	ldr	r0, [pc, #16]	; (8000be8 <main+0x164>)
 8000bd8:	f001 fd14 	bl	8002604 <HAL_GPIO_WritePin>
		  }
		  buffer[1] = 0x00;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	717b      	strb	r3, [r7, #5]
		  HAL_UART_Receive(&huart5, buffer, sizeof(buffer), 5);
 8000be0:	e7bf      	b.n	8000b62 <main+0xde>
 8000be2:	bf00      	nop
 8000be4:	40021400 	.word	0x40021400
 8000be8:	40022000 	.word	0x40022000
 8000bec:	40021800 	.word	0x40021800
 8000bf0:	080069b4 	.word	0x080069b4
 8000bf4:	080069b8 	.word	0x080069b8
 8000bf8:	20000280 	.word	0x20000280

08000bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b0b8      	sub	sp, #224	; 0xe0
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c06:	2234      	movs	r2, #52	; 0x34
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f005 febe 	bl	800698c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	2290      	movs	r2, #144	; 0x90
 8000c26:	2100      	movs	r1, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f005 feaf 	bl	800698c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	4b3b      	ldr	r3, [pc, #236]	; (8000d1c <SystemClock_Config+0x120>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	4a3a      	ldr	r2, [pc, #232]	; (8000d1c <SystemClock_Config+0x120>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c38:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3a:	4b38      	ldr	r3, [pc, #224]	; (8000d1c <SystemClock_Config+0x120>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c46:	4b36      	ldr	r3, [pc, #216]	; (8000d20 <SystemClock_Config+0x124>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a35      	ldr	r2, [pc, #212]	; (8000d20 <SystemClock_Config+0x124>)
 8000c4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c50:	6013      	str	r3, [r2, #0]
 8000c52:	4b33      	ldr	r3, [pc, #204]	; (8000d20 <SystemClock_Config+0x124>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c64:	2301      	movs	r3, #1
 8000c66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c6a:	2310      	movs	r3, #16
 8000c6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c70:	2302      	movs	r3, #2
 8000c72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c76:	2300      	movs	r3, #0
 8000c78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000c82:	23c0      	movs	r3, #192	; 0xc0
 8000c84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c94:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f001 fd75 	bl	8002788 <HAL_RCC_OscConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000ca4:	f000 f83e 	bl	8000d24 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ca8:	f001 fd1e 	bl	80026e8 <HAL_PWREx_EnableOverDrive>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000cb2:	f000 f837 	bl	8000d24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000cc8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ccc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000cd0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000cd8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000cdc:	2106      	movs	r1, #6
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f002 f8c2 	bl	8002e68 <HAL_RCC_ClockConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000cea:	f000 f81b 	bl	8000d24 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART5
 8000cee:	f44f 5318 	mov.w	r3, #9728	; 0x2600
 8000cf2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART8;
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d00:	f107 0308 	add.w	r3, r7, #8
 8000d04:	4618      	mov	r0, r3
 8000d06:	f002 fb3d 	bl	8003384 <HAL_RCCEx_PeriphCLKConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000d10:	f000 f808 	bl	8000d24 <Error_Handler>
  }
}
 8000d14:	bf00      	nop
 8000d16:	37e0      	adds	r7, #224	; 0xe0
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40007000 	.word	0x40007000

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi5;
SPI_HandleTypeDef hspi6;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <MX_SPI2_Init+0x74>)
 8000d4e:	4a1c      	ldr	r2, [pc, #112]	; (8000dc0 <MX_SPI2_Init+0x78>)
 8000d50:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d52:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <MX_SPI2_Init+0x74>)
 8000d54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d58:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <MX_SPI2_Init+0x74>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d60:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <MX_SPI2_Init+0x74>)
 8000d62:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d66:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <MX_SPI2_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d6e:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <MX_SPI2_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_SPI2_Init+0x74>)
 8000d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d7a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <MX_SPI2_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_SPI2_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <MX_SPI2_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <MX_SPI2_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_SPI2_Init+0x74>)
 8000d96:	2207      	movs	r2, #7
 8000d98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <MX_SPI2_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_SPI2_Init+0x74>)
 8000da2:	2208      	movs	r2, #8
 8000da4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <MX_SPI2_Init+0x74>)
 8000da8:	f003 fb58 	bl	800445c <HAL_SPI_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000db2:	f7ff ffb7 	bl	8000d24 <Error_Handler>
  }

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	2000004c 	.word	0x2000004c
 8000dc0:	40003800 	.word	0x40003800

08000dc4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <MX_SPI3_Init+0x74>)
 8000dca:	4a1c      	ldr	r2, [pc, #112]	; (8000e3c <MX_SPI3_Init+0x78>)
 8000dcc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <MX_SPI3_Init+0x74>)
 8000dd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dd4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_SPI3_Init+0x74>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ddc:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <MX_SPI3_Init+0x74>)
 8000dde:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000de2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <MX_SPI3_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dea:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <MX_SPI3_Init+0x74>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_SPI3_Init+0x74>)
 8000df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_SPI3_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <MX_SPI3_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_SPI3_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <MX_SPI3_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_SPI3_Init+0x74>)
 8000e12:	2207      	movs	r2, #7
 8000e14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <MX_SPI3_Init+0x74>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_SPI3_Init+0x74>)
 8000e1e:	2208      	movs	r2, #8
 8000e20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_SPI3_Init+0x74>)
 8000e24:	f003 fb1a 	bl	800445c <HAL_SPI_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000e2e:	f7ff ff79 	bl	8000d24 <Error_Handler>
  }

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000178 	.word	0x20000178
 8000e3c:	40003c00 	.word	0x40003c00

08000e40 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <MX_SPI4_Init+0x74>)
 8000e46:	4a1c      	ldr	r2, [pc, #112]	; (8000eb8 <MX_SPI4_Init+0x78>)
 8000e48:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <MX_SPI4_Init+0x74>)
 8000e4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e50:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <MX_SPI4_Init+0x74>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e58:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <MX_SPI4_Init+0x74>)
 8000e5a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e5e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e60:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <MX_SPI4_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <MX_SPI4_Init+0x74>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <MX_SPI4_Init+0x74>)
 8000e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e72:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <MX_SPI4_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <MX_SPI4_Init+0x74>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <MX_SPI4_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <MX_SPI4_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <MX_SPI4_Init+0x74>)
 8000e8e:	2207      	movs	r2, #7
 8000e90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <MX_SPI4_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <MX_SPI4_Init+0x74>)
 8000e9a:	2208      	movs	r2, #8
 8000e9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <MX_SPI4_Init+0x74>)
 8000ea0:	f003 fadc 	bl	800445c <HAL_SPI_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8000eaa:	f7ff ff3b 	bl	8000d24 <Error_Handler>
  }

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200001dc 	.word	0x200001dc
 8000eb8:	40013400 	.word	0x40013400

08000ebc <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <MX_SPI5_Init+0x74>)
 8000ec2:	4a1c      	ldr	r2, [pc, #112]	; (8000f34 <MX_SPI5_Init+0x78>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <MX_SPI5_Init+0x74>)
 8000ec8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ecc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <MX_SPI5_Init+0x74>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <MX_SPI5_Init+0x74>)
 8000ed6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000eda:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <MX_SPI5_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ee2:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <MX_SPI5_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_SPI5_Init+0x74>)
 8000eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eee:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_SPI5_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_SPI5_Init+0x74>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_SPI5_Init+0x74>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MX_SPI5_Init+0x74>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_SPI5_Init+0x74>)
 8000f0a:	2207      	movs	r2, #7
 8000f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <MX_SPI5_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_SPI5_Init+0x74>)
 8000f16:	2208      	movs	r2, #8
 8000f18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_SPI5_Init+0x74>)
 8000f1c:	f003 fa9e 	bl	800445c <HAL_SPI_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8000f26:	f7ff fefd 	bl	8000d24 <Error_Handler>
  }

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200000b0 	.word	0x200000b0
 8000f34:	40015000 	.word	0x40015000

08000f38 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <MX_SPI6_Init+0x74>)
 8000f3e:	4a1c      	ldr	r2, [pc, #112]	; (8000fb0 <MX_SPI6_Init+0x78>)
 8000f40:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <MX_SPI6_Init+0x74>)
 8000f44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f48:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_SPI6_Init+0x74>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <MX_SPI6_Init+0x74>)
 8000f52:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f56:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <MX_SPI6_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <MX_SPI6_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <MX_SPI6_Init+0x74>)
 8000f66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f6a:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_SPI6_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <MX_SPI6_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_SPI6_Init+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <MX_SPI6_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_SPI6_Init+0x74>)
 8000f86:	2207      	movs	r2, #7
 8000f88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <MX_SPI6_Init+0x74>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_SPI6_Init+0x74>)
 8000f92:	2208      	movs	r2, #8
 8000f94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8000f96:	4805      	ldr	r0, [pc, #20]	; (8000fac <MX_SPI6_Init+0x74>)
 8000f98:	f003 fa60 	bl	800445c <HAL_SPI_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_SPI6_Init+0x6e>
  {
    Error_Handler();
 8000fa2:	f7ff febf 	bl	8000d24 <Error_Handler>
  }

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000114 	.word	0x20000114
 8000fb0:	40015400 	.word	0x40015400

08000fb4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b092      	sub	sp, #72	; 0x48
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a8e      	ldr	r2, [pc, #568]	; (800120c <HAL_SPI_MspInit+0x258>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d131      	bne.n	800103a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fd6:	4b8e      	ldr	r3, [pc, #568]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	4a8d      	ldr	r2, [pc, #564]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe2:	4b8b      	ldr	r3, [pc, #556]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fea:	633b      	str	r3, [r7, #48]	; 0x30
 8000fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	4b88      	ldr	r3, [pc, #544]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a87      	ldr	r2, [pc, #540]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b85      	ldr	r3, [pc, #532]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001006:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800100a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001014:	2303      	movs	r3, #3
 8001016:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001018:	2305      	movs	r3, #5
 800101a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001020:	4619      	mov	r1, r3
 8001022:	487c      	ldr	r0, [pc, #496]	; (8001214 <HAL_SPI_MspInit+0x260>)
 8001024:	f000 ff40 	bl	8001ea8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 6, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	2106      	movs	r1, #6
 800102c:	2024      	movs	r0, #36	; 0x24
 800102e:	f000 fd79 	bl	8001b24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001032:	2024      	movs	r0, #36	; 0x24
 8001034:	f000 fda2 	bl	8001b7c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8001038:	e0e4      	b.n	8001204 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI3)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a76      	ldr	r2, [pc, #472]	; (8001218 <HAL_SPI_MspInit+0x264>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d145      	bne.n	80010d0 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001044:	4b72      	ldr	r3, [pc, #456]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	4a71      	ldr	r2, [pc, #452]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 800104a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800104e:	6413      	str	r3, [r2, #64]	; 0x40
 8001050:	4b6f      	ldr	r3, [pc, #444]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
 800105a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105c:	4b6c      	ldr	r3, [pc, #432]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001060:	4a6b      	ldr	r2, [pc, #428]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 8001062:	f043 0302 	orr.w	r3, r3, #2
 8001066:	6313      	str	r3, [r2, #48]	; 0x30
 8001068:	4b69      	ldr	r3, [pc, #420]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001074:	4b66      	ldr	r3, [pc, #408]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	4a65      	ldr	r2, [pc, #404]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	6313      	str	r3, [r2, #48]	; 0x30
 8001080:	4b63      	ldr	r3, [pc, #396]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	623b      	str	r3, [r7, #32]
 800108a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800108c:	2304      	movs	r3, #4
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	2303      	movs	r3, #3
 800109a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800109c:	2307      	movs	r3, #7
 800109e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010a4:	4619      	mov	r1, r3
 80010a6:	485b      	ldr	r0, [pc, #364]	; (8001214 <HAL_SPI_MspInit+0x260>)
 80010a8:	f000 fefe 	bl	8001ea8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010be:	2306      	movs	r3, #6
 80010c0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010c6:	4619      	mov	r1, r3
 80010c8:	4854      	ldr	r0, [pc, #336]	; (800121c <HAL_SPI_MspInit+0x268>)
 80010ca:	f000 feed 	bl	8001ea8 <HAL_GPIO_Init>
}
 80010ce:	e099      	b.n	8001204 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI4)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a52      	ldr	r2, [pc, #328]	; (8001220 <HAL_SPI_MspInit+0x26c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d130      	bne.n	800113c <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80010da:	4b4d      	ldr	r3, [pc, #308]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a4c      	ldr	r2, [pc, #304]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 80010e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b4a      	ldr	r3, [pc, #296]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010ee:	61fb      	str	r3, [r7, #28]
 80010f0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010f2:	4b47      	ldr	r3, [pc, #284]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a46      	ldr	r2, [pc, #280]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 80010f8:	f043 0310 	orr.w	r3, r3, #16
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b44      	ldr	r3, [pc, #272]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0310 	and.w	r3, r3, #16
 8001106:	61bb      	str	r3, [r7, #24]
 8001108:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800110a:	2364      	movs	r3, #100	; 0x64
 800110c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800111a:	2305      	movs	r3, #5
 800111c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800111e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001122:	4619      	mov	r1, r3
 8001124:	483f      	ldr	r0, [pc, #252]	; (8001224 <HAL_SPI_MspInit+0x270>)
 8001126:	f000 febf 	bl	8001ea8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 6, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2106      	movs	r1, #6
 800112e:	2054      	movs	r0, #84	; 0x54
 8001130:	f000 fcf8 	bl	8001b24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001134:	2054      	movs	r0, #84	; 0x54
 8001136:	f000 fd21 	bl	8001b7c <HAL_NVIC_EnableIRQ>
}
 800113a:	e063      	b.n	8001204 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI5)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a39      	ldr	r2, [pc, #228]	; (8001228 <HAL_SPI_MspInit+0x274>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d129      	bne.n	800119a <HAL_SPI_MspInit+0x1e6>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001146:	4b32      	ldr	r3, [pc, #200]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a31      	ldr	r2, [pc, #196]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 800114c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800115e:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a2b      	ldr	r2, [pc, #172]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 8001164:	f043 0320 	orr.w	r3, r3, #32
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b29      	ldr	r3, [pc, #164]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0320 	and.w	r3, r3, #32
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001176:	f44f 7360 	mov.w	r3, #896	; 0x380
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001188:	2305      	movs	r3, #5
 800118a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800118c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001190:	4619      	mov	r1, r3
 8001192:	4826      	ldr	r0, [pc, #152]	; (800122c <HAL_SPI_MspInit+0x278>)
 8001194:	f000 fe88 	bl	8001ea8 <HAL_GPIO_Init>
}
 8001198:	e034      	b.n	8001204 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI6)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a24      	ldr	r2, [pc, #144]	; (8001230 <HAL_SPI_MspInit+0x27c>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d12f      	bne.n	8001204 <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI6_CLK_ENABLE();
 80011a4:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 80011a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a8:	4a19      	ldr	r2, [pc, #100]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 80011aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011ae:	6453      	str	r3, [r2, #68]	; 0x44
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 80011b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	4a13      	ldr	r2, [pc, #76]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6313      	str	r3, [r2, #48]	; 0x30
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <HAL_SPI_MspInit+0x25c>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011d4:	23e0      	movs	r3, #224	; 0xe0
 80011d6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 80011e4:	2308      	movs	r3, #8
 80011e6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011ec:	4619      	mov	r1, r3
 80011ee:	4811      	ldr	r0, [pc, #68]	; (8001234 <HAL_SPI_MspInit+0x280>)
 80011f0:	f000 fe5a 	bl	8001ea8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 6, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2106      	movs	r1, #6
 80011f8:	2056      	movs	r0, #86	; 0x56
 80011fa:	f000 fc93 	bl	8001b24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 80011fe:	2056      	movs	r0, #86	; 0x56
 8001200:	f000 fcbc 	bl	8001b7c <HAL_NVIC_EnableIRQ>
}
 8001204:	bf00      	nop
 8001206:	3748      	adds	r7, #72	; 0x48
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40003800 	.word	0x40003800
 8001210:	40023800 	.word	0x40023800
 8001214:	40020400 	.word	0x40020400
 8001218:	40003c00 	.word	0x40003c00
 800121c:	40020800 	.word	0x40020800
 8001220:	40013400 	.word	0x40013400
 8001224:	40021000 	.word	0x40021000
 8001228:	40015000 	.word	0x40015000
 800122c:	40021400 	.word	0x40021400
 8001230:	40015400 	.word	0x40015400
 8001234:	40020000 	.word	0x40020000

08001238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <HAL_MspInit+0x44>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a0e      	ldr	r2, [pc, #56]	; (800127c <HAL_MspInit+0x44>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <HAL_MspInit+0x44>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_MspInit+0x44>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a08      	ldr	r2, [pc, #32]	; (800127c <HAL_MspInit+0x44>)
 800125c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_MspInit+0x44>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800

08001280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <HardFault_Handler+0x4>

08001294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <MemManage_Handler+0x4>

0800129a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <BusFault_Handler+0x4>

080012a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <UsageFault_Handler+0x4>

080012a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80012d4:	2010      	movs	r0, #16
 80012d6:	f001 f9e3 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}

080012de <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80012e2:	2020      	movs	r0, #32
 80012e4:	f001 f9dc 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80012e8:	2040      	movs	r0, #64	; 0x40
 80012ea:	f001 f9d9 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80012ee:	2080      	movs	r0, #128	; 0x80
 80012f0:	f001 f9d6 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80012f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80012f8:	f001 f9d2 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80012fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001300:	f001 f9ce 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}

08001308 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800130c:	4802      	ldr	r0, [pc, #8]	; (8001318 <SPI2_IRQHandler+0x10>)
 800130e:	f003 fa4d 	bl	80047ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	2000004c 	.word	0x2000004c

0800131c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001320:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001324:	f001 f9bc 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001328:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800132c:	f001 f9b8 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001330:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001334:	f001 f9b4 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001338:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800133c:	f001 f9b0 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001340:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001344:	f001 f9ac 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001348:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800134c:	f001 f9a8 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}

08001354 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <UART4_IRQHandler+0x10>)
 800135a:	f004 fbef 	bl	8005b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000380 	.word	0x20000380

08001368 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <UART5_IRQHandler+0x10>)
 800136e:	f004 fbe5 	bl	8005b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000280 	.word	0x20000280

0800137c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <UART8_IRQHandler+0x10>)
 8001382:	f004 fbdb 	bl	8005b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000300 	.word	0x20000300

08001390 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <SPI4_IRQHandler+0x10>)
 8001396:	f003 fa09 	bl	80047ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200001dc 	.word	0x200001dc

080013a4 <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <SPI6_IRQHandler+0x10>)
 80013aa:	f003 f9ff 	bl	80047ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000114 	.word	0x20000114

080013b8 <SysTick_Handler>:

/* USER CODE BEGIN 1 */
void SysTick_Handler(void) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80013bc:	f000 fa80 	bl	80018c0 <HAL_IncTick>
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <SystemInit+0x28>)
 80013ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ce:	4a07      	ldr	r2, [pc, #28]	; (80013ec <SystemInit+0x28>)
 80013d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <SystemInit+0x28>)
 80013da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013de:	609a      	str	r2, [r3, #8]
#endif
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f6:	f107 0310 	add.w	r3, r7, #16
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 800140e:	4b20      	ldr	r3, [pc, #128]	; (8001490 <MX_TIM1_Init+0xa0>)
 8001410:	4a20      	ldr	r2, [pc, #128]	; (8001494 <MX_TIM1_Init+0xa4>)
 8001412:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001414:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <MX_TIM1_Init+0xa0>)
 8001416:	2200      	movs	r2, #0
 8001418:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141a:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <MX_TIM1_Init+0xa0>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <MX_TIM1_Init+0xa0>)
 8001422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001426:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <MX_TIM1_Init+0xa0>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800142e:	4b18      	ldr	r3, [pc, #96]	; (8001490 <MX_TIM1_Init+0xa0>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001434:	4b16      	ldr	r3, [pc, #88]	; (8001490 <MX_TIM1_Init+0xa0>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800143a:	4815      	ldr	r0, [pc, #84]	; (8001490 <MX_TIM1_Init+0xa0>)
 800143c:	f003 fad6 	bl	80049ec <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001446:	f7ff fc6d 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	4619      	mov	r1, r3
 8001456:	480e      	ldr	r0, [pc, #56]	; (8001490 <MX_TIM1_Init+0xa0>)
 8001458:	f003 fb94 	bl	8004b84 <HAL_TIM_ConfigClockSource>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001462:	f7ff fc5f 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	4619      	mov	r1, r3
 8001476:	4806      	ldr	r0, [pc, #24]	; (8001490 <MX_TIM1_Init+0xa0>)
 8001478:	f003 fff8 	bl	800546c <HAL_TIMEx_MasterConfigSynchronization>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001482:	f7ff fc4f 	bl	8000d24 <Error_Handler>
  }

}
 8001486:	bf00      	nop
 8001488:	3720      	adds	r7, #32
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000240 	.word	0x20000240
 8001494:	40010000 	.word	0x40010000

08001498 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <HAL_TIM_Base_MspInit+0x38>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d10b      	bne.n	80014c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <HAL_TIM_Base_MspInit+0x3c>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	4a09      	ldr	r2, [pc, #36]	; (80014d4 <HAL_TIM_Base_MspInit+0x3c>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6453      	str	r3, [r2, #68]	; 0x44
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <HAL_TIM_Base_MspInit+0x3c>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40010000 	.word	0x40010000
 80014d4:	40023800 	.word	0x40023800

080014d8 <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart8;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <MX_UART4_Init+0x58>)
 80014de:	4a15      	ldr	r2, [pc, #84]	; (8001534 <MX_UART4_Init+0x5c>)
 80014e0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <MX_UART4_Init+0x58>)
 80014e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <MX_UART4_Init+0x58>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <MX_UART4_Init+0x58>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_UART4_Init+0x58>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_UART4_Init+0x58>)
 80014fe:	220c      	movs	r2, #12
 8001500:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_UART4_Init+0x58>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_UART4_Init+0x58>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MX_UART4_Init+0x58>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_UART4_Init+0x58>)
 8001516:	2200      	movs	r2, #0
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_UART4_Init+0x58>)
 800151c:	f004 f8f0 	bl	8005700 <HAL_UART_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001526:	f7ff fbfd 	bl	8000d24 <Error_Handler>
  }

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000380 	.word	0x20000380
 8001534:	40004c00 	.word	0x40004c00

08001538 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MX_UART5_Init+0x58>)
 800153e:	4a15      	ldr	r2, [pc, #84]	; (8001594 <MX_UART5_Init+0x5c>)
 8001540:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <MX_UART5_Init+0x58>)
 8001544:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001548:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_UART5_Init+0x58>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_UART5_Init+0x58>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <MX_UART5_Init+0x58>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <MX_UART5_Init+0x58>)
 800155e:	220c      	movs	r2, #12
 8001560:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <MX_UART5_Init+0x58>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <MX_UART5_Init+0x58>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800156e:	4b08      	ldr	r3, [pc, #32]	; (8001590 <MX_UART5_Init+0x58>)
 8001570:	2200      	movs	r2, #0
 8001572:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <MX_UART5_Init+0x58>)
 8001576:	2200      	movs	r2, #0
 8001578:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_UART5_Init+0x58>)
 800157c:	f004 f8c0 	bl	8005700 <HAL_UART_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001586:	f7ff fbcd 	bl	8000d24 <Error_Handler>
  }

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000280 	.word	0x20000280
 8001594:	40005000 	.word	0x40005000

08001598 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_UART8_Init+0x58>)
 800159e:	4a15      	ldr	r2, [pc, #84]	; (80015f4 <MX_UART8_Init+0x5c>)
 80015a0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 30000;
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <MX_UART8_Init+0x58>)
 80015a4:	f247 5230 	movw	r2, #30000	; 0x7530
 80015a8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_UART8_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_UART8_Init+0x58>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_UART8_Init+0x58>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_UART8_Init+0x58>)
 80015be:	220c      	movs	r2, #12
 80015c0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_UART8_Init+0x58>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_UART8_Init+0x58>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_UART8_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_UART8_Init+0x58>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_UART8_Init+0x58>)
 80015dc:	f004 f890 	bl	8005700 <HAL_UART_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_UART8_Init+0x52>
  {
    Error_Handler();
 80015e6:	f7ff fb9d 	bl	8000d24 <Error_Handler>
  }

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000300 	.word	0x20000300
 80015f4:	40007c00 	.word	0x40007c00

080015f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b090      	sub	sp, #64	; 0x40
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a6e      	ldr	r2, [pc, #440]	; (80017d0 <HAL_UART_MspInit+0x1d8>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d14d      	bne.n	80016b6 <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800161a:	4b6e      	ldr	r3, [pc, #440]	; (80017d4 <HAL_UART_MspInit+0x1dc>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a6d      	ldr	r2, [pc, #436]	; (80017d4 <HAL_UART_MspInit+0x1dc>)
 8001620:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
 8001626:	4b6b      	ldr	r3, [pc, #428]	; (80017d4 <HAL_UART_MspInit+0x1dc>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001630:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001632:	4b68      	ldr	r3, [pc, #416]	; (80017d4 <HAL_UART_MspInit+0x1dc>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a67      	ldr	r2, [pc, #412]	; (80017d4 <HAL_UART_MspInit+0x1dc>)
 8001638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b65      	ldr	r3, [pc, #404]	; (80017d4 <HAL_UART_MspInit+0x1dc>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	4b62      	ldr	r3, [pc, #392]	; (80017d4 <HAL_UART_MspInit+0x1dc>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a61      	ldr	r2, [pc, #388]	; (80017d4 <HAL_UART_MspInit+0x1dc>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b5f      	ldr	r3, [pc, #380]	; (80017d4 <HAL_UART_MspInit+0x1dc>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	623b      	str	r3, [r7, #32]
 8001660:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PI9     ------> UART4_RX
    PA0/WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = DAPI_RX_Pin;
 8001662:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001674:	2308      	movs	r3, #8
 8001676:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(DAPI_RX_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800167c:	4619      	mov	r1, r3
 800167e:	4856      	ldr	r0, [pc, #344]	; (80017d8 <HAL_UART_MspInit+0x1e0>)
 8001680:	f000 fc12 	bl	8001ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DAPI_TX_Pin;
 8001684:	2301      	movs	r3, #1
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001694:	2308      	movs	r3, #8
 8001696:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(DAPI_TX_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800169c:	4619      	mov	r1, r3
 800169e:	484f      	ldr	r0, [pc, #316]	; (80017dc <HAL_UART_MspInit+0x1e4>)
 80016a0:	f000 fc02 	bl	8001ea8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2106      	movs	r1, #6
 80016a8:	2034      	movs	r0, #52	; 0x34
 80016aa:	f000 fa3b 	bl	8001b24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80016ae:	2034      	movs	r0, #52	; 0x34
 80016b0:	f000 fa64 	bl	8001b7c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 80016b4:	e087      	b.n	80017c6 <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==UART5)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a49      	ldr	r2, [pc, #292]	; (80017e0 <HAL_UART_MspInit+0x1e8>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d14d      	bne.n	800175c <HAL_UART_MspInit+0x164>
    __HAL_RCC_UART5_CLK_ENABLE();
 80016c0:	4b44      	ldr	r3, [pc, #272]	; (80017d4 <HAL_UART_MspInit+0x1dc>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	4a43      	ldr	r2, [pc, #268]	; (80017d4 <HAL_UART_MspInit+0x1dc>)
 80016c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016ca:	6413      	str	r3, [r2, #64]	; 0x40
 80016cc:	4b41      	ldr	r3, [pc, #260]	; (80017d4 <HAL_UART_MspInit+0x1dc>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d4:	61fb      	str	r3, [r7, #28]
 80016d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d8:	4b3e      	ldr	r3, [pc, #248]	; (80017d4 <HAL_UART_MspInit+0x1dc>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	4a3d      	ldr	r2, [pc, #244]	; (80017d4 <HAL_UART_MspInit+0x1dc>)
 80016de:	f043 0304 	orr.w	r3, r3, #4
 80016e2:	6313      	str	r3, [r2, #48]	; 0x30
 80016e4:	4b3b      	ldr	r3, [pc, #236]	; (80017d4 <HAL_UART_MspInit+0x1dc>)
 80016e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	61bb      	str	r3, [r7, #24]
 80016ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f0:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <HAL_UART_MspInit+0x1dc>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	4a37      	ldr	r2, [pc, #220]	; (80017d4 <HAL_UART_MspInit+0x1dc>)
 80016f6:	f043 0308 	orr.w	r3, r3, #8
 80016fa:	6313      	str	r3, [r2, #48]	; 0x30
 80016fc:	4b35      	ldr	r3, [pc, #212]	; (80017d4 <HAL_UART_MspInit+0x1dc>)
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = INTERSPU_TX_Pin;
 8001708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800171a:	2308      	movs	r3, #8
 800171c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(INTERSPU_TX_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001722:	4619      	mov	r1, r3
 8001724:	482f      	ldr	r0, [pc, #188]	; (80017e4 <HAL_UART_MspInit+0x1ec>)
 8001726:	f000 fbbf 	bl	8001ea8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = INTERSPU_RX_Pin;
 800172a:	2304      	movs	r3, #4
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001736:	2303      	movs	r3, #3
 8001738:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800173a:	2308      	movs	r3, #8
 800173c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(INTERSPU_RX_GPIO_Port, &GPIO_InitStruct);
 800173e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001742:	4619      	mov	r1, r3
 8001744:	4828      	ldr	r0, [pc, #160]	; (80017e8 <HAL_UART_MspInit+0x1f0>)
 8001746:	f000 fbaf 	bl	8001ea8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 6, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2106      	movs	r1, #6
 800174e:	2035      	movs	r0, #53	; 0x35
 8001750:	f000 f9e8 	bl	8001b24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001754:	2035      	movs	r0, #53	; 0x35
 8001756:	f000 fa11 	bl	8001b7c <HAL_NVIC_EnableIRQ>
}
 800175a:	e034      	b.n	80017c6 <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==UART8)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a22      	ldr	r2, [pc, #136]	; (80017ec <HAL_UART_MspInit+0x1f4>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d12f      	bne.n	80017c6 <HAL_UART_MspInit+0x1ce>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <HAL_UART_MspInit+0x1dc>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4a1a      	ldr	r2, [pc, #104]	; (80017d4 <HAL_UART_MspInit+0x1dc>)
 800176c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
 8001772:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <HAL_UART_MspInit+0x1dc>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_UART_MspInit+0x1dc>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <HAL_UART_MspInit+0x1dc>)
 8001784:	f043 0310 	orr.w	r3, r3, #16
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_UART_MspInit+0x1dc>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0310 	and.w	r3, r3, #16
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EXP_IN_Pin|EXP_OUT_Pin;
 8001796:	2303      	movs	r3, #3
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80017a6:	2308      	movs	r3, #8
 80017a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ae:	4619      	mov	r1, r3
 80017b0:	480f      	ldr	r0, [pc, #60]	; (80017f0 <HAL_UART_MspInit+0x1f8>)
 80017b2:	f000 fb79 	bl	8001ea8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 6, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2106      	movs	r1, #6
 80017ba:	2053      	movs	r0, #83	; 0x53
 80017bc:	f000 f9b2 	bl	8001b24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80017c0:	2053      	movs	r0, #83	; 0x53
 80017c2:	f000 f9db 	bl	8001b7c <HAL_NVIC_EnableIRQ>
}
 80017c6:	bf00      	nop
 80017c8:	3740      	adds	r7, #64	; 0x40
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40004c00 	.word	0x40004c00
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40022000 	.word	0x40022000
 80017dc:	40020000 	.word	0x40020000
 80017e0:	40005000 	.word	0x40005000
 80017e4:	40020800 	.word	0x40020800
 80017e8:	40020c00 	.word	0x40020c00
 80017ec:	40007c00 	.word	0x40007c00
 80017f0:	40021000 	.word	0x40021000

080017f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800182c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017fa:	e003      	b.n	8001804 <LoopCopyDataInit>

080017fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001800:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001802:	3104      	adds	r1, #4

08001804 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001804:	480b      	ldr	r0, [pc, #44]	; (8001834 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001808:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800180a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800180c:	d3f6      	bcc.n	80017fc <CopyDataInit>
  ldr  r2, =_sbss
 800180e:	4a0b      	ldr	r2, [pc, #44]	; (800183c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001810:	e002      	b.n	8001818 <LoopFillZerobss>

08001812 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001812:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001814:	f842 3b04 	str.w	r3, [r2], #4

08001818 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800181a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800181c:	d3f9      	bcc.n	8001812 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800181e:	f7ff fdd1 	bl	80013c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001822:	f005 f88f 	bl	8006944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001826:	f7ff f92d 	bl	8000a84 <main>
  bx  lr    
 800182a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800182c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001830:	08006c2c 	.word	0x08006c2c
  ldr  r0, =_sdata
 8001834:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001838:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800183c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001840:	20000404 	.word	0x20000404

08001844 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001844:	e7fe      	b.n	8001844 <ADC_IRQHandler>

08001846 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184a:	2003      	movs	r0, #3
 800184c:	f000 f94a 	bl	8001ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001850:	200a      	movs	r0, #10
 8001852:	f000 f805 	bl	8001860 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001856:	f7ff fcef 	bl	8001238 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_InitTick+0x54>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_InitTick+0x58>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	fbb3 f3f1 	udiv	r3, r3, r1
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f994 	bl	8001bac <HAL_SYSTICK_Config>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e00e      	b.n	80018ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d80a      	bhi.n	80018aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001894:	2200      	movs	r2, #0
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f000 f942 	bl	8001b24 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a0:	4a06      	ldr	r2, [pc, #24]	; (80018bc <HAL_InitTick+0x5c>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000008 	.word	0x20000008
 80018bc:	20000004 	.word	0x20000004

080018c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_IncTick+0x20>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_IncTick+0x24>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <HAL_IncTick+0x24>)
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000008 	.word	0x20000008
 80018e4:	20000400 	.word	0x20000400

080018e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return uwTick;
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <HAL_GetTick+0x14>)
 80018ee:	681b      	ldr	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000400 	.word	0x20000400

08001900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001908:	f7ff ffee 	bl	80018e8 <HAL_GetTick>
 800190c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001918:	d005      	beq.n	8001926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <HAL_Delay+0x40>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4413      	add	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001926:	bf00      	nop
 8001928:	f7ff ffde 	bl	80018e8 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	429a      	cmp	r2, r3
 8001936:	d8f7      	bhi.n	8001928 <HAL_Delay+0x28>
  {
  }
}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000008 	.word	0x20000008

08001944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <__NVIC_SetPriorityGrouping+0x40>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001960:	4013      	ands	r3, r2
 8001962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <__NVIC_SetPriorityGrouping+0x44>)
 800196e:	4313      	orrs	r3, r2
 8001970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001972:	4a04      	ldr	r2, [pc, #16]	; (8001984 <__NVIC_SetPriorityGrouping+0x40>)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	60d3      	str	r3, [r2, #12]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00
 8001988:	05fa0000 	.word	0x05fa0000

0800198c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	f003 0307 	and.w	r3, r3, #7
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	db0b      	blt.n	80019d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	f003 021f 	and.w	r2, r3, #31
 80019c0:	4907      	ldr	r1, [pc, #28]	; (80019e0 <__NVIC_EnableIRQ+0x38>)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	2001      	movs	r0, #1
 80019ca:	fa00 f202 	lsl.w	r2, r0, r2
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db0a      	blt.n	8001a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	490c      	ldr	r1, [pc, #48]	; (8001a30 <__NVIC_SetPriority+0x4c>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	0112      	lsls	r2, r2, #4
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a0c:	e00a      	b.n	8001a24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4908      	ldr	r1, [pc, #32]	; (8001a34 <__NVIC_SetPriority+0x50>)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	3b04      	subs	r3, #4
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	440b      	add	r3, r1
 8001a22:	761a      	strb	r2, [r3, #24]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000e100 	.word	0xe000e100
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f1c3 0307 	rsb	r3, r3, #7
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	bf28      	it	cs
 8001a56:	2304      	movcs	r3, #4
 8001a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d902      	bls.n	8001a68 <NVIC_EncodePriority+0x30>
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3b03      	subs	r3, #3
 8001a66:	e000      	b.n	8001a6a <NVIC_EncodePriority+0x32>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a80:	f04f 31ff 	mov.w	r1, #4294967295
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43d9      	mvns	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	4313      	orrs	r3, r2
         );
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3724      	adds	r7, #36	; 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab0:	d301      	bcc.n	8001ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00f      	b.n	8001ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <SysTick_Config+0x40>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001abe:	210f      	movs	r1, #15
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	f7ff ff8e 	bl	80019e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <SysTick_Config+0x40>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ace:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <SysTick_Config+0x40>)
 8001ad0:	2207      	movs	r2, #7
 8001ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	e000e010 	.word	0xe000e010

08001ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b07      	cmp	r3, #7
 8001af0:	d00f      	beq.n	8001b12 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b06      	cmp	r3, #6
 8001af6:	d00c      	beq.n	8001b12 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b05      	cmp	r3, #5
 8001afc:	d009      	beq.n	8001b12 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d006      	beq.n	8001b12 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d003      	beq.n	8001b12 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001b0a:	2192      	movs	r1, #146	; 0x92
 8001b0c:	4804      	ldr	r0, [pc, #16]	; (8001b20 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001b0e:	f7ff f910 	bl	8000d32 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ff16 	bl	8001944 <__NVIC_SetPriorityGrouping>
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	080069bc 	.word	0x080069bc

08001b24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b0f      	cmp	r3, #15
 8001b3a:	d903      	bls.n	8001b44 <HAL_NVIC_SetPriority+0x20>
 8001b3c:	21aa      	movs	r1, #170	; 0xaa
 8001b3e:	480e      	ldr	r0, [pc, #56]	; (8001b78 <HAL_NVIC_SetPriority+0x54>)
 8001b40:	f7ff f8f7 	bl	8000d32 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2b0f      	cmp	r3, #15
 8001b48:	d903      	bls.n	8001b52 <HAL_NVIC_SetPriority+0x2e>
 8001b4a:	21ab      	movs	r1, #171	; 0xab
 8001b4c:	480a      	ldr	r0, [pc, #40]	; (8001b78 <HAL_NVIC_SetPriority+0x54>)
 8001b4e:	f7ff f8f0 	bl	8000d32 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b52:	f7ff ff1b 	bl	800198c <__NVIC_GetPriorityGrouping>
 8001b56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	68b9      	ldr	r1, [r7, #8]
 8001b5c:	6978      	ldr	r0, [r7, #20]
 8001b5e:	f7ff ff6b 	bl	8001a38 <NVIC_EncodePriority>
 8001b62:	4602      	mov	r2, r0
 8001b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff3a 	bl	80019e4 <__NVIC_SetPriority>
}
 8001b70:	bf00      	nop
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	080069bc 	.word	0x080069bc

08001b7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	da03      	bge.n	8001b96 <HAL_NVIC_EnableIRQ+0x1a>
 8001b8e:	21be      	movs	r1, #190	; 0xbe
 8001b90:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <HAL_NVIC_EnableIRQ+0x2c>)
 8001b92:	f7ff f8ce 	bl	8000d32 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff ff04 	bl	80019a8 <__NVIC_EnableIRQ>
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	080069bc 	.word	0x080069bc

08001bac <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ff73 	bl	8001aa0 <SysTick_Config>
 8001bba:	4603      	mov	r3, r0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e0a5      	b.n	8001d22 <HAL_CRC_Init+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a54      	ldr	r2, [pc, #336]	; (8001d2c <HAL_CRC_Init+0x168>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d003      	beq.n	8001be8 <HAL_CRC_Init+0x24>
 8001be0:	2170      	movs	r1, #112	; 0x70
 8001be2:	4853      	ldr	r0, [pc, #332]	; (8001d30 <HAL_CRC_Init+0x16c>)
 8001be4:	f7ff f8a5 	bl	8000d32 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	7f5b      	ldrb	r3, [r3, #29]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d105      	bne.n	8001bfe <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7fe fcbf 	bl	800057c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2202      	movs	r2, #2
 8001c02:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	791b      	ldrb	r3, [r3, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d007      	beq.n	8001c1c <HAL_CRC_Init+0x58>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	791b      	ldrb	r3, [r3, #4]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d003      	beq.n	8001c1c <HAL_CRC_Init+0x58>
 8001c14:	217e      	movs	r1, #126	; 0x7e
 8001c16:	4846      	ldr	r0, [pc, #280]	; (8001d30 <HAL_CRC_Init+0x16c>)
 8001c18:	f7ff f88b 	bl	8000d32 <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	791b      	ldrb	r3, [r3, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10c      	bne.n	8001c3e <HAL_CRC_Init+0x7a>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a42      	ldr	r2, [pc, #264]	; (8001d34 <HAL_CRC_Init+0x170>)
 8001c2a:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0218 	bic.w	r2, r2, #24
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	e00c      	b.n	8001c58 <HAL_CRC_Init+0x94>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6899      	ldr	r1, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	461a      	mov	r2, r3
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f875 	bl	8001d38 <HAL_CRCEx_Polynomial_Set>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_CRC_Init+0x94>
    {
      return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e064      	b.n	8001d22 <HAL_CRC_Init+0x15e>
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	795b      	ldrb	r3, [r3, #5]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d007      	beq.n	8001c70 <HAL_CRC_Init+0xac>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	795b      	ldrb	r3, [r3, #5]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d003      	beq.n	8001c70 <HAL_CRC_Init+0xac>
 8001c68:	2190      	movs	r1, #144	; 0x90
 8001c6a:	4831      	ldr	r0, [pc, #196]	; (8001d30 <HAL_CRC_Init+0x16c>)
 8001c6c:	f7ff f861 	bl	8000d32 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	795b      	ldrb	r3, [r3, #5]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d105      	bne.n	8001c84 <HAL_CRC_Init+0xc0>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c80:	611a      	str	r2, [r3, #16]
 8001c82:	e004      	b.n	8001c8e <HAL_CRC_Init+0xca>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6912      	ldr	r2, [r2, #16]
 8001c8c:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00f      	beq.n	8001cb6 <HAL_CRC_Init+0xf2>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	2b20      	cmp	r3, #32
 8001c9c:	d00b      	beq.n	8001cb6 <HAL_CRC_Init+0xf2>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	2b40      	cmp	r3, #64	; 0x40
 8001ca4:	d007      	beq.n	8001cb6 <HAL_CRC_Init+0xf2>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	2b60      	cmp	r3, #96	; 0x60
 8001cac:	d003      	beq.n	8001cb6 <HAL_CRC_Init+0xf2>
 8001cae:	219c      	movs	r1, #156	; 0x9c
 8001cb0:	481f      	ldr	r0, [pc, #124]	; (8001d30 <HAL_CRC_Init+0x16c>)
 8001cb2:	f7ff f83e 	bl	8000d32 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	695a      	ldr	r2, [r3, #20]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d007      	beq.n	8001ce4 <HAL_CRC_Init+0x120>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	2b80      	cmp	r3, #128	; 0x80
 8001cda:	d003      	beq.n	8001ce4 <HAL_CRC_Init+0x120>
 8001cdc:	21a0      	movs	r1, #160	; 0xa0
 8001cde:	4814      	ldr	r0, [pc, #80]	; (8001d30 <HAL_CRC_Init+0x16c>)
 8001ce0:	f7ff f827 	bl	8000d32 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699a      	ldr	r2, [r3, #24]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	609a      	str	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d00b      	beq.n	8001d1a <HAL_CRC_Init+0x156>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d007      	beq.n	8001d1a <HAL_CRC_Init+0x156>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d003      	beq.n	8001d1a <HAL_CRC_Init+0x156>
 8001d12:	21a5      	movs	r1, #165	; 0xa5
 8001d14:	4806      	ldr	r0, [pc, #24]	; (8001d30 <HAL_CRC_Init+0x16c>)
 8001d16:	f7ff f80c 	bl	8000d32 <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023000 	.word	0x40023000
 8001d30:	080069f8 	.word	0x080069f8
 8001d34:	04c11db7 	.word	0x04c11db7

08001d38 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001d48:	231f      	movs	r3, #31
 8001d4a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00c      	beq.n	8001d6c <HAL_CRCEx_Polynomial_Set+0x34>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d009      	beq.n	8001d6c <HAL_CRCEx_Polynomial_Set+0x34>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d006      	beq.n	8001d6c <HAL_CRCEx_Polynomial_Set+0x34>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b18      	cmp	r3, #24
 8001d62:	d003      	beq.n	8001d6c <HAL_CRCEx_Polynomial_Set+0x34>
 8001d64:	215f      	movs	r1, #95	; 0x5f
 8001d66:	483e      	ldr	r0, [pc, #248]	; (8001e60 <HAL_CRCEx_Polynomial_Set+0x128>)
 8001d68:	f7fe ffe3 	bl	8000d32 <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001d6c:	bf00      	nop
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1e5a      	subs	r2, r3, #1
 8001d72:	613a      	str	r2, [r7, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d009      	beq.n	8001d8c <HAL_CRCEx_Polynomial_Set+0x54>
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	f003 031f 	and.w	r3, r3, #31
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	fa22 f303 	lsr.w	r3, r2, r3
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_CRCEx_Polynomial_Set+0x36>
  {
  }

  switch (PolyLength)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b18      	cmp	r3, #24
 8001d90:	d846      	bhi.n	8001e20 <HAL_CRCEx_Polynomial_Set+0xe8>
 8001d92:	a201      	add	r2, pc, #4	; (adr r2, 8001d98 <HAL_CRCEx_Polynomial_Set+0x60>)
 8001d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d98:	08001e27 	.word	0x08001e27
 8001d9c:	08001e21 	.word	0x08001e21
 8001da0:	08001e21 	.word	0x08001e21
 8001da4:	08001e21 	.word	0x08001e21
 8001da8:	08001e21 	.word	0x08001e21
 8001dac:	08001e21 	.word	0x08001e21
 8001db0:	08001e21 	.word	0x08001e21
 8001db4:	08001e21 	.word	0x08001e21
 8001db8:	08001e15 	.word	0x08001e15
 8001dbc:	08001e21 	.word	0x08001e21
 8001dc0:	08001e21 	.word	0x08001e21
 8001dc4:	08001e21 	.word	0x08001e21
 8001dc8:	08001e21 	.word	0x08001e21
 8001dcc:	08001e21 	.word	0x08001e21
 8001dd0:	08001e21 	.word	0x08001e21
 8001dd4:	08001e21 	.word	0x08001e21
 8001dd8:	08001e09 	.word	0x08001e09
 8001ddc:	08001e21 	.word	0x08001e21
 8001de0:	08001e21 	.word	0x08001e21
 8001de4:	08001e21 	.word	0x08001e21
 8001de8:	08001e21 	.word	0x08001e21
 8001dec:	08001e21 	.word	0x08001e21
 8001df0:	08001e21 	.word	0x08001e21
 8001df4:	08001e21 	.word	0x08001e21
 8001df8:	08001dfd 	.word	0x08001dfd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d913      	bls.n	8001e2a <HAL_CRCEx_Polynomial_Set+0xf2>
      {
        status =   HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001e06:	e010      	b.n	8001e2a <HAL_CRCEx_Polynomial_Set+0xf2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2b07      	cmp	r3, #7
 8001e0c:	d90f      	bls.n	8001e2e <HAL_CRCEx_Polynomial_Set+0xf6>
      {
        status =   HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001e12:	e00c      	b.n	8001e2e <HAL_CRCEx_Polynomial_Set+0xf6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	2b0f      	cmp	r3, #15
 8001e18:	d90b      	bls.n	8001e32 <HAL_CRCEx_Polynomial_Set+0xfa>
      {
        status =   HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001e1e:	e008      	b.n	8001e32 <HAL_CRCEx_Polynomial_Set+0xfa>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	75fb      	strb	r3, [r7, #23]
      break;
 8001e24:	e006      	b.n	8001e34 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8001e26:	bf00      	nop
 8001e28:	e004      	b.n	8001e34 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8001e2a:	bf00      	nop
 8001e2c:	e002      	b.n	8001e34 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8001e2e:	bf00      	nop
 8001e30:	e000      	b.n	8001e34 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8001e32:	bf00      	nop
  }
  if (status == HAL_OK)
 8001e34:	7dfb      	ldrb	r3, [r7, #23]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10d      	bne.n	8001e56 <HAL_CRCEx_Polynomial_Set+0x11e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f023 0118 	bic.w	r1, r3, #24
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	08006a30 	.word	0x08006a30

08001e64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d004      	beq.n	8001e82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2280      	movs	r2, #128	; 0x80
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00c      	b.n	8001e9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2205      	movs	r2, #5
 8001e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0201 	bic.w	r2, r2, #1
 8001e98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a42      	ldr	r2, [pc, #264]	; (8001fd0 <HAL_GPIO_Init+0x128>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d02b      	beq.n	8001f22 <HAL_GPIO_Init+0x7a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a41      	ldr	r2, [pc, #260]	; (8001fd4 <HAL_GPIO_Init+0x12c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d027      	beq.n	8001f22 <HAL_GPIO_Init+0x7a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a40      	ldr	r2, [pc, #256]	; (8001fd8 <HAL_GPIO_Init+0x130>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d023      	beq.n	8001f22 <HAL_GPIO_Init+0x7a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a3f      	ldr	r2, [pc, #252]	; (8001fdc <HAL_GPIO_Init+0x134>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d01f      	beq.n	8001f22 <HAL_GPIO_Init+0x7a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a3e      	ldr	r2, [pc, #248]	; (8001fe0 <HAL_GPIO_Init+0x138>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d01b      	beq.n	8001f22 <HAL_GPIO_Init+0x7a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a3d      	ldr	r2, [pc, #244]	; (8001fe4 <HAL_GPIO_Init+0x13c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d017      	beq.n	8001f22 <HAL_GPIO_Init+0x7a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a3c      	ldr	r2, [pc, #240]	; (8001fe8 <HAL_GPIO_Init+0x140>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d013      	beq.n	8001f22 <HAL_GPIO_Init+0x7a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a3b      	ldr	r2, [pc, #236]	; (8001fec <HAL_GPIO_Init+0x144>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00f      	beq.n	8001f22 <HAL_GPIO_Init+0x7a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a3a      	ldr	r2, [pc, #232]	; (8001ff0 <HAL_GPIO_Init+0x148>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00b      	beq.n	8001f22 <HAL_GPIO_Init+0x7a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a39      	ldr	r2, [pc, #228]	; (8001ff4 <HAL_GPIO_Init+0x14c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d007      	beq.n	8001f22 <HAL_GPIO_Init+0x7a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a38      	ldr	r2, [pc, #224]	; (8001ff8 <HAL_GPIO_Init+0x150>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_Init+0x7a>
 8001f1a:	21b1      	movs	r1, #177	; 0xb1
 8001f1c:	4837      	ldr	r0, [pc, #220]	; (8001ffc <HAL_GPIO_Init+0x154>)
 8001f1e:	f7fe ff08 	bl	8000d32 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d103      	bne.n	8001f34 <HAL_GPIO_Init+0x8c>
 8001f2c:	21b2      	movs	r1, #178	; 0xb2
 8001f2e:	4833      	ldr	r0, [pc, #204]	; (8001ffc <HAL_GPIO_Init+0x154>)
 8001f30:	f7fe feff 	bl	8000d32 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d035      	beq.n	8001fa8 <HAL_GPIO_Init+0x100>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d031      	beq.n	8001fa8 <HAL_GPIO_Init+0x100>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b11      	cmp	r3, #17
 8001f4a:	d02d      	beq.n	8001fa8 <HAL_GPIO_Init+0x100>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d029      	beq.n	8001fa8 <HAL_GPIO_Init+0x100>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b12      	cmp	r3, #18
 8001f5a:	d025      	beq.n	8001fa8 <HAL_GPIO_Init+0x100>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4a27      	ldr	r2, [pc, #156]	; (8002000 <HAL_GPIO_Init+0x158>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d020      	beq.n	8001fa8 <HAL_GPIO_Init+0x100>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4a26      	ldr	r2, [pc, #152]	; (8002004 <HAL_GPIO_Init+0x15c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d01b      	beq.n	8001fa8 <HAL_GPIO_Init+0x100>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	4a24      	ldr	r2, [pc, #144]	; (8002008 <HAL_GPIO_Init+0x160>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d016      	beq.n	8001fa8 <HAL_GPIO_Init+0x100>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	4a23      	ldr	r2, [pc, #140]	; (800200c <HAL_GPIO_Init+0x164>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d011      	beq.n	8001fa8 <HAL_GPIO_Init+0x100>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4a21      	ldr	r2, [pc, #132]	; (8002010 <HAL_GPIO_Init+0x168>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00c      	beq.n	8001fa8 <HAL_GPIO_Init+0x100>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	4a20      	ldr	r2, [pc, #128]	; (8002014 <HAL_GPIO_Init+0x16c>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d007      	beq.n	8001fa8 <HAL_GPIO_Init+0x100>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d003      	beq.n	8001fa8 <HAL_GPIO_Init+0x100>
 8001fa0:	21b3      	movs	r1, #179	; 0xb3
 8001fa2:	4816      	ldr	r0, [pc, #88]	; (8001ffc <HAL_GPIO_Init+0x154>)
 8001fa4:	f7fe fec5 	bl	8000d32 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00b      	beq.n	8001fc8 <HAL_GPIO_Init+0x120>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d007      	beq.n	8001fc8 <HAL_GPIO_Init+0x120>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x120>
 8001fc0:	21b4      	movs	r1, #180	; 0xb4
 8001fc2:	480e      	ldr	r0, [pc, #56]	; (8001ffc <HAL_GPIO_Init+0x154>)
 8001fc4:	f7fe feb5 	bl	8000d32 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	e2d6      	b.n	800257c <HAL_GPIO_Init+0x6d4>
 8001fce:	bf00      	nop
 8001fd0:	40020000 	.word	0x40020000
 8001fd4:	40020400 	.word	0x40020400
 8001fd8:	40020800 	.word	0x40020800
 8001fdc:	40020c00 	.word	0x40020c00
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40021400 	.word	0x40021400
 8001fe8:	40021800 	.word	0x40021800
 8001fec:	40021c00 	.word	0x40021c00
 8001ff0:	40022000 	.word	0x40022000
 8001ff4:	40022400 	.word	0x40022400
 8001ff8:	40022800 	.word	0x40022800
 8001ffc:	08006a6c 	.word	0x08006a6c
 8002000:	10110000 	.word	0x10110000
 8002004:	10210000 	.word	0x10210000
 8002008:	10310000 	.word	0x10310000
 800200c:	10120000 	.word	0x10120000
 8002010:	10220000 	.word	0x10220000
 8002014:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002018:	2201      	movs	r2, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	429a      	cmp	r2, r3
 8002032:	f040 82a0 	bne.w	8002576 <HAL_GPIO_Init+0x6ce>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d00b      	beq.n	8002056 <HAL_GPIO_Init+0x1ae>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d007      	beq.n	8002056 <HAL_GPIO_Init+0x1ae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800204a:	2b11      	cmp	r3, #17
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x1ae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b12      	cmp	r3, #18
 8002054:	d144      	bne.n	80020e0 <HAL_GPIO_Init+0x238>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00f      	beq.n	800207e <HAL_GPIO_Init+0x1d6>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d00b      	beq.n	800207e <HAL_GPIO_Init+0x1d6>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d007      	beq.n	800207e <HAL_GPIO_Init+0x1d6>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	2b03      	cmp	r3, #3
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x1d6>
 8002076:	21c6      	movs	r1, #198	; 0xc6
 8002078:	482a      	ldr	r0, [pc, #168]	; (8002124 <HAL_GPIO_Init+0x27c>)
 800207a:	f7fe fe5a 	bl	8000d32 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	2203      	movs	r2, #3
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b4:	2201      	movs	r2, #1
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 0201 	and.w	r2, r3, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b02      	cmp	r3, #2
 8002116:	d007      	beq.n	8002128 <HAL_GPIO_Init+0x280>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b12      	cmp	r3, #18
 800211e:	f040 814b 	bne.w	80023b8 <HAL_GPIO_Init+0x510>
 8002122:	e001      	b.n	8002128 <HAL_GPIO_Init+0x280>
 8002124:	08006a6c 	.word	0x08006a6c
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 811f 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b01      	cmp	r3, #1
 8002138:	f000 811a 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 8115 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 8110 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 810b 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	2b01      	cmp	r3, #1
 8002160:	f000 8106 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	2b02      	cmp	r3, #2
 800216a:	f000 8101 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	2b02      	cmp	r3, #2
 8002174:	f000 80fc 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	2b02      	cmp	r3, #2
 800217e:	f000 80f7 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	2b03      	cmp	r3, #3
 8002188:	f000 80f2 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	2b03      	cmp	r3, #3
 8002192:	f000 80ed 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b03      	cmp	r3, #3
 800219c:	f000 80e8 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	f000 80e3 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	f000 80de 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	f000 80d9 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	f000 80d4 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	f000 80cf 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	f000 80ca 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	f000 80c5 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	f000 80c0 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	2b05      	cmp	r3, #5
 80021f6:	f000 80bb 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	2b05      	cmp	r3, #5
 8002200:	f000 80b6 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	2b05      	cmp	r3, #5
 800220a:	f000 80b1 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b05      	cmp	r3, #5
 8002214:	f000 80ac 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	2b05      	cmp	r3, #5
 800221e:	f000 80a7 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	2b05      	cmp	r3, #5
 8002228:	f000 80a2 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	2b06      	cmp	r3, #6
 8002232:	f000 809d 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	2b06      	cmp	r3, #6
 800223c:	f000 8098 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	2b07      	cmp	r3, #7
 8002246:	f000 8093 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	2b07      	cmp	r3, #7
 8002250:	f000 808e 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	2b07      	cmp	r3, #7
 800225a:	f000 8089 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2b07      	cmp	r3, #7
 8002264:	f000 8084 	beq.w	8002370 <HAL_GPIO_Init+0x4c8>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	2b07      	cmp	r3, #7
 800226e:	d07f      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	2b07      	cmp	r3, #7
 8002276:	d07b      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	2b07      	cmp	r3, #7
 800227e:	d077      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	2b08      	cmp	r3, #8
 8002286:	d073      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	2b08      	cmp	r3, #8
 800228e:	d06f      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	2b08      	cmp	r3, #8
 8002296:	d06b      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	2b08      	cmp	r3, #8
 800229e:	d067      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d063      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d05f      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d05b      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	2b09      	cmp	r3, #9
 80022be:	d057      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	2b09      	cmp	r3, #9
 80022c6:	d053      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	2b09      	cmp	r3, #9
 80022ce:	d04f      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	2b09      	cmp	r3, #9
 80022d6:	d04b      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	2b09      	cmp	r3, #9
 80022de:	d047      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	2b09      	cmp	r3, #9
 80022e6:	d043      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	2b09      	cmp	r3, #9
 80022ee:	d03f      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	2b0a      	cmp	r3, #10
 80022f6:	d03b      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	2b0a      	cmp	r3, #10
 80022fe:	d037      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	2b0a      	cmp	r3, #10
 8002306:	d033      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	2b0a      	cmp	r3, #10
 800230e:	d02f      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	2b0b      	cmp	r3, #11
 8002316:	d02b      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	2b0a      	cmp	r3, #10
 800231e:	d027      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	2b0b      	cmp	r3, #11
 8002326:	d023      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2b0b      	cmp	r3, #11
 800232e:	d01f      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2b0c      	cmp	r3, #12
 8002336:	d01b      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	2b0c      	cmp	r3, #12
 800233e:	d017      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	2b0c      	cmp	r3, #12
 8002346:	d013      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b0f      	cmp	r3, #15
 800234e:	d00f      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	2b0d      	cmp	r3, #13
 8002356:	d00b      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	2b0e      	cmp	r3, #14
 800235e:	d007      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	2b0d      	cmp	r3, #13
 8002366:	d003      	beq.n	8002370 <HAL_GPIO_Init+0x4c8>
 8002368:	21de      	movs	r1, #222	; 0xde
 800236a:	4888      	ldr	r0, [pc, #544]	; (800258c <HAL_GPIO_Init+0x6e4>)
 800236c:	f7fe fce1 	bl	8000d32 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	08da      	lsrs	r2, r3, #3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3208      	adds	r2, #8
 8002378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	220f      	movs	r2, #15
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	08da      	lsrs	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3208      	adds	r2, #8
 80023b2:	69b9      	ldr	r1, [r7, #24]
 80023b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0203 	and.w	r2, r3, #3
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 80be 	beq.w	8002576 <HAL_GPIO_Init+0x6ce>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fa:	4b65      	ldr	r3, [pc, #404]	; (8002590 <HAL_GPIO_Init+0x6e8>)
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	4a64      	ldr	r2, [pc, #400]	; (8002590 <HAL_GPIO_Init+0x6e8>)
 8002400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002404:	6453      	str	r3, [r2, #68]	; 0x44
 8002406:	4b62      	ldr	r3, [pc, #392]	; (8002590 <HAL_GPIO_Init+0x6e8>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002412:	4a60      	ldr	r2, [pc, #384]	; (8002594 <HAL_GPIO_Init+0x6ec>)
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	089b      	lsrs	r3, r3, #2
 8002418:	3302      	adds	r3, #2
 800241a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	220f      	movs	r2, #15
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a57      	ldr	r2, [pc, #348]	; (8002598 <HAL_GPIO_Init+0x6f0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d037      	beq.n	80024ae <HAL_GPIO_Init+0x606>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a56      	ldr	r2, [pc, #344]	; (800259c <HAL_GPIO_Init+0x6f4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d031      	beq.n	80024aa <HAL_GPIO_Init+0x602>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a55      	ldr	r2, [pc, #340]	; (80025a0 <HAL_GPIO_Init+0x6f8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d02b      	beq.n	80024a6 <HAL_GPIO_Init+0x5fe>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a54      	ldr	r2, [pc, #336]	; (80025a4 <HAL_GPIO_Init+0x6fc>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d025      	beq.n	80024a2 <HAL_GPIO_Init+0x5fa>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a53      	ldr	r2, [pc, #332]	; (80025a8 <HAL_GPIO_Init+0x700>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d01f      	beq.n	800249e <HAL_GPIO_Init+0x5f6>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a52      	ldr	r2, [pc, #328]	; (80025ac <HAL_GPIO_Init+0x704>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d019      	beq.n	800249a <HAL_GPIO_Init+0x5f2>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a51      	ldr	r2, [pc, #324]	; (80025b0 <HAL_GPIO_Init+0x708>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d013      	beq.n	8002496 <HAL_GPIO_Init+0x5ee>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a50      	ldr	r2, [pc, #320]	; (80025b4 <HAL_GPIO_Init+0x70c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00d      	beq.n	8002492 <HAL_GPIO_Init+0x5ea>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4f      	ldr	r2, [pc, #316]	; (80025b8 <HAL_GPIO_Init+0x710>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d007      	beq.n	800248e <HAL_GPIO_Init+0x5e6>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a4e      	ldr	r2, [pc, #312]	; (80025bc <HAL_GPIO_Init+0x714>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d101      	bne.n	800248a <HAL_GPIO_Init+0x5e2>
 8002486:	2309      	movs	r3, #9
 8002488:	e012      	b.n	80024b0 <HAL_GPIO_Init+0x608>
 800248a:	230a      	movs	r3, #10
 800248c:	e010      	b.n	80024b0 <HAL_GPIO_Init+0x608>
 800248e:	2308      	movs	r3, #8
 8002490:	e00e      	b.n	80024b0 <HAL_GPIO_Init+0x608>
 8002492:	2307      	movs	r3, #7
 8002494:	e00c      	b.n	80024b0 <HAL_GPIO_Init+0x608>
 8002496:	2306      	movs	r3, #6
 8002498:	e00a      	b.n	80024b0 <HAL_GPIO_Init+0x608>
 800249a:	2305      	movs	r3, #5
 800249c:	e008      	b.n	80024b0 <HAL_GPIO_Init+0x608>
 800249e:	2304      	movs	r3, #4
 80024a0:	e006      	b.n	80024b0 <HAL_GPIO_Init+0x608>
 80024a2:	2303      	movs	r3, #3
 80024a4:	e004      	b.n	80024b0 <HAL_GPIO_Init+0x608>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e002      	b.n	80024b0 <HAL_GPIO_Init+0x608>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <HAL_GPIO_Init+0x608>
 80024ae:	2300      	movs	r3, #0
 80024b0:	69fa      	ldr	r2, [r7, #28]
 80024b2:	f002 0203 	and.w	r2, r2, #3
 80024b6:	0092      	lsls	r2, r2, #2
 80024b8:	4093      	lsls	r3, r2
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80024c0:	4934      	ldr	r1, [pc, #208]	; (8002594 <HAL_GPIO_Init+0x6ec>)
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	089b      	lsrs	r3, r3, #2
 80024c6:	3302      	adds	r3, #2
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ce:	4b3c      	ldr	r3, [pc, #240]	; (80025c0 <HAL_GPIO_Init+0x718>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4013      	ands	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_Init+0x64a>
        {
          temp |= iocurrent;
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024f2:	4a33      	ldr	r2, [pc, #204]	; (80025c0 <HAL_GPIO_Init+0x718>)
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024f8:	4b31      	ldr	r3, [pc, #196]	; (80025c0 <HAL_GPIO_Init+0x718>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_GPIO_Init+0x674>
        {
          temp |= iocurrent;
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800251c:	4a28      	ldr	r2, [pc, #160]	; (80025c0 <HAL_GPIO_Init+0x718>)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002522:	4b27      	ldr	r3, [pc, #156]	; (80025c0 <HAL_GPIO_Init+0x718>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	43db      	mvns	r3, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_Init+0x69e>
        {
          temp |= iocurrent;
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002546:	4a1e      	ldr	r2, [pc, #120]	; (80025c0 <HAL_GPIO_Init+0x718>)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800254c:	4b1c      	ldr	r3, [pc, #112]	; (80025c0 <HAL_GPIO_Init+0x718>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_GPIO_Init+0x6c8>
        {
          temp |= iocurrent;
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002570:	4a13      	ldr	r2, [pc, #76]	; (80025c0 <HAL_GPIO_Init+0x718>)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3301      	adds	r3, #1
 800257a:	61fb      	str	r3, [r7, #28]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	2b0f      	cmp	r3, #15
 8002580:	f67f ad4a 	bls.w	8002018 <HAL_GPIO_Init+0x170>
      }
    }
  }
}
 8002584:	bf00      	nop
 8002586:	3720      	adds	r7, #32
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	08006a6c 	.word	0x08006a6c
 8002590:	40023800 	.word	0x40023800
 8002594:	40013800 	.word	0x40013800
 8002598:	40020000 	.word	0x40020000
 800259c:	40020400 	.word	0x40020400
 80025a0:	40020800 	.word	0x40020800
 80025a4:	40020c00 	.word	0x40020c00
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40021400 	.word	0x40021400
 80025b0:	40021800 	.word	0x40021800
 80025b4:	40021c00 	.word	0x40021c00
 80025b8:	40022000 	.word	0x40022000
 80025bc:	40022400 	.word	0x40022400
 80025c0:	40013c00 	.word	0x40013c00

080025c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80025d0:	887b      	ldrh	r3, [r7, #2]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d104      	bne.n	80025e0 <HAL_GPIO_ReadPin+0x1c>
 80025d6:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 80025da:	4809      	ldr	r0, [pc, #36]	; (8002600 <HAL_GPIO_ReadPin+0x3c>)
 80025dc:	f7fe fba9 	bl	8000d32 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	887b      	ldrh	r3, [r7, #2]
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d002      	beq.n	80025f2 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
 80025f0:	e001      	b.n	80025f6 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025f2:	2300      	movs	r3, #0
 80025f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	08006a6c 	.word	0x08006a6c

08002604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	807b      	strh	r3, [r7, #2]
 8002610:	4613      	mov	r3, r2
 8002612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002614:	887b      	ldrh	r3, [r7, #2]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d104      	bne.n	8002624 <HAL_GPIO_WritePin+0x20>
 800261a:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800261e:	480e      	ldr	r0, [pc, #56]	; (8002658 <HAL_GPIO_WritePin+0x54>)
 8002620:	f7fe fb87 	bl	8000d32 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002624:	787b      	ldrb	r3, [r7, #1]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d007      	beq.n	800263a <HAL_GPIO_WritePin+0x36>
 800262a:	787b      	ldrb	r3, [r7, #1]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d004      	beq.n	800263a <HAL_GPIO_WritePin+0x36>
 8002630:	f240 119b 	movw	r1, #411	; 0x19b
 8002634:	4808      	ldr	r0, [pc, #32]	; (8002658 <HAL_GPIO_WritePin+0x54>)
 8002636:	f7fe fb7c 	bl	8000d32 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800263a:	787b      	ldrb	r3, [r7, #1]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002640:	887a      	ldrh	r2, [r7, #2]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002646:	e003      	b.n	8002650 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002648:	887b      	ldrh	r3, [r7, #2]
 800264a:	041a      	lsls	r2, r3, #16
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	619a      	str	r2, [r3, #24]
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	08006a6c 	.word	0x08006a6c

0800265c <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002668:	887b      	ldrh	r3, [r7, #2]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d104      	bne.n	8002678 <HAL_GPIO_TogglePin+0x1c>
 800266e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8002672:	480a      	ldr	r0, [pc, #40]	; (800269c <HAL_GPIO_TogglePin+0x40>)
 8002674:	f7fe fb5d 	bl	8000d32 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	695a      	ldr	r2, [r3, #20]
 800267c:	887b      	ldrh	r3, [r7, #2]
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d004      	beq.n	800268e <HAL_GPIO_TogglePin+0x32>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002684:	887b      	ldrh	r3, [r7, #2]
 8002686:	041a      	lsls	r2, r3, #16
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800268c:	e002      	b.n	8002694 <HAL_GPIO_TogglePin+0x38>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800268e:	887a      	ldrh	r2, [r7, #2]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	619a      	str	r2, [r3, #24]
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	08006a6c 	.word	0x08006a6c

080026a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026aa:	4b08      	ldr	r3, [pc, #32]	; (80026cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026ac:	695a      	ldr	r2, [r3, #20]
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d006      	beq.n	80026c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026b6:	4a05      	ldr	r2, [pc, #20]	; (80026cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026b8:	88fb      	ldrh	r3, [r7, #6]
 80026ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f806 	bl	80026d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40013c00 	.word	0x40013c00

080026d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
	...

080026e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80026f2:	4b23      	ldr	r3, [pc, #140]	; (8002780 <HAL_PWREx_EnableOverDrive+0x98>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	4a22      	ldr	r2, [pc, #136]	; (8002780 <HAL_PWREx_EnableOverDrive+0x98>)
 80026f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fc:	6413      	str	r3, [r2, #64]	; 0x40
 80026fe:	4b20      	ldr	r3, [pc, #128]	; (8002780 <HAL_PWREx_EnableOverDrive+0x98>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800270a:	4b1e      	ldr	r3, [pc, #120]	; (8002784 <HAL_PWREx_EnableOverDrive+0x9c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a1d      	ldr	r2, [pc, #116]	; (8002784 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002714:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002716:	f7ff f8e7 	bl	80018e8 <HAL_GetTick>
 800271a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800271c:	e009      	b.n	8002732 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800271e:	f7ff f8e3 	bl	80018e8 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800272c:	d901      	bls.n	8002732 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e022      	b.n	8002778 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002732:	4b14      	ldr	r3, [pc, #80]	; (8002784 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800273e:	d1ee      	bne.n	800271e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002740:	4b10      	ldr	r3, [pc, #64]	; (8002784 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a0f      	ldr	r2, [pc, #60]	; (8002784 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800274a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800274c:	f7ff f8cc 	bl	80018e8 <HAL_GetTick>
 8002750:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002752:	e009      	b.n	8002768 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002754:	f7ff f8c8 	bl	80018e8 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002762:	d901      	bls.n	8002768 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e007      	b.n	8002778 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_PWREx_EnableOverDrive+0x9c>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002770:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002774:	d1ee      	bne.n	8002754 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40023800 	.word	0x40023800
 8002784:	40007000 	.word	0x40007000

08002788 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002790:	2300      	movs	r3, #0
 8002792:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e35c      	b.n	8002e58 <HAL_RCC_OscConfig+0x6d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b0f      	cmp	r3, #15
 80027a4:	d904      	bls.n	80027b0 <HAL_RCC_OscConfig+0x28>
 80027a6:	f240 1165 	movw	r1, #357	; 0x165
 80027aa:	4892      	ldr	r0, [pc, #584]	; (80029f4 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	f7fe fac1 	bl	8000d32 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 809a 	beq.w	80028f2 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00e      	beq.n	80027e4 <HAL_RCC_OscConfig+0x5c>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ce:	d009      	beq.n	80027e4 <HAL_RCC_OscConfig+0x5c>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027d8:	d004      	beq.n	80027e4 <HAL_RCC_OscConfig+0x5c>
 80027da:	f240 116b 	movw	r1, #363	; 0x16b
 80027de:	4885      	ldr	r0, [pc, #532]	; (80029f4 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	f7fe faa7 	bl	8000d32 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027e4:	4b84      	ldr	r3, [pc, #528]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 030c 	and.w	r3, r3, #12
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d00c      	beq.n	800280a <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027f0:	4b81      	ldr	r3, [pc, #516]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 030c 	and.w	r3, r3, #12
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d112      	bne.n	8002822 <HAL_RCC_OscConfig+0x9a>
 80027fc:	4b7e      	ldr	r3, [pc, #504]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002808:	d10b      	bne.n	8002822 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280a:	4b7b      	ldr	r3, [pc, #492]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d06c      	beq.n	80028f0 <HAL_RCC_OscConfig+0x168>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d168      	bne.n	80028f0 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e31a      	b.n	8002e58 <HAL_RCC_OscConfig+0x6d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800282a:	d106      	bne.n	800283a <HAL_RCC_OscConfig+0xb2>
 800282c:	4b72      	ldr	r3, [pc, #456]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a71      	ldr	r2, [pc, #452]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	e02e      	b.n	8002898 <HAL_RCC_OscConfig+0x110>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10c      	bne.n	800285c <HAL_RCC_OscConfig+0xd4>
 8002842:	4b6d      	ldr	r3, [pc, #436]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a6c      	ldr	r2, [pc, #432]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	4b6a      	ldr	r3, [pc, #424]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a69      	ldr	r2, [pc, #420]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002854:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	e01d      	b.n	8002898 <HAL_RCC_OscConfig+0x110>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002864:	d10c      	bne.n	8002880 <HAL_RCC_OscConfig+0xf8>
 8002866:	4b64      	ldr	r3, [pc, #400]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a63      	ldr	r2, [pc, #396]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 800286c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	4b61      	ldr	r3, [pc, #388]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a60      	ldr	r2, [pc, #384]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	e00b      	b.n	8002898 <HAL_RCC_OscConfig+0x110>
 8002880:	4b5d      	ldr	r3, [pc, #372]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a5c      	ldr	r2, [pc, #368]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800288a:	6013      	str	r3, [r2, #0]
 800288c:	4b5a      	ldr	r3, [pc, #360]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a59      	ldr	r2, [pc, #356]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002896:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d013      	beq.n	80028c8 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7ff f822 	bl	80018e8 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a8:	f7ff f81e 	bl	80018e8 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b64      	cmp	r3, #100	; 0x64
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e2ce      	b.n	8002e58 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ba:	4b4f      	ldr	r3, [pc, #316]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0x120>
 80028c6:	e014      	b.n	80028f2 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c8:	f7ff f80e 	bl	80018e8 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d0:	f7ff f80a 	bl	80018e8 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b64      	cmp	r3, #100	; 0x64
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e2ba      	b.n	8002e58 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e2:	4b45      	ldr	r3, [pc, #276]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f0      	bne.n	80028d0 <HAL_RCC_OscConfig+0x148>
 80028ee:	e000      	b.n	80028f2 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 8084 	beq.w	8002a08 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d008      	beq.n	800291a <HAL_RCC_OscConfig+0x192>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d004      	beq.n	800291a <HAL_RCC_OscConfig+0x192>
 8002910:	f240 119d 	movw	r1, #413	; 0x19d
 8002914:	4837      	ldr	r0, [pc, #220]	; (80029f4 <HAL_RCC_OscConfig+0x26c>)
 8002916:	f7fe fa0c 	bl	8000d32 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2b1f      	cmp	r3, #31
 8002920:	d904      	bls.n	800292c <HAL_RCC_OscConfig+0x1a4>
 8002922:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8002926:	4833      	ldr	r0, [pc, #204]	; (80029f4 <HAL_RCC_OscConfig+0x26c>)
 8002928:	f7fe fa03 	bl	8000d32 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800292c:	4b32      	ldr	r3, [pc, #200]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 030c 	and.w	r3, r3, #12
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00b      	beq.n	8002950 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002938:	4b2f      	ldr	r3, [pc, #188]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 030c 	and.w	r3, r3, #12
 8002940:	2b08      	cmp	r3, #8
 8002942:	d11c      	bne.n	800297e <HAL_RCC_OscConfig+0x1f6>
 8002944:	4b2c      	ldr	r3, [pc, #176]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d116      	bne.n	800297e <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002950:	4b29      	ldr	r3, [pc, #164]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_OscConfig+0x1e0>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d001      	beq.n	8002968 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e277      	b.n	8002e58 <HAL_RCC_OscConfig+0x6d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002968:	4b23      	ldr	r3, [pc, #140]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4920      	ldr	r1, [pc, #128]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002978:	4313      	orrs	r3, r2
 800297a:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297c:	e044      	b.n	8002a08 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d023      	beq.n	80029ce <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002986:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1b      	ldr	r2, [pc, #108]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002992:	f7fe ffa9 	bl	80018e8 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800299a:	f7fe ffa5 	bl	80018e8 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e255      	b.n	8002e58 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ac:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f0      	beq.n	800299a <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b8:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	490c      	ldr	r1, [pc, #48]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	600b      	str	r3, [r1, #0]
 80029cc:	e01c      	b.n	8002a08 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a09      	ldr	r2, [pc, #36]	; (80029f8 <HAL_RCC_OscConfig+0x270>)
 80029d4:	f023 0301 	bic.w	r3, r3, #1
 80029d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029da:	f7fe ff85 	bl	80018e8 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e0:	e00c      	b.n	80029fc <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e2:	f7fe ff81 	bl	80018e8 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d905      	bls.n	80029fc <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e231      	b.n	8002e58 <HAL_RCC_OscConfig+0x6d0>
 80029f4:	08006aa8 	.word	0x08006aa8
 80029f8:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fc:	4b7e      	ldr	r3, [pc, #504]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1ec      	bne.n	80029e2 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d043      	beq.n	8002a9c <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_RCC_OscConfig+0x2a6>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d004      	beq.n	8002a2e <HAL_RCC_OscConfig+0x2a6>
 8002a24:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8002a28:	4874      	ldr	r0, [pc, #464]	; (8002bfc <HAL_RCC_OscConfig+0x474>)
 8002a2a:	f7fe f982 	bl	8000d32 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d019      	beq.n	8002a6a <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a36:	4b70      	ldr	r3, [pc, #448]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3a:	4a6f      	ldr	r2, [pc, #444]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a42:	f7fe ff51 	bl	80018e8 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a4a:	f7fe ff4d 	bl	80018e8 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e1fd      	b.n	8002e58 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5c:	4b66      	ldr	r3, [pc, #408]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x2c2>
 8002a68:	e018      	b.n	8002a9c <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a6a:	4b63      	ldr	r3, [pc, #396]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a6e:	4a62      	ldr	r2, [pc, #392]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002a70:	f023 0301 	bic.w	r3, r3, #1
 8002a74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a76:	f7fe ff37 	bl	80018e8 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a7e:	f7fe ff33 	bl	80018e8 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e1e3      	b.n	8002e58 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a90:	4b59      	ldr	r3, [pc, #356]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f0      	bne.n	8002a7e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80bc 	beq.w	8002c22 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00c      	beq.n	8002acc <HAL_RCC_OscConfig+0x344>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d008      	beq.n	8002acc <HAL_RCC_OscConfig+0x344>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b05      	cmp	r3, #5
 8002ac0:	d004      	beq.n	8002acc <HAL_RCC_OscConfig+0x344>
 8002ac2:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002ac6:	484d      	ldr	r0, [pc, #308]	; (8002bfc <HAL_RCC_OscConfig+0x474>)
 8002ac8:	f7fe f933 	bl	8000d32 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002acc:	4b4a      	ldr	r3, [pc, #296]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10d      	bne.n	8002af4 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad8:	4b47      	ldr	r3, [pc, #284]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	4a46      	ldr	r2, [pc, #280]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae4:	4b44      	ldr	r3, [pc, #272]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af0:	2301      	movs	r3, #1
 8002af2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002af4:	4b42      	ldr	r3, [pc, #264]	; (8002c00 <HAL_RCC_OscConfig+0x478>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d118      	bne.n	8002b32 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b00:	4b3f      	ldr	r3, [pc, #252]	; (8002c00 <HAL_RCC_OscConfig+0x478>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a3e      	ldr	r2, [pc, #248]	; (8002c00 <HAL_RCC_OscConfig+0x478>)
 8002b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0c:	f7fe feec 	bl	80018e8 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b14:	f7fe fee8 	bl	80018e8 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e198      	b.n	8002e58 <HAL_RCC_OscConfig+0x6d0>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b26:	4b36      	ldr	r3, [pc, #216]	; (8002c00 <HAL_RCC_OscConfig+0x478>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d106      	bne.n	8002b48 <HAL_RCC_OscConfig+0x3c0>
 8002b3a:	4b2f      	ldr	r3, [pc, #188]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	4a2e      	ldr	r2, [pc, #184]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	6713      	str	r3, [r2, #112]	; 0x70
 8002b46:	e02d      	b.n	8002ba4 <HAL_RCC_OscConfig+0x41c>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10c      	bne.n	8002b6a <HAL_RCC_OscConfig+0x3e2>
 8002b50:	4b29      	ldr	r3, [pc, #164]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	4a28      	ldr	r2, [pc, #160]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002b56:	f023 0301 	bic.w	r3, r3, #1
 8002b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5c:	4b26      	ldr	r3, [pc, #152]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b60:	4a25      	ldr	r2, [pc, #148]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002b62:	f023 0304 	bic.w	r3, r3, #4
 8002b66:	6713      	str	r3, [r2, #112]	; 0x70
 8002b68:	e01c      	b.n	8002ba4 <HAL_RCC_OscConfig+0x41c>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b05      	cmp	r3, #5
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCC_OscConfig+0x404>
 8002b72:	4b21      	ldr	r3, [pc, #132]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b76:	4a20      	ldr	r2, [pc, #128]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002b78:	f043 0304 	orr.w	r3, r3, #4
 8002b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b7e:	4b1e      	ldr	r3, [pc, #120]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b82:	4a1d      	ldr	r2, [pc, #116]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6713      	str	r3, [r2, #112]	; 0x70
 8002b8a:	e00b      	b.n	8002ba4 <HAL_RCC_OscConfig+0x41c>
 8002b8c:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b90:	4a19      	ldr	r2, [pc, #100]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002b92:	f023 0301 	bic.w	r3, r3, #1
 8002b96:	6713      	str	r3, [r2, #112]	; 0x70
 8002b98:	4b17      	ldr	r3, [pc, #92]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9c:	4a16      	ldr	r2, [pc, #88]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002b9e:	f023 0304 	bic.w	r3, r3, #4
 8002ba2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d015      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bac:	f7fe fe9c 	bl	80018e8 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb2:	e00a      	b.n	8002bca <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb4:	f7fe fe98 	bl	80018e8 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e146      	b.n	8002e58 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bca:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0ee      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x42c>
 8002bd6:	e01b      	b.n	8002c10 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd8:	f7fe fe86 	bl	80018e8 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bde:	e011      	b.n	8002c04 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be0:	f7fe fe82 	bl	80018e8 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d908      	bls.n	8002c04 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e130      	b.n	8002e58 <HAL_RCC_OscConfig+0x6d0>
 8002bf6:	bf00      	nop
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	08006aa8 	.word	0x08006aa8
 8002c00:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c04:	4b96      	ldr	r3, [pc, #600]	; (8002e60 <HAL_RCC_OscConfig+0x6d8>)
 8002c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1e7      	bne.n	8002be0 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c10:	7dfb      	ldrb	r3, [r7, #23]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d105      	bne.n	8002c22 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c16:	4b92      	ldr	r3, [pc, #584]	; (8002e60 <HAL_RCC_OscConfig+0x6d8>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	4a91      	ldr	r2, [pc, #580]	; (8002e60 <HAL_RCC_OscConfig+0x6d8>)
 8002c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00c      	beq.n	8002c44 <HAL_RCC_OscConfig+0x4bc>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d008      	beq.n	8002c44 <HAL_RCC_OscConfig+0x4bc>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d004      	beq.n	8002c44 <HAL_RCC_OscConfig+0x4bc>
 8002c3a:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8002c3e:	4889      	ldr	r0, [pc, #548]	; (8002e64 <HAL_RCC_OscConfig+0x6dc>)
 8002c40:	f7fe f877 	bl	8000d32 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 8104 	beq.w	8002e56 <HAL_RCC_OscConfig+0x6ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c4e:	4b84      	ldr	r3, [pc, #528]	; (8002e60 <HAL_RCC_OscConfig+0x6d8>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	f000 80c3 	beq.w	8002de2 <HAL_RCC_OscConfig+0x65a>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	f040 80a4 	bne.w	8002dae <HAL_RCC_OscConfig+0x626>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d009      	beq.n	8002c82 <HAL_RCC_OscConfig+0x4fa>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c76:	d004      	beq.n	8002c82 <HAL_RCC_OscConfig+0x4fa>
 8002c78:	f240 2155 	movw	r1, #597	; 0x255
 8002c7c:	4879      	ldr	r0, [pc, #484]	; (8002e64 <HAL_RCC_OscConfig+0x6dc>)
 8002c7e:	f7fe f858 	bl	8000d32 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d903      	bls.n	8002c92 <HAL_RCC_OscConfig+0x50a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	2b3f      	cmp	r3, #63	; 0x3f
 8002c90:	d904      	bls.n	8002c9c <HAL_RCC_OscConfig+0x514>
 8002c92:	f240 2156 	movw	r1, #598	; 0x256
 8002c96:	4873      	ldr	r0, [pc, #460]	; (8002e64 <HAL_RCC_OscConfig+0x6dc>)
 8002c98:	f7fe f84b 	bl	8000d32 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	2b31      	cmp	r3, #49	; 0x31
 8002ca2:	d904      	bls.n	8002cae <HAL_RCC_OscConfig+0x526>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002cac:	d904      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x530>
 8002cae:	f240 2157 	movw	r1, #599	; 0x257
 8002cb2:	486c      	ldr	r0, [pc, #432]	; (8002e64 <HAL_RCC_OscConfig+0x6dc>)
 8002cb4:	f7fe f83d 	bl	8000d32 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d010      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x55a>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d00c      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x55a>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	2b06      	cmp	r3, #6
 8002cce:	d008      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x55a>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d004      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x55a>
 8002cd8:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002cdc:	4861      	ldr	r0, [pc, #388]	; (8002e64 <HAL_RCC_OscConfig+0x6dc>)
 8002cde:	f7fe f828 	bl	8000d32 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d903      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x56a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	2b0f      	cmp	r3, #15
 8002cf0:	d904      	bls.n	8002cfc <HAL_RCC_OscConfig+0x574>
 8002cf2:	f240 2159 	movw	r1, #601	; 0x259
 8002cf6:	485b      	ldr	r0, [pc, #364]	; (8002e64 <HAL_RCC_OscConfig+0x6dc>)
 8002cf8:	f7fe f81b 	bl	8000d32 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d903      	bls.n	8002d0c <HAL_RCC_OscConfig+0x584>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	2b07      	cmp	r3, #7
 8002d0a:	d904      	bls.n	8002d16 <HAL_RCC_OscConfig+0x58e>
 8002d0c:	f240 215b 	movw	r1, #603	; 0x25b
 8002d10:	4854      	ldr	r0, [pc, #336]	; (8002e64 <HAL_RCC_OscConfig+0x6dc>)
 8002d12:	f7fe f80e 	bl	8000d32 <assert_failed>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d16:	4b52      	ldr	r3, [pc, #328]	; (8002e60 <HAL_RCC_OscConfig+0x6d8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a51      	ldr	r2, [pc, #324]	; (8002e60 <HAL_RCC_OscConfig+0x6d8>)
 8002d1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d22:	f7fe fde1 	bl	80018e8 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x5b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2a:	f7fe fddd 	bl	80018e8 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x5b4>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e08d      	b.n	8002e58 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3c:	4b48      	ldr	r3, [pc, #288]	; (8002e60 <HAL_RCC_OscConfig+0x6d8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1f0      	bne.n	8002d2a <HAL_RCC_OscConfig+0x5a2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69da      	ldr	r2, [r3, #28]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	019b      	lsls	r3, r3, #6
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5e:	085b      	lsrs	r3, r3, #1
 8002d60:	3b01      	subs	r3, #1
 8002d62:	041b      	lsls	r3, r3, #16
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	061b      	lsls	r3, r3, #24
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	071b      	lsls	r3, r3, #28
 8002d74:	493a      	ldr	r1, [pc, #232]	; (8002e60 <HAL_RCC_OscConfig+0x6d8>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d7a:	4b39      	ldr	r3, [pc, #228]	; (8002e60 <HAL_RCC_OscConfig+0x6d8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a38      	ldr	r2, [pc, #224]	; (8002e60 <HAL_RCC_OscConfig+0x6d8>)
 8002d80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d86:	f7fe fdaf 	bl	80018e8 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x618>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8e:	f7fe fdab 	bl	80018e8 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e05b      	b.n	8002e58 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da0:	4b2f      	ldr	r3, [pc, #188]	; (8002e60 <HAL_RCC_OscConfig+0x6d8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x606>
 8002dac:	e053      	b.n	8002e56 <HAL_RCC_OscConfig+0x6ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dae:	4b2c      	ldr	r3, [pc, #176]	; (8002e60 <HAL_RCC_OscConfig+0x6d8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a2b      	ldr	r2, [pc, #172]	; (8002e60 <HAL_RCC_OscConfig+0x6d8>)
 8002db4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dba:	f7fe fd95 	bl	80018e8 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x64c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc2:	f7fe fd91 	bl	80018e8 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e041      	b.n	8002e58 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd4:	4b22      	ldr	r3, [pc, #136]	; (8002e60 <HAL_RCC_OscConfig+0x6d8>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1f0      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x63a>
 8002de0:	e039      	b.n	8002e56 <HAL_RCC_OscConfig+0x6ce>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002de2:	4b1f      	ldr	r3, [pc, #124]	; (8002e60 <HAL_RCC_OscConfig+0x6d8>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d030      	beq.n	8002e52 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d129      	bne.n	8002e52 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d122      	bne.n	8002e52 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e12:	4013      	ands	r3, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e18:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d119      	bne.n	8002e52 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	085b      	lsrs	r3, r3, #1
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d10f      	bne.n	8002e52 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d107      	bne.n	8002e52 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d001      	beq.n	8002e56 <HAL_RCC_OscConfig+0x6ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <HAL_RCC_OscConfig+0x6d0>
      }
    }
  }
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40023800 	.word	0x40023800
 8002e64:	08006aa8 	.word	0x08006aa8

08002e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e18c      	b.n	800319a <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x28>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b0f      	cmp	r3, #15
 8002e8e:	d904      	bls.n	8002e9a <HAL_RCC_ClockConfig+0x32>
 8002e90:	f240 21df 	movw	r1, #735	; 0x2df
 8002e94:	4887      	ldr	r0, [pc, #540]	; (80030b4 <HAL_RCC_ClockConfig+0x24c>)
 8002e96:	f7fd ff4c 	bl	8000d32 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d031      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x9c>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d02e      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x9c>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d02b      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x9c>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d028      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x9c>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d025      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x9c>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	2b05      	cmp	r3, #5
 8002ebc:	d022      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x9c>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b06      	cmp	r3, #6
 8002ec2:	d01f      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x9c>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	2b07      	cmp	r3, #7
 8002ec8:	d01c      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x9c>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d019      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x9c>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	2b09      	cmp	r3, #9
 8002ed4:	d016      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x9c>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b0a      	cmp	r3, #10
 8002eda:	d013      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x9c>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	2b0b      	cmp	r3, #11
 8002ee0:	d010      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x9c>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b0c      	cmp	r3, #12
 8002ee6:	d00d      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x9c>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	2b0d      	cmp	r3, #13
 8002eec:	d00a      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x9c>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b0e      	cmp	r3, #14
 8002ef2:	d007      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x9c>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b0f      	cmp	r3, #15
 8002ef8:	d004      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x9c>
 8002efa:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8002efe:	486d      	ldr	r0, [pc, #436]	; (80030b4 <HAL_RCC_ClockConfig+0x24c>)
 8002f00:	f7fd ff17 	bl	8000d32 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f04:	4b6c      	ldr	r3, [pc, #432]	; (80030b8 <HAL_RCC_ClockConfig+0x250>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 030f 	and.w	r3, r3, #15
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d910      	bls.n	8002f34 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f12:	4b69      	ldr	r3, [pc, #420]	; (80030b8 <HAL_RCC_ClockConfig+0x250>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f023 020f 	bic.w	r2, r3, #15
 8002f1a:	4967      	ldr	r1, [pc, #412]	; (80030b8 <HAL_RCC_ClockConfig+0x250>)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f22:	4b65      	ldr	r3, [pc, #404]	; (80030b8 <HAL_RCC_ClockConfig+0x250>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d001      	beq.n	8002f34 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e132      	b.n	800319a <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d049      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f4c:	4b5b      	ldr	r3, [pc, #364]	; (80030bc <HAL_RCC_ClockConfig+0x254>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	4a5a      	ldr	r2, [pc, #360]	; (80030bc <HAL_RCC_ClockConfig+0x254>)
 8002f52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f64:	4b55      	ldr	r3, [pc, #340]	; (80030bc <HAL_RCC_ClockConfig+0x254>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	4a54      	ldr	r2, [pc, #336]	; (80030bc <HAL_RCC_ClockConfig+0x254>)
 8002f6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d024      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x15a>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b80      	cmp	r3, #128	; 0x80
 8002f7e:	d020      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x15a>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b90      	cmp	r3, #144	; 0x90
 8002f86:	d01c      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x15a>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	2ba0      	cmp	r3, #160	; 0xa0
 8002f8e:	d018      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x15a>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2bb0      	cmp	r3, #176	; 0xb0
 8002f96:	d014      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x15a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2bc0      	cmp	r3, #192	; 0xc0
 8002f9e:	d010      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x15a>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2bd0      	cmp	r3, #208	; 0xd0
 8002fa6:	d00c      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x15a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2be0      	cmp	r3, #224	; 0xe0
 8002fae:	d008      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x15a>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2bf0      	cmp	r3, #240	; 0xf0
 8002fb6:	d004      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x15a>
 8002fb8:	f44f 7141 	mov.w	r1, #772	; 0x304
 8002fbc:	483d      	ldr	r0, [pc, #244]	; (80030b4 <HAL_RCC_ClockConfig+0x24c>)
 8002fbe:	f7fd feb8 	bl	8000d32 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc2:	4b3e      	ldr	r3, [pc, #248]	; (80030bc <HAL_RCC_ClockConfig+0x254>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	493b      	ldr	r1, [pc, #236]	; (80030bc <HAL_RCC_ClockConfig+0x254>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d051      	beq.n	8003084 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00c      	beq.n	8003002 <HAL_RCC_ClockConfig+0x19a>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d008      	beq.n	8003002 <HAL_RCC_ClockConfig+0x19a>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d004      	beq.n	8003002 <HAL_RCC_ClockConfig+0x19a>
 8002ff8:	f240 310b 	movw	r1, #779	; 0x30b
 8002ffc:	482d      	ldr	r0, [pc, #180]	; (80030b4 <HAL_RCC_ClockConfig+0x24c>)
 8002ffe:	f7fd fe98 	bl	8000d32 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d107      	bne.n	800301a <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	4b2c      	ldr	r3, [pc, #176]	; (80030bc <HAL_RCC_ClockConfig+0x254>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d115      	bne.n	8003042 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e0bf      	b.n	800319a <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d107      	bne.n	8003032 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003022:	4b26      	ldr	r3, [pc, #152]	; (80030bc <HAL_RCC_ClockConfig+0x254>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e0b3      	b.n	800319a <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003032:	4b22      	ldr	r3, [pc, #136]	; (80030bc <HAL_RCC_ClockConfig+0x254>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e0ab      	b.n	800319a <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003042:	4b1e      	ldr	r3, [pc, #120]	; (80030bc <HAL_RCC_ClockConfig+0x254>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f023 0203 	bic.w	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	491b      	ldr	r1, [pc, #108]	; (80030bc <HAL_RCC_ClockConfig+0x254>)
 8003050:	4313      	orrs	r3, r2
 8003052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003054:	f7fe fc48 	bl	80018e8 <HAL_GetTick>
 8003058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305a:	e00a      	b.n	8003072 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800305c:	f7fe fc44 	bl	80018e8 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	; 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e093      	b.n	800319a <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003072:	4b12      	ldr	r3, [pc, #72]	; (80030bc <HAL_RCC_ClockConfig+0x254>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 020c 	and.w	r2, r3, #12
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	429a      	cmp	r2, r3
 8003082:	d1eb      	bne.n	800305c <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <HAL_RCC_ClockConfig+0x250>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d216      	bcs.n	80030c0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <HAL_RCC_ClockConfig+0x250>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 020f 	bic.w	r2, r3, #15
 800309a:	4907      	ldr	r1, [pc, #28]	; (80030b8 <HAL_RCC_ClockConfig+0x250>)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_RCC_ClockConfig+0x250>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d007      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e072      	b.n	800319a <HAL_RCC_ClockConfig+0x332>
 80030b4:	08006aa8 	.word	0x08006aa8
 80030b8:	40023c00 	.word	0x40023c00
 80030bc:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d025      	beq.n	8003118 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d018      	beq.n	8003106 <HAL_RCC_ClockConfig+0x29e>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030dc:	d013      	beq.n	8003106 <HAL_RCC_ClockConfig+0x29e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80030e6:	d00e      	beq.n	8003106 <HAL_RCC_ClockConfig+0x29e>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80030f0:	d009      	beq.n	8003106 <HAL_RCC_ClockConfig+0x29e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80030fa:	d004      	beq.n	8003106 <HAL_RCC_ClockConfig+0x29e>
 80030fc:	f44f 7152 	mov.w	r1, #840	; 0x348
 8003100:	4828      	ldr	r0, [pc, #160]	; (80031a4 <HAL_RCC_ClockConfig+0x33c>)
 8003102:	f7fd fe16 	bl	8000d32 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003106:	4b28      	ldr	r3, [pc, #160]	; (80031a8 <HAL_RCC_ClockConfig+0x340>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	4925      	ldr	r1, [pc, #148]	; (80031a8 <HAL_RCC_ClockConfig+0x340>)
 8003114:	4313      	orrs	r3, r2
 8003116:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d026      	beq.n	8003172 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d018      	beq.n	800315e <HAL_RCC_ClockConfig+0x2f6>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003134:	d013      	beq.n	800315e <HAL_RCC_ClockConfig+0x2f6>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800313e:	d00e      	beq.n	800315e <HAL_RCC_ClockConfig+0x2f6>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003148:	d009      	beq.n	800315e <HAL_RCC_ClockConfig+0x2f6>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003152:	d004      	beq.n	800315e <HAL_RCC_ClockConfig+0x2f6>
 8003154:	f240 314f 	movw	r1, #847	; 0x34f
 8003158:	4812      	ldr	r0, [pc, #72]	; (80031a4 <HAL_RCC_ClockConfig+0x33c>)
 800315a:	f7fd fdea 	bl	8000d32 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800315e:	4b12      	ldr	r3, [pc, #72]	; (80031a8 <HAL_RCC_ClockConfig+0x340>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	490e      	ldr	r1, [pc, #56]	; (80031a8 <HAL_RCC_ClockConfig+0x340>)
 800316e:	4313      	orrs	r3, r2
 8003170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003172:	f000 f821 	bl	80031b8 <HAL_RCC_GetSysClockFreq>
 8003176:	4601      	mov	r1, r0
 8003178:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <HAL_RCC_ClockConfig+0x340>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	091b      	lsrs	r3, r3, #4
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <HAL_RCC_ClockConfig+0x344>)
 8003184:	5cd3      	ldrb	r3, [r2, r3]
 8003186:	fa21 f303 	lsr.w	r3, r1, r3
 800318a:	4a09      	ldr	r2, [pc, #36]	; (80031b0 <HAL_RCC_ClockConfig+0x348>)
 800318c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800318e:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <HAL_RCC_ClockConfig+0x34c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7fe fb64 	bl	8001860 <HAL_InitTick>

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	08006aa8 	.word	0x08006aa8
 80031a8:	40023800 	.word	0x40023800
 80031ac:	08006c04 	.word	0x08006c04
 80031b0:	20000000 	.word	0x20000000
 80031b4:	20000004 	.word	0x20000004

080031b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80031be:	2300      	movs	r3, #0
 80031c0:	607b      	str	r3, [r7, #4]
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	2300      	movs	r3, #0
 80031c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ce:	4b50      	ldr	r3, [pc, #320]	; (8003310 <HAL_RCC_GetSysClockFreq+0x158>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d007      	beq.n	80031ea <HAL_RCC_GetSysClockFreq+0x32>
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d008      	beq.n	80031f0 <HAL_RCC_GetSysClockFreq+0x38>
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f040 808d 	bne.w	80032fe <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031e4:	4b4b      	ldr	r3, [pc, #300]	; (8003314 <HAL_RCC_GetSysClockFreq+0x15c>)
 80031e6:	60bb      	str	r3, [r7, #8]
      break;
 80031e8:	e08c      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ea:	4b4b      	ldr	r3, [pc, #300]	; (8003318 <HAL_RCC_GetSysClockFreq+0x160>)
 80031ec:	60bb      	str	r3, [r7, #8]
      break;
 80031ee:	e089      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031f0:	4b47      	ldr	r3, [pc, #284]	; (8003310 <HAL_RCC_GetSysClockFreq+0x158>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031f8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80031fa:	4b45      	ldr	r3, [pc, #276]	; (8003310 <HAL_RCC_GetSysClockFreq+0x158>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d023      	beq.n	800324e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003206:	4b42      	ldr	r3, [pc, #264]	; (8003310 <HAL_RCC_GetSysClockFreq+0x158>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	099b      	lsrs	r3, r3, #6
 800320c:	f04f 0400 	mov.w	r4, #0
 8003210:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	ea03 0501 	and.w	r5, r3, r1
 800321c:	ea04 0602 	and.w	r6, r4, r2
 8003220:	4a3d      	ldr	r2, [pc, #244]	; (8003318 <HAL_RCC_GetSysClockFreq+0x160>)
 8003222:	fb02 f106 	mul.w	r1, r2, r6
 8003226:	2200      	movs	r2, #0
 8003228:	fb02 f205 	mul.w	r2, r2, r5
 800322c:	440a      	add	r2, r1
 800322e:	493a      	ldr	r1, [pc, #232]	; (8003318 <HAL_RCC_GetSysClockFreq+0x160>)
 8003230:	fba5 0101 	umull	r0, r1, r5, r1
 8003234:	1853      	adds	r3, r2, r1
 8003236:	4619      	mov	r1, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f04f 0400 	mov.w	r4, #0
 800323e:	461a      	mov	r2, r3
 8003240:	4623      	mov	r3, r4
 8003242:	f7fc fff9 	bl	8000238 <__aeabi_uldivmod>
 8003246:	4603      	mov	r3, r0
 8003248:	460c      	mov	r4, r1
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	e049      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800324e:	4b30      	ldr	r3, [pc, #192]	; (8003310 <HAL_RCC_GetSysClockFreq+0x158>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	099b      	lsrs	r3, r3, #6
 8003254:	f04f 0400 	mov.w	r4, #0
 8003258:	f240 11ff 	movw	r1, #511	; 0x1ff
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	ea03 0501 	and.w	r5, r3, r1
 8003264:	ea04 0602 	and.w	r6, r4, r2
 8003268:	4629      	mov	r1, r5
 800326a:	4632      	mov	r2, r6
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	f04f 0400 	mov.w	r4, #0
 8003274:	0154      	lsls	r4, r2, #5
 8003276:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800327a:	014b      	lsls	r3, r1, #5
 800327c:	4619      	mov	r1, r3
 800327e:	4622      	mov	r2, r4
 8003280:	1b49      	subs	r1, r1, r5
 8003282:	eb62 0206 	sbc.w	r2, r2, r6
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	f04f 0400 	mov.w	r4, #0
 800328e:	0194      	lsls	r4, r2, #6
 8003290:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003294:	018b      	lsls	r3, r1, #6
 8003296:	1a5b      	subs	r3, r3, r1
 8003298:	eb64 0402 	sbc.w	r4, r4, r2
 800329c:	f04f 0100 	mov.w	r1, #0
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	00e2      	lsls	r2, r4, #3
 80032a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032aa:	00d9      	lsls	r1, r3, #3
 80032ac:	460b      	mov	r3, r1
 80032ae:	4614      	mov	r4, r2
 80032b0:	195b      	adds	r3, r3, r5
 80032b2:	eb44 0406 	adc.w	r4, r4, r6
 80032b6:	f04f 0100 	mov.w	r1, #0
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	02a2      	lsls	r2, r4, #10
 80032c0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80032c4:	0299      	lsls	r1, r3, #10
 80032c6:	460b      	mov	r3, r1
 80032c8:	4614      	mov	r4, r2
 80032ca:	4618      	mov	r0, r3
 80032cc:	4621      	mov	r1, r4
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f04f 0400 	mov.w	r4, #0
 80032d4:	461a      	mov	r2, r3
 80032d6:	4623      	mov	r3, r4
 80032d8:	f7fc ffae 	bl	8000238 <__aeabi_uldivmod>
 80032dc:	4603      	mov	r3, r0
 80032de:	460c      	mov	r4, r1
 80032e0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80032e2:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <HAL_RCC_GetSysClockFreq+0x158>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	0c1b      	lsrs	r3, r3, #16
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	3301      	adds	r3, #1
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fa:	60bb      	str	r3, [r7, #8]
      break;
 80032fc:	e002      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032fe:	4b05      	ldr	r3, [pc, #20]	; (8003314 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003300:	60bb      	str	r3, [r7, #8]
      break;
 8003302:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003304:	68bb      	ldr	r3, [r7, #8]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800330e:	bf00      	nop
 8003310:	40023800 	.word	0x40023800
 8003314:	00f42400 	.word	0x00f42400
 8003318:	017d7840 	.word	0x017d7840

0800331c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003320:	4b03      	ldr	r3, [pc, #12]	; (8003330 <HAL_RCC_GetHCLKFreq+0x14>)
 8003322:	681b      	ldr	r3, [r3, #0]
}
 8003324:	4618      	mov	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	20000000 	.word	0x20000000

08003334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003338:	f7ff fff0 	bl	800331c <HAL_RCC_GetHCLKFreq>
 800333c:	4601      	mov	r1, r0
 800333e:	4b05      	ldr	r3, [pc, #20]	; (8003354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	0a9b      	lsrs	r3, r3, #10
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	4a03      	ldr	r2, [pc, #12]	; (8003358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800334a:	5cd3      	ldrb	r3, [r2, r3]
 800334c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003350:	4618      	mov	r0, r3
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40023800 	.word	0x40023800
 8003358:	08006c14 	.word	0x08006c14

0800335c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003360:	f7ff ffdc 	bl	800331c <HAL_RCC_GetHCLKFreq>
 8003364:	4601      	mov	r1, r0
 8003366:	4b05      	ldr	r3, [pc, #20]	; (800337c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	0b5b      	lsrs	r3, r3, #13
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	4a03      	ldr	r2, [pc, #12]	; (8003380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003372:	5cd3      	ldrb	r3, [r2, r3]
 8003374:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003378:	4618      	mov	r0, r3
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40023800 	.word	0x40023800
 8003380:	08006c14 	.word	0x08006c14

08003384 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800338c:	2300      	movs	r3, #0
 800338e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003390:	2300      	movs	r3, #0
 8003392:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800339c:	2300      	movs	r3, #0
 800339e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f040 809e 	bne.w	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f040 8097 	bne.w	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f040 8090 	bne.w	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f040 8089 	bne.w	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f040 8082 	bne.w	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d17b      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d175      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003406:	2b00      	cmp	r3, #0
 8003408:	d16f      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003412:	2b00      	cmp	r3, #0
 8003414:	d169      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d163      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d15d      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d157      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d151      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d14b      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d145      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d13f      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d139      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d133      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d12d      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d127      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d121      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d11b      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d115      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10f      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d109      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d103      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 80034e2:	2174      	movs	r1, #116	; 0x74
 80034e4:	48a2      	ldr	r0, [pc, #648]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80034e6:	f7fd fc24 	bl	8000d32 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d01f      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d008      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003502:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003506:	d003      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003508:	217a      	movs	r1, #122	; 0x7a
 800350a:	4899      	ldr	r0, [pc, #612]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800350c:	f7fd fc11 	bl	8000d32 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003510:	4b98      	ldr	r3, [pc, #608]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	4a97      	ldr	r2, [pc, #604]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003516:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800351a:	6093      	str	r3, [r2, #8]
 800351c:	4b95      	ldr	r3, [pc, #596]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003524:	4993      	ldr	r1, [pc, #588]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      plli2sused = 1;
 8003532:	2301      	movs	r3, #1
 8003534:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d02e      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003546:	2b00      	cmp	r3, #0
 8003548:	d012      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003552:	d00d      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003558:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800355c:	d008      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003562:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003566:	d003      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003568:	218a      	movs	r1, #138	; 0x8a
 800356a:	4881      	ldr	r0, [pc, #516]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800356c:	f7fd fbe1 	bl	8000d32 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003570:	4b80      	ldr	r3, [pc, #512]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003576:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357e:	497d      	ldr	r1, [pc, #500]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800358e:	d101      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x210>
    {
      plli2sused = 1;
 8003590:	2301      	movs	r3, #1
 8003592:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      pllsaiused = 1;
 800359c:	2301      	movs	r3, #1
 800359e:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d02e      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d012      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x256>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035bc:	d00d      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x256>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035c6:	d008      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x256>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035d0:	d003      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x256>
 80035d2:	219e      	movs	r1, #158	; 0x9e
 80035d4:	4866      	ldr	r0, [pc, #408]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80035d6:	f7fd fbac 	bl	8000d32 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035da:	4b66      	ldr	r3, [pc, #408]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80035dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	4962      	ldr	r1, [pc, #392]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035f8:	d101      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      plli2sused = 1;
 80035fa:	2301      	movs	r3, #1
 80035fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      pllsaiused = 1;
 8003606:	2301      	movs	r3, #1
 8003608:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
      plli2sused = 1;
 8003616:	2301      	movs	r3, #1
 8003618:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 8187 	beq.w	8003936 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003630:	f000 80eb 	beq.w	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800363c:	f000 80e5 	beq.w	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	4a4c      	ldr	r2, [pc, #304]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003646:	4293      	cmp	r3, r2
 8003648:	f000 80df 	beq.w	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	4a4a      	ldr	r2, [pc, #296]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	f000 80d9 	beq.w	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	4a48      	ldr	r2, [pc, #288]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800365e:	4293      	cmp	r3, r2
 8003660:	f000 80d3 	beq.w	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	4a46      	ldr	r2, [pc, #280]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800366a:	4293      	cmp	r3, r2
 800366c:	f000 80cd 	beq.w	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003674:	4a44      	ldr	r2, [pc, #272]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8003676:	4293      	cmp	r3, r2
 8003678:	f000 80c7 	beq.w	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	4a42      	ldr	r2, [pc, #264]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8003682:	4293      	cmp	r3, r2
 8003684:	f000 80c1 	beq.w	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	4a40      	ldr	r2, [pc, #256]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	f000 80bb 	beq.w	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	4a3e      	ldr	r2, [pc, #248]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x410>)
 800369a:	4293      	cmp	r3, r2
 800369c:	f000 80b5 	beq.w	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	4a3c      	ldr	r2, [pc, #240]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x414>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	f000 80af 	beq.w	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	4a3a      	ldr	r2, [pc, #232]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x418>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	f000 80a9 	beq.w	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	4a38      	ldr	r2, [pc, #224]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	f000 80a3 	beq.w	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	4a36      	ldr	r2, [pc, #216]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	f000 809d 	beq.w	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	4a34      	ldr	r2, [pc, #208]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	f000 8097 	beq.w	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	4a32      	ldr	r2, [pc, #200]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	f000 8091 	beq.w	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ec:	4a30      	ldr	r2, [pc, #192]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	f000 808b 	beq.w	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	4a2e      	ldr	r2, [pc, #184]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	f000 8085 	beq.w	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	4a2c      	ldr	r2, [pc, #176]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d07f      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	4a2b      	ldr	r2, [pc, #172]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d07a      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	4a29      	ldr	r2, [pc, #164]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d075      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	4a28      	ldr	r2, [pc, #160]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d070      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	4a26      	ldr	r2, [pc, #152]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d06b      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	4a25      	ldr	r2, [pc, #148]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d066      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	4a23      	ldr	r2, [pc, #140]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d061      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	4a22      	ldr	r2, [pc, #136]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d05c      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	4a20      	ldr	r2, [pc, #128]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d057      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	4a1f      	ldr	r2, [pc, #124]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d052      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	4a1d      	ldr	r2, [pc, #116]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d04d      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800376e:	e039      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003770:	08006ae0 	.word	0x08006ae0
 8003774:	40023800 	.word	0x40023800
 8003778:	00020300 	.word	0x00020300
 800377c:	00030300 	.word	0x00030300
 8003780:	00040300 	.word	0x00040300
 8003784:	00050300 	.word	0x00050300
 8003788:	00060300 	.word	0x00060300
 800378c:	00070300 	.word	0x00070300
 8003790:	00080300 	.word	0x00080300
 8003794:	00090300 	.word	0x00090300
 8003798:	000a0300 	.word	0x000a0300
 800379c:	000b0300 	.word	0x000b0300
 80037a0:	000c0300 	.word	0x000c0300
 80037a4:	000d0300 	.word	0x000d0300
 80037a8:	000e0300 	.word	0x000e0300
 80037ac:	000f0300 	.word	0x000f0300
 80037b0:	00100300 	.word	0x00100300
 80037b4:	00110300 	.word	0x00110300
 80037b8:	00120300 	.word	0x00120300
 80037bc:	00130300 	.word	0x00130300
 80037c0:	00140300 	.word	0x00140300
 80037c4:	00150300 	.word	0x00150300
 80037c8:	00160300 	.word	0x00160300
 80037cc:	00170300 	.word	0x00170300
 80037d0:	00180300 	.word	0x00180300
 80037d4:	00190300 	.word	0x00190300
 80037d8:	001a0300 	.word	0x001a0300
 80037dc:	001b0300 	.word	0x001b0300
 80037e0:	001c0300 	.word	0x001c0300
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	4a44      	ldr	r2, [pc, #272]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x578>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00d      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	4a43      	ldr	r2, [pc, #268]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d008      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	4a41      	ldr	r2, [pc, #260]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d003      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003802:	21b9      	movs	r1, #185	; 0xb9
 8003804:	4840      	ldr	r0, [pc, #256]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8003806:	f7fd fa94 	bl	8000d32 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800380a:	4b40      	ldr	r3, [pc, #256]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	4a3f      	ldr	r2, [pc, #252]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003814:	6413      	str	r3, [r2, #64]	; 0x40
 8003816:	4b3d      	ldr	r3, [pc, #244]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381e:	60bb      	str	r3, [r7, #8]
 8003820:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003822:	4b3b      	ldr	r3, [pc, #236]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a3a      	ldr	r2, [pc, #232]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800382c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800382e:	f7fe f85b 	bl	80018e8 <HAL_GetTick>
 8003832:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003834:	e009      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003836:	f7fe f857 	bl	80018e8 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b64      	cmp	r3, #100	; 0x64
 8003842:	d902      	bls.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
      {
        return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	f000 be00 	b.w	800444a <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800384a:	4b31      	ldr	r3, [pc, #196]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0ef      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003856:	4b2d      	ldr	r3, [pc, #180]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d036      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	429a      	cmp	r2, r3
 8003872:	d02f      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003874:	4b25      	ldr	r3, [pc, #148]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800387c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800387e:	4b23      	ldr	r3, [pc, #140]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003882:	4a22      	ldr	r2, [pc, #136]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003888:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800388a:	4b20      	ldr	r3, [pc, #128]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388e:	4a1f      	ldr	r2, [pc, #124]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003894:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003896:	4a1d      	ldr	r2, [pc, #116]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800389c:	4b1b      	ldr	r3, [pc, #108]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800389e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d115      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x550>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a8:	f7fe f81e 	bl	80018e8 <HAL_GetTick>
 80038ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ae:	e00b      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x544>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b0:	f7fe f81a 	bl	80018e8 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80038be:	4293      	cmp	r3, r2
 80038c0:	d902      	bls.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x544>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	f000 bdc1 	b.w	800444a <HAL_RCCEx_PeriphCLKConfig+0x10c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c8:	4b10      	ldr	r3, [pc, #64]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80038ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0ed      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038e0:	d11a      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038ee:	4b09      	ldr	r3, [pc, #36]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 80038f0:	400b      	ands	r3, r1
 80038f2:	4906      	ldr	r1, [pc, #24]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	608b      	str	r3, [r1, #8]
 80038f8:	e014      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 80038fa:	bf00      	nop
 80038fc:	001d0300 	.word	0x001d0300
 8003900:	001e0300 	.word	0x001e0300
 8003904:	001f0300 	.word	0x001f0300
 8003908:	08006ae0 	.word	0x08006ae0
 800390c:	40023800 	.word	0x40023800
 8003910:	40007000 	.word	0x40007000
 8003914:	0ffffcff 	.word	0x0ffffcff
 8003918:	4ba7      	ldr	r3, [pc, #668]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	4aa6      	ldr	r2, [pc, #664]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800391e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003922:	6093      	str	r3, [r2, #8]
 8003924:	4ba4      	ldr	r3, [pc, #656]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003926:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003930:	49a1      	ldr	r1, [pc, #644]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003932:	4313      	orrs	r3, r2
 8003934:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0310 	and.w	r3, r3, #16
 800393e:	2b00      	cmp	r3, #0
 8003940:	d01d      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	2b00      	cmp	r3, #0
 8003948:	d008      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003952:	d003      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 8003954:	21f3      	movs	r1, #243	; 0xf3
 8003956:	4899      	ldr	r0, [pc, #612]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003958:	f7fd f9eb 	bl	8000d32 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800395c:	4b96      	ldr	r3, [pc, #600]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800395e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003962:	4a95      	ldr	r2, [pc, #596]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003964:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003968:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800396c:	4b92      	ldr	r3, [pc, #584]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800396e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003976:	4990      	ldr	r1, [pc, #576]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d01c      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00d      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x62a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399a:	d008      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x62a>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039a4:	d003      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x62a>
 80039a6:	21fd      	movs	r1, #253	; 0xfd
 80039a8:	4884      	ldr	r0, [pc, #528]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80039aa:	f7fd f9c2 	bl	8000d32 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ae:	4b82      	ldr	r3, [pc, #520]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039bc:	497e      	ldr	r1, [pc, #504]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01d      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00e      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039e0:	d009      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039ea:	d004      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80039ec:	f240 1107 	movw	r1, #263	; 0x107
 80039f0:	4872      	ldr	r0, [pc, #456]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80039f2:	f7fd f99e 	bl	8000d32 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039f6:	4b70      	ldr	r3, [pc, #448]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a04:	496c      	ldr	r1, [pc, #432]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d01d      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00e      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a28:	d009      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a32:	d004      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8003a34:	f240 1111 	movw	r1, #273	; 0x111
 8003a38:	4860      	ldr	r0, [pc, #384]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003a3a:	f7fd f97a 	bl	8000d32 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a3e:	4b5e      	ldr	r3, [pc, #376]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a4c:	495a      	ldr	r1, [pc, #360]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d01d      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x718>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00e      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x702>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a70:	d009      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x702>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a7a:	d004      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x702>
 8003a7c:	f240 111b 	movw	r1, #283	; 0x11b
 8003a80:	484e      	ldr	r0, [pc, #312]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003a82:	f7fd f956 	bl	8000d32 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a86:	4b4c      	ldr	r3, [pc, #304]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a94:	4948      	ldr	r1, [pc, #288]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01f      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x764>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d010      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d00c      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abc:	2b03      	cmp	r3, #3
 8003abe:	d008      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d004      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8003ac8:	f240 1125 	movw	r1, #293	; 0x125
 8003acc:	483b      	ldr	r0, [pc, #236]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003ace:	f7fd f930 	bl	8000d32 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ad2:	4b39      	ldr	r3, [pc, #228]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad8:	f023 0203 	bic.w	r2, r3, #3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae0:	4935      	ldr	r1, [pc, #212]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d01f      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d010      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d00c      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b08:	2b0c      	cmp	r3, #12
 8003b0a:	d008      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d004      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8003b14:	f240 112f 	movw	r1, #303	; 0x12f
 8003b18:	4828      	ldr	r0, [pc, #160]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b1a:	f7fd f90a 	bl	8000d32 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b1e:	4b26      	ldr	r3, [pc, #152]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b24:	f023 020c 	bic.w	r2, r3, #12
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2c:	4922      	ldr	r1, [pc, #136]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d01f      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d010      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4c:	2b10      	cmp	r3, #16
 8003b4e:	d00c      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b54:	2b30      	cmp	r3, #48	; 0x30
 8003b56:	d008      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5c:	2b20      	cmp	r3, #32
 8003b5e:	d004      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8003b60:	f240 1139 	movw	r1, #313	; 0x139
 8003b64:	4815      	ldr	r0, [pc, #84]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b66:	f7fd f8e4 	bl	8000d32 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b6a:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b78:	490f      	ldr	r1, [pc, #60]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d024      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d015      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b98:	2b40      	cmp	r3, #64	; 0x40
 8003b9a:	d011      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba0:	2bc0      	cmp	r3, #192	; 0xc0
 8003ba2:	d00d      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba8:	2b80      	cmp	r3, #128	; 0x80
 8003baa:	d009      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003bac:	f240 1143 	movw	r1, #323	; 0x143
 8003bb0:	4802      	ldr	r0, [pc, #8]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003bb2:	f7fd f8be 	bl	8000d32 <assert_failed>
 8003bb6:	e003      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	08006ae0 	.word	0x08006ae0

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bc0:	4bae      	ldr	r3, [pc, #696]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bce:	49ab      	ldr	r1, [pc, #684]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d022      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d013      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf2:	d00e      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bfc:	d009      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c06:	d004      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8003c08:	f240 114d 	movw	r1, #333	; 0x14d
 8003c0c:	489c      	ldr	r0, [pc, #624]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8003c0e:	f7fd f890 	bl	8000d32 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c12:	4b9a      	ldr	r3, [pc, #616]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c20:	4996      	ldr	r1, [pc, #600]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d022      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d013      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c44:	d00e      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c4e:	d009      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c58:	d004      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8003c5a:	f240 1157 	movw	r1, #343	; 0x157
 8003c5e:	4888      	ldr	r0, [pc, #544]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8003c60:	f7fd f867 	bl	8000d32 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c64:	4b85      	ldr	r3, [pc, #532]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c72:	4982      	ldr	r1, [pc, #520]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d022      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d013      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x932>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c96:	d00e      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x932>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ca0:	d009      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x932>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003caa:	d004      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x932>
 8003cac:	f240 1161 	movw	r1, #353	; 0x161
 8003cb0:	4873      	ldr	r0, [pc, #460]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8003cb2:	f7fd f83e 	bl	8000d32 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003cb6:	4b71      	ldr	r3, [pc, #452]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc4:	496d      	ldr	r1, [pc, #436]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d022      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d013      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ce8:	d00e      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003cf2:	d009      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cfc:	d004      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003cfe:	f240 116b 	movw	r1, #363	; 0x16b
 8003d02:	485f      	ldr	r0, [pc, #380]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8003d04:	f7fd f815 	bl	8000d32 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d08:	4b5c      	ldr	r3, [pc, #368]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d16:	4959      	ldr	r1, [pc, #356]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d018      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x9d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d32:	d008      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d004      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8003d3c:	f240 1175 	movw	r1, #373	; 0x175
 8003d40:	484f      	ldr	r0, [pc, #316]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8003d42:	f7fc fff6 	bl	8000d32 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d46:	4b4d      	ldr	r3, [pc, #308]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d54:	4949      	ldr	r1, [pc, #292]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01f      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d70:	d008      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d004      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003d7a:	f240 117f 	movw	r1, #383	; 0x17f
 8003d7e:	4840      	ldr	r0, [pc, #256]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8003d80:	f7fc ffd7 	bl	8000d32 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d84:	4b3d      	ldr	r3, [pc, #244]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d92:	493a      	ldr	r1, [pc, #232]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003da2:	d101      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      pllsaiused = 1;
 8003da4:	2301      	movs	r3, #1
 8003da6:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    pllsaiused = 1;
 8003db4:	2301      	movs	r3, #1
 8003db6:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d022      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xa86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d013      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dd4:	d00e      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dde:	d009      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003de8:	d004      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003dea:	f240 1197 	movw	r1, #407	; 0x197
 8003dee:	4824      	ldr	r0, [pc, #144]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8003df0:	f7fc ff9f 	bl	8000d32 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003df4:	4b21      	ldr	r3, [pc, #132]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e02:	491e      	ldr	r1, [pc, #120]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d01b      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xaca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e20:	d009      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d004      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003e2c:	f240 11a1 	movw	r1, #417	; 0x1a1
 8003e30:	4813      	ldr	r0, [pc, #76]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8003e32:	f7fc ff7e 	bl	8000d32 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e36:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e46:	490d      	ldr	r1, [pc, #52]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d020      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e64:	d00e      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d009      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8003e70:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8003e74:	4802      	ldr	r0, [pc, #8]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8003e76:	f7fc ff5c 	bl	8000d32 <assert_failed>
 8003e7a:	e003      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	08006ae0 	.word	0x08006ae0

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003e84:	4b35      	ldr	r3, [pc, #212]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e94:	4931      	ldr	r1, [pc, #196]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d01b      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ebc:	d004      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 8003ebe:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8003ec2:	4827      	ldr	r0, [pc, #156]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8003ec4:	f7fc ff35 	bl	8000d32 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ec8:	4b24      	ldr	r3, [pc, #144]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ece:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed8:	4920      	ldr	r1, [pc, #128]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d01b      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003efc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f00:	d004      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003f02:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8003f06:	4816      	ldr	r0, [pc, #88]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8003f08:	f7fc ff13 	bl	8000d32 <assert_failed>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f0c:	4b13      	ldr	r3, [pc, #76]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f12:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f1c:	490f      	ldr	r1, [pc, #60]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d005      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f32:	f040 8153 	bne.w	80041dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f36:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a08      	ldr	r2, [pc, #32]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003f3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f42:	f7fd fcd1 	bl	80018e8 <HAL_GetTick>
 8003f46:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f48:	e00c      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f4a:	f7fd fccd 	bl	80018e8 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b64      	cmp	r3, #100	; 0x64
 8003f56:	d905      	bls.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e276      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	08006ae0 	.word	0x08006ae0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f64:	4ba9      	ldr	r3, [pc, #676]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1ec      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xbc6>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b31      	cmp	r3, #49	; 0x31
 8003f76:	d904      	bls.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003f80:	d904      	bls.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003f82:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8003f86:	48a2      	ldr	r0, [pc, #648]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8003f88:	f7fc fed3 	bl	8000d32 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d02e      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d12a      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d903      	bls.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b07      	cmp	r3, #7
 8003fae:	d904      	bls.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8003fb0:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8003fb4:	4896      	ldr	r0, [pc, #600]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8003fb6:	f7fc febc 	bl	8000d32 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003fba:	4b94      	ldr	r3, [pc, #592]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fc0:	0c1b      	lsrs	r3, r3, #16
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fc8:	4b90      	ldr	r3, [pc, #576]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fce:	0e1b      	lsrs	r3, r3, #24
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	019a      	lsls	r2, r3, #6
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	041b      	lsls	r3, r3, #16
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	061b      	lsls	r3, r3, #24
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	071b      	lsls	r3, r3, #28
 8003fee:	4987      	ldr	r1, [pc, #540]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d004      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xc88>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800400a:	d00a      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004014:	2b00      	cmp	r3, #0
 8004016:	d048      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xd26>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004020:	d143      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d903      	bls.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xcae>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	2b0f      	cmp	r3, #15
 8004030:	d904      	bls.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 8004032:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8004036:	4876      	ldr	r0, [pc, #472]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004038:	f7fc fe7b 	bl	8000d32 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	2b20      	cmp	r3, #32
 800404a:	d904      	bls.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 800404c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004050:	486f      	ldr	r0, [pc, #444]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004052:	f7fc fe6e 	bl	8000d32 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004056:	4b6d      	ldr	r3, [pc, #436]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800405c:	0c1b      	lsrs	r3, r3, #16
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004064:	4b69      	ldr	r3, [pc, #420]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800406a:	0f1b      	lsrs	r3, r3, #28
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	019a      	lsls	r2, r3, #6
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	041b      	lsls	r3, r3, #16
 800407c:	431a      	orrs	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	061b      	lsls	r3, r3, #24
 8004084:	431a      	orrs	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	071b      	lsls	r3, r3, #28
 800408a:	4960      	ldr	r1, [pc, #384]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004092:	4b5e      	ldr	r3, [pc, #376]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004098:	f023 021f 	bic.w	r2, r3, #31
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	3b01      	subs	r3, #1
 80040a2:	495a      	ldr	r1, [pc, #360]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d032      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xd98>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d010      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d00c      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d008      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d004      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 80040d6:	f240 2107 	movw	r1, #519	; 0x207
 80040da:	484d      	ldr	r0, [pc, #308]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80040dc:	f7fc fe29 	bl	8000d32 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040e0:	4b4a      	ldr	r3, [pc, #296]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040e6:	0e1b      	lsrs	r3, r3, #24
 80040e8:	f003 030f 	and.w	r3, r3, #15
 80040ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040ee:	4b47      	ldr	r3, [pc, #284]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040f4:	0f1b      	lsrs	r3, r3, #28
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	019a      	lsls	r2, r3, #6
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	041b      	lsls	r3, r3, #16
 8004108:	431a      	orrs	r2, r3
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	061b      	lsls	r3, r3, #24
 800410e:	431a      	orrs	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	071b      	lsls	r3, r3, #28
 8004114:	493d      	ldr	r1, [pc, #244]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d040      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xe26>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d010      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d00c      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d008      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	2b03      	cmp	r3, #3
 8004146:	d004      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004148:	f240 2116 	movw	r1, #534	; 0x216
 800414c:	4830      	ldr	r0, [pc, #192]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 800414e:	f7fc fdf0 	bl	8000d32 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d903      	bls.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	2b07      	cmp	r3, #7
 8004160:	d904      	bls.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xde8>
 8004162:	f240 2117 	movw	r1, #535	; 0x217
 8004166:	482a      	ldr	r0, [pc, #168]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004168:	f7fc fde3 	bl	8000d32 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d903      	bls.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	2b0f      	cmp	r3, #15
 800417a:	d904      	bls.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xe02>
 800417c:	f44f 7106 	mov.w	r1, #536	; 0x218
 8004180:	4823      	ldr	r0, [pc, #140]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004182:	f7fc fdd6 	bl	8000d32 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	019a      	lsls	r2, r3, #6
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	041b      	lsls	r3, r3, #16
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	061b      	lsls	r3, r3, #24
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	071b      	lsls	r3, r3, #28
 80041a2:	491a      	ldr	r1, [pc, #104]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041aa:	4b18      	ldr	r3, [pc, #96]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a17      	ldr	r2, [pc, #92]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80041b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b6:	f7fd fb97 	bl	80018e8 <HAL_GetTick>
 80041ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041bc:	e008      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041be:	f7fd fb93 	bl	80018e8 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b64      	cmp	r3, #100	; 0x64
 80041ca:	d901      	bls.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e13c      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041d0:	4b0e      	ldr	r3, [pc, #56]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f0      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xe3a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	f040 8132 	bne.w	8004448 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80041e4:	4b09      	ldr	r3, [pc, #36]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a08      	ldr	r2, [pc, #32]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80041ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f0:	f7fd fb7a 	bl	80018e8 <HAL_GetTick>
 80041f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041f6:	e00d      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xe90>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041f8:	f7fd fb76 	bl	80018e8 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b64      	cmp	r3, #100	; 0x64
 8004204:	d906      	bls.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xe90>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e11f      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 800420a:	bf00      	nop
 800420c:	40023800 	.word	0x40023800
 8004210:	08006ae0 	.word	0x08006ae0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004214:	4b8f      	ldr	r3, [pc, #572]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800421c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004220:	d0ea      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	2b31      	cmp	r3, #49	; 0x31
 8004228:	d904      	bls.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xeb0>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004232:	d904      	bls.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xeba>
 8004234:	f240 2146 	movw	r1, #582	; 0x246
 8004238:	4887      	ldr	r0, [pc, #540]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 800423a:	f7fc fd7a 	bl	8000d32 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xece>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xee2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800425a:	2b00      	cmp	r3, #0
 800425c:	d048      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d144      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d903      	bls.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xef2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	2b0f      	cmp	r3, #15
 8004274:	d904      	bls.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xefc>
 8004276:	f240 214d 	movw	r1, #589	; 0x24d
 800427a:	4877      	ldr	r0, [pc, #476]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 800427c:	f7fc fd59 	bl	8000d32 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	2b20      	cmp	r3, #32
 800428e:	d904      	bls.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004290:	f240 214f 	movw	r1, #591	; 0x24f
 8004294:	4870      	ldr	r0, [pc, #448]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004296:	f7fc fd4c 	bl	8000d32 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800429a:	4b6e      	ldr	r3, [pc, #440]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800429c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a0:	0c1b      	lsrs	r3, r3, #16
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042a8:	4b6a      	ldr	r3, [pc, #424]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ae:	0f1b      	lsrs	r3, r3, #28
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	019a      	lsls	r2, r3, #6
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	041b      	lsls	r3, r3, #16
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	061b      	lsls	r3, r3, #24
 80042c8:	431a      	orrs	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	071b      	lsls	r3, r3, #28
 80042ce:	4961      	ldr	r1, [pc, #388]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80042d6:	4b5f      	ldr	r3, [pc, #380]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80042d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e4:	3b01      	subs	r3, #1
 80042e6:	021b      	lsls	r3, r3, #8
 80042e8:	495a      	ldr	r1, [pc, #360]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d037      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004304:	d132      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d010      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d00c      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	2b02      	cmp	r3, #2
 800431c:	d008      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	2b03      	cmp	r3, #3
 8004324:	d004      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004326:	f240 2162 	movw	r1, #610	; 0x262
 800432a:	484b      	ldr	r0, [pc, #300]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 800432c:	f7fc fd01 	bl	8000d32 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004330:	4b48      	ldr	r3, [pc, #288]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004336:	0e1b      	lsrs	r3, r3, #24
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800433e:	4b45      	ldr	r3, [pc, #276]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004344:	0f1b      	lsrs	r3, r3, #28
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	019a      	lsls	r2, r3, #6
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	041b      	lsls	r3, r3, #16
 8004358:	431a      	orrs	r2, r3
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	061b      	lsls	r3, r3, #24
 800435e:	431a      	orrs	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	071b      	lsls	r3, r3, #28
 8004364:	493b      	ldr	r1, [pc, #236]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b00      	cmp	r3, #0
 8004376:	d04d      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x1090>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d903      	bls.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1004>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	2b07      	cmp	r3, #7
 8004386:	d904      	bls.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x100e>
 8004388:	f240 2171 	movw	r1, #625	; 0x271
 800438c:	4832      	ldr	r0, [pc, #200]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 800438e:	f7fc fcd0 	bl	8000d32 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	2b00      	cmp	r3, #0
 8004398:	d013      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a2:	d00e      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043ac:	d009      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043b6:	d004      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 80043b8:	f240 2172 	movw	r1, #626	; 0x272
 80043bc:	4826      	ldr	r0, [pc, #152]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 80043be:	f7fc fcb8 	bl	8000d32 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043c2:	4b24      	ldr	r3, [pc, #144]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80043c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c8:	0e1b      	lsrs	r3, r3, #24
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043d0:	4b20      	ldr	r3, [pc, #128]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d6:	0c1b      	lsrs	r3, r3, #16
 80043d8:	f003 0303 	and.w	r3, r3, #3
 80043dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	019a      	lsls	r2, r3, #6
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	041b      	lsls	r3, r3, #16
 80043e8:	431a      	orrs	r2, r3
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	061b      	lsls	r3, r3, #24
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	071b      	lsls	r3, r3, #28
 80043f6:	4917      	ldr	r1, [pc, #92]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80043fe:	4b15      	ldr	r3, [pc, #84]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004404:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	4911      	ldr	r1, [pc, #68]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004414:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a0e      	ldr	r2, [pc, #56]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800441a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800441e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004420:	f7fd fa62 	bl	80018e8 <HAL_GetTick>
 8004424:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004426:	e008      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004428:	f7fd fa5e 	bl	80018e8 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b64      	cmp	r3, #100	; 0x64
 8004434:	d901      	bls.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e007      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800443a:	4b06      	ldr	r3, [pc, #24]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004442:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004446:	d1ef      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
      }
    }
  }
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3720      	adds	r7, #32
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40023800 	.word	0x40023800
 8004458:	08006ae0 	.word	0x08006ae0

0800445c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e199      	b.n	80047a2 <HAL_SPI_Init+0x346>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a94      	ldr	r2, [pc, #592]	; (80046c4 <HAL_SPI_Init+0x268>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d01d      	beq.n	80044b4 <HAL_SPI_Init+0x58>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a92      	ldr	r2, [pc, #584]	; (80046c8 <HAL_SPI_Init+0x26c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d018      	beq.n	80044b4 <HAL_SPI_Init+0x58>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a91      	ldr	r2, [pc, #580]	; (80046cc <HAL_SPI_Init+0x270>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d013      	beq.n	80044b4 <HAL_SPI_Init+0x58>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a8f      	ldr	r2, [pc, #572]	; (80046d0 <HAL_SPI_Init+0x274>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d00e      	beq.n	80044b4 <HAL_SPI_Init+0x58>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a8e      	ldr	r2, [pc, #568]	; (80046d4 <HAL_SPI_Init+0x278>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d009      	beq.n	80044b4 <HAL_SPI_Init+0x58>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a8c      	ldr	r2, [pc, #560]	; (80046d8 <HAL_SPI_Init+0x27c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d004      	beq.n	80044b4 <HAL_SPI_Init+0x58>
 80044aa:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80044ae:	488b      	ldr	r0, [pc, #556]	; (80046dc <HAL_SPI_Init+0x280>)
 80044b0:	f7fc fc3f 	bl	8000d32 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d009      	beq.n	80044d0 <HAL_SPI_Init+0x74>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044c4:	d004      	beq.n	80044d0 <HAL_SPI_Init+0x74>
 80044c6:	f240 1145 	movw	r1, #325	; 0x145
 80044ca:	4884      	ldr	r0, [pc, #528]	; (80046dc <HAL_SPI_Init+0x280>)
 80044cc:	f7fc fc31 	bl	8000d32 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00e      	beq.n	80044f6 <HAL_SPI_Init+0x9a>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e0:	d009      	beq.n	80044f6 <HAL_SPI_Init+0x9a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ea:	d004      	beq.n	80044f6 <HAL_SPI_Init+0x9a>
 80044ec:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80044f0:	487a      	ldr	r0, [pc, #488]	; (80046dc <HAL_SPI_Init+0x280>)
 80044f2:	f7fc fc1e 	bl	8000d32 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80044fe:	d040      	beq.n	8004582 <HAL_SPI_Init+0x126>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8004508:	d03b      	beq.n	8004582 <HAL_SPI_Init+0x126>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004512:	d036      	beq.n	8004582 <HAL_SPI_Init+0x126>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800451c:	d031      	beq.n	8004582 <HAL_SPI_Init+0x126>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004526:	d02c      	beq.n	8004582 <HAL_SPI_Init+0x126>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004530:	d027      	beq.n	8004582 <HAL_SPI_Init+0x126>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800453a:	d022      	beq.n	8004582 <HAL_SPI_Init+0x126>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004544:	d01d      	beq.n	8004582 <HAL_SPI_Init+0x126>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800454e:	d018      	beq.n	8004582 <HAL_SPI_Init+0x126>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004558:	d013      	beq.n	8004582 <HAL_SPI_Init+0x126>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004562:	d00e      	beq.n	8004582 <HAL_SPI_Init+0x126>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800456c:	d009      	beq.n	8004582 <HAL_SPI_Init+0x126>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004576:	d004      	beq.n	8004582 <HAL_SPI_Init+0x126>
 8004578:	f240 1147 	movw	r1, #327	; 0x147
 800457c:	4857      	ldr	r0, [pc, #348]	; (80046dc <HAL_SPI_Init+0x280>)
 800457e:	f7fc fbd8 	bl	8000d32 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800458a:	d00d      	beq.n	80045a8 <HAL_SPI_Init+0x14c>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d009      	beq.n	80045a8 <HAL_SPI_Init+0x14c>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800459c:	d004      	beq.n	80045a8 <HAL_SPI_Init+0x14c>
 800459e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80045a2:	484e      	ldr	r0, [pc, #312]	; (80046dc <HAL_SPI_Init+0x280>)
 80045a4:	f7fc fbc5 	bl	8000d32 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d008      	beq.n	80045c2 <HAL_SPI_Init+0x166>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d004      	beq.n	80045c2 <HAL_SPI_Init+0x166>
 80045b8:	f240 1149 	movw	r1, #329	; 0x149
 80045bc:	4847      	ldr	r0, [pc, #284]	; (80046dc <HAL_SPI_Init+0x280>)
 80045be:	f7fc fbb8 	bl	8000d32 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d020      	beq.n	800460c <HAL_SPI_Init+0x1b0>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d01c      	beq.n	800460c <HAL_SPI_Init+0x1b0>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	2b10      	cmp	r3, #16
 80045d8:	d018      	beq.n	800460c <HAL_SPI_Init+0x1b0>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	2b18      	cmp	r3, #24
 80045e0:	d014      	beq.n	800460c <HAL_SPI_Init+0x1b0>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	2b20      	cmp	r3, #32
 80045e8:	d010      	beq.n	800460c <HAL_SPI_Init+0x1b0>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	2b28      	cmp	r3, #40	; 0x28
 80045f0:	d00c      	beq.n	800460c <HAL_SPI_Init+0x1b0>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	2b30      	cmp	r3, #48	; 0x30
 80045f8:	d008      	beq.n	800460c <HAL_SPI_Init+0x1b0>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	2b38      	cmp	r3, #56	; 0x38
 8004600:	d004      	beq.n	800460c <HAL_SPI_Init+0x1b0>
 8004602:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004606:	4835      	ldr	r0, [pc, #212]	; (80046dc <HAL_SPI_Init+0x280>)
 8004608:	f7fc fb93 	bl	8000d32 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d008      	beq.n	8004626 <HAL_SPI_Init+0x1ca>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	2b80      	cmp	r3, #128	; 0x80
 800461a:	d004      	beq.n	8004626 <HAL_SPI_Init+0x1ca>
 800461c:	f240 114b 	movw	r1, #331	; 0x14b
 8004620:	482e      	ldr	r0, [pc, #184]	; (80046dc <HAL_SPI_Init+0x280>)
 8004622:	f7fc fb86 	bl	8000d32 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	2b00      	cmp	r3, #0
 800462c:	d008      	beq.n	8004640 <HAL_SPI_Init+0x1e4>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	2b10      	cmp	r3, #16
 8004634:	d004      	beq.n	8004640 <HAL_SPI_Init+0x1e4>
 8004636:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800463a:	4828      	ldr	r0, [pc, #160]	; (80046dc <HAL_SPI_Init+0x280>)
 800463c:	f7fc fb79 	bl	8000d32 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	2b00      	cmp	r3, #0
 8004646:	d119      	bne.n	800467c <HAL_SPI_Init+0x220>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d008      	beq.n	8004662 <HAL_SPI_Init+0x206>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	2b02      	cmp	r3, #2
 8004656:	d004      	beq.n	8004662 <HAL_SPI_Init+0x206>
 8004658:	f240 114f 	movw	r1, #335	; 0x14f
 800465c:	481f      	ldr	r0, [pc, #124]	; (80046dc <HAL_SPI_Init+0x280>)
 800465e:	f7fc fb68 	bl	8000d32 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d008      	beq.n	800467c <HAL_SPI_Init+0x220>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d004      	beq.n	800467c <HAL_SPI_Init+0x220>
 8004672:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004676:	4819      	ldr	r0, [pc, #100]	; (80046dc <HAL_SPI_Init+0x280>)
 8004678:	f7fc fb5b 	bl	8000d32 <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_SPI_Init+0x240>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fc fc8c 	bl	8000fb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046bc:	d910      	bls.n	80046e0 <HAL_SPI_Init+0x284>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	e010      	b.n	80046e6 <HAL_SPI_Init+0x28a>
 80046c4:	40013000 	.word	0x40013000
 80046c8:	40003800 	.word	0x40003800
 80046cc:	40003c00 	.word	0x40003c00
 80046d0:	40013400 	.word	0x40013400
 80046d4:	40015000 	.word	0x40015000
 80046d8:	40015400 	.word	0x40015400
 80046dc:	08006b1c 	.word	0x08006b1c
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80046e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80046ee:	d007      	beq.n	8004700 <HAL_SPI_Init+0x2a4>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046f8:	d002      	beq.n	8004700 <HAL_SPI_Init+0x2a4>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10b      	bne.n	8004720 <HAL_SPI_Init+0x2c4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004710:	d903      	bls.n	800471a <HAL_SPI_Init+0x2be>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2202      	movs	r2, #2
 8004716:	631a      	str	r2, [r3, #48]	; 0x30
 8004718:	e002      	b.n	8004720 <HAL_SPI_Init+0x2c4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	431a      	orrs	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	431a      	orrs	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	ea42 0103 	orr.w	r1, r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	0c1b      	lsrs	r3, r3, #16
 8004760:	f003 0204 	and.w	r2, r3, #4
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	ea42 0103 	orr.w	r1, r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	430a      	orrs	r2, r1
 8004780:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69da      	ldr	r2, [r3, #28]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004790:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop

080047ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	099b      	lsrs	r3, r3, #6
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10f      	bne.n	80047f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	099b      	lsrs	r3, r3, #6
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d004      	beq.n	80047f0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	4798      	blx	r3
    return;
 80047ee:	e0d8      	b.n	80049a2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	085b      	lsrs	r3, r3, #1
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <HAL_SPI_IRQHandler+0x66>
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	09db      	lsrs	r3, r3, #7
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d004      	beq.n	8004812 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	4798      	blx	r3
    return;
 8004810:	e0c7      	b.n	80049a2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	095b      	lsrs	r3, r3, #5
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10c      	bne.n	8004838 <HAL_SPI_IRQHandler+0x8c>
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	099b      	lsrs	r3, r3, #6
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_SPI_IRQHandler+0x8c>
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	0a1b      	lsrs	r3, r3, #8
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 80b5 	beq.w	80049a2 <HAL_SPI_IRQHandler+0x1f6>
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	095b      	lsrs	r3, r3, #5
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 80ae 	beq.w	80049a2 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	099b      	lsrs	r3, r3, #6
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d023      	beq.n	800489a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b03      	cmp	r3, #3
 800485c:	d011      	beq.n	8004882 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004862:	f043 0204 	orr.w	r2, r3, #4
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800486a:	2300      	movs	r3, #0
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	e00b      	b.n	800489a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004882:	2300      	movs	r3, #0
 8004884:	613b      	str	r3, [r7, #16]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	693b      	ldr	r3, [r7, #16]
        return;
 8004898:	e083      	b.n	80049a2 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d014      	beq.n	80048d0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048aa:	f043 0201 	orr.w	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80048b2:	2300      	movs	r3, #0
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	0a1b      	lsrs	r3, r3, #8
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00c      	beq.n	80048f6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e0:	f043 0208 	orr.w	r2, r3, #8
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80048e8:	2300      	movs	r3, #0
 80048ea:	60bb      	str	r3, [r7, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	60bb      	str	r3, [r7, #8]
 80048f4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d050      	beq.n	80049a0 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800490c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d104      	bne.n	800492a <HAL_SPI_IRQHandler+0x17e>
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d034      	beq.n	8004994 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0203 	bic.w	r2, r2, #3
 8004938:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493e:	2b00      	cmp	r3, #0
 8004940:	d011      	beq.n	8004966 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004946:	4a18      	ldr	r2, [pc, #96]	; (80049a8 <HAL_SPI_IRQHandler+0x1fc>)
 8004948:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494e:	4618      	mov	r0, r3
 8004950:	f7fd fa88 	bl	8001e64 <HAL_DMA_Abort_IT>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d005      	beq.n	8004966 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800495e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496a:	2b00      	cmp	r3, #0
 800496c:	d016      	beq.n	800499c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004972:	4a0d      	ldr	r2, [pc, #52]	; (80049a8 <HAL_SPI_IRQHandler+0x1fc>)
 8004974:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497a:	4618      	mov	r0, r3
 800497c:	f7fd fa72 	bl	8001e64 <HAL_DMA_Abort_IT>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004992:	e003      	b.n	800499c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f809 	bl	80049ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800499a:	e000      	b.n	800499e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800499c:	bf00      	nop
    return;
 800499e:	bf00      	nop
 80049a0:	bf00      	nop
  }
}
 80049a2:	3720      	adds	r7, #32
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	080049c1 	.word	0x080049c1

080049ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f7ff ffe5 	bl	80049ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80049e2:	bf00      	nop
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e0a1      	b.n	8004b42 <HAL_TIM_Base_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a52      	ldr	r2, [pc, #328]	; (8004b4c <HAL_TIM_Base_Init+0x160>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d045      	beq.n	8004a94 <HAL_TIM_Base_Init+0xa8>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a10:	d040      	beq.n	8004a94 <HAL_TIM_Base_Init+0xa8>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a4e      	ldr	r2, [pc, #312]	; (8004b50 <HAL_TIM_Base_Init+0x164>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d03b      	beq.n	8004a94 <HAL_TIM_Base_Init+0xa8>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a4c      	ldr	r2, [pc, #304]	; (8004b54 <HAL_TIM_Base_Init+0x168>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d036      	beq.n	8004a94 <HAL_TIM_Base_Init+0xa8>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a4b      	ldr	r2, [pc, #300]	; (8004b58 <HAL_TIM_Base_Init+0x16c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d031      	beq.n	8004a94 <HAL_TIM_Base_Init+0xa8>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a49      	ldr	r2, [pc, #292]	; (8004b5c <HAL_TIM_Base_Init+0x170>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d02c      	beq.n	8004a94 <HAL_TIM_Base_Init+0xa8>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a48      	ldr	r2, [pc, #288]	; (8004b60 <HAL_TIM_Base_Init+0x174>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d027      	beq.n	8004a94 <HAL_TIM_Base_Init+0xa8>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a46      	ldr	r2, [pc, #280]	; (8004b64 <HAL_TIM_Base_Init+0x178>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d022      	beq.n	8004a94 <HAL_TIM_Base_Init+0xa8>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a45      	ldr	r2, [pc, #276]	; (8004b68 <HAL_TIM_Base_Init+0x17c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d01d      	beq.n	8004a94 <HAL_TIM_Base_Init+0xa8>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a43      	ldr	r2, [pc, #268]	; (8004b6c <HAL_TIM_Base_Init+0x180>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d018      	beq.n	8004a94 <HAL_TIM_Base_Init+0xa8>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a42      	ldr	r2, [pc, #264]	; (8004b70 <HAL_TIM_Base_Init+0x184>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d013      	beq.n	8004a94 <HAL_TIM_Base_Init+0xa8>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a40      	ldr	r2, [pc, #256]	; (8004b74 <HAL_TIM_Base_Init+0x188>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d00e      	beq.n	8004a94 <HAL_TIM_Base_Init+0xa8>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a3f      	ldr	r2, [pc, #252]	; (8004b78 <HAL_TIM_Base_Init+0x18c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d009      	beq.n	8004a94 <HAL_TIM_Base_Init+0xa8>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a3d      	ldr	r2, [pc, #244]	; (8004b7c <HAL_TIM_Base_Init+0x190>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d004      	beq.n	8004a94 <HAL_TIM_Base_Init+0xa8>
 8004a8a:	f240 1115 	movw	r1, #277	; 0x115
 8004a8e:	483c      	ldr	r0, [pc, #240]	; (8004b80 <HAL_TIM_Base_Init+0x194>)
 8004a90:	f7fc f94f 	bl	8000d32 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d014      	beq.n	8004ac6 <HAL_TIM_Base_Init+0xda>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2b10      	cmp	r3, #16
 8004aa2:	d010      	beq.n	8004ac6 <HAL_TIM_Base_Init+0xda>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2b20      	cmp	r3, #32
 8004aaa:	d00c      	beq.n	8004ac6 <HAL_TIM_Base_Init+0xda>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	2b40      	cmp	r3, #64	; 0x40
 8004ab2:	d008      	beq.n	8004ac6 <HAL_TIM_Base_Init+0xda>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b60      	cmp	r3, #96	; 0x60
 8004aba:	d004      	beq.n	8004ac6 <HAL_TIM_Base_Init+0xda>
 8004abc:	f44f 718b 	mov.w	r1, #278	; 0x116
 8004ac0:	482f      	ldr	r0, [pc, #188]	; (8004b80 <HAL_TIM_Base_Init+0x194>)
 8004ac2:	f7fc f936 	bl	8000d32 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00e      	beq.n	8004aec <HAL_TIM_Base_Init+0x100>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ad6:	d009      	beq.n	8004aec <HAL_TIM_Base_Init+0x100>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ae0:	d004      	beq.n	8004aec <HAL_TIM_Base_Init+0x100>
 8004ae2:	f240 1117 	movw	r1, #279	; 0x117
 8004ae6:	4826      	ldr	r0, [pc, #152]	; (8004b80 <HAL_TIM_Base_Init+0x194>)
 8004ae8:	f7fc f923 	bl	8000d32 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <HAL_TIM_Base_Init+0x11a>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	2b80      	cmp	r3, #128	; 0x80
 8004afa:	d004      	beq.n	8004b06 <HAL_TIM_Base_Init+0x11a>
 8004afc:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004b00:	481f      	ldr	r0, [pc, #124]	; (8004b80 <HAL_TIM_Base_Init+0x194>)
 8004b02:	f7fc f916 	bl	8000d32 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d106      	bne.n	8004b20 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fc fcbc 	bl	8001498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2202      	movs	r2, #2
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	4619      	mov	r1, r3
 8004b32:	4610      	mov	r0, r2
 8004b34:	f000 fb60 	bl	80051f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40010000 	.word	0x40010000
 8004b50:	40000400 	.word	0x40000400
 8004b54:	40000800 	.word	0x40000800
 8004b58:	40000c00 	.word	0x40000c00
 8004b5c:	40001000 	.word	0x40001000
 8004b60:	40001400 	.word	0x40001400
 8004b64:	40010400 	.word	0x40010400
 8004b68:	40014000 	.word	0x40014000
 8004b6c:	40014400 	.word	0x40014400
 8004b70:	40014800 	.word	0x40014800
 8004b74:	40001800 	.word	0x40001800
 8004b78:	40001c00 	.word	0x40001c00
 8004b7c:	40002000 	.word	0x40002000
 8004b80:	08006b54 	.word	0x08006b54

08004b84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d101      	bne.n	8004b9c <HAL_TIM_ConfigClockSource+0x18>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e31d      	b.n	80051d8 <HAL_TIM_ConfigClockSource+0x654>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb4:	d029      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x86>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bbe:	d024      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x86>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d020      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x86>
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b10      	cmp	r3, #16
 8004bce:	d01c      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x86>
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b20      	cmp	r3, #32
 8004bd6:	d018      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x86>
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b30      	cmp	r3, #48	; 0x30
 8004bde:	d014      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x86>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b40      	cmp	r3, #64	; 0x40
 8004be6:	d010      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x86>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b50      	cmp	r3, #80	; 0x50
 8004bee:	d00c      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x86>
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b60      	cmp	r3, #96	; 0x60
 8004bf6:	d008      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x86>
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b70      	cmp	r3, #112	; 0x70
 8004bfe:	d004      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x86>
 8004c00:	f241 210a 	movw	r1, #4618	; 0x120a
 8004c04:	488a      	ldr	r0, [pc, #552]	; (8004e30 <HAL_TIM_ConfigClockSource+0x2ac>)
 8004c06:	f7fc f894 	bl	8000d32 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4b87      	ldr	r3, [pc, #540]	; (8004e34 <HAL_TIM_ConfigClockSource+0x2b0>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c20:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b40      	cmp	r3, #64	; 0x40
 8004c30:	f000 8246 	beq.w	80050c0 <HAL_TIM_ConfigClockSource+0x53c>
 8004c34:	2b40      	cmp	r3, #64	; 0x40
 8004c36:	d80f      	bhi.n	8004c58 <HAL_TIM_ConfigClockSource+0xd4>
 8004c38:	2b10      	cmp	r3, #16
 8004c3a:	f000 8297 	beq.w	800516c <HAL_TIM_ConfigClockSource+0x5e8>
 8004c3e:	2b10      	cmp	r3, #16
 8004c40:	d803      	bhi.n	8004c4a <HAL_TIM_ConfigClockSource+0xc6>
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 8292 	beq.w	800516c <HAL_TIM_ConfigClockSource+0x5e8>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004c48:	e2bd      	b.n	80051c6 <HAL_TIM_ConfigClockSource+0x642>
  switch (sClockSourceConfig->ClockSource)
 8004c4a:	2b20      	cmp	r3, #32
 8004c4c:	f000 828e 	beq.w	800516c <HAL_TIM_ConfigClockSource+0x5e8>
 8004c50:	2b30      	cmp	r3, #48	; 0x30
 8004c52:	f000 828b 	beq.w	800516c <HAL_TIM_ConfigClockSource+0x5e8>
      break;
 8004c56:	e2b6      	b.n	80051c6 <HAL_TIM_ConfigClockSource+0x642>
  switch (sClockSourceConfig->ClockSource)
 8004c58:	2b70      	cmp	r3, #112	; 0x70
 8004c5a:	d06a      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0x1ae>
 8004c5c:	2b70      	cmp	r3, #112	; 0x70
 8004c5e:	d806      	bhi.n	8004c6e <HAL_TIM_ConfigClockSource+0xea>
 8004c60:	2b50      	cmp	r3, #80	; 0x50
 8004c62:	f000 8174 	beq.w	8004f4e <HAL_TIM_ConfigClockSource+0x3ca>
 8004c66:	2b60      	cmp	r3, #96	; 0x60
 8004c68:	f000 81c7 	beq.w	8004ffa <HAL_TIM_ConfigClockSource+0x476>
      break;
 8004c6c:	e2ab      	b.n	80051c6 <HAL_TIM_ConfigClockSource+0x642>
  switch (sClockSourceConfig->ClockSource)
 8004c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c72:	d004      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0xfa>
 8004c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c78:	f000 80f8 	beq.w	8004e6c <HAL_TIM_ConfigClockSource+0x2e8>
      break;
 8004c7c:	e2a3      	b.n	80051c6 <HAL_TIM_ConfigClockSource+0x642>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a6d      	ldr	r2, [pc, #436]	; (8004e38 <HAL_TIM_ConfigClockSource+0x2b4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	f000 829d 	beq.w	80051c4 <HAL_TIM_ConfigClockSource+0x640>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c92:	f000 8297 	beq.w	80051c4 <HAL_TIM_ConfigClockSource+0x640>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a68      	ldr	r2, [pc, #416]	; (8004e3c <HAL_TIM_ConfigClockSource+0x2b8>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	f000 8291 	beq.w	80051c4 <HAL_TIM_ConfigClockSource+0x640>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a66      	ldr	r2, [pc, #408]	; (8004e40 <HAL_TIM_ConfigClockSource+0x2bc>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	f000 828b 	beq.w	80051c4 <HAL_TIM_ConfigClockSource+0x640>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a64      	ldr	r2, [pc, #400]	; (8004e44 <HAL_TIM_ConfigClockSource+0x2c0>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	f000 8285 	beq.w	80051c4 <HAL_TIM_ConfigClockSource+0x640>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a62      	ldr	r2, [pc, #392]	; (8004e48 <HAL_TIM_ConfigClockSource+0x2c4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	f000 827f 	beq.w	80051c4 <HAL_TIM_ConfigClockSource+0x640>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a60      	ldr	r2, [pc, #384]	; (8004e4c <HAL_TIM_ConfigClockSource+0x2c8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	f000 8279 	beq.w	80051c4 <HAL_TIM_ConfigClockSource+0x640>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a5e      	ldr	r2, [pc, #376]	; (8004e50 <HAL_TIM_ConfigClockSource+0x2cc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	f000 8273 	beq.w	80051c4 <HAL_TIM_ConfigClockSource+0x640>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a5c      	ldr	r2, [pc, #368]	; (8004e54 <HAL_TIM_ConfigClockSource+0x2d0>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	f000 826d 	beq.w	80051c4 <HAL_TIM_ConfigClockSource+0x640>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a5a      	ldr	r2, [pc, #360]	; (8004e58 <HAL_TIM_ConfigClockSource+0x2d4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	f000 8267 	beq.w	80051c4 <HAL_TIM_ConfigClockSource+0x640>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a58      	ldr	r2, [pc, #352]	; (8004e5c <HAL_TIM_ConfigClockSource+0x2d8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	f000 8261 	beq.w	80051c4 <HAL_TIM_ConfigClockSource+0x640>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a56      	ldr	r2, [pc, #344]	; (8004e60 <HAL_TIM_ConfigClockSource+0x2dc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	f000 825b 	beq.w	80051c4 <HAL_TIM_ConfigClockSource+0x640>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a54      	ldr	r2, [pc, #336]	; (8004e64 <HAL_TIM_ConfigClockSource+0x2e0>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	f000 8255 	beq.w	80051c4 <HAL_TIM_ConfigClockSource+0x640>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a52      	ldr	r2, [pc, #328]	; (8004e68 <HAL_TIM_ConfigClockSource+0x2e4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	f000 824f 	beq.w	80051c4 <HAL_TIM_ConfigClockSource+0x640>
 8004d26:	f241 2116 	movw	r1, #4630	; 0x1216
 8004d2a:	4841      	ldr	r0, [pc, #260]	; (8004e30 <HAL_TIM_ConfigClockSource+0x2ac>)
 8004d2c:	f7fc f801 	bl	8000d32 <assert_failed>
      break;
 8004d30:	e248      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x640>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a40      	ldr	r2, [pc, #256]	; (8004e38 <HAL_TIM_ConfigClockSource+0x2b4>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d027      	beq.n	8004d8c <HAL_TIM_ConfigClockSource+0x208>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d44:	d022      	beq.n	8004d8c <HAL_TIM_ConfigClockSource+0x208>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a3c      	ldr	r2, [pc, #240]	; (8004e3c <HAL_TIM_ConfigClockSource+0x2b8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d01d      	beq.n	8004d8c <HAL_TIM_ConfigClockSource+0x208>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a3a      	ldr	r2, [pc, #232]	; (8004e40 <HAL_TIM_ConfigClockSource+0x2bc>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d018      	beq.n	8004d8c <HAL_TIM_ConfigClockSource+0x208>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a39      	ldr	r2, [pc, #228]	; (8004e44 <HAL_TIM_ConfigClockSource+0x2c0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d013      	beq.n	8004d8c <HAL_TIM_ConfigClockSource+0x208>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a39      	ldr	r2, [pc, #228]	; (8004e50 <HAL_TIM_ConfigClockSource+0x2cc>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d00e      	beq.n	8004d8c <HAL_TIM_ConfigClockSource+0x208>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a38      	ldr	r2, [pc, #224]	; (8004e54 <HAL_TIM_ConfigClockSource+0x2d0>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d009      	beq.n	8004d8c <HAL_TIM_ConfigClockSource+0x208>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a38      	ldr	r2, [pc, #224]	; (8004e60 <HAL_TIM_ConfigClockSource+0x2dc>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d004      	beq.n	8004d8c <HAL_TIM_ConfigClockSource+0x208>
 8004d82:	f241 211d 	movw	r1, #4637	; 0x121d
 8004d86:	482a      	ldr	r0, [pc, #168]	; (8004e30 <HAL_TIM_ConfigClockSource+0x2ac>)
 8004d88:	f7fb ffd3 	bl	8000d32 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d013      	beq.n	8004dbc <HAL_TIM_ConfigClockSource+0x238>
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d9c:	d00e      	beq.n	8004dbc <HAL_TIM_ConfigClockSource+0x238>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004da6:	d009      	beq.n	8004dbc <HAL_TIM_ConfigClockSource+0x238>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004db0:	d004      	beq.n	8004dbc <HAL_TIM_ConfigClockSource+0x238>
 8004db2:	f44f 5191 	mov.w	r1, #4640	; 0x1220
 8004db6:	481e      	ldr	r0, [pc, #120]	; (8004e30 <HAL_TIM_ConfigClockSource+0x2ac>)
 8004db8:	f7fb ffbb 	bl	8000d32 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc4:	d014      	beq.n	8004df0 <HAL_TIM_ConfigClockSource+0x26c>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d010      	beq.n	8004df0 <HAL_TIM_ConfigClockSource+0x26c>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00c      	beq.n	8004df0 <HAL_TIM_ConfigClockSource+0x26c>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d008      	beq.n	8004df0 <HAL_TIM_ConfigClockSource+0x26c>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2b0a      	cmp	r3, #10
 8004de4:	d004      	beq.n	8004df0 <HAL_TIM_ConfigClockSource+0x26c>
 8004de6:	f241 2121 	movw	r1, #4641	; 0x1221
 8004dea:	4811      	ldr	r0, [pc, #68]	; (8004e30 <HAL_TIM_ConfigClockSource+0x2ac>)
 8004dec:	f7fb ffa1 	bl	8000d32 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	2b0f      	cmp	r3, #15
 8004df6:	d904      	bls.n	8004e02 <HAL_TIM_ConfigClockSource+0x27e>
 8004df8:	f241 2122 	movw	r1, #4642	; 0x1222
 8004dfc:	480c      	ldr	r0, [pc, #48]	; (8004e30 <HAL_TIM_ConfigClockSource+0x2ac>)
 8004dfe:	f7fb ff98 	bl	8000d32 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	6899      	ldr	r1, [r3, #8]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f000 fb0b 	bl	800542c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	609a      	str	r2, [r3, #8]
      break;
 8004e2e:	e1ca      	b.n	80051c6 <HAL_TIM_ConfigClockSource+0x642>
 8004e30:	08006b54 	.word	0x08006b54
 8004e34:	fffeff88 	.word	0xfffeff88
 8004e38:	40010000 	.word	0x40010000
 8004e3c:	40000400 	.word	0x40000400
 8004e40:	40000800 	.word	0x40000800
 8004e44:	40000c00 	.word	0x40000c00
 8004e48:	40001000 	.word	0x40001000
 8004e4c:	40001400 	.word	0x40001400
 8004e50:	40010400 	.word	0x40010400
 8004e54:	40014000 	.word	0x40014000
 8004e58:	40014400 	.word	0x40014400
 8004e5c:	40014800 	.word	0x40014800
 8004e60:	40001800 	.word	0x40001800
 8004e64:	40001c00 	.word	0x40001c00
 8004e68:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a8d      	ldr	r2, [pc, #564]	; (80050a8 <HAL_TIM_ConfigClockSource+0x524>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d01d      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0x32e>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7e:	d018      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0x32e>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a89      	ldr	r2, [pc, #548]	; (80050ac <HAL_TIM_ConfigClockSource+0x528>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d013      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0x32e>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a88      	ldr	r2, [pc, #544]	; (80050b0 <HAL_TIM_ConfigClockSource+0x52c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d00e      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0x32e>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a86      	ldr	r2, [pc, #536]	; (80050b4 <HAL_TIM_ConfigClockSource+0x530>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d009      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0x32e>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a85      	ldr	r2, [pc, #532]	; (80050b8 <HAL_TIM_ConfigClockSource+0x534>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d004      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0x32e>
 8004ea8:	f241 2135 	movw	r1, #4661	; 0x1235
 8004eac:	4883      	ldr	r0, [pc, #524]	; (80050bc <HAL_TIM_ConfigClockSource+0x538>)
 8004eae:	f7fb ff40 	bl	8000d32 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d013      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x35e>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec2:	d00e      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x35e>
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ecc:	d009      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x35e>
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ed6:	d004      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x35e>
 8004ed8:	f241 2138 	movw	r1, #4664	; 0x1238
 8004edc:	4877      	ldr	r0, [pc, #476]	; (80050bc <HAL_TIM_ConfigClockSource+0x538>)
 8004ede:	f7fb ff28 	bl	8000d32 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eea:	d014      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x392>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d010      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x392>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00c      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x392>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d008      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x392>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	2b0a      	cmp	r3, #10
 8004f0a:	d004      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x392>
 8004f0c:	f241 2139 	movw	r1, #4665	; 0x1239
 8004f10:	486a      	ldr	r0, [pc, #424]	; (80050bc <HAL_TIM_ConfigClockSource+0x538>)
 8004f12:	f7fb ff0e 	bl	8000d32 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	2b0f      	cmp	r3, #15
 8004f1c:	d904      	bls.n	8004f28 <HAL_TIM_ConfigClockSource+0x3a4>
 8004f1e:	f241 213a 	movw	r1, #4666	; 0x123a
 8004f22:	4866      	ldr	r0, [pc, #408]	; (80050bc <HAL_TIM_ConfigClockSource+0x538>)
 8004f24:	f7fb ff05 	bl	8000d32 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6818      	ldr	r0, [r3, #0]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	6899      	ldr	r1, [r3, #8]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f000 fa78 	bl	800542c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f4a:	609a      	str	r2, [r3, #8]
      break;
 8004f4c:	e13b      	b.n	80051c6 <HAL_TIM_ConfigClockSource+0x642>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a55      	ldr	r2, [pc, #340]	; (80050a8 <HAL_TIM_ConfigClockSource+0x524>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d01d      	beq.n	8004f94 <HAL_TIM_ConfigClockSource+0x410>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f60:	d018      	beq.n	8004f94 <HAL_TIM_ConfigClockSource+0x410>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a51      	ldr	r2, [pc, #324]	; (80050ac <HAL_TIM_ConfigClockSource+0x528>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d013      	beq.n	8004f94 <HAL_TIM_ConfigClockSource+0x410>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a4f      	ldr	r2, [pc, #316]	; (80050b0 <HAL_TIM_ConfigClockSource+0x52c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d00e      	beq.n	8004f94 <HAL_TIM_ConfigClockSource+0x410>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a4e      	ldr	r2, [pc, #312]	; (80050b4 <HAL_TIM_ConfigClockSource+0x530>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d009      	beq.n	8004f94 <HAL_TIM_ConfigClockSource+0x410>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a4c      	ldr	r2, [pc, #304]	; (80050b8 <HAL_TIM_ConfigClockSource+0x534>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d004      	beq.n	8004f94 <HAL_TIM_ConfigClockSource+0x410>
 8004f8a:	f241 2149 	movw	r1, #4681	; 0x1249
 8004f8e:	484b      	ldr	r0, [pc, #300]	; (80050bc <HAL_TIM_ConfigClockSource+0x538>)
 8004f90:	f7fb fecf 	bl	8000d32 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f9c:	d014      	beq.n	8004fc8 <HAL_TIM_ConfigClockSource+0x444>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d010      	beq.n	8004fc8 <HAL_TIM_ConfigClockSource+0x444>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00c      	beq.n	8004fc8 <HAL_TIM_ConfigClockSource+0x444>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d008      	beq.n	8004fc8 <HAL_TIM_ConfigClockSource+0x444>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b0a      	cmp	r3, #10
 8004fbc:	d004      	beq.n	8004fc8 <HAL_TIM_ConfigClockSource+0x444>
 8004fbe:	f241 214c 	movw	r1, #4684	; 0x124c
 8004fc2:	483e      	ldr	r0, [pc, #248]	; (80050bc <HAL_TIM_ConfigClockSource+0x538>)
 8004fc4:	f7fb feb5 	bl	8000d32 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	2b0f      	cmp	r3, #15
 8004fce:	d904      	bls.n	8004fda <HAL_TIM_ConfigClockSource+0x456>
 8004fd0:	f241 214d 	movw	r1, #4685	; 0x124d
 8004fd4:	4839      	ldr	r0, [pc, #228]	; (80050bc <HAL_TIM_ConfigClockSource+0x538>)
 8004fd6:	f7fb feac 	bl	8000d32 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	6859      	ldr	r1, [r3, #4]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	f000 f9a6 	bl	8005338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2150      	movs	r1, #80	; 0x50
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 f9ff 	bl	80053f6 <TIM_ITRx_SetConfig>
      break;
 8004ff8:	e0e5      	b.n	80051c6 <HAL_TIM_ConfigClockSource+0x642>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a2a      	ldr	r2, [pc, #168]	; (80050a8 <HAL_TIM_ConfigClockSource+0x524>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d01d      	beq.n	8005040 <HAL_TIM_ConfigClockSource+0x4bc>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500c:	d018      	beq.n	8005040 <HAL_TIM_ConfigClockSource+0x4bc>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a26      	ldr	r2, [pc, #152]	; (80050ac <HAL_TIM_ConfigClockSource+0x528>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d013      	beq.n	8005040 <HAL_TIM_ConfigClockSource+0x4bc>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a24      	ldr	r2, [pc, #144]	; (80050b0 <HAL_TIM_ConfigClockSource+0x52c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d00e      	beq.n	8005040 <HAL_TIM_ConfigClockSource+0x4bc>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a23      	ldr	r2, [pc, #140]	; (80050b4 <HAL_TIM_ConfigClockSource+0x530>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d009      	beq.n	8005040 <HAL_TIM_ConfigClockSource+0x4bc>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a21      	ldr	r2, [pc, #132]	; (80050b8 <HAL_TIM_ConfigClockSource+0x534>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d004      	beq.n	8005040 <HAL_TIM_ConfigClockSource+0x4bc>
 8005036:	f241 2159 	movw	r1, #4697	; 0x1259
 800503a:	4820      	ldr	r0, [pc, #128]	; (80050bc <HAL_TIM_ConfigClockSource+0x538>)
 800503c:	f7fb fe79 	bl	8000d32 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005048:	d014      	beq.n	8005074 <HAL_TIM_ConfigClockSource+0x4f0>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d010      	beq.n	8005074 <HAL_TIM_ConfigClockSource+0x4f0>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00c      	beq.n	8005074 <HAL_TIM_ConfigClockSource+0x4f0>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b02      	cmp	r3, #2
 8005060:	d008      	beq.n	8005074 <HAL_TIM_ConfigClockSource+0x4f0>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b0a      	cmp	r3, #10
 8005068:	d004      	beq.n	8005074 <HAL_TIM_ConfigClockSource+0x4f0>
 800506a:	f241 215c 	movw	r1, #4700	; 0x125c
 800506e:	4813      	ldr	r0, [pc, #76]	; (80050bc <HAL_TIM_ConfigClockSource+0x538>)
 8005070:	f7fb fe5f 	bl	8000d32 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	2b0f      	cmp	r3, #15
 800507a:	d904      	bls.n	8005086 <HAL_TIM_ConfigClockSource+0x502>
 800507c:	f241 215d 	movw	r1, #4701	; 0x125d
 8005080:	480e      	ldr	r0, [pc, #56]	; (80050bc <HAL_TIM_ConfigClockSource+0x538>)
 8005082:	f7fb fe56 	bl	8000d32 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	6859      	ldr	r1, [r3, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	461a      	mov	r2, r3
 8005094:	f000 f97f 	bl	8005396 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2160      	movs	r1, #96	; 0x60
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 f9a9 	bl	80053f6 <TIM_ITRx_SetConfig>
      break;
 80050a4:	e08f      	b.n	80051c6 <HAL_TIM_ConfigClockSource+0x642>
 80050a6:	bf00      	nop
 80050a8:	40010000 	.word	0x40010000
 80050ac:	40000400 	.word	0x40000400
 80050b0:	40000800 	.word	0x40000800
 80050b4:	40000c00 	.word	0x40000c00
 80050b8:	40010400 	.word	0x40010400
 80050bc:	08006b54 	.word	0x08006b54
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a46      	ldr	r2, [pc, #280]	; (80051e0 <HAL_TIM_ConfigClockSource+0x65c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d01d      	beq.n	8005106 <HAL_TIM_ConfigClockSource+0x582>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d2:	d018      	beq.n	8005106 <HAL_TIM_ConfigClockSource+0x582>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a42      	ldr	r2, [pc, #264]	; (80051e4 <HAL_TIM_ConfigClockSource+0x660>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d013      	beq.n	8005106 <HAL_TIM_ConfigClockSource+0x582>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a41      	ldr	r2, [pc, #260]	; (80051e8 <HAL_TIM_ConfigClockSource+0x664>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00e      	beq.n	8005106 <HAL_TIM_ConfigClockSource+0x582>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a3f      	ldr	r2, [pc, #252]	; (80051ec <HAL_TIM_ConfigClockSource+0x668>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d009      	beq.n	8005106 <HAL_TIM_ConfigClockSource+0x582>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a3e      	ldr	r2, [pc, #248]	; (80051f0 <HAL_TIM_ConfigClockSource+0x66c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d004      	beq.n	8005106 <HAL_TIM_ConfigClockSource+0x582>
 80050fc:	f241 2169 	movw	r1, #4713	; 0x1269
 8005100:	483c      	ldr	r0, [pc, #240]	; (80051f4 <HAL_TIM_ConfigClockSource+0x670>)
 8005102:	f7fb fe16 	bl	8000d32 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800510e:	d014      	beq.n	800513a <HAL_TIM_ConfigClockSource+0x5b6>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d010      	beq.n	800513a <HAL_TIM_ConfigClockSource+0x5b6>
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00c      	beq.n	800513a <HAL_TIM_ConfigClockSource+0x5b6>
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b02      	cmp	r3, #2
 8005126:	d008      	beq.n	800513a <HAL_TIM_ConfigClockSource+0x5b6>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b0a      	cmp	r3, #10
 800512e:	d004      	beq.n	800513a <HAL_TIM_ConfigClockSource+0x5b6>
 8005130:	f241 216c 	movw	r1, #4716	; 0x126c
 8005134:	482f      	ldr	r0, [pc, #188]	; (80051f4 <HAL_TIM_ConfigClockSource+0x670>)
 8005136:	f7fb fdfc 	bl	8000d32 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	2b0f      	cmp	r3, #15
 8005140:	d904      	bls.n	800514c <HAL_TIM_ConfigClockSource+0x5c8>
 8005142:	f241 216d 	movw	r1, #4717	; 0x126d
 8005146:	482b      	ldr	r0, [pc, #172]	; (80051f4 <HAL_TIM_ConfigClockSource+0x670>)
 8005148:	f7fb fdf3 	bl	8000d32 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6818      	ldr	r0, [r3, #0]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	6859      	ldr	r1, [r3, #4]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	461a      	mov	r2, r3
 800515a:	f000 f8ed 	bl	8005338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2140      	movs	r1, #64	; 0x40
 8005164:	4618      	mov	r0, r3
 8005166:	f000 f946 	bl	80053f6 <TIM_ITRx_SetConfig>
      break;
 800516a:	e02c      	b.n	80051c6 <HAL_TIM_ConfigClockSource+0x642>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a1b      	ldr	r2, [pc, #108]	; (80051e0 <HAL_TIM_ConfigClockSource+0x65c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d01d      	beq.n	80051b2 <HAL_TIM_ConfigClockSource+0x62e>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517e:	d018      	beq.n	80051b2 <HAL_TIM_ConfigClockSource+0x62e>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a17      	ldr	r2, [pc, #92]	; (80051e4 <HAL_TIM_ConfigClockSource+0x660>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d013      	beq.n	80051b2 <HAL_TIM_ConfigClockSource+0x62e>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a16      	ldr	r2, [pc, #88]	; (80051e8 <HAL_TIM_ConfigClockSource+0x664>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00e      	beq.n	80051b2 <HAL_TIM_ConfigClockSource+0x62e>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a14      	ldr	r2, [pc, #80]	; (80051ec <HAL_TIM_ConfigClockSource+0x668>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d009      	beq.n	80051b2 <HAL_TIM_ConfigClockSource+0x62e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a13      	ldr	r2, [pc, #76]	; (80051f0 <HAL_TIM_ConfigClockSource+0x66c>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d004      	beq.n	80051b2 <HAL_TIM_ConfigClockSource+0x62e>
 80051a8:	f241 217c 	movw	r1, #4732	; 0x127c
 80051ac:	4811      	ldr	r0, [pc, #68]	; (80051f4 <HAL_TIM_ConfigClockSource+0x670>)
 80051ae:	f7fb fdc0 	bl	8000d32 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4619      	mov	r1, r3
 80051bc:	4610      	mov	r0, r2
 80051be:	f000 f91a 	bl	80053f6 <TIM_ITRx_SetConfig>
      break;
 80051c2:	e000      	b.n	80051c6 <HAL_TIM_ConfigClockSource+0x642>
      break;
 80051c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40010000 	.word	0x40010000
 80051e4:	40000400 	.word	0x40000400
 80051e8:	40000800 	.word	0x40000800
 80051ec:	40000c00 	.word	0x40000c00
 80051f0:	40010400 	.word	0x40010400
 80051f4:	08006b54 	.word	0x08006b54

080051f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a40      	ldr	r2, [pc, #256]	; (800530c <TIM_Base_SetConfig+0x114>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d013      	beq.n	8005238 <TIM_Base_SetConfig+0x40>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005216:	d00f      	beq.n	8005238 <TIM_Base_SetConfig+0x40>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a3d      	ldr	r2, [pc, #244]	; (8005310 <TIM_Base_SetConfig+0x118>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d00b      	beq.n	8005238 <TIM_Base_SetConfig+0x40>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a3c      	ldr	r2, [pc, #240]	; (8005314 <TIM_Base_SetConfig+0x11c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d007      	beq.n	8005238 <TIM_Base_SetConfig+0x40>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a3b      	ldr	r2, [pc, #236]	; (8005318 <TIM_Base_SetConfig+0x120>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d003      	beq.n	8005238 <TIM_Base_SetConfig+0x40>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a3a      	ldr	r2, [pc, #232]	; (800531c <TIM_Base_SetConfig+0x124>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d108      	bne.n	800524a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	4313      	orrs	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a2f      	ldr	r2, [pc, #188]	; (800530c <TIM_Base_SetConfig+0x114>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d02b      	beq.n	80052aa <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005258:	d027      	beq.n	80052aa <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a2c      	ldr	r2, [pc, #176]	; (8005310 <TIM_Base_SetConfig+0x118>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d023      	beq.n	80052aa <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a2b      	ldr	r2, [pc, #172]	; (8005314 <TIM_Base_SetConfig+0x11c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d01f      	beq.n	80052aa <TIM_Base_SetConfig+0xb2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a2a      	ldr	r2, [pc, #168]	; (8005318 <TIM_Base_SetConfig+0x120>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d01b      	beq.n	80052aa <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a29      	ldr	r2, [pc, #164]	; (800531c <TIM_Base_SetConfig+0x124>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d017      	beq.n	80052aa <TIM_Base_SetConfig+0xb2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a28      	ldr	r2, [pc, #160]	; (8005320 <TIM_Base_SetConfig+0x128>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d013      	beq.n	80052aa <TIM_Base_SetConfig+0xb2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a27      	ldr	r2, [pc, #156]	; (8005324 <TIM_Base_SetConfig+0x12c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d00f      	beq.n	80052aa <TIM_Base_SetConfig+0xb2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a26      	ldr	r2, [pc, #152]	; (8005328 <TIM_Base_SetConfig+0x130>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d00b      	beq.n	80052aa <TIM_Base_SetConfig+0xb2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a25      	ldr	r2, [pc, #148]	; (800532c <TIM_Base_SetConfig+0x134>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d007      	beq.n	80052aa <TIM_Base_SetConfig+0xb2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a24      	ldr	r2, [pc, #144]	; (8005330 <TIM_Base_SetConfig+0x138>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d003      	beq.n	80052aa <TIM_Base_SetConfig+0xb2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a23      	ldr	r2, [pc, #140]	; (8005334 <TIM_Base_SetConfig+0x13c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d108      	bne.n	80052bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a0a      	ldr	r2, [pc, #40]	; (800530c <TIM_Base_SetConfig+0x114>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d003      	beq.n	80052f0 <TIM_Base_SetConfig+0xf8>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a0c      	ldr	r2, [pc, #48]	; (800531c <TIM_Base_SetConfig+0x124>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d103      	bne.n	80052f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	615a      	str	r2, [r3, #20]
}
 80052fe:	bf00      	nop
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40010000 	.word	0x40010000
 8005310:	40000400 	.word	0x40000400
 8005314:	40000800 	.word	0x40000800
 8005318:	40000c00 	.word	0x40000c00
 800531c:	40010400 	.word	0x40010400
 8005320:	40014000 	.word	0x40014000
 8005324:	40014400 	.word	0x40014400
 8005328:	40014800 	.word	0x40014800
 800532c:	40001800 	.word	0x40001800
 8005330:	40001c00 	.word	0x40001c00
 8005334:	40002000 	.word	0x40002000

08005338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	f023 0201 	bic.w	r2, r3, #1
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	011b      	lsls	r3, r3, #4
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	4313      	orrs	r3, r2
 800536c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f023 030a 	bic.w	r3, r3, #10
 8005374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	4313      	orrs	r3, r2
 800537c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	621a      	str	r2, [r3, #32]
}
 800538a:	bf00      	nop
 800538c:	371c      	adds	r7, #28
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005396:	b480      	push	{r7}
 8005398:	b087      	sub	sp, #28
 800539a:	af00      	add	r7, sp, #0
 800539c:	60f8      	str	r0, [r7, #12]
 800539e:	60b9      	str	r1, [r7, #8]
 80053a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	f023 0210 	bic.w	r2, r3, #16
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	031b      	lsls	r3, r3, #12
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	621a      	str	r2, [r3, #32]
}
 80053ea:	bf00      	nop
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b085      	sub	sp, #20
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4313      	orrs	r3, r2
 8005414:	f043 0307 	orr.w	r3, r3, #7
 8005418:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	609a      	str	r2, [r3, #8]
}
 8005420:	bf00      	nop
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
 8005438:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005446:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	021a      	lsls	r2, r3, #8
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	431a      	orrs	r2, r3
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4313      	orrs	r3, r2
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	4313      	orrs	r3, r2
 8005458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	609a      	str	r2, [r3, #8]
}
 8005460:	bf00      	nop
 8005462:	371c      	adds	r7, #28
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a97      	ldr	r2, [pc, #604]	; (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d027      	beq.n	80054d0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005488:	d022      	beq.n	80054d0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a93      	ldr	r2, [pc, #588]	; (80056dc <HAL_TIMEx_MasterConfigSynchronization+0x270>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d01d      	beq.n	80054d0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a91      	ldr	r2, [pc, #580]	; (80056e0 <HAL_TIMEx_MasterConfigSynchronization+0x274>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d018      	beq.n	80054d0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a90      	ldr	r2, [pc, #576]	; (80056e4 <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d013      	beq.n	80054d0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a8e      	ldr	r2, [pc, #568]	; (80056e8 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d00e      	beq.n	80054d0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a8d      	ldr	r2, [pc, #564]	; (80056ec <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d009      	beq.n	80054d0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a8b      	ldr	r2, [pc, #556]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d004      	beq.n	80054d0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80054c6:	f240 6166 	movw	r1, #1638	; 0x666
 80054ca:	488a      	ldr	r0, [pc, #552]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0x288>)
 80054cc:	f7fb fc31 	bl	8000d32 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d020      	beq.n	800551a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b10      	cmp	r3, #16
 80054de:	d01c      	beq.n	800551a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b20      	cmp	r3, #32
 80054e6:	d018      	beq.n	800551a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b30      	cmp	r3, #48	; 0x30
 80054ee:	d014      	beq.n	800551a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b40      	cmp	r3, #64	; 0x40
 80054f6:	d010      	beq.n	800551a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b50      	cmp	r3, #80	; 0x50
 80054fe:	d00c      	beq.n	800551a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b60      	cmp	r3, #96	; 0x60
 8005506:	d008      	beq.n	800551a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b70      	cmp	r3, #112	; 0x70
 800550e:	d004      	beq.n	800551a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005510:	f240 6167 	movw	r1, #1639	; 0x667
 8005514:	4877      	ldr	r0, [pc, #476]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0x288>)
 8005516:	f7fb fc0c 	bl	8000d32 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	2b80      	cmp	r3, #128	; 0x80
 8005520:	d008      	beq.n	8005534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d004      	beq.n	8005534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800552a:	f44f 61cd 	mov.w	r1, #1640	; 0x668
 800552e:	4871      	ldr	r0, [pc, #452]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0x288>)
 8005530:	f7fb fbff 	bl	8000d32 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800553a:	2b01      	cmp	r3, #1
 800553c:	d101      	bne.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800553e:	2302      	movs	r3, #2
 8005540:	e0c6      	b.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0x264>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2202      	movs	r2, #2
 800554e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a5c      	ldr	r2, [pc, #368]	; (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d004      	beq.n	8005576 <HAL_TIMEx_MasterConfigSynchronization+0x10a>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a5f      	ldr	r2, [pc, #380]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d161      	bne.n	800563a <HAL_TIMEx_MasterConfigSynchronization+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d054      	beq.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005586:	d04f      	beq.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005590:	d04a      	beq.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800559a:	d045      	beq.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055a4:	d040      	beq.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80055ae:	d03b      	beq.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80055b8:	d036      	beq.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80055c2:	d031      	beq.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80055cc:	d02c      	beq.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055d6:	d027      	beq.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 80055e0:	d022      	beq.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80055ea:	d01d      	beq.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 80055f4:	d018      	beq.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055fe:	d013      	beq.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8005608:	d00e      	beq.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8005612:	d009      	beq.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 800561c:	d004      	beq.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
 800561e:	f240 617a 	movw	r1, #1658	; 0x67a
 8005622:	4834      	ldr	r0, [pc, #208]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0x288>)
 8005624:	f7fb fb85 	bl	8000d32 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800562e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005640:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	4313      	orrs	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a1f      	ldr	r2, [pc, #124]	; (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d022      	beq.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0x238>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005666:	d01d      	beq.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0x238>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a1b      	ldr	r2, [pc, #108]	; (80056dc <HAL_TIMEx_MasterConfigSynchronization+0x270>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d018      	beq.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0x238>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a1a      	ldr	r2, [pc, #104]	; (80056e0 <HAL_TIMEx_MasterConfigSynchronization+0x274>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d013      	beq.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0x238>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a18      	ldr	r2, [pc, #96]	; (80056e4 <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d00e      	beq.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0x238>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a19      	ldr	r2, [pc, #100]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d009      	beq.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0x238>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a18      	ldr	r2, [pc, #96]	; (80056f8 <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d004      	beq.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0x238>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a17      	ldr	r2, [pc, #92]	; (80056fc <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d10c      	bne.n	80056be <HAL_TIMEx_MasterConfigSynchronization+0x252>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	40010000 	.word	0x40010000
 80056dc:	40000400 	.word	0x40000400
 80056e0:	40000800 	.word	0x40000800
 80056e4:	40000c00 	.word	0x40000c00
 80056e8:	40001000 	.word	0x40001000
 80056ec:	40001400 	.word	0x40001400
 80056f0:	40010400 	.word	0x40010400
 80056f4:	08006b8c 	.word	0x08006b8c
 80056f8:	40014000 	.word	0x40014000
 80056fc:	40001800 	.word	0x40001800

08005700 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e09f      	b.n	8005852 <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d02d      	beq.n	8005776 <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a4f      	ldr	r2, [pc, #316]	; (800585c <HAL_UART_Init+0x15c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d055      	beq.n	80057d0 <HAL_UART_Init+0xd0>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a4d      	ldr	r2, [pc, #308]	; (8005860 <HAL_UART_Init+0x160>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d050      	beq.n	80057d0 <HAL_UART_Init+0xd0>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a4c      	ldr	r2, [pc, #304]	; (8005864 <HAL_UART_Init+0x164>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d04b      	beq.n	80057d0 <HAL_UART_Init+0xd0>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a4a      	ldr	r2, [pc, #296]	; (8005868 <HAL_UART_Init+0x168>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d046      	beq.n	80057d0 <HAL_UART_Init+0xd0>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a49      	ldr	r2, [pc, #292]	; (800586c <HAL_UART_Init+0x16c>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d041      	beq.n	80057d0 <HAL_UART_Init+0xd0>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a47      	ldr	r2, [pc, #284]	; (8005870 <HAL_UART_Init+0x170>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d03c      	beq.n	80057d0 <HAL_UART_Init+0xd0>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a46      	ldr	r2, [pc, #280]	; (8005874 <HAL_UART_Init+0x174>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d037      	beq.n	80057d0 <HAL_UART_Init+0xd0>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a44      	ldr	r2, [pc, #272]	; (8005878 <HAL_UART_Init+0x178>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d032      	beq.n	80057d0 <HAL_UART_Init+0xd0>
 800576a:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800576e:	4843      	ldr	r0, [pc, #268]	; (800587c <HAL_UART_Init+0x17c>)
 8005770:	f7fb fadf 	bl	8000d32 <assert_failed>
 8005774:	e02c      	b.n	80057d0 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a38      	ldr	r2, [pc, #224]	; (800585c <HAL_UART_Init+0x15c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d027      	beq.n	80057d0 <HAL_UART_Init+0xd0>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a36      	ldr	r2, [pc, #216]	; (8005860 <HAL_UART_Init+0x160>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d022      	beq.n	80057d0 <HAL_UART_Init+0xd0>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a35      	ldr	r2, [pc, #212]	; (8005864 <HAL_UART_Init+0x164>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d01d      	beq.n	80057d0 <HAL_UART_Init+0xd0>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a33      	ldr	r2, [pc, #204]	; (8005868 <HAL_UART_Init+0x168>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d018      	beq.n	80057d0 <HAL_UART_Init+0xd0>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a32      	ldr	r2, [pc, #200]	; (800586c <HAL_UART_Init+0x16c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d013      	beq.n	80057d0 <HAL_UART_Init+0xd0>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a30      	ldr	r2, [pc, #192]	; (8005870 <HAL_UART_Init+0x170>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00e      	beq.n	80057d0 <HAL_UART_Init+0xd0>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a2f      	ldr	r2, [pc, #188]	; (8005874 <HAL_UART_Init+0x174>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d009      	beq.n	80057d0 <HAL_UART_Init+0xd0>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a2d      	ldr	r2, [pc, #180]	; (8005878 <HAL_UART_Init+0x178>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d004      	beq.n	80057d0 <HAL_UART_Init+0xd0>
 80057c6:	f240 112f 	movw	r1, #303	; 0x12f
 80057ca:	482c      	ldr	r0, [pc, #176]	; (800587c <HAL_UART_Init+0x17c>)
 80057cc:	f7fb fab1 	bl	8000d32 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d106      	bne.n	80057e6 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7fb ff09 	bl	80015f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2224      	movs	r2, #36	; 0x24
 80057ea:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 0201 	bic.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fb01 	bl	8005e04 <UART_SetConfig>
 8005802:	4603      	mov	r3, r0
 8005804:	2b01      	cmp	r3, #1
 8005806:	d101      	bne.n	800580c <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e022      	b.n	8005852 <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fe31 	bl	800647c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005828:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005838:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 0201 	orr.w	r2, r2, #1
 8005848:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 ff6a 	bl	8006724 <UART_CheckIdleState>
 8005850:	4603      	mov	r3, r0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	40011000 	.word	0x40011000
 8005860:	40004400 	.word	0x40004400
 8005864:	40004800 	.word	0x40004800
 8005868:	40004c00 	.word	0x40004c00
 800586c:	40005000 	.word	0x40005000
 8005870:	40011400 	.word	0x40011400
 8005874:	40007800 	.word	0x40007800
 8005878:	40007c00 	.word	0x40007c00
 800587c:	08006bc8 	.word	0x08006bc8

08005880 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b08a      	sub	sp, #40	; 0x28
 8005884:	af02      	add	r7, sp, #8
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	603b      	str	r3, [r7, #0]
 800588c:	4613      	mov	r3, r2
 800588e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005894:	2b20      	cmp	r3, #32
 8005896:	d17f      	bne.n	8005998 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <HAL_UART_Transmit+0x24>
 800589e:	88fb      	ldrh	r3, [r7, #6]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e078      	b.n	800599a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d101      	bne.n	80058b6 <HAL_UART_Transmit+0x36>
 80058b2:	2302      	movs	r3, #2
 80058b4:	e071      	b.n	800599a <HAL_UART_Transmit+0x11a>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2221      	movs	r2, #33	; 0x21
 80058c8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80058ca:	f7fc f80d 	bl	80018e8 <HAL_GetTick>
 80058ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	88fa      	ldrh	r2, [r7, #6]
 80058d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	88fa      	ldrh	r2, [r7, #6]
 80058dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e8:	d108      	bne.n	80058fc <HAL_UART_Transmit+0x7c>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d104      	bne.n	80058fc <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80058f2:	2300      	movs	r3, #0
 80058f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	61bb      	str	r3, [r7, #24]
 80058fa:	e003      	b.n	8005904 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005900:	2300      	movs	r3, #0
 8005902:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800590c:	e02c      	b.n	8005968 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2200      	movs	r2, #0
 8005916:	2180      	movs	r1, #128	; 0x80
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 ff48 	bl	80067ae <UART_WaitOnFlagUntilTimeout>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e038      	b.n	800599a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10b      	bne.n	8005946 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	461a      	mov	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800593c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	3302      	adds	r3, #2
 8005942:	61bb      	str	r3, [r7, #24]
 8005944:	e007      	b.n	8005956 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	781a      	ldrb	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	3301      	adds	r3, #1
 8005954:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800595c:	b29b      	uxth	r3, r3
 800595e:	3b01      	subs	r3, #1
 8005960:	b29a      	uxth	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800596e:	b29b      	uxth	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1cc      	bne.n	800590e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	2200      	movs	r2, #0
 800597c:	2140      	movs	r1, #64	; 0x40
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 ff15 	bl	80067ae <UART_WaitOnFlagUntilTimeout>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e005      	b.n	800599a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2220      	movs	r2, #32
 8005992:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005994:	2300      	movs	r3, #0
 8005996:	e000      	b.n	800599a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8005998:	2302      	movs	r3, #2
  }
}
 800599a:	4618      	mov	r0, r3
 800599c:	3720      	adds	r7, #32
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b08a      	sub	sp, #40	; 0x28
 80059a6:	af02      	add	r7, sp, #8
 80059a8:	60f8      	str	r0, [r7, #12]
 80059aa:	60b9      	str	r1, [r7, #8]
 80059ac:	603b      	str	r3, [r7, #0]
 80059ae:	4613      	mov	r3, r2
 80059b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059b6:	2b20      	cmp	r3, #32
 80059b8:	f040 80ba 	bne.w	8005b30 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <HAL_UART_Receive+0x26>
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e0b2      	b.n	8005b32 <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d101      	bne.n	80059da <HAL_UART_Receive+0x38>
 80059d6:	2302      	movs	r3, #2
 80059d8:	e0ab      	b.n	8005b32 <HAL_UART_Receive+0x190>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2222      	movs	r2, #34	; 0x22
 80059ec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80059ee:	f7fb ff7b 	bl	80018e8 <HAL_GetTick>
 80059f2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	88fa      	ldrh	r2, [r7, #6]
 80059f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	88fa      	ldrh	r2, [r7, #6]
 8005a00:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a0c:	d10e      	bne.n	8005a2c <HAL_UART_Receive+0x8a>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d105      	bne.n	8005a22 <HAL_UART_Receive+0x80>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005a1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a20:	e02d      	b.n	8005a7e <HAL_UART_Receive+0xdc>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	22ff      	movs	r2, #255	; 0xff
 8005a26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a2a:	e028      	b.n	8005a7e <HAL_UART_Receive+0xdc>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10d      	bne.n	8005a50 <HAL_UART_Receive+0xae>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d104      	bne.n	8005a46 <HAL_UART_Receive+0xa4>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	22ff      	movs	r2, #255	; 0xff
 8005a40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a44:	e01b      	b.n	8005a7e <HAL_UART_Receive+0xdc>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	227f      	movs	r2, #127	; 0x7f
 8005a4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a4e:	e016      	b.n	8005a7e <HAL_UART_Receive+0xdc>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a58:	d10d      	bne.n	8005a76 <HAL_UART_Receive+0xd4>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d104      	bne.n	8005a6c <HAL_UART_Receive+0xca>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	227f      	movs	r2, #127	; 0x7f
 8005a66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a6a:	e008      	b.n	8005a7e <HAL_UART_Receive+0xdc>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	223f      	movs	r2, #63	; 0x3f
 8005a70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a74:	e003      	b.n	8005a7e <HAL_UART_Receive+0xdc>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a84:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a8e:	d108      	bne.n	8005aa2 <HAL_UART_Receive+0x100>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d104      	bne.n	8005aa2 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	61bb      	str	r3, [r7, #24]
 8005aa0:	e003      	b.n	8005aaa <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005ab2:	e032      	b.n	8005b1a <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2200      	movs	r2, #0
 8005abc:	2120      	movs	r1, #32
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 fe75 	bl	80067ae <UART_WaitOnFlagUntilTimeout>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e031      	b.n	8005b32 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10c      	bne.n	8005aee <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	8a7b      	ldrh	r3, [r7, #18]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	3302      	adds	r3, #2
 8005aea:	61bb      	str	r3, [r7, #24]
 8005aec:	e00c      	b.n	8005b08 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	8a7b      	ldrh	r3, [r7, #18]
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	4013      	ands	r3, r2
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	3301      	adds	r3, #1
 8005b06:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1c6      	bne.n	8005ab4 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	e000      	b.n	8005b32 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 8005b30:	2302      	movs	r3, #2
  }
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3720      	adds	r7, #32
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b088      	sub	sp, #32
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b5c:	69fa      	ldr	r2, [r7, #28]
 8005b5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005b62:	4013      	ands	r3, r2
 8005b64:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d113      	bne.n	8005b94 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00e      	beq.n	8005b94 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	f003 0320 	and.w	r3, r3, #32
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d009      	beq.n	8005b94 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 8114 	beq.w	8005db2 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	4798      	blx	r3
      }
      return;
 8005b92:	e10e      	b.n	8005db2 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 80d6 	beq.w	8005d48 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d105      	bne.n	8005bb2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 80cb 	beq.w	8005d48 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00e      	beq.n	8005bda <HAL_UART_IRQHandler+0x9e>
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d009      	beq.n	8005bda <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bd2:	f043 0201 	orr.w	r2, r3, #1
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00e      	beq.n	8005c02 <HAL_UART_IRQHandler+0xc6>
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d009      	beq.n	8005c02 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bfa:	f043 0204 	orr.w	r2, r3, #4
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00e      	beq.n	8005c2a <HAL_UART_IRQHandler+0xee>
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d009      	beq.n	8005c2a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2204      	movs	r2, #4
 8005c1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c22:	f043 0202 	orr.w	r2, r3, #2
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d013      	beq.n	8005c5c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	f003 0320 	and.w	r3, r3, #32
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d104      	bne.n	8005c48 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d009      	beq.n	8005c5c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2208      	movs	r2, #8
 8005c4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c54:	f043 0208 	orr.w	r2, r3, #8
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00f      	beq.n	8005c86 <HAL_UART_IRQHandler+0x14a>
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00a      	beq.n	8005c86 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c7e:	f043 0220 	orr.w	r2, r3, #32
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 8093 	beq.w	8005db6 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	f003 0320 	and.w	r3, r3, #32
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00c      	beq.n	8005cb4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	f003 0320 	and.w	r3, r3, #32
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d007      	beq.n	8005cb4 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cb8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc4:	2b40      	cmp	r3, #64	; 0x40
 8005cc6:	d004      	beq.n	8005cd2 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d031      	beq.n	8005d36 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fde6 	bl	80068a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce2:	2b40      	cmp	r3, #64	; 0x40
 8005ce4:	d123      	bne.n	8005d2e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cf4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d013      	beq.n	8005d26 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d02:	4a30      	ldr	r2, [pc, #192]	; (8005dc4 <HAL_UART_IRQHandler+0x288>)
 8005d04:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fc f8aa 	bl	8001e64 <HAL_DMA_Abort_IT>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d016      	beq.n	8005d44 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005d20:	4610      	mov	r0, r2
 8005d22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d24:	e00e      	b.n	8005d44 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f858 	bl	8005ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d2c:	e00a      	b.n	8005d44 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f854 	bl	8005ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d34:	e006      	b.n	8005d44 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f850 	bl	8005ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005d42:	e038      	b.n	8005db6 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d44:	bf00      	nop
    return;
 8005d46:	e036      	b.n	8005db6 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00d      	beq.n	8005d6e <HAL_UART_IRQHandler+0x232>
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d008      	beq.n	8005d6e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005d64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f842 	bl	8005df0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d6c:	e026      	b.n	8005dbc <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00d      	beq.n	8005d94 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d008      	beq.n	8005d94 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d017      	beq.n	8005dba <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	4798      	blx	r3
    }
    return;
 8005d92:	e012      	b.n	8005dba <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00e      	beq.n	8005dbc <HAL_UART_IRQHandler+0x280>
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d009      	beq.n	8005dbc <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fdb1 	bl	8006910 <UART_EndTransmit_IT>
    return;
 8005dae:	bf00      	nop
 8005db0:	e004      	b.n	8005dbc <HAL_UART_IRQHandler+0x280>
      return;
 8005db2:	bf00      	nop
 8005db4:	e002      	b.n	8005dbc <HAL_UART_IRQHandler+0x280>
    return;
 8005db6:	bf00      	nop
 8005db8:	e000      	b.n	8005dbc <HAL_UART_IRQHandler+0x280>
    return;
 8005dba:	bf00      	nop
  }

}
 8005dbc:	3720      	adds	r7, #32
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	080068e5 	.word	0x080068e5

08005dc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b088      	sub	sp, #32
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e10:	2300      	movs	r3, #0
 8005e12:	75fb      	strb	r3, [r7, #23]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	4aaa      	ldr	r2, [pc, #680]	; (80060c4 <UART_SetConfig+0x2c0>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d904      	bls.n	8005e28 <UART_SetConfig+0x24>
 8005e1e:	f640 21be 	movw	r1, #2750	; 0xabe
 8005e22:	48a9      	ldr	r0, [pc, #676]	; (80060c8 <UART_SetConfig+0x2c4>)
 8005e24:	f7fa ff85 	bl	8000d32 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e30:	d00d      	beq.n	8005e4e <UART_SetConfig+0x4a>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d009      	beq.n	8005e4e <UART_SetConfig+0x4a>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e42:	d004      	beq.n	8005e4e <UART_SetConfig+0x4a>
 8005e44:	f640 21bf 	movw	r1, #2751	; 0xabf
 8005e48:	489f      	ldr	r0, [pc, #636]	; (80060c8 <UART_SetConfig+0x2c4>)
 8005e4a:	f7fa ff72 	bl	8000d32 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e56:	d012      	beq.n	8005e7e <UART_SetConfig+0x7a>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00e      	beq.n	8005e7e <UART_SetConfig+0x7a>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e68:	d009      	beq.n	8005e7e <UART_SetConfig+0x7a>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e72:	d004      	beq.n	8005e7e <UART_SetConfig+0x7a>
 8005e74:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 8005e78:	4893      	ldr	r0, [pc, #588]	; (80060c8 <UART_SetConfig+0x2c4>)
 8005e7a:	f7fa ff5a 	bl	8000d32 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d009      	beq.n	8005e9a <UART_SetConfig+0x96>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e8e:	d004      	beq.n	8005e9a <UART_SetConfig+0x96>
 8005e90:	f640 21c1 	movw	r1, #2753	; 0xac1
 8005e94:	488c      	ldr	r0, [pc, #560]	; (80060c8 <UART_SetConfig+0x2c4>)
 8005e96:	f7fa ff4c 	bl	8000d32 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00e      	beq.n	8005ec0 <UART_SetConfig+0xbc>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eaa:	d009      	beq.n	8005ec0 <UART_SetConfig+0xbc>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005eb4:	d004      	beq.n	8005ec0 <UART_SetConfig+0xbc>
 8005eb6:	f640 21c3 	movw	r1, #2755	; 0xac3
 8005eba:	4883      	ldr	r0, [pc, #524]	; (80060c8 <UART_SetConfig+0x2c4>)
 8005ebc:	f7fa ff39 	bl	8000d32 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	695b      	ldr	r3, [r3, #20]
 8005ec4:	f023 030c 	bic.w	r3, r3, #12
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d103      	bne.n	8005ed4 <UART_SetConfig+0xd0>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d104      	bne.n	8005ede <UART_SetConfig+0xda>
 8005ed4:	f640 21c4 	movw	r1, #2756	; 0xac4
 8005ed8:	487b      	ldr	r0, [pc, #492]	; (80060c8 <UART_SetConfig+0x2c4>)
 8005eda:	f7fa ff2a 	bl	8000d32 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d013      	beq.n	8005f0e <UART_SetConfig+0x10a>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eee:	d00e      	beq.n	8005f0e <UART_SetConfig+0x10a>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ef8:	d009      	beq.n	8005f0e <UART_SetConfig+0x10a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f02:	d004      	beq.n	8005f0e <UART_SetConfig+0x10a>
 8005f04:	f640 21c5 	movw	r1, #2757	; 0xac5
 8005f08:	486f      	ldr	r0, [pc, #444]	; (80060c8 <UART_SetConfig+0x2c4>)
 8005f0a:	f7fa ff12 	bl	8000d32 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d009      	beq.n	8005f2a <UART_SetConfig+0x126>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f1e:	d004      	beq.n	8005f2a <UART_SetConfig+0x126>
 8005f20:	f640 21c6 	movw	r1, #2758	; 0xac6
 8005f24:	4868      	ldr	r0, [pc, #416]	; (80060c8 <UART_SetConfig+0x2c4>)
 8005f26:	f7fa ff04 	bl	8000d32 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689a      	ldr	r2, [r3, #8]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	4b60      	ldr	r3, [pc, #384]	; (80060cc <UART_SetConfig+0x2c8>)
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6812      	ldr	r2, [r2, #0]
 8005f50:	6939      	ldr	r1, [r7, #16]
 8005f52:	430b      	orrs	r3, r1
 8005f54:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a4e      	ldr	r2, [pc, #312]	; (80060d0 <UART_SetConfig+0x2cc>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d122      	bne.n	8005fe0 <UART_SetConfig+0x1dc>
 8005f9a:	4b4e      	ldr	r3, [pc, #312]	; (80060d4 <UART_SetConfig+0x2d0>)
 8005f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa0:	f003 0303 	and.w	r3, r3, #3
 8005fa4:	2b03      	cmp	r3, #3
 8005fa6:	d817      	bhi.n	8005fd8 <UART_SetConfig+0x1d4>
 8005fa8:	a201      	add	r2, pc, #4	; (adr r2, 8005fb0 <UART_SetConfig+0x1ac>)
 8005faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fae:	bf00      	nop
 8005fb0:	08005fc1 	.word	0x08005fc1
 8005fb4:	08005fcd 	.word	0x08005fcd
 8005fb8:	08005fc7 	.word	0x08005fc7
 8005fbc:	08005fd3 	.word	0x08005fd3
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	77fb      	strb	r3, [r7, #31]
 8005fc4:	e14d      	b.n	8006262 <UART_SetConfig+0x45e>
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	77fb      	strb	r3, [r7, #31]
 8005fca:	e14a      	b.n	8006262 <UART_SetConfig+0x45e>
 8005fcc:	2304      	movs	r3, #4
 8005fce:	77fb      	strb	r3, [r7, #31]
 8005fd0:	e147      	b.n	8006262 <UART_SetConfig+0x45e>
 8005fd2:	2308      	movs	r3, #8
 8005fd4:	77fb      	strb	r3, [r7, #31]
 8005fd6:	e144      	b.n	8006262 <UART_SetConfig+0x45e>
 8005fd8:	2310      	movs	r3, #16
 8005fda:	77fb      	strb	r3, [r7, #31]
 8005fdc:	bf00      	nop
 8005fde:	e140      	b.n	8006262 <UART_SetConfig+0x45e>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a3c      	ldr	r2, [pc, #240]	; (80060d8 <UART_SetConfig+0x2d4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d134      	bne.n	8006054 <UART_SetConfig+0x250>
 8005fea:	4b3a      	ldr	r3, [pc, #232]	; (80060d4 <UART_SetConfig+0x2d0>)
 8005fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff0:	f003 030c 	and.w	r3, r3, #12
 8005ff4:	2b0c      	cmp	r3, #12
 8005ff6:	d829      	bhi.n	800604c <UART_SetConfig+0x248>
 8005ff8:	a201      	add	r2, pc, #4	; (adr r2, 8006000 <UART_SetConfig+0x1fc>)
 8005ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffe:	bf00      	nop
 8006000:	08006035 	.word	0x08006035
 8006004:	0800604d 	.word	0x0800604d
 8006008:	0800604d 	.word	0x0800604d
 800600c:	0800604d 	.word	0x0800604d
 8006010:	08006041 	.word	0x08006041
 8006014:	0800604d 	.word	0x0800604d
 8006018:	0800604d 	.word	0x0800604d
 800601c:	0800604d 	.word	0x0800604d
 8006020:	0800603b 	.word	0x0800603b
 8006024:	0800604d 	.word	0x0800604d
 8006028:	0800604d 	.word	0x0800604d
 800602c:	0800604d 	.word	0x0800604d
 8006030:	08006047 	.word	0x08006047
 8006034:	2300      	movs	r3, #0
 8006036:	77fb      	strb	r3, [r7, #31]
 8006038:	e113      	b.n	8006262 <UART_SetConfig+0x45e>
 800603a:	2302      	movs	r3, #2
 800603c:	77fb      	strb	r3, [r7, #31]
 800603e:	e110      	b.n	8006262 <UART_SetConfig+0x45e>
 8006040:	2304      	movs	r3, #4
 8006042:	77fb      	strb	r3, [r7, #31]
 8006044:	e10d      	b.n	8006262 <UART_SetConfig+0x45e>
 8006046:	2308      	movs	r3, #8
 8006048:	77fb      	strb	r3, [r7, #31]
 800604a:	e10a      	b.n	8006262 <UART_SetConfig+0x45e>
 800604c:	2310      	movs	r3, #16
 800604e:	77fb      	strb	r3, [r7, #31]
 8006050:	bf00      	nop
 8006052:	e106      	b.n	8006262 <UART_SetConfig+0x45e>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a20      	ldr	r2, [pc, #128]	; (80060dc <UART_SetConfig+0x2d8>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d120      	bne.n	80060a0 <UART_SetConfig+0x29c>
 800605e:	4b1d      	ldr	r3, [pc, #116]	; (80060d4 <UART_SetConfig+0x2d0>)
 8006060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006064:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006068:	2b10      	cmp	r3, #16
 800606a:	d00f      	beq.n	800608c <UART_SetConfig+0x288>
 800606c:	2b10      	cmp	r3, #16
 800606e:	d802      	bhi.n	8006076 <UART_SetConfig+0x272>
 8006070:	2b00      	cmp	r3, #0
 8006072:	d005      	beq.n	8006080 <UART_SetConfig+0x27c>
 8006074:	e010      	b.n	8006098 <UART_SetConfig+0x294>
 8006076:	2b20      	cmp	r3, #32
 8006078:	d005      	beq.n	8006086 <UART_SetConfig+0x282>
 800607a:	2b30      	cmp	r3, #48	; 0x30
 800607c:	d009      	beq.n	8006092 <UART_SetConfig+0x28e>
 800607e:	e00b      	b.n	8006098 <UART_SetConfig+0x294>
 8006080:	2300      	movs	r3, #0
 8006082:	77fb      	strb	r3, [r7, #31]
 8006084:	e0ed      	b.n	8006262 <UART_SetConfig+0x45e>
 8006086:	2302      	movs	r3, #2
 8006088:	77fb      	strb	r3, [r7, #31]
 800608a:	e0ea      	b.n	8006262 <UART_SetConfig+0x45e>
 800608c:	2304      	movs	r3, #4
 800608e:	77fb      	strb	r3, [r7, #31]
 8006090:	e0e7      	b.n	8006262 <UART_SetConfig+0x45e>
 8006092:	2308      	movs	r3, #8
 8006094:	77fb      	strb	r3, [r7, #31]
 8006096:	e0e4      	b.n	8006262 <UART_SetConfig+0x45e>
 8006098:	2310      	movs	r3, #16
 800609a:	77fb      	strb	r3, [r7, #31]
 800609c:	bf00      	nop
 800609e:	e0e0      	b.n	8006262 <UART_SetConfig+0x45e>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a0e      	ldr	r2, [pc, #56]	; (80060e0 <UART_SetConfig+0x2dc>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d131      	bne.n	800610e <UART_SetConfig+0x30a>
 80060aa:	4b0a      	ldr	r3, [pc, #40]	; (80060d4 <UART_SetConfig+0x2d0>)
 80060ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80060b4:	2b40      	cmp	r3, #64	; 0x40
 80060b6:	d020      	beq.n	80060fa <UART_SetConfig+0x2f6>
 80060b8:	2b40      	cmp	r3, #64	; 0x40
 80060ba:	d813      	bhi.n	80060e4 <UART_SetConfig+0x2e0>
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d016      	beq.n	80060ee <UART_SetConfig+0x2ea>
 80060c0:	e021      	b.n	8006106 <UART_SetConfig+0x302>
 80060c2:	bf00      	nop
 80060c4:	019bfcc0 	.word	0x019bfcc0
 80060c8:	08006bc8 	.word	0x08006bc8
 80060cc:	efff69f3 	.word	0xefff69f3
 80060d0:	40011000 	.word	0x40011000
 80060d4:	40023800 	.word	0x40023800
 80060d8:	40004400 	.word	0x40004400
 80060dc:	40004800 	.word	0x40004800
 80060e0:	40004c00 	.word	0x40004c00
 80060e4:	2b80      	cmp	r3, #128	; 0x80
 80060e6:	d005      	beq.n	80060f4 <UART_SetConfig+0x2f0>
 80060e8:	2bc0      	cmp	r3, #192	; 0xc0
 80060ea:	d009      	beq.n	8006100 <UART_SetConfig+0x2fc>
 80060ec:	e00b      	b.n	8006106 <UART_SetConfig+0x302>
 80060ee:	2300      	movs	r3, #0
 80060f0:	77fb      	strb	r3, [r7, #31]
 80060f2:	e0b6      	b.n	8006262 <UART_SetConfig+0x45e>
 80060f4:	2302      	movs	r3, #2
 80060f6:	77fb      	strb	r3, [r7, #31]
 80060f8:	e0b3      	b.n	8006262 <UART_SetConfig+0x45e>
 80060fa:	2304      	movs	r3, #4
 80060fc:	77fb      	strb	r3, [r7, #31]
 80060fe:	e0b0      	b.n	8006262 <UART_SetConfig+0x45e>
 8006100:	2308      	movs	r3, #8
 8006102:	77fb      	strb	r3, [r7, #31]
 8006104:	e0ad      	b.n	8006262 <UART_SetConfig+0x45e>
 8006106:	2310      	movs	r3, #16
 8006108:	77fb      	strb	r3, [r7, #31]
 800610a:	bf00      	nop
 800610c:	e0a9      	b.n	8006262 <UART_SetConfig+0x45e>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4aaa      	ldr	r2, [pc, #680]	; (80063bc <UART_SetConfig+0x5b8>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d124      	bne.n	8006162 <UART_SetConfig+0x35e>
 8006118:	4ba9      	ldr	r3, [pc, #676]	; (80063c0 <UART_SetConfig+0x5bc>)
 800611a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006126:	d012      	beq.n	800614e <UART_SetConfig+0x34a>
 8006128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800612c:	d802      	bhi.n	8006134 <UART_SetConfig+0x330>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d007      	beq.n	8006142 <UART_SetConfig+0x33e>
 8006132:	e012      	b.n	800615a <UART_SetConfig+0x356>
 8006134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006138:	d006      	beq.n	8006148 <UART_SetConfig+0x344>
 800613a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800613e:	d009      	beq.n	8006154 <UART_SetConfig+0x350>
 8006140:	e00b      	b.n	800615a <UART_SetConfig+0x356>
 8006142:	2300      	movs	r3, #0
 8006144:	77fb      	strb	r3, [r7, #31]
 8006146:	e08c      	b.n	8006262 <UART_SetConfig+0x45e>
 8006148:	2302      	movs	r3, #2
 800614a:	77fb      	strb	r3, [r7, #31]
 800614c:	e089      	b.n	8006262 <UART_SetConfig+0x45e>
 800614e:	2304      	movs	r3, #4
 8006150:	77fb      	strb	r3, [r7, #31]
 8006152:	e086      	b.n	8006262 <UART_SetConfig+0x45e>
 8006154:	2308      	movs	r3, #8
 8006156:	77fb      	strb	r3, [r7, #31]
 8006158:	e083      	b.n	8006262 <UART_SetConfig+0x45e>
 800615a:	2310      	movs	r3, #16
 800615c:	77fb      	strb	r3, [r7, #31]
 800615e:	bf00      	nop
 8006160:	e07f      	b.n	8006262 <UART_SetConfig+0x45e>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a97      	ldr	r2, [pc, #604]	; (80063c4 <UART_SetConfig+0x5c0>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d124      	bne.n	80061b6 <UART_SetConfig+0x3b2>
 800616c:	4b94      	ldr	r3, [pc, #592]	; (80063c0 <UART_SetConfig+0x5bc>)
 800616e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006172:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800617a:	d012      	beq.n	80061a2 <UART_SetConfig+0x39e>
 800617c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006180:	d802      	bhi.n	8006188 <UART_SetConfig+0x384>
 8006182:	2b00      	cmp	r3, #0
 8006184:	d007      	beq.n	8006196 <UART_SetConfig+0x392>
 8006186:	e012      	b.n	80061ae <UART_SetConfig+0x3aa>
 8006188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800618c:	d006      	beq.n	800619c <UART_SetConfig+0x398>
 800618e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006192:	d009      	beq.n	80061a8 <UART_SetConfig+0x3a4>
 8006194:	e00b      	b.n	80061ae <UART_SetConfig+0x3aa>
 8006196:	2301      	movs	r3, #1
 8006198:	77fb      	strb	r3, [r7, #31]
 800619a:	e062      	b.n	8006262 <UART_SetConfig+0x45e>
 800619c:	2302      	movs	r3, #2
 800619e:	77fb      	strb	r3, [r7, #31]
 80061a0:	e05f      	b.n	8006262 <UART_SetConfig+0x45e>
 80061a2:	2304      	movs	r3, #4
 80061a4:	77fb      	strb	r3, [r7, #31]
 80061a6:	e05c      	b.n	8006262 <UART_SetConfig+0x45e>
 80061a8:	2308      	movs	r3, #8
 80061aa:	77fb      	strb	r3, [r7, #31]
 80061ac:	e059      	b.n	8006262 <UART_SetConfig+0x45e>
 80061ae:	2310      	movs	r3, #16
 80061b0:	77fb      	strb	r3, [r7, #31]
 80061b2:	bf00      	nop
 80061b4:	e055      	b.n	8006262 <UART_SetConfig+0x45e>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a83      	ldr	r2, [pc, #524]	; (80063c8 <UART_SetConfig+0x5c4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d124      	bne.n	800620a <UART_SetConfig+0x406>
 80061c0:	4b7f      	ldr	r3, [pc, #508]	; (80063c0 <UART_SetConfig+0x5bc>)
 80061c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80061ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ce:	d012      	beq.n	80061f6 <UART_SetConfig+0x3f2>
 80061d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061d4:	d802      	bhi.n	80061dc <UART_SetConfig+0x3d8>
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d007      	beq.n	80061ea <UART_SetConfig+0x3e6>
 80061da:	e012      	b.n	8006202 <UART_SetConfig+0x3fe>
 80061dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061e0:	d006      	beq.n	80061f0 <UART_SetConfig+0x3ec>
 80061e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061e6:	d009      	beq.n	80061fc <UART_SetConfig+0x3f8>
 80061e8:	e00b      	b.n	8006202 <UART_SetConfig+0x3fe>
 80061ea:	2300      	movs	r3, #0
 80061ec:	77fb      	strb	r3, [r7, #31]
 80061ee:	e038      	b.n	8006262 <UART_SetConfig+0x45e>
 80061f0:	2302      	movs	r3, #2
 80061f2:	77fb      	strb	r3, [r7, #31]
 80061f4:	e035      	b.n	8006262 <UART_SetConfig+0x45e>
 80061f6:	2304      	movs	r3, #4
 80061f8:	77fb      	strb	r3, [r7, #31]
 80061fa:	e032      	b.n	8006262 <UART_SetConfig+0x45e>
 80061fc:	2308      	movs	r3, #8
 80061fe:	77fb      	strb	r3, [r7, #31]
 8006200:	e02f      	b.n	8006262 <UART_SetConfig+0x45e>
 8006202:	2310      	movs	r3, #16
 8006204:	77fb      	strb	r3, [r7, #31]
 8006206:	bf00      	nop
 8006208:	e02b      	b.n	8006262 <UART_SetConfig+0x45e>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a6f      	ldr	r2, [pc, #444]	; (80063cc <UART_SetConfig+0x5c8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d124      	bne.n	800625e <UART_SetConfig+0x45a>
 8006214:	4b6a      	ldr	r3, [pc, #424]	; (80063c0 <UART_SetConfig+0x5bc>)
 8006216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800621e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006222:	d012      	beq.n	800624a <UART_SetConfig+0x446>
 8006224:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006228:	d802      	bhi.n	8006230 <UART_SetConfig+0x42c>
 800622a:	2b00      	cmp	r3, #0
 800622c:	d007      	beq.n	800623e <UART_SetConfig+0x43a>
 800622e:	e012      	b.n	8006256 <UART_SetConfig+0x452>
 8006230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006234:	d006      	beq.n	8006244 <UART_SetConfig+0x440>
 8006236:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800623a:	d009      	beq.n	8006250 <UART_SetConfig+0x44c>
 800623c:	e00b      	b.n	8006256 <UART_SetConfig+0x452>
 800623e:	2300      	movs	r3, #0
 8006240:	77fb      	strb	r3, [r7, #31]
 8006242:	e00e      	b.n	8006262 <UART_SetConfig+0x45e>
 8006244:	2302      	movs	r3, #2
 8006246:	77fb      	strb	r3, [r7, #31]
 8006248:	e00b      	b.n	8006262 <UART_SetConfig+0x45e>
 800624a:	2304      	movs	r3, #4
 800624c:	77fb      	strb	r3, [r7, #31]
 800624e:	e008      	b.n	8006262 <UART_SetConfig+0x45e>
 8006250:	2308      	movs	r3, #8
 8006252:	77fb      	strb	r3, [r7, #31]
 8006254:	e005      	b.n	8006262 <UART_SetConfig+0x45e>
 8006256:	2310      	movs	r3, #16
 8006258:	77fb      	strb	r3, [r7, #31]
 800625a:	bf00      	nop
 800625c:	e001      	b.n	8006262 <UART_SetConfig+0x45e>
 800625e:	2310      	movs	r3, #16
 8006260:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800626a:	d17f      	bne.n	800636c <UART_SetConfig+0x568>
  {
    switch (clocksource)
 800626c:	7ffb      	ldrb	r3, [r7, #31]
 800626e:	2b08      	cmp	r3, #8
 8006270:	d85c      	bhi.n	800632c <UART_SetConfig+0x528>
 8006272:	a201      	add	r2, pc, #4	; (adr r2, 8006278 <UART_SetConfig+0x474>)
 8006274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006278:	0800629d 	.word	0x0800629d
 800627c:	080062bd 	.word	0x080062bd
 8006280:	080062dd 	.word	0x080062dd
 8006284:	0800632d 	.word	0x0800632d
 8006288:	080062f5 	.word	0x080062f5
 800628c:	0800632d 	.word	0x0800632d
 8006290:	0800632d 	.word	0x0800632d
 8006294:	0800632d 	.word	0x0800632d
 8006298:	08006315 	.word	0x08006315
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800629c:	f7fd f84a 	bl	8003334 <HAL_RCC_GetPCLK1Freq>
 80062a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	005a      	lsls	r2, r3, #1
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	085b      	lsrs	r3, r3, #1
 80062ac:	441a      	add	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	61bb      	str	r3, [r7, #24]
        break;
 80062ba:	e03a      	b.n	8006332 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062bc:	f7fd f84e 	bl	800335c <HAL_RCC_GetPCLK2Freq>
 80062c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	005a      	lsls	r2, r3, #1
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	085b      	lsrs	r3, r3, #1
 80062cc:	441a      	add	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	61bb      	str	r3, [r7, #24]
        break;
 80062da:	e02a      	b.n	8006332 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	085a      	lsrs	r2, r3, #1
 80062e2:	4b3b      	ldr	r3, [pc, #236]	; (80063d0 <UART_SetConfig+0x5cc>)
 80062e4:	4413      	add	r3, r2
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6852      	ldr	r2, [r2, #4]
 80062ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	61bb      	str	r3, [r7, #24]
        break;
 80062f2:	e01e      	b.n	8006332 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062f4:	f7fc ff60 	bl	80031b8 <HAL_RCC_GetSysClockFreq>
 80062f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	005a      	lsls	r2, r3, #1
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	085b      	lsrs	r3, r3, #1
 8006304:	441a      	add	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	fbb2 f3f3 	udiv	r3, r2, r3
 800630e:	b29b      	uxth	r3, r3
 8006310:	61bb      	str	r3, [r7, #24]
        break;
 8006312:	e00e      	b.n	8006332 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	085b      	lsrs	r3, r3, #1
 800631a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	fbb2 f3f3 	udiv	r3, r2, r3
 8006326:	b29b      	uxth	r3, r3
 8006328:	61bb      	str	r3, [r7, #24]
        break;
 800632a:	e002      	b.n	8006332 <UART_SetConfig+0x52e>
      default:
        ret = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	75fb      	strb	r3, [r7, #23]
        break;
 8006330:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	2b0f      	cmp	r3, #15
 8006336:	d916      	bls.n	8006366 <UART_SetConfig+0x562>
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800633e:	d212      	bcs.n	8006366 <UART_SetConfig+0x562>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	b29b      	uxth	r3, r3
 8006344:	f023 030f 	bic.w	r3, r3, #15
 8006348:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	085b      	lsrs	r3, r3, #1
 800634e:	b29b      	uxth	r3, r3
 8006350:	f003 0307 	and.w	r3, r3, #7
 8006354:	b29a      	uxth	r2, r3
 8006356:	897b      	ldrh	r3, [r7, #10]
 8006358:	4313      	orrs	r3, r2
 800635a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	897a      	ldrh	r2, [r7, #10]
 8006362:	60da      	str	r2, [r3, #12]
 8006364:	e07d      	b.n	8006462 <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	75fb      	strb	r3, [r7, #23]
 800636a:	e07a      	b.n	8006462 <UART_SetConfig+0x65e>
    }
  }
  else
  {
    switch (clocksource)
 800636c:	7ffb      	ldrb	r3, [r7, #31]
 800636e:	2b08      	cmp	r3, #8
 8006370:	d866      	bhi.n	8006440 <UART_SetConfig+0x63c>
 8006372:	a201      	add	r2, pc, #4	; (adr r2, 8006378 <UART_SetConfig+0x574>)
 8006374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006378:	0800639d 	.word	0x0800639d
 800637c:	080063d5 	.word	0x080063d5
 8006380:	080063f3 	.word	0x080063f3
 8006384:	08006441 	.word	0x08006441
 8006388:	0800640b 	.word	0x0800640b
 800638c:	08006441 	.word	0x08006441
 8006390:	08006441 	.word	0x08006441
 8006394:	08006441 	.word	0x08006441
 8006398:	08006429 	.word	0x08006429
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800639c:	f7fc ffca 	bl	8003334 <HAL_RCC_GetPCLK1Freq>
 80063a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	085a      	lsrs	r2, r3, #1
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	441a      	add	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	61bb      	str	r3, [r7, #24]
        break;
 80063b8:	e045      	b.n	8006446 <UART_SetConfig+0x642>
 80063ba:	bf00      	nop
 80063bc:	40005000 	.word	0x40005000
 80063c0:	40023800 	.word	0x40023800
 80063c4:	40011400 	.word	0x40011400
 80063c8:	40007800 	.word	0x40007800
 80063cc:	40007c00 	.word	0x40007c00
 80063d0:	01e84800 	.word	0x01e84800
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063d4:	f7fc ffc2 	bl	800335c <HAL_RCC_GetPCLK2Freq>
 80063d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	085a      	lsrs	r2, r3, #1
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	441a      	add	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	61bb      	str	r3, [r7, #24]
        break;
 80063f0:	e029      	b.n	8006446 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	085a      	lsrs	r2, r3, #1
 80063f8:	4b1f      	ldr	r3, [pc, #124]	; (8006478 <UART_SetConfig+0x674>)
 80063fa:	4413      	add	r3, r2
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6852      	ldr	r2, [r2, #4]
 8006400:	fbb3 f3f2 	udiv	r3, r3, r2
 8006404:	b29b      	uxth	r3, r3
 8006406:	61bb      	str	r3, [r7, #24]
        break;
 8006408:	e01d      	b.n	8006446 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800640a:	f7fc fed5 	bl	80031b8 <HAL_RCC_GetSysClockFreq>
 800640e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	085a      	lsrs	r2, r3, #1
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	441a      	add	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006422:	b29b      	uxth	r3, r3
 8006424:	61bb      	str	r3, [r7, #24]
        break;
 8006426:	e00e      	b.n	8006446 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	085b      	lsrs	r3, r3, #1
 800642e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	fbb2 f3f3 	udiv	r3, r2, r3
 800643a:	b29b      	uxth	r3, r3
 800643c:	61bb      	str	r3, [r7, #24]
        break;
 800643e:	e002      	b.n	8006446 <UART_SetConfig+0x642>
      default:
        ret = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	75fb      	strb	r3, [r7, #23]
        break;
 8006444:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	2b0f      	cmp	r3, #15
 800644a:	d908      	bls.n	800645e <UART_SetConfig+0x65a>
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006452:	d204      	bcs.n	800645e <UART_SetConfig+0x65a>
    {
      huart->Instance->BRR = usartdiv;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	60da      	str	r2, [r3, #12]
 800645c:	e001      	b.n	8006462 <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800646e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3720      	adds	r7, #32
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	00f42400 	.word	0x00f42400

0800647c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	2bff      	cmp	r3, #255	; 0xff
 800648a:	d904      	bls.n	8006496 <UART_AdvFeatureConfig+0x1a>
 800648c:	f640 3143 	movw	r1, #2883	; 0xb43
 8006490:	489f      	ldr	r0, [pc, #636]	; (8006710 <UART_AdvFeatureConfig+0x294>)
 8006492:	f7fa fc4e 	bl	8000d32 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d018      	beq.n	80064d4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d009      	beq.n	80064be <UART_AdvFeatureConfig+0x42>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064b2:	d004      	beq.n	80064be <UART_AdvFeatureConfig+0x42>
 80064b4:	f640 3148 	movw	r1, #2888	; 0xb48
 80064b8:	4895      	ldr	r0, [pc, #596]	; (8006710 <UART_AdvFeatureConfig+0x294>)
 80064ba:	f7fa fc3a 	bl	8000d32 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	430a      	orrs	r2, r1
 80064d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d018      	beq.n	8006512 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d009      	beq.n	80064fc <UART_AdvFeatureConfig+0x80>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064f0:	d004      	beq.n	80064fc <UART_AdvFeatureConfig+0x80>
 80064f2:	f640 314f 	movw	r1, #2895	; 0xb4f
 80064f6:	4886      	ldr	r0, [pc, #536]	; (8006710 <UART_AdvFeatureConfig+0x294>)
 80064f8:	f7fa fc1b 	bl	8000d32 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	430a      	orrs	r2, r1
 8006510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006516:	f003 0304 	and.w	r3, r3, #4
 800651a:	2b00      	cmp	r3, #0
 800651c:	d018      	beq.n	8006550 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006522:	2b00      	cmp	r3, #0
 8006524:	d009      	beq.n	800653a <UART_AdvFeatureConfig+0xbe>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800652e:	d004      	beq.n	800653a <UART_AdvFeatureConfig+0xbe>
 8006530:	f640 3156 	movw	r1, #2902	; 0xb56
 8006534:	4876      	ldr	r0, [pc, #472]	; (8006710 <UART_AdvFeatureConfig+0x294>)
 8006536:	f7fa fbfc 	bl	8000d32 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006554:	f003 0308 	and.w	r3, r3, #8
 8006558:	2b00      	cmp	r3, #0
 800655a:	d018      	beq.n	800658e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006560:	2b00      	cmp	r3, #0
 8006562:	d009      	beq.n	8006578 <UART_AdvFeatureConfig+0xfc>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800656c:	d004      	beq.n	8006578 <UART_AdvFeatureConfig+0xfc>
 800656e:	f640 315d 	movw	r1, #2909	; 0xb5d
 8006572:	4867      	ldr	r0, [pc, #412]	; (8006710 <UART_AdvFeatureConfig+0x294>)
 8006574:	f7fa fbdd 	bl	8000d32 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	430a      	orrs	r2, r1
 800658c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006592:	f003 0310 	and.w	r3, r3, #16
 8006596:	2b00      	cmp	r3, #0
 8006598:	d018      	beq.n	80065cc <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d009      	beq.n	80065b6 <UART_AdvFeatureConfig+0x13a>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065aa:	d004      	beq.n	80065b6 <UART_AdvFeatureConfig+0x13a>
 80065ac:	f640 3164 	movw	r1, #2916	; 0xb64
 80065b0:	4857      	ldr	r0, [pc, #348]	; (8006710 <UART_AdvFeatureConfig+0x294>)
 80065b2:	f7fa fbbe 	bl	8000d32 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d0:	f003 0320 	and.w	r3, r3, #32
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d018      	beq.n	800660a <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d009      	beq.n	80065f4 <UART_AdvFeatureConfig+0x178>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065e8:	d004      	beq.n	80065f4 <UART_AdvFeatureConfig+0x178>
 80065ea:	f640 316b 	movw	r1, #2923	; 0xb6b
 80065ee:	4848      	ldr	r0, [pc, #288]	; (8006710 <UART_AdvFeatureConfig+0x294>)
 80065f0:	f7fa fb9f 	bl	8000d32 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006612:	2b00      	cmp	r3, #0
 8006614:	d059      	beq.n	80066ca <UART_AdvFeatureConfig+0x24e>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a3e      	ldr	r2, [pc, #248]	; (8006714 <UART_AdvFeatureConfig+0x298>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d013      	beq.n	8006648 <UART_AdvFeatureConfig+0x1cc>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a3c      	ldr	r2, [pc, #240]	; (8006718 <UART_AdvFeatureConfig+0x29c>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d00e      	beq.n	8006648 <UART_AdvFeatureConfig+0x1cc>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a3b      	ldr	r2, [pc, #236]	; (800671c <UART_AdvFeatureConfig+0x2a0>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d009      	beq.n	8006648 <UART_AdvFeatureConfig+0x1cc>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a39      	ldr	r2, [pc, #228]	; (8006720 <UART_AdvFeatureConfig+0x2a4>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d004      	beq.n	8006648 <UART_AdvFeatureConfig+0x1cc>
 800663e:	f640 3172 	movw	r1, #2930	; 0xb72
 8006642:	4833      	ldr	r0, [pc, #204]	; (8006710 <UART_AdvFeatureConfig+0x294>)
 8006644:	f7fa fb75 	bl	8000d32 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664c:	2b00      	cmp	r3, #0
 800664e:	d009      	beq.n	8006664 <UART_AdvFeatureConfig+0x1e8>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006658:	d004      	beq.n	8006664 <UART_AdvFeatureConfig+0x1e8>
 800665a:	f640 3173 	movw	r1, #2931	; 0xb73
 800665e:	482c      	ldr	r0, [pc, #176]	; (8006710 <UART_AdvFeatureConfig+0x294>)
 8006660:	f7fa fb67 	bl	8000d32 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006682:	d122      	bne.n	80066ca <UART_AdvFeatureConfig+0x24e>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006688:	2b00      	cmp	r3, #0
 800668a:	d013      	beq.n	80066b4 <UART_AdvFeatureConfig+0x238>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006690:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006694:	d00e      	beq.n	80066b4 <UART_AdvFeatureConfig+0x238>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800669e:	d009      	beq.n	80066b4 <UART_AdvFeatureConfig+0x238>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80066a8:	d004      	beq.n	80066b4 <UART_AdvFeatureConfig+0x238>
 80066aa:	f640 3178 	movw	r1, #2936	; 0xb78
 80066ae:	4818      	ldr	r0, [pc, #96]	; (8006710 <UART_AdvFeatureConfig+0x294>)
 80066b0:	f7fa fb3f 	bl	8000d32 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d018      	beq.n	8006708 <UART_AdvFeatureConfig+0x28c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d009      	beq.n	80066f2 <UART_AdvFeatureConfig+0x276>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80066e6:	d004      	beq.n	80066f2 <UART_AdvFeatureConfig+0x276>
 80066e8:	f44f 6138 	mov.w	r1, #2944	; 0xb80
 80066ec:	4808      	ldr	r0, [pc, #32]	; (8006710 <UART_AdvFeatureConfig+0x294>)
 80066ee:	f7fa fb20 	bl	8000d32 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	430a      	orrs	r2, r1
 8006706:	605a      	str	r2, [r3, #4]
  }
}
 8006708:	bf00      	nop
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	08006bc8 	.word	0x08006bc8
 8006714:	40011000 	.word	0x40011000
 8006718:	40004400 	.word	0x40004400
 800671c:	40004800 	.word	0x40004800
 8006720:	40011400 	.word	0x40011400

08006724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af02      	add	r7, sp, #8
 800672a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006732:	f7fb f8d9 	bl	80018e8 <HAL_GetTick>
 8006736:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0308 	and.w	r3, r3, #8
 8006742:	2b08      	cmp	r3, #8
 8006744:	d10e      	bne.n	8006764 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006746:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f82a 	bl	80067ae <UART_WaitOnFlagUntilTimeout>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d001      	beq.n	8006764 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e020      	b.n	80067a6 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0304 	and.w	r3, r3, #4
 800676e:	2b04      	cmp	r3, #4
 8006770:	d10e      	bne.n	8006790 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006772:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 f814 	bl	80067ae <UART_WaitOnFlagUntilTimeout>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d001      	beq.n	8006790 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e00a      	b.n	80067a6 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2220      	movs	r2, #32
 8006794:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2220      	movs	r2, #32
 800679a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b084      	sub	sp, #16
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	60f8      	str	r0, [r7, #12]
 80067b6:	60b9      	str	r1, [r7, #8]
 80067b8:	603b      	str	r3, [r7, #0]
 80067ba:	4613      	mov	r3, r2
 80067bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067be:	e05d      	b.n	800687c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c6:	d059      	beq.n	800687c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067c8:	f7fb f88e 	bl	80018e8 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	69ba      	ldr	r2, [r7, #24]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d302      	bcc.n	80067de <UART_WaitOnFlagUntilTimeout+0x30>
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d11b      	bne.n	8006816 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689a      	ldr	r2, [r3, #8]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0201 	bic.w	r2, r2, #1
 80067fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2220      	movs	r2, #32
 8006802:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2220      	movs	r2, #32
 8006808:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e042      	b.n	800689c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0304 	and.w	r3, r3, #4
 8006820:	2b00      	cmp	r3, #0
 8006822:	d02b      	beq.n	800687c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	69db      	ldr	r3, [r3, #28]
 800682a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800682e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006832:	d123      	bne.n	800687c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800683c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800684c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689a      	ldr	r2, [r3, #8]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f022 0201 	bic.w	r2, r2, #1
 800685c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2220      	movs	r2, #32
 8006862:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2220      	movs	r2, #32
 8006868:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2220      	movs	r2, #32
 800686e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e00f      	b.n	800689c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	69da      	ldr	r2, [r3, #28]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	4013      	ands	r3, r2
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	429a      	cmp	r2, r3
 800688a:	bf0c      	ite	eq
 800688c:	2301      	moveq	r3, #1
 800688e:	2300      	movne	r3, #0
 8006890:	b2db      	uxtb	r3, r3
 8006892:	461a      	mov	r2, r3
 8006894:	79fb      	ldrb	r3, [r7, #7]
 8006896:	429a      	cmp	r2, r3
 8006898:	d092      	beq.n	80067c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80068ba:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689a      	ldr	r2, [r3, #8]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f022 0201 	bic.w	r2, r2, #1
 80068ca:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2220      	movs	r2, #32
 80068d0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f7ff fa6a 	bl	8005ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006908:	bf00      	nop
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006926:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2220      	movs	r2, #32
 800692c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff fa47 	bl	8005dc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800693a:	bf00      	nop
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
	...

08006944 <__libc_init_array>:
 8006944:	b570      	push	{r4, r5, r6, lr}
 8006946:	4e0d      	ldr	r6, [pc, #52]	; (800697c <__libc_init_array+0x38>)
 8006948:	4c0d      	ldr	r4, [pc, #52]	; (8006980 <__libc_init_array+0x3c>)
 800694a:	1ba4      	subs	r4, r4, r6
 800694c:	10a4      	asrs	r4, r4, #2
 800694e:	2500      	movs	r5, #0
 8006950:	42a5      	cmp	r5, r4
 8006952:	d109      	bne.n	8006968 <__libc_init_array+0x24>
 8006954:	4e0b      	ldr	r6, [pc, #44]	; (8006984 <__libc_init_array+0x40>)
 8006956:	4c0c      	ldr	r4, [pc, #48]	; (8006988 <__libc_init_array+0x44>)
 8006958:	f000 f820 	bl	800699c <_init>
 800695c:	1ba4      	subs	r4, r4, r6
 800695e:	10a4      	asrs	r4, r4, #2
 8006960:	2500      	movs	r5, #0
 8006962:	42a5      	cmp	r5, r4
 8006964:	d105      	bne.n	8006972 <__libc_init_array+0x2e>
 8006966:	bd70      	pop	{r4, r5, r6, pc}
 8006968:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800696c:	4798      	blx	r3
 800696e:	3501      	adds	r5, #1
 8006970:	e7ee      	b.n	8006950 <__libc_init_array+0xc>
 8006972:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006976:	4798      	blx	r3
 8006978:	3501      	adds	r5, #1
 800697a:	e7f2      	b.n	8006962 <__libc_init_array+0x1e>
 800697c:	08006c24 	.word	0x08006c24
 8006980:	08006c24 	.word	0x08006c24
 8006984:	08006c24 	.word	0x08006c24
 8006988:	08006c28 	.word	0x08006c28

0800698c <memset>:
 800698c:	4402      	add	r2, r0
 800698e:	4603      	mov	r3, r0
 8006990:	4293      	cmp	r3, r2
 8006992:	d100      	bne.n	8006996 <memset+0xa>
 8006994:	4770      	bx	lr
 8006996:	f803 1b01 	strb.w	r1, [r3], #1
 800699a:	e7f9      	b.n	8006990 <memset+0x4>

0800699c <_init>:
 800699c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800699e:	bf00      	nop
 80069a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069a2:	bc08      	pop	{r3}
 80069a4:	469e      	mov	lr, r3
 80069a6:	4770      	bx	lr

080069a8 <_fini>:
 80069a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069aa:	bf00      	nop
 80069ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ae:	bc08      	pop	{r3}
 80069b0:	469e      	mov	lr, r3
 80069b2:	4770      	bx	lr
