
CubeRev21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069d8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08006bd0  08006bd0  00016bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dbc  08006dbc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006dbc  08006dbc  00016dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dc4  08006dc4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dc4  08006dc4  00016dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dc8  08006dc8  00016dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  2000000c  08006dd8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08006dd8  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d542  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002228  00000000  00000000  0002d57c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ba0  00000000  00000000  0002f7a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a68  00000000  00000000  00030348  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d996  00000000  00000000  00030db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c71e  00000000  00000000  0005e746  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010fb75  00000000  00000000  0006ae64  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017a9d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d68  00000000  00000000  0017aa54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006bb8 	.word	0x08006bb8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08006bb8 	.word	0x08006bb8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800053c:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <MX_CRC_Init+0x3c>)
 800053e:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <MX_CRC_Init+0x40>)
 8000540:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_CRC_Init+0x3c>)
 8000544:	2200      	movs	r2, #0
 8000546:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000548:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <MX_CRC_Init+0x3c>)
 800054a:	2200      	movs	r2, #0
 800054c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_CRC_Init+0x3c>)
 8000550:	2200      	movs	r2, #0
 8000552:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <MX_CRC_Init+0x3c>)
 8000556:	2200      	movs	r2, #0
 8000558:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <MX_CRC_Init+0x3c>)
 800055c:	2203      	movs	r2, #3
 800055e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <MX_CRC_Init+0x3c>)
 8000562:	f001 fe39 	bl	80021d8 <HAL_CRC_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800056c:	f000 ff5b 	bl	8001426 <Error_Handler>
  }

}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	2000002c 	.word	0x2000002c
 8000578:	40023000 	.word	0x40023000

0800057c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <HAL_CRC_MspInit+0x38>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d10b      	bne.n	80005a6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <HAL_CRC_MspInit+0x3c>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a09      	ldr	r2, [pc, #36]	; (80005b8 <HAL_CRC_MspInit+0x3c>)
 8000594:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <HAL_CRC_MspInit+0x3c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	40023000 	.word	0x40023000
 80005b8:	40023800 	.word	0x40023800

080005bc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b090      	sub	sp, #64	; 0x40
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005d2:	4bb2      	ldr	r3, [pc, #712]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4ab1      	ldr	r2, [pc, #708]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005d8:	f043 0310 	orr.w	r3, r3, #16
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4baf      	ldr	r3, [pc, #700]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0310 	and.w	r3, r3, #16
 80005e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80005e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80005ea:	4bac      	ldr	r3, [pc, #688]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4aab      	ldr	r2, [pc, #684]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4ba9      	ldr	r3, [pc, #676]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4ba6      	ldr	r3, [pc, #664]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4aa5      	ldr	r2, [pc, #660]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4ba3      	ldr	r3, [pc, #652]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	623b      	str	r3, [r7, #32]
 8000618:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800061a:	4ba0      	ldr	r3, [pc, #640]	; (800089c <MX_GPIO_Init+0x2e0>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a9f      	ldr	r2, [pc, #636]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000620:	f043 0320 	orr.w	r3, r3, #32
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b9d      	ldr	r3, [pc, #628]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0320 	and.w	r3, r3, #32
 800062e:	61fb      	str	r3, [r7, #28]
 8000630:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000632:	4b9a      	ldr	r3, [pc, #616]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a99      	ldr	r2, [pc, #612]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b97      	ldr	r3, [pc, #604]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000646:	61bb      	str	r3, [r7, #24]
 8000648:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b94      	ldr	r3, [pc, #592]	; (800089c <MX_GPIO_Init+0x2e0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a93      	ldr	r2, [pc, #588]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b91      	ldr	r3, [pc, #580]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b8e      	ldr	r3, [pc, #568]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a8d      	ldr	r2, [pc, #564]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b8b      	ldr	r3, [pc, #556]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800067a:	4b88      	ldr	r3, [pc, #544]	; (800089c <MX_GPIO_Init+0x2e0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a87      	ldr	r2, [pc, #540]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000680:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b85      	ldr	r3, [pc, #532]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000692:	4b82      	ldr	r3, [pc, #520]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a81      	ldr	r2, [pc, #516]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b7f      	ldr	r3, [pc, #508]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006aa:	4b7c      	ldr	r3, [pc, #496]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a7b      	ldr	r2, [pc, #492]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006b0:	f043 0308 	orr.w	r3, r3, #8
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b79      	ldr	r3, [pc, #484]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0308 	and.w	r3, r3, #8
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80006c2:	4b76      	ldr	r3, [pc, #472]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a75      	ldr	r2, [pc, #468]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b73      	ldr	r3, [pc, #460]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED_4_Pin|LWL_OUT_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	f244 0108 	movw	r1, #16392	; 0x4008
 80006e0:	486f      	ldr	r0, [pc, #444]	; (80008a0 <MX_GPIO_Init+0x2e4>)
 80006e2:	f002 fa99 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_3_Pin|LED_2_Pin|LED_1_Pin|SD_CS_Pin
 80006e6:	2200      	movs	r2, #0
 80006e8:	f24e 4138 	movw	r1, #58424	; 0xe438
 80006ec:	486d      	ldr	r0, [pc, #436]	; (80008a4 <MX_GPIO_Init+0x2e8>)
 80006ee:	f002 fa93 	bl	8002c18 <HAL_GPIO_WritePin>
                          |nCS_DMS1_Pin|nCS_DMS2_Pin|nCS_DMS3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, nCS_DMS4_Pin|nCS_DMS5_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2103      	movs	r1, #3
 80006f6:	486c      	ldr	r0, [pc, #432]	; (80008a8 <MX_GPIO_Init+0x2ec>)
 80006f8:	f002 fa8e 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCS_DMS6_GPIO_Port, nCS_DMS6_Pin, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2180      	movs	r1, #128	; 0x80
 8000700:	486a      	ldr	r0, [pc, #424]	; (80008ac <MX_GPIO_Init+0x2f0>)
 8000702:	f002 fa89 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, FL1_HLD_Pin|FL1_WP_Pin|FL1_RES_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800070c:	4868      	ldr	r0, [pc, #416]	; (80008b0 <MX_GPIO_Init+0x2f4>)
 800070e:	f002 fa83 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL1_CS2_GPIO_Port, FL1_CS2_Pin, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000718:	4865      	ldr	r0, [pc, #404]	; (80008b0 <MX_GPIO_Init+0x2f4>)
 800071a:	f002 fa7d 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL1_CS1_GPIO_Port, FL1_CS1_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000724:	4863      	ldr	r0, [pc, #396]	; (80008b4 <MX_GPIO_Init+0x2f8>)
 8000726:	f002 fa77 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, nCS_PT3_Pin|FL2_HLD_Pin|FL2_RES_Pin|FL2_WP_Pin
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 4167 	mov.w	r1, #59136	; 0xe700
 8000730:	4861      	ldr	r0, [pc, #388]	; (80008b8 <MX_GPIO_Init+0x2fc>)
 8000732:	f002 fa71 	bl	8002c18 <HAL_GPIO_WritePin>
                          |nCS_PT2_Pin|nCS_PT1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FL2_CS2_Pin|FL2_CS1_Pin, GPIO_PIN_SET);
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800073c:	485e      	ldr	r0, [pc, #376]	; (80008b8 <MX_GPIO_Init+0x2fc>)
 800073e:	f002 fa6b 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
 8000742:	f64f 7318 	movw	r3, #65304	; 0xff18
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000748:	2303      	movs	r3, #3
 800074a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000754:	4619      	mov	r1, r3
 8000756:	4855      	ldr	r0, [pc, #340]	; (80008ac <MX_GPIO_Init+0x2f0>)
 8000758:	f001 feb0 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LWL_IN_Pin;
 800075c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000760:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000762:	2300      	movs	r3, #0
 8000764:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LWL_IN_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800076e:	4619      	mov	r1, r3
 8000770:	484b      	ldr	r0, [pc, #300]	; (80008a0 <MX_GPIO_Init+0x2e4>)
 8000772:	f001 fea3 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000776:	f24e 33ff 	movw	r3, #58367	; 0xe3ff
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800077c:	2303      	movs	r3, #3
 800077e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000784:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000788:	4619      	mov	r1, r3
 800078a:	484c      	ldr	r0, [pc, #304]	; (80008bc <MX_GPIO_Init+0x300>)
 800078c:	f001 fe96 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PI10 PI11 PI12 PI13
                           PI15 PI0 PI1 PI2
                           PI4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000790:	f64b 4317 	movw	r3, #48151	; 0xbc17
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000796:	2303      	movs	r3, #3
 8000798:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800079e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007a2:	4619      	mov	r1, r3
 80007a4:	483e      	ldr	r0, [pc, #248]	; (80008a0 <MX_GPIO_Init+0x2e4>)
 80007a6:	f001 fe89 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF6
                           PF11 PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 80007aa:	f641 0347 	movw	r3, #6215	; 0x1847
 80007ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b0:	2303      	movs	r3, #3
 80007b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007bc:	4619      	mov	r1, r3
 80007be:	4839      	ldr	r0, [pc, #228]	; (80008a4 <MX_GPIO_Init+0x2e8>)
 80007c0:	f001 fe7c 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LED_4_Pin|LWL_OUT_Pin;
 80007c4:	f244 0308 	movw	r3, #16392	; 0x4008
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80007d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007da:	4619      	mov	r1, r3
 80007dc:	4830      	ldr	r0, [pc, #192]	; (80008a0 <MX_GPIO_Init+0x2e4>)
 80007de:	f001 fe6d 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LED_1_Pin|SD_CS_Pin
 80007e2:	f24e 4338 	movw	r3, #58424	; 0xe438
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |nCS_DMS1_Pin|nCS_DMS2_Pin|nCS_DMS3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f8:	4619      	mov	r1, r3
 80007fa:	482a      	ldr	r0, [pc, #168]	; (80008a4 <MX_GPIO_Init+0x2e8>)
 80007fc:	f001 fe5e 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH2 PH3
                           PH4 PH5 PH6 PH7
                           PH8 PH13 PH14 PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000800:	f24e 13ff 	movw	r3, #57855	; 0xe1ff
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000806:	2303      	movs	r3, #3
 8000808:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800080e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000812:	4619      	mov	r1, r3
 8000814:	4826      	ldr	r0, [pc, #152]	; (80008b0 <MX_GPIO_Init+0x2f4>)
 8000816:	f001 fe51 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800081a:	231e      	movs	r3, #30
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800081e:	2303      	movs	r3, #3
 8000820:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800082a:	4619      	mov	r1, r3
 800082c:	4824      	ldr	r0, [pc, #144]	; (80008c0 <MX_GPIO_Init+0x304>)
 800082e:	f001 fe45 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000832:	f640 73e3 	movw	r3, #4067	; 0xfe3
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000838:	2303      	movs	r3, #3
 800083a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000840:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000844:	4619      	mov	r1, r3
 8000846:	481b      	ldr	r0, [pc, #108]	; (80008b4 <MX_GPIO_Init+0x2f8>)
 8000848:	f001 fe38 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ0 PJ1 PJ2 PJ3
                           PJ4 PJ5 PJ12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800084c:	f241 033f 	movw	r3, #4159	; 0x103f
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000852:	2303      	movs	r3, #3
 8000854:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800085a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800085e:	4619      	mov	r1, r3
 8000860:	4818      	ldr	r0, [pc, #96]	; (80008c4 <MX_GPIO_Init+0x308>)
 8000862:	f001 fe2b 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = nCS_DMS4_Pin|nCS_DMS5_Pin;
 8000866:	2303      	movs	r3, #3
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800087a:	4619      	mov	r1, r3
 800087c:	480a      	ldr	r0, [pc, #40]	; (80008a8 <MX_GPIO_Init+0x2ec>)
 800087e:	f001 fe1d 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nCS_DMS6_Pin;
 8000882:	2380      	movs	r3, #128	; 0x80
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(nCS_DMS6_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000896:	4619      	mov	r1, r3
 8000898:	e016      	b.n	80008c8 <MX_GPIO_Init+0x30c>
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	40022000 	.word	0x40022000
 80008a4:	40021400 	.word	0x40021400
 80008a8:	40021800 	.word	0x40021800
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40021c00 	.word	0x40021c00
 80008b4:	40020400 	.word	0x40020400
 80008b8:	40020c00 	.word	0x40020c00
 80008bc:	40020800 	.word	0x40020800
 80008c0:	40020000 	.word	0x40020000
 80008c4:	40022400 	.word	0x40022400
 80008c8:	485d      	ldr	r0, [pc, #372]	; (8000a40 <MX_GPIO_Init+0x484>)
 80008ca:	f001 fdf7 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = FL1_HLD_Pin|FL1_WP_Pin|FL1_RES_Pin|FL1_CS2_Pin;
 80008ce:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e4:	4619      	mov	r1, r3
 80008e6:	4857      	ldr	r0, [pc, #348]	; (8000a44 <MX_GPIO_Init+0x488>)
 80008e8:	f001 fde8 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FL1_CS1_Pin;
 80008ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FL1_CS1_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000902:	4619      	mov	r1, r3
 8000904:	4850      	ldr	r0, [pc, #320]	; (8000a48 <MX_GPIO_Init+0x48c>)
 8000906:	f001 fdd9 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = nCS_PT3_Pin|FL2_HLD_Pin|FL2_RES_Pin|FL2_CS2_Pin
 800090a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FL2_CS1_Pin|FL2_WP_Pin|nCS_PT2_Pin|nCS_PT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800091c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000920:	4619      	mov	r1, r3
 8000922:	484a      	ldr	r0, [pc, #296]	; (8000a4c <MX_GPIO_Init+0x490>)
 8000924:	f001 fdca 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MS_SEL_Pin;
 8000928:	2304      	movs	r3, #4
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MS_SEL_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000938:	4619      	mov	r1, r3
 800093a:	4845      	ldr	r0, [pc, #276]	; (8000a50 <MX_GPIO_Init+0x494>)
 800093c:	f001 fdbe 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG5 PG6 PG7
                           PG8 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000940:	f64f 73e8 	movw	r3, #65512	; 0xffe8
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000946:	2303      	movs	r3, #3
 8000948:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800094e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000952:	4619      	mov	r1, r3
 8000954:	483e      	ldr	r0, [pc, #248]	; (8000a50 <MX_GPIO_Init+0x494>)
 8000956:	f001 fdb1 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDRDY_DMS1_Pin;
 800095a:	2310      	movs	r3, #16
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095e:	4b3d      	ldr	r3, [pc, #244]	; (8000a54 <MX_GPIO_Init+0x498>)
 8000960:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(nDRDY_DMS1_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800096a:	4619      	mov	r1, r3
 800096c:	4838      	ldr	r0, [pc, #224]	; (8000a50 <MX_GPIO_Init+0x494>)
 800096e:	f001 fda5 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = nDRDY_DMS2_Pin|nDRDY_DMS3_Pin|nDRDY_DMS5_Pin|nDRDY_DMS6_Pin;
 8000972:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000978:	4b36      	ldr	r3, [pc, #216]	; (8000a54 <MX_GPIO_Init+0x498>)
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000984:	4619      	mov	r1, r3
 8000986:	4834      	ldr	r0, [pc, #208]	; (8000a58 <MX_GPIO_Init+0x49c>)
 8000988:	f001 fd98 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDRDY_DMS4_Pin;
 800098c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000992:	2300      	movs	r3, #0
 8000994:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(nDRDY_DMS4_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800099e:	4619      	mov	r1, r3
 80009a0:	482d      	ldr	r0, [pc, #180]	; (8000a58 <MX_GPIO_Init+0x49c>)
 80009a2:	f001 fd8b 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80009a6:	23fb      	movs	r3, #251	; 0xfb
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009aa:	2303      	movs	r3, #3
 80009ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009b6:	4619      	mov	r1, r3
 80009b8:	4824      	ldr	r0, [pc, #144]	; (8000a4c <MX_GPIO_Init+0x490>)
 80009ba:	f001 fd7f 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = nDRDY_PT3_Pin|nDRDY_PT2_Pin|nDRDY_PT1_Pin;
 80009be:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c4:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <MX_GPIO_Init+0x498>)
 80009c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80009cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d0:	4619      	mov	r1, r3
 80009d2:	4822      	ldr	r0, [pc, #136]	; (8000a5c <MX_GPIO_Init+0x4a0>)
 80009d4:	f001 fd72 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PK3 PK4 PK5 PK6
                           PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80009d8:	23f8      	movs	r3, #248	; 0xf8
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009dc:	2303      	movs	r3, #3
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80009e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e8:	4619      	mov	r1, r3
 80009ea:	481d      	ldr	r0, [pc, #116]	; (8000a60 <MX_GPIO_Init+0x4a4>)
 80009ec:	f001 fd66 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SODS_OPT_Pin|SOE_OPT_Pin|LO_OPT_Pin;
 80009f0:	23e0      	movs	r3, #224	; 0xe0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_GPIO_Init+0x498>)
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a00:	4619      	mov	r1, r3
 8000a02:	4818      	ldr	r0, [pc, #96]	; (8000a64 <MX_GPIO_Init+0x4a8>)
 8000a04:	f001 fd5a 	bl	80024bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2105      	movs	r1, #5
 8000a0c:	200a      	movs	r0, #10
 8000a0e:	f001 fb93 	bl	8002138 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000a12:	200a      	movs	r0, #10
 8000a14:	f001 fbbc 	bl	8002190 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2105      	movs	r1, #5
 8000a1c:	2017      	movs	r0, #23
 8000a1e:	f001 fb8b 	bl	8002138 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a22:	2017      	movs	r0, #23
 8000a24:	f001 fbb4 	bl	8002190 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2105      	movs	r1, #5
 8000a2c:	2028      	movs	r0, #40	; 0x28
 8000a2e:	f001 fb83 	bl	8002138 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a32:	2028      	movs	r0, #40	; 0x28
 8000a34:	f001 fbac 	bl	8002190 <HAL_NVIC_EnableIRQ>

}
 8000a38:	bf00      	nop
 8000a3a:	3740      	adds	r7, #64	; 0x40
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40021c00 	.word	0x40021c00
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	40021800 	.word	0x40021800
 8000a54:	10110000 	.word	0x10110000
 8000a58:	40020000 	.word	0x40020000
 8000a5c:	40022400 	.word	0x40022400
 8000a60:	40022800 	.word	0x40022800
 8000a64:	40022000 	.word	0x40022000

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6c:	f001 f9f5 	bl	8001e5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a70:	f000 f83c 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a74:	f7ff fda2 	bl	80005bc <MX_GPIO_Init>
  MX_SPI2_Init();
 8000a78:	f000 fce8 	bl	800144c <MX_SPI2_Init>
  MX_SPI3_Init();
 8000a7c:	f000 fd24 	bl	80014c8 <MX_SPI3_Init>
  MX_SPI6_Init();
 8000a80:	f000 fddc 	bl	800163c <MX_SPI6_Init>
  MX_UART4_Init();
 8000a84:	f001 f832 	bl	8001aec <MX_UART4_Init>
  MX_UART8_Init();
 8000a88:	f001 f890 	bl	8001bac <MX_UART8_Init>
  MX_UART5_Init();
 8000a8c:	f001 f85e 	bl	8001b4c <MX_UART5_Init>
  MX_CRC_Init();
 8000a90:	f7ff fd52 	bl	8000538 <MX_CRC_Init>
  MX_SPI4_Init();
 8000a94:	f000 fd56 	bl	8001544 <MX_SPI4_Init>
  MX_SPI5_Init();
 8000a98:	f000 fd92 	bl	80015c0 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);  //clear all LEDs
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2120      	movs	r1, #32
 8000aa0:	480f      	ldr	r0, [pc, #60]	; (8000ae0 <main+0x78>)
 8000aa2:	f002 f8b9 	bl	8002c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2110      	movs	r1, #16
 8000aaa:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <main+0x78>)
 8000aac:	f002 f8b4 	bl	8002c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2108      	movs	r1, #8
 8000ab4:	480a      	ldr	r0, [pc, #40]	; (8000ae0 <main+0x78>)
 8000ab6:	f002 f8af 	bl	8002c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac0:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <main+0x7c>)
 8000ac2:	f002 f8a9 	bl	8002c18 <HAL_GPIO_WritePin>

  if (!HAL_GPIO_ReadPin(MS_SEL_GPIO_Port, MS_SEL_Pin)) {
 8000ac6:	2104      	movs	r1, #4
 8000ac8:	4807      	ldr	r0, [pc, #28]	; (8000ae8 <main+0x80>)
 8000aca:	f002 f885 	bl	8002bd8 <HAL_GPIO_ReadPin>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d102      	bne.n	8000ada <main+0x72>
    main_master();
 8000ad4:	f000 f89e 	bl	8000c14 <main_master>
 8000ad8:	e001      	b.n	8000ade <main+0x76>
  } else { //Slave loop
    main_slave();
 8000ada:	f000 f8e7 	bl	8000cac <main_slave>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <main+0x76>
 8000ae0:	40021400 	.word	0x40021400
 8000ae4:	40022000 	.word	0x40022000
 8000ae8:	40021800 	.word	0x40021800

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b0b8      	sub	sp, #224	; 0xe0
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000af6:	2234      	movs	r2, #52	; 0x34
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f006 f854 	bl	8006ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b10:	f107 0308 	add.w	r3, r7, #8
 8000b14:	2290      	movs	r2, #144	; 0x90
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f006 f845 	bl	8006ba8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	4b3b      	ldr	r3, [pc, #236]	; (8000c0c <SystemClock_Config+0x120>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a3a      	ldr	r2, [pc, #232]	; (8000c0c <SystemClock_Config+0x120>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b38      	ldr	r3, [pc, #224]	; (8000c0c <SystemClock_Config+0x120>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b36:	4b36      	ldr	r3, [pc, #216]	; (8000c10 <SystemClock_Config+0x124>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a35      	ldr	r2, [pc, #212]	; (8000c10 <SystemClock_Config+0x124>)
 8000b3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b40:	6013      	str	r3, [r2, #0]
 8000b42:	4b33      	ldr	r3, [pc, #204]	; (8000c10 <SystemClock_Config+0x124>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b54:	2301      	movs	r3, #1
 8000b56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b5a:	2310      	movs	r3, #16
 8000b5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b60:	2302      	movs	r3, #2
 8000b62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b72:	23c0      	movs	r3, #192	; 0xc0
 8000b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b84:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f002 f8e5 	bl	8002d58 <HAL_RCC_OscConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000b94:	f000 fc47 	bl	8001426 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b98:	f002 f88e 	bl	8002cb8 <HAL_PWREx_EnableOverDrive>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000ba2:	f000 fc40 	bl	8001426 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba6:	230f      	movs	r3, #15
 8000ba8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bac:	2302      	movs	r3, #2
 8000bae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bb8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000bc0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000bc8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000bcc:	2106      	movs	r1, #6
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f002 fc32 	bl	8003438 <HAL_RCC_ClockConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000bda:	f000 fc24 	bl	8001426 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART5
 8000bde:	f44f 5318 	mov.w	r3, #9728	; 0x2600
 8000be2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART8;
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f002 fead 	bl	8003954 <HAL_RCCEx_PeriphCLKConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000c00:	f000 fc11 	bl	8001426 <Error_Handler>
  }
}
 8000c04:	bf00      	nop
 8000c06:	37e0      	adds	r7, #224	; 0xe0
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40007000 	.word	0x40007000

08000c14 <main_master>:

/* USER CODE BEGIN 4 */
void main_master(void) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);  //ON = MS set to Master
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	4820      	ldr	r0, [pc, #128]	; (8000ca0 <main_master+0x8c>)
 8000c20:	f001 fffa 	bl	8002c18 <HAL_GPIO_WritePin>
  //uint8_t bufferOff[3] = {0x01, 0x03, 0x05};
  //uint8_t bufferOn[3] = {0x02, 0x04, 0x06};

  int Sensor = 4;
 8000c24:	2304      	movs	r3, #4
 8000c26:	607b      	str	r3, [r7, #4]
  adc_scan_start(Sensor - 1, 2000, 128, 0); //0 50 100 250 500 750 1000 1500
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	b258      	sxtb	r0, r3
 8000c32:	2300      	movs	r3, #0
 8000c34:	2280      	movs	r2, #128	; 0x80
 8000c36:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000c3a:	f000 f8e9 	bl	8000e10 <adc_scan_start>
  HAL_Delay(1000);
 8000c3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c42:	f001 f967 	bl	8001f14 <HAL_Delay>

  uint8_t softgain = 1;
 8000c46:	2301      	movs	r3, #1
 8000c48:	70fb      	strb	r3, [r7, #3]
  uint8_t offset = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	70bb      	strb	r3, [r7, #2]
  uint8_t dout = 32;
 8000c4e:	2320      	movs	r3, #32
 8000c50:	707b      	strb	r3, [r7, #1]
  HAL_UART_Transmit(&huart4, (uint8_t *)&dout, sizeof(dout), HAL_MAX_DELAY);
 8000c52:	1c79      	adds	r1, r7, #1
 8000c54:	f04f 33ff 	mov.w	r3, #4294967295
 8000c58:	2201      	movs	r2, #1
 8000c5a:	4812      	ldr	r0, [pc, #72]	; (8000ca4 <main_master+0x90>)
 8000c5c:	f004 ff1e 	bl	8005a9c <HAL_UART_Transmit>

  while (1) { //Master loop


	  data = adc_scan(Sensor - 1, 0x01);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	3b01      	subs	r3, #1
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	b25b      	sxtb	r3, r3
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 f8bd 	bl	8000dec <adc_scan>
 8000c72:	4603      	mov	r3, r0
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <main_master+0x94>)
 8000c78:	801a      	strh	r2, [r3, #0]
	  dout = data * softgain + offset;
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <main_master+0x94>)
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	78fa      	ldrb	r2, [r7, #3]
 8000c82:	fb12 f303 	smulbb	r3, r2, r3
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	78bb      	ldrb	r3, [r7, #2]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	707b      	strb	r3, [r7, #1]
	  HAL_UART_Transmit(&huart4, (uint16_t *)&dout, sizeof(dout), HAL_MAX_DELAY);
 8000c90:	1c79      	adds	r1, r7, #1
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	2201      	movs	r2, #1
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <main_master+0x90>)
 8000c9a:	f004 feff 	bl	8005a9c <HAL_UART_Transmit>
	  data = adc_scan(Sensor - 1, 0x01);
 8000c9e:	e7df      	b.n	8000c60 <main_master+0x4c>
 8000ca0:	40021400 	.word	0x40021400
 8000ca4:	20000344 	.word	0x20000344
 8000ca8:	20000028 	.word	0x20000028

08000cac <main_slave>:
    HAL_Delay(100);
    */
  }
}

void main_slave(void) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
  uint8_t buffer[1] = {0x00};
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	713b      	strb	r3, [r7, #4]
  while (1) {
    HAL_UART_Receive(&huart5, buffer, sizeof(buffer), 5);
 8000cb6:	1d39      	adds	r1, r7, #4
 8000cb8:	2305      	movs	r3, #5
 8000cba:	2201      	movs	r2, #1
 8000cbc:	481e      	ldr	r0, [pc, #120]	; (8000d38 <main_slave+0x8c>)
 8000cbe:	f004 ff7e 	bl	8005bbe <HAL_UART_Receive>
    if (buffer[0] == 0x01) {
 8000cc2:	793b      	ldrb	r3, [r7, #4]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d105      	bne.n	8000cd4 <main_slave+0x28>
      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2110      	movs	r1, #16
 8000ccc:	481b      	ldr	r0, [pc, #108]	; (8000d3c <main_slave+0x90>)
 8000cce:	f001 ffa3 	bl	8002c18 <HAL_GPIO_WritePin>
 8000cd2:	e02d      	b.n	8000d30 <main_slave+0x84>
    } else if (buffer[0] == 0x02) {
 8000cd4:	793b      	ldrb	r3, [r7, #4]
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d105      	bne.n	8000ce6 <main_slave+0x3a>
      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	2110      	movs	r1, #16
 8000cde:	4817      	ldr	r0, [pc, #92]	; (8000d3c <main_slave+0x90>)
 8000ce0:	f001 ff9a 	bl	8002c18 <HAL_GPIO_WritePin>
 8000ce4:	e024      	b.n	8000d30 <main_slave+0x84>
    } else if (buffer[0] == 0x03) {
 8000ce6:	793b      	ldrb	r3, [r7, #4]
 8000ce8:	2b03      	cmp	r3, #3
 8000cea:	d105      	bne.n	8000cf8 <main_slave+0x4c>
      HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2108      	movs	r1, #8
 8000cf0:	4812      	ldr	r0, [pc, #72]	; (8000d3c <main_slave+0x90>)
 8000cf2:	f001 ff91 	bl	8002c18 <HAL_GPIO_WritePin>
 8000cf6:	e01b      	b.n	8000d30 <main_slave+0x84>
    } else if (buffer[0] == 0x04) {
 8000cf8:	793b      	ldrb	r3, [r7, #4]
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	d105      	bne.n	8000d0a <main_slave+0x5e>
      HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2108      	movs	r1, #8
 8000d02:	480e      	ldr	r0, [pc, #56]	; (8000d3c <main_slave+0x90>)
 8000d04:	f001 ff88 	bl	8002c18 <HAL_GPIO_WritePin>
 8000d08:	e012      	b.n	8000d30 <main_slave+0x84>
    }  else if (buffer[0] == 0x05) {
 8000d0a:	793b      	ldrb	r3, [r7, #4]
 8000d0c:	2b05      	cmp	r3, #5
 8000d0e:	d106      	bne.n	8000d1e <main_slave+0x72>
      HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d16:	480a      	ldr	r0, [pc, #40]	; (8000d40 <main_slave+0x94>)
 8000d18:	f001 ff7e 	bl	8002c18 <HAL_GPIO_WritePin>
 8000d1c:	e008      	b.n	8000d30 <main_slave+0x84>
    } else if (buffer[0] == 0x06) {
 8000d1e:	793b      	ldrb	r3, [r7, #4]
 8000d20:	2b06      	cmp	r3, #6
 8000d22:	d105      	bne.n	8000d30 <main_slave+0x84>
      HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <main_slave+0x94>)
 8000d2c:	f001 ff74 	bl	8002c18 <HAL_GPIO_WritePin>
    }
    buffer[1] = 0x00;
 8000d30:	2300      	movs	r3, #0
 8000d32:	717b      	strb	r3, [r7, #5]
    HAL_UART_Receive(&huart5, buffer, sizeof(buffer), 5);
 8000d34:	e7bf      	b.n	8000cb6 <main_slave+0xa>
 8000d36:	bf00      	nop
 8000d38:	20000244 	.word	0x20000244
 8000d3c:	40021400 	.word	0x40021400
 8000d40:	40022000 	.word	0x40022000

08000d44 <cs_enable>:
  }
}

int cs_enable(int8_t id){
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(port_from_id(id), pin_from_id(id), GPIO_PIN_RESET);
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f9f4 	bl	8001140 <port_from_id>
 8000d58:	4604      	mov	r4, r0
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f9b0 	bl	80010c4 <pin_from_id>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2200      	movs	r2, #0
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	f001 ff54 	bl	8002c18 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f001 f8cf 	bl	8001f14 <HAL_Delay>
	return 0;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd90      	pop	{r4, r7, pc}

08000d80 <cs_disable>:

int cs_disable(int8_t id){
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(port_from_id(id), pin_from_id(id), GPIO_PIN_SET);
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f9d6 	bl	8001140 <port_from_id>
 8000d94:	4604      	mov	r4, r0
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 f992 	bl	80010c4 <pin_from_id>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2201      	movs	r2, #1
 8000da4:	4619      	mov	r1, r3
 8000da6:	4620      	mov	r0, r4
 8000da8:	f001 ff36 	bl	8002c18 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000dac:	2001      	movs	r0, #1
 8000dae:	f001 f8b1 	bl	8001f14 <HAL_Delay>
	return 0;
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd90      	pop	{r4, r7, pc}

08000dbc <wr_spi>:

int wr_spi(int8_t id, uint8_t cmd){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	460a      	mov	r2, r1
 8000dc6:	71fb      	strb	r3, [r7, #7]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Transmit(get_hspi_from_id(id), &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 fa73 	bl	80012bc <get_hspi_from_id>
 8000dd6:	1db9      	adds	r1, r7, #6
 8000dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f003 ffcd 	bl	8004d7c <HAL_SPI_Transmit>
	return 0;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <adc_scan>:

uint16_t adc_scan(int8_t id, uint8_t chn){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	460a      	mov	r2, r1
 8000df6:	71fb      	strb	r3, [r7, #7]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	71bb      	strb	r3, [r7, #6]
	return rd_data(id);
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f000 f901 	bl	8001008 <rd_data>
 8000e06:	4603      	mov	r3, r0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <adc_scan_start>:

int16_t adc_scan_start(int8_t id, uint_least16_t drate, uint_least8_t gain, uint_least16_t current){
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4604      	mov	r4, r0
 8000e18:	4608      	mov	r0, r1
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4623      	mov	r3, r4
 8000e20:	71fb      	strb	r3, [r7, #7]
 8000e22:	4603      	mov	r3, r0
 8000e24:	80bb      	strh	r3, [r7, #4]
 8000e26:	460b      	mov	r3, r1
 8000e28:	71bb      	strb	r3, [r7, #6]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	807b      	strh	r3, [r7, #2]
	int16_t r = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	81fb      	strh	r3, [r7, #14]
	switch(drate)
 8000e32:	88bb      	ldrh	r3, [r7, #4]
 8000e34:	2ba0      	cmp	r3, #160	; 0xa0
 8000e36:	d02d      	beq.n	8000e94 <adc_scan_start+0x84>
 8000e38:	2ba0      	cmp	r3, #160	; 0xa0
 8000e3a:	dc0b      	bgt.n	8000e54 <adc_scan_start+0x44>
 8000e3c:	2b0a      	cmp	r3, #10
 8000e3e:	d01d      	beq.n	8000e7c <adc_scan_start+0x6c>
 8000e40:	2b0a      	cmp	r3, #10
 8000e42:	dc02      	bgt.n	8000e4a <adc_scan_start+0x3a>
 8000e44:	2b05      	cmp	r3, #5
 8000e46:	d016      	beq.n	8000e76 <adc_scan_start+0x66>
 8000e48:	e01e      	b.n	8000e88 <adc_scan_start+0x78>
 8000e4a:	2b14      	cmp	r3, #20
 8000e4c:	d019      	beq.n	8000e82 <adc_scan_start+0x72>
 8000e4e:	2b50      	cmp	r3, #80	; 0x50
 8000e50:	d01d      	beq.n	8000e8e <adc_scan_start+0x7e>
 8000e52:	e019      	b.n	8000e88 <adc_scan_start+0x78>
 8000e54:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000e58:	d022      	beq.n	8000ea0 <adc_scan_start+0x90>
 8000e5a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000e5e:	dc03      	bgt.n	8000e68 <adc_scan_start+0x58>
 8000e60:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000e64:	d019      	beq.n	8000e9a <adc_scan_start+0x8a>
 8000e66:	e00f      	b.n	8000e88 <adc_scan_start+0x78>
 8000e68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e6c:	d01b      	beq.n	8000ea6 <adc_scan_start+0x96>
 8000e6e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e72:	d01b      	beq.n	8000eac <adc_scan_start+0x9c>
 8000e74:	e008      	b.n	8000e88 <adc_scan_start+0x78>
	  {
	    case    5: drate = SYS0_DOR5;    break;
 8000e76:	2300      	movs	r3, #0
 8000e78:	80bb      	strh	r3, [r7, #4]
 8000e7a:	e01a      	b.n	8000eb2 <adc_scan_start+0xa2>
	    case   10: drate = SYS0_DOR10;   break;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	80bb      	strh	r3, [r7, #4]
 8000e80:	e017      	b.n	8000eb2 <adc_scan_start+0xa2>
	    case   20: drate = SYS0_DOR20;   break;
 8000e82:	2302      	movs	r3, #2
 8000e84:	80bb      	strh	r3, [r7, #4]
 8000e86:	e014      	b.n	8000eb2 <adc_scan_start+0xa2>
	    default:
	    case   40: drate = SYS0_DOR40;   break;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	80bb      	strh	r3, [r7, #4]
 8000e8c:	e011      	b.n	8000eb2 <adc_scan_start+0xa2>
	    case   80: drate = SYS0_DOR80;   break;
 8000e8e:	2304      	movs	r3, #4
 8000e90:	80bb      	strh	r3, [r7, #4]
 8000e92:	e00e      	b.n	8000eb2 <adc_scan_start+0xa2>
	    case  160: drate = SYS0_DOR160;  break;
 8000e94:	2305      	movs	r3, #5
 8000e96:	80bb      	strh	r3, [r7, #4]
 8000e98:	e00b      	b.n	8000eb2 <adc_scan_start+0xa2>
	    case  320: drate = SYS0_DOR320;  break;
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	80bb      	strh	r3, [r7, #4]
 8000e9e:	e008      	b.n	8000eb2 <adc_scan_start+0xa2>
	    case  640: drate = SYS0_DOR640;  break;
 8000ea0:	2307      	movs	r3, #7
 8000ea2:	80bb      	strh	r3, [r7, #4]
 8000ea4:	e005      	b.n	8000eb2 <adc_scan_start+0xa2>
	    case 1000: drate = SYS0_DOR1000; break;
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	80bb      	strh	r3, [r7, #4]
 8000eaa:	e002      	b.n	8000eb2 <adc_scan_start+0xa2>
	    case 2000: drate = SYS0_DOR2000; break;
 8000eac:	2309      	movs	r3, #9
 8000eae:	80bb      	strh	r3, [r7, #4]
 8000eb0:	bf00      	nop
	  }

	  switch(gain)
 8000eb2:	79bb      	ldrb	r3, [r7, #6]
 8000eb4:	2b10      	cmp	r3, #16
 8000eb6:	d01a      	beq.n	8000eee <adc_scan_start+0xde>
 8000eb8:	2b10      	cmp	r3, #16
 8000eba:	dc06      	bgt.n	8000eca <adc_scan_start+0xba>
 8000ebc:	2b04      	cmp	r3, #4
 8000ebe:	d010      	beq.n	8000ee2 <adc_scan_start+0xd2>
 8000ec0:	2b08      	cmp	r3, #8
 8000ec2:	d011      	beq.n	8000ee8 <adc_scan_start+0xd8>
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d009      	beq.n	8000edc <adc_scan_start+0xcc>
 8000ec8:	e005      	b.n	8000ed6 <adc_scan_start+0xc6>
 8000eca:	2b40      	cmp	r3, #64	; 0x40
 8000ecc:	d015      	beq.n	8000efa <adc_scan_start+0xea>
 8000ece:	2b80      	cmp	r3, #128	; 0x80
 8000ed0:	d016      	beq.n	8000f00 <adc_scan_start+0xf0>
 8000ed2:	2b20      	cmp	r3, #32
 8000ed4:	d00e      	beq.n	8000ef4 <adc_scan_start+0xe4>
	  {
	    default:
	    case   1: gain = SYS0_PGA1;   break;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	71bb      	strb	r3, [r7, #6]
 8000eda:	e014      	b.n	8000f06 <adc_scan_start+0xf6>
	    case   2: gain = SYS0_PGA2;   break;
 8000edc:	2310      	movs	r3, #16
 8000ede:	71bb      	strb	r3, [r7, #6]
 8000ee0:	e011      	b.n	8000f06 <adc_scan_start+0xf6>
	    case   4: gain = SYS0_PGA4;   break;
 8000ee2:	2320      	movs	r3, #32
 8000ee4:	71bb      	strb	r3, [r7, #6]
 8000ee6:	e00e      	b.n	8000f06 <adc_scan_start+0xf6>
	    case   8: gain = SYS0_PGA8;   break;
 8000ee8:	2330      	movs	r3, #48	; 0x30
 8000eea:	71bb      	strb	r3, [r7, #6]
 8000eec:	e00b      	b.n	8000f06 <adc_scan_start+0xf6>
	    case  16: gain = SYS0_PGA16;  break;
 8000eee:	2340      	movs	r3, #64	; 0x40
 8000ef0:	71bb      	strb	r3, [r7, #6]
 8000ef2:	e008      	b.n	8000f06 <adc_scan_start+0xf6>
	    case  32: gain = SYS0_PGA32;  break;
 8000ef4:	2350      	movs	r3, #80	; 0x50
 8000ef6:	71bb      	strb	r3, [r7, #6]
 8000ef8:	e005      	b.n	8000f06 <adc_scan_start+0xf6>
	    case  64: gain = SYS0_PGA64;  break;
 8000efa:	2360      	movs	r3, #96	; 0x60
 8000efc:	71bb      	strb	r3, [r7, #6]
 8000efe:	e002      	b.n	8000f06 <adc_scan_start+0xf6>
	    case 128: gain = SYS0_PGA128; break;
 8000f00:	2370      	movs	r3, #112	; 0x70
 8000f02:	71bb      	strb	r3, [r7, #6]
 8000f04:	bf00      	nop
	  }

	  switch(current)
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f0c:	d020      	beq.n	8000f50 <adc_scan_start+0x140>
 8000f0e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f12:	dc06      	bgt.n	8000f22 <adc_scan_start+0x112>
 8000f14:	2b64      	cmp	r3, #100	; 0x64
 8000f16:	d015      	beq.n	8000f44 <adc_scan_start+0x134>
 8000f18:	2bfa      	cmp	r3, #250	; 0xfa
 8000f1a:	d016      	beq.n	8000f4a <adc_scan_start+0x13a>
 8000f1c:	2b32      	cmp	r3, #50	; 0x32
 8000f1e:	d00e      	beq.n	8000f3e <adc_scan_start+0x12e>
 8000f20:	e00a      	b.n	8000f38 <adc_scan_start+0x128>
 8000f22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f26:	d019      	beq.n	8000f5c <adc_scan_start+0x14c>
 8000f28:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d018      	beq.n	8000f62 <adc_scan_start+0x152>
 8000f30:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d00e      	beq.n	8000f56 <adc_scan_start+0x146>
	  {
	    default:
	    case    0: current = IDAC0_MAGOFF;    break;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	807b      	strh	r3, [r7, #2]
 8000f3c:	e014      	b.n	8000f68 <adc_scan_start+0x158>
	    case   50: current = IDAC0_MAG50UA;   break;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	807b      	strh	r3, [r7, #2]
 8000f42:	e011      	b.n	8000f68 <adc_scan_start+0x158>
	    case  100: current = IDAC0_MAG100UA;  break;
 8000f44:	2302      	movs	r3, #2
 8000f46:	807b      	strh	r3, [r7, #2]
 8000f48:	e00e      	b.n	8000f68 <adc_scan_start+0x158>
	    case  250: current = IDAC0_MAG250UA;  break;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	807b      	strh	r3, [r7, #2]
 8000f4e:	e00b      	b.n	8000f68 <adc_scan_start+0x158>
	    case  500: current = IDAC0_MAG500UA;  break;
 8000f50:	2304      	movs	r3, #4
 8000f52:	807b      	strh	r3, [r7, #2]
 8000f54:	e008      	b.n	8000f68 <adc_scan_start+0x158>
	    case  750: current = IDAC0_MAG750UA;  break;
 8000f56:	2305      	movs	r3, #5
 8000f58:	807b      	strh	r3, [r7, #2]
 8000f5a:	e005      	b.n	8000f68 <adc_scan_start+0x158>
	    case 1000: current = IDAC0_MAG1000UA; break;
 8000f5c:	2306      	movs	r3, #6
 8000f5e:	807b      	strh	r3, [r7, #2]
 8000f60:	e002      	b.n	8000f68 <adc_scan_start+0x158>
	    case 1500: current = IDAC0_MAG1500UA; break;
 8000f62:	2307      	movs	r3, #7
 8000f64:	807b      	strh	r3, [r7, #2]
 8000f66:	bf00      	nop
	  }

	  cs_enable(id);
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fee9 	bl	8000d44 <cs_enable>
	  wr_cmd(id, CMD_RESET);
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	2106      	movs	r1, #6
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 f9db 	bl	8001334 <wr_cmd>
	  wr_cmd(id, CMD_SDATAC);
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	2116      	movs	r1, #22
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 f9d5 	bl	8001334 <wr_cmd>

	  wr_reg(id, REG_MUX0, 0b00000001);
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fa0e 	bl	80013b4 <wr_reg>
	  wr_reg(id, REG_VBIAS, 0x00);
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 fa07 	bl	80013b4 <wr_reg>
	  wr_reg(id, REG_MUX1, 0b00110000);
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	2230      	movs	r2, #48	; 0x30
 8000fac:	2102      	movs	r1, #2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 fa00 	bl	80013b4 <wr_reg>
	  wr_reg(id, REG_SYS0, gain | drate);
 8000fb4:	88bb      	ldrh	r3, [r7, #4]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	2103      	movs	r1, #3
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 f9f5 	bl	80013b4 <wr_reg>
	  //wr_reg(id, REG_SYS0, 0b00000010);
	  wr_reg(id, REG_IDAC0, 0x00);
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	210a      	movs	r1, #10
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f9ee 	bl	80013b4 <wr_reg>
	  wr_reg(id, REG_IDAC1, 0b11001100);
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	22cc      	movs	r2, #204	; 0xcc
 8000fde:	210b      	movs	r1, #11
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 f9e7 	bl	80013b4 <wr_reg>

	  wr_cmd(id, CMD_SYNC);
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	2104      	movs	r1, #4
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f9a1 	bl	8001334 <wr_cmd>
	  cs_disable(id);
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fec2 	bl	8000d80 <cs_disable>

	  return r;
 8000ffc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8001000:	4618      	mov	r0, r3
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	bd90      	pop	{r4, r7, pc}

08001008 <rd_data>:

uint16_t rd_data(int8_t id){
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b087      	sub	sp, #28
 800100c:	af02      	add	r7, sp, #8
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
	uint8_t d1, d3;
	uint16_t dR;

	while(HAL_GPIO_ReadPin(port_drdy_from_id(id), pin_drdy_from_id(id)) == GPIO_PIN_SET);
 8001012:	bf00      	nop
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f000 f911 	bl	8001240 <port_drdy_from_id>
 800101e:	4604      	mov	r4, r0
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	4618      	mov	r0, r3
 8001026:	f000 f8cb 	bl	80011c0 <pin_drdy_from_id>
 800102a:	4603      	mov	r3, r0
 800102c:	4619      	mov	r1, r3
 800102e:	4620      	mov	r0, r4
 8001030:	f001 fdd2 	bl	8002bd8 <HAL_GPIO_ReadPin>
 8001034:	4603      	mov	r3, r0
 8001036:	2b01      	cmp	r3, #1
 8001038:	d0ec      	beq.n	8001014 <rd_data+0xc>
	cs_enable(id);
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fe80 	bl	8000d44 <cs_enable>

	uint8_t rdata = CMD_RDATA;
 8001044:	2312      	movs	r3, #18
 8001046:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_Transmit(get_hspi_from_id(id), &rdata, 2, HAL_MAX_DELAY);
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	4618      	mov	r0, r3
 800104e:	f000 f935 	bl	80012bc <get_hspi_from_id>
 8001052:	f107 010b 	add.w	r1, r7, #11
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	2202      	movs	r2, #2
 800105c:	f003 fe8e 	bl	8004d7c <HAL_SPI_Transmit>
	//HAL_Delay(1);

	uint8_t nope = CMD_NOP;
 8001060:	23ff      	movs	r3, #255	; 0xff
 8001062:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_TransmitReceive(get_hspi_from_id(id), &nope, &d1, 2, HAL_MAX_DELAY);
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	4618      	mov	r0, r3
 800106a:	f000 f927 	bl	80012bc <get_hspi_from_id>
 800106e:	f107 020d 	add.w	r2, r7, #13
 8001072:	f107 010a 	add.w	r1, r7, #10
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2302      	movs	r3, #2
 800107e:	f003 fff3 	bl	8005068 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(get_hspi_from_id(id), &nope, &d3, 2, HAL_MAX_DELAY);
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f918 	bl	80012bc <get_hspi_from_id>
 800108c:	f107 020c 	add.w	r2, r7, #12
 8001090:	f107 010a 	add.w	r1, r7, #10
 8001094:	f04f 33ff 	mov.w	r3, #4294967295
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2302      	movs	r3, #2
 800109c:	f003 ffe4 	bl	8005068 <HAL_SPI_TransmitReceive>
	dR = (d1 << 8) | d3;
 80010a0:	7b7b      	ldrb	r3, [r7, #13]
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	b21a      	sxth	r2, r3
 80010a6:	7b3b      	ldrb	r3, [r7, #12]
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	81fb      	strh	r3, [r7, #14]
	cs_disable(id);
 80010b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fe63 	bl	8000d80 <cs_disable>

	return dR;
 80010ba:	89fb      	ldrh	r3, [r7, #14]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd90      	pop	{r4, r7, pc}

080010c4 <pin_from_id>:
	//cs_disable(id);
	return d1;
}

//
uint16_t pin_from_id(int8_t id){
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
	switch(id){
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	2b08      	cmp	r3, #8
 80010d4:	d82c      	bhi.n	8001130 <pin_from_id+0x6c>
 80010d6:	a201      	add	r2, pc, #4	; (adr r2, 80010dc <pin_from_id+0x18>)
 80010d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010dc:	08001101 	.word	0x08001101
 80010e0:	08001107 	.word	0x08001107
 80010e4:	0800110d 	.word	0x0800110d
 80010e8:	08001113 	.word	0x08001113
 80010ec:	08001117 	.word	0x08001117
 80010f0:	0800111b 	.word	0x0800111b
 80010f4:	0800111f 	.word	0x0800111f
 80010f8:	08001125 	.word	0x08001125
 80010fc:	0800112b 	.word	0x0800112b
			case 0: //DMS 1
				return nCS_DMS1_Pin;
 8001100:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001104:	e016      	b.n	8001134 <pin_from_id+0x70>
			case 1: //DMS 2
				return nCS_DMS2_Pin;
 8001106:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800110a:	e013      	b.n	8001134 <pin_from_id+0x70>
			case 2: //DMS 3
				return nCS_DMS3_Pin;
 800110c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001110:	e010      	b.n	8001134 <pin_from_id+0x70>
			case 3: //DMS 4
				return nCS_DMS4_Pin;
 8001112:	2301      	movs	r3, #1
 8001114:	e00e      	b.n	8001134 <pin_from_id+0x70>
			case 4: //DMS 5
				return nCS_DMS5_Pin;
 8001116:	2302      	movs	r3, #2
 8001118:	e00c      	b.n	8001134 <pin_from_id+0x70>
			case 5: //DMS 6
				return nCS_DMS6_Pin;
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	e00a      	b.n	8001134 <pin_from_id+0x70>
			case 6: //PT 1
				return nCS_PT1_Pin;
 800111e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001122:	e007      	b.n	8001134 <pin_from_id+0x70>
			case 7: //PT 2
				return nCS_PT2_Pin;
 8001124:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001128:	e004      	b.n	8001134 <pin_from_id+0x70>
			case 8: //PT 3
				return nCS_PT3_Pin;
 800112a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112e:	e001      	b.n	8001134 <pin_from_id+0x70>
			default: //DMS 1
				return nCS_DMS1_Pin;
 8001130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		}
}
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <port_from_id>:

//
GPIO_TypeDef* port_from_id(int8_t id){
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
	switch(id){
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	2b08      	cmp	r3, #8
 8001150:	d826      	bhi.n	80011a0 <port_from_id+0x60>
 8001152:	a201      	add	r2, pc, #4	; (adr r2, 8001158 <port_from_id+0x18>)
 8001154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001158:	0800117d 	.word	0x0800117d
 800115c:	08001181 	.word	0x08001181
 8001160:	08001185 	.word	0x08001185
 8001164:	08001189 	.word	0x08001189
 8001168:	0800118d 	.word	0x0800118d
 800116c:	08001191 	.word	0x08001191
 8001170:	08001195 	.word	0x08001195
 8001174:	08001199 	.word	0x08001199
 8001178:	0800119d 	.word	0x0800119d
		case 0: //DMS 1
			return nCS_DMS1_GPIO_Port;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <port_from_id+0x70>)
 800117e:	e010      	b.n	80011a2 <port_from_id+0x62>
		case 1: //DMS 2
			return nCS_DMS2_GPIO_Port;
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <port_from_id+0x70>)
 8001182:	e00e      	b.n	80011a2 <port_from_id+0x62>
		case 2: //DMS 3
			return nCS_DMS3_GPIO_Port;
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <port_from_id+0x70>)
 8001186:	e00c      	b.n	80011a2 <port_from_id+0x62>
		case 3: //DMS 4
			return nCS_DMS4_GPIO_Port;
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <port_from_id+0x74>)
 800118a:	e00a      	b.n	80011a2 <port_from_id+0x62>
		case 4: //DMS 5
			return nCS_DMS5_GPIO_Port;
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <port_from_id+0x74>)
 800118e:	e008      	b.n	80011a2 <port_from_id+0x62>
		case 5: //DMS 6
			return nCS_DMS6_GPIO_Port;
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <port_from_id+0x78>)
 8001192:	e006      	b.n	80011a2 <port_from_id+0x62>
		case 6: //PT 1
			return nCS_PT1_GPIO_Port;
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <port_from_id+0x7c>)
 8001196:	e004      	b.n	80011a2 <port_from_id+0x62>
		case 7: //PT 2
			return nCS_PT2_GPIO_Port;
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <port_from_id+0x7c>)
 800119a:	e002      	b.n	80011a2 <port_from_id+0x62>
		case 8: //PT 3
			return nCS_PT3_GPIO_Port;
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <port_from_id+0x7c>)
 800119e:	e000      	b.n	80011a2 <port_from_id+0x62>
		default: //DMS 1
			return nCS_DMS1_GPIO_Port;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <port_from_id+0x70>)
	}
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40021400 	.word	0x40021400
 80011b4:	40021800 	.word	0x40021800
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40020c00 	.word	0x40020c00

080011c0 <pin_drdy_from_id>:

//
uint16_t pin_drdy_from_id(int8_t id){
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
	switch(id){
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d82e      	bhi.n	8001230 <pin_drdy_from_id+0x70>
 80011d2:	a201      	add	r2, pc, #4	; (adr r2, 80011d8 <pin_drdy_from_id+0x18>)
 80011d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d8:	080011fd 	.word	0x080011fd
 80011dc:	08001201 	.word	0x08001201
 80011e0:	08001207 	.word	0x08001207
 80011e4:	0800120d 	.word	0x0800120d
 80011e8:	08001213 	.word	0x08001213
 80011ec:	08001219 	.word	0x08001219
 80011f0:	0800121f 	.word	0x0800121f
 80011f4:	08001225 	.word	0x08001225
 80011f8:	0800122b 	.word	0x0800122b
			case 0: //DMS 1
				return nDRDY_DMS1_Pin;
 80011fc:	2310      	movs	r3, #16
 80011fe:	e018      	b.n	8001232 <pin_drdy_from_id+0x72>
			case 1: //DMS 2
				return nDRDY_DMS2_Pin;
 8001200:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001204:	e015      	b.n	8001232 <pin_drdy_from_id+0x72>
			case 2: //DMS 3
				return nDRDY_DMS3_Pin;
 8001206:	f44f 7300 	mov.w	r3, #512	; 0x200
 800120a:	e012      	b.n	8001232 <pin_drdy_from_id+0x72>
			case 3: //DMS 4
				return nDRDY_DMS4_Pin;
 800120c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001210:	e00f      	b.n	8001232 <pin_drdy_from_id+0x72>
			case 4: //DMS 5
				return nDRDY_DMS5_Pin;
 8001212:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001216:	e00c      	b.n	8001232 <pin_drdy_from_id+0x72>
			case 5: //DMS 6
				return nDRDY_DMS6_Pin;
 8001218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121c:	e009      	b.n	8001232 <pin_drdy_from_id+0x72>
			case 6: //PT 1
				return nDRDY_PT1_Pin;
 800121e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001222:	e006      	b.n	8001232 <pin_drdy_from_id+0x72>
			case 7: //PT 2
				return nDRDY_PT2_Pin;
 8001224:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001228:	e003      	b.n	8001232 <pin_drdy_from_id+0x72>
			case 8: //PT 3
				return nDRDY_PT3_Pin;
 800122a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800122e:	e000      	b.n	8001232 <pin_drdy_from_id+0x72>
			default: //DMS 1
				return nDRDY_DMS1_Pin;
 8001230:	2310      	movs	r3, #16
		}
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop

08001240 <port_drdy_from_id>:

//
GPIO_TypeDef* port_drdy_from_id(int8_t id){
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
	switch(id){
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	2b08      	cmp	r3, #8
 8001250:	d826      	bhi.n	80012a0 <port_drdy_from_id+0x60>
 8001252:	a201      	add	r2, pc, #4	; (adr r2, 8001258 <port_drdy_from_id+0x18>)
 8001254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001258:	0800127d 	.word	0x0800127d
 800125c:	08001281 	.word	0x08001281
 8001260:	08001285 	.word	0x08001285
 8001264:	08001289 	.word	0x08001289
 8001268:	0800128d 	.word	0x0800128d
 800126c:	08001291 	.word	0x08001291
 8001270:	08001295 	.word	0x08001295
 8001274:	08001299 	.word	0x08001299
 8001278:	0800129d 	.word	0x0800129d
		case 0: //DMS 1
			return nDRDY_DMS1_GPIO_Port;
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <port_drdy_from_id+0x70>)
 800127e:	e010      	b.n	80012a2 <port_drdy_from_id+0x62>
		case 1: //DMS 2
			return nDRDY_DMS2_GPIO_Port;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <port_drdy_from_id+0x74>)
 8001282:	e00e      	b.n	80012a2 <port_drdy_from_id+0x62>
		case 2: //DMS 3
			return nDRDY_DMS3_GPIO_Port;
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <port_drdy_from_id+0x74>)
 8001286:	e00c      	b.n	80012a2 <port_drdy_from_id+0x62>
		case 3: //DMS 4
			return nDRDY_DMS4_GPIO_Port;
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <port_drdy_from_id+0x74>)
 800128a:	e00a      	b.n	80012a2 <port_drdy_from_id+0x62>
		case 4: //DMS 5
			return nDRDY_DMS5_GPIO_Port;
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <port_drdy_from_id+0x74>)
 800128e:	e008      	b.n	80012a2 <port_drdy_from_id+0x62>
		case 5: //DMS 6
			return nDRDY_DMS6_GPIO_Port;
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <port_drdy_from_id+0x74>)
 8001292:	e006      	b.n	80012a2 <port_drdy_from_id+0x62>
		case 6: //PT 1
			return nDRDY_PT1_GPIO_Port;
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <port_drdy_from_id+0x78>)
 8001296:	e004      	b.n	80012a2 <port_drdy_from_id+0x62>
		case 7: //PT 2
			return nDRDY_PT2_GPIO_Port;
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <port_drdy_from_id+0x78>)
 800129a:	e002      	b.n	80012a2 <port_drdy_from_id+0x62>
		case 8: //PT 3
			return nDRDY_PT3_GPIO_Port;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <port_drdy_from_id+0x78>)
 800129e:	e000      	b.n	80012a2 <port_drdy_from_id+0x62>
		default: //DMS 1
			return nDRDY_DMS1_GPIO_Port;
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <port_drdy_from_id+0x70>)
	}
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40021800 	.word	0x40021800
 80012b4:	40020000 	.word	0x40020000
 80012b8:	40022400 	.word	0x40022400

080012bc <get_hspi_from_id>:

//
SPI_HandleTypeDef *get_hspi_from_id(int8_t id){
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
	switch(id){
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d826      	bhi.n	800131c <get_hspi_from_id+0x60>
 80012ce:	a201      	add	r2, pc, #4	; (adr r2, 80012d4 <get_hspi_from_id+0x18>)
 80012d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d4:	080012f9 	.word	0x080012f9
 80012d8:	080012fd 	.word	0x080012fd
 80012dc:	08001301 	.word	0x08001301
 80012e0:	08001305 	.word	0x08001305
 80012e4:	08001309 	.word	0x08001309
 80012e8:	0800130d 	.word	0x0800130d
 80012ec:	08001311 	.word	0x08001311
 80012f0:	08001315 	.word	0x08001315
 80012f4:	08001319 	.word	0x08001319
		case 0: //DMS 1
			return &hspi4;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <get_hspi_from_id+0x70>)
 80012fa:	e010      	b.n	800131e <get_hspi_from_id+0x62>
		case 1: //DMS 2
			return &hspi4;
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <get_hspi_from_id+0x70>)
 80012fe:	e00e      	b.n	800131e <get_hspi_from_id+0x62>
		case 2: //DMS 3
			return &hspi4;
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <get_hspi_from_id+0x70>)
 8001302:	e00c      	b.n	800131e <get_hspi_from_id+0x62>
		case 3: //DMS 4
			return &hspi4;
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <get_hspi_from_id+0x70>)
 8001306:	e00a      	b.n	800131e <get_hspi_from_id+0x62>
		case 4: //DMS 5
			return &hspi4;
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <get_hspi_from_id+0x70>)
 800130a:	e008      	b.n	800131e <get_hspi_from_id+0x62>
		case 5: //DMS 6
			return &hspi4;
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <get_hspi_from_id+0x70>)
 800130e:	e006      	b.n	800131e <get_hspi_from_id+0x62>
		case 6: //PT 1
			return &hspi3;
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <get_hspi_from_id+0x74>)
 8001312:	e004      	b.n	800131e <get_hspi_from_id+0x62>
		case 7: //PT 2
			return &hspi3;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <get_hspi_from_id+0x74>)
 8001316:	e002      	b.n	800131e <get_hspi_from_id+0x62>
		case 8: //PT 3
			return &hspi3;
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <get_hspi_from_id+0x74>)
 800131a:	e000      	b.n	800131e <get_hspi_from_id+0x62>
		default: //DMS 1
			return &hspi4;
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <get_hspi_from_id+0x70>)
	}
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	200001e0 	.word	0x200001e0
 8001330:	2000017c 	.word	0x2000017c

08001334 <wr_cmd>:



//
int wr_cmd(int8_t id, uint8_t cmd){
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	460a      	mov	r2, r1
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	4613      	mov	r3, r2
 8001342:	71bb      	strb	r3, [r7, #6]
	int8_t status = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	73fb      	strb	r3, [r7, #15]
	//status+= cs_enable(id);
	status+= wr_spi(id, cmd);
 8001348:	79ba      	ldrb	r2, [r7, #6]
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fd33 	bl	8000dbc <wr_spi>
 8001356:	4603      	mov	r3, r0
 8001358:	b2da      	uxtb	r2, r3
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	4413      	add	r3, r2
 800135e:	b2db      	uxtb	r3, r3
 8001360:	73fb      	strb	r3, [r7, #15]
	if(cmd == CMD_SYNC)
 8001362:	79bb      	ldrb	r3, [r7, #6]
 8001364:	2b04      	cmp	r3, #4
 8001366:	d10c      	bne.n	8001382 <wr_cmd+0x4e>
	{
		status+= wr_spi(id, cmd);
 8001368:	79ba      	ldrb	r2, [r7, #6]
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fd23 	bl	8000dbc <wr_spi>
 8001376:	4603      	mov	r3, r0
 8001378:	b2da      	uxtb	r2, r3
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	4413      	add	r3, r2
 800137e:	b2db      	uxtb	r3, r3
 8001380:	73fb      	strb	r3, [r7, #15]
    }
	//status+= cs_disable(id);
	if(cmd == CMD_RESET)
 8001382:	79bb      	ldrb	r3, [r7, #6]
 8001384:	2b06      	cmp	r3, #6
 8001386:	d103      	bne.n	8001390 <wr_cmd+0x5c>
	{
		HAL_Delay(1); //1ms
 8001388:	2001      	movs	r0, #1
 800138a:	f000 fdc3 	bl	8001f14 <HAL_Delay>
 800138e:	e00c      	b.n	80013aa <wr_cmd+0x76>
	}
	else if(cmd == CMD_SELFOCAL)
 8001390:	79bb      	ldrb	r3, [r7, #6]
 8001392:	2b62      	cmp	r3, #98	; 0x62
 8001394:	d103      	bne.n	800139e <wr_cmd+0x6a>
	{
		HAL_Delay(10); //10ms
 8001396:	200a      	movs	r0, #10
 8001398:	f000 fdbc 	bl	8001f14 <HAL_Delay>
 800139c:	e005      	b.n	80013aa <wr_cmd+0x76>
	}
	else if(cmd == CMD_SDATAC)
 800139e:	79bb      	ldrb	r3, [r7, #6]
 80013a0:	2b16      	cmp	r3, #22
 80013a2:	d102      	bne.n	80013aa <wr_cmd+0x76>
	{
		HAL_Delay(1); //1ms
 80013a4:	2001      	movs	r0, #1
 80013a6:	f000 fdb5 	bl	8001f14 <HAL_Delay>
	}
	return 0;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <wr_reg>:

int wr_reg(int8_t id, uint8_t reg, uint8_t data){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
 80013be:	460b      	mov	r3, r1
 80013c0:	71bb      	strb	r3, [r7, #6]
 80013c2:	4613      	mov	r3, r2
 80013c4:	717b      	strb	r3, [r7, #5]
	int8_t status = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, CMD_WREG | reg);
 80013ca:	79bb      	ldrb	r3, [r7, #6]
 80013cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fcef 	bl	8000dbc <wr_spi>
 80013de:	4603      	mov	r3, r0
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	4413      	add	r3, r2
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, 0);
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fce3 	bl	8000dbc <wr_spi>
 80013f6:	4603      	mov	r3, r0
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	4413      	add	r3, r2
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, data);
 8001402:	797a      	ldrb	r2, [r7, #5]
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	4611      	mov	r1, r2
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fcd6 	bl	8000dbc <wr_spi>
 8001410:	4603      	mov	r3, r0
 8001412:	b2da      	uxtb	r2, r3
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	4413      	add	r3, r2
 8001418:	b2db      	uxtb	r3, r3
 800141a:	73fb      	strb	r3, [r7, #15]
	return 0;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi5;
SPI_HandleTypeDef hspi6;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001450:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <MX_SPI2_Init+0x74>)
 8001452:	4a1c      	ldr	r2, [pc, #112]	; (80014c4 <MX_SPI2_Init+0x78>)
 8001454:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <MX_SPI2_Init+0x74>)
 8001458:	f44f 7282 	mov.w	r2, #260	; 0x104
 800145c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800145e:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <MX_SPI2_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001464:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <MX_SPI2_Init+0x74>)
 8001466:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800146a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <MX_SPI2_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <MX_SPI2_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_SPI2_Init+0x74>)
 800147a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800147e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <MX_SPI2_Init+0x74>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_SPI2_Init+0x74>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_SPI2_Init+0x74>)
 800148e:	2200      	movs	r2, #0
 8001490:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <MX_SPI2_Init+0x74>)
 8001494:	2200      	movs	r2, #0
 8001496:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_SPI2_Init+0x74>)
 800149a:	2207      	movs	r2, #7
 800149c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <MX_SPI2_Init+0x74>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_SPI2_Init+0x74>)
 80014a6:	2208      	movs	r2, #8
 80014a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_SPI2_Init+0x74>)
 80014ac:	f003 fabe 	bl	8004a2c <HAL_SPI_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80014b6:	f7ff ffb6 	bl	8001426 <Error_Handler>
  }

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000050 	.word	0x20000050
 80014c4:	40003800 	.word	0x40003800

080014c8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80014cc:	4b1b      	ldr	r3, [pc, #108]	; (800153c <MX_SPI3_Init+0x74>)
 80014ce:	4a1c      	ldr	r2, [pc, #112]	; (8001540 <MX_SPI3_Init+0x78>)
 80014d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014d2:	4b1a      	ldr	r3, [pc, #104]	; (800153c <MX_SPI3_Init+0x74>)
 80014d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <MX_SPI3_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80014e0:	4b16      	ldr	r3, [pc, #88]	; (800153c <MX_SPI3_Init+0x74>)
 80014e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014e6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <MX_SPI3_Init+0x74>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <MX_SPI3_Init+0x74>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_SPI3_Init+0x74>)
 80014f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014fa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <MX_SPI3_Init+0x74>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_SPI3_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_SPI3_Init+0x74>)
 800150a:	2200      	movs	r2, #0
 800150c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <MX_SPI3_Init+0x74>)
 8001510:	2200      	movs	r2, #0
 8001512:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_SPI3_Init+0x74>)
 8001516:	2207      	movs	r2, #7
 8001518:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <MX_SPI3_Init+0x74>)
 800151c:	2200      	movs	r2, #0
 800151e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_SPI3_Init+0x74>)
 8001522:	2208      	movs	r2, #8
 8001524:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_SPI3_Init+0x74>)
 8001528:	f003 fa80 	bl	8004a2c <HAL_SPI_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001532:	f7ff ff78 	bl	8001426 <Error_Handler>
  }

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	2000017c 	.word	0x2000017c
 8001540:	40003c00 	.word	0x40003c00

08001544 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <MX_SPI4_Init+0x74>)
 800154a:	4a1c      	ldr	r2, [pc, #112]	; (80015bc <MX_SPI4_Init+0x78>)
 800154c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800154e:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <MX_SPI4_Init+0x74>)
 8001550:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001554:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001556:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <MX_SPI4_Init+0x74>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800155c:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <MX_SPI4_Init+0x74>)
 800155e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001562:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <MX_SPI4_Init+0x74>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <MX_SPI4_Init+0x74>)
 800156c:	2201      	movs	r2, #1
 800156e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_SPI4_Init+0x74>)
 8001572:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001576:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_SPI4_Init+0x74>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_SPI4_Init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_SPI4_Init+0x74>)
 8001586:	2200      	movs	r2, #0
 8001588:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <MX_SPI4_Init+0x74>)
 800158c:	2200      	movs	r2, #0
 800158e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_SPI4_Init+0x74>)
 8001592:	2207      	movs	r2, #7
 8001594:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <MX_SPI4_Init+0x74>)
 8001598:	2200      	movs	r2, #0
 800159a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_SPI4_Init+0x74>)
 800159e:	2200      	movs	r2, #0
 80015a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_SPI4_Init+0x74>)
 80015a4:	f003 fa42 	bl	8004a2c <HAL_SPI_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80015ae:	f7ff ff3a 	bl	8001426 <Error_Handler>
  }

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200001e0 	.word	0x200001e0
 80015bc:	40013400 	.word	0x40013400

080015c0 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <MX_SPI5_Init+0x74>)
 80015c6:	4a1c      	ldr	r2, [pc, #112]	; (8001638 <MX_SPI5_Init+0x78>)
 80015c8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <MX_SPI5_Init+0x74>)
 80015cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015d0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80015d2:	4b18      	ldr	r3, [pc, #96]	; (8001634 <MX_SPI5_Init+0x74>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <MX_SPI5_Init+0x74>)
 80015da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80015de:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <MX_SPI5_Init+0x74>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <MX_SPI5_Init+0x74>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <MX_SPI5_Init+0x74>)
 80015ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f2:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <MX_SPI5_Init+0x74>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <MX_SPI5_Init+0x74>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <MX_SPI5_Init+0x74>)
 8001602:	2200      	movs	r2, #0
 8001604:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <MX_SPI5_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <MX_SPI5_Init+0x74>)
 800160e:	2207      	movs	r2, #7
 8001610:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <MX_SPI5_Init+0x74>)
 8001614:	2200      	movs	r2, #0
 8001616:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <MX_SPI5_Init+0x74>)
 800161a:	2208      	movs	r2, #8
 800161c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800161e:	4805      	ldr	r0, [pc, #20]	; (8001634 <MX_SPI5_Init+0x74>)
 8001620:	f003 fa04 	bl	8004a2c <HAL_SPI_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800162a:	f7ff fefc 	bl	8001426 <Error_Handler>
  }

}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200000b4 	.word	0x200000b4
 8001638:	40015000 	.word	0x40015000

0800163c <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <MX_SPI6_Init+0x74>)
 8001642:	4a1c      	ldr	r2, [pc, #112]	; (80016b4 <MX_SPI6_Init+0x78>)
 8001644:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8001646:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <MX_SPI6_Init+0x74>)
 8001648:	f44f 7282 	mov.w	r2, #260	; 0x104
 800164c:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <MX_SPI6_Init+0x74>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <MX_SPI6_Init+0x74>)
 8001656:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800165a:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <MX_SPI6_Init+0x74>)
 800165e:	2200      	movs	r2, #0
 8001660:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <MX_SPI6_Init+0x74>)
 8001664:	2200      	movs	r2, #0
 8001666:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_SPI6_Init+0x74>)
 800166a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800166e:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_SPI6_Init+0x74>)
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_SPI6_Init+0x74>)
 8001678:	2200      	movs	r2, #0
 800167a:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_SPI6_Init+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <MX_SPI6_Init+0x74>)
 8001684:	2200      	movs	r2, #0
 8001686:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_SPI6_Init+0x74>)
 800168a:	2207      	movs	r2, #7
 800168c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <MX_SPI6_Init+0x74>)
 8001690:	2200      	movs	r2, #0
 8001692:	631a      	str	r2, [r3, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_SPI6_Init+0x74>)
 8001696:	2208      	movs	r2, #8
 8001698:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_SPI6_Init+0x74>)
 800169c:	f003 f9c6 	bl	8004a2c <HAL_SPI_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_SPI6_Init+0x6e>
  {
    Error_Handler();
 80016a6:	f7ff febe 	bl	8001426 <Error_Handler>
  }

}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000118 	.word	0x20000118
 80016b4:	40015400 	.word	0x40015400

080016b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b092      	sub	sp, #72	; 0x48
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a8e      	ldr	r2, [pc, #568]	; (8001910 <HAL_SPI_MspInit+0x258>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d131      	bne.n	800173e <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016da:	4b8e      	ldr	r3, [pc, #568]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	4a8d      	ldr	r2, [pc, #564]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 80016e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e4:	6413      	str	r3, [r2, #64]	; 0x40
 80016e6:	4b8b      	ldr	r3, [pc, #556]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ee:	633b      	str	r3, [r7, #48]	; 0x30
 80016f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	4b88      	ldr	r3, [pc, #544]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a87      	ldr	r2, [pc, #540]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b85      	ldr	r3, [pc, #532]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800170a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800170e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001718:	2303      	movs	r3, #3
 800171a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800171c:	2305      	movs	r3, #5
 800171e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001720:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001724:	4619      	mov	r1, r3
 8001726:	487c      	ldr	r0, [pc, #496]	; (8001918 <HAL_SPI_MspInit+0x260>)
 8001728:	f000 fec8 	bl	80024bc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 6, 0);
 800172c:	2200      	movs	r2, #0
 800172e:	2106      	movs	r1, #6
 8001730:	2024      	movs	r0, #36	; 0x24
 8001732:	f000 fd01 	bl	8002138 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001736:	2024      	movs	r0, #36	; 0x24
 8001738:	f000 fd2a 	bl	8002190 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 800173c:	e0e4      	b.n	8001908 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI3)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a76      	ldr	r2, [pc, #472]	; (800191c <HAL_SPI_MspInit+0x264>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d145      	bne.n	80017d4 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001748:	4b72      	ldr	r3, [pc, #456]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	4a71      	ldr	r2, [pc, #452]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 800174e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001752:	6413      	str	r3, [r2, #64]	; 0x40
 8001754:	4b6f      	ldr	r3, [pc, #444]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
 800175e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001760:	4b6c      	ldr	r3, [pc, #432]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 8001762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001764:	4a6b      	ldr	r2, [pc, #428]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 8001766:	f043 0302 	orr.w	r3, r3, #2
 800176a:	6313      	str	r3, [r2, #48]	; 0x30
 800176c:	4b69      	ldr	r3, [pc, #420]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 800176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001778:	4b66      	ldr	r3, [pc, #408]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 800177a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177c:	4a65      	ldr	r2, [pc, #404]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 800177e:	f043 0304 	orr.w	r3, r3, #4
 8001782:	6313      	str	r3, [r2, #48]	; 0x30
 8001784:	4b63      	ldr	r3, [pc, #396]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	623b      	str	r3, [r7, #32]
 800178e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001790:	2304      	movs	r3, #4
 8001792:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179c:	2303      	movs	r3, #3
 800179e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80017a0:	2307      	movs	r3, #7
 80017a2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017a8:	4619      	mov	r1, r3
 80017aa:	485b      	ldr	r0, [pc, #364]	; (8001918 <HAL_SPI_MspInit+0x260>)
 80017ac:	f000 fe86 	bl	80024bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017b4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017be:	2303      	movs	r3, #3
 80017c0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017c2:	2306      	movs	r3, #6
 80017c4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017ca:	4619      	mov	r1, r3
 80017cc:	4854      	ldr	r0, [pc, #336]	; (8001920 <HAL_SPI_MspInit+0x268>)
 80017ce:	f000 fe75 	bl	80024bc <HAL_GPIO_Init>
}
 80017d2:	e099      	b.n	8001908 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI4)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a52      	ldr	r2, [pc, #328]	; (8001924 <HAL_SPI_MspInit+0x26c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d130      	bne.n	8001840 <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80017de:	4b4d      	ldr	r3, [pc, #308]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	4a4c      	ldr	r2, [pc, #304]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 80017e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017e8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ea:	4b4a      	ldr	r3, [pc, #296]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017f2:	61fb      	str	r3, [r7, #28]
 80017f4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017f6:	4b47      	ldr	r3, [pc, #284]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a46      	ldr	r2, [pc, #280]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 80017fc:	f043 0310 	orr.w	r3, r3, #16
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b44      	ldr	r3, [pc, #272]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0310 	and.w	r3, r3, #16
 800180a:	61bb      	str	r3, [r7, #24]
 800180c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800180e:	2364      	movs	r3, #100	; 0x64
 8001810:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800181e:	2305      	movs	r3, #5
 8001820:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001822:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001826:	4619      	mov	r1, r3
 8001828:	483f      	ldr	r0, [pc, #252]	; (8001928 <HAL_SPI_MspInit+0x270>)
 800182a:	f000 fe47 	bl	80024bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 6, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2106      	movs	r1, #6
 8001832:	2054      	movs	r0, #84	; 0x54
 8001834:	f000 fc80 	bl	8002138 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001838:	2054      	movs	r0, #84	; 0x54
 800183a:	f000 fca9 	bl	8002190 <HAL_NVIC_EnableIRQ>
}
 800183e:	e063      	b.n	8001908 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI5)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a39      	ldr	r2, [pc, #228]	; (800192c <HAL_SPI_MspInit+0x274>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d129      	bne.n	800189e <HAL_SPI_MspInit+0x1e6>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800184a:	4b32      	ldr	r3, [pc, #200]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4a31      	ldr	r2, [pc, #196]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 8001850:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001854:	6453      	str	r3, [r2, #68]	; 0x44
 8001856:	4b2f      	ldr	r3, [pc, #188]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001862:	4b2c      	ldr	r3, [pc, #176]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a2b      	ldr	r2, [pc, #172]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 8001868:	f043 0320 	orr.w	r3, r3, #32
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b29      	ldr	r3, [pc, #164]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0320 	and.w	r3, r3, #32
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800187a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800187e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001888:	2303      	movs	r3, #3
 800188a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800188c:	2305      	movs	r3, #5
 800188e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001890:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001894:	4619      	mov	r1, r3
 8001896:	4826      	ldr	r0, [pc, #152]	; (8001930 <HAL_SPI_MspInit+0x278>)
 8001898:	f000 fe10 	bl	80024bc <HAL_GPIO_Init>
}
 800189c:	e034      	b.n	8001908 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI6)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a24      	ldr	r2, [pc, #144]	; (8001934 <HAL_SPI_MspInit+0x27c>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d12f      	bne.n	8001908 <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI6_CLK_ENABLE();
 80018a8:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 80018aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ac:	4a19      	ldr	r2, [pc, #100]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 80018ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018b2:	6453      	str	r3, [r2, #68]	; 0x44
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 80018b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	4a13      	ldr	r2, [pc, #76]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6313      	str	r3, [r2, #48]	; 0x30
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_SPI_MspInit+0x25c>)
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018d8:	23e0      	movs	r3, #224	; 0xe0
 80018da:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 80018e8:	2308      	movs	r3, #8
 80018ea:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018f0:	4619      	mov	r1, r3
 80018f2:	4811      	ldr	r0, [pc, #68]	; (8001938 <HAL_SPI_MspInit+0x280>)
 80018f4:	f000 fde2 	bl	80024bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 6, 0);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2106      	movs	r1, #6
 80018fc:	2056      	movs	r0, #86	; 0x56
 80018fe:	f000 fc1b 	bl	8002138 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 8001902:	2056      	movs	r0, #86	; 0x56
 8001904:	f000 fc44 	bl	8002190 <HAL_NVIC_EnableIRQ>
}
 8001908:	bf00      	nop
 800190a:	3748      	adds	r7, #72	; 0x48
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40003800 	.word	0x40003800
 8001914:	40023800 	.word	0x40023800
 8001918:	40020400 	.word	0x40020400
 800191c:	40003c00 	.word	0x40003c00
 8001920:	40020800 	.word	0x40020800
 8001924:	40013400 	.word	0x40013400
 8001928:	40021000 	.word	0x40021000
 800192c:	40015000 	.word	0x40015000
 8001930:	40021400 	.word	0x40021400
 8001934:	40015400 	.word	0x40015400
 8001938:	40020000 	.word	0x40020000

0800193c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <HAL_MspInit+0x44>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	4a0e      	ldr	r2, [pc, #56]	; (8001980 <HAL_MspInit+0x44>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <HAL_MspInit+0x44>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_MspInit+0x44>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	4a08      	ldr	r2, [pc, #32]	; (8001980 <HAL_MspInit+0x44>)
 8001960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001964:	6453      	str	r3, [r2, #68]	; 0x44
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_MspInit+0x44>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800

08001984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <HardFault_Handler+0x4>

08001998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <MemManage_Handler+0x4>

0800199e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a2:	e7fe      	b.n	80019a2 <BusFault_Handler+0x4>

080019a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <UsageFault_Handler+0x4>

080019aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80019d8:	2010      	movs	r0, #16
 80019da:	f001 f949 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80019e6:	2020      	movs	r0, #32
 80019e8:	f001 f942 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80019ec:	2040      	movs	r0, #64	; 0x40
 80019ee:	f001 f93f 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80019f2:	2080      	movs	r0, #128	; 0x80
 80019f4:	f001 f93c 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80019f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80019fc:	f001 f938 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001a00:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a04:	f001 f934 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <SPI2_IRQHandler+0x10>)
 8001a12:	f003 fd47 	bl	80054a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000050 	.word	0x20000050

08001a20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001a24:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001a28:	f001 f922 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001a2c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a30:	f001 f91e 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a34:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a38:	f001 f91a 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001a3c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a40:	f001 f916 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001a44:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a48:	f001 f912 	bl	8002c70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <UART4_IRQHandler+0x10>)
 8001a56:	f004 f97f 	bl	8005d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000344 	.word	0x20000344

08001a64 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <UART5_IRQHandler+0x10>)
 8001a6a:	f004 f975 	bl	8005d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000244 	.word	0x20000244

08001a78 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001a7c:	4802      	ldr	r0, [pc, #8]	; (8001a88 <UART8_IRQHandler+0x10>)
 8001a7e:	f004 f96b 	bl	8005d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200002c4 	.word	0x200002c4

08001a8c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <SPI4_IRQHandler+0x10>)
 8001a92:	f003 fd07 	bl	80054a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200001e0 	.word	0x200001e0

08001aa0 <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 8001aa4:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <SPI6_IRQHandler+0x10>)
 8001aa6:	f003 fcfd 	bl	80054a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000118 	.word	0x20000118

08001ab4 <SysTick_Handler>:

/* USER CODE BEGIN 1 */
void SysTick_Handler(void) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001ab8:	f000 fa0c 	bl	8001ed4 <HAL_IncTick>
}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <SystemInit+0x28>)
 8001ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aca:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <SystemInit+0x28>)
 8001acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ad4:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <SystemInit+0x28>)
 8001ad6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ada:	609a      	str	r2, [r3, #8]
#endif
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart8;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001af0:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <MX_UART4_Init+0x58>)
 8001af2:	4a15      	ldr	r2, [pc, #84]	; (8001b48 <MX_UART4_Init+0x5c>)
 8001af4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001af6:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <MX_UART4_Init+0x58>)
 8001af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001afc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <MX_UART4_Init+0x58>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <MX_UART4_Init+0x58>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <MX_UART4_Init+0x58>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <MX_UART4_Init+0x58>)
 8001b12:	220c      	movs	r2, #12
 8001b14:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <MX_UART4_Init+0x58>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <MX_UART4_Init+0x58>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <MX_UART4_Init+0x58>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <MX_UART4_Init+0x58>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <MX_UART4_Init+0x58>)
 8001b30:	f003 fef4 	bl	800591c <HAL_UART_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001b3a:	f7ff fc74 	bl	8001426 <Error_Handler>
  }

}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000344 	.word	0x20000344
 8001b48:	40004c00 	.word	0x40004c00

08001b4c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <MX_UART5_Init+0x58>)
 8001b52:	4a15      	ldr	r2, [pc, #84]	; (8001ba8 <MX_UART5_Init+0x5c>)
 8001b54:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001b56:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <MX_UART5_Init+0x58>)
 8001b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b5c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <MX_UART5_Init+0x58>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <MX_UART5_Init+0x58>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <MX_UART5_Init+0x58>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <MX_UART5_Init+0x58>)
 8001b72:	220c      	movs	r2, #12
 8001b74:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <MX_UART5_Init+0x58>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <MX_UART5_Init+0x58>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <MX_UART5_Init+0x58>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <MX_UART5_Init+0x58>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_UART5_Init+0x58>)
 8001b90:	f003 fec4 	bl	800591c <HAL_UART_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001b9a:	f7ff fc44 	bl	8001426 <Error_Handler>
  }

}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000244 	.word	0x20000244
 8001ba8:	40005000 	.word	0x40005000

08001bac <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <MX_UART8_Init+0x58>)
 8001bb2:	4a15      	ldr	r2, [pc, #84]	; (8001c08 <MX_UART8_Init+0x5c>)
 8001bb4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 30000;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <MX_UART8_Init+0x58>)
 8001bb8:	f247 5230 	movw	r2, #30000	; 0x7530
 8001bbc:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001bbe:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <MX_UART8_Init+0x58>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <MX_UART8_Init+0x58>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <MX_UART8_Init+0x58>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <MX_UART8_Init+0x58>)
 8001bd2:	220c      	movs	r2, #12
 8001bd4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <MX_UART8_Init+0x58>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <MX_UART8_Init+0x58>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <MX_UART8_Init+0x58>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <MX_UART8_Init+0x58>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001bee:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_UART8_Init+0x58>)
 8001bf0:	f003 fe94 	bl	800591c <HAL_UART_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_UART8_Init+0x52>
  {
    Error_Handler();
 8001bfa:	f7ff fc14 	bl	8001426 <Error_Handler>
  }

}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200002c4 	.word	0x200002c4
 8001c08:	40007c00 	.word	0x40007c00

08001c0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b090      	sub	sp, #64	; 0x40
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a6e      	ldr	r2, [pc, #440]	; (8001de4 <HAL_UART_MspInit+0x1d8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d14d      	bne.n	8001cca <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c2e:	4b6e      	ldr	r3, [pc, #440]	; (8001de8 <HAL_UART_MspInit+0x1dc>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	4a6d      	ldr	r2, [pc, #436]	; (8001de8 <HAL_UART_MspInit+0x1dc>)
 8001c34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c38:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3a:	4b6b      	ldr	r3, [pc, #428]	; (8001de8 <HAL_UART_MspInit+0x1dc>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c44:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c46:	4b68      	ldr	r3, [pc, #416]	; (8001de8 <HAL_UART_MspInit+0x1dc>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a67      	ldr	r2, [pc, #412]	; (8001de8 <HAL_UART_MspInit+0x1dc>)
 8001c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b65      	ldr	r3, [pc, #404]	; (8001de8 <HAL_UART_MspInit+0x1dc>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5e:	4b62      	ldr	r3, [pc, #392]	; (8001de8 <HAL_UART_MspInit+0x1dc>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a61      	ldr	r2, [pc, #388]	; (8001de8 <HAL_UART_MspInit+0x1dc>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b5f      	ldr	r3, [pc, #380]	; (8001de8 <HAL_UART_MspInit+0x1dc>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	623b      	str	r3, [r7, #32]
 8001c74:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PI9     ------> UART4_RX
    PA0/WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = DAPI_RX_Pin;
 8001c76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c84:	2303      	movs	r3, #3
 8001c86:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c88:	2308      	movs	r3, #8
 8001c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(DAPI_RX_GPIO_Port, &GPIO_InitStruct);
 8001c8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c90:	4619      	mov	r1, r3
 8001c92:	4856      	ldr	r0, [pc, #344]	; (8001dec <HAL_UART_MspInit+0x1e0>)
 8001c94:	f000 fc12 	bl	80024bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DAPI_TX_Pin;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ca8:	2308      	movs	r3, #8
 8001caa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(DAPI_TX_GPIO_Port, &GPIO_InitStruct);
 8001cac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	484f      	ldr	r0, [pc, #316]	; (8001df0 <HAL_UART_MspInit+0x1e4>)
 8001cb4:	f000 fc02 	bl	80024bc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2106      	movs	r1, #6
 8001cbc:	2034      	movs	r0, #52	; 0x34
 8001cbe:	f000 fa3b 	bl	8002138 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001cc2:	2034      	movs	r0, #52	; 0x34
 8001cc4:	f000 fa64 	bl	8002190 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 8001cc8:	e087      	b.n	8001dda <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==UART5)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a49      	ldr	r2, [pc, #292]	; (8001df4 <HAL_UART_MspInit+0x1e8>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d14d      	bne.n	8001d70 <HAL_UART_MspInit+0x164>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001cd4:	4b44      	ldr	r3, [pc, #272]	; (8001de8 <HAL_UART_MspInit+0x1dc>)
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	4a43      	ldr	r2, [pc, #268]	; (8001de8 <HAL_UART_MspInit+0x1dc>)
 8001cda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cde:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce0:	4b41      	ldr	r3, [pc, #260]	; (8001de8 <HAL_UART_MspInit+0x1dc>)
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cec:	4b3e      	ldr	r3, [pc, #248]	; (8001de8 <HAL_UART_MspInit+0x1dc>)
 8001cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf0:	4a3d      	ldr	r2, [pc, #244]	; (8001de8 <HAL_UART_MspInit+0x1dc>)
 8001cf2:	f043 0304 	orr.w	r3, r3, #4
 8001cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf8:	4b3b      	ldr	r3, [pc, #236]	; (8001de8 <HAL_UART_MspInit+0x1dc>)
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	61bb      	str	r3, [r7, #24]
 8001d02:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d04:	4b38      	ldr	r3, [pc, #224]	; (8001de8 <HAL_UART_MspInit+0x1dc>)
 8001d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d08:	4a37      	ldr	r2, [pc, #220]	; (8001de8 <HAL_UART_MspInit+0x1dc>)
 8001d0a:	f043 0308 	orr.w	r3, r3, #8
 8001d0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d10:	4b35      	ldr	r3, [pc, #212]	; (8001de8 <HAL_UART_MspInit+0x1dc>)
 8001d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = INTERSPU_TX_Pin;
 8001d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001d2e:	2308      	movs	r3, #8
 8001d30:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(INTERSPU_TX_GPIO_Port, &GPIO_InitStruct);
 8001d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d36:	4619      	mov	r1, r3
 8001d38:	482f      	ldr	r0, [pc, #188]	; (8001df8 <HAL_UART_MspInit+0x1ec>)
 8001d3a:	f000 fbbf 	bl	80024bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = INTERSPU_RX_Pin;
 8001d3e:	2304      	movs	r3, #4
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001d4e:	2308      	movs	r3, #8
 8001d50:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(INTERSPU_RX_GPIO_Port, &GPIO_InitStruct);
 8001d52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d56:	4619      	mov	r1, r3
 8001d58:	4828      	ldr	r0, [pc, #160]	; (8001dfc <HAL_UART_MspInit+0x1f0>)
 8001d5a:	f000 fbaf 	bl	80024bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 6, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2106      	movs	r1, #6
 8001d62:	2035      	movs	r0, #53	; 0x35
 8001d64:	f000 f9e8 	bl	8002138 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001d68:	2035      	movs	r0, #53	; 0x35
 8001d6a:	f000 fa11 	bl	8002190 <HAL_NVIC_EnableIRQ>
}
 8001d6e:	e034      	b.n	8001dda <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==UART8)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a22      	ldr	r2, [pc, #136]	; (8001e00 <HAL_UART_MspInit+0x1f4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d12f      	bne.n	8001dda <HAL_UART_MspInit+0x1ce>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001d7a:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <HAL_UART_MspInit+0x1dc>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	4a1a      	ldr	r2, [pc, #104]	; (8001de8 <HAL_UART_MspInit+0x1dc>)
 8001d80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d84:	6413      	str	r3, [r2, #64]	; 0x40
 8001d86:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <HAL_UART_MspInit+0x1dc>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <HAL_UART_MspInit+0x1dc>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <HAL_UART_MspInit+0x1dc>)
 8001d98:	f043 0310 	orr.w	r3, r3, #16
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_UART_MspInit+0x1dc>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0310 	and.w	r3, r3, #16
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EXP_IN_Pin|EXP_OUT_Pin;
 8001daa:	2303      	movs	r3, #3
 8001dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db6:	2303      	movs	r3, #3
 8001db8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001dba:	2308      	movs	r3, #8
 8001dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	480f      	ldr	r0, [pc, #60]	; (8001e04 <HAL_UART_MspInit+0x1f8>)
 8001dc6:	f000 fb79 	bl	80024bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 6, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2106      	movs	r1, #6
 8001dce:	2053      	movs	r0, #83	; 0x53
 8001dd0:	f000 f9b2 	bl	8002138 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001dd4:	2053      	movs	r0, #83	; 0x53
 8001dd6:	f000 f9db 	bl	8002190 <HAL_NVIC_EnableIRQ>
}
 8001dda:	bf00      	nop
 8001ddc:	3740      	adds	r7, #64	; 0x40
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40004c00 	.word	0x40004c00
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40022000 	.word	0x40022000
 8001df0:	40020000 	.word	0x40020000
 8001df4:	40005000 	.word	0x40005000
 8001df8:	40020800 	.word	0x40020800
 8001dfc:	40020c00 	.word	0x40020c00
 8001e00:	40007c00 	.word	0x40007c00
 8001e04:	40021000 	.word	0x40021000

08001e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e0e:	e003      	b.n	8001e18 <LoopCopyDataInit>

08001e10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e16:	3104      	adds	r1, #4

08001e18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e18:	480b      	ldr	r0, [pc, #44]	; (8001e48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e20:	d3f6      	bcc.n	8001e10 <CopyDataInit>
  ldr  r2, =_sbss
 8001e22:	4a0b      	ldr	r2, [pc, #44]	; (8001e50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e24:	e002      	b.n	8001e2c <LoopFillZerobss>

08001e26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e28:	f842 3b04 	str.w	r3, [r2], #4

08001e2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e30:	d3f9      	bcc.n	8001e26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e32:	f7ff fe45 	bl	8001ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e36:	f004 fe93 	bl	8006b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e3a:	f7fe fe15 	bl	8000a68 <main>
  bx  lr    
 8001e3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e40:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001e44:	08006dcc 	.word	0x08006dcc
  ldr  r0, =_sdata
 8001e48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e4c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001e50:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001e54:	200003c8 	.word	0x200003c8

08001e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e58:	e7fe      	b.n	8001e58 <ADC_IRQHandler>

08001e5a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e5e:	2003      	movs	r0, #3
 8001e60:	f000 f94a 	bl	80020f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e64:	2000      	movs	r0, #0
 8001e66:	f000 f805 	bl	8001e74 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001e6a:	f7ff fd67 	bl	800193c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_InitTick+0x54>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_InitTick+0x58>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	4619      	mov	r1, r3
 8001e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 f994 	bl	80021c0 <HAL_SYSTICK_Config>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00e      	b.n	8001ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b0f      	cmp	r3, #15
 8001ea6:	d80a      	bhi.n	8001ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	f000 f942 	bl	8002138 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb4:	4a06      	ldr	r2, [pc, #24]	; (8001ed0 <HAL_InitTick+0x5c>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e000      	b.n	8001ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	20000008 	.word	0x20000008
 8001ed0:	20000004 	.word	0x20000004

08001ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_IncTick+0x20>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_IncTick+0x24>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <HAL_IncTick+0x24>)
 8001ee6:	6013      	str	r3, [r2, #0]
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20000008 	.word	0x20000008
 8001ef8:	200003c4 	.word	0x200003c4

08001efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return uwTick;
 8001f00:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <HAL_GetTick+0x14>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	200003c4 	.word	0x200003c4

08001f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f1c:	f7ff ffee 	bl	8001efc <HAL_GetTick>
 8001f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2c:	d005      	beq.n	8001f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <HAL_Delay+0x40>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4413      	add	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f3a:	bf00      	nop
 8001f3c:	f7ff ffde 	bl	8001efc <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d8f7      	bhi.n	8001f3c <HAL_Delay+0x28>
  {
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000008 	.word	0x20000008

08001f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <__NVIC_SetPriorityGrouping+0x40>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f74:	4013      	ands	r3, r2
 8001f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <__NVIC_SetPriorityGrouping+0x44>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f86:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <__NVIC_SetPriorityGrouping+0x40>)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	60d3      	str	r3, [r2, #12]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000ed00 	.word	0xe000ed00
 8001f9c:	05fa0000 	.word	0x05fa0000

08001fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	0a1b      	lsrs	r3, r3, #8
 8001faa:	f003 0307 	and.w	r3, r3, #7
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	db0b      	blt.n	8001fe6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	f003 021f 	and.w	r2, r3, #31
 8001fd4:	4907      	ldr	r1, [pc, #28]	; (8001ff4 <__NVIC_EnableIRQ+0x38>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	2001      	movs	r0, #1
 8001fde:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000e100 	.word	0xe000e100

08001ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	6039      	str	r1, [r7, #0]
 8002002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002008:	2b00      	cmp	r3, #0
 800200a:	db0a      	blt.n	8002022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	b2da      	uxtb	r2, r3
 8002010:	490c      	ldr	r1, [pc, #48]	; (8002044 <__NVIC_SetPriority+0x4c>)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	0112      	lsls	r2, r2, #4
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	440b      	add	r3, r1
 800201c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002020:	e00a      	b.n	8002038 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4908      	ldr	r1, [pc, #32]	; (8002048 <__NVIC_SetPriority+0x50>)
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	3b04      	subs	r3, #4
 8002030:	0112      	lsls	r2, r2, #4
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	440b      	add	r3, r1
 8002036:	761a      	strb	r2, [r3, #24]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000e100 	.word	0xe000e100
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800204c:	b480      	push	{r7}
 800204e:	b089      	sub	sp, #36	; 0x24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f1c3 0307 	rsb	r3, r3, #7
 8002066:	2b04      	cmp	r3, #4
 8002068:	bf28      	it	cs
 800206a:	2304      	movcs	r3, #4
 800206c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3304      	adds	r3, #4
 8002072:	2b06      	cmp	r3, #6
 8002074:	d902      	bls.n	800207c <NVIC_EncodePriority+0x30>
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3b03      	subs	r3, #3
 800207a:	e000      	b.n	800207e <NVIC_EncodePriority+0x32>
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	f04f 32ff 	mov.w	r2, #4294967295
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43da      	mvns	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	401a      	ands	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002094:	f04f 31ff 	mov.w	r1, #4294967295
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	43d9      	mvns	r1, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	4313      	orrs	r3, r2
         );
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3724      	adds	r7, #36	; 0x24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
	...

080020b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3b01      	subs	r3, #1
 80020c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c4:	d301      	bcc.n	80020ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020c6:	2301      	movs	r3, #1
 80020c8:	e00f      	b.n	80020ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ca:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <SysTick_Config+0x40>)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020d2:	210f      	movs	r1, #15
 80020d4:	f04f 30ff 	mov.w	r0, #4294967295
 80020d8:	f7ff ff8e 	bl	8001ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <SysTick_Config+0x40>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020e2:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <SysTick_Config+0x40>)
 80020e4:	2207      	movs	r2, #7
 80020e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	e000e010 	.word	0xe000e010

080020f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b07      	cmp	r3, #7
 8002104:	d00f      	beq.n	8002126 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b06      	cmp	r3, #6
 800210a:	d00c      	beq.n	8002126 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b05      	cmp	r3, #5
 8002110:	d009      	beq.n	8002126 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b04      	cmp	r3, #4
 8002116:	d006      	beq.n	8002126 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b03      	cmp	r3, #3
 800211c:	d003      	beq.n	8002126 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800211e:	2192      	movs	r1, #146	; 0x92
 8002120:	4804      	ldr	r0, [pc, #16]	; (8002134 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002122:	f7ff f987 	bl	8001434 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ff16 	bl	8001f58 <__NVIC_SetPriorityGrouping>
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	08006bd0 	.word	0x08006bd0

08002138 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
 8002144:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b0f      	cmp	r3, #15
 800214e:	d903      	bls.n	8002158 <HAL_NVIC_SetPriority+0x20>
 8002150:	21aa      	movs	r1, #170	; 0xaa
 8002152:	480e      	ldr	r0, [pc, #56]	; (800218c <HAL_NVIC_SetPriority+0x54>)
 8002154:	f7ff f96e 	bl	8001434 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b0f      	cmp	r3, #15
 800215c:	d903      	bls.n	8002166 <HAL_NVIC_SetPriority+0x2e>
 800215e:	21ab      	movs	r1, #171	; 0xab
 8002160:	480a      	ldr	r0, [pc, #40]	; (800218c <HAL_NVIC_SetPriority+0x54>)
 8002162:	f7ff f967 	bl	8001434 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002166:	f7ff ff1b 	bl	8001fa0 <__NVIC_GetPriorityGrouping>
 800216a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	68b9      	ldr	r1, [r7, #8]
 8002170:	6978      	ldr	r0, [r7, #20]
 8002172:	f7ff ff6b 	bl	800204c <NVIC_EncodePriority>
 8002176:	4602      	mov	r2, r0
 8002178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217c:	4611      	mov	r1, r2
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff ff3a 	bl	8001ff8 <__NVIC_SetPriority>
}
 8002184:	bf00      	nop
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	08006bd0 	.word	0x08006bd0

08002190 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	da03      	bge.n	80021aa <HAL_NVIC_EnableIRQ+0x1a>
 80021a2:	21be      	movs	r1, #190	; 0xbe
 80021a4:	4805      	ldr	r0, [pc, #20]	; (80021bc <HAL_NVIC_EnableIRQ+0x2c>)
 80021a6:	f7ff f945 	bl	8001434 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff ff04 	bl	8001fbc <__NVIC_EnableIRQ>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	08006bd0 	.word	0x08006bd0

080021c0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff ff73 	bl	80020b4 <SysTick_Config>
 80021ce:	4603      	mov	r3, r0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e0a5      	b.n	8002336 <HAL_CRC_Init+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a54      	ldr	r2, [pc, #336]	; (8002340 <HAL_CRC_Init+0x168>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d003      	beq.n	80021fc <HAL_CRC_Init+0x24>
 80021f4:	2170      	movs	r1, #112	; 0x70
 80021f6:	4853      	ldr	r0, [pc, #332]	; (8002344 <HAL_CRC_Init+0x16c>)
 80021f8:	f7ff f91c 	bl	8001434 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7f5b      	ldrb	r3, [r3, #29]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d105      	bne.n	8002212 <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7fe f9b5 	bl	800057c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2202      	movs	r2, #2
 8002216:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	791b      	ldrb	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <HAL_CRC_Init+0x58>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	791b      	ldrb	r3, [r3, #4]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d003      	beq.n	8002230 <HAL_CRC_Init+0x58>
 8002228:	217e      	movs	r1, #126	; 0x7e
 800222a:	4846      	ldr	r0, [pc, #280]	; (8002344 <HAL_CRC_Init+0x16c>)
 800222c:	f7ff f902 	bl	8001434 <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	791b      	ldrb	r3, [r3, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10c      	bne.n	8002252 <HAL_CRC_Init+0x7a>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a42      	ldr	r2, [pc, #264]	; (8002348 <HAL_CRC_Init+0x170>)
 800223e:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0218 	bic.w	r2, r2, #24
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	e00c      	b.n	800226c <HAL_CRC_Init+0x94>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6899      	ldr	r1, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	461a      	mov	r2, r3
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f875 	bl	800234c <HAL_CRCEx_Polynomial_Set>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_CRC_Init+0x94>
    {
      return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e064      	b.n	8002336 <HAL_CRC_Init+0x15e>
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	795b      	ldrb	r3, [r3, #5]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d007      	beq.n	8002284 <HAL_CRC_Init+0xac>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	795b      	ldrb	r3, [r3, #5]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d003      	beq.n	8002284 <HAL_CRC_Init+0xac>
 800227c:	2190      	movs	r1, #144	; 0x90
 800227e:	4831      	ldr	r0, [pc, #196]	; (8002344 <HAL_CRC_Init+0x16c>)
 8002280:	f7ff f8d8 	bl	8001434 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	795b      	ldrb	r3, [r3, #5]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d105      	bne.n	8002298 <HAL_CRC_Init+0xc0>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f04f 32ff 	mov.w	r2, #4294967295
 8002294:	611a      	str	r2, [r3, #16]
 8002296:	e004      	b.n	80022a2 <HAL_CRC_Init+0xca>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6912      	ldr	r2, [r2, #16]
 80022a0:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00f      	beq.n	80022ca <HAL_CRC_Init+0xf2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	2b20      	cmp	r3, #32
 80022b0:	d00b      	beq.n	80022ca <HAL_CRC_Init+0xf2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	2b40      	cmp	r3, #64	; 0x40
 80022b8:	d007      	beq.n	80022ca <HAL_CRC_Init+0xf2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	2b60      	cmp	r3, #96	; 0x60
 80022c0:	d003      	beq.n	80022ca <HAL_CRC_Init+0xf2>
 80022c2:	219c      	movs	r1, #156	; 0x9c
 80022c4:	481f      	ldr	r0, [pc, #124]	; (8002344 <HAL_CRC_Init+0x16c>)
 80022c6:	f7ff f8b5 	bl	8001434 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d007      	beq.n	80022f8 <HAL_CRC_Init+0x120>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	2b80      	cmp	r3, #128	; 0x80
 80022ee:	d003      	beq.n	80022f8 <HAL_CRC_Init+0x120>
 80022f0:	21a0      	movs	r1, #160	; 0xa0
 80022f2:	4814      	ldr	r0, [pc, #80]	; (8002344 <HAL_CRC_Init+0x16c>)
 80022f4:	f7ff f89e 	bl	8001434 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	609a      	str	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d00b      	beq.n	800232e <HAL_CRC_Init+0x156>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d007      	beq.n	800232e <HAL_CRC_Init+0x156>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	2b03      	cmp	r3, #3
 8002324:	d003      	beq.n	800232e <HAL_CRC_Init+0x156>
 8002326:	21a5      	movs	r1, #165	; 0xa5
 8002328:	4806      	ldr	r0, [pc, #24]	; (8002344 <HAL_CRC_Init+0x16c>)
 800232a:	f7ff f883 	bl	8001434 <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40023000 	.word	0x40023000
 8002344:	08006c0c 	.word	0x08006c0c
 8002348:	04c11db7 	.word	0x04c11db7

0800234c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800235c:	231f      	movs	r3, #31
 800235e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00c      	beq.n	8002380 <HAL_CRCEx_Polynomial_Set+0x34>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b08      	cmp	r3, #8
 800236a:	d009      	beq.n	8002380 <HAL_CRCEx_Polynomial_Set+0x34>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b10      	cmp	r3, #16
 8002370:	d006      	beq.n	8002380 <HAL_CRCEx_Polynomial_Set+0x34>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b18      	cmp	r3, #24
 8002376:	d003      	beq.n	8002380 <HAL_CRCEx_Polynomial_Set+0x34>
 8002378:	215f      	movs	r1, #95	; 0x5f
 800237a:	483e      	ldr	r0, [pc, #248]	; (8002474 <HAL_CRCEx_Polynomial_Set+0x128>)
 800237c:	f7ff f85a 	bl	8001434 <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002380:	bf00      	nop
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1e5a      	subs	r2, r3, #1
 8002386:	613a      	str	r2, [r7, #16]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d009      	beq.n	80023a0 <HAL_CRCEx_Polynomial_Set+0x54>
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	fa22 f303 	lsr.w	r3, r2, r3
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_CRCEx_Polynomial_Set+0x36>
  {
  }

  switch (PolyLength)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b18      	cmp	r3, #24
 80023a4:	d846      	bhi.n	8002434 <HAL_CRCEx_Polynomial_Set+0xe8>
 80023a6:	a201      	add	r2, pc, #4	; (adr r2, 80023ac <HAL_CRCEx_Polynomial_Set+0x60>)
 80023a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ac:	0800243b 	.word	0x0800243b
 80023b0:	08002435 	.word	0x08002435
 80023b4:	08002435 	.word	0x08002435
 80023b8:	08002435 	.word	0x08002435
 80023bc:	08002435 	.word	0x08002435
 80023c0:	08002435 	.word	0x08002435
 80023c4:	08002435 	.word	0x08002435
 80023c8:	08002435 	.word	0x08002435
 80023cc:	08002429 	.word	0x08002429
 80023d0:	08002435 	.word	0x08002435
 80023d4:	08002435 	.word	0x08002435
 80023d8:	08002435 	.word	0x08002435
 80023dc:	08002435 	.word	0x08002435
 80023e0:	08002435 	.word	0x08002435
 80023e4:	08002435 	.word	0x08002435
 80023e8:	08002435 	.word	0x08002435
 80023ec:	0800241d 	.word	0x0800241d
 80023f0:	08002435 	.word	0x08002435
 80023f4:	08002435 	.word	0x08002435
 80023f8:	08002435 	.word	0x08002435
 80023fc:	08002435 	.word	0x08002435
 8002400:	08002435 	.word	0x08002435
 8002404:	08002435 	.word	0x08002435
 8002408:	08002435 	.word	0x08002435
 800240c:	08002411 	.word	0x08002411
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	2b06      	cmp	r3, #6
 8002414:	d913      	bls.n	800243e <HAL_CRCEx_Polynomial_Set+0xf2>
      {
        status =   HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800241a:	e010      	b.n	800243e <HAL_CRCEx_Polynomial_Set+0xf2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	2b07      	cmp	r3, #7
 8002420:	d90f      	bls.n	8002442 <HAL_CRCEx_Polynomial_Set+0xf6>
      {
        status =   HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002426:	e00c      	b.n	8002442 <HAL_CRCEx_Polynomial_Set+0xf6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	2b0f      	cmp	r3, #15
 800242c:	d90b      	bls.n	8002446 <HAL_CRCEx_Polynomial_Set+0xfa>
      {
        status =   HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002432:	e008      	b.n	8002446 <HAL_CRCEx_Polynomial_Set+0xfa>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	75fb      	strb	r3, [r7, #23]
      break;
 8002438:	e006      	b.n	8002448 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 800243a:	bf00      	nop
 800243c:	e004      	b.n	8002448 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 800243e:	bf00      	nop
 8002440:	e002      	b.n	8002448 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8002442:	bf00      	nop
 8002444:	e000      	b.n	8002448 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8002446:	bf00      	nop
  }
  if (status == HAL_OK)
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10d      	bne.n	800246a <HAL_CRCEx_Polynomial_Set+0x11e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f023 0118 	bic.w	r1, r3, #24
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	430a      	orrs	r2, r1
 8002468:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800246a:	7dfb      	ldrb	r3, [r7, #23]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	08006c44 	.word	0x08006c44

08002478 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d004      	beq.n	8002496 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2280      	movs	r2, #128	; 0x80
 8002490:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e00c      	b.n	80024b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2205      	movs	r2, #5
 800249a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0201 	bic.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a42      	ldr	r2, [pc, #264]	; (80025e4 <HAL_GPIO_Init+0x128>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d02b      	beq.n	8002536 <HAL_GPIO_Init+0x7a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a41      	ldr	r2, [pc, #260]	; (80025e8 <HAL_GPIO_Init+0x12c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d027      	beq.n	8002536 <HAL_GPIO_Init+0x7a>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a40      	ldr	r2, [pc, #256]	; (80025ec <HAL_GPIO_Init+0x130>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d023      	beq.n	8002536 <HAL_GPIO_Init+0x7a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a3f      	ldr	r2, [pc, #252]	; (80025f0 <HAL_GPIO_Init+0x134>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d01f      	beq.n	8002536 <HAL_GPIO_Init+0x7a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a3e      	ldr	r2, [pc, #248]	; (80025f4 <HAL_GPIO_Init+0x138>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d01b      	beq.n	8002536 <HAL_GPIO_Init+0x7a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a3d      	ldr	r2, [pc, #244]	; (80025f8 <HAL_GPIO_Init+0x13c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d017      	beq.n	8002536 <HAL_GPIO_Init+0x7a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a3c      	ldr	r2, [pc, #240]	; (80025fc <HAL_GPIO_Init+0x140>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d013      	beq.n	8002536 <HAL_GPIO_Init+0x7a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a3b      	ldr	r2, [pc, #236]	; (8002600 <HAL_GPIO_Init+0x144>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d00f      	beq.n	8002536 <HAL_GPIO_Init+0x7a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a3a      	ldr	r2, [pc, #232]	; (8002604 <HAL_GPIO_Init+0x148>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00b      	beq.n	8002536 <HAL_GPIO_Init+0x7a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a39      	ldr	r2, [pc, #228]	; (8002608 <HAL_GPIO_Init+0x14c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d007      	beq.n	8002536 <HAL_GPIO_Init+0x7a>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a38      	ldr	r2, [pc, #224]	; (800260c <HAL_GPIO_Init+0x150>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x7a>
 800252e:	21b1      	movs	r1, #177	; 0xb1
 8002530:	4837      	ldr	r0, [pc, #220]	; (8002610 <HAL_GPIO_Init+0x154>)
 8002532:	f7fe ff7f 	bl	8001434 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	b29b      	uxth	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d103      	bne.n	8002548 <HAL_GPIO_Init+0x8c>
 8002540:	21b2      	movs	r1, #178	; 0xb2
 8002542:	4833      	ldr	r0, [pc, #204]	; (8002610 <HAL_GPIO_Init+0x154>)
 8002544:	f7fe ff76 	bl	8001434 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d035      	beq.n	80025bc <HAL_GPIO_Init+0x100>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d031      	beq.n	80025bc <HAL_GPIO_Init+0x100>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b11      	cmp	r3, #17
 800255e:	d02d      	beq.n	80025bc <HAL_GPIO_Init+0x100>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d029      	beq.n	80025bc <HAL_GPIO_Init+0x100>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b12      	cmp	r3, #18
 800256e:	d025      	beq.n	80025bc <HAL_GPIO_Init+0x100>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	4a27      	ldr	r2, [pc, #156]	; (8002614 <HAL_GPIO_Init+0x158>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d020      	beq.n	80025bc <HAL_GPIO_Init+0x100>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4a26      	ldr	r2, [pc, #152]	; (8002618 <HAL_GPIO_Init+0x15c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d01b      	beq.n	80025bc <HAL_GPIO_Init+0x100>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	4a24      	ldr	r2, [pc, #144]	; (800261c <HAL_GPIO_Init+0x160>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d016      	beq.n	80025bc <HAL_GPIO_Init+0x100>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4a23      	ldr	r2, [pc, #140]	; (8002620 <HAL_GPIO_Init+0x164>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d011      	beq.n	80025bc <HAL_GPIO_Init+0x100>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	4a21      	ldr	r2, [pc, #132]	; (8002624 <HAL_GPIO_Init+0x168>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00c      	beq.n	80025bc <HAL_GPIO_Init+0x100>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	4a20      	ldr	r2, [pc, #128]	; (8002628 <HAL_GPIO_Init+0x16c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d007      	beq.n	80025bc <HAL_GPIO_Init+0x100>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x100>
 80025b4:	21b3      	movs	r1, #179	; 0xb3
 80025b6:	4816      	ldr	r0, [pc, #88]	; (8002610 <HAL_GPIO_Init+0x154>)
 80025b8:	f7fe ff3c 	bl	8001434 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00b      	beq.n	80025dc <HAL_GPIO_Init+0x120>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d007      	beq.n	80025dc <HAL_GPIO_Init+0x120>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d003      	beq.n	80025dc <HAL_GPIO_Init+0x120>
 80025d4:	21b4      	movs	r1, #180	; 0xb4
 80025d6:	480e      	ldr	r0, [pc, #56]	; (8002610 <HAL_GPIO_Init+0x154>)
 80025d8:	f7fe ff2c 	bl	8001434 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80025dc:	2300      	movs	r3, #0
 80025de:	61fb      	str	r3, [r7, #28]
 80025e0:	e2d6      	b.n	8002b90 <HAL_GPIO_Init+0x6d4>
 80025e2:	bf00      	nop
 80025e4:	40020000 	.word	0x40020000
 80025e8:	40020400 	.word	0x40020400
 80025ec:	40020800 	.word	0x40020800
 80025f0:	40020c00 	.word	0x40020c00
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40021400 	.word	0x40021400
 80025fc:	40021800 	.word	0x40021800
 8002600:	40021c00 	.word	0x40021c00
 8002604:	40022000 	.word	0x40022000
 8002608:	40022400 	.word	0x40022400
 800260c:	40022800 	.word	0x40022800
 8002610:	08006c80 	.word	0x08006c80
 8002614:	10110000 	.word	0x10110000
 8002618:	10210000 	.word	0x10210000
 800261c:	10310000 	.word	0x10310000
 8002620:	10120000 	.word	0x10120000
 8002624:	10220000 	.word	0x10220000
 8002628:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800262c:	2201      	movs	r2, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	429a      	cmp	r2, r3
 8002646:	f040 82a0 	bne.w	8002b8a <HAL_GPIO_Init+0x6ce>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d00b      	beq.n	800266a <HAL_GPIO_Init+0x1ae>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d007      	beq.n	800266a <HAL_GPIO_Init+0x1ae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800265e:	2b11      	cmp	r3, #17
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x1ae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b12      	cmp	r3, #18
 8002668:	d144      	bne.n	80026f4 <HAL_GPIO_Init+0x238>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00f      	beq.n	8002692 <HAL_GPIO_Init+0x1d6>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d00b      	beq.n	8002692 <HAL_GPIO_Init+0x1d6>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d007      	beq.n	8002692 <HAL_GPIO_Init+0x1d6>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	2b03      	cmp	r3, #3
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_Init+0x1d6>
 800268a:	21c6      	movs	r1, #198	; 0xc6
 800268c:	482a      	ldr	r0, [pc, #168]	; (8002738 <HAL_GPIO_Init+0x27c>)
 800268e:	f7fe fed1 	bl	8001434 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	2203      	movs	r2, #3
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026c8:	2201      	movs	r2, #1
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f003 0201 	and.w	r2, r3, #1
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	2203      	movs	r2, #3
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d007      	beq.n	800273c <HAL_GPIO_Init+0x280>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b12      	cmp	r3, #18
 8002732:	f040 814b 	bne.w	80029cc <HAL_GPIO_Init+0x510>
 8002736:	e001      	b.n	800273c <HAL_GPIO_Init+0x280>
 8002738:	08006c80 	.word	0x08006c80
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 811f 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b01      	cmp	r3, #1
 800274c:	f000 811a 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 8115 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 8110 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 810b 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	2b01      	cmp	r3, #1
 8002774:	f000 8106 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	2b02      	cmp	r3, #2
 800277e:	f000 8101 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	2b02      	cmp	r3, #2
 8002788:	f000 80fc 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	2b02      	cmp	r3, #2
 8002792:	f000 80f7 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	2b03      	cmp	r3, #3
 800279c:	f000 80f2 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	f000 80ed 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	f000 80e8 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	f000 80e3 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	f000 80de 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	f000 80d9 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	f000 80d4 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	f000 80cf 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	f000 80ca 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	f000 80c5 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2b04      	cmp	r3, #4
 8002800:	f000 80c0 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	2b05      	cmp	r3, #5
 800280a:	f000 80bb 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2b05      	cmp	r3, #5
 8002814:	f000 80b6 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	2b05      	cmp	r3, #5
 800281e:	f000 80b1 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	2b05      	cmp	r3, #5
 8002828:	f000 80ac 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	2b05      	cmp	r3, #5
 8002832:	f000 80a7 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b05      	cmp	r3, #5
 800283c:	f000 80a2 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2b06      	cmp	r3, #6
 8002846:	f000 809d 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	2b06      	cmp	r3, #6
 8002850:	f000 8098 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	2b07      	cmp	r3, #7
 800285a:	f000 8093 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	2b07      	cmp	r3, #7
 8002864:	f000 808e 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2b07      	cmp	r3, #7
 800286e:	f000 8089 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2b07      	cmp	r3, #7
 8002878:	f000 8084 	beq.w	8002984 <HAL_GPIO_Init+0x4c8>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	2b07      	cmp	r3, #7
 8002882:	d07f      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	2b07      	cmp	r3, #7
 800288a:	d07b      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	2b07      	cmp	r3, #7
 8002892:	d077      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	2b08      	cmp	r3, #8
 800289a:	d073      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	d06f      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d06b      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d067      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d063      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d05f      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d05b      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	2b09      	cmp	r3, #9
 80028d2:	d057      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	2b09      	cmp	r3, #9
 80028da:	d053      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	2b09      	cmp	r3, #9
 80028e2:	d04f      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	2b09      	cmp	r3, #9
 80028ea:	d04b      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	2b09      	cmp	r3, #9
 80028f2:	d047      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	2b09      	cmp	r3, #9
 80028fa:	d043      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	2b09      	cmp	r3, #9
 8002902:	d03f      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	2b0a      	cmp	r3, #10
 800290a:	d03b      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	2b0a      	cmp	r3, #10
 8002912:	d037      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	2b0a      	cmp	r3, #10
 800291a:	d033      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	2b0a      	cmp	r3, #10
 8002922:	d02f      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	2b0b      	cmp	r3, #11
 800292a:	d02b      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	2b0a      	cmp	r3, #10
 8002932:	d027      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	2b0b      	cmp	r3, #11
 800293a:	d023      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	2b0b      	cmp	r3, #11
 8002942:	d01f      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	2b0c      	cmp	r3, #12
 800294a:	d01b      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	2b0c      	cmp	r3, #12
 8002952:	d017      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	2b0c      	cmp	r3, #12
 800295a:	d013      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	2b0f      	cmp	r3, #15
 8002962:	d00f      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	2b0d      	cmp	r3, #13
 800296a:	d00b      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	2b0e      	cmp	r3, #14
 8002972:	d007      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	2b0d      	cmp	r3, #13
 800297a:	d003      	beq.n	8002984 <HAL_GPIO_Init+0x4c8>
 800297c:	21de      	movs	r1, #222	; 0xde
 800297e:	4888      	ldr	r0, [pc, #544]	; (8002ba0 <HAL_GPIO_Init+0x6e4>)
 8002980:	f7fe fd58 	bl	8001434 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	08da      	lsrs	r2, r3, #3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3208      	adds	r2, #8
 800298c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	220f      	movs	r2, #15
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	08da      	lsrs	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3208      	adds	r2, #8
 80029c6:	69b9      	ldr	r1, [r7, #24]
 80029c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	2203      	movs	r2, #3
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 0203 	and.w	r2, r3, #3
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 80be 	beq.w	8002b8a <HAL_GPIO_Init+0x6ce>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0e:	4b65      	ldr	r3, [pc, #404]	; (8002ba4 <HAL_GPIO_Init+0x6e8>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	4a64      	ldr	r2, [pc, #400]	; (8002ba4 <HAL_GPIO_Init+0x6e8>)
 8002a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a18:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1a:	4b62      	ldr	r3, [pc, #392]	; (8002ba4 <HAL_GPIO_Init+0x6e8>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a26:	4a60      	ldr	r2, [pc, #384]	; (8002ba8 <HAL_GPIO_Init+0x6ec>)
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	089b      	lsrs	r3, r3, #2
 8002a2c:	3302      	adds	r3, #2
 8002a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	220f      	movs	r2, #15
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43db      	mvns	r3, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4013      	ands	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a57      	ldr	r2, [pc, #348]	; (8002bac <HAL_GPIO_Init+0x6f0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d037      	beq.n	8002ac2 <HAL_GPIO_Init+0x606>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a56      	ldr	r2, [pc, #344]	; (8002bb0 <HAL_GPIO_Init+0x6f4>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d031      	beq.n	8002abe <HAL_GPIO_Init+0x602>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a55      	ldr	r2, [pc, #340]	; (8002bb4 <HAL_GPIO_Init+0x6f8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d02b      	beq.n	8002aba <HAL_GPIO_Init+0x5fe>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a54      	ldr	r2, [pc, #336]	; (8002bb8 <HAL_GPIO_Init+0x6fc>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d025      	beq.n	8002ab6 <HAL_GPIO_Init+0x5fa>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a53      	ldr	r2, [pc, #332]	; (8002bbc <HAL_GPIO_Init+0x700>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d01f      	beq.n	8002ab2 <HAL_GPIO_Init+0x5f6>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a52      	ldr	r2, [pc, #328]	; (8002bc0 <HAL_GPIO_Init+0x704>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d019      	beq.n	8002aae <HAL_GPIO_Init+0x5f2>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a51      	ldr	r2, [pc, #324]	; (8002bc4 <HAL_GPIO_Init+0x708>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d013      	beq.n	8002aaa <HAL_GPIO_Init+0x5ee>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a50      	ldr	r2, [pc, #320]	; (8002bc8 <HAL_GPIO_Init+0x70c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00d      	beq.n	8002aa6 <HAL_GPIO_Init+0x5ea>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a4f      	ldr	r2, [pc, #316]	; (8002bcc <HAL_GPIO_Init+0x710>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d007      	beq.n	8002aa2 <HAL_GPIO_Init+0x5e6>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a4e      	ldr	r2, [pc, #312]	; (8002bd0 <HAL_GPIO_Init+0x714>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d101      	bne.n	8002a9e <HAL_GPIO_Init+0x5e2>
 8002a9a:	2309      	movs	r3, #9
 8002a9c:	e012      	b.n	8002ac4 <HAL_GPIO_Init+0x608>
 8002a9e:	230a      	movs	r3, #10
 8002aa0:	e010      	b.n	8002ac4 <HAL_GPIO_Init+0x608>
 8002aa2:	2308      	movs	r3, #8
 8002aa4:	e00e      	b.n	8002ac4 <HAL_GPIO_Init+0x608>
 8002aa6:	2307      	movs	r3, #7
 8002aa8:	e00c      	b.n	8002ac4 <HAL_GPIO_Init+0x608>
 8002aaa:	2306      	movs	r3, #6
 8002aac:	e00a      	b.n	8002ac4 <HAL_GPIO_Init+0x608>
 8002aae:	2305      	movs	r3, #5
 8002ab0:	e008      	b.n	8002ac4 <HAL_GPIO_Init+0x608>
 8002ab2:	2304      	movs	r3, #4
 8002ab4:	e006      	b.n	8002ac4 <HAL_GPIO_Init+0x608>
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e004      	b.n	8002ac4 <HAL_GPIO_Init+0x608>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e002      	b.n	8002ac4 <HAL_GPIO_Init+0x608>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <HAL_GPIO_Init+0x608>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	69fa      	ldr	r2, [r7, #28]
 8002ac6:	f002 0203 	and.w	r2, r2, #3
 8002aca:	0092      	lsls	r2, r2, #2
 8002acc:	4093      	lsls	r3, r2
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ad4:	4934      	ldr	r1, [pc, #208]	; (8002ba8 <HAL_GPIO_Init+0x6ec>)
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	089b      	lsrs	r3, r3, #2
 8002ada:	3302      	adds	r3, #2
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ae2:	4b3c      	ldr	r3, [pc, #240]	; (8002bd4 <HAL_GPIO_Init+0x718>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	43db      	mvns	r3, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4013      	ands	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_Init+0x64a>
        {
          temp |= iocurrent;
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b06:	4a33      	ldr	r2, [pc, #204]	; (8002bd4 <HAL_GPIO_Init+0x718>)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b0c:	4b31      	ldr	r3, [pc, #196]	; (8002bd4 <HAL_GPIO_Init+0x718>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_GPIO_Init+0x674>
        {
          temp |= iocurrent;
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b30:	4a28      	ldr	r2, [pc, #160]	; (8002bd4 <HAL_GPIO_Init+0x718>)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b36:	4b27      	ldr	r3, [pc, #156]	; (8002bd4 <HAL_GPIO_Init+0x718>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4013      	ands	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_GPIO_Init+0x69e>
        {
          temp |= iocurrent;
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b5a:	4a1e      	ldr	r2, [pc, #120]	; (8002bd4 <HAL_GPIO_Init+0x718>)
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b60:	4b1c      	ldr	r3, [pc, #112]	; (8002bd4 <HAL_GPIO_Init+0x718>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_GPIO_Init+0x6c8>
        {
          temp |= iocurrent;
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b84:	4a13      	ldr	r2, [pc, #76]	; (8002bd4 <HAL_GPIO_Init+0x718>)
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	61fb      	str	r3, [r7, #28]
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	2b0f      	cmp	r3, #15
 8002b94:	f67f ad4a 	bls.w	800262c <HAL_GPIO_Init+0x170>
      }
    }
  }
}
 8002b98:	bf00      	nop
 8002b9a:	3720      	adds	r7, #32
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	08006c80 	.word	0x08006c80
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40013800 	.word	0x40013800
 8002bac:	40020000 	.word	0x40020000
 8002bb0:	40020400 	.word	0x40020400
 8002bb4:	40020800 	.word	0x40020800
 8002bb8:	40020c00 	.word	0x40020c00
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40021400 	.word	0x40021400
 8002bc4:	40021800 	.word	0x40021800
 8002bc8:	40021c00 	.word	0x40021c00
 8002bcc:	40022000 	.word	0x40022000
 8002bd0:	40022400 	.word	0x40022400
 8002bd4:	40013c00 	.word	0x40013c00

08002bd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002be4:	887b      	ldrh	r3, [r7, #2]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d104      	bne.n	8002bf4 <HAL_GPIO_ReadPin+0x1c>
 8002bea:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8002bee:	4809      	ldr	r0, [pc, #36]	; (8002c14 <HAL_GPIO_ReadPin+0x3c>)
 8002bf0:	f7fe fc20 	bl	8001434 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	887b      	ldrh	r3, [r7, #2]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
 8002c04:	e001      	b.n	8002c0a <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	08006c80 	.word	0x08006c80

08002c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	807b      	strh	r3, [r7, #2]
 8002c24:	4613      	mov	r3, r2
 8002c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002c28:	887b      	ldrh	r3, [r7, #2]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d104      	bne.n	8002c38 <HAL_GPIO_WritePin+0x20>
 8002c2e:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8002c32:	480e      	ldr	r0, [pc, #56]	; (8002c6c <HAL_GPIO_WritePin+0x54>)
 8002c34:	f7fe fbfe 	bl	8001434 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002c38:	787b      	ldrb	r3, [r7, #1]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d007      	beq.n	8002c4e <HAL_GPIO_WritePin+0x36>
 8002c3e:	787b      	ldrb	r3, [r7, #1]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d004      	beq.n	8002c4e <HAL_GPIO_WritePin+0x36>
 8002c44:	f240 119b 	movw	r1, #411	; 0x19b
 8002c48:	4808      	ldr	r0, [pc, #32]	; (8002c6c <HAL_GPIO_WritePin+0x54>)
 8002c4a:	f7fe fbf3 	bl	8001434 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002c4e:	787b      	ldrb	r3, [r7, #1]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c54:	887a      	ldrh	r2, [r7, #2]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c5a:	e003      	b.n	8002c64 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c5c:	887b      	ldrh	r3, [r7, #2]
 8002c5e:	041a      	lsls	r2, r3, #16
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	619a      	str	r2, [r3, #24]
}
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	08006c80 	.word	0x08006c80

08002c70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c7a:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d006      	beq.n	8002c94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c86:	4a05      	ldr	r2, [pc, #20]	; (8002c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c8c:	88fb      	ldrh	r3, [r7, #6]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 f806 	bl	8002ca0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40013c00 	.word	0x40013c00

08002ca0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002cc2:	4b23      	ldr	r3, [pc, #140]	; (8002d50 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	4a22      	ldr	r2, [pc, #136]	; (8002d50 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cce:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cda:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a1d      	ldr	r2, [pc, #116]	; (8002d54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ce6:	f7ff f909 	bl	8001efc <HAL_GetTick>
 8002cea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cec:	e009      	b.n	8002d02 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cee:	f7ff f905 	bl	8001efc <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cfc:	d901      	bls.n	8002d02 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e022      	b.n	8002d48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d02:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0e:	d1ee      	bne.n	8002cee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d10:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a0f      	ldr	r2, [pc, #60]	; (8002d54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d1a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d1c:	f7ff f8ee 	bl	8001efc <HAL_GetTick>
 8002d20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d22:	e009      	b.n	8002d38 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d24:	f7ff f8ea 	bl	8001efc <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d32:	d901      	bls.n	8002d38 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e007      	b.n	8002d48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d38:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d44:	d1ee      	bne.n	8002d24 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40023800 	.word	0x40023800
 8002d54:	40007000 	.word	0x40007000

08002d58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d60:	2300      	movs	r3, #0
 8002d62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e35c      	b.n	8003428 <HAL_RCC_OscConfig+0x6d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b0f      	cmp	r3, #15
 8002d74:	d904      	bls.n	8002d80 <HAL_RCC_OscConfig+0x28>
 8002d76:	f240 1165 	movw	r1, #357	; 0x165
 8002d7a:	4892      	ldr	r0, [pc, #584]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	f7fe fb5a 	bl	8001434 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 809a 	beq.w	8002ec2 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00e      	beq.n	8002db4 <HAL_RCC_OscConfig+0x5c>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d9e:	d009      	beq.n	8002db4 <HAL_RCC_OscConfig+0x5c>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002da8:	d004      	beq.n	8002db4 <HAL_RCC_OscConfig+0x5c>
 8002daa:	f240 116b 	movw	r1, #363	; 0x16b
 8002dae:	4885      	ldr	r0, [pc, #532]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002db0:	f7fe fb40 	bl	8001434 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002db4:	4b84      	ldr	r3, [pc, #528]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 030c 	and.w	r3, r3, #12
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d00c      	beq.n	8002dda <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dc0:	4b81      	ldr	r3, [pc, #516]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 030c 	and.w	r3, r3, #12
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d112      	bne.n	8002df2 <HAL_RCC_OscConfig+0x9a>
 8002dcc:	4b7e      	ldr	r3, [pc, #504]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dd8:	d10b      	bne.n	8002df2 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dda:	4b7b      	ldr	r3, [pc, #492]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d06c      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x168>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d168      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e31a      	b.n	8003428 <HAL_RCC_OscConfig+0x6d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfa:	d106      	bne.n	8002e0a <HAL_RCC_OscConfig+0xb2>
 8002dfc:	4b72      	ldr	r3, [pc, #456]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a71      	ldr	r2, [pc, #452]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	e02e      	b.n	8002e68 <HAL_RCC_OscConfig+0x110>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10c      	bne.n	8002e2c <HAL_RCC_OscConfig+0xd4>
 8002e12:	4b6d      	ldr	r3, [pc, #436]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a6c      	ldr	r2, [pc, #432]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	4b6a      	ldr	r3, [pc, #424]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a69      	ldr	r2, [pc, #420]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	e01d      	b.n	8002e68 <HAL_RCC_OscConfig+0x110>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCC_OscConfig+0xf8>
 8002e36:	4b64      	ldr	r3, [pc, #400]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a63      	ldr	r2, [pc, #396]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	4b61      	ldr	r3, [pc, #388]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a60      	ldr	r2, [pc, #384]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e00b      	b.n	8002e68 <HAL_RCC_OscConfig+0x110>
 8002e50:	4b5d      	ldr	r3, [pc, #372]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a5c      	ldr	r2, [pc, #368]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	4b5a      	ldr	r3, [pc, #360]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a59      	ldr	r2, [pc, #356]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d013      	beq.n	8002e98 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7ff f844 	bl	8001efc <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e78:	f7ff f840 	bl	8001efc <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	; 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e2ce      	b.n	8003428 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8a:	4b4f      	ldr	r3, [pc, #316]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x120>
 8002e96:	e014      	b.n	8002ec2 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7ff f830 	bl	8001efc <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea0:	f7ff f82c 	bl	8001efc <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	; 0x64
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e2ba      	b.n	8003428 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eb2:	4b45      	ldr	r3, [pc, #276]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x148>
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 8084 	beq.w	8002fd8 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_RCC_OscConfig+0x192>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d004      	beq.n	8002eea <HAL_RCC_OscConfig+0x192>
 8002ee0:	f240 119d 	movw	r1, #413	; 0x19d
 8002ee4:	4837      	ldr	r0, [pc, #220]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002ee6:	f7fe faa5 	bl	8001434 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	2b1f      	cmp	r3, #31
 8002ef0:	d904      	bls.n	8002efc <HAL_RCC_OscConfig+0x1a4>
 8002ef2:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8002ef6:	4833      	ldr	r0, [pc, #204]	; (8002fc4 <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	f7fe fa9c 	bl	8001434 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002efc:	4b32      	ldr	r3, [pc, #200]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 030c 	and.w	r3, r3, #12
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00b      	beq.n	8002f20 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f08:	4b2f      	ldr	r3, [pc, #188]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 030c 	and.w	r3, r3, #12
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d11c      	bne.n	8002f4e <HAL_RCC_OscConfig+0x1f6>
 8002f14:	4b2c      	ldr	r3, [pc, #176]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d116      	bne.n	8002f4e <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f20:	4b29      	ldr	r3, [pc, #164]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_RCC_OscConfig+0x1e0>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e277      	b.n	8003428 <HAL_RCC_OscConfig+0x6d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f38:	4b23      	ldr	r3, [pc, #140]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4920      	ldr	r1, [pc, #128]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4c:	e044      	b.n	8002fd8 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d023      	beq.n	8002f9e <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f56:	4b1c      	ldr	r3, [pc, #112]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a1b      	ldr	r2, [pc, #108]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f62:	f7fe ffcb 	bl	8001efc <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f6a:	f7fe ffc7 	bl	8001efc <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e255      	b.n	8003428 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7c:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0f0      	beq.n	8002f6a <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f88:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	490c      	ldr	r1, [pc, #48]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	600b      	str	r3, [r1, #0]
 8002f9c:	e01c      	b.n	8002fd8 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f9e:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a09      	ldr	r2, [pc, #36]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002faa:	f7fe ffa7 	bl	8001efc <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb0:	e00c      	b.n	8002fcc <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb2:	f7fe ffa3 	bl	8001efc <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d905      	bls.n	8002fcc <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e231      	b.n	8003428 <HAL_RCC_OscConfig+0x6d0>
 8002fc4:	08006cbc 	.word	0x08006cbc
 8002fc8:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fcc:	4b7e      	ldr	r3, [pc, #504]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1ec      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d043      	beq.n	800306c <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_RCC_OscConfig+0x2a6>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d004      	beq.n	8002ffe <HAL_RCC_OscConfig+0x2a6>
 8002ff4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8002ff8:	4874      	ldr	r0, [pc, #464]	; (80031cc <HAL_RCC_OscConfig+0x474>)
 8002ffa:	f7fe fa1b 	bl	8001434 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d019      	beq.n	800303a <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003006:	4b70      	ldr	r3, [pc, #448]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300a:	4a6f      	ldr	r2, [pc, #444]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003012:	f7fe ff73 	bl	8001efc <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800301a:	f7fe ff6f 	bl	8001efc <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e1fd      	b.n	8003428 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302c:	4b66      	ldr	r3, [pc, #408]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 800302e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0f0      	beq.n	800301a <HAL_RCC_OscConfig+0x2c2>
 8003038:	e018      	b.n	800306c <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800303a:	4b63      	ldr	r3, [pc, #396]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 800303c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303e:	4a62      	ldr	r2, [pc, #392]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003046:	f7fe ff59 	bl	8001efc <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800304e:	f7fe ff55 	bl	8001efc <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e1e3      	b.n	8003428 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003060:	4b59      	ldr	r3, [pc, #356]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f0      	bne.n	800304e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80bc 	beq.w	80031f2 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00c      	beq.n	800309c <HAL_RCC_OscConfig+0x344>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d008      	beq.n	800309c <HAL_RCC_OscConfig+0x344>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b05      	cmp	r3, #5
 8003090:	d004      	beq.n	800309c <HAL_RCC_OscConfig+0x344>
 8003092:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003096:	484d      	ldr	r0, [pc, #308]	; (80031cc <HAL_RCC_OscConfig+0x474>)
 8003098:	f7fe f9cc 	bl	8001434 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800309c:	4b4a      	ldr	r3, [pc, #296]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10d      	bne.n	80030c4 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a8:	4b47      	ldr	r3, [pc, #284]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	4a46      	ldr	r2, [pc, #280]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 80030ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b2:	6413      	str	r3, [r2, #64]	; 0x40
 80030b4:	4b44      	ldr	r3, [pc, #272]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c0:	2301      	movs	r3, #1
 80030c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030c4:	4b42      	ldr	r3, [pc, #264]	; (80031d0 <HAL_RCC_OscConfig+0x478>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d118      	bne.n	8003102 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80030d0:	4b3f      	ldr	r3, [pc, #252]	; (80031d0 <HAL_RCC_OscConfig+0x478>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a3e      	ldr	r2, [pc, #248]	; (80031d0 <HAL_RCC_OscConfig+0x478>)
 80030d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030dc:	f7fe ff0e 	bl	8001efc <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e4:	f7fe ff0a 	bl	8001efc <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b64      	cmp	r3, #100	; 0x64
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e198      	b.n	8003428 <HAL_RCC_OscConfig+0x6d0>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030f6:	4b36      	ldr	r3, [pc, #216]	; (80031d0 <HAL_RCC_OscConfig+0x478>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d106      	bne.n	8003118 <HAL_RCC_OscConfig+0x3c0>
 800310a:	4b2f      	ldr	r3, [pc, #188]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 800310c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310e:	4a2e      	ldr	r2, [pc, #184]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	6713      	str	r3, [r2, #112]	; 0x70
 8003116:	e02d      	b.n	8003174 <HAL_RCC_OscConfig+0x41c>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10c      	bne.n	800313a <HAL_RCC_OscConfig+0x3e2>
 8003120:	4b29      	ldr	r3, [pc, #164]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003124:	4a28      	ldr	r2, [pc, #160]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003126:	f023 0301 	bic.w	r3, r3, #1
 800312a:	6713      	str	r3, [r2, #112]	; 0x70
 800312c:	4b26      	ldr	r3, [pc, #152]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 800312e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003130:	4a25      	ldr	r2, [pc, #148]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003132:	f023 0304 	bic.w	r3, r3, #4
 8003136:	6713      	str	r3, [r2, #112]	; 0x70
 8003138:	e01c      	b.n	8003174 <HAL_RCC_OscConfig+0x41c>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	2b05      	cmp	r3, #5
 8003140:	d10c      	bne.n	800315c <HAL_RCC_OscConfig+0x404>
 8003142:	4b21      	ldr	r3, [pc, #132]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003146:	4a20      	ldr	r2, [pc, #128]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003148:	f043 0304 	orr.w	r3, r3, #4
 800314c:	6713      	str	r3, [r2, #112]	; 0x70
 800314e:	4b1e      	ldr	r3, [pc, #120]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003152:	4a1d      	ldr	r2, [pc, #116]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	6713      	str	r3, [r2, #112]	; 0x70
 800315a:	e00b      	b.n	8003174 <HAL_RCC_OscConfig+0x41c>
 800315c:	4b1a      	ldr	r3, [pc, #104]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 800315e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003160:	4a19      	ldr	r2, [pc, #100]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003162:	f023 0301 	bic.w	r3, r3, #1
 8003166:	6713      	str	r3, [r2, #112]	; 0x70
 8003168:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	4a16      	ldr	r2, [pc, #88]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 800316e:	f023 0304 	bic.w	r3, r3, #4
 8003172:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d015      	beq.n	80031a8 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317c:	f7fe febe 	bl	8001efc <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003182:	e00a      	b.n	800319a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003184:	f7fe feba 	bl	8001efc <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e146      	b.n	8003428 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319a:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0ee      	beq.n	8003184 <HAL_RCC_OscConfig+0x42c>
 80031a6:	e01b      	b.n	80031e0 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a8:	f7fe fea8 	bl	8001efc <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ae:	e011      	b.n	80031d4 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b0:	f7fe fea4 	bl	8001efc <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d908      	bls.n	80031d4 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e130      	b.n	8003428 <HAL_RCC_OscConfig+0x6d0>
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800
 80031cc:	08006cbc 	.word	0x08006cbc
 80031d0:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d4:	4b96      	ldr	r3, [pc, #600]	; (8003430 <HAL_RCC_OscConfig+0x6d8>)
 80031d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e7      	bne.n	80031b0 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031e0:	7dfb      	ldrb	r3, [r7, #23]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d105      	bne.n	80031f2 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e6:	4b92      	ldr	r3, [pc, #584]	; (8003430 <HAL_RCC_OscConfig+0x6d8>)
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	4a91      	ldr	r2, [pc, #580]	; (8003430 <HAL_RCC_OscConfig+0x6d8>)
 80031ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00c      	beq.n	8003214 <HAL_RCC_OscConfig+0x4bc>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d008      	beq.n	8003214 <HAL_RCC_OscConfig+0x4bc>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d004      	beq.n	8003214 <HAL_RCC_OscConfig+0x4bc>
 800320a:	f44f 7113 	mov.w	r1, #588	; 0x24c
 800320e:	4889      	ldr	r0, [pc, #548]	; (8003434 <HAL_RCC_OscConfig+0x6dc>)
 8003210:	f7fe f910 	bl	8001434 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 8104 	beq.w	8003426 <HAL_RCC_OscConfig+0x6ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800321e:	4b84      	ldr	r3, [pc, #528]	; (8003430 <HAL_RCC_OscConfig+0x6d8>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b08      	cmp	r3, #8
 8003228:	f000 80c3 	beq.w	80033b2 <HAL_RCC_OscConfig+0x65a>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	2b02      	cmp	r3, #2
 8003232:	f040 80a4 	bne.w	800337e <HAL_RCC_OscConfig+0x626>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d009      	beq.n	8003252 <HAL_RCC_OscConfig+0x4fa>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003246:	d004      	beq.n	8003252 <HAL_RCC_OscConfig+0x4fa>
 8003248:	f240 2155 	movw	r1, #597	; 0x255
 800324c:	4879      	ldr	r0, [pc, #484]	; (8003434 <HAL_RCC_OscConfig+0x6dc>)
 800324e:	f7fe f8f1 	bl	8001434 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d903      	bls.n	8003262 <HAL_RCC_OscConfig+0x50a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	2b3f      	cmp	r3, #63	; 0x3f
 8003260:	d904      	bls.n	800326c <HAL_RCC_OscConfig+0x514>
 8003262:	f240 2156 	movw	r1, #598	; 0x256
 8003266:	4873      	ldr	r0, [pc, #460]	; (8003434 <HAL_RCC_OscConfig+0x6dc>)
 8003268:	f7fe f8e4 	bl	8001434 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	2b31      	cmp	r3, #49	; 0x31
 8003272:	d904      	bls.n	800327e <HAL_RCC_OscConfig+0x526>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800327c:	d904      	bls.n	8003288 <HAL_RCC_OscConfig+0x530>
 800327e:	f240 2157 	movw	r1, #599	; 0x257
 8003282:	486c      	ldr	r0, [pc, #432]	; (8003434 <HAL_RCC_OscConfig+0x6dc>)
 8003284:	f7fe f8d6 	bl	8001434 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	2b02      	cmp	r3, #2
 800328e:	d010      	beq.n	80032b2 <HAL_RCC_OscConfig+0x55a>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003294:	2b04      	cmp	r3, #4
 8003296:	d00c      	beq.n	80032b2 <HAL_RCC_OscConfig+0x55a>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	2b06      	cmp	r3, #6
 800329e:	d008      	beq.n	80032b2 <HAL_RCC_OscConfig+0x55a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d004      	beq.n	80032b2 <HAL_RCC_OscConfig+0x55a>
 80032a8:	f44f 7116 	mov.w	r1, #600	; 0x258
 80032ac:	4861      	ldr	r0, [pc, #388]	; (8003434 <HAL_RCC_OscConfig+0x6dc>)
 80032ae:	f7fe f8c1 	bl	8001434 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d903      	bls.n	80032c2 <HAL_RCC_OscConfig+0x56a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	2b0f      	cmp	r3, #15
 80032c0:	d904      	bls.n	80032cc <HAL_RCC_OscConfig+0x574>
 80032c2:	f240 2159 	movw	r1, #601	; 0x259
 80032c6:	485b      	ldr	r0, [pc, #364]	; (8003434 <HAL_RCC_OscConfig+0x6dc>)
 80032c8:	f7fe f8b4 	bl	8001434 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d903      	bls.n	80032dc <HAL_RCC_OscConfig+0x584>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	2b07      	cmp	r3, #7
 80032da:	d904      	bls.n	80032e6 <HAL_RCC_OscConfig+0x58e>
 80032dc:	f240 215b 	movw	r1, #603	; 0x25b
 80032e0:	4854      	ldr	r0, [pc, #336]	; (8003434 <HAL_RCC_OscConfig+0x6dc>)
 80032e2:	f7fe f8a7 	bl	8001434 <assert_failed>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e6:	4b52      	ldr	r3, [pc, #328]	; (8003430 <HAL_RCC_OscConfig+0x6d8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a51      	ldr	r2, [pc, #324]	; (8003430 <HAL_RCC_OscConfig+0x6d8>)
 80032ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f2:	f7fe fe03 	bl	8001efc <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x5b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fa:	f7fe fdff 	bl	8001efc <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x5b4>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e08d      	b.n	8003428 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330c:	4b48      	ldr	r3, [pc, #288]	; (8003430 <HAL_RCC_OscConfig+0x6d8>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f0      	bne.n	80032fa <HAL_RCC_OscConfig+0x5a2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69da      	ldr	r2, [r3, #28]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	019b      	lsls	r3, r3, #6
 8003328:	431a      	orrs	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332e:	085b      	lsrs	r3, r3, #1
 8003330:	3b01      	subs	r3, #1
 8003332:	041b      	lsls	r3, r3, #16
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	061b      	lsls	r3, r3, #24
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	071b      	lsls	r3, r3, #28
 8003344:	493a      	ldr	r1, [pc, #232]	; (8003430 <HAL_RCC_OscConfig+0x6d8>)
 8003346:	4313      	orrs	r3, r2
 8003348:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800334a:	4b39      	ldr	r3, [pc, #228]	; (8003430 <HAL_RCC_OscConfig+0x6d8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a38      	ldr	r2, [pc, #224]	; (8003430 <HAL_RCC_OscConfig+0x6d8>)
 8003350:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003356:	f7fe fdd1 	bl	8001efc <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x618>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335e:	f7fe fdcd 	bl	8001efc <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e05b      	b.n	8003428 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003370:	4b2f      	ldr	r3, [pc, #188]	; (8003430 <HAL_RCC_OscConfig+0x6d8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0f0      	beq.n	800335e <HAL_RCC_OscConfig+0x606>
 800337c:	e053      	b.n	8003426 <HAL_RCC_OscConfig+0x6ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337e:	4b2c      	ldr	r3, [pc, #176]	; (8003430 <HAL_RCC_OscConfig+0x6d8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a2b      	ldr	r2, [pc, #172]	; (8003430 <HAL_RCC_OscConfig+0x6d8>)
 8003384:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338a:	f7fe fdb7 	bl	8001efc <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x64c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003392:	f7fe fdb3 	bl	8001efc <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e041      	b.n	8003428 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a4:	4b22      	ldr	r3, [pc, #136]	; (8003430 <HAL_RCC_OscConfig+0x6d8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1f0      	bne.n	8003392 <HAL_RCC_OscConfig+0x63a>
 80033b0:	e039      	b.n	8003426 <HAL_RCC_OscConfig+0x6ce>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80033b2:	4b1f      	ldr	r3, [pc, #124]	; (8003430 <HAL_RCC_OscConfig+0x6d8>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d030      	beq.n	8003422 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d129      	bne.n	8003422 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d8:	429a      	cmp	r2, r3
 80033da:	d122      	bne.n	8003422 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033e2:	4013      	ands	r3, r2
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033e8:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d119      	bne.n	8003422 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f8:	085b      	lsrs	r3, r3, #1
 80033fa:	3b01      	subs	r3, #1
 80033fc:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033fe:	429a      	cmp	r2, r3
 8003400:	d10f      	bne.n	8003422 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800340e:	429a      	cmp	r2, r3
 8003410:	d107      	bne.n	8003422 <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800341e:	429a      	cmp	r2, r3
 8003420:	d001      	beq.n	8003426 <HAL_RCC_OscConfig+0x6ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <HAL_RCC_OscConfig+0x6d0>
      }
    }
  }
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40023800 	.word	0x40023800
 8003434:	08006cbc 	.word	0x08006cbc

08003438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e18c      	b.n	800376a <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_RCC_ClockConfig+0x28>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b0f      	cmp	r3, #15
 800345e:	d904      	bls.n	800346a <HAL_RCC_ClockConfig+0x32>
 8003460:	f240 21df 	movw	r1, #735	; 0x2df
 8003464:	4887      	ldr	r0, [pc, #540]	; (8003684 <HAL_RCC_ClockConfig+0x24c>)
 8003466:	f7fd ffe5 	bl	8001434 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d031      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x9c>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d02e      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x9c>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d02b      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x9c>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	2b03      	cmp	r3, #3
 8003480:	d028      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x9c>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b04      	cmp	r3, #4
 8003486:	d025      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x9c>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2b05      	cmp	r3, #5
 800348c:	d022      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x9c>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b06      	cmp	r3, #6
 8003492:	d01f      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x9c>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	2b07      	cmp	r3, #7
 8003498:	d01c      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x9c>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b08      	cmp	r3, #8
 800349e:	d019      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x9c>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	2b09      	cmp	r3, #9
 80034a4:	d016      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x9c>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b0a      	cmp	r3, #10
 80034aa:	d013      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x9c>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	2b0b      	cmp	r3, #11
 80034b0:	d010      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x9c>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b0c      	cmp	r3, #12
 80034b6:	d00d      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x9c>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	2b0d      	cmp	r3, #13
 80034bc:	d00a      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x9c>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b0e      	cmp	r3, #14
 80034c2:	d007      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x9c>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	2b0f      	cmp	r3, #15
 80034c8:	d004      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x9c>
 80034ca:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 80034ce:	486d      	ldr	r0, [pc, #436]	; (8003684 <HAL_RCC_ClockConfig+0x24c>)
 80034d0:	f7fd ffb0 	bl	8001434 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034d4:	4b6c      	ldr	r3, [pc, #432]	; (8003688 <HAL_RCC_ClockConfig+0x250>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d910      	bls.n	8003504 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e2:	4b69      	ldr	r3, [pc, #420]	; (8003688 <HAL_RCC_ClockConfig+0x250>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 020f 	bic.w	r2, r3, #15
 80034ea:	4967      	ldr	r1, [pc, #412]	; (8003688 <HAL_RCC_ClockConfig+0x250>)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f2:	4b65      	ldr	r3, [pc, #404]	; (8003688 <HAL_RCC_ClockConfig+0x250>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d001      	beq.n	8003504 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e132      	b.n	800376a <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d049      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800351c:	4b5b      	ldr	r3, [pc, #364]	; (800368c <HAL_RCC_ClockConfig+0x254>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	4a5a      	ldr	r2, [pc, #360]	; (800368c <HAL_RCC_ClockConfig+0x254>)
 8003522:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003526:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b00      	cmp	r3, #0
 8003532:	d005      	beq.n	8003540 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003534:	4b55      	ldr	r3, [pc, #340]	; (800368c <HAL_RCC_ClockConfig+0x254>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	4a54      	ldr	r2, [pc, #336]	; (800368c <HAL_RCC_ClockConfig+0x254>)
 800353a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800353e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d024      	beq.n	8003592 <HAL_RCC_ClockConfig+0x15a>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b80      	cmp	r3, #128	; 0x80
 800354e:	d020      	beq.n	8003592 <HAL_RCC_ClockConfig+0x15a>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b90      	cmp	r3, #144	; 0x90
 8003556:	d01c      	beq.n	8003592 <HAL_RCC_ClockConfig+0x15a>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	2ba0      	cmp	r3, #160	; 0xa0
 800355e:	d018      	beq.n	8003592 <HAL_RCC_ClockConfig+0x15a>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2bb0      	cmp	r3, #176	; 0xb0
 8003566:	d014      	beq.n	8003592 <HAL_RCC_ClockConfig+0x15a>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2bc0      	cmp	r3, #192	; 0xc0
 800356e:	d010      	beq.n	8003592 <HAL_RCC_ClockConfig+0x15a>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2bd0      	cmp	r3, #208	; 0xd0
 8003576:	d00c      	beq.n	8003592 <HAL_RCC_ClockConfig+0x15a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2be0      	cmp	r3, #224	; 0xe0
 800357e:	d008      	beq.n	8003592 <HAL_RCC_ClockConfig+0x15a>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2bf0      	cmp	r3, #240	; 0xf0
 8003586:	d004      	beq.n	8003592 <HAL_RCC_ClockConfig+0x15a>
 8003588:	f44f 7141 	mov.w	r1, #772	; 0x304
 800358c:	483d      	ldr	r0, [pc, #244]	; (8003684 <HAL_RCC_ClockConfig+0x24c>)
 800358e:	f7fd ff51 	bl	8001434 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003592:	4b3e      	ldr	r3, [pc, #248]	; (800368c <HAL_RCC_ClockConfig+0x254>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	493b      	ldr	r1, [pc, #236]	; (800368c <HAL_RCC_ClockConfig+0x254>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d051      	beq.n	8003654 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00c      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x19a>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d008      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x19a>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d004      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x19a>
 80035c8:	f240 310b 	movw	r1, #779	; 0x30b
 80035cc:	482d      	ldr	r0, [pc, #180]	; (8003684 <HAL_RCC_ClockConfig+0x24c>)
 80035ce:	f7fd ff31 	bl	8001434 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d107      	bne.n	80035ea <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035da:	4b2c      	ldr	r3, [pc, #176]	; (800368c <HAL_RCC_ClockConfig+0x254>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d115      	bne.n	8003612 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e0bf      	b.n	800376a <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d107      	bne.n	8003602 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f2:	4b26      	ldr	r3, [pc, #152]	; (800368c <HAL_RCC_ClockConfig+0x254>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d109      	bne.n	8003612 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e0b3      	b.n	800376a <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003602:	4b22      	ldr	r3, [pc, #136]	; (800368c <HAL_RCC_ClockConfig+0x254>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e0ab      	b.n	800376a <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003612:	4b1e      	ldr	r3, [pc, #120]	; (800368c <HAL_RCC_ClockConfig+0x254>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f023 0203 	bic.w	r2, r3, #3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	491b      	ldr	r1, [pc, #108]	; (800368c <HAL_RCC_ClockConfig+0x254>)
 8003620:	4313      	orrs	r3, r2
 8003622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003624:	f7fe fc6a 	bl	8001efc <HAL_GetTick>
 8003628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362a:	e00a      	b.n	8003642 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800362c:	f7fe fc66 	bl	8001efc <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f241 3288 	movw	r2, #5000	; 0x1388
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e093      	b.n	800376a <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003642:	4b12      	ldr	r3, [pc, #72]	; (800368c <HAL_RCC_ClockConfig+0x254>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 020c 	and.w	r2, r3, #12
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	429a      	cmp	r2, r3
 8003652:	d1eb      	bne.n	800362c <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003654:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <HAL_RCC_ClockConfig+0x250>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d216      	bcs.n	8003690 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b09      	ldr	r3, [pc, #36]	; (8003688 <HAL_RCC_ClockConfig+0x250>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 020f 	bic.w	r2, r3, #15
 800366a:	4907      	ldr	r1, [pc, #28]	; (8003688 <HAL_RCC_ClockConfig+0x250>)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b05      	ldr	r3, [pc, #20]	; (8003688 <HAL_RCC_ClockConfig+0x250>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d007      	beq.n	8003690 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e072      	b.n	800376a <HAL_RCC_ClockConfig+0x332>
 8003684:	08006cbc 	.word	0x08006cbc
 8003688:	40023c00 	.word	0x40023c00
 800368c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d025      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d018      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x29e>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ac:	d013      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x29e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80036b6:	d00e      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x29e>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80036c0:	d009      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x29e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80036ca:	d004      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x29e>
 80036cc:	f44f 7152 	mov.w	r1, #840	; 0x348
 80036d0:	4828      	ldr	r0, [pc, #160]	; (8003774 <HAL_RCC_ClockConfig+0x33c>)
 80036d2:	f7fd feaf 	bl	8001434 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d6:	4b28      	ldr	r3, [pc, #160]	; (8003778 <HAL_RCC_ClockConfig+0x340>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	4925      	ldr	r1, [pc, #148]	; (8003778 <HAL_RCC_ClockConfig+0x340>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d026      	beq.n	8003742 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d018      	beq.n	800372e <HAL_RCC_ClockConfig+0x2f6>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003704:	d013      	beq.n	800372e <HAL_RCC_ClockConfig+0x2f6>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800370e:	d00e      	beq.n	800372e <HAL_RCC_ClockConfig+0x2f6>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003718:	d009      	beq.n	800372e <HAL_RCC_ClockConfig+0x2f6>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003722:	d004      	beq.n	800372e <HAL_RCC_ClockConfig+0x2f6>
 8003724:	f240 314f 	movw	r1, #847	; 0x34f
 8003728:	4812      	ldr	r0, [pc, #72]	; (8003774 <HAL_RCC_ClockConfig+0x33c>)
 800372a:	f7fd fe83 	bl	8001434 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800372e:	4b12      	ldr	r3, [pc, #72]	; (8003778 <HAL_RCC_ClockConfig+0x340>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	490e      	ldr	r1, [pc, #56]	; (8003778 <HAL_RCC_ClockConfig+0x340>)
 800373e:	4313      	orrs	r3, r2
 8003740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003742:	f000 f821 	bl	8003788 <HAL_RCC_GetSysClockFreq>
 8003746:	4601      	mov	r1, r0
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <HAL_RCC_ClockConfig+0x340>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	4a0a      	ldr	r2, [pc, #40]	; (800377c <HAL_RCC_ClockConfig+0x344>)
 8003754:	5cd3      	ldrb	r3, [r2, r3]
 8003756:	fa21 f303 	lsr.w	r3, r1, r3
 800375a:	4a09      	ldr	r2, [pc, #36]	; (8003780 <HAL_RCC_ClockConfig+0x348>)
 800375c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800375e:	4b09      	ldr	r3, [pc, #36]	; (8003784 <HAL_RCC_ClockConfig+0x34c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe fb86 	bl	8001e74 <HAL_InitTick>

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	08006cbc 	.word	0x08006cbc
 8003778:	40023800 	.word	0x40023800
 800377c:	08006da4 	.word	0x08006da4
 8003780:	20000000 	.word	0x20000000
 8003784:	20000004 	.word	0x20000004

08003788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800378e:	2300      	movs	r3, #0
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	2300      	movs	r3, #0
 8003798:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800379a:	2300      	movs	r3, #0
 800379c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800379e:	4b50      	ldr	r3, [pc, #320]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d007      	beq.n	80037ba <HAL_RCC_GetSysClockFreq+0x32>
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d008      	beq.n	80037c0 <HAL_RCC_GetSysClockFreq+0x38>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f040 808d 	bne.w	80038ce <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037b4:	4b4b      	ldr	r3, [pc, #300]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80037b6:	60bb      	str	r3, [r7, #8]
      break;
 80037b8:	e08c      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ba:	4b4b      	ldr	r3, [pc, #300]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80037bc:	60bb      	str	r3, [r7, #8]
      break;
 80037be:	e089      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037c0:	4b47      	ldr	r3, [pc, #284]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037c8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037ca:	4b45      	ldr	r3, [pc, #276]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d023      	beq.n	800381e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037d6:	4b42      	ldr	r3, [pc, #264]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	099b      	lsrs	r3, r3, #6
 80037dc:	f04f 0400 	mov.w	r4, #0
 80037e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	ea03 0501 	and.w	r5, r3, r1
 80037ec:	ea04 0602 	and.w	r6, r4, r2
 80037f0:	4a3d      	ldr	r2, [pc, #244]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80037f2:	fb02 f106 	mul.w	r1, r2, r6
 80037f6:	2200      	movs	r2, #0
 80037f8:	fb02 f205 	mul.w	r2, r2, r5
 80037fc:	440a      	add	r2, r1
 80037fe:	493a      	ldr	r1, [pc, #232]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003800:	fba5 0101 	umull	r0, r1, r5, r1
 8003804:	1853      	adds	r3, r2, r1
 8003806:	4619      	mov	r1, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f04f 0400 	mov.w	r4, #0
 800380e:	461a      	mov	r2, r3
 8003810:	4623      	mov	r3, r4
 8003812:	f7fc fd11 	bl	8000238 <__aeabi_uldivmod>
 8003816:	4603      	mov	r3, r0
 8003818:	460c      	mov	r4, r1
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	e049      	b.n	80038b2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800381e:	4b30      	ldr	r3, [pc, #192]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	099b      	lsrs	r3, r3, #6
 8003824:	f04f 0400 	mov.w	r4, #0
 8003828:	f240 11ff 	movw	r1, #511	; 0x1ff
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	ea03 0501 	and.w	r5, r3, r1
 8003834:	ea04 0602 	and.w	r6, r4, r2
 8003838:	4629      	mov	r1, r5
 800383a:	4632      	mov	r2, r6
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	f04f 0400 	mov.w	r4, #0
 8003844:	0154      	lsls	r4, r2, #5
 8003846:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800384a:	014b      	lsls	r3, r1, #5
 800384c:	4619      	mov	r1, r3
 800384e:	4622      	mov	r2, r4
 8003850:	1b49      	subs	r1, r1, r5
 8003852:	eb62 0206 	sbc.w	r2, r2, r6
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	f04f 0400 	mov.w	r4, #0
 800385e:	0194      	lsls	r4, r2, #6
 8003860:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003864:	018b      	lsls	r3, r1, #6
 8003866:	1a5b      	subs	r3, r3, r1
 8003868:	eb64 0402 	sbc.w	r4, r4, r2
 800386c:	f04f 0100 	mov.w	r1, #0
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	00e2      	lsls	r2, r4, #3
 8003876:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800387a:	00d9      	lsls	r1, r3, #3
 800387c:	460b      	mov	r3, r1
 800387e:	4614      	mov	r4, r2
 8003880:	195b      	adds	r3, r3, r5
 8003882:	eb44 0406 	adc.w	r4, r4, r6
 8003886:	f04f 0100 	mov.w	r1, #0
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	02a2      	lsls	r2, r4, #10
 8003890:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003894:	0299      	lsls	r1, r3, #10
 8003896:	460b      	mov	r3, r1
 8003898:	4614      	mov	r4, r2
 800389a:	4618      	mov	r0, r3
 800389c:	4621      	mov	r1, r4
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f04f 0400 	mov.w	r4, #0
 80038a4:	461a      	mov	r2, r3
 80038a6:	4623      	mov	r3, r4
 80038a8:	f7fc fcc6 	bl	8000238 <__aeabi_uldivmod>
 80038ac:	4603      	mov	r3, r0
 80038ae:	460c      	mov	r4, r1
 80038b0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80038b2:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	0c1b      	lsrs	r3, r3, #16
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	3301      	adds	r3, #1
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ca:	60bb      	str	r3, [r7, #8]
      break;
 80038cc:	e002      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038ce:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80038d0:	60bb      	str	r3, [r7, #8]
      break;
 80038d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038d4:	68bb      	ldr	r3, [r7, #8]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800
 80038e4:	00f42400 	.word	0x00f42400
 80038e8:	017d7840 	.word	0x017d7840

080038ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f0:	4b03      	ldr	r3, [pc, #12]	; (8003900 <HAL_RCC_GetHCLKFreq+0x14>)
 80038f2:	681b      	ldr	r3, [r3, #0]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20000000 	.word	0x20000000

08003904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003908:	f7ff fff0 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 800390c:	4601      	mov	r1, r0
 800390e:	4b05      	ldr	r3, [pc, #20]	; (8003924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	0a9b      	lsrs	r3, r3, #10
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	4a03      	ldr	r2, [pc, #12]	; (8003928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800391a:	5cd3      	ldrb	r3, [r2, r3]
 800391c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003920:	4618      	mov	r0, r3
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40023800 	.word	0x40023800
 8003928:	08006db4 	.word	0x08006db4

0800392c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003930:	f7ff ffdc 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 8003934:	4601      	mov	r1, r0
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	0b5b      	lsrs	r3, r3, #13
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	4a03      	ldr	r2, [pc, #12]	; (8003950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003942:	5cd3      	ldrb	r3, [r2, r3]
 8003944:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003948:	4618      	mov	r0, r3
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40023800 	.word	0x40023800
 8003950:	08006db4 	.word	0x08006db4

08003954 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800395c:	2300      	movs	r3, #0
 800395e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003960:	2300      	movs	r3, #0
 8003962:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800396c:	2300      	movs	r3, #0
 800396e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	f040 809e 	bne.w	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b00      	cmp	r3, #0
 8003988:	f040 8097 	bne.w	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b00      	cmp	r3, #0
 8003996:	f040 8090 	bne.w	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f040 8089 	bne.w	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f040 8082 	bne.w	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d17b      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d175      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d16f      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d169      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d163      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d15d      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d157      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d151      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d14b      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d145      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d13f      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d139      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d133      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d12d      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d127      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d121      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d11b      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d115      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10f      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d103      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003ab2:	2174      	movs	r1, #116	; 0x74
 8003ab4:	48a2      	ldr	r0, [pc, #648]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003ab6:	f7fd fcbd 	bl	8001434 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d01f      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d008      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ad6:	d003      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003ad8:	217a      	movs	r1, #122	; 0x7a
 8003ada:	4899      	ldr	r0, [pc, #612]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003adc:	f7fd fcaa 	bl	8001434 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ae0:	4b98      	ldr	r3, [pc, #608]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	4a97      	ldr	r2, [pc, #604]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003ae6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003aea:	6093      	str	r3, [r2, #8]
 8003aec:	4b95      	ldr	r3, [pc, #596]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af4:	4993      	ldr	r1, [pc, #588]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      plli2sused = 1;
 8003b02:	2301      	movs	r3, #1
 8003b04:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d02e      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d012      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b22:	d00d      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b2c:	d008      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b36:	d003      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003b38:	218a      	movs	r1, #138	; 0x8a
 8003b3a:	4881      	ldr	r0, [pc, #516]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003b3c:	f7fd fc7a 	bl	8001434 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b40:	4b80      	ldr	r3, [pc, #512]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4e:	497d      	ldr	r1, [pc, #500]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b5e:	d101      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x210>
    {
      plli2sused = 1;
 8003b60:	2301      	movs	r3, #1
 8003b62:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      pllsaiused = 1;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d02e      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d012      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b8c:	d00d      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b96:	d008      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ba0:	d003      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003ba2:	219e      	movs	r1, #158	; 0x9e
 8003ba4:	4866      	ldr	r0, [pc, #408]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003ba6:	f7fd fc45 	bl	8001434 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003baa:	4b66      	ldr	r3, [pc, #408]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	4962      	ldr	r1, [pc, #392]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bc8:	d101      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      plli2sused = 1;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      pllsaiused = 1;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
      plli2sused = 1;
 8003be6:	2301      	movs	r3, #1
 8003be8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 8187 	beq.w	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c00:	f000 80eb 	beq.w	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c0c:	f000 80e5 	beq.w	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c14:	4a4c      	ldr	r2, [pc, #304]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	f000 80df 	beq.w	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	4a4a      	ldr	r2, [pc, #296]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	f000 80d9 	beq.w	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2c:	4a48      	ldr	r2, [pc, #288]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	f000 80d3 	beq.w	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c38:	4a46      	ldr	r2, [pc, #280]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	f000 80cd 	beq.w	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c44:	4a44      	ldr	r2, [pc, #272]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	f000 80c7 	beq.w	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	4a42      	ldr	r2, [pc, #264]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	f000 80c1 	beq.w	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	4a40      	ldr	r2, [pc, #256]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	f000 80bb 	beq.w	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	4a3e      	ldr	r2, [pc, #248]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x410>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	f000 80b5 	beq.w	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c74:	4a3c      	ldr	r2, [pc, #240]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x414>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	f000 80af 	beq.w	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c80:	4a3a      	ldr	r2, [pc, #232]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x418>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	f000 80a9 	beq.w	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8c:	4a38      	ldr	r2, [pc, #224]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	f000 80a3 	beq.w	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	4a36      	ldr	r2, [pc, #216]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	f000 809d 	beq.w	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	4a34      	ldr	r2, [pc, #208]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	f000 8097 	beq.w	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	4a32      	ldr	r2, [pc, #200]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	f000 8091 	beq.w	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbc:	4a30      	ldr	r2, [pc, #192]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	f000 808b 	beq.w	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc8:	4a2e      	ldr	r2, [pc, #184]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	f000 8085 	beq.w	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	4a2c      	ldr	r2, [pc, #176]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d07f      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	4a2b      	ldr	r2, [pc, #172]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d07a      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	4a29      	ldr	r2, [pc, #164]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d075      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	4a28      	ldr	r2, [pc, #160]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d070      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfc:	4a26      	ldr	r2, [pc, #152]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d06b      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	4a25      	ldr	r2, [pc, #148]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d066      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	4a23      	ldr	r2, [pc, #140]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d061      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	4a22      	ldr	r2, [pc, #136]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d05c      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	4a20      	ldr	r2, [pc, #128]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d057      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	4a1f      	ldr	r2, [pc, #124]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d052      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d38:	4a1d      	ldr	r2, [pc, #116]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d04d      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003d3e:	e039      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003d40:	08006cf4 	.word	0x08006cf4
 8003d44:	40023800 	.word	0x40023800
 8003d48:	00020300 	.word	0x00020300
 8003d4c:	00030300 	.word	0x00030300
 8003d50:	00040300 	.word	0x00040300
 8003d54:	00050300 	.word	0x00050300
 8003d58:	00060300 	.word	0x00060300
 8003d5c:	00070300 	.word	0x00070300
 8003d60:	00080300 	.word	0x00080300
 8003d64:	00090300 	.word	0x00090300
 8003d68:	000a0300 	.word	0x000a0300
 8003d6c:	000b0300 	.word	0x000b0300
 8003d70:	000c0300 	.word	0x000c0300
 8003d74:	000d0300 	.word	0x000d0300
 8003d78:	000e0300 	.word	0x000e0300
 8003d7c:	000f0300 	.word	0x000f0300
 8003d80:	00100300 	.word	0x00100300
 8003d84:	00110300 	.word	0x00110300
 8003d88:	00120300 	.word	0x00120300
 8003d8c:	00130300 	.word	0x00130300
 8003d90:	00140300 	.word	0x00140300
 8003d94:	00150300 	.word	0x00150300
 8003d98:	00160300 	.word	0x00160300
 8003d9c:	00170300 	.word	0x00170300
 8003da0:	00180300 	.word	0x00180300
 8003da4:	00190300 	.word	0x00190300
 8003da8:	001a0300 	.word	0x001a0300
 8003dac:	001b0300 	.word	0x001b0300
 8003db0:	001c0300 	.word	0x001c0300
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	4a44      	ldr	r2, [pc, #272]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x578>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00d      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	4a43      	ldr	r2, [pc, #268]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d008      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	4a41      	ldr	r2, [pc, #260]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d003      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003dd2:	21b9      	movs	r1, #185	; 0xb9
 8003dd4:	4840      	ldr	r0, [pc, #256]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8003dd6:	f7fd fb2d 	bl	8001434 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dda:	4b40      	ldr	r3, [pc, #256]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	4a3f      	ldr	r2, [pc, #252]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de4:	6413      	str	r3, [r2, #64]	; 0x40
 8003de6:	4b3d      	ldr	r3, [pc, #244]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dee:	60bb      	str	r3, [r7, #8]
 8003df0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003df2:	4b3b      	ldr	r3, [pc, #236]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a3a      	ldr	r2, [pc, #232]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dfe:	f7fe f87d 	bl	8001efc <HAL_GetTick>
 8003e02:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e04:	e009      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e06:	f7fe f879 	bl	8001efc <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b64      	cmp	r3, #100	; 0x64
 8003e12:	d902      	bls.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
      {
        return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	f000 be00 	b.w	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e1a:	4b31      	ldr	r3, [pc, #196]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0ef      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e26:	4b2d      	ldr	r3, [pc, #180]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d036      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d02f      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e44:	4b25      	ldr	r3, [pc, #148]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e4e:	4b23      	ldr	r3, [pc, #140]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	4a22      	ldr	r2, [pc, #136]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e58:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e5a:	4b20      	ldr	r3, [pc, #128]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5e:	4a1f      	ldr	r2, [pc, #124]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e66:	4a1d      	ldr	r2, [pc, #116]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e6c:	4b1b      	ldr	r3, [pc, #108]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d115      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x550>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7fe f840 	bl	8001efc <HAL_GetTick>
 8003e7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7e:	e00b      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x544>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e80:	f7fe f83c 	bl	8001efc <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d902      	bls.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x544>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	f000 bdc1 	b.w	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x10c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e98:	4b10      	ldr	r3, [pc, #64]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0ed      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eb0:	d11a      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003eb2:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ebe:	4b09      	ldr	r3, [pc, #36]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8003ec0:	400b      	ands	r3, r1
 8003ec2:	4906      	ldr	r1, [pc, #24]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	608b      	str	r3, [r1, #8]
 8003ec8:	e014      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 8003eca:	bf00      	nop
 8003ecc:	001d0300 	.word	0x001d0300
 8003ed0:	001e0300 	.word	0x001e0300
 8003ed4:	001f0300 	.word	0x001f0300
 8003ed8:	08006cf4 	.word	0x08006cf4
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	40007000 	.word	0x40007000
 8003ee4:	0ffffcff 	.word	0x0ffffcff
 8003ee8:	4ba7      	ldr	r3, [pc, #668]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	4aa6      	ldr	r2, [pc, #664]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003eee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ef2:	6093      	str	r3, [r2, #8]
 8003ef4:	4ba4      	ldr	r3, [pc, #656]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ef6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f00:	49a1      	ldr	r1, [pc, #644]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0310 	and.w	r3, r3, #16
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d01d      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d008      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f22:	d003      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 8003f24:	21f3      	movs	r1, #243	; 0xf3
 8003f26:	4899      	ldr	r0, [pc, #612]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003f28:	f7fd fa84 	bl	8001434 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f2c:	4b96      	ldr	r3, [pc, #600]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f32:	4a95      	ldr	r2, [pc, #596]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f38:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f3c:	4b92      	ldr	r3, [pc, #584]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f3e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f46:	4990      	ldr	r1, [pc, #576]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d01c      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00d      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x62a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f6a:	d008      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x62a>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f74:	d003      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x62a>
 8003f76:	21fd      	movs	r1, #253	; 0xfd
 8003f78:	4884      	ldr	r0, [pc, #528]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003f7a:	f7fd fa5b 	bl	8001434 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f7e:	4b82      	ldr	r3, [pc, #520]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f8c:	497e      	ldr	r1, [pc, #504]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d01d      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00e      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fb0:	d009      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fb6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003fba:	d004      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003fbc:	f240 1107 	movw	r1, #263	; 0x107
 8003fc0:	4872      	ldr	r0, [pc, #456]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003fc2:	f7fd fa37 	bl	8001434 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fc6:	4b70      	ldr	r3, [pc, #448]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fcc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fd4:	496c      	ldr	r1, [pc, #432]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d01d      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00e      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ff4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ff8:	d009      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ffe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004002:	d004      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8004004:	f240 1111 	movw	r1, #273	; 0x111
 8004008:	4860      	ldr	r0, [pc, #384]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800400a:	f7fd fa13 	bl	8001434 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800400e:	4b5e      	ldr	r3, [pc, #376]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004014:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800401c:	495a      	ldr	r1, [pc, #360]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01d      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x718>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00e      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x702>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004040:	d009      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x702>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004046:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800404a:	d004      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x702>
 800404c:	f240 111b 	movw	r1, #283	; 0x11b
 8004050:	484e      	ldr	r0, [pc, #312]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004052:	f7fd f9ef 	bl	8001434 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004056:	4b4c      	ldr	r3, [pc, #304]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004064:	4948      	ldr	r1, [pc, #288]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004074:	2b00      	cmp	r3, #0
 8004076:	d01f      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x764>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407c:	2b00      	cmp	r3, #0
 800407e:	d010      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004084:	2b01      	cmp	r3, #1
 8004086:	d00c      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408c:	2b03      	cmp	r3, #3
 800408e:	d008      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004094:	2b02      	cmp	r3, #2
 8004096:	d004      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004098:	f240 1125 	movw	r1, #293	; 0x125
 800409c:	483b      	ldr	r0, [pc, #236]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800409e:	f7fd f9c9 	bl	8001434 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040a2:	4b39      	ldr	r3, [pc, #228]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a8:	f023 0203 	bic.w	r2, r3, #3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b0:	4935      	ldr	r1, [pc, #212]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01f      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d010      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d00c      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d8:	2b0c      	cmp	r3, #12
 80040da:	d008      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d004      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80040e4:	f240 112f 	movw	r1, #303	; 0x12f
 80040e8:	4828      	ldr	r0, [pc, #160]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80040ea:	f7fd f9a3 	bl	8001434 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040ee:	4b26      	ldr	r3, [pc, #152]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f4:	f023 020c 	bic.w	r2, r3, #12
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040fc:	4922      	ldr	r1, [pc, #136]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410c:	2b00      	cmp	r3, #0
 800410e:	d01f      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004114:	2b00      	cmp	r3, #0
 8004116:	d010      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800411c:	2b10      	cmp	r3, #16
 800411e:	d00c      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004124:	2b30      	cmp	r3, #48	; 0x30
 8004126:	d008      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412c:	2b20      	cmp	r3, #32
 800412e:	d004      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8004130:	f240 1139 	movw	r1, #313	; 0x139
 8004134:	4815      	ldr	r0, [pc, #84]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004136:	f7fd f97d 	bl	8001434 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800413a:	4b13      	ldr	r3, [pc, #76]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800413c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004140:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004148:	490f      	ldr	r1, [pc, #60]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004158:	2b00      	cmp	r3, #0
 800415a:	d024      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004160:	2b00      	cmp	r3, #0
 8004162:	d015      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004168:	2b40      	cmp	r3, #64	; 0x40
 800416a:	d011      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004170:	2bc0      	cmp	r3, #192	; 0xc0
 8004172:	d00d      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004178:	2b80      	cmp	r3, #128	; 0x80
 800417a:	d009      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800417c:	f240 1143 	movw	r1, #323	; 0x143
 8004180:	4802      	ldr	r0, [pc, #8]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004182:	f7fd f957 	bl	8001434 <assert_failed>
 8004186:	e003      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004188:	40023800 	.word	0x40023800
 800418c:	08006cf4 	.word	0x08006cf4

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004190:	4bae      	ldr	r3, [pc, #696]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004196:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800419e:	49ab      	ldr	r1, [pc, #684]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d022      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d013      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c2:	d00e      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041cc:	d009      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d6:	d004      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 80041d8:	f240 114d 	movw	r1, #333	; 0x14d
 80041dc:	489c      	ldr	r0, [pc, #624]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80041de:	f7fd f929 	bl	8001434 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041e2:	4b9a      	ldr	r3, [pc, #616]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80041e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f0:	4996      	ldr	r1, [pc, #600]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004200:	2b00      	cmp	r3, #0
 8004202:	d022      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004208:	2b00      	cmp	r3, #0
 800420a:	d013      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004214:	d00e      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800421e:	d009      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004228:	d004      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 800422a:	f240 1157 	movw	r1, #343	; 0x157
 800422e:	4888      	ldr	r0, [pc, #544]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004230:	f7fd f900 	bl	8001434 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004234:	4b85      	ldr	r3, [pc, #532]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004242:	4982      	ldr	r1, [pc, #520]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d022      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425a:	2b00      	cmp	r3, #0
 800425c:	d013      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x932>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004266:	d00e      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x932>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004270:	d009      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x932>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800427a:	d004      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x932>
 800427c:	f240 1161 	movw	r1, #353	; 0x161
 8004280:	4873      	ldr	r0, [pc, #460]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004282:	f7fd f8d7 	bl	8001434 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004286:	4b71      	ldr	r3, [pc, #452]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004294:	496d      	ldr	r1, [pc, #436]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004296:	4313      	orrs	r3, r2
 8004298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d022      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d013      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042b8:	d00e      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042c2:	d009      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042cc:	d004      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80042ce:	f240 116b 	movw	r1, #363	; 0x16b
 80042d2:	485f      	ldr	r0, [pc, #380]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80042d4:	f7fd f8ae 	bl	8001434 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80042d8:	4b5c      	ldr	r3, [pc, #368]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80042da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e6:	4959      	ldr	r1, [pc, #356]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d018      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x9d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004302:	d008      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004308:	2b00      	cmp	r3, #0
 800430a:	d004      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800430c:	f240 1175 	movw	r1, #373	; 0x175
 8004310:	484f      	ldr	r0, [pc, #316]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004312:	f7fd f88f 	bl	8001434 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004316:	4b4d      	ldr	r3, [pc, #308]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004324:	4949      	ldr	r1, [pc, #292]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d01f      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800433c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004340:	d008      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004346:	2b00      	cmp	r3, #0
 8004348:	d004      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800434a:	f240 117f 	movw	r1, #383	; 0x17f
 800434e:	4840      	ldr	r0, [pc, #256]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004350:	f7fd f870 	bl	8001434 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004354:	4b3d      	ldr	r3, [pc, #244]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004362:	493a      	ldr	r1, [pc, #232]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800436e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004372:	d101      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      pllsaiused = 1;
 8004374:	2301      	movs	r3, #1
 8004376:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    pllsaiused = 1;
 8004384:	2301      	movs	r3, #1
 8004386:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d022      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xa86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004398:	2b00      	cmp	r3, #0
 800439a:	d013      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043a4:	d00e      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043ae:	d009      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043b8:	d004      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80043ba:	f240 1197 	movw	r1, #407	; 0x197
 80043be:	4824      	ldr	r0, [pc, #144]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80043c0:	f7fd f838 	bl	8001434 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043c4:	4b21      	ldr	r3, [pc, #132]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80043c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d2:	491e      	ldr	r1, [pc, #120]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d01b      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xaca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043f0:	d009      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d004      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80043fc:	f240 11a1 	movw	r1, #417	; 0x1a1
 8004400:	4813      	ldr	r0, [pc, #76]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004402:	f7fd f817 	bl	8001434 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004406:	4b11      	ldr	r3, [pc, #68]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004416:	490d      	ldr	r1, [pc, #52]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d020      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004434:	d00e      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800443c:	2b00      	cmp	r3, #0
 800443e:	d009      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8004440:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8004444:	4802      	ldr	r0, [pc, #8]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004446:	f7fc fff5 	bl	8001434 <assert_failed>
 800444a:	e003      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 800444c:	40023800 	.word	0x40023800
 8004450:	08006cf4 	.word	0x08006cf4

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004454:	4b35      	ldr	r3, [pc, #212]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004464:	4931      	ldr	r1, [pc, #196]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004466:	4313      	orrs	r3, r2
 8004468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d01b      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004488:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800448c:	d004      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 800448e:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8004492:	4827      	ldr	r0, [pc, #156]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004494:	f7fc ffce 	bl	8001434 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004498:	4b24      	ldr	r3, [pc, #144]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800449a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800449e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a8:	4920      	ldr	r1, [pc, #128]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01b      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00a      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044d0:	d004      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80044d2:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80044d6:	4816      	ldr	r0, [pc, #88]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80044d8:	f7fc ffac 	bl	8001434 <assert_failed>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80044dc:	4b13      	ldr	r3, [pc, #76]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80044de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ec:	490f      	ldr	r1, [pc, #60]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d005      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004502:	f040 8153 	bne.w	80047ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004506:	4b09      	ldr	r3, [pc, #36]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a08      	ldr	r2, [pc, #32]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800450c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004510:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004512:	f7fd fcf3 	bl	8001efc <HAL_GetTick>
 8004516:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004518:	e00c      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800451a:	f7fd fcef 	bl	8001efc <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b64      	cmp	r3, #100	; 0x64
 8004526:	d905      	bls.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e276      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 800452c:	40023800 	.word	0x40023800
 8004530:	08006cf4 	.word	0x08006cf4
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004534:	4ba9      	ldr	r3, [pc, #676]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1ec      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xbc6>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b31      	cmp	r3, #49	; 0x31
 8004546:	d904      	bls.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004550:	d904      	bls.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004552:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8004556:	48a2      	ldr	r0, [pc, #648]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004558:	f7fc ff6c 	bl	8001434 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d02e      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456c:	2b00      	cmp	r3, #0
 800456e:	d12a      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d903      	bls.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2b07      	cmp	r3, #7
 800457e:	d904      	bls.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8004580:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8004584:	4896      	ldr	r0, [pc, #600]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004586:	f7fc ff55 	bl	8001434 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800458a:	4b94      	ldr	r3, [pc, #592]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800458c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004590:	0c1b      	lsrs	r3, r3, #16
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004598:	4b90      	ldr	r3, [pc, #576]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800459a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800459e:	0e1b      	lsrs	r3, r3, #24
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	019a      	lsls	r2, r3, #6
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	041b      	lsls	r3, r3, #16
 80045b0:	431a      	orrs	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	061b      	lsls	r3, r3, #24
 80045b6:	431a      	orrs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	071b      	lsls	r3, r3, #28
 80045be:	4987      	ldr	r1, [pc, #540]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d004      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xc88>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045da:	d00a      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d048      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xd26>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045f0:	d143      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d903      	bls.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xcae>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	2b0f      	cmp	r3, #15
 8004600:	d904      	bls.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 8004602:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8004606:	4876      	ldr	r0, [pc, #472]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004608:	f7fc ff14 	bl	8001434 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	2b20      	cmp	r3, #32
 800461a:	d904      	bls.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 800461c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004620:	486f      	ldr	r0, [pc, #444]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004622:	f7fc ff07 	bl	8001434 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004626:	4b6d      	ldr	r3, [pc, #436]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800462c:	0c1b      	lsrs	r3, r3, #16
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004634:	4b69      	ldr	r3, [pc, #420]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800463a:	0f1b      	lsrs	r3, r3, #28
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	019a      	lsls	r2, r3, #6
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	041b      	lsls	r3, r3, #16
 800464c:	431a      	orrs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	061b      	lsls	r3, r3, #24
 8004654:	431a      	orrs	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	071b      	lsls	r3, r3, #28
 800465a:	4960      	ldr	r1, [pc, #384]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800465c:	4313      	orrs	r3, r2
 800465e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004662:	4b5e      	ldr	r3, [pc, #376]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004668:	f023 021f 	bic.w	r2, r3, #31
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	3b01      	subs	r3, #1
 8004672:	495a      	ldr	r1, [pc, #360]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004674:	4313      	orrs	r3, r2
 8004676:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d032      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xd98>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d010      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d00c      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b02      	cmp	r3, #2
 800469c:	d008      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	d004      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 80046a6:	f240 2107 	movw	r1, #519	; 0x207
 80046aa:	484d      	ldr	r0, [pc, #308]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80046ac:	f7fc fec2 	bl	8001434 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046b0:	4b4a      	ldr	r3, [pc, #296]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80046b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b6:	0e1b      	lsrs	r3, r3, #24
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046be:	4b47      	ldr	r3, [pc, #284]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80046c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046c4:	0f1b      	lsrs	r3, r3, #28
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	019a      	lsls	r2, r3, #6
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	041b      	lsls	r3, r3, #16
 80046d8:	431a      	orrs	r2, r3
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	061b      	lsls	r3, r3, #24
 80046de:	431a      	orrs	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	071b      	lsls	r3, r3, #28
 80046e4:	493d      	ldr	r1, [pc, #244]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d040      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xe26>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d010      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d00c      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	2b02      	cmp	r3, #2
 800470e:	d008      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	2b03      	cmp	r3, #3
 8004716:	d004      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004718:	f240 2116 	movw	r1, #534	; 0x216
 800471c:	4830      	ldr	r0, [pc, #192]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 800471e:	f7fc fe89 	bl	8001434 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d903      	bls.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	2b07      	cmp	r3, #7
 8004730:	d904      	bls.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xde8>
 8004732:	f240 2117 	movw	r1, #535	; 0x217
 8004736:	482a      	ldr	r0, [pc, #168]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004738:	f7fc fe7c 	bl	8001434 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d903      	bls.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	2b0f      	cmp	r3, #15
 800474a:	d904      	bls.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xe02>
 800474c:	f44f 7106 	mov.w	r1, #536	; 0x218
 8004750:	4823      	ldr	r0, [pc, #140]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004752:	f7fc fe6f 	bl	8001434 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	019a      	lsls	r2, r3, #6
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	041b      	lsls	r3, r3, #16
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	061b      	lsls	r3, r3, #24
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	071b      	lsls	r3, r3, #28
 8004772:	491a      	ldr	r1, [pc, #104]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004774:	4313      	orrs	r3, r2
 8004776:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800477a:	4b18      	ldr	r3, [pc, #96]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a17      	ldr	r2, [pc, #92]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004780:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004784:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004786:	f7fd fbb9 	bl	8001efc <HAL_GetTick>
 800478a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800478c:	e008      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800478e:	f7fd fbb5 	bl	8001efc <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b64      	cmp	r3, #100	; 0x64
 800479a:	d901      	bls.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e13c      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047a0:	4b0e      	ldr	r3, [pc, #56]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0f0      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	f040 8132 	bne.w	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80047b4:	4b09      	ldr	r3, [pc, #36]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a08      	ldr	r2, [pc, #32]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80047ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c0:	f7fd fb9c 	bl	8001efc <HAL_GetTick>
 80047c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047c6:	e00d      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xe90>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047c8:	f7fd fb98 	bl	8001efc <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b64      	cmp	r3, #100	; 0x64
 80047d4:	d906      	bls.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xe90>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e11f      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 80047da:	bf00      	nop
 80047dc:	40023800 	.word	0x40023800
 80047e0:	08006cf4 	.word	0x08006cf4
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047e4:	4b8f      	ldr	r3, [pc, #572]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047f0:	d0ea      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	2b31      	cmp	r3, #49	; 0x31
 80047f8:	d904      	bls.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xeb0>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004802:	d904      	bls.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xeba>
 8004804:	f240 2146 	movw	r1, #582	; 0x246
 8004808:	4887      	ldr	r0, [pc, #540]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 800480a:	f7fc fe13 	bl	8001434 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xece>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481e:	2b00      	cmp	r3, #0
 8004820:	d009      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xee2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800482a:	2b00      	cmp	r3, #0
 800482c:	d048      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	2b00      	cmp	r3, #0
 8004834:	d144      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d903      	bls.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xef2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	2b0f      	cmp	r3, #15
 8004844:	d904      	bls.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xefc>
 8004846:	f240 214d 	movw	r1, #589	; 0x24d
 800484a:	4877      	ldr	r0, [pc, #476]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 800484c:	f7fc fdf2 	bl	8001434 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485c:	2b20      	cmp	r3, #32
 800485e:	d904      	bls.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004860:	f240 214f 	movw	r1, #591	; 0x24f
 8004864:	4870      	ldr	r0, [pc, #448]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004866:	f7fc fde5 	bl	8001434 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800486a:	4b6e      	ldr	r3, [pc, #440]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800486c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004870:	0c1b      	lsrs	r3, r3, #16
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004878:	4b6a      	ldr	r3, [pc, #424]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800487a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487e:	0f1b      	lsrs	r3, r3, #28
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	019a      	lsls	r2, r3, #6
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	041b      	lsls	r3, r3, #16
 8004890:	431a      	orrs	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	061b      	lsls	r3, r3, #24
 8004898:	431a      	orrs	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	071b      	lsls	r3, r3, #28
 800489e:	4961      	ldr	r1, [pc, #388]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80048a6:	4b5f      	ldr	r3, [pc, #380]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80048a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	3b01      	subs	r3, #1
 80048b6:	021b      	lsls	r3, r3, #8
 80048b8:	495a      	ldr	r1, [pc, #360]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d037      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048d4:	d132      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d010      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d00c      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d008      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d004      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 80048f6:	f240 2162 	movw	r1, #610	; 0x262
 80048fa:	484b      	ldr	r0, [pc, #300]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 80048fc:	f7fc fd9a 	bl	8001434 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004900:	4b48      	ldr	r3, [pc, #288]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004906:	0e1b      	lsrs	r3, r3, #24
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800490e:	4b45      	ldr	r3, [pc, #276]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004914:	0f1b      	lsrs	r3, r3, #28
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	019a      	lsls	r2, r3, #6
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	041b      	lsls	r3, r3, #16
 8004928:	431a      	orrs	r2, r3
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	061b      	lsls	r3, r3, #24
 800492e:	431a      	orrs	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	071b      	lsls	r3, r3, #28
 8004934:	493b      	ldr	r1, [pc, #236]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0308 	and.w	r3, r3, #8
 8004944:	2b00      	cmp	r3, #0
 8004946:	d04d      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1090>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d903      	bls.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x1004>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	69db      	ldr	r3, [r3, #28]
 8004954:	2b07      	cmp	r3, #7
 8004956:	d904      	bls.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x100e>
 8004958:	f240 2171 	movw	r1, #625	; 0x271
 800495c:	4832      	ldr	r0, [pc, #200]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 800495e:	f7fc fd69 	bl	8001434 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004966:	2b00      	cmp	r3, #0
 8004968:	d013      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004972:	d00e      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800497c:	d009      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004982:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004986:	d004      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8004988:	f240 2172 	movw	r1, #626	; 0x272
 800498c:	4826      	ldr	r0, [pc, #152]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 800498e:	f7fc fd51 	bl	8001434 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004992:	4b24      	ldr	r3, [pc, #144]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004998:	0e1b      	lsrs	r3, r3, #24
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049a0:	4b20      	ldr	r3, [pc, #128]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a6:	0c1b      	lsrs	r3, r3, #16
 80049a8:	f003 0303 	and.w	r3, r3, #3
 80049ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	019a      	lsls	r2, r3, #6
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	041b      	lsls	r3, r3, #16
 80049b8:	431a      	orrs	r2, r3
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	061b      	lsls	r3, r3, #24
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	071b      	lsls	r3, r3, #28
 80049c6:	4917      	ldr	r1, [pc, #92]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80049ce:	4b15      	ldr	r3, [pc, #84]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80049d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049dc:	4911      	ldr	r1, [pc, #68]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80049e4:	4b0f      	ldr	r3, [pc, #60]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a0e      	ldr	r2, [pc, #56]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80049ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f0:	f7fd fa84 	bl	8001efc <HAL_GetTick>
 80049f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049f6:	e008      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049f8:	f7fd fa80 	bl	8001efc <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b64      	cmp	r3, #100	; 0x64
 8004a04:	d901      	bls.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e007      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a0a:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a16:	d1ef      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
      }
    }
  }
  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3720      	adds	r7, #32
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40023800 	.word	0x40023800
 8004a28:	08006cf4 	.word	0x08006cf4

08004a2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e199      	b.n	8004d72 <HAL_SPI_Init+0x346>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a94      	ldr	r2, [pc, #592]	; (8004c94 <HAL_SPI_Init+0x268>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d01d      	beq.n	8004a84 <HAL_SPI_Init+0x58>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a92      	ldr	r2, [pc, #584]	; (8004c98 <HAL_SPI_Init+0x26c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d018      	beq.n	8004a84 <HAL_SPI_Init+0x58>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a91      	ldr	r2, [pc, #580]	; (8004c9c <HAL_SPI_Init+0x270>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d013      	beq.n	8004a84 <HAL_SPI_Init+0x58>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a8f      	ldr	r2, [pc, #572]	; (8004ca0 <HAL_SPI_Init+0x274>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d00e      	beq.n	8004a84 <HAL_SPI_Init+0x58>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a8e      	ldr	r2, [pc, #568]	; (8004ca4 <HAL_SPI_Init+0x278>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d009      	beq.n	8004a84 <HAL_SPI_Init+0x58>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a8c      	ldr	r2, [pc, #560]	; (8004ca8 <HAL_SPI_Init+0x27c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d004      	beq.n	8004a84 <HAL_SPI_Init+0x58>
 8004a7a:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004a7e:	488b      	ldr	r0, [pc, #556]	; (8004cac <HAL_SPI_Init+0x280>)
 8004a80:	f7fc fcd8 	bl	8001434 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d009      	beq.n	8004aa0 <HAL_SPI_Init+0x74>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a94:	d004      	beq.n	8004aa0 <HAL_SPI_Init+0x74>
 8004a96:	f240 1145 	movw	r1, #325	; 0x145
 8004a9a:	4884      	ldr	r0, [pc, #528]	; (8004cac <HAL_SPI_Init+0x280>)
 8004a9c:	f7fc fcca 	bl	8001434 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00e      	beq.n	8004ac6 <HAL_SPI_Init+0x9a>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab0:	d009      	beq.n	8004ac6 <HAL_SPI_Init+0x9a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aba:	d004      	beq.n	8004ac6 <HAL_SPI_Init+0x9a>
 8004abc:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004ac0:	487a      	ldr	r0, [pc, #488]	; (8004cac <HAL_SPI_Init+0x280>)
 8004ac2:	f7fc fcb7 	bl	8001434 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004ace:	d040      	beq.n	8004b52 <HAL_SPI_Init+0x126>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8004ad8:	d03b      	beq.n	8004b52 <HAL_SPI_Init+0x126>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004ae2:	d036      	beq.n	8004b52 <HAL_SPI_Init+0x126>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004aec:	d031      	beq.n	8004b52 <HAL_SPI_Init+0x126>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004af6:	d02c      	beq.n	8004b52 <HAL_SPI_Init+0x126>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004b00:	d027      	beq.n	8004b52 <HAL_SPI_Init+0x126>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004b0a:	d022      	beq.n	8004b52 <HAL_SPI_Init+0x126>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b14:	d01d      	beq.n	8004b52 <HAL_SPI_Init+0x126>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b1e:	d018      	beq.n	8004b52 <HAL_SPI_Init+0x126>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b28:	d013      	beq.n	8004b52 <HAL_SPI_Init+0x126>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004b32:	d00e      	beq.n	8004b52 <HAL_SPI_Init+0x126>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b3c:	d009      	beq.n	8004b52 <HAL_SPI_Init+0x126>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b46:	d004      	beq.n	8004b52 <HAL_SPI_Init+0x126>
 8004b48:	f240 1147 	movw	r1, #327	; 0x147
 8004b4c:	4857      	ldr	r0, [pc, #348]	; (8004cac <HAL_SPI_Init+0x280>)
 8004b4e:	f7fc fc71 	bl	8001434 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b5a:	d00d      	beq.n	8004b78 <HAL_SPI_Init+0x14c>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d009      	beq.n	8004b78 <HAL_SPI_Init+0x14c>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b6c:	d004      	beq.n	8004b78 <HAL_SPI_Init+0x14c>
 8004b6e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004b72:	484e      	ldr	r0, [pc, #312]	; (8004cac <HAL_SPI_Init+0x280>)
 8004b74:	f7fc fc5e 	bl	8001434 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d008      	beq.n	8004b92 <HAL_SPI_Init+0x166>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d004      	beq.n	8004b92 <HAL_SPI_Init+0x166>
 8004b88:	f240 1149 	movw	r1, #329	; 0x149
 8004b8c:	4847      	ldr	r0, [pc, #284]	; (8004cac <HAL_SPI_Init+0x280>)
 8004b8e:	f7fc fc51 	bl	8001434 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d020      	beq.n	8004bdc <HAL_SPI_Init+0x1b0>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d01c      	beq.n	8004bdc <HAL_SPI_Init+0x1b0>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	2b10      	cmp	r3, #16
 8004ba8:	d018      	beq.n	8004bdc <HAL_SPI_Init+0x1b0>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	2b18      	cmp	r3, #24
 8004bb0:	d014      	beq.n	8004bdc <HAL_SPI_Init+0x1b0>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d010      	beq.n	8004bdc <HAL_SPI_Init+0x1b0>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	2b28      	cmp	r3, #40	; 0x28
 8004bc0:	d00c      	beq.n	8004bdc <HAL_SPI_Init+0x1b0>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	2b30      	cmp	r3, #48	; 0x30
 8004bc8:	d008      	beq.n	8004bdc <HAL_SPI_Init+0x1b0>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	2b38      	cmp	r3, #56	; 0x38
 8004bd0:	d004      	beq.n	8004bdc <HAL_SPI_Init+0x1b0>
 8004bd2:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004bd6:	4835      	ldr	r0, [pc, #212]	; (8004cac <HAL_SPI_Init+0x280>)
 8004bd8:	f7fc fc2c 	bl	8001434 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d008      	beq.n	8004bf6 <HAL_SPI_Init+0x1ca>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	2b80      	cmp	r3, #128	; 0x80
 8004bea:	d004      	beq.n	8004bf6 <HAL_SPI_Init+0x1ca>
 8004bec:	f240 114b 	movw	r1, #331	; 0x14b
 8004bf0:	482e      	ldr	r0, [pc, #184]	; (8004cac <HAL_SPI_Init+0x280>)
 8004bf2:	f7fc fc1f 	bl	8001434 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d008      	beq.n	8004c10 <HAL_SPI_Init+0x1e4>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	2b10      	cmp	r3, #16
 8004c04:	d004      	beq.n	8004c10 <HAL_SPI_Init+0x1e4>
 8004c06:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004c0a:	4828      	ldr	r0, [pc, #160]	; (8004cac <HAL_SPI_Init+0x280>)
 8004c0c:	f7fc fc12 	bl	8001434 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d119      	bne.n	8004c4c <HAL_SPI_Init+0x220>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d008      	beq.n	8004c32 <HAL_SPI_Init+0x206>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d004      	beq.n	8004c32 <HAL_SPI_Init+0x206>
 8004c28:	f240 114f 	movw	r1, #335	; 0x14f
 8004c2c:	481f      	ldr	r0, [pc, #124]	; (8004cac <HAL_SPI_Init+0x280>)
 8004c2e:	f7fc fc01 	bl	8001434 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d008      	beq.n	8004c4c <HAL_SPI_Init+0x220>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d004      	beq.n	8004c4c <HAL_SPI_Init+0x220>
 8004c42:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004c46:	4819      	ldr	r0, [pc, #100]	; (8004cac <HAL_SPI_Init+0x280>)
 8004c48:	f7fc fbf4 	bl	8001434 <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d106      	bne.n	8004c6c <HAL_SPI_Init+0x240>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fc fd26 	bl	80016b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c8c:	d910      	bls.n	8004cb0 <HAL_SPI_Init+0x284>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	e010      	b.n	8004cb6 <HAL_SPI_Init+0x28a>
 8004c94:	40013000 	.word	0x40013000
 8004c98:	40003800 	.word	0x40003800
 8004c9c:	40003c00 	.word	0x40003c00
 8004ca0:	40013400 	.word	0x40013400
 8004ca4:	40015000 	.word	0x40015000
 8004ca8:	40015400 	.word	0x40015400
 8004cac:	08006d30 	.word	0x08006d30
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cb4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004cbe:	d007      	beq.n	8004cd0 <HAL_SPI_Init+0x2a4>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cc8:	d002      	beq.n	8004cd0 <HAL_SPI_Init+0x2a4>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10b      	bne.n	8004cf0 <HAL_SPI_Init+0x2c4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ce0:	d903      	bls.n	8004cea <HAL_SPI_Init+0x2be>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	631a      	str	r2, [r3, #48]	; 0x30
 8004ce8:	e002      	b.n	8004cf0 <HAL_SPI_Init+0x2c4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	431a      	orrs	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	ea42 0103 	orr.w	r1, r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	0c1b      	lsrs	r3, r3, #16
 8004d30:	f003 0204 	and.w	r2, r3, #4
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	ea42 0103 	orr.w	r1, r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69da      	ldr	r2, [r3, #28]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop

08004d7c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d009      	beq.n	8004dac <HAL_SPI_Transmit+0x30>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004da0:	d004      	beq.n	8004dac <HAL_SPI_Transmit+0x30>
 8004da2:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8004da6:	4895      	ldr	r0, [pc, #596]	; (8004ffc <HAL_SPI_Transmit+0x280>)
 8004da8:	f7fc fb44 	bl	8001434 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d101      	bne.n	8004dba <HAL_SPI_Transmit+0x3e>
 8004db6:	2302      	movs	r3, #2
 8004db8:	e152      	b.n	8005060 <HAL_SPI_Transmit+0x2e4>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dc2:	f7fd f89b 	bl	8001efc <HAL_GetTick>
 8004dc6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004dc8:	88fb      	ldrh	r3, [r7, #6]
 8004dca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d002      	beq.n	8004dde <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8004dd8:	2302      	movs	r3, #2
 8004dda:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ddc:	e137      	b.n	800504e <HAL_SPI_Transmit+0x2d2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <HAL_SPI_Transmit+0x6e>
 8004de4:	88fb      	ldrh	r3, [r7, #6]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d102      	bne.n	8004df0 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004dee:	e12e      	b.n	800504e <HAL_SPI_Transmit+0x2d2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2203      	movs	r2, #3
 8004df4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	88fa      	ldrh	r2, [r7, #6]
 8004e08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	88fa      	ldrh	r2, [r7, #6]
 8004e0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e3a:	d107      	bne.n	8004e4c <HAL_SPI_Transmit+0xd0>
  {
    SPI_1LINE_TX(hspi);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e56:	2b40      	cmp	r3, #64	; 0x40
 8004e58:	d007      	beq.n	8004e6a <HAL_SPI_Transmit+0xee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e72:	d94b      	bls.n	8004f0c <HAL_SPI_Transmit+0x190>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <HAL_SPI_Transmit+0x106>
 8004e7c:	8afb      	ldrh	r3, [r7, #22]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d13e      	bne.n	8004f00 <HAL_SPI_Transmit+0x184>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	881a      	ldrh	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	1c9a      	adds	r2, r3, #2
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ea6:	e02b      	b.n	8004f00 <HAL_SPI_Transmit+0x184>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d112      	bne.n	8004edc <HAL_SPI_Transmit+0x160>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	881a      	ldrh	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec6:	1c9a      	adds	r2, r3, #2
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004eda:	e011      	b.n	8004f00 <HAL_SPI_Transmit+0x184>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004edc:	f7fd f80e 	bl	8001efc <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d803      	bhi.n	8004ef4 <HAL_SPI_Transmit+0x178>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef2:	d102      	bne.n	8004efa <HAL_SPI_Transmit+0x17e>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d102      	bne.n	8004f00 <HAL_SPI_Transmit+0x184>
        {
          errorcode = HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004efe:	e0a6      	b.n	800504e <HAL_SPI_Transmit+0x2d2>
    while (hspi->TxXferCount > 0U)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1ce      	bne.n	8004ea8 <HAL_SPI_Transmit+0x12c>
 8004f0a:	e07e      	b.n	800500a <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d002      	beq.n	8004f1a <HAL_SPI_Transmit+0x19e>
 8004f14:	8afb      	ldrh	r3, [r7, #22]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d172      	bne.n	8005000 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d912      	bls.n	8004f4a <HAL_SPI_Transmit+0x1ce>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	881a      	ldrh	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f34:	1c9a      	adds	r2, r3, #2
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	3b02      	subs	r3, #2
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f48:	e05a      	b.n	8005000 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	330c      	adds	r3, #12
 8004f54:	7812      	ldrb	r2, [r2, #0]
 8004f56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004f70:	e046      	b.n	8005000 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d12b      	bne.n	8004fd8 <HAL_SPI_Transmit+0x25c>
      {
        if (hspi->TxXferCount > 1U)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d912      	bls.n	8004fb0 <HAL_SPI_Transmit+0x234>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8e:	881a      	ldrh	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9a:	1c9a      	adds	r2, r3, #2
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	3b02      	subs	r3, #2
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fae:	e027      	b.n	8005000 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	330c      	adds	r3, #12
 8004fba:	7812      	ldrb	r2, [r2, #0]
 8004fbc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fd6:	e013      	b.n	8005000 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fd8:	f7fc ff90 	bl	8001efc <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d803      	bhi.n	8004ff0 <HAL_SPI_Transmit+0x274>
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fee:	d102      	bne.n	8004ff6 <HAL_SPI_Transmit+0x27a>
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d104      	bne.n	8005000 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ffa:	e028      	b.n	800504e <HAL_SPI_Transmit+0x2d2>
 8004ffc:	08006d30 	.word	0x08006d30
    while (hspi->TxXferCount > 0U)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1b3      	bne.n	8004f72 <HAL_SPI_Transmit+0x1f6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	6839      	ldr	r1, [r7, #0]
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 fc3e 	bl	8005890 <SPI_EndRxTxTransaction>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2220      	movs	r2, #32
 800501e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10a      	bne.n	800503e <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005028:	2300      	movs	r3, #0
 800502a:	613b      	str	r3, [r7, #16]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	613b      	str	r3, [r7, #16]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	77fb      	strb	r3, [r7, #31]
 800504a:	e000      	b.n	800504e <HAL_SPI_Transmit+0x2d2>
  }

error:
 800504c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800505e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3720      	adds	r7, #32
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08a      	sub	sp, #40	; 0x28
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005076:	2301      	movs	r3, #1
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d004      	beq.n	8005092 <HAL_SPI_TransmitReceive+0x2a>
 8005088:	f240 41bf 	movw	r1, #1215	; 0x4bf
 800508c:	4895      	ldr	r0, [pc, #596]	; (80052e4 <HAL_SPI_TransmitReceive+0x27c>)
 800508e:	f7fc f9d1 	bl	8001434 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005098:	2b01      	cmp	r3, #1
 800509a:	d101      	bne.n	80050a0 <HAL_SPI_TransmitReceive+0x38>
 800509c:	2302      	movs	r3, #2
 800509e:	e1fd      	b.n	800549c <HAL_SPI_TransmitReceive+0x434>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050a8:	f7fc ff28 	bl	8001efc <HAL_GetTick>
 80050ac:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050b4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80050bc:	887b      	ldrh	r3, [r7, #2]
 80050be:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80050c0:	887b      	ldrh	r3, [r7, #2]
 80050c2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80050c4:	7efb      	ldrb	r3, [r7, #27]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d00e      	beq.n	80050e8 <HAL_SPI_TransmitReceive+0x80>
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050d0:	d106      	bne.n	80050e0 <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d102      	bne.n	80050e0 <HAL_SPI_TransmitReceive+0x78>
 80050da:	7efb      	ldrb	r3, [r7, #27]
 80050dc:	2b04      	cmp	r3, #4
 80050de:	d003      	beq.n	80050e8 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 80050e0:	2302      	movs	r3, #2
 80050e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80050e6:	e1cf      	b.n	8005488 <HAL_SPI_TransmitReceive+0x420>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d005      	beq.n	80050fa <HAL_SPI_TransmitReceive+0x92>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <HAL_SPI_TransmitReceive+0x92>
 80050f4:	887b      	ldrh	r3, [r7, #2]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d103      	bne.n	8005102 <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005100:	e1c2      	b.n	8005488 <HAL_SPI_TransmitReceive+0x420>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b04      	cmp	r3, #4
 800510c:	d003      	beq.n	8005116 <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2205      	movs	r2, #5
 8005112:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	887a      	ldrh	r2, [r7, #2]
 8005126:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	887a      	ldrh	r2, [r7, #2]
 800512e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	887a      	ldrh	r2, [r7, #2]
 800513c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	887a      	ldrh	r2, [r7, #2]
 8005142:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005158:	d802      	bhi.n	8005160 <HAL_SPI_TransmitReceive+0xf8>
 800515a:	8a3b      	ldrh	r3, [r7, #16]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d908      	bls.n	8005172 <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800516e:	605a      	str	r2, [r3, #4]
 8005170:	e007      	b.n	8005182 <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005180:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518c:	2b40      	cmp	r3, #64	; 0x40
 800518e:	d007      	beq.n	80051a0 <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800519e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051a8:	d97c      	bls.n	80052a4 <HAL_SPI_TransmitReceive+0x23c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <HAL_SPI_TransmitReceive+0x150>
 80051b2:	8a7b      	ldrh	r3, [r7, #18]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d169      	bne.n	800528c <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	881a      	ldrh	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	1c9a      	adds	r2, r3, #2
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051dc:	e056      	b.n	800528c <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d11b      	bne.n	8005224 <HAL_SPI_TransmitReceive+0x1bc>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d016      	beq.n	8005224 <HAL_SPI_TransmitReceive+0x1bc>
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d113      	bne.n	8005224 <HAL_SPI_TransmitReceive+0x1bc>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005200:	881a      	ldrh	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520c:	1c9a      	adds	r2, r3, #2
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005216:	b29b      	uxth	r3, r3
 8005218:	3b01      	subs	r3, #1
 800521a:	b29a      	uxth	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b01      	cmp	r3, #1
 8005230:	d11c      	bne.n	800526c <HAL_SPI_TransmitReceive+0x204>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005238:	b29b      	uxth	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d016      	beq.n	800526c <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68da      	ldr	r2, [r3, #12]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005248:	b292      	uxth	r2, r2
 800524a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005250:	1c9a      	adds	r2, r3, #2
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800525c:	b29b      	uxth	r3, r3
 800525e:	3b01      	subs	r3, #1
 8005260:	b29a      	uxth	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005268:	2301      	movs	r3, #1
 800526a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800526c:	f7fc fe46 	bl	8001efc <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005278:	429a      	cmp	r2, r3
 800527a:	d807      	bhi.n	800528c <HAL_SPI_TransmitReceive+0x224>
 800527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005282:	d003      	beq.n	800528c <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800528a:	e0fd      	b.n	8005488 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005290:	b29b      	uxth	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1a3      	bne.n	80051de <HAL_SPI_TransmitReceive+0x176>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800529c:	b29b      	uxth	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d19d      	bne.n	80051de <HAL_SPI_TransmitReceive+0x176>
 80052a2:	e0e1      	b.n	8005468 <HAL_SPI_TransmitReceive+0x400>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <HAL_SPI_TransmitReceive+0x24c>
 80052ac:	8a7b      	ldrh	r3, [r7, #18]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	f040 80cd 	bne.w	800544e <HAL_SPI_TransmitReceive+0x3e6>
    {
      if (hspi->TxXferCount > 1U)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d914      	bls.n	80052e8 <HAL_SPI_TransmitReceive+0x280>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c2:	881a      	ldrh	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ce:	1c9a      	adds	r2, r3, #2
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d8:	b29b      	uxth	r3, r3
 80052da:	3b02      	subs	r3, #2
 80052dc:	b29a      	uxth	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052e2:	e0b4      	b.n	800544e <HAL_SPI_TransmitReceive+0x3e6>
 80052e4:	08006d30 	.word	0x08006d30
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	330c      	adds	r3, #12
 80052f2:	7812      	ldrb	r2, [r2, #0]
 80052f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005304:	b29b      	uxth	r3, r3
 8005306:	3b01      	subs	r3, #1
 8005308:	b29a      	uxth	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800530e:	e09e      	b.n	800544e <HAL_SPI_TransmitReceive+0x3e6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b02      	cmp	r3, #2
 800531c:	d134      	bne.n	8005388 <HAL_SPI_TransmitReceive+0x320>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005322:	b29b      	uxth	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d02f      	beq.n	8005388 <HAL_SPI_TransmitReceive+0x320>
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	2b01      	cmp	r3, #1
 800532c:	d12c      	bne.n	8005388 <HAL_SPI_TransmitReceive+0x320>
      {
        if (hspi->TxXferCount > 1U)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005332:	b29b      	uxth	r3, r3
 8005334:	2b01      	cmp	r3, #1
 8005336:	d912      	bls.n	800535e <HAL_SPI_TransmitReceive+0x2f6>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533c:	881a      	ldrh	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005348:	1c9a      	adds	r2, r3, #2
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005352:	b29b      	uxth	r3, r3
 8005354:	3b02      	subs	r3, #2
 8005356:	b29a      	uxth	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800535c:	e012      	b.n	8005384 <HAL_SPI_TransmitReceive+0x31c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	330c      	adds	r3, #12
 8005368:	7812      	ldrb	r2, [r2, #0]
 800536a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800537a:	b29b      	uxth	r3, r3
 800537c:	3b01      	subs	r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b01      	cmp	r3, #1
 8005394:	d148      	bne.n	8005428 <HAL_SPI_TransmitReceive+0x3c0>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d042      	beq.n	8005428 <HAL_SPI_TransmitReceive+0x3c0>
      {
        if (hspi->RxXferCount > 1U)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d923      	bls.n	80053f6 <HAL_SPI_TransmitReceive+0x38e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b8:	b292      	uxth	r2, r2
 80053ba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	1c9a      	adds	r2, r3, #2
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	3b02      	subs	r3, #2
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053de:	b29b      	uxth	r3, r3
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d81f      	bhi.n	8005424 <HAL_SPI_TransmitReceive+0x3bc>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053f2:	605a      	str	r2, [r3, #4]
 80053f4:	e016      	b.n	8005424 <HAL_SPI_TransmitReceive+0x3bc>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f103 020c 	add.w	r2, r3, #12
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	7812      	ldrb	r2, [r2, #0]
 8005404:	b2d2      	uxtb	r2, r2
 8005406:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005418:	b29b      	uxth	r3, r3
 800541a:	3b01      	subs	r3, #1
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005424:	2301      	movs	r3, #1
 8005426:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005428:	f7fc fd68 	bl	8001efc <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005434:	429a      	cmp	r2, r3
 8005436:	d803      	bhi.n	8005440 <HAL_SPI_TransmitReceive+0x3d8>
 8005438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543e:	d102      	bne.n	8005446 <HAL_SPI_TransmitReceive+0x3de>
 8005440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005442:	2b00      	cmp	r3, #0
 8005444:	d103      	bne.n	800544e <HAL_SPI_TransmitReceive+0x3e6>
      {
        errorcode = HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800544c:	e01c      	b.n	8005488 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005452:	b29b      	uxth	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	f47f af5b 	bne.w	8005310 <HAL_SPI_TransmitReceive+0x2a8>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005460:	b29b      	uxth	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	f47f af54 	bne.w	8005310 <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005468:	69fa      	ldr	r2, [r7, #28]
 800546a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 fa0f 	bl	8005890 <SPI_EndRxTxTransaction>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d006      	beq.n	8005486 <HAL_SPI_TransmitReceive+0x41e>
  {
    errorcode = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2220      	movs	r2, #32
 8005482:	661a      	str	r2, [r3, #96]	; 0x60
 8005484:	e000      	b.n	8005488 <HAL_SPI_TransmitReceive+0x420>
  }

error :
 8005486:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005498:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800549c:	4618      	mov	r0, r3
 800549e:	3728      	adds	r7, #40	; 0x28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	099b      	lsrs	r3, r3, #6
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10f      	bne.n	80054e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	099b      	lsrs	r3, r3, #6
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d004      	beq.n	80054e8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	4798      	blx	r3
    return;
 80054e6:	e0d8      	b.n	800569a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	085b      	lsrs	r3, r3, #1
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00a      	beq.n	800550a <HAL_SPI_IRQHandler+0x66>
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	09db      	lsrs	r3, r3, #7
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d004      	beq.n	800550a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	4798      	blx	r3
    return;
 8005508:	e0c7      	b.n	800569a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10c      	bne.n	8005530 <HAL_SPI_IRQHandler+0x8c>
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	099b      	lsrs	r3, r3, #6
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d106      	bne.n	8005530 <HAL_SPI_IRQHandler+0x8c>
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	0a1b      	lsrs	r3, r3, #8
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 80b5 	beq.w	800569a <HAL_SPI_IRQHandler+0x1f6>
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	095b      	lsrs	r3, r3, #5
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 80ae 	beq.w	800569a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	099b      	lsrs	r3, r3, #6
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d023      	beq.n	8005592 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b03      	cmp	r3, #3
 8005554:	d011      	beq.n	800557a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800555a:	f043 0204 	orr.w	r2, r3, #4
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005562:	2300      	movs	r3, #0
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	617b      	str	r3, [r7, #20]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	e00b      	b.n	8005592 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800557a:	2300      	movs	r3, #0
 800557c:	613b      	str	r3, [r7, #16]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	613b      	str	r3, [r7, #16]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	613b      	str	r3, [r7, #16]
 800558e:	693b      	ldr	r3, [r7, #16]
        return;
 8005590:	e083      	b.n	800569a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	095b      	lsrs	r3, r3, #5
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d014      	beq.n	80055c8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a2:	f043 0201 	orr.w	r2, r3, #1
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80055aa:	2300      	movs	r3, #0
 80055ac:	60fb      	str	r3, [r7, #12]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	60fb      	str	r3, [r7, #12]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	0a1b      	lsrs	r3, r3, #8
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00c      	beq.n	80055ee <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d8:	f043 0208 	orr.w	r2, r3, #8
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80055e0:	2300      	movs	r3, #0
 80055e2:	60bb      	str	r3, [r7, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	60bb      	str	r3, [r7, #8]
 80055ec:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d050      	beq.n	8005698 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005604:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d104      	bne.n	8005622 <HAL_SPI_IRQHandler+0x17e>
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d034      	beq.n	800568c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0203 	bic.w	r2, r2, #3
 8005630:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005636:	2b00      	cmp	r3, #0
 8005638:	d011      	beq.n	800565e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563e:	4a18      	ldr	r2, [pc, #96]	; (80056a0 <HAL_SPI_IRQHandler+0x1fc>)
 8005640:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005646:	4618      	mov	r0, r3
 8005648:	f7fc ff16 	bl	8002478 <HAL_DMA_Abort_IT>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d005      	beq.n	800565e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005656:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005662:	2b00      	cmp	r3, #0
 8005664:	d016      	beq.n	8005694 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566a:	4a0d      	ldr	r2, [pc, #52]	; (80056a0 <HAL_SPI_IRQHandler+0x1fc>)
 800566c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005672:	4618      	mov	r0, r3
 8005674:	f7fc ff00 	bl	8002478 <HAL_DMA_Abort_IT>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00a      	beq.n	8005694 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005682:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800568a:	e003      	b.n	8005694 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f809 	bl	80056a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005692:	e000      	b.n	8005696 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005694:	bf00      	nop
    return;
 8005696:	bf00      	nop
 8005698:	bf00      	nop
  }
}
 800569a:	3720      	adds	r7, #32
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	080056b9 	.word	0x080056b9

080056a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f7ff ffe5 	bl	80056a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056da:	bf00      	nop
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	603b      	str	r3, [r7, #0]
 80056ee:	4613      	mov	r3, r2
 80056f0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056f2:	e04c      	b.n	800578e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fa:	d048      	beq.n	800578e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80056fc:	f7fc fbfe 	bl	8001efc <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	429a      	cmp	r2, r3
 800570a:	d902      	bls.n	8005712 <SPI_WaitFlagStateUntilTimeout+0x30>
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d13d      	bne.n	800578e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005720:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800572a:	d111      	bne.n	8005750 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005734:	d004      	beq.n	8005740 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800573e:	d107      	bne.n	8005750 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800574e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005758:	d10f      	bne.n	800577a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005768:	601a      	str	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005778:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e00f      	b.n	80057ae <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4013      	ands	r3, r2
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	429a      	cmp	r2, r3
 800579c:	bf0c      	ite	eq
 800579e:	2301      	moveq	r3, #1
 80057a0:	2300      	movne	r3, #0
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	461a      	mov	r2, r3
 80057a6:	79fb      	ldrb	r3, [r7, #7]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d1a3      	bne.n	80056f4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	607a      	str	r2, [r7, #4]
 80057c2:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80057c4:	e057      	b.n	8005876 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80057cc:	d106      	bne.n	80057dc <SPI_WaitFifoStateUntilTimeout+0x26>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d103      	bne.n	80057dc <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	330c      	adds	r3, #12
 80057da:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e2:	d048      	beq.n	8005876 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80057e4:	f7fc fb8a 	bl	8001efc <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d902      	bls.n	80057fa <SPI_WaitFifoStateUntilTimeout+0x44>
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d13d      	bne.n	8005876 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005808:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005812:	d111      	bne.n	8005838 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800581c:	d004      	beq.n	8005828 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005826:	d107      	bne.n	8005838 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005836:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005840:	d10f      	bne.n	8005862 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005860:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e008      	b.n	8005888 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689a      	ldr	r2, [r3, #8]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4013      	ands	r3, r2
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	429a      	cmp	r2, r3
 8005884:	d19f      	bne.n	80057c6 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af02      	add	r7, sp, #8
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f7ff ff84 	bl	80057b6 <SPI_WaitFifoStateUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d007      	beq.n	80058c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058b8:	f043 0220 	orr.w	r2, r3, #32
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e027      	b.n	8005914 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2200      	movs	r2, #0
 80058cc:	2180      	movs	r1, #128	; 0x80
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f7ff ff07 	bl	80056e2 <SPI_WaitFlagStateUntilTimeout>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d007      	beq.n	80058ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058de:	f043 0220 	orr.w	r2, r3, #32
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e014      	b.n	8005914 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f7ff ff5d 	bl	80057b6 <SPI_WaitFifoStateUntilTimeout>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d007      	beq.n	8005912 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005906:	f043 0220 	orr.w	r2, r3, #32
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e000      	b.n	8005914 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e09f      	b.n	8005a6e <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d02d      	beq.n	8005992 <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a4f      	ldr	r2, [pc, #316]	; (8005a78 <HAL_UART_Init+0x15c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d055      	beq.n	80059ec <HAL_UART_Init+0xd0>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a4d      	ldr	r2, [pc, #308]	; (8005a7c <HAL_UART_Init+0x160>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d050      	beq.n	80059ec <HAL_UART_Init+0xd0>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a4c      	ldr	r2, [pc, #304]	; (8005a80 <HAL_UART_Init+0x164>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d04b      	beq.n	80059ec <HAL_UART_Init+0xd0>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a4a      	ldr	r2, [pc, #296]	; (8005a84 <HAL_UART_Init+0x168>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d046      	beq.n	80059ec <HAL_UART_Init+0xd0>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a49      	ldr	r2, [pc, #292]	; (8005a88 <HAL_UART_Init+0x16c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d041      	beq.n	80059ec <HAL_UART_Init+0xd0>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a47      	ldr	r2, [pc, #284]	; (8005a8c <HAL_UART_Init+0x170>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d03c      	beq.n	80059ec <HAL_UART_Init+0xd0>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a46      	ldr	r2, [pc, #280]	; (8005a90 <HAL_UART_Init+0x174>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d037      	beq.n	80059ec <HAL_UART_Init+0xd0>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a44      	ldr	r2, [pc, #272]	; (8005a94 <HAL_UART_Init+0x178>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d032      	beq.n	80059ec <HAL_UART_Init+0xd0>
 8005986:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800598a:	4843      	ldr	r0, [pc, #268]	; (8005a98 <HAL_UART_Init+0x17c>)
 800598c:	f7fb fd52 	bl	8001434 <assert_failed>
 8005990:	e02c      	b.n	80059ec <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a38      	ldr	r2, [pc, #224]	; (8005a78 <HAL_UART_Init+0x15c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d027      	beq.n	80059ec <HAL_UART_Init+0xd0>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a36      	ldr	r2, [pc, #216]	; (8005a7c <HAL_UART_Init+0x160>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d022      	beq.n	80059ec <HAL_UART_Init+0xd0>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a35      	ldr	r2, [pc, #212]	; (8005a80 <HAL_UART_Init+0x164>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d01d      	beq.n	80059ec <HAL_UART_Init+0xd0>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a33      	ldr	r2, [pc, #204]	; (8005a84 <HAL_UART_Init+0x168>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d018      	beq.n	80059ec <HAL_UART_Init+0xd0>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a32      	ldr	r2, [pc, #200]	; (8005a88 <HAL_UART_Init+0x16c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d013      	beq.n	80059ec <HAL_UART_Init+0xd0>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a30      	ldr	r2, [pc, #192]	; (8005a8c <HAL_UART_Init+0x170>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00e      	beq.n	80059ec <HAL_UART_Init+0xd0>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a2f      	ldr	r2, [pc, #188]	; (8005a90 <HAL_UART_Init+0x174>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d009      	beq.n	80059ec <HAL_UART_Init+0xd0>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a2d      	ldr	r2, [pc, #180]	; (8005a94 <HAL_UART_Init+0x178>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d004      	beq.n	80059ec <HAL_UART_Init+0xd0>
 80059e2:	f240 112f 	movw	r1, #303	; 0x12f
 80059e6:	482c      	ldr	r0, [pc, #176]	; (8005a98 <HAL_UART_Init+0x17c>)
 80059e8:	f7fb fd24 	bl	8001434 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d106      	bne.n	8005a02 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f7fc f905 	bl	8001c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2224      	movs	r2, #36	; 0x24
 8005a06:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0201 	bic.w	r2, r2, #1
 8005a16:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fb01 	bl	8006020 <UART_SetConfig>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d101      	bne.n	8005a28 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e022      	b.n	8005a6e <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fe31 	bl	8006698 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a54:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f042 0201 	orr.w	r2, r2, #1
 8005a64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 ff6a 	bl	8006940 <UART_CheckIdleState>
 8005a6c:	4603      	mov	r3, r0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	40011000 	.word	0x40011000
 8005a7c:	40004400 	.word	0x40004400
 8005a80:	40004800 	.word	0x40004800
 8005a84:	40004c00 	.word	0x40004c00
 8005a88:	40005000 	.word	0x40005000
 8005a8c:	40011400 	.word	0x40011400
 8005a90:	40007800 	.word	0x40007800
 8005a94:	40007c00 	.word	0x40007c00
 8005a98:	08006d68 	.word	0x08006d68

08005a9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08a      	sub	sp, #40	; 0x28
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ab0:	2b20      	cmp	r3, #32
 8005ab2:	d17f      	bne.n	8005bb4 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <HAL_UART_Transmit+0x24>
 8005aba:	88fb      	ldrh	r3, [r7, #6]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e078      	b.n	8005bb6 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d101      	bne.n	8005ad2 <HAL_UART_Transmit+0x36>
 8005ace:	2302      	movs	r3, #2
 8005ad0:	e071      	b.n	8005bb6 <HAL_UART_Transmit+0x11a>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2221      	movs	r2, #33	; 0x21
 8005ae4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005ae6:	f7fc fa09 	bl	8001efc <HAL_GetTick>
 8005aea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	88fa      	ldrh	r2, [r7, #6]
 8005af0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	88fa      	ldrh	r2, [r7, #6]
 8005af8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b04:	d108      	bne.n	8005b18 <HAL_UART_Transmit+0x7c>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d104      	bne.n	8005b18 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	61bb      	str	r3, [r7, #24]
 8005b16:	e003      	b.n	8005b20 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005b28:	e02c      	b.n	8005b84 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2200      	movs	r2, #0
 8005b32:	2180      	movs	r1, #128	; 0x80
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 ff48 	bl	80069ca <UART_WaitOnFlagUntilTimeout>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e038      	b.n	8005bb6 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10b      	bne.n	8005b62 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	881b      	ldrh	r3, [r3, #0]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	3302      	adds	r3, #2
 8005b5e:	61bb      	str	r3, [r7, #24]
 8005b60:	e007      	b.n	8005b72 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	781a      	ldrb	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1cc      	bne.n	8005b2a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	2200      	movs	r2, #0
 8005b98:	2140      	movs	r1, #64	; 0x40
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 ff15 	bl	80069ca <UART_WaitOnFlagUntilTimeout>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e005      	b.n	8005bb6 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2220      	movs	r2, #32
 8005bae:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	e000      	b.n	8005bb6 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8005bb4:	2302      	movs	r3, #2
  }
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3720      	adds	r7, #32
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b08a      	sub	sp, #40	; 0x28
 8005bc2:	af02      	add	r7, sp, #8
 8005bc4:	60f8      	str	r0, [r7, #12]
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	603b      	str	r3, [r7, #0]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bd2:	2b20      	cmp	r3, #32
 8005bd4:	f040 80ba 	bne.w	8005d4c <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <HAL_UART_Receive+0x26>
 8005bde:	88fb      	ldrh	r3, [r7, #6]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e0b2      	b.n	8005d4e <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d101      	bne.n	8005bf6 <HAL_UART_Receive+0x38>
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	e0ab      	b.n	8005d4e <HAL_UART_Receive+0x190>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2222      	movs	r2, #34	; 0x22
 8005c08:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005c0a:	f7fc f977 	bl	8001efc <HAL_GetTick>
 8005c0e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	88fa      	ldrh	r2, [r7, #6]
 8005c14:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	88fa      	ldrh	r2, [r7, #6]
 8005c1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c28:	d10e      	bne.n	8005c48 <HAL_UART_Receive+0x8a>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d105      	bne.n	8005c3e <HAL_UART_Receive+0x80>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c3c:	e02d      	b.n	8005c9a <HAL_UART_Receive+0xdc>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	22ff      	movs	r2, #255	; 0xff
 8005c42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c46:	e028      	b.n	8005c9a <HAL_UART_Receive+0xdc>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10d      	bne.n	8005c6c <HAL_UART_Receive+0xae>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d104      	bne.n	8005c62 <HAL_UART_Receive+0xa4>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	22ff      	movs	r2, #255	; 0xff
 8005c5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c60:	e01b      	b.n	8005c9a <HAL_UART_Receive+0xdc>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	227f      	movs	r2, #127	; 0x7f
 8005c66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c6a:	e016      	b.n	8005c9a <HAL_UART_Receive+0xdc>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c74:	d10d      	bne.n	8005c92 <HAL_UART_Receive+0xd4>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d104      	bne.n	8005c88 <HAL_UART_Receive+0xca>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	227f      	movs	r2, #127	; 0x7f
 8005c82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c86:	e008      	b.n	8005c9a <HAL_UART_Receive+0xdc>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	223f      	movs	r2, #63	; 0x3f
 8005c8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c90:	e003      	b.n	8005c9a <HAL_UART_Receive+0xdc>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ca0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005caa:	d108      	bne.n	8005cbe <HAL_UART_Receive+0x100>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d104      	bne.n	8005cbe <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	61bb      	str	r3, [r7, #24]
 8005cbc:	e003      	b.n	8005cc6 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005cce:	e032      	b.n	8005d36 <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	2120      	movs	r1, #32
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 fe75 	bl	80069ca <UART_WaitOnFlagUntilTimeout>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e031      	b.n	8005d4e <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10c      	bne.n	8005d0a <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	8a7b      	ldrh	r3, [r7, #18]
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	3302      	adds	r3, #2
 8005d06:	61bb      	str	r3, [r7, #24]
 8005d08:	e00c      	b.n	8005d24 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	8a7b      	ldrh	r3, [r7, #18]
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	4013      	ands	r3, r2
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	3301      	adds	r3, #1
 8005d22:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1c6      	bne.n	8005cd0 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2220      	movs	r2, #32
 8005d46:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	e000      	b.n	8005d4e <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 8005d4c:	2302      	movs	r3, #2
  }
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3720      	adds	r7, #32
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
	...

08005d58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d78:	69fa      	ldr	r2, [r7, #28]
 8005d7a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005d7e:	4013      	ands	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d113      	bne.n	8005db0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	f003 0320 	and.w	r3, r3, #32
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00e      	beq.n	8005db0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	f003 0320 	and.w	r3, r3, #32
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d009      	beq.n	8005db0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 8114 	beq.w	8005fce <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	4798      	blx	r3
      }
      return;
 8005dae:	e10e      	b.n	8005fce <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 80d6 	beq.w	8005f64 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d105      	bne.n	8005dce <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 80cb 	beq.w	8005f64 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00e      	beq.n	8005df6 <HAL_UART_IRQHandler+0x9e>
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d009      	beq.n	8005df6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2201      	movs	r2, #1
 8005de8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dee:	f043 0201 	orr.w	r2, r3, #1
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00e      	beq.n	8005e1e <HAL_UART_IRQHandler+0xc6>
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d009      	beq.n	8005e1e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e16:	f043 0204 	orr.w	r2, r3, #4
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00e      	beq.n	8005e46 <HAL_UART_IRQHandler+0xee>
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d009      	beq.n	8005e46 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2204      	movs	r2, #4
 8005e38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e3e:	f043 0202 	orr.w	r2, r3, #2
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	f003 0308 	and.w	r3, r3, #8
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d013      	beq.n	8005e78 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	f003 0320 	and.w	r3, r3, #32
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d104      	bne.n	8005e64 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d009      	beq.n	8005e78 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2208      	movs	r2, #8
 8005e6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e70:	f043 0208 	orr.w	r2, r3, #8
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00f      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x14a>
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e9a:	f043 0220 	orr.w	r2, r3, #32
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 8093 	beq.w	8005fd2 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00c      	beq.n	8005ed0 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	f003 0320 	and.w	r3, r3, #32
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d007      	beq.n	8005ed0 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ed4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee0:	2b40      	cmp	r3, #64	; 0x40
 8005ee2:	d004      	beq.n	8005eee <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d031      	beq.n	8005f52 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fde6 	bl	8006ac0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efe:	2b40      	cmp	r3, #64	; 0x40
 8005f00:	d123      	bne.n	8005f4a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f10:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d013      	beq.n	8005f42 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f1e:	4a30      	ldr	r2, [pc, #192]	; (8005fe0 <HAL_UART_IRQHandler+0x288>)
 8005f20:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7fc faa6 	bl	8002478 <HAL_DMA_Abort_IT>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d016      	beq.n	8005f60 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f40:	e00e      	b.n	8005f60 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f858 	bl	8005ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f48:	e00a      	b.n	8005f60 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f854 	bl	8005ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f50:	e006      	b.n	8005f60 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f850 	bl	8005ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005f5e:	e038      	b.n	8005fd2 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f60:	bf00      	nop
    return;
 8005f62:	e036      	b.n	8005fd2 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00d      	beq.n	8005f8a <HAL_UART_IRQHandler+0x232>
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d008      	beq.n	8005f8a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005f80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f842 	bl	800600c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f88:	e026      	b.n	8005fd8 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00d      	beq.n	8005fb0 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d008      	beq.n	8005fb0 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d017      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	4798      	blx	r3
    }
    return;
 8005fae:	e012      	b.n	8005fd6 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00e      	beq.n	8005fd8 <HAL_UART_IRQHandler+0x280>
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d009      	beq.n	8005fd8 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fdb1 	bl	8006b2c <UART_EndTransmit_IT>
    return;
 8005fca:	bf00      	nop
 8005fcc:	e004      	b.n	8005fd8 <HAL_UART_IRQHandler+0x280>
      return;
 8005fce:	bf00      	nop
 8005fd0:	e002      	b.n	8005fd8 <HAL_UART_IRQHandler+0x280>
    return;
 8005fd2:	bf00      	nop
 8005fd4:	e000      	b.n	8005fd8 <HAL_UART_IRQHandler+0x280>
    return;
 8005fd6:	bf00      	nop
  }

}
 8005fd8:	3720      	adds	r7, #32
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	08006b01 	.word	0x08006b01

08005fe4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006028:	2300      	movs	r3, #0
 800602a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800602c:	2300      	movs	r3, #0
 800602e:	75fb      	strb	r3, [r7, #23]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	4aaa      	ldr	r2, [pc, #680]	; (80062e0 <UART_SetConfig+0x2c0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d904      	bls.n	8006044 <UART_SetConfig+0x24>
 800603a:	f640 21be 	movw	r1, #2750	; 0xabe
 800603e:	48a9      	ldr	r0, [pc, #676]	; (80062e4 <UART_SetConfig+0x2c4>)
 8006040:	f7fb f9f8 	bl	8001434 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800604c:	d00d      	beq.n	800606a <UART_SetConfig+0x4a>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d009      	beq.n	800606a <UART_SetConfig+0x4a>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800605e:	d004      	beq.n	800606a <UART_SetConfig+0x4a>
 8006060:	f640 21bf 	movw	r1, #2751	; 0xabf
 8006064:	489f      	ldr	r0, [pc, #636]	; (80062e4 <UART_SetConfig+0x2c4>)
 8006066:	f7fb f9e5 	bl	8001434 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006072:	d012      	beq.n	800609a <UART_SetConfig+0x7a>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00e      	beq.n	800609a <UART_SetConfig+0x7a>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006084:	d009      	beq.n	800609a <UART_SetConfig+0x7a>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800608e:	d004      	beq.n	800609a <UART_SetConfig+0x7a>
 8006090:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 8006094:	4893      	ldr	r0, [pc, #588]	; (80062e4 <UART_SetConfig+0x2c4>)
 8006096:	f7fb f9cd 	bl	8001434 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d009      	beq.n	80060b6 <UART_SetConfig+0x96>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060aa:	d004      	beq.n	80060b6 <UART_SetConfig+0x96>
 80060ac:	f640 21c1 	movw	r1, #2753	; 0xac1
 80060b0:	488c      	ldr	r0, [pc, #560]	; (80062e4 <UART_SetConfig+0x2c4>)
 80060b2:	f7fb f9bf 	bl	8001434 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00e      	beq.n	80060dc <UART_SetConfig+0xbc>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c6:	d009      	beq.n	80060dc <UART_SetConfig+0xbc>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80060d0:	d004      	beq.n	80060dc <UART_SetConfig+0xbc>
 80060d2:	f640 21c3 	movw	r1, #2755	; 0xac3
 80060d6:	4883      	ldr	r0, [pc, #524]	; (80062e4 <UART_SetConfig+0x2c4>)
 80060d8:	f7fb f9ac 	bl	8001434 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	f023 030c 	bic.w	r3, r3, #12
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d103      	bne.n	80060f0 <UART_SetConfig+0xd0>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d104      	bne.n	80060fa <UART_SetConfig+0xda>
 80060f0:	f640 21c4 	movw	r1, #2756	; 0xac4
 80060f4:	487b      	ldr	r0, [pc, #492]	; (80062e4 <UART_SetConfig+0x2c4>)
 80060f6:	f7fb f99d 	bl	8001434 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d013      	beq.n	800612a <UART_SetConfig+0x10a>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800610a:	d00e      	beq.n	800612a <UART_SetConfig+0x10a>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006114:	d009      	beq.n	800612a <UART_SetConfig+0x10a>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800611e:	d004      	beq.n	800612a <UART_SetConfig+0x10a>
 8006120:	f640 21c5 	movw	r1, #2757	; 0xac5
 8006124:	486f      	ldr	r0, [pc, #444]	; (80062e4 <UART_SetConfig+0x2c4>)
 8006126:	f7fb f985 	bl	8001434 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d009      	beq.n	8006146 <UART_SetConfig+0x126>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800613a:	d004      	beq.n	8006146 <UART_SetConfig+0x126>
 800613c:	f640 21c6 	movw	r1, #2758	; 0xac6
 8006140:	4868      	ldr	r0, [pc, #416]	; (80062e4 <UART_SetConfig+0x2c4>)
 8006142:	f7fb f977 	bl	8001434 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	689a      	ldr	r2, [r3, #8]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	431a      	orrs	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	431a      	orrs	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	4313      	orrs	r3, r2
 800615c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	4b60      	ldr	r3, [pc, #384]	; (80062e8 <UART_SetConfig+0x2c8>)
 8006166:	4013      	ands	r3, r2
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	6812      	ldr	r2, [r2, #0]
 800616c:	6939      	ldr	r1, [r7, #16]
 800616e:	430b      	orrs	r3, r1
 8006170:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68da      	ldr	r2, [r3, #12]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	4313      	orrs	r3, r2
 8006196:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a4e      	ldr	r2, [pc, #312]	; (80062ec <UART_SetConfig+0x2cc>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d122      	bne.n	80061fc <UART_SetConfig+0x1dc>
 80061b6:	4b4e      	ldr	r3, [pc, #312]	; (80062f0 <UART_SetConfig+0x2d0>)
 80061b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061bc:	f003 0303 	and.w	r3, r3, #3
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d817      	bhi.n	80061f4 <UART_SetConfig+0x1d4>
 80061c4:	a201      	add	r2, pc, #4	; (adr r2, 80061cc <UART_SetConfig+0x1ac>)
 80061c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ca:	bf00      	nop
 80061cc:	080061dd 	.word	0x080061dd
 80061d0:	080061e9 	.word	0x080061e9
 80061d4:	080061e3 	.word	0x080061e3
 80061d8:	080061ef 	.word	0x080061ef
 80061dc:	2301      	movs	r3, #1
 80061de:	77fb      	strb	r3, [r7, #31]
 80061e0:	e14d      	b.n	800647e <UART_SetConfig+0x45e>
 80061e2:	2302      	movs	r3, #2
 80061e4:	77fb      	strb	r3, [r7, #31]
 80061e6:	e14a      	b.n	800647e <UART_SetConfig+0x45e>
 80061e8:	2304      	movs	r3, #4
 80061ea:	77fb      	strb	r3, [r7, #31]
 80061ec:	e147      	b.n	800647e <UART_SetConfig+0x45e>
 80061ee:	2308      	movs	r3, #8
 80061f0:	77fb      	strb	r3, [r7, #31]
 80061f2:	e144      	b.n	800647e <UART_SetConfig+0x45e>
 80061f4:	2310      	movs	r3, #16
 80061f6:	77fb      	strb	r3, [r7, #31]
 80061f8:	bf00      	nop
 80061fa:	e140      	b.n	800647e <UART_SetConfig+0x45e>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a3c      	ldr	r2, [pc, #240]	; (80062f4 <UART_SetConfig+0x2d4>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d134      	bne.n	8006270 <UART_SetConfig+0x250>
 8006206:	4b3a      	ldr	r3, [pc, #232]	; (80062f0 <UART_SetConfig+0x2d0>)
 8006208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620c:	f003 030c 	and.w	r3, r3, #12
 8006210:	2b0c      	cmp	r3, #12
 8006212:	d829      	bhi.n	8006268 <UART_SetConfig+0x248>
 8006214:	a201      	add	r2, pc, #4	; (adr r2, 800621c <UART_SetConfig+0x1fc>)
 8006216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621a:	bf00      	nop
 800621c:	08006251 	.word	0x08006251
 8006220:	08006269 	.word	0x08006269
 8006224:	08006269 	.word	0x08006269
 8006228:	08006269 	.word	0x08006269
 800622c:	0800625d 	.word	0x0800625d
 8006230:	08006269 	.word	0x08006269
 8006234:	08006269 	.word	0x08006269
 8006238:	08006269 	.word	0x08006269
 800623c:	08006257 	.word	0x08006257
 8006240:	08006269 	.word	0x08006269
 8006244:	08006269 	.word	0x08006269
 8006248:	08006269 	.word	0x08006269
 800624c:	08006263 	.word	0x08006263
 8006250:	2300      	movs	r3, #0
 8006252:	77fb      	strb	r3, [r7, #31]
 8006254:	e113      	b.n	800647e <UART_SetConfig+0x45e>
 8006256:	2302      	movs	r3, #2
 8006258:	77fb      	strb	r3, [r7, #31]
 800625a:	e110      	b.n	800647e <UART_SetConfig+0x45e>
 800625c:	2304      	movs	r3, #4
 800625e:	77fb      	strb	r3, [r7, #31]
 8006260:	e10d      	b.n	800647e <UART_SetConfig+0x45e>
 8006262:	2308      	movs	r3, #8
 8006264:	77fb      	strb	r3, [r7, #31]
 8006266:	e10a      	b.n	800647e <UART_SetConfig+0x45e>
 8006268:	2310      	movs	r3, #16
 800626a:	77fb      	strb	r3, [r7, #31]
 800626c:	bf00      	nop
 800626e:	e106      	b.n	800647e <UART_SetConfig+0x45e>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a20      	ldr	r2, [pc, #128]	; (80062f8 <UART_SetConfig+0x2d8>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d120      	bne.n	80062bc <UART_SetConfig+0x29c>
 800627a:	4b1d      	ldr	r3, [pc, #116]	; (80062f0 <UART_SetConfig+0x2d0>)
 800627c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006280:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006284:	2b10      	cmp	r3, #16
 8006286:	d00f      	beq.n	80062a8 <UART_SetConfig+0x288>
 8006288:	2b10      	cmp	r3, #16
 800628a:	d802      	bhi.n	8006292 <UART_SetConfig+0x272>
 800628c:	2b00      	cmp	r3, #0
 800628e:	d005      	beq.n	800629c <UART_SetConfig+0x27c>
 8006290:	e010      	b.n	80062b4 <UART_SetConfig+0x294>
 8006292:	2b20      	cmp	r3, #32
 8006294:	d005      	beq.n	80062a2 <UART_SetConfig+0x282>
 8006296:	2b30      	cmp	r3, #48	; 0x30
 8006298:	d009      	beq.n	80062ae <UART_SetConfig+0x28e>
 800629a:	e00b      	b.n	80062b4 <UART_SetConfig+0x294>
 800629c:	2300      	movs	r3, #0
 800629e:	77fb      	strb	r3, [r7, #31]
 80062a0:	e0ed      	b.n	800647e <UART_SetConfig+0x45e>
 80062a2:	2302      	movs	r3, #2
 80062a4:	77fb      	strb	r3, [r7, #31]
 80062a6:	e0ea      	b.n	800647e <UART_SetConfig+0x45e>
 80062a8:	2304      	movs	r3, #4
 80062aa:	77fb      	strb	r3, [r7, #31]
 80062ac:	e0e7      	b.n	800647e <UART_SetConfig+0x45e>
 80062ae:	2308      	movs	r3, #8
 80062b0:	77fb      	strb	r3, [r7, #31]
 80062b2:	e0e4      	b.n	800647e <UART_SetConfig+0x45e>
 80062b4:	2310      	movs	r3, #16
 80062b6:	77fb      	strb	r3, [r7, #31]
 80062b8:	bf00      	nop
 80062ba:	e0e0      	b.n	800647e <UART_SetConfig+0x45e>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a0e      	ldr	r2, [pc, #56]	; (80062fc <UART_SetConfig+0x2dc>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d131      	bne.n	800632a <UART_SetConfig+0x30a>
 80062c6:	4b0a      	ldr	r3, [pc, #40]	; (80062f0 <UART_SetConfig+0x2d0>)
 80062c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062d0:	2b40      	cmp	r3, #64	; 0x40
 80062d2:	d020      	beq.n	8006316 <UART_SetConfig+0x2f6>
 80062d4:	2b40      	cmp	r3, #64	; 0x40
 80062d6:	d813      	bhi.n	8006300 <UART_SetConfig+0x2e0>
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d016      	beq.n	800630a <UART_SetConfig+0x2ea>
 80062dc:	e021      	b.n	8006322 <UART_SetConfig+0x302>
 80062de:	bf00      	nop
 80062e0:	019bfcc0 	.word	0x019bfcc0
 80062e4:	08006d68 	.word	0x08006d68
 80062e8:	efff69f3 	.word	0xefff69f3
 80062ec:	40011000 	.word	0x40011000
 80062f0:	40023800 	.word	0x40023800
 80062f4:	40004400 	.word	0x40004400
 80062f8:	40004800 	.word	0x40004800
 80062fc:	40004c00 	.word	0x40004c00
 8006300:	2b80      	cmp	r3, #128	; 0x80
 8006302:	d005      	beq.n	8006310 <UART_SetConfig+0x2f0>
 8006304:	2bc0      	cmp	r3, #192	; 0xc0
 8006306:	d009      	beq.n	800631c <UART_SetConfig+0x2fc>
 8006308:	e00b      	b.n	8006322 <UART_SetConfig+0x302>
 800630a:	2300      	movs	r3, #0
 800630c:	77fb      	strb	r3, [r7, #31]
 800630e:	e0b6      	b.n	800647e <UART_SetConfig+0x45e>
 8006310:	2302      	movs	r3, #2
 8006312:	77fb      	strb	r3, [r7, #31]
 8006314:	e0b3      	b.n	800647e <UART_SetConfig+0x45e>
 8006316:	2304      	movs	r3, #4
 8006318:	77fb      	strb	r3, [r7, #31]
 800631a:	e0b0      	b.n	800647e <UART_SetConfig+0x45e>
 800631c:	2308      	movs	r3, #8
 800631e:	77fb      	strb	r3, [r7, #31]
 8006320:	e0ad      	b.n	800647e <UART_SetConfig+0x45e>
 8006322:	2310      	movs	r3, #16
 8006324:	77fb      	strb	r3, [r7, #31]
 8006326:	bf00      	nop
 8006328:	e0a9      	b.n	800647e <UART_SetConfig+0x45e>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4aaa      	ldr	r2, [pc, #680]	; (80065d8 <UART_SetConfig+0x5b8>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d124      	bne.n	800637e <UART_SetConfig+0x35e>
 8006334:	4ba9      	ldr	r3, [pc, #676]	; (80065dc <UART_SetConfig+0x5bc>)
 8006336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800633e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006342:	d012      	beq.n	800636a <UART_SetConfig+0x34a>
 8006344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006348:	d802      	bhi.n	8006350 <UART_SetConfig+0x330>
 800634a:	2b00      	cmp	r3, #0
 800634c:	d007      	beq.n	800635e <UART_SetConfig+0x33e>
 800634e:	e012      	b.n	8006376 <UART_SetConfig+0x356>
 8006350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006354:	d006      	beq.n	8006364 <UART_SetConfig+0x344>
 8006356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800635a:	d009      	beq.n	8006370 <UART_SetConfig+0x350>
 800635c:	e00b      	b.n	8006376 <UART_SetConfig+0x356>
 800635e:	2300      	movs	r3, #0
 8006360:	77fb      	strb	r3, [r7, #31]
 8006362:	e08c      	b.n	800647e <UART_SetConfig+0x45e>
 8006364:	2302      	movs	r3, #2
 8006366:	77fb      	strb	r3, [r7, #31]
 8006368:	e089      	b.n	800647e <UART_SetConfig+0x45e>
 800636a:	2304      	movs	r3, #4
 800636c:	77fb      	strb	r3, [r7, #31]
 800636e:	e086      	b.n	800647e <UART_SetConfig+0x45e>
 8006370:	2308      	movs	r3, #8
 8006372:	77fb      	strb	r3, [r7, #31]
 8006374:	e083      	b.n	800647e <UART_SetConfig+0x45e>
 8006376:	2310      	movs	r3, #16
 8006378:	77fb      	strb	r3, [r7, #31]
 800637a:	bf00      	nop
 800637c:	e07f      	b.n	800647e <UART_SetConfig+0x45e>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a97      	ldr	r2, [pc, #604]	; (80065e0 <UART_SetConfig+0x5c0>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d124      	bne.n	80063d2 <UART_SetConfig+0x3b2>
 8006388:	4b94      	ldr	r3, [pc, #592]	; (80065dc <UART_SetConfig+0x5bc>)
 800638a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006396:	d012      	beq.n	80063be <UART_SetConfig+0x39e>
 8006398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800639c:	d802      	bhi.n	80063a4 <UART_SetConfig+0x384>
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d007      	beq.n	80063b2 <UART_SetConfig+0x392>
 80063a2:	e012      	b.n	80063ca <UART_SetConfig+0x3aa>
 80063a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063a8:	d006      	beq.n	80063b8 <UART_SetConfig+0x398>
 80063aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063ae:	d009      	beq.n	80063c4 <UART_SetConfig+0x3a4>
 80063b0:	e00b      	b.n	80063ca <UART_SetConfig+0x3aa>
 80063b2:	2301      	movs	r3, #1
 80063b4:	77fb      	strb	r3, [r7, #31]
 80063b6:	e062      	b.n	800647e <UART_SetConfig+0x45e>
 80063b8:	2302      	movs	r3, #2
 80063ba:	77fb      	strb	r3, [r7, #31]
 80063bc:	e05f      	b.n	800647e <UART_SetConfig+0x45e>
 80063be:	2304      	movs	r3, #4
 80063c0:	77fb      	strb	r3, [r7, #31]
 80063c2:	e05c      	b.n	800647e <UART_SetConfig+0x45e>
 80063c4:	2308      	movs	r3, #8
 80063c6:	77fb      	strb	r3, [r7, #31]
 80063c8:	e059      	b.n	800647e <UART_SetConfig+0x45e>
 80063ca:	2310      	movs	r3, #16
 80063cc:	77fb      	strb	r3, [r7, #31]
 80063ce:	bf00      	nop
 80063d0:	e055      	b.n	800647e <UART_SetConfig+0x45e>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a83      	ldr	r2, [pc, #524]	; (80065e4 <UART_SetConfig+0x5c4>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d124      	bne.n	8006426 <UART_SetConfig+0x406>
 80063dc:	4b7f      	ldr	r3, [pc, #508]	; (80065dc <UART_SetConfig+0x5bc>)
 80063de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80063e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ea:	d012      	beq.n	8006412 <UART_SetConfig+0x3f2>
 80063ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f0:	d802      	bhi.n	80063f8 <UART_SetConfig+0x3d8>
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d007      	beq.n	8006406 <UART_SetConfig+0x3e6>
 80063f6:	e012      	b.n	800641e <UART_SetConfig+0x3fe>
 80063f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063fc:	d006      	beq.n	800640c <UART_SetConfig+0x3ec>
 80063fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006402:	d009      	beq.n	8006418 <UART_SetConfig+0x3f8>
 8006404:	e00b      	b.n	800641e <UART_SetConfig+0x3fe>
 8006406:	2300      	movs	r3, #0
 8006408:	77fb      	strb	r3, [r7, #31]
 800640a:	e038      	b.n	800647e <UART_SetConfig+0x45e>
 800640c:	2302      	movs	r3, #2
 800640e:	77fb      	strb	r3, [r7, #31]
 8006410:	e035      	b.n	800647e <UART_SetConfig+0x45e>
 8006412:	2304      	movs	r3, #4
 8006414:	77fb      	strb	r3, [r7, #31]
 8006416:	e032      	b.n	800647e <UART_SetConfig+0x45e>
 8006418:	2308      	movs	r3, #8
 800641a:	77fb      	strb	r3, [r7, #31]
 800641c:	e02f      	b.n	800647e <UART_SetConfig+0x45e>
 800641e:	2310      	movs	r3, #16
 8006420:	77fb      	strb	r3, [r7, #31]
 8006422:	bf00      	nop
 8006424:	e02b      	b.n	800647e <UART_SetConfig+0x45e>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a6f      	ldr	r2, [pc, #444]	; (80065e8 <UART_SetConfig+0x5c8>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d124      	bne.n	800647a <UART_SetConfig+0x45a>
 8006430:	4b6a      	ldr	r3, [pc, #424]	; (80065dc <UART_SetConfig+0x5bc>)
 8006432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006436:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800643a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800643e:	d012      	beq.n	8006466 <UART_SetConfig+0x446>
 8006440:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006444:	d802      	bhi.n	800644c <UART_SetConfig+0x42c>
 8006446:	2b00      	cmp	r3, #0
 8006448:	d007      	beq.n	800645a <UART_SetConfig+0x43a>
 800644a:	e012      	b.n	8006472 <UART_SetConfig+0x452>
 800644c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006450:	d006      	beq.n	8006460 <UART_SetConfig+0x440>
 8006452:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006456:	d009      	beq.n	800646c <UART_SetConfig+0x44c>
 8006458:	e00b      	b.n	8006472 <UART_SetConfig+0x452>
 800645a:	2300      	movs	r3, #0
 800645c:	77fb      	strb	r3, [r7, #31]
 800645e:	e00e      	b.n	800647e <UART_SetConfig+0x45e>
 8006460:	2302      	movs	r3, #2
 8006462:	77fb      	strb	r3, [r7, #31]
 8006464:	e00b      	b.n	800647e <UART_SetConfig+0x45e>
 8006466:	2304      	movs	r3, #4
 8006468:	77fb      	strb	r3, [r7, #31]
 800646a:	e008      	b.n	800647e <UART_SetConfig+0x45e>
 800646c:	2308      	movs	r3, #8
 800646e:	77fb      	strb	r3, [r7, #31]
 8006470:	e005      	b.n	800647e <UART_SetConfig+0x45e>
 8006472:	2310      	movs	r3, #16
 8006474:	77fb      	strb	r3, [r7, #31]
 8006476:	bf00      	nop
 8006478:	e001      	b.n	800647e <UART_SetConfig+0x45e>
 800647a:	2310      	movs	r3, #16
 800647c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006486:	d17f      	bne.n	8006588 <UART_SetConfig+0x568>
  {
    switch (clocksource)
 8006488:	7ffb      	ldrb	r3, [r7, #31]
 800648a:	2b08      	cmp	r3, #8
 800648c:	d85c      	bhi.n	8006548 <UART_SetConfig+0x528>
 800648e:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <UART_SetConfig+0x474>)
 8006490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006494:	080064b9 	.word	0x080064b9
 8006498:	080064d9 	.word	0x080064d9
 800649c:	080064f9 	.word	0x080064f9
 80064a0:	08006549 	.word	0x08006549
 80064a4:	08006511 	.word	0x08006511
 80064a8:	08006549 	.word	0x08006549
 80064ac:	08006549 	.word	0x08006549
 80064b0:	08006549 	.word	0x08006549
 80064b4:	08006531 	.word	0x08006531
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064b8:	f7fd fa24 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 80064bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	005a      	lsls	r2, r3, #1
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	085b      	lsrs	r3, r3, #1
 80064c8:	441a      	add	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	61bb      	str	r3, [r7, #24]
        break;
 80064d6:	e03a      	b.n	800654e <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064d8:	f7fd fa28 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 80064dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	005a      	lsls	r2, r3, #1
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	085b      	lsrs	r3, r3, #1
 80064e8:	441a      	add	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	61bb      	str	r3, [r7, #24]
        break;
 80064f6:	e02a      	b.n	800654e <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	085a      	lsrs	r2, r3, #1
 80064fe:	4b3b      	ldr	r3, [pc, #236]	; (80065ec <UART_SetConfig+0x5cc>)
 8006500:	4413      	add	r3, r2
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	6852      	ldr	r2, [r2, #4]
 8006506:	fbb3 f3f2 	udiv	r3, r3, r2
 800650a:	b29b      	uxth	r3, r3
 800650c:	61bb      	str	r3, [r7, #24]
        break;
 800650e:	e01e      	b.n	800654e <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006510:	f7fd f93a 	bl	8003788 <HAL_RCC_GetSysClockFreq>
 8006514:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	005a      	lsls	r2, r3, #1
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	085b      	lsrs	r3, r3, #1
 8006520:	441a      	add	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	fbb2 f3f3 	udiv	r3, r2, r3
 800652a:	b29b      	uxth	r3, r3
 800652c:	61bb      	str	r3, [r7, #24]
        break;
 800652e:	e00e      	b.n	800654e <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	085b      	lsrs	r3, r3, #1
 8006536:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006542:	b29b      	uxth	r3, r3
 8006544:	61bb      	str	r3, [r7, #24]
        break;
 8006546:	e002      	b.n	800654e <UART_SetConfig+0x52e>
      default:
        ret = HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	75fb      	strb	r3, [r7, #23]
        break;
 800654c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	2b0f      	cmp	r3, #15
 8006552:	d916      	bls.n	8006582 <UART_SetConfig+0x562>
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800655a:	d212      	bcs.n	8006582 <UART_SetConfig+0x562>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	b29b      	uxth	r3, r3
 8006560:	f023 030f 	bic.w	r3, r3, #15
 8006564:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	085b      	lsrs	r3, r3, #1
 800656a:	b29b      	uxth	r3, r3
 800656c:	f003 0307 	and.w	r3, r3, #7
 8006570:	b29a      	uxth	r2, r3
 8006572:	897b      	ldrh	r3, [r7, #10]
 8006574:	4313      	orrs	r3, r2
 8006576:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	897a      	ldrh	r2, [r7, #10]
 800657e:	60da      	str	r2, [r3, #12]
 8006580:	e07d      	b.n	800667e <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	75fb      	strb	r3, [r7, #23]
 8006586:	e07a      	b.n	800667e <UART_SetConfig+0x65e>
    }
  }
  else
  {
    switch (clocksource)
 8006588:	7ffb      	ldrb	r3, [r7, #31]
 800658a:	2b08      	cmp	r3, #8
 800658c:	d866      	bhi.n	800665c <UART_SetConfig+0x63c>
 800658e:	a201      	add	r2, pc, #4	; (adr r2, 8006594 <UART_SetConfig+0x574>)
 8006590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006594:	080065b9 	.word	0x080065b9
 8006598:	080065f1 	.word	0x080065f1
 800659c:	0800660f 	.word	0x0800660f
 80065a0:	0800665d 	.word	0x0800665d
 80065a4:	08006627 	.word	0x08006627
 80065a8:	0800665d 	.word	0x0800665d
 80065ac:	0800665d 	.word	0x0800665d
 80065b0:	0800665d 	.word	0x0800665d
 80065b4:	08006645 	.word	0x08006645
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065b8:	f7fd f9a4 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 80065bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	085a      	lsrs	r2, r3, #1
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	441a      	add	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	61bb      	str	r3, [r7, #24]
        break;
 80065d4:	e045      	b.n	8006662 <UART_SetConfig+0x642>
 80065d6:	bf00      	nop
 80065d8:	40005000 	.word	0x40005000
 80065dc:	40023800 	.word	0x40023800
 80065e0:	40011400 	.word	0x40011400
 80065e4:	40007800 	.word	0x40007800
 80065e8:	40007c00 	.word	0x40007c00
 80065ec:	01e84800 	.word	0x01e84800
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065f0:	f7fd f99c 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 80065f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	085a      	lsrs	r2, r3, #1
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	441a      	add	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	fbb2 f3f3 	udiv	r3, r2, r3
 8006608:	b29b      	uxth	r3, r3
 800660a:	61bb      	str	r3, [r7, #24]
        break;
 800660c:	e029      	b.n	8006662 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	085a      	lsrs	r2, r3, #1
 8006614:	4b1f      	ldr	r3, [pc, #124]	; (8006694 <UART_SetConfig+0x674>)
 8006616:	4413      	add	r3, r2
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	6852      	ldr	r2, [r2, #4]
 800661c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006620:	b29b      	uxth	r3, r3
 8006622:	61bb      	str	r3, [r7, #24]
        break;
 8006624:	e01d      	b.n	8006662 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006626:	f7fd f8af 	bl	8003788 <HAL_RCC_GetSysClockFreq>
 800662a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	085a      	lsrs	r2, r3, #1
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	441a      	add	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	fbb2 f3f3 	udiv	r3, r2, r3
 800663e:	b29b      	uxth	r3, r3
 8006640:	61bb      	str	r3, [r7, #24]
        break;
 8006642:	e00e      	b.n	8006662 <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	085b      	lsrs	r3, r3, #1
 800664a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	fbb2 f3f3 	udiv	r3, r2, r3
 8006656:	b29b      	uxth	r3, r3
 8006658:	61bb      	str	r3, [r7, #24]
        break;
 800665a:	e002      	b.n	8006662 <UART_SetConfig+0x642>
      default:
        ret = HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	75fb      	strb	r3, [r7, #23]
        break;
 8006660:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	2b0f      	cmp	r3, #15
 8006666:	d908      	bls.n	800667a <UART_SetConfig+0x65a>
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800666e:	d204      	bcs.n	800667a <UART_SetConfig+0x65a>
    {
      huart->Instance->BRR = usartdiv;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	60da      	str	r2, [r3, #12]
 8006678:	e001      	b.n	800667e <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800668a:	7dfb      	ldrb	r3, [r7, #23]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3720      	adds	r7, #32
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	00f42400 	.word	0x00f42400

08006698 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	2bff      	cmp	r3, #255	; 0xff
 80066a6:	d904      	bls.n	80066b2 <UART_AdvFeatureConfig+0x1a>
 80066a8:	f640 3143 	movw	r1, #2883	; 0xb43
 80066ac:	489f      	ldr	r0, [pc, #636]	; (800692c <UART_AdvFeatureConfig+0x294>)
 80066ae:	f7fa fec1 	bl	8001434 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b6:	f003 0301 	and.w	r3, r3, #1
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d018      	beq.n	80066f0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d009      	beq.n	80066da <UART_AdvFeatureConfig+0x42>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066ce:	d004      	beq.n	80066da <UART_AdvFeatureConfig+0x42>
 80066d0:	f640 3148 	movw	r1, #2888	; 0xb48
 80066d4:	4895      	ldr	r0, [pc, #596]	; (800692c <UART_AdvFeatureConfig+0x294>)
 80066d6:	f7fa fead 	bl	8001434 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d018      	beq.n	800672e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006700:	2b00      	cmp	r3, #0
 8006702:	d009      	beq.n	8006718 <UART_AdvFeatureConfig+0x80>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800670c:	d004      	beq.n	8006718 <UART_AdvFeatureConfig+0x80>
 800670e:	f640 314f 	movw	r1, #2895	; 0xb4f
 8006712:	4886      	ldr	r0, [pc, #536]	; (800692c <UART_AdvFeatureConfig+0x294>)
 8006714:	f7fa fe8e 	bl	8001434 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006732:	f003 0304 	and.w	r3, r3, #4
 8006736:	2b00      	cmp	r3, #0
 8006738:	d018      	beq.n	800676c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673e:	2b00      	cmp	r3, #0
 8006740:	d009      	beq.n	8006756 <UART_AdvFeatureConfig+0xbe>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006746:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800674a:	d004      	beq.n	8006756 <UART_AdvFeatureConfig+0xbe>
 800674c:	f640 3156 	movw	r1, #2902	; 0xb56
 8006750:	4876      	ldr	r0, [pc, #472]	; (800692c <UART_AdvFeatureConfig+0x294>)
 8006752:	f7fa fe6f 	bl	8001434 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	f003 0308 	and.w	r3, r3, #8
 8006774:	2b00      	cmp	r3, #0
 8006776:	d018      	beq.n	80067aa <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800677c:	2b00      	cmp	r3, #0
 800677e:	d009      	beq.n	8006794 <UART_AdvFeatureConfig+0xfc>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006788:	d004      	beq.n	8006794 <UART_AdvFeatureConfig+0xfc>
 800678a:	f640 315d 	movw	r1, #2909	; 0xb5d
 800678e:	4867      	ldr	r0, [pc, #412]	; (800692c <UART_AdvFeatureConfig+0x294>)
 8006790:	f7fa fe50 	bl	8001434 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	f003 0310 	and.w	r3, r3, #16
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d018      	beq.n	80067e8 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d009      	beq.n	80067d2 <UART_AdvFeatureConfig+0x13a>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067c6:	d004      	beq.n	80067d2 <UART_AdvFeatureConfig+0x13a>
 80067c8:	f640 3164 	movw	r1, #2916	; 0xb64
 80067cc:	4857      	ldr	r0, [pc, #348]	; (800692c <UART_AdvFeatureConfig+0x294>)
 80067ce:	f7fa fe31 	bl	8001434 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ec:	f003 0320 	and.w	r3, r3, #32
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d018      	beq.n	8006826 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d009      	beq.n	8006810 <UART_AdvFeatureConfig+0x178>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006804:	d004      	beq.n	8006810 <UART_AdvFeatureConfig+0x178>
 8006806:	f640 316b 	movw	r1, #2923	; 0xb6b
 800680a:	4848      	ldr	r0, [pc, #288]	; (800692c <UART_AdvFeatureConfig+0x294>)
 800680c:	f7fa fe12 	bl	8001434 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682e:	2b00      	cmp	r3, #0
 8006830:	d059      	beq.n	80068e6 <UART_AdvFeatureConfig+0x24e>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a3e      	ldr	r2, [pc, #248]	; (8006930 <UART_AdvFeatureConfig+0x298>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d013      	beq.n	8006864 <UART_AdvFeatureConfig+0x1cc>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a3c      	ldr	r2, [pc, #240]	; (8006934 <UART_AdvFeatureConfig+0x29c>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d00e      	beq.n	8006864 <UART_AdvFeatureConfig+0x1cc>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a3b      	ldr	r2, [pc, #236]	; (8006938 <UART_AdvFeatureConfig+0x2a0>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d009      	beq.n	8006864 <UART_AdvFeatureConfig+0x1cc>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a39      	ldr	r2, [pc, #228]	; (800693c <UART_AdvFeatureConfig+0x2a4>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d004      	beq.n	8006864 <UART_AdvFeatureConfig+0x1cc>
 800685a:	f640 3172 	movw	r1, #2930	; 0xb72
 800685e:	4833      	ldr	r0, [pc, #204]	; (800692c <UART_AdvFeatureConfig+0x294>)
 8006860:	f7fa fde8 	bl	8001434 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006868:	2b00      	cmp	r3, #0
 800686a:	d009      	beq.n	8006880 <UART_AdvFeatureConfig+0x1e8>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006874:	d004      	beq.n	8006880 <UART_AdvFeatureConfig+0x1e8>
 8006876:	f640 3173 	movw	r1, #2931	; 0xb73
 800687a:	482c      	ldr	r0, [pc, #176]	; (800692c <UART_AdvFeatureConfig+0x294>)
 800687c:	f7fa fdda 	bl	8001434 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	430a      	orrs	r2, r1
 8006894:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800689e:	d122      	bne.n	80068e6 <UART_AdvFeatureConfig+0x24e>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d013      	beq.n	80068d0 <UART_AdvFeatureConfig+0x238>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068b0:	d00e      	beq.n	80068d0 <UART_AdvFeatureConfig+0x238>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068ba:	d009      	beq.n	80068d0 <UART_AdvFeatureConfig+0x238>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80068c4:	d004      	beq.n	80068d0 <UART_AdvFeatureConfig+0x238>
 80068c6:	f640 3178 	movw	r1, #2936	; 0xb78
 80068ca:	4818      	ldr	r0, [pc, #96]	; (800692c <UART_AdvFeatureConfig+0x294>)
 80068cc:	f7fa fdb2 	bl	8001434 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d018      	beq.n	8006924 <UART_AdvFeatureConfig+0x28c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d009      	beq.n	800690e <UART_AdvFeatureConfig+0x276>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006902:	d004      	beq.n	800690e <UART_AdvFeatureConfig+0x276>
 8006904:	f44f 6138 	mov.w	r1, #2944	; 0xb80
 8006908:	4808      	ldr	r0, [pc, #32]	; (800692c <UART_AdvFeatureConfig+0x294>)
 800690a:	f7fa fd93 	bl	8001434 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	430a      	orrs	r2, r1
 8006922:	605a      	str	r2, [r3, #4]
  }
}
 8006924:	bf00      	nop
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	08006d68 	.word	0x08006d68
 8006930:	40011000 	.word	0x40011000
 8006934:	40004400 	.word	0x40004400
 8006938:	40004800 	.word	0x40004800
 800693c:	40011400 	.word	0x40011400

08006940 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af02      	add	r7, sp, #8
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800694e:	f7fb fad5 	bl	8001efc <HAL_GetTick>
 8006952:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0308 	and.w	r3, r3, #8
 800695e:	2b08      	cmp	r3, #8
 8006960:	d10e      	bne.n	8006980 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006962:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f82a 	bl	80069ca <UART_WaitOnFlagUntilTimeout>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e020      	b.n	80069c2 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0304 	and.w	r3, r3, #4
 800698a:	2b04      	cmp	r3, #4
 800698c:	d10e      	bne.n	80069ac <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800698e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f814 	bl	80069ca <UART_WaitOnFlagUntilTimeout>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e00a      	b.n	80069c2 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2220      	movs	r2, #32
 80069b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2220      	movs	r2, #32
 80069b6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b084      	sub	sp, #16
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	60f8      	str	r0, [r7, #12]
 80069d2:	60b9      	str	r1, [r7, #8]
 80069d4:	603b      	str	r3, [r7, #0]
 80069d6:	4613      	mov	r3, r2
 80069d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069da:	e05d      	b.n	8006a98 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e2:	d059      	beq.n	8006a98 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e4:	f7fb fa8a 	bl	8001efc <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d302      	bcc.n	80069fa <UART_WaitOnFlagUntilTimeout+0x30>
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d11b      	bne.n	8006a32 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a08:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 0201 	bic.w	r2, r2, #1
 8006a18:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2220      	movs	r2, #32
 8006a24:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e042      	b.n	8006ab8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0304 	and.w	r3, r3, #4
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d02b      	beq.n	8006a98 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a4e:	d123      	bne.n	8006a98 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a58:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a68:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 0201 	bic.w	r2, r2, #1
 8006a78:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2220      	movs	r2, #32
 8006a84:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e00f      	b.n	8006ab8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	69da      	ldr	r2, [r3, #28]
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	bf0c      	ite	eq
 8006aa8:	2301      	moveq	r3, #1
 8006aaa:	2300      	movne	r3, #0
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	461a      	mov	r2, r3
 8006ab0:	79fb      	ldrb	r3, [r7, #7]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d092      	beq.n	80069dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006ad6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689a      	ldr	r2, [r3, #8]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 0201 	bic.w	r2, r2, #1
 8006ae6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2220      	movs	r2, #32
 8006aec:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f7ff fa6a 	bl	8005ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b24:	bf00      	nop
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b42:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2220      	movs	r2, #32
 8006b48:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7ff fa47 	bl	8005fe4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b56:	bf00      	nop
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
	...

08006b60 <__libc_init_array>:
 8006b60:	b570      	push	{r4, r5, r6, lr}
 8006b62:	4e0d      	ldr	r6, [pc, #52]	; (8006b98 <__libc_init_array+0x38>)
 8006b64:	4c0d      	ldr	r4, [pc, #52]	; (8006b9c <__libc_init_array+0x3c>)
 8006b66:	1ba4      	subs	r4, r4, r6
 8006b68:	10a4      	asrs	r4, r4, #2
 8006b6a:	2500      	movs	r5, #0
 8006b6c:	42a5      	cmp	r5, r4
 8006b6e:	d109      	bne.n	8006b84 <__libc_init_array+0x24>
 8006b70:	4e0b      	ldr	r6, [pc, #44]	; (8006ba0 <__libc_init_array+0x40>)
 8006b72:	4c0c      	ldr	r4, [pc, #48]	; (8006ba4 <__libc_init_array+0x44>)
 8006b74:	f000 f820 	bl	8006bb8 <_init>
 8006b78:	1ba4      	subs	r4, r4, r6
 8006b7a:	10a4      	asrs	r4, r4, #2
 8006b7c:	2500      	movs	r5, #0
 8006b7e:	42a5      	cmp	r5, r4
 8006b80:	d105      	bne.n	8006b8e <__libc_init_array+0x2e>
 8006b82:	bd70      	pop	{r4, r5, r6, pc}
 8006b84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b88:	4798      	blx	r3
 8006b8a:	3501      	adds	r5, #1
 8006b8c:	e7ee      	b.n	8006b6c <__libc_init_array+0xc>
 8006b8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b92:	4798      	blx	r3
 8006b94:	3501      	adds	r5, #1
 8006b96:	e7f2      	b.n	8006b7e <__libc_init_array+0x1e>
 8006b98:	08006dc4 	.word	0x08006dc4
 8006b9c:	08006dc4 	.word	0x08006dc4
 8006ba0:	08006dc4 	.word	0x08006dc4
 8006ba4:	08006dc8 	.word	0x08006dc8

08006ba8 <memset>:
 8006ba8:	4402      	add	r2, r0
 8006baa:	4603      	mov	r3, r0
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d100      	bne.n	8006bb2 <memset+0xa>
 8006bb0:	4770      	bx	lr
 8006bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8006bb6:	e7f9      	b.n	8006bac <memset+0x4>

08006bb8 <_init>:
 8006bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bba:	bf00      	nop
 8006bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bbe:	bc08      	pop	{r3}
 8006bc0:	469e      	mov	lr, r3
 8006bc2:	4770      	bx	lr

08006bc4 <_fini>:
 8006bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc6:	bf00      	nop
 8006bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bca:	bc08      	pop	{r3}
 8006bcc:	469e      	mov	lr, r3
 8006bce:	4770      	bx	lr
