
CubeRev21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007080  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08007278  08007278  00017278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007464  08007464  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007464  08007464  00017464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800746c  0800746c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800746c  0800746c  0001746c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007470  08007470  00017470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  2000000c  08007480  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08007480  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d53e  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002237  00000000  00000000  0002d578  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ba0  00000000  00000000  0002f7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a68  00000000  00000000  00030350  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d996  00000000  00000000  00030db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c765  00000000  00000000  0005e74e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010fb58  00000000  00000000  0006aeb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017aa0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d6c  00000000  00000000  0017aa88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08007260 	.word	0x08007260

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08007260 	.word	0x08007260

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800053c:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <MX_CRC_Init+0x3c>)
 800053e:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <MX_CRC_Init+0x40>)
 8000540:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_CRC_Init+0x3c>)
 8000544:	2200      	movs	r2, #0
 8000546:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000548:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <MX_CRC_Init+0x3c>)
 800054a:	2200      	movs	r2, #0
 800054c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_CRC_Init+0x3c>)
 8000550:	2200      	movs	r2, #0
 8000552:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <MX_CRC_Init+0x3c>)
 8000556:	2200      	movs	r2, #0
 8000558:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <MX_CRC_Init+0x3c>)
 800055c:	2203      	movs	r2, #3
 800055e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <MX_CRC_Init+0x3c>)
 8000562:	f002 f80d 	bl	8002580 <HAL_CRC_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800056c:	f001 f930 	bl	80017d0 <Error_Handler>
  }

}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	2000002c 	.word	0x2000002c
 8000578:	40023000 	.word	0x40023000

0800057c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <HAL_CRC_MspInit+0x38>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d10b      	bne.n	80005a6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <HAL_CRC_MspInit+0x3c>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a09      	ldr	r2, [pc, #36]	; (80005b8 <HAL_CRC_MspInit+0x3c>)
 8000594:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <HAL_CRC_MspInit+0x3c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	40023000 	.word	0x40023000
 80005b8:	40023800 	.word	0x40023800

080005bc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b090      	sub	sp, #64	; 0x40
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005d2:	4bb2      	ldr	r3, [pc, #712]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4ab1      	ldr	r2, [pc, #708]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005d8:	f043 0310 	orr.w	r3, r3, #16
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4baf      	ldr	r3, [pc, #700]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0310 	and.w	r3, r3, #16
 80005e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80005e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80005ea:	4bac      	ldr	r3, [pc, #688]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4aab      	ldr	r2, [pc, #684]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4ba9      	ldr	r3, [pc, #676]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4ba6      	ldr	r3, [pc, #664]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4aa5      	ldr	r2, [pc, #660]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4ba3      	ldr	r3, [pc, #652]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	623b      	str	r3, [r7, #32]
 8000618:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800061a:	4ba0      	ldr	r3, [pc, #640]	; (800089c <MX_GPIO_Init+0x2e0>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a9f      	ldr	r2, [pc, #636]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000620:	f043 0320 	orr.w	r3, r3, #32
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b9d      	ldr	r3, [pc, #628]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0320 	and.w	r3, r3, #32
 800062e:	61fb      	str	r3, [r7, #28]
 8000630:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000632:	4b9a      	ldr	r3, [pc, #616]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a99      	ldr	r2, [pc, #612]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b97      	ldr	r3, [pc, #604]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000646:	61bb      	str	r3, [r7, #24]
 8000648:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b94      	ldr	r3, [pc, #592]	; (800089c <MX_GPIO_Init+0x2e0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a93      	ldr	r2, [pc, #588]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b91      	ldr	r3, [pc, #580]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b8e      	ldr	r3, [pc, #568]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a8d      	ldr	r2, [pc, #564]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b8b      	ldr	r3, [pc, #556]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800067a:	4b88      	ldr	r3, [pc, #544]	; (800089c <MX_GPIO_Init+0x2e0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a87      	ldr	r2, [pc, #540]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000680:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b85      	ldr	r3, [pc, #532]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000692:	4b82      	ldr	r3, [pc, #520]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a81      	ldr	r2, [pc, #516]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b7f      	ldr	r3, [pc, #508]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006aa:	4b7c      	ldr	r3, [pc, #496]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a7b      	ldr	r2, [pc, #492]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006b0:	f043 0308 	orr.w	r3, r3, #8
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b79      	ldr	r3, [pc, #484]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0308 	and.w	r3, r3, #8
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80006c2:	4b76      	ldr	r3, [pc, #472]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a75      	ldr	r2, [pc, #468]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b73      	ldr	r3, [pc, #460]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED_4_Pin|LWL_OUT_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	f244 0108 	movw	r1, #16392	; 0x4008
 80006e0:	486f      	ldr	r0, [pc, #444]	; (80008a0 <MX_GPIO_Init+0x2e4>)
 80006e2:	f002 fc6d 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_3_Pin|LED_2_Pin|LED_1_Pin|SD_CS_Pin
 80006e6:	2200      	movs	r2, #0
 80006e8:	f24e 4138 	movw	r1, #58424	; 0xe438
 80006ec:	486d      	ldr	r0, [pc, #436]	; (80008a4 <MX_GPIO_Init+0x2e8>)
 80006ee:	f002 fc67 	bl	8002fc0 <HAL_GPIO_WritePin>
                          |nCS_DMS1_Pin|nCS_DMS2_Pin|nCS_DMS3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, nCS_DMS4_Pin|nCS_DMS5_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2103      	movs	r1, #3
 80006f6:	486c      	ldr	r0, [pc, #432]	; (80008a8 <MX_GPIO_Init+0x2ec>)
 80006f8:	f002 fc62 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCS_DMS6_GPIO_Port, nCS_DMS6_Pin, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2180      	movs	r1, #128	; 0x80
 8000700:	486a      	ldr	r0, [pc, #424]	; (80008ac <MX_GPIO_Init+0x2f0>)
 8000702:	f002 fc5d 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, FL1_HLD_Pin|FL1_WP_Pin|FL1_RES_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800070c:	4868      	ldr	r0, [pc, #416]	; (80008b0 <MX_GPIO_Init+0x2f4>)
 800070e:	f002 fc57 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL1_CS2_GPIO_Port, FL1_CS2_Pin, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000718:	4865      	ldr	r0, [pc, #404]	; (80008b0 <MX_GPIO_Init+0x2f4>)
 800071a:	f002 fc51 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL1_CS1_GPIO_Port, FL1_CS1_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000724:	4863      	ldr	r0, [pc, #396]	; (80008b4 <MX_GPIO_Init+0x2f8>)
 8000726:	f002 fc4b 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, nCS_PT3_Pin|FL2_HLD_Pin|FL2_RES_Pin|FL2_WP_Pin
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 4167 	mov.w	r1, #59136	; 0xe700
 8000730:	4861      	ldr	r0, [pc, #388]	; (80008b8 <MX_GPIO_Init+0x2fc>)
 8000732:	f002 fc45 	bl	8002fc0 <HAL_GPIO_WritePin>
                          |nCS_PT2_Pin|nCS_PT1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FL2_CS2_Pin|FL2_CS1_Pin, GPIO_PIN_SET);
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800073c:	485e      	ldr	r0, [pc, #376]	; (80008b8 <MX_GPIO_Init+0x2fc>)
 800073e:	f002 fc3f 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
 8000742:	f64f 7318 	movw	r3, #65304	; 0xff18
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000748:	2303      	movs	r3, #3
 800074a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000754:	4619      	mov	r1, r3
 8000756:	4855      	ldr	r0, [pc, #340]	; (80008ac <MX_GPIO_Init+0x2f0>)
 8000758:	f002 f884 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LWL_IN_Pin;
 800075c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000760:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000762:	2300      	movs	r3, #0
 8000764:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LWL_IN_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800076e:	4619      	mov	r1, r3
 8000770:	484b      	ldr	r0, [pc, #300]	; (80008a0 <MX_GPIO_Init+0x2e4>)
 8000772:	f002 f877 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000776:	f24e 33ff 	movw	r3, #58367	; 0xe3ff
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800077c:	2303      	movs	r3, #3
 800077e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000784:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000788:	4619      	mov	r1, r3
 800078a:	484c      	ldr	r0, [pc, #304]	; (80008bc <MX_GPIO_Init+0x300>)
 800078c:	f002 f86a 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI10 PI11 PI12 PI13
                           PI15 PI0 PI1 PI2
                           PI4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000790:	f64b 4317 	movw	r3, #48151	; 0xbc17
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000796:	2303      	movs	r3, #3
 8000798:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800079e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007a2:	4619      	mov	r1, r3
 80007a4:	483e      	ldr	r0, [pc, #248]	; (80008a0 <MX_GPIO_Init+0x2e4>)
 80007a6:	f002 f85d 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF6
                           PF11 PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 80007aa:	f641 0347 	movw	r3, #6215	; 0x1847
 80007ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b0:	2303      	movs	r3, #3
 80007b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007bc:	4619      	mov	r1, r3
 80007be:	4839      	ldr	r0, [pc, #228]	; (80008a4 <MX_GPIO_Init+0x2e8>)
 80007c0:	f002 f850 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LED_4_Pin|LWL_OUT_Pin;
 80007c4:	f244 0308 	movw	r3, #16392	; 0x4008
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80007d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007da:	4619      	mov	r1, r3
 80007dc:	4830      	ldr	r0, [pc, #192]	; (80008a0 <MX_GPIO_Init+0x2e4>)
 80007de:	f002 f841 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LED_1_Pin|SD_CS_Pin
 80007e2:	f24e 4338 	movw	r3, #58424	; 0xe438
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |nCS_DMS1_Pin|nCS_DMS2_Pin|nCS_DMS3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f8:	4619      	mov	r1, r3
 80007fa:	482a      	ldr	r0, [pc, #168]	; (80008a4 <MX_GPIO_Init+0x2e8>)
 80007fc:	f002 f832 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH2 PH3
                           PH4 PH5 PH6 PH7
                           PH8 PH13 PH14 PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000800:	f24e 13ff 	movw	r3, #57855	; 0xe1ff
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000806:	2303      	movs	r3, #3
 8000808:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800080e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000812:	4619      	mov	r1, r3
 8000814:	4826      	ldr	r0, [pc, #152]	; (80008b0 <MX_GPIO_Init+0x2f4>)
 8000816:	f002 f825 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800081a:	231e      	movs	r3, #30
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800081e:	2303      	movs	r3, #3
 8000820:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800082a:	4619      	mov	r1, r3
 800082c:	4824      	ldr	r0, [pc, #144]	; (80008c0 <MX_GPIO_Init+0x304>)
 800082e:	f002 f819 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000832:	f640 73e3 	movw	r3, #4067	; 0xfe3
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000838:	2303      	movs	r3, #3
 800083a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000840:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000844:	4619      	mov	r1, r3
 8000846:	481b      	ldr	r0, [pc, #108]	; (80008b4 <MX_GPIO_Init+0x2f8>)
 8000848:	f002 f80c 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ0 PJ1 PJ2 PJ3
                           PJ4 PJ5 PJ12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800084c:	f241 033f 	movw	r3, #4159	; 0x103f
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000852:	2303      	movs	r3, #3
 8000854:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800085a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800085e:	4619      	mov	r1, r3
 8000860:	4818      	ldr	r0, [pc, #96]	; (80008c4 <MX_GPIO_Init+0x308>)
 8000862:	f001 ffff 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = nCS_DMS4_Pin|nCS_DMS5_Pin;
 8000866:	2303      	movs	r3, #3
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800087a:	4619      	mov	r1, r3
 800087c:	480a      	ldr	r0, [pc, #40]	; (80008a8 <MX_GPIO_Init+0x2ec>)
 800087e:	f001 fff1 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nCS_DMS6_Pin;
 8000882:	2380      	movs	r3, #128	; 0x80
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(nCS_DMS6_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000896:	4619      	mov	r1, r3
 8000898:	e016      	b.n	80008c8 <MX_GPIO_Init+0x30c>
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	40022000 	.word	0x40022000
 80008a4:	40021400 	.word	0x40021400
 80008a8:	40021800 	.word	0x40021800
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40021c00 	.word	0x40021c00
 80008b4:	40020400 	.word	0x40020400
 80008b8:	40020c00 	.word	0x40020c00
 80008bc:	40020800 	.word	0x40020800
 80008c0:	40020000 	.word	0x40020000
 80008c4:	40022400 	.word	0x40022400
 80008c8:	485d      	ldr	r0, [pc, #372]	; (8000a40 <MX_GPIO_Init+0x484>)
 80008ca:	f001 ffcb 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = FL1_HLD_Pin|FL1_WP_Pin|FL1_RES_Pin|FL1_CS2_Pin;
 80008ce:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e4:	4619      	mov	r1, r3
 80008e6:	4857      	ldr	r0, [pc, #348]	; (8000a44 <MX_GPIO_Init+0x488>)
 80008e8:	f001 ffbc 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FL1_CS1_Pin;
 80008ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FL1_CS1_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000902:	4619      	mov	r1, r3
 8000904:	4850      	ldr	r0, [pc, #320]	; (8000a48 <MX_GPIO_Init+0x48c>)
 8000906:	f001 ffad 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = nCS_PT3_Pin|FL2_HLD_Pin|FL2_RES_Pin|FL2_CS2_Pin
 800090a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FL2_CS1_Pin|FL2_WP_Pin|nCS_PT2_Pin|nCS_PT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800091c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000920:	4619      	mov	r1, r3
 8000922:	484a      	ldr	r0, [pc, #296]	; (8000a4c <MX_GPIO_Init+0x490>)
 8000924:	f001 ff9e 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MS_SEL_Pin;
 8000928:	2304      	movs	r3, #4
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MS_SEL_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000938:	4619      	mov	r1, r3
 800093a:	4845      	ldr	r0, [pc, #276]	; (8000a50 <MX_GPIO_Init+0x494>)
 800093c:	f001 ff92 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG5 PG6 PG7
                           PG8 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000940:	f64f 73e8 	movw	r3, #65512	; 0xffe8
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000946:	2303      	movs	r3, #3
 8000948:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800094e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000952:	4619      	mov	r1, r3
 8000954:	483e      	ldr	r0, [pc, #248]	; (8000a50 <MX_GPIO_Init+0x494>)
 8000956:	f001 ff85 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDRDY_DMS1_Pin;
 800095a:	2310      	movs	r3, #16
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095e:	4b3d      	ldr	r3, [pc, #244]	; (8000a54 <MX_GPIO_Init+0x498>)
 8000960:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(nDRDY_DMS1_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800096a:	4619      	mov	r1, r3
 800096c:	4838      	ldr	r0, [pc, #224]	; (8000a50 <MX_GPIO_Init+0x494>)
 800096e:	f001 ff79 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = nDRDY_DMS2_Pin|nDRDY_DMS3_Pin|nDRDY_DMS5_Pin|nDRDY_DMS6_Pin;
 8000972:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000978:	4b36      	ldr	r3, [pc, #216]	; (8000a54 <MX_GPIO_Init+0x498>)
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000984:	4619      	mov	r1, r3
 8000986:	4834      	ldr	r0, [pc, #208]	; (8000a58 <MX_GPIO_Init+0x49c>)
 8000988:	f001 ff6c 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDRDY_DMS4_Pin;
 800098c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000992:	2300      	movs	r3, #0
 8000994:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(nDRDY_DMS4_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800099e:	4619      	mov	r1, r3
 80009a0:	482d      	ldr	r0, [pc, #180]	; (8000a58 <MX_GPIO_Init+0x49c>)
 80009a2:	f001 ff5f 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80009a6:	23fb      	movs	r3, #251	; 0xfb
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009aa:	2303      	movs	r3, #3
 80009ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009b6:	4619      	mov	r1, r3
 80009b8:	4824      	ldr	r0, [pc, #144]	; (8000a4c <MX_GPIO_Init+0x490>)
 80009ba:	f001 ff53 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = nDRDY_PT3_Pin|nDRDY_PT2_Pin|nDRDY_PT1_Pin;
 80009be:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c4:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <MX_GPIO_Init+0x498>)
 80009c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80009cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d0:	4619      	mov	r1, r3
 80009d2:	4822      	ldr	r0, [pc, #136]	; (8000a5c <MX_GPIO_Init+0x4a0>)
 80009d4:	f001 ff46 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK3 PK4 PK5 PK6
                           PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80009d8:	23f8      	movs	r3, #248	; 0xf8
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009dc:	2303      	movs	r3, #3
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80009e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e8:	4619      	mov	r1, r3
 80009ea:	481d      	ldr	r0, [pc, #116]	; (8000a60 <MX_GPIO_Init+0x4a4>)
 80009ec:	f001 ff3a 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SODS_OPT_Pin|SOE_OPT_Pin|LO_OPT_Pin;
 80009f0:	23e0      	movs	r3, #224	; 0xe0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_GPIO_Init+0x498>)
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a00:	4619      	mov	r1, r3
 8000a02:	4818      	ldr	r0, [pc, #96]	; (8000a64 <MX_GPIO_Init+0x4a8>)
 8000a04:	f001 ff2e 	bl	8002864 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2105      	movs	r1, #5
 8000a0c:	200a      	movs	r0, #10
 8000a0e:	f001 fd67 	bl	80024e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000a12:	200a      	movs	r0, #10
 8000a14:	f001 fd90 	bl	8002538 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2105      	movs	r1, #5
 8000a1c:	2017      	movs	r0, #23
 8000a1e:	f001 fd5f 	bl	80024e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a22:	2017      	movs	r0, #23
 8000a24:	f001 fd88 	bl	8002538 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2105      	movs	r1, #5
 8000a2c:	2028      	movs	r0, #40	; 0x28
 8000a2e:	f001 fd57 	bl	80024e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a32:	2028      	movs	r0, #40	; 0x28
 8000a34:	f001 fd80 	bl	8002538 <HAL_NVIC_EnableIRQ>

}
 8000a38:	bf00      	nop
 8000a3a:	3740      	adds	r7, #64	; 0x40
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40021c00 	.word	0x40021c00
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	40021800 	.word	0x40021800
 8000a54:	10110000 	.word	0x10110000
 8000a58:	40020000 	.word	0x40020000
 8000a5c:	40022400 	.word	0x40022400
 8000a60:	40022800 	.word	0x40022800
 8000a64:	40022000 	.word	0x40022000

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6c:	f001 fbc9 	bl	8002202 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a70:	f000 f83c 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a74:	f7ff fda2 	bl	80005bc <MX_GPIO_Init>
  MX_SPI2_Init();
 8000a78:	f000 febc 	bl	80017f4 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000a7c:	f000 fef8 	bl	8001870 <MX_SPI3_Init>
  MX_SPI6_Init();
 8000a80:	f000 ffb0 	bl	80019e4 <MX_SPI6_Init>
  MX_UART4_Init();
 8000a84:	f001 fa06 	bl	8001e94 <MX_UART4_Init>
  MX_UART8_Init();
 8000a88:	f001 fa64 	bl	8001f54 <MX_UART8_Init>
  MX_UART5_Init();
 8000a8c:	f001 fa32 	bl	8001ef4 <MX_UART5_Init>
  MX_CRC_Init();
 8000a90:	f7ff fd52 	bl	8000538 <MX_CRC_Init>
  MX_SPI4_Init();
 8000a94:	f000 ff2a 	bl	80018ec <MX_SPI4_Init>
  MX_SPI5_Init();
 8000a98:	f000 ff66 	bl	8001968 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);  //clear all LEDs
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2120      	movs	r1, #32
 8000aa0:	480f      	ldr	r0, [pc, #60]	; (8000ae0 <main+0x78>)
 8000aa2:	f002 fa8d 	bl	8002fc0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2110      	movs	r1, #16
 8000aaa:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <main+0x78>)
 8000aac:	f002 fa88 	bl	8002fc0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2108      	movs	r1, #8
 8000ab4:	480a      	ldr	r0, [pc, #40]	; (8000ae0 <main+0x78>)
 8000ab6:	f002 fa83 	bl	8002fc0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac0:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <main+0x7c>)
 8000ac2:	f002 fa7d 	bl	8002fc0 <HAL_GPIO_WritePin>

  if (!HAL_GPIO_ReadPin(MS_SEL_GPIO_Port, MS_SEL_Pin)) {
 8000ac6:	2104      	movs	r1, #4
 8000ac8:	4807      	ldr	r0, [pc, #28]	; (8000ae8 <main+0x80>)
 8000aca:	f002 fa59 	bl	8002f80 <HAL_GPIO_ReadPin>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d102      	bne.n	8000ada <main+0x72>
    main_master();
 8000ad4:	f000 f89e 	bl	8000c14 <main_master>
 8000ad8:	e001      	b.n	8000ade <main+0x76>
  } else { //Slave loop
    main_slave();
 8000ada:	f000 f8df 	bl	8000c9c <main_slave>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <main+0x76>
 8000ae0:	40021400 	.word	0x40021400
 8000ae4:	40022000 	.word	0x40022000
 8000ae8:	40021800 	.word	0x40021800

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b0b8      	sub	sp, #224	; 0xe0
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000af6:	2234      	movs	r2, #52	; 0x34
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f006 fba8 	bl	8007250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b10:	f107 0308 	add.w	r3, r7, #8
 8000b14:	2290      	movs	r2, #144	; 0x90
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f006 fb99 	bl	8007250 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	4b3b      	ldr	r3, [pc, #236]	; (8000c0c <SystemClock_Config+0x120>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a3a      	ldr	r2, [pc, #232]	; (8000c0c <SystemClock_Config+0x120>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b38      	ldr	r3, [pc, #224]	; (8000c0c <SystemClock_Config+0x120>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b36:	4b36      	ldr	r3, [pc, #216]	; (8000c10 <SystemClock_Config+0x124>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a35      	ldr	r2, [pc, #212]	; (8000c10 <SystemClock_Config+0x124>)
 8000b3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b40:	6013      	str	r3, [r2, #0]
 8000b42:	4b33      	ldr	r3, [pc, #204]	; (8000c10 <SystemClock_Config+0x124>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b54:	2301      	movs	r3, #1
 8000b56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b5a:	2310      	movs	r3, #16
 8000b5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b60:	2302      	movs	r3, #2
 8000b62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b72:	23c0      	movs	r3, #192	; 0xc0
 8000b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b84:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f002 fab9 	bl	8003100 <HAL_RCC_OscConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000b94:	f000 fe1c 	bl	80017d0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b98:	f002 fa62 	bl	8003060 <HAL_PWREx_EnableOverDrive>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000ba2:	f000 fe15 	bl	80017d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba6:	230f      	movs	r3, #15
 8000ba8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bac:	2302      	movs	r3, #2
 8000bae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bb8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000bc0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000bc8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000bcc:	2106      	movs	r1, #6
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f002 fe06 	bl	80037e0 <HAL_RCC_ClockConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000bda:	f000 fdf9 	bl	80017d0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART5
 8000bde:	f44f 5318 	mov.w	r3, #9728	; 0x2600
 8000be2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART8;
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f003 f881 	bl	8003cfc <HAL_RCCEx_PeriphCLKConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000c00:	f000 fde6 	bl	80017d0 <Error_Handler>
  }
}
 8000c04:	bf00      	nop
 8000c06:	37e0      	adds	r7, #224	; 0xe0
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40007000 	.word	0x40007000

08000c14 <main_master>:

/* USER CODE BEGIN 4 */
void main_master(void) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);  //ON = MS set to Master
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	481b      	ldr	r0, [pc, #108]	; (8000c8c <main_master+0x78>)
 8000c20:	f002 f9ce 	bl	8002fc0 <HAL_GPIO_WritePin>
  //uint8_t bufferOff[3] = {0x01, 0x03, 0x05};
  //uint8_t bufferOn[3] = {0x02, 0x04, 0x06};

  int DMS = 4;
 8000c24:	2304      	movs	r3, #4
 8000c26:	607b      	str	r3, [r7, #4]
  adc_scan_start(DMS - 1, 20, 1, 1000); //0 50 100 250 500 750 1000 1500
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	b258      	sxtb	r0, r3
 8000c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c36:	2201      	movs	r2, #1
 8000c38:	2114      	movs	r1, #20
 8000c3a:	f000 f9e7 	bl	800100c <adc_scan_start>
  HAL_Delay(1000);
 8000c3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c42:	f001 fb3b 	bl	80022bc <HAL_Delay>

  HAL_UART_Transmit(&huart4, 66, 2, 1000000);
 8000c46:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <main_master+0x7c>)
 8000c48:	2202      	movs	r2, #2
 8000c4a:	2142      	movs	r1, #66	; 0x42
 8000c4c:	4811      	ldr	r0, [pc, #68]	; (8000c94 <main_master+0x80>)
 8000c4e:	f005 fa79 	bl	8006144 <HAL_UART_Transmit>


  while (1) { //Master loop


	  data = adc_scan(DMS - 1, 0x01);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	3b01      	subs	r3, #1
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	b25b      	sxtb	r3, r3
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 f8b6 	bl	8000dd0 <adc_scan>
 8000c64:	4603      	mov	r3, r0
 8000c66:	461a      	mov	r2, r3
 8000c68:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <main_master+0x84>)
 8000c6a:	801a      	strh	r2, [r3, #0]
	  uint8_t dout = data /2UL;
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <main_master+0x84>)
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	085b      	lsrs	r3, r3, #1
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	70fb      	strb	r3, [r7, #3]
	  HAL_UART_Transmit(&huart4, (uint8_t *)&dout, sizeof(dout), 1000000);
 8000c78:	1cf9      	adds	r1, r7, #3
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <main_master+0x7c>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <main_master+0x80>)
 8000c80:	f005 fa60 	bl	8006144 <HAL_UART_Transmit>
	  //uint16_t tdata = 99;
	  //HAL_UART_Transmit(&huart4, (uint8_t *)&tdata, sizeof(tdata), 100);


	  HAL_Delay(100);
 8000c84:	2064      	movs	r0, #100	; 0x64
 8000c86:	f001 fb19 	bl	80022bc <HAL_Delay>
  while (1) { //Master loop
 8000c8a:	e7e2      	b.n	8000c52 <main_master+0x3e>
 8000c8c:	40021400 	.word	0x40021400
 8000c90:	000f4240 	.word	0x000f4240
 8000c94:	20000344 	.word	0x20000344
 8000c98:	20000028 	.word	0x20000028

08000c9c <main_slave>:
    HAL_Delay(100);
    */
  }
}

void main_slave(void) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  uint8_t buffer[1] = {0x00};
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	713b      	strb	r3, [r7, #4]
  while (1) {
    HAL_UART_Receive(&huart5, buffer, sizeof(buffer), 5);
 8000ca6:	1d39      	adds	r1, r7, #4
 8000ca8:	2305      	movs	r3, #5
 8000caa:	2201      	movs	r2, #1
 8000cac:	481e      	ldr	r0, [pc, #120]	; (8000d28 <main_slave+0x8c>)
 8000cae:	f005 fada 	bl	8006266 <HAL_UART_Receive>
    if (buffer[0] == 0x01) {
 8000cb2:	793b      	ldrb	r3, [r7, #4]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d105      	bne.n	8000cc4 <main_slave+0x28>
      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2110      	movs	r1, #16
 8000cbc:	481b      	ldr	r0, [pc, #108]	; (8000d2c <main_slave+0x90>)
 8000cbe:	f002 f97f 	bl	8002fc0 <HAL_GPIO_WritePin>
 8000cc2:	e02d      	b.n	8000d20 <main_slave+0x84>
    } else if (buffer[0] == 0x02) {
 8000cc4:	793b      	ldrb	r3, [r7, #4]
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d105      	bne.n	8000cd6 <main_slave+0x3a>
      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2110      	movs	r1, #16
 8000cce:	4817      	ldr	r0, [pc, #92]	; (8000d2c <main_slave+0x90>)
 8000cd0:	f002 f976 	bl	8002fc0 <HAL_GPIO_WritePin>
 8000cd4:	e024      	b.n	8000d20 <main_slave+0x84>
    } else if (buffer[0] == 0x03) {
 8000cd6:	793b      	ldrb	r3, [r7, #4]
 8000cd8:	2b03      	cmp	r3, #3
 8000cda:	d105      	bne.n	8000ce8 <main_slave+0x4c>
      HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2108      	movs	r1, #8
 8000ce0:	4812      	ldr	r0, [pc, #72]	; (8000d2c <main_slave+0x90>)
 8000ce2:	f002 f96d 	bl	8002fc0 <HAL_GPIO_WritePin>
 8000ce6:	e01b      	b.n	8000d20 <main_slave+0x84>
    } else if (buffer[0] == 0x04) {
 8000ce8:	793b      	ldrb	r3, [r7, #4]
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	d105      	bne.n	8000cfa <main_slave+0x5e>
      HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2108      	movs	r1, #8
 8000cf2:	480e      	ldr	r0, [pc, #56]	; (8000d2c <main_slave+0x90>)
 8000cf4:	f002 f964 	bl	8002fc0 <HAL_GPIO_WritePin>
 8000cf8:	e012      	b.n	8000d20 <main_slave+0x84>
    }  else if (buffer[0] == 0x05) {
 8000cfa:	793b      	ldrb	r3, [r7, #4]
 8000cfc:	2b05      	cmp	r3, #5
 8000cfe:	d106      	bne.n	8000d0e <main_slave+0x72>
      HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d06:	480a      	ldr	r0, [pc, #40]	; (8000d30 <main_slave+0x94>)
 8000d08:	f002 f95a 	bl	8002fc0 <HAL_GPIO_WritePin>
 8000d0c:	e008      	b.n	8000d20 <main_slave+0x84>
    } else if (buffer[0] == 0x06) {
 8000d0e:	793b      	ldrb	r3, [r7, #4]
 8000d10:	2b06      	cmp	r3, #6
 8000d12:	d105      	bne.n	8000d20 <main_slave+0x84>
      HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <main_slave+0x94>)
 8000d1c:	f002 f950 	bl	8002fc0 <HAL_GPIO_WritePin>
    }
    buffer[1] = 0x00;
 8000d20:	2300      	movs	r3, #0
 8000d22:	717b      	strb	r3, [r7, #5]
    HAL_UART_Receive(&huart5, buffer, sizeof(buffer), 5);
 8000d24:	e7bf      	b.n	8000ca6 <main_slave+0xa>
 8000d26:	bf00      	nop
 8000d28:	20000244 	.word	0x20000244
 8000d2c:	40021400 	.word	0x40021400
 8000d30:	40022000 	.word	0x40022000

08000d34 <cs_enable>:
  }
}

int cs_enable(int8_t id){
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(port_from_id(id), pin_from_id(id), GPIO_PIN_RESET);
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 fb64 	bl	8001410 <port_from_id>
 8000d48:	4604      	mov	r4, r0
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 fb20 	bl	8001394 <pin_from_id>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2200      	movs	r2, #0
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	f002 f930 	bl	8002fc0 <HAL_GPIO_WritePin>
	return 0;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd90      	pop	{r4, r7, pc}

08000d6a <cs_disable>:

int cs_disable(int8_t id){
 8000d6a:	b590      	push	{r4, r7, lr}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(port_from_id(id), pin_from_id(id), GPIO_PIN_SET);
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 fb49 	bl	8001410 <port_from_id>
 8000d7e:	4604      	mov	r4, r0
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 fb05 	bl	8001394 <pin_from_id>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4620      	mov	r0, r4
 8000d92:	f002 f915 	bl	8002fc0 <HAL_GPIO_WritePin>
	return 0;
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd90      	pop	{r4, r7, pc}

08000da0 <wr_spi>:

int wr_spi(int8_t id, uint8_t cmd){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	460a      	mov	r2, r1
 8000daa:	71fb      	strb	r3, [r7, #7]
 8000dac:	4613      	mov	r3, r2
 8000dae:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Transmit(get_hspi_from_id(id), &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 fbe9 	bl	800158c <get_hspi_from_id>
 8000dba:	1db9      	adds	r1, r7, #6
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f004 f9af 	bl	8005124 <HAL_SPI_Transmit>
	return 0;
 8000dc6:	2300      	movs	r3, #0
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <adc_scan>:

uint16_t adc_scan(int8_t id, uint8_t chn){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	460a      	mov	r2, r1
 8000dda:	71fb      	strb	r3, [r7, #7]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	71bb      	strb	r3, [r7, #6]
	uint16_t data=0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	81fb      	strh	r3, [r7, #14]

	  switch(chn)
 8000de4:	79bb      	ldrb	r3, [r7, #6]
 8000de6:	2bfb      	cmp	r3, #251	; 0xfb
 8000de8:	f000 8081 	beq.w	8000eee <adc_scan+0x11e>
 8000dec:	2bfb      	cmp	r3, #251	; 0xfb
 8000dee:	dc0b      	bgt.n	8000e08 <adc_scan+0x38>
 8000df0:	2b23      	cmp	r3, #35	; 0x23
 8000df2:	d033      	beq.n	8000e5c <adc_scan+0x8c>
 8000df4:	2b23      	cmp	r3, #35	; 0x23
 8000df6:	dc02      	bgt.n	8000dfe <adc_scan+0x2e>
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d012      	beq.n	8000e22 <adc_scan+0x52>
 8000dfc:	e101      	b.n	8001002 <adc_scan+0x232>
 8000dfe:	2bf9      	cmp	r3, #249	; 0xf9
 8000e00:	d049      	beq.n	8000e96 <adc_scan+0xc6>
 8000e02:	2bfa      	cmp	r3, #250	; 0xfa
 8000e04:	d05d      	beq.n	8000ec2 <adc_scan+0xf2>
 8000e06:	e0fc      	b.n	8001002 <adc_scan+0x232>
 8000e08:	2bfd      	cmp	r3, #253	; 0xfd
 8000e0a:	f000 80aa 	beq.w	8000f62 <adc_scan+0x192>
 8000e0e:	2bfd      	cmp	r3, #253	; 0xfd
 8000e10:	f2c0 8083 	blt.w	8000f1a <adc_scan+0x14a>
 8000e14:	2bfe      	cmp	r3, #254	; 0xfe
 8000e16:	f000 80c8 	beq.w	8000faa <adc_scan+0x1da>
 8000e1a:	2bff      	cmp	r3, #255	; 0xff
 8000e1c:	f000 80db 	beq.w	8000fd6 <adc_scan+0x206>
 8000e20:	e0ef      	b.n	8001002 <adc_scan+0x232>
	  {
	    case 0x01:
	      wr_reg(id, REG_IDAC1, IDAC1_I1DIR0 | IDAC1_I2DIR1);
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	2201      	movs	r2, #1
 8000e28:	210b      	movs	r1, #11
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 fc39 	bl	80016a2 <wr_reg>
	      wr_reg(id, REG_MUX0, MUX0_SP0 | MUX0_SN1);
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	2201      	movs	r2, #1
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 fc32 	bl	80016a2 <wr_reg>
	      data = rd_data(id);
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f9f3 	bl	800122e <rd_data>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	81fb      	strh	r3, [r7, #14]
	      wr_reg(id, REG_IDAC1, IDAC1_I1DIROFF | IDAC1_I2DIROFF);
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	22ff      	movs	r2, #255	; 0xff
 8000e52:	210b      	movs	r1, #11
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 fc24 	bl	80016a2 <wr_reg>
	    //	wr_cmd(id, 0xFF);
	    	//data = rd_data(id);

	      break;
 8000e5a:	e0d2      	b.n	8001002 <adc_scan+0x232>
	    case 0x23:
	      wr_reg(id, REG_IDAC1, IDAC1_I1DIR2 | IDAC1_I2DIR3);
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	2223      	movs	r2, #35	; 0x23
 8000e62:	210b      	movs	r1, #11
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 fc1c 	bl	80016a2 <wr_reg>
	      wr_reg(id, REG_MUX0, MUX0_SP2 | MUX0_SN3);
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	2213      	movs	r2, #19
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 fc15 	bl	80016a2 <wr_reg>
	      data = rd_data(id);
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 f9d6 	bl	800122e <rd_data>
 8000e82:	4603      	mov	r3, r0
 8000e84:	81fb      	strh	r3, [r7, #14]
	      wr_reg(id, REG_IDAC1, IDAC1_I1DIROFF | IDAC1_I2DIROFF);
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	22ff      	movs	r2, #255	; 0xff
 8000e8c:	210b      	movs	r1, #11
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 fc07 	bl	80016a2 <wr_reg>
	      break;
 8000e94:	e0b5      	b.n	8001002 <adc_scan+0x232>

	    case 0xF9: //offset measurement
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REFOB | MUX1_CALOFFSET);
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	2231      	movs	r2, #49	; 0x31
 8000e9c:	2102      	movs	r1, #2
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 fbff 	bl	80016a2 <wr_reg>
	      data = rd_data(id);
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f9c0 	bl	800122e <rd_data>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	81fb      	strh	r3, [r7, #14]
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REF0 | MUX1_CALNORMAL);
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	2220      	movs	r2, #32
 8000eb8:	2102      	movs	r1, #2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 fbf1 	bl	80016a2 <wr_reg>
	      break;
 8000ec0:	e09f      	b.n	8001002 <adc_scan+0x232>
	    case 0xFA: //gain measurement
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REFOB | MUX1_CALGAIN);
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	2232      	movs	r2, #50	; 0x32
 8000ec8:	2102      	movs	r1, #2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 fbe9 	bl	80016a2 <wr_reg>
	      data = rd_data(id);
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 f9aa 	bl	800122e <rd_data>
 8000eda:	4603      	mov	r3, r0
 8000edc:	81fb      	strh	r3, [r7, #14]
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REF0 | MUX1_CALNORMAL);
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	2102      	movs	r1, #2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fbdb 	bl	80016a2 <wr_reg>
	      break;
 8000eec:	e089      	b.n	8001002 <adc_scan+0x232>
	    case 0xFB: //temperature measurement
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REFOB | MUX1_CALTEMP);
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	2233      	movs	r2, #51	; 0x33
 8000ef4:	2102      	movs	r1, #2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 fbd3 	bl	80016a2 <wr_reg>
	      data = rd_data(id);
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 f994 	bl	800122e <rd_data>
 8000f06:	4603      	mov	r3, r0
 8000f08:	81fb      	strh	r3, [r7, #14]
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REF0 | MUX1_CALNORMAL);
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	2220      	movs	r2, #32
 8000f10:	2102      	movs	r1, #2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 fbc5 	bl	80016a2 <wr_reg>
	      break;
 8000f18:	e073      	b.n	8001002 <adc_scan+0x232>
	    case 0xFC: //REF1 measurement
	      wr_reg(id, REG_IDAC1, IDAC1_I1DIR0 | IDAC1_I2DIR1);
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	2201      	movs	r2, #1
 8000f20:	210b      	movs	r1, #11
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 fbbd 	bl	80016a2 <wr_reg>
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REFOB | MUX1_CALREF1);
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	2234      	movs	r2, #52	; 0x34
 8000f2e:	2102      	movs	r1, #2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 fbb6 	bl	80016a2 <wr_reg>
	      data = rd_data(id);
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f977 	bl	800122e <rd_data>
 8000f40:	4603      	mov	r3, r0
 8000f42:	81fb      	strh	r3, [r7, #14]
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REF0 | MUX1_CALNORMAL);
 8000f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f48:	2220      	movs	r2, #32
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fba8 	bl	80016a2 <wr_reg>
	      wr_reg(id, REG_IDAC1, IDAC1_I1DIROFF | IDAC1_I2DIROFF);
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	22ff      	movs	r2, #255	; 0xff
 8000f58:	210b      	movs	r1, #11
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 fba1 	bl	80016a2 <wr_reg>
	      break;
 8000f60:	e04f      	b.n	8001002 <adc_scan+0x232>
	    case 0xFD: //REF0 measurement
	      wr_reg(id, REG_IDAC1, IDAC1_I1DIR0 | IDAC1_I2DIR1);
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	2201      	movs	r2, #1
 8000f68:	210b      	movs	r1, #11
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 fb99 	bl	80016a2 <wr_reg>
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REFOB | MUX1_CALREF0);
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	2235      	movs	r2, #53	; 0x35
 8000f76:	2102      	movs	r1, #2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 fb92 	bl	80016a2 <wr_reg>
	      data = rd_data(id);
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f953 	bl	800122e <rd_data>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	81fb      	strh	r3, [r7, #14]
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REF0 | MUX1_CALNORMAL);
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	2220      	movs	r2, #32
 8000f92:	2102      	movs	r1, #2
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 fb84 	bl	80016a2 <wr_reg>
	      wr_reg(id, REG_IDAC1, IDAC1_I1DIROFF | IDAC1_I2DIROFF);
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	22ff      	movs	r2, #255	; 0xff
 8000fa0:	210b      	movs	r1, #11
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 fb7d 	bl	80016a2 <wr_reg>
	      break;
 8000fa8:	e02b      	b.n	8001002 <adc_scan+0x232>
	    case 0xFE: //AVDD measurement
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REFOB | MUX1_CALAVDD);
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	2236      	movs	r2, #54	; 0x36
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fb75 	bl	80016a2 <wr_reg>
	      data = rd_data(id);
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f936 	bl	800122e <rd_data>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	81fb      	strh	r3, [r7, #14]
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REF0 | MUX1_CALNORMAL);
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	2220      	movs	r2, #32
 8000fcc:	2102      	movs	r1, #2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 fb67 	bl	80016a2 <wr_reg>
	      break;
 8000fd4:	e015      	b.n	8001002 <adc_scan+0x232>
	    case 0xFF: //DVDD measurement
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REFOB | MUX1_CALDVDD);
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	2237      	movs	r2, #55	; 0x37
 8000fdc:	2102      	movs	r1, #2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 fb5f 	bl	80016a2 <wr_reg>
	      data = rd_data(id);
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f920 	bl	800122e <rd_data>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	81fb      	strh	r3, [r7, #14]
	      wr_reg(id, REG_MUX1, MUX1_INTOSC | MUX1_INTREFON | MUX1_REF0 | MUX1_CALNORMAL);
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	2220      	movs	r2, #32
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fb51 	bl	80016a2 <wr_reg>
	      break;
 8001000:	bf00      	nop
	  }

	  return data;
 8001002:	89fb      	ldrh	r3, [r7, #14]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <adc_scan_start>:

int16_t adc_scan_start(int8_t id, uint_least16_t drate, uint_least8_t gain, uint_least16_t current){
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	4604      	mov	r4, r0
 8001014:	4608      	mov	r0, r1
 8001016:	4611      	mov	r1, r2
 8001018:	461a      	mov	r2, r3
 800101a:	4623      	mov	r3, r4
 800101c:	71fb      	strb	r3, [r7, #7]
 800101e:	4603      	mov	r3, r0
 8001020:	80bb      	strh	r3, [r7, #4]
 8001022:	460b      	mov	r3, r1
 8001024:	71bb      	strb	r3, [r7, #6]
 8001026:	4613      	mov	r3, r2
 8001028:	807b      	strh	r3, [r7, #2]
	int16_t r = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	81fb      	strh	r3, [r7, #14]
	switch(drate)
 800102e:	88bb      	ldrh	r3, [r7, #4]
 8001030:	2ba0      	cmp	r3, #160	; 0xa0
 8001032:	d02d      	beq.n	8001090 <adc_scan_start+0x84>
 8001034:	2ba0      	cmp	r3, #160	; 0xa0
 8001036:	dc0b      	bgt.n	8001050 <adc_scan_start+0x44>
 8001038:	2b0a      	cmp	r3, #10
 800103a:	d01d      	beq.n	8001078 <adc_scan_start+0x6c>
 800103c:	2b0a      	cmp	r3, #10
 800103e:	dc02      	bgt.n	8001046 <adc_scan_start+0x3a>
 8001040:	2b05      	cmp	r3, #5
 8001042:	d016      	beq.n	8001072 <adc_scan_start+0x66>
 8001044:	e01e      	b.n	8001084 <adc_scan_start+0x78>
 8001046:	2b14      	cmp	r3, #20
 8001048:	d019      	beq.n	800107e <adc_scan_start+0x72>
 800104a:	2b50      	cmp	r3, #80	; 0x50
 800104c:	d01d      	beq.n	800108a <adc_scan_start+0x7e>
 800104e:	e019      	b.n	8001084 <adc_scan_start+0x78>
 8001050:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001054:	d022      	beq.n	800109c <adc_scan_start+0x90>
 8001056:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800105a:	dc03      	bgt.n	8001064 <adc_scan_start+0x58>
 800105c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001060:	d019      	beq.n	8001096 <adc_scan_start+0x8a>
 8001062:	e00f      	b.n	8001084 <adc_scan_start+0x78>
 8001064:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001068:	d01b      	beq.n	80010a2 <adc_scan_start+0x96>
 800106a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800106e:	d01b      	beq.n	80010a8 <adc_scan_start+0x9c>
 8001070:	e008      	b.n	8001084 <adc_scan_start+0x78>
	  {
	    case    5: drate = SYS0_DOR5;    break;
 8001072:	2300      	movs	r3, #0
 8001074:	80bb      	strh	r3, [r7, #4]
 8001076:	e01a      	b.n	80010ae <adc_scan_start+0xa2>
	    case   10: drate = SYS0_DOR10;   break;
 8001078:	2301      	movs	r3, #1
 800107a:	80bb      	strh	r3, [r7, #4]
 800107c:	e017      	b.n	80010ae <adc_scan_start+0xa2>
	    case   20: drate = SYS0_DOR20;   break;
 800107e:	2302      	movs	r3, #2
 8001080:	80bb      	strh	r3, [r7, #4]
 8001082:	e014      	b.n	80010ae <adc_scan_start+0xa2>
	    default:
	    case   40: drate = SYS0_DOR40;   break;
 8001084:	2303      	movs	r3, #3
 8001086:	80bb      	strh	r3, [r7, #4]
 8001088:	e011      	b.n	80010ae <adc_scan_start+0xa2>
	    case   80: drate = SYS0_DOR80;   break;
 800108a:	2304      	movs	r3, #4
 800108c:	80bb      	strh	r3, [r7, #4]
 800108e:	e00e      	b.n	80010ae <adc_scan_start+0xa2>
	    case  160: drate = SYS0_DOR160;  break;
 8001090:	2305      	movs	r3, #5
 8001092:	80bb      	strh	r3, [r7, #4]
 8001094:	e00b      	b.n	80010ae <adc_scan_start+0xa2>
	    case  320: drate = SYS0_DOR320;  break;
 8001096:	2306      	movs	r3, #6
 8001098:	80bb      	strh	r3, [r7, #4]
 800109a:	e008      	b.n	80010ae <adc_scan_start+0xa2>
	    case  640: drate = SYS0_DOR640;  break;
 800109c:	2307      	movs	r3, #7
 800109e:	80bb      	strh	r3, [r7, #4]
 80010a0:	e005      	b.n	80010ae <adc_scan_start+0xa2>
	    case 1000: drate = SYS0_DOR1000; break;
 80010a2:	2308      	movs	r3, #8
 80010a4:	80bb      	strh	r3, [r7, #4]
 80010a6:	e002      	b.n	80010ae <adc_scan_start+0xa2>
	    case 2000: drate = SYS0_DOR2000; break;
 80010a8:	2309      	movs	r3, #9
 80010aa:	80bb      	strh	r3, [r7, #4]
 80010ac:	bf00      	nop
	  }

	  switch(gain)
 80010ae:	79bb      	ldrb	r3, [r7, #6]
 80010b0:	2b10      	cmp	r3, #16
 80010b2:	d01a      	beq.n	80010ea <adc_scan_start+0xde>
 80010b4:	2b10      	cmp	r3, #16
 80010b6:	dc06      	bgt.n	80010c6 <adc_scan_start+0xba>
 80010b8:	2b04      	cmp	r3, #4
 80010ba:	d010      	beq.n	80010de <adc_scan_start+0xd2>
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d011      	beq.n	80010e4 <adc_scan_start+0xd8>
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d009      	beq.n	80010d8 <adc_scan_start+0xcc>
 80010c4:	e005      	b.n	80010d2 <adc_scan_start+0xc6>
 80010c6:	2b40      	cmp	r3, #64	; 0x40
 80010c8:	d015      	beq.n	80010f6 <adc_scan_start+0xea>
 80010ca:	2b80      	cmp	r3, #128	; 0x80
 80010cc:	d016      	beq.n	80010fc <adc_scan_start+0xf0>
 80010ce:	2b20      	cmp	r3, #32
 80010d0:	d00e      	beq.n	80010f0 <adc_scan_start+0xe4>
	  {
	    default:
	    case   1: gain = SYS0_PGA1;   break;
 80010d2:	2300      	movs	r3, #0
 80010d4:	71bb      	strb	r3, [r7, #6]
 80010d6:	e014      	b.n	8001102 <adc_scan_start+0xf6>
	    case   2: gain = SYS0_PGA2;   break;
 80010d8:	2310      	movs	r3, #16
 80010da:	71bb      	strb	r3, [r7, #6]
 80010dc:	e011      	b.n	8001102 <adc_scan_start+0xf6>
	    case   4: gain = SYS0_PGA4;   break;
 80010de:	2320      	movs	r3, #32
 80010e0:	71bb      	strb	r3, [r7, #6]
 80010e2:	e00e      	b.n	8001102 <adc_scan_start+0xf6>
	    case   8: gain = SYS0_PGA8;   break;
 80010e4:	2330      	movs	r3, #48	; 0x30
 80010e6:	71bb      	strb	r3, [r7, #6]
 80010e8:	e00b      	b.n	8001102 <adc_scan_start+0xf6>
	    case  16: gain = SYS0_PGA16;  break;
 80010ea:	2340      	movs	r3, #64	; 0x40
 80010ec:	71bb      	strb	r3, [r7, #6]
 80010ee:	e008      	b.n	8001102 <adc_scan_start+0xf6>
	    case  32: gain = SYS0_PGA32;  break;
 80010f0:	2350      	movs	r3, #80	; 0x50
 80010f2:	71bb      	strb	r3, [r7, #6]
 80010f4:	e005      	b.n	8001102 <adc_scan_start+0xf6>
	    case  64: gain = SYS0_PGA64;  break;
 80010f6:	2360      	movs	r3, #96	; 0x60
 80010f8:	71bb      	strb	r3, [r7, #6]
 80010fa:	e002      	b.n	8001102 <adc_scan_start+0xf6>
	    case 128: gain = SYS0_PGA128; break;
 80010fc:	2370      	movs	r3, #112	; 0x70
 80010fe:	71bb      	strb	r3, [r7, #6]
 8001100:	bf00      	nop
	  }

	  switch(current)
 8001102:	887b      	ldrh	r3, [r7, #2]
 8001104:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001108:	d020      	beq.n	800114c <adc_scan_start+0x140>
 800110a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800110e:	dc06      	bgt.n	800111e <adc_scan_start+0x112>
 8001110:	2b64      	cmp	r3, #100	; 0x64
 8001112:	d015      	beq.n	8001140 <adc_scan_start+0x134>
 8001114:	2bfa      	cmp	r3, #250	; 0xfa
 8001116:	d016      	beq.n	8001146 <adc_scan_start+0x13a>
 8001118:	2b32      	cmp	r3, #50	; 0x32
 800111a:	d00e      	beq.n	800113a <adc_scan_start+0x12e>
 800111c:	e00a      	b.n	8001134 <adc_scan_start+0x128>
 800111e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001122:	d019      	beq.n	8001158 <adc_scan_start+0x14c>
 8001124:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001128:	4293      	cmp	r3, r2
 800112a:	d018      	beq.n	800115e <adc_scan_start+0x152>
 800112c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001130:	4293      	cmp	r3, r2
 8001132:	d00e      	beq.n	8001152 <adc_scan_start+0x146>
	  {
	    default:
	    case    0: current = IDAC0_MAGOFF;    break;
 8001134:	2300      	movs	r3, #0
 8001136:	807b      	strh	r3, [r7, #2]
 8001138:	e014      	b.n	8001164 <adc_scan_start+0x158>
	    case   50: current = IDAC0_MAG50UA;   break;
 800113a:	2301      	movs	r3, #1
 800113c:	807b      	strh	r3, [r7, #2]
 800113e:	e011      	b.n	8001164 <adc_scan_start+0x158>
	    case  100: current = IDAC0_MAG100UA;  break;
 8001140:	2302      	movs	r3, #2
 8001142:	807b      	strh	r3, [r7, #2]
 8001144:	e00e      	b.n	8001164 <adc_scan_start+0x158>
	    case  250: current = IDAC0_MAG250UA;  break;
 8001146:	2303      	movs	r3, #3
 8001148:	807b      	strh	r3, [r7, #2]
 800114a:	e00b      	b.n	8001164 <adc_scan_start+0x158>
	    case  500: current = IDAC0_MAG500UA;  break;
 800114c:	2304      	movs	r3, #4
 800114e:	807b      	strh	r3, [r7, #2]
 8001150:	e008      	b.n	8001164 <adc_scan_start+0x158>
	    case  750: current = IDAC0_MAG750UA;  break;
 8001152:	2305      	movs	r3, #5
 8001154:	807b      	strh	r3, [r7, #2]
 8001156:	e005      	b.n	8001164 <adc_scan_start+0x158>
	    case 1000: current = IDAC0_MAG1000UA; break;
 8001158:	2306      	movs	r3, #6
 800115a:	807b      	strh	r3, [r7, #2]
 800115c:	e002      	b.n	8001164 <adc_scan_start+0x158>
	    case 1500: current = IDAC0_MAG1500UA; break;
 800115e:	2307      	movs	r3, #7
 8001160:	807b      	strh	r3, [r7, #2]
 8001162:	bf00      	nop
	  wr_reg(id, REG_SYS0, gain | drate);
	  wr_reg(id, REG_IDAC0, IDAC0_DOUTDRDY | current);
	  wr_reg(id, REG_IDAC1, IDAC1_I1DIROFF | IDAC1_I2DIROFF);
	  */

	  wr_cmd(id, CMD_RESET);
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	2106      	movs	r1, #6
 800116a:	4618      	mov	r0, r3
 800116c:	f000 fa4a 	bl	8001604 <wr_cmd>
	  wr_cmd(id, CMD_SELFOCAL);
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	2162      	movs	r1, #98	; 0x62
 8001176:	4618      	mov	r0, r3
 8001178:	f000 fa44 	bl	8001604 <wr_cmd>
	  r = (rd_reg(id, REG_IDAC0)&0xF0)>>4; //read revision
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	210a      	movs	r1, #10
 8001182:	4618      	mov	r0, r3
 8001184:	f000 fadc 	bl	8001740 <rd_reg>
 8001188:	4603      	mov	r3, r0
 800118a:	111b      	asrs	r3, r3, #4
 800118c:	b21b      	sxth	r3, r3
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	81fb      	strh	r3, [r7, #14]

	  wr_reg(id, REG_MUX0, 0x01);
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	2201      	movs	r2, #1
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f000 fa80 	bl	80016a2 <wr_reg>
	  wr_reg(id, REG_VBIAS, 0x00);
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	2200      	movs	r2, #0
 80011a8:	2101      	movs	r1, #1
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 fa79 	bl	80016a2 <wr_reg>
	  wr_reg(id, REG_MUX1, 0x30);
 80011b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b4:	2230      	movs	r2, #48	; 0x30
 80011b6:	2102      	movs	r1, #2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fa72 	bl	80016a2 <wr_reg>
	  wr_reg(id, REG_SYS0, gain | drate);
 80011be:	88bb      	ldrh	r3, [r7, #4]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	79bb      	ldrb	r3, [r7, #6]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	2103      	movs	r1, #3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 fa67 	bl	80016a2 <wr_reg>
	  wr_reg(id, REG_IDAC0, IDAC0_DOUTDRDY | current);
 80011d4:	887b      	ldrh	r3, [r7, #2]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	f043 0308 	orr.w	r3, r3, #8
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	210a      	movs	r1, #10
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 fa5c 	bl	80016a2 <wr_reg>
	  wr_reg(id, REG_IDAC1, 0x89);
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	2289      	movs	r2, #137	; 0x89
 80011f0:	210b      	movs	r1, #11
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fa55 	bl	80016a2 <wr_reg>
	  wr_reg(id, REG_GPIOCFG, 0x00);
 80011f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fc:	2200      	movs	r2, #0
 80011fe:	210c      	movs	r1, #12
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fa4e 	bl	80016a2 <wr_reg>
	  wr_reg(id, REG_GPIODIR, 0x00);
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	2200      	movs	r2, #0
 800120c:	210d      	movs	r1, #13
 800120e:	4618      	mov	r0, r3
 8001210:	f000 fa47 	bl	80016a2 <wr_reg>
	  wr_reg(id, REG_GPIODAT, 0x00);
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	2200      	movs	r2, #0
 800121a:	210e      	movs	r1, #14
 800121c:	4618      	mov	r0, r3
 800121e:	f000 fa40 	bl	80016a2 <wr_reg>

	  return r;
 8001222:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8001226:	4618      	mov	r0, r3
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	bd90      	pop	{r4, r7, pc}

0800122e <rd_data>:

uint16_t rd_data(int8_t id){
 800122e:	b590      	push	{r4, r7, lr}
 8001230:	b085      	sub	sp, #20
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	71fb      	strb	r3, [r7, #7]
	uint8_t d1, d2, d3, d4;
	wr_cmd(id, CMD_SYNC); //CMD_SYNC
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	2104      	movs	r1, #4
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f9e0 	bl	8001604 <wr_cmd>
	cs_enable(id);
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fd73 	bl	8000d34 <cs_enable>


	//wait dRDY
	while(HAL_GPIO_ReadPin(port_drdy_from_id(id), pin_drdy_from_id(id)) == GPIO_PIN_SET);
 800124e:	bf00      	nop
 8001250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001254:	4618      	mov	r0, r3
 8001256:	f000 f95b 	bl	8001510 <port_drdy_from_id>
 800125a:	4604      	mov	r4, r0
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	4618      	mov	r0, r3
 8001262:	f000 f915 	bl	8001490 <pin_drdy_from_id>
 8001266:	4603      	mov	r3, r0
 8001268:	4619      	mov	r1, r3
 800126a:	4620      	mov	r0, r4
 800126c:	f001 fe88 	bl	8002f80 <HAL_GPIO_ReadPin>
 8001270:	4603      	mov	r3, r0
 8001272:	2b01      	cmp	r3, #1
 8001274:	d0ec      	beq.n	8001250 <rd_data+0x22>
	wr_spi(id, CMD_RDATA);
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	2112      	movs	r1, #18
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fd8f 	bl	8000da0 <wr_spi>
	HAL_SPI_Receive(get_hspi_from_id(id), &d1, sizeof(d1), HAL_MAX_DELAY);
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f980 	bl	800158c <get_hspi_from_id>
 800128c:	f107 010d 	add.w	r1, r7, #13
 8001290:	f04f 33ff 	mov.w	r3, #4294967295
 8001294:	2201      	movs	r2, #1
 8001296:	f004 f8bb 	bl	8005410 <HAL_SPI_Receive>
	d1 <<= 8;
 800129a:	2300      	movs	r3, #0
 800129c:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(get_hspi_from_id(id), &d3, sizeof(d3), HAL_MAX_DELAY);
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f972 	bl	800158c <get_hspi_from_id>
 80012a8:	f107 010b 	add.w	r1, r7, #11
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295
 80012b0:	2201      	movs	r2, #1
 80012b2:	f004 f8ad 	bl	8005410 <HAL_SPI_Receive>
	d1 |= d3;
 80012b6:	7b7a      	ldrb	r2, [r7, #13]
 80012b8:	7afb      	ldrb	r3, [r7, #11]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	737b      	strb	r3, [r7, #13]
	//wr_cmd(id, 0xFF);

	//wait dRDY
	while(HAL_GPIO_ReadPin(port_drdy_from_id(id), pin_drdy_from_id(id)) == GPIO_PIN_SET);
 80012c0:	bf00      	nop
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f922 	bl	8001510 <port_drdy_from_id>
 80012cc:	4604      	mov	r4, r0
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f8dc 	bl	8001490 <pin_drdy_from_id>
 80012d8:	4603      	mov	r3, r0
 80012da:	4619      	mov	r1, r3
 80012dc:	4620      	mov	r0, r4
 80012de:	f001 fe4f 	bl	8002f80 <HAL_GPIO_ReadPin>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d0ec      	beq.n	80012c2 <rd_data+0x94>
	wr_spi(id, CMD_RDATA);
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	2112      	movs	r1, #18
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fd56 	bl	8000da0 <wr_spi>
	HAL_SPI_Receive(get_hspi_from_id(id), &d2, sizeof(d2), HAL_MAX_DELAY);
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 f947 	bl	800158c <get_hspi_from_id>
 80012fe:	f107 010c 	add.w	r1, r7, #12
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	2201      	movs	r2, #1
 8001308:	f004 f882 	bl	8005410 <HAL_SPI_Receive>
	d2 <<= 8;
 800130c:	2300      	movs	r3, #0
 800130e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Receive(get_hspi_from_id(id), &d4, sizeof(d4), HAL_MAX_DELAY);
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	4618      	mov	r0, r3
 8001316:	f000 f939 	bl	800158c <get_hspi_from_id>
 800131a:	f107 010a 	add.w	r1, r7, #10
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	2201      	movs	r2, #1
 8001324:	f004 f874 	bl	8005410 <HAL_SPI_Receive>
	d2 |= d4;
 8001328:	7b3a      	ldrb	r2, [r7, #12]
 800132a:	7abb      	ldrb	r3, [r7, #10]
 800132c:	4313      	orrs	r3, r2
 800132e:	b2db      	uxtb	r3, r3
 8001330:	733b      	strb	r3, [r7, #12]
	//wr_cmd(id, 0xFF);


	cs_disable(id);
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fd17 	bl	8000d6a <cs_disable>
	//return d1;
	int16_t out = (d1+d2)/2UL;
 800133c:	7b7b      	ldrb	r3, [r7, #13]
 800133e:	461a      	mov	r2, r3
 8001340:	7b3b      	ldrb	r3, [r7, #12]
 8001342:	4413      	add	r3, r2
 8001344:	085b      	lsrs	r3, r3, #1
 8001346:	81fb      	strh	r3, [r7, #14]
	return out;
 8001348:	89fb      	ldrh	r3, [r7, #14]
}
 800134a:	4618      	mov	r0, r3
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}

08001352 <rd_spi>:

int rd_spi(int8_t id){
 8001352:	b580      	push	{r7, lr}
 8001354:	b084      	sub	sp, #16
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	71fb      	strb	r3, [r7, #7]
	uint8_t d1;
	cs_enable(id);
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fce7 	bl	8000d34 <cs_enable>
	HAL_SPI_Receive(get_hspi_from_id(id), &d1, sizeof(d1), HAL_MAX_DELAY);
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f90e 	bl	800158c <get_hspi_from_id>
 8001370:	f107 010f 	add.w	r1, r7, #15
 8001374:	f04f 33ff 	mov.w	r3, #4294967295
 8001378:	2201      	movs	r2, #1
 800137a:	f004 f849 	bl	8005410 <HAL_SPI_Receive>
	cs_disable(id);
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fcf1 	bl	8000d6a <cs_disable>
	return d1;
 8001388:	7bfb      	ldrb	r3, [r7, #15]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <pin_from_id>:

uint16_t pin_from_id(int8_t id){
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	switch(id){
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	2b08      	cmp	r3, #8
 80013a4:	d82c      	bhi.n	8001400 <pin_from_id+0x6c>
 80013a6:	a201      	add	r2, pc, #4	; (adr r2, 80013ac <pin_from_id+0x18>)
 80013a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ac:	080013d1 	.word	0x080013d1
 80013b0:	080013d7 	.word	0x080013d7
 80013b4:	080013dd 	.word	0x080013dd
 80013b8:	080013e3 	.word	0x080013e3
 80013bc:	080013e7 	.word	0x080013e7
 80013c0:	080013eb 	.word	0x080013eb
 80013c4:	080013ef 	.word	0x080013ef
 80013c8:	080013f5 	.word	0x080013f5
 80013cc:	080013fb 	.word	0x080013fb
			case 0: //DMS 1
				return nCS_DMS1_Pin;
 80013d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d4:	e016      	b.n	8001404 <pin_from_id+0x70>
			case 1: //DMS 2
				return nCS_DMS2_Pin;
 80013d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013da:	e013      	b.n	8001404 <pin_from_id+0x70>
			case 2: //DMS 3
				return nCS_DMS3_Pin;
 80013dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013e0:	e010      	b.n	8001404 <pin_from_id+0x70>
			case 3: //DMS 4
				return nCS_DMS4_Pin;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00e      	b.n	8001404 <pin_from_id+0x70>
			case 4: //DMS 5
				return nCS_DMS5_Pin;
 80013e6:	2302      	movs	r3, #2
 80013e8:	e00c      	b.n	8001404 <pin_from_id+0x70>
			case 5: //DMS 6
				return nCS_DMS6_Pin;
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	e00a      	b.n	8001404 <pin_from_id+0x70>
			case 6: //PT 1
				return nCS_PT1_Pin;
 80013ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013f2:	e007      	b.n	8001404 <pin_from_id+0x70>
			case 7: //PT 2
				return nCS_PT2_Pin;
 80013f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013f8:	e004      	b.n	8001404 <pin_from_id+0x70>
			case 8: //PT 3
				return nCS_PT3_Pin;
 80013fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013fe:	e001      	b.n	8001404 <pin_from_id+0x70>
			default: //DMS 1
				return nCS_DMS1_Pin;
 8001400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		}
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <port_from_id>:

GPIO_TypeDef* port_from_id(int8_t id){
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
	switch(id){
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	2b08      	cmp	r3, #8
 8001420:	d826      	bhi.n	8001470 <port_from_id+0x60>
 8001422:	a201      	add	r2, pc, #4	; (adr r2, 8001428 <port_from_id+0x18>)
 8001424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001428:	0800144d 	.word	0x0800144d
 800142c:	08001451 	.word	0x08001451
 8001430:	08001455 	.word	0x08001455
 8001434:	08001459 	.word	0x08001459
 8001438:	0800145d 	.word	0x0800145d
 800143c:	08001461 	.word	0x08001461
 8001440:	08001465 	.word	0x08001465
 8001444:	08001469 	.word	0x08001469
 8001448:	0800146d 	.word	0x0800146d
		case 0: //DMS 1
			return nCS_DMS1_GPIO_Port;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <port_from_id+0x70>)
 800144e:	e010      	b.n	8001472 <port_from_id+0x62>
		case 1: //DMS 2
			return nCS_DMS2_GPIO_Port;
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <port_from_id+0x70>)
 8001452:	e00e      	b.n	8001472 <port_from_id+0x62>
		case 2: //DMS 3
			return nCS_DMS3_GPIO_Port;
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <port_from_id+0x70>)
 8001456:	e00c      	b.n	8001472 <port_from_id+0x62>
		case 3: //DMS 4
			return nCS_DMS4_GPIO_Port;
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <port_from_id+0x74>)
 800145a:	e00a      	b.n	8001472 <port_from_id+0x62>
		case 4: //DMS 5
			return nCS_DMS5_GPIO_Port;
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <port_from_id+0x74>)
 800145e:	e008      	b.n	8001472 <port_from_id+0x62>
		case 5: //DMS 6
			return nCS_DMS6_GPIO_Port;
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <port_from_id+0x78>)
 8001462:	e006      	b.n	8001472 <port_from_id+0x62>
		case 6: //PT 1
			return nCS_PT1_GPIO_Port;
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <port_from_id+0x7c>)
 8001466:	e004      	b.n	8001472 <port_from_id+0x62>
		case 7: //PT 2
			return nCS_PT2_GPIO_Port;
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <port_from_id+0x7c>)
 800146a:	e002      	b.n	8001472 <port_from_id+0x62>
		case 8: //PT 3
			return nCS_PT3_GPIO_Port;
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <port_from_id+0x7c>)
 800146e:	e000      	b.n	8001472 <port_from_id+0x62>
		default: //DMS 1
			return nCS_DMS1_GPIO_Port;
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <port_from_id+0x70>)
	}
}
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40021400 	.word	0x40021400
 8001484:	40021800 	.word	0x40021800
 8001488:	40021000 	.word	0x40021000
 800148c:	40020c00 	.word	0x40020c00

08001490 <pin_drdy_from_id>:

uint16_t pin_drdy_from_id(int8_t id){
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
	switch(id){
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d82e      	bhi.n	8001500 <pin_drdy_from_id+0x70>
 80014a2:	a201      	add	r2, pc, #4	; (adr r2, 80014a8 <pin_drdy_from_id+0x18>)
 80014a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a8:	080014cd 	.word	0x080014cd
 80014ac:	080014d1 	.word	0x080014d1
 80014b0:	080014d7 	.word	0x080014d7
 80014b4:	080014dd 	.word	0x080014dd
 80014b8:	080014e3 	.word	0x080014e3
 80014bc:	080014e9 	.word	0x080014e9
 80014c0:	080014ef 	.word	0x080014ef
 80014c4:	080014f5 	.word	0x080014f5
 80014c8:	080014fb 	.word	0x080014fb
			case 0: //DMS 1
				return nDRDY_DMS1_Pin;
 80014cc:	2310      	movs	r3, #16
 80014ce:	e018      	b.n	8001502 <pin_drdy_from_id+0x72>
			case 1: //DMS 2
				return nDRDY_DMS2_Pin;
 80014d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014d4:	e015      	b.n	8001502 <pin_drdy_from_id+0x72>
			case 2: //DMS 3
				return nDRDY_DMS3_Pin;
 80014d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014da:	e012      	b.n	8001502 <pin_drdy_from_id+0x72>
			case 3: //DMS 4
				return nDRDY_DMS4_Pin;
 80014dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014e0:	e00f      	b.n	8001502 <pin_drdy_from_id+0x72>
			case 4: //DMS 5
				return nDRDY_DMS5_Pin;
 80014e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014e6:	e00c      	b.n	8001502 <pin_drdy_from_id+0x72>
			case 5: //DMS 6
				return nDRDY_DMS6_Pin;
 80014e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ec:	e009      	b.n	8001502 <pin_drdy_from_id+0x72>
			case 6: //PT 1
				return nDRDY_PT1_Pin;
 80014ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014f2:	e006      	b.n	8001502 <pin_drdy_from_id+0x72>
			case 7: //PT 2
				return nDRDY_PT2_Pin;
 80014f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014f8:	e003      	b.n	8001502 <pin_drdy_from_id+0x72>
			case 8: //PT 3
				return nDRDY_PT3_Pin;
 80014fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014fe:	e000      	b.n	8001502 <pin_drdy_from_id+0x72>
			default: //DMS 1
				return nDRDY_DMS1_Pin;
 8001500:	2310      	movs	r3, #16
		}
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop

08001510 <port_drdy_from_id>:

GPIO_TypeDef* port_drdy_from_id(int8_t id){
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
	switch(id){
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	2b08      	cmp	r3, #8
 8001520:	d826      	bhi.n	8001570 <port_drdy_from_id+0x60>
 8001522:	a201      	add	r2, pc, #4	; (adr r2, 8001528 <port_drdy_from_id+0x18>)
 8001524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001528:	0800154d 	.word	0x0800154d
 800152c:	08001551 	.word	0x08001551
 8001530:	08001555 	.word	0x08001555
 8001534:	08001559 	.word	0x08001559
 8001538:	0800155d 	.word	0x0800155d
 800153c:	08001561 	.word	0x08001561
 8001540:	08001565 	.word	0x08001565
 8001544:	08001569 	.word	0x08001569
 8001548:	0800156d 	.word	0x0800156d
		case 0: //DMS 1
			return nDRDY_DMS1_GPIO_Port;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <port_drdy_from_id+0x70>)
 800154e:	e010      	b.n	8001572 <port_drdy_from_id+0x62>
		case 1: //DMS 2
			return nDRDY_DMS2_GPIO_Port;
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <port_drdy_from_id+0x74>)
 8001552:	e00e      	b.n	8001572 <port_drdy_from_id+0x62>
		case 2: //DMS 3
			return nDRDY_DMS3_GPIO_Port;
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <port_drdy_from_id+0x74>)
 8001556:	e00c      	b.n	8001572 <port_drdy_from_id+0x62>
		case 3: //DMS 4
			return nDRDY_DMS4_GPIO_Port;
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <port_drdy_from_id+0x74>)
 800155a:	e00a      	b.n	8001572 <port_drdy_from_id+0x62>
		case 4: //DMS 5
			return nDRDY_DMS5_GPIO_Port;
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <port_drdy_from_id+0x74>)
 800155e:	e008      	b.n	8001572 <port_drdy_from_id+0x62>
		case 5: //DMS 6
			return nDRDY_DMS6_GPIO_Port;
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <port_drdy_from_id+0x74>)
 8001562:	e006      	b.n	8001572 <port_drdy_from_id+0x62>
		case 6: //PT 1
			return nDRDY_PT1_GPIO_Port;
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <port_drdy_from_id+0x78>)
 8001566:	e004      	b.n	8001572 <port_drdy_from_id+0x62>
		case 7: //PT 2
			return nDRDY_PT2_GPIO_Port;
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <port_drdy_from_id+0x78>)
 800156a:	e002      	b.n	8001572 <port_drdy_from_id+0x62>
		case 8: //PT 3
			return nDRDY_PT3_GPIO_Port;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <port_drdy_from_id+0x78>)
 800156e:	e000      	b.n	8001572 <port_drdy_from_id+0x62>
		default: //DMS 1
			return nDRDY_DMS1_GPIO_Port;
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <port_drdy_from_id+0x70>)
	}
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40021800 	.word	0x40021800
 8001584:	40020000 	.word	0x40020000
 8001588:	40022400 	.word	0x40022400

0800158c <get_hspi_from_id>:

SPI_HandleTypeDef *get_hspi_from_id(int8_t id){
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
	switch(id){
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	2b08      	cmp	r3, #8
 800159c:	d826      	bhi.n	80015ec <get_hspi_from_id+0x60>
 800159e:	a201      	add	r2, pc, #4	; (adr r2, 80015a4 <get_hspi_from_id+0x18>)
 80015a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a4:	080015c9 	.word	0x080015c9
 80015a8:	080015cd 	.word	0x080015cd
 80015ac:	080015d1 	.word	0x080015d1
 80015b0:	080015d5 	.word	0x080015d5
 80015b4:	080015d9 	.word	0x080015d9
 80015b8:	080015dd 	.word	0x080015dd
 80015bc:	080015e1 	.word	0x080015e1
 80015c0:	080015e5 	.word	0x080015e5
 80015c4:	080015e9 	.word	0x080015e9
		case 0: //DMS 1
			return &hspi4;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <get_hspi_from_id+0x70>)
 80015ca:	e010      	b.n	80015ee <get_hspi_from_id+0x62>
		case 1: //DMS 2
			return &hspi4;
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <get_hspi_from_id+0x70>)
 80015ce:	e00e      	b.n	80015ee <get_hspi_from_id+0x62>
		case 2: //DMS 3
			return &hspi4;
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <get_hspi_from_id+0x70>)
 80015d2:	e00c      	b.n	80015ee <get_hspi_from_id+0x62>
		case 3: //DMS 4
			return &hspi4;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <get_hspi_from_id+0x70>)
 80015d6:	e00a      	b.n	80015ee <get_hspi_from_id+0x62>
		case 4: //DMS 5
			return &hspi4;
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <get_hspi_from_id+0x70>)
 80015da:	e008      	b.n	80015ee <get_hspi_from_id+0x62>
		case 5: //DMS 6
			return &hspi4;
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <get_hspi_from_id+0x70>)
 80015de:	e006      	b.n	80015ee <get_hspi_from_id+0x62>
		case 6: //PT 1
			return &hspi3;
 80015e0:	4b07      	ldr	r3, [pc, #28]	; (8001600 <get_hspi_from_id+0x74>)
 80015e2:	e004      	b.n	80015ee <get_hspi_from_id+0x62>
		case 7: //PT 2
			return &hspi3;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <get_hspi_from_id+0x74>)
 80015e6:	e002      	b.n	80015ee <get_hspi_from_id+0x62>
		case 8: //PT 3
			return &hspi3;
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <get_hspi_from_id+0x74>)
 80015ea:	e000      	b.n	80015ee <get_hspi_from_id+0x62>
		default: //DMS 1
			return &hspi4;
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <get_hspi_from_id+0x70>)
	}
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	200001e0 	.word	0x200001e0
 8001600:	2000017c 	.word	0x2000017c

08001604 <wr_cmd>:



int wr_cmd(int8_t id, uint8_t cmd){
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	460a      	mov	r2, r1
 800160e:	71fb      	strb	r3, [r7, #7]
 8001610:	4613      	mov	r3, r2
 8001612:	71bb      	strb	r3, [r7, #6]
	int8_t status = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	73fb      	strb	r3, [r7, #15]
	status+= cs_enable(id);
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fb89 	bl	8000d34 <cs_enable>
 8001622:	4603      	mov	r3, r0
 8001624:	b2da      	uxtb	r2, r3
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	4413      	add	r3, r2
 800162a:	b2db      	uxtb	r3, r3
 800162c:	73fb      	strb	r3, [r7, #15]
	status+= wr_spi(id, cmd);
 800162e:	79ba      	ldrb	r2, [r7, #6]
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	4611      	mov	r1, r2
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fbb2 	bl	8000da0 <wr_spi>
 800163c:	4603      	mov	r3, r0
 800163e:	b2da      	uxtb	r2, r3
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	4413      	add	r3, r2
 8001644:	b2db      	uxtb	r3, r3
 8001646:	73fb      	strb	r3, [r7, #15]
	if(cmd == CMD_SYNC)
 8001648:	79bb      	ldrb	r3, [r7, #6]
 800164a:	2b04      	cmp	r3, #4
 800164c:	d10c      	bne.n	8001668 <wr_cmd+0x64>
	{
		status+= wr_spi(id, cmd);
 800164e:	79ba      	ldrb	r2, [r7, #6]
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	4611      	mov	r1, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fba2 	bl	8000da0 <wr_spi>
 800165c:	4603      	mov	r3, r0
 800165e:	b2da      	uxtb	r2, r3
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	4413      	add	r3, r2
 8001664:	b2db      	uxtb	r3, r3
 8001666:	73fb      	strb	r3, [r7, #15]
    }
	status+= cs_disable(id);
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fb7c 	bl	8000d6a <cs_disable>
 8001672:	4603      	mov	r3, r0
 8001674:	b2da      	uxtb	r2, r3
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	4413      	add	r3, r2
 800167a:	b2db      	uxtb	r3, r3
 800167c:	73fb      	strb	r3, [r7, #15]
	if(cmd == CMD_RESET)
 800167e:	79bb      	ldrb	r3, [r7, #6]
 8001680:	2b06      	cmp	r3, #6
 8001682:	d103      	bne.n	800168c <wr_cmd+0x88>
	{
		HAL_Delay(1); //1ms
 8001684:	2001      	movs	r0, #1
 8001686:	f000 fe19 	bl	80022bc <HAL_Delay>
 800168a:	e005      	b.n	8001698 <wr_cmd+0x94>
	}
	else if(cmd == CMD_SELFOCAL)
 800168c:	79bb      	ldrb	r3, [r7, #6]
 800168e:	2b62      	cmp	r3, #98	; 0x62
 8001690:	d102      	bne.n	8001698 <wr_cmd+0x94>
	{
		HAL_Delay(10); //10ms
 8001692:	200a      	movs	r0, #10
 8001694:	f000 fe12 	bl	80022bc <HAL_Delay>
	}
	return 0;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <wr_reg>:

int wr_reg(int8_t id, uint8_t reg, uint8_t data){
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b084      	sub	sp, #16
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	71fb      	strb	r3, [r7, #7]
 80016ac:	460b      	mov	r3, r1
 80016ae:	71bb      	strb	r3, [r7, #6]
 80016b0:	4613      	mov	r3, r2
 80016b2:	717b      	strb	r3, [r7, #5]
	int8_t status = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	73fb      	strb	r3, [r7, #15]
	status += cs_enable(id);
 80016b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fb39 	bl	8000d34 <cs_enable>
 80016c2:	4603      	mov	r3, r0
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	4413      	add	r3, r2
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, CMD_WREG | reg);
 80016ce:	79bb      	ldrb	r3, [r7, #6]
 80016d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fb5f 	bl	8000da0 <wr_spi>
 80016e2:	4603      	mov	r3, r0
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	4413      	add	r3, r2
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, 0);
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	2100      	movs	r1, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fb53 	bl	8000da0 <wr_spi>
 80016fa:	4603      	mov	r3, r0
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	4413      	add	r3, r2
 8001702:	b2db      	uxtb	r3, r3
 8001704:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, data);
 8001706:	797a      	ldrb	r2, [r7, #5]
 8001708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170c:	4611      	mov	r1, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fb46 	bl	8000da0 <wr_spi>
 8001714:	4603      	mov	r3, r0
 8001716:	b2da      	uxtb	r2, r3
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	4413      	add	r3, r2
 800171c:	b2db      	uxtb	r3, r3
 800171e:	73fb      	strb	r3, [r7, #15]
	status += cs_disable(id);
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fb20 	bl	8000d6a <cs_disable>
 800172a:	4603      	mov	r3, r0
 800172c:	b2da      	uxtb	r2, r3
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	4413      	add	r3, r2
 8001732:	b2db      	uxtb	r3, r3
 8001734:	73fb      	strb	r3, [r7, #15]
	return 0;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <rd_reg>:

int rd_reg(int8_t id, uint8_t reg){
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	460a      	mov	r2, r1
 800174a:	71fb      	strb	r3, [r7, #7]
 800174c:	4613      	mov	r3, r2
 800174e:	71bb      	strb	r3, [r7, #6]
	int8_t status = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	73fb      	strb	r3, [r7, #15]
	uint8_t data;
	status += cs_enable(id);
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff faeb 	bl	8000d34 <cs_enable>
 800175e:	4603      	mov	r3, r0
 8001760:	b2da      	uxtb	r2, r3
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	4413      	add	r3, r2
 8001766:	b2db      	uxtb	r3, r3
 8001768:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, CMD_RREG | reg);
 800176a:	79bb      	ldrb	r3, [r7, #6]
 800176c:	f043 0320 	orr.w	r3, r3, #32
 8001770:	b2da      	uxtb	r2, r3
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fb11 	bl	8000da0 <wr_spi>
 800177e:	4603      	mov	r3, r0
 8001780:	b2da      	uxtb	r2, r3
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	4413      	add	r3, r2
 8001786:	b2db      	uxtb	r3, r3
 8001788:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, 0);
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fb05 	bl	8000da0 <wr_spi>
 8001796:	4603      	mov	r3, r0
 8001798:	b2da      	uxtb	r2, r3
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	4413      	add	r3, r2
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	73fb      	strb	r3, [r7, #15]
	data = rd_spi(id);
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fdd3 	bl	8001352 <rd_spi>
 80017ac:	4603      	mov	r3, r0
 80017ae:	73bb      	strb	r3, [r7, #14]
	status += cs_disable(id);
 80017b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fad8 	bl	8000d6a <cs_disable>
 80017ba:	4603      	mov	r3, r0
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	4413      	add	r3, r2
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	73fb      	strb	r3, [r7, #15]
	return data;
 80017c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi5;
SPI_HandleTypeDef hspi6;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80017f8:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <MX_SPI2_Init+0x74>)
 80017fa:	4a1c      	ldr	r2, [pc, #112]	; (800186c <MX_SPI2_Init+0x78>)
 80017fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017fe:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <MX_SPI2_Init+0x74>)
 8001800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001804:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001806:	4b18      	ldr	r3, [pc, #96]	; (8001868 <MX_SPI2_Init+0x74>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800180c:	4b16      	ldr	r3, [pc, #88]	; (8001868 <MX_SPI2_Init+0x74>)
 800180e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001812:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001814:	4b14      	ldr	r3, [pc, #80]	; (8001868 <MX_SPI2_Init+0x74>)
 8001816:	2200      	movs	r2, #0
 8001818:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800181a:	4b13      	ldr	r3, [pc, #76]	; (8001868 <MX_SPI2_Init+0x74>)
 800181c:	2200      	movs	r2, #0
 800181e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <MX_SPI2_Init+0x74>)
 8001822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001826:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001828:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <MX_SPI2_Init+0x74>)
 800182a:	2200      	movs	r2, #0
 800182c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <MX_SPI2_Init+0x74>)
 8001830:	2200      	movs	r2, #0
 8001832:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <MX_SPI2_Init+0x74>)
 8001836:	2200      	movs	r2, #0
 8001838:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <MX_SPI2_Init+0x74>)
 800183c:	2200      	movs	r2, #0
 800183e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001840:	4b09      	ldr	r3, [pc, #36]	; (8001868 <MX_SPI2_Init+0x74>)
 8001842:	2207      	movs	r2, #7
 8001844:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <MX_SPI2_Init+0x74>)
 8001848:	2200      	movs	r2, #0
 800184a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <MX_SPI2_Init+0x74>)
 800184e:	2208      	movs	r2, #8
 8001850:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <MX_SPI2_Init+0x74>)
 8001854:	f003 fabe 	bl	8004dd4 <HAL_SPI_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800185e:	f7ff ffb7 	bl	80017d0 <Error_Handler>
  }

}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000050 	.word	0x20000050
 800186c:	40003800 	.word	0x40003800

08001870 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <MX_SPI3_Init+0x74>)
 8001876:	4a1c      	ldr	r2, [pc, #112]	; (80018e8 <MX_SPI3_Init+0x78>)
 8001878:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <MX_SPI3_Init+0x74>)
 800187c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001880:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001882:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <MX_SPI3_Init+0x74>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001888:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <MX_SPI3_Init+0x74>)
 800188a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800188e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001890:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <MX_SPI3_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <MX_SPI3_Init+0x74>)
 8001898:	2200      	movs	r2, #0
 800189a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_SPI3_Init+0x74>)
 800189e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018a4:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <MX_SPI3_Init+0x74>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_SPI3_Init+0x74>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_SPI3_Init+0x74>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <MX_SPI3_Init+0x74>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_SPI3_Init+0x74>)
 80018be:	2207      	movs	r2, #7
 80018c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018c2:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <MX_SPI3_Init+0x74>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_SPI3_Init+0x74>)
 80018ca:	2208      	movs	r2, #8
 80018cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_SPI3_Init+0x74>)
 80018d0:	f003 fa80 	bl	8004dd4 <HAL_SPI_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80018da:	f7ff ff79 	bl	80017d0 <Error_Handler>
  }

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	2000017c 	.word	0x2000017c
 80018e8:	40003c00 	.word	0x40003c00

080018ec <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 80018f0:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <MX_SPI4_Init+0x74>)
 80018f2:	4a1c      	ldr	r2, [pc, #112]	; (8001964 <MX_SPI4_Init+0x78>)
 80018f4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80018f6:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <MX_SPI4_Init+0x74>)
 80018f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018fc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80018fe:	4b18      	ldr	r3, [pc, #96]	; (8001960 <MX_SPI4_Init+0x74>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001904:	4b16      	ldr	r3, [pc, #88]	; (8001960 <MX_SPI4_Init+0x74>)
 8001906:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800190a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800190c:	4b14      	ldr	r3, [pc, #80]	; (8001960 <MX_SPI4_Init+0x74>)
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001912:	4b13      	ldr	r3, [pc, #76]	; (8001960 <MX_SPI4_Init+0x74>)
 8001914:	2200      	movs	r2, #0
 8001916:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <MX_SPI4_Init+0x74>)
 800191a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800191e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <MX_SPI4_Init+0x74>)
 8001922:	2208      	movs	r2, #8
 8001924:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <MX_SPI4_Init+0x74>)
 8001928:	2200      	movs	r2, #0
 800192a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <MX_SPI4_Init+0x74>)
 800192e:	2200      	movs	r2, #0
 8001930:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <MX_SPI4_Init+0x74>)
 8001934:	2200      	movs	r2, #0
 8001936:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <MX_SPI4_Init+0x74>)
 800193a:	2207      	movs	r2, #7
 800193c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <MX_SPI4_Init+0x74>)
 8001940:	2200      	movs	r2, #0
 8001942:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <MX_SPI4_Init+0x74>)
 8001946:	2208      	movs	r2, #8
 8001948:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800194a:	4805      	ldr	r0, [pc, #20]	; (8001960 <MX_SPI4_Init+0x74>)
 800194c:	f003 fa42 	bl	8004dd4 <HAL_SPI_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001956:	f7ff ff3b 	bl	80017d0 <Error_Handler>
  }

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200001e0 	.word	0x200001e0
 8001964:	40013400 	.word	0x40013400

08001968 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 800196c:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <MX_SPI5_Init+0x74>)
 800196e:	4a1c      	ldr	r2, [pc, #112]	; (80019e0 <MX_SPI5_Init+0x78>)
 8001970:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001972:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <MX_SPI5_Init+0x74>)
 8001974:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001978:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <MX_SPI5_Init+0x74>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8001980:	4b16      	ldr	r3, [pc, #88]	; (80019dc <MX_SPI5_Init+0x74>)
 8001982:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001986:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001988:	4b14      	ldr	r3, [pc, #80]	; (80019dc <MX_SPI5_Init+0x74>)
 800198a:	2200      	movs	r2, #0
 800198c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800198e:	4b13      	ldr	r3, [pc, #76]	; (80019dc <MX_SPI5_Init+0x74>)
 8001990:	2200      	movs	r2, #0
 8001992:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <MX_SPI5_Init+0x74>)
 8001996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800199a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800199c:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <MX_SPI5_Init+0x74>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <MX_SPI5_Init+0x74>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <MX_SPI5_Init+0x74>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <MX_SPI5_Init+0x74>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <MX_SPI5_Init+0x74>)
 80019b6:	2207      	movs	r2, #7
 80019b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <MX_SPI5_Init+0x74>)
 80019bc:	2200      	movs	r2, #0
 80019be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <MX_SPI5_Init+0x74>)
 80019c2:	2208      	movs	r2, #8
 80019c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <MX_SPI5_Init+0x74>)
 80019c8:	f003 fa04 	bl	8004dd4 <HAL_SPI_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 80019d2:	f7ff fefd 	bl	80017d0 <Error_Handler>
  }

}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200000b4 	.word	0x200000b4
 80019e0:	40015000 	.word	0x40015000

080019e4 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <MX_SPI6_Init+0x74>)
 80019ea:	4a1c      	ldr	r2, [pc, #112]	; (8001a5c <MX_SPI6_Init+0x78>)
 80019ec:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 80019ee:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <MX_SPI6_Init+0x74>)
 80019f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019f4:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 80019f6:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <MX_SPI6_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 80019fc:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <MX_SPI6_Init+0x74>)
 80019fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a02:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <MX_SPI6_Init+0x74>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a0a:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <MX_SPI6_Init+0x74>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <MX_SPI6_Init+0x74>)
 8001a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a16:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a18:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <MX_SPI6_Init+0x74>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <MX_SPI6_Init+0x74>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <MX_SPI6_Init+0x74>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <MX_SPI6_Init+0x74>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <MX_SPI6_Init+0x74>)
 8001a32:	2207      	movs	r2, #7
 8001a34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a36:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <MX_SPI6_Init+0x74>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <MX_SPI6_Init+0x74>)
 8001a3e:	2208      	movs	r2, #8
 8001a40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <MX_SPI6_Init+0x74>)
 8001a44:	f003 f9c6 	bl	8004dd4 <HAL_SPI_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_SPI6_Init+0x6e>
  {
    Error_Handler();
 8001a4e:	f7ff febf 	bl	80017d0 <Error_Handler>
  }

}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000118 	.word	0x20000118
 8001a5c:	40015400 	.word	0x40015400

08001a60 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b092      	sub	sp, #72	; 0x48
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a8e      	ldr	r2, [pc, #568]	; (8001cb8 <HAL_SPI_MspInit+0x258>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d131      	bne.n	8001ae6 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a82:	4b8e      	ldr	r3, [pc, #568]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	4a8d      	ldr	r2, [pc, #564]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8e:	4b8b      	ldr	r3, [pc, #556]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a96:	633b      	str	r3, [r7, #48]	; 0x30
 8001a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9a:	4b88      	ldr	r3, [pc, #544]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a87      	ldr	r2, [pc, #540]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b85      	ldr	r3, [pc, #532]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001ab2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ab6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ac4:	2305      	movs	r3, #5
 8001ac6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001acc:	4619      	mov	r1, r3
 8001ace:	487c      	ldr	r0, [pc, #496]	; (8001cc0 <HAL_SPI_MspInit+0x260>)
 8001ad0:	f000 fec8 	bl	8002864 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 6, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2106      	movs	r1, #6
 8001ad8:	2024      	movs	r0, #36	; 0x24
 8001ada:	f000 fd01 	bl	80024e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001ade:	2024      	movs	r0, #36	; 0x24
 8001ae0:	f000 fd2a 	bl	8002538 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8001ae4:	e0e4      	b.n	8001cb0 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI3)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a76      	ldr	r2, [pc, #472]	; (8001cc4 <HAL_SPI_MspInit+0x264>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d145      	bne.n	8001b7c <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001af0:	4b72      	ldr	r3, [pc, #456]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	4a71      	ldr	r2, [pc, #452]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001afa:	6413      	str	r3, [r2, #64]	; 0x40
 8001afc:	4b6f      	ldr	r3, [pc, #444]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b08:	4b6c      	ldr	r3, [pc, #432]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	4a6b      	ldr	r2, [pc, #428]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001b0e:	f043 0302 	orr.w	r3, r3, #2
 8001b12:	6313      	str	r3, [r2, #48]	; 0x30
 8001b14:	4b69      	ldr	r3, [pc, #420]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b20:	4b66      	ldr	r3, [pc, #408]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	4a65      	ldr	r2, [pc, #404]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001b26:	f043 0304 	orr.w	r3, r3, #4
 8001b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2c:	4b63      	ldr	r3, [pc, #396]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	623b      	str	r3, [r7, #32]
 8001b36:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b38:	2304      	movs	r3, #4
 8001b3a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b44:	2303      	movs	r3, #3
 8001b46:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001b48:	2307      	movs	r3, #7
 8001b4a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b50:	4619      	mov	r1, r3
 8001b52:	485b      	ldr	r0, [pc, #364]	; (8001cc0 <HAL_SPI_MspInit+0x260>)
 8001b54:	f000 fe86 	bl	8002864 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b58:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b66:	2303      	movs	r3, #3
 8001b68:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b6a:	2306      	movs	r3, #6
 8001b6c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b72:	4619      	mov	r1, r3
 8001b74:	4854      	ldr	r0, [pc, #336]	; (8001cc8 <HAL_SPI_MspInit+0x268>)
 8001b76:	f000 fe75 	bl	8002864 <HAL_GPIO_Init>
}
 8001b7a:	e099      	b.n	8001cb0 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI4)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a52      	ldr	r2, [pc, #328]	; (8001ccc <HAL_SPI_MspInit+0x26c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d130      	bne.n	8001be8 <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001b86:	4b4d      	ldr	r3, [pc, #308]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	4a4c      	ldr	r2, [pc, #304]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001b8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b90:	6453      	str	r3, [r2, #68]	; 0x44
 8001b92:	4b4a      	ldr	r3, [pc, #296]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b9a:	61fb      	str	r3, [r7, #28]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b9e:	4b47      	ldr	r3, [pc, #284]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a46      	ldr	r2, [pc, #280]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001ba4:	f043 0310 	orr.w	r3, r3, #16
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b44      	ldr	r3, [pc, #272]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	61bb      	str	r3, [r7, #24]
 8001bb4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001bb6:	2364      	movs	r3, #100	; 0x64
 8001bb8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001bc6:	2305      	movs	r3, #5
 8001bc8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bce:	4619      	mov	r1, r3
 8001bd0:	483f      	ldr	r0, [pc, #252]	; (8001cd0 <HAL_SPI_MspInit+0x270>)
 8001bd2:	f000 fe47 	bl	8002864 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 6, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2106      	movs	r1, #6
 8001bda:	2054      	movs	r0, #84	; 0x54
 8001bdc:	f000 fc80 	bl	80024e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001be0:	2054      	movs	r0, #84	; 0x54
 8001be2:	f000 fca9 	bl	8002538 <HAL_NVIC_EnableIRQ>
}
 8001be6:	e063      	b.n	8001cb0 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI5)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a39      	ldr	r2, [pc, #228]	; (8001cd4 <HAL_SPI_MspInit+0x274>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d129      	bne.n	8001c46 <HAL_SPI_MspInit+0x1e6>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001bf2:	4b32      	ldr	r3, [pc, #200]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	4a31      	ldr	r2, [pc, #196]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001bf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfe:	4b2f      	ldr	r3, [pc, #188]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c0a:	4b2c      	ldr	r3, [pc, #176]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a2b      	ldr	r2, [pc, #172]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001c10:	f043 0320 	orr.w	r3, r3, #32
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f003 0320 	and.w	r3, r3, #32
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001c22:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001c26:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c30:	2303      	movs	r3, #3
 8001c32:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001c34:	2305      	movs	r3, #5
 8001c36:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4826      	ldr	r0, [pc, #152]	; (8001cd8 <HAL_SPI_MspInit+0x278>)
 8001c40:	f000 fe10 	bl	8002864 <HAL_GPIO_Init>
}
 8001c44:	e034      	b.n	8001cb0 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI6)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a24      	ldr	r2, [pc, #144]	; (8001cdc <HAL_SPI_MspInit+0x27c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d12f      	bne.n	8001cb0 <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001c50:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c54:	4a19      	ldr	r2, [pc, #100]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001c56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c5a:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5c:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6c:	4a13      	ldr	r2, [pc, #76]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6313      	str	r3, [r2, #48]	; 0x30
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <HAL_SPI_MspInit+0x25c>)
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c80:	23e0      	movs	r3, #224	; 0xe0
 8001c82:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8001c90:	2308      	movs	r3, #8
 8001c92:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4811      	ldr	r0, [pc, #68]	; (8001ce0 <HAL_SPI_MspInit+0x280>)
 8001c9c:	f000 fde2 	bl	8002864 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 6, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2106      	movs	r1, #6
 8001ca4:	2056      	movs	r0, #86	; 0x56
 8001ca6:	f000 fc1b 	bl	80024e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 8001caa:	2056      	movs	r0, #86	; 0x56
 8001cac:	f000 fc44 	bl	8002538 <HAL_NVIC_EnableIRQ>
}
 8001cb0:	bf00      	nop
 8001cb2:	3748      	adds	r7, #72	; 0x48
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40003800 	.word	0x40003800
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40020400 	.word	0x40020400
 8001cc4:	40003c00 	.word	0x40003c00
 8001cc8:	40020800 	.word	0x40020800
 8001ccc:	40013400 	.word	0x40013400
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40015000 	.word	0x40015000
 8001cd8:	40021400 	.word	0x40021400
 8001cdc:	40015400 	.word	0x40015400
 8001ce0:	40020000 	.word	0x40020000

08001ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <HAL_MspInit+0x44>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	4a0e      	ldr	r2, [pc, #56]	; (8001d28 <HAL_MspInit+0x44>)
 8001cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <HAL_MspInit+0x44>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d02:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_MspInit+0x44>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	4a08      	ldr	r2, [pc, #32]	; (8001d28 <HAL_MspInit+0x44>)
 8001d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_MspInit+0x44>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800

08001d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d3e:	e7fe      	b.n	8001d3e <HardFault_Handler+0x4>

08001d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <MemManage_Handler+0x4>

08001d46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <BusFault_Handler+0x4>

08001d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <UsageFault_Handler+0x4>

08001d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001d80:	2010      	movs	r0, #16
 8001d82:	f001 f949 	bl	8003018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001d8e:	2020      	movs	r0, #32
 8001d90:	f001 f942 	bl	8003018 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001d94:	2040      	movs	r0, #64	; 0x40
 8001d96:	f001 f93f 	bl	8003018 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001d9a:	2080      	movs	r0, #128	; 0x80
 8001d9c:	f001 f93c 	bl	8003018 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001da0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001da4:	f001 f938 	bl	8003018 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001da8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001dac:	f001 f934 	bl	8003018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001db8:	4802      	ldr	r0, [pc, #8]	; (8001dc4 <SPI2_IRQHandler+0x10>)
 8001dba:	f003 fe6f 	bl	8005a9c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000050 	.word	0x20000050

08001dc8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001dcc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001dd0:	f001 f922 	bl	8003018 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001dd4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001dd8:	f001 f91e 	bl	8003018 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001ddc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001de0:	f001 f91a 	bl	8003018 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001de4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001de8:	f001 f916 	bl	8003018 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001dec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001df0:	f001 f912 	bl	8003018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001dfc:	4802      	ldr	r0, [pc, #8]	; (8001e08 <UART4_IRQHandler+0x10>)
 8001dfe:	f004 faff 	bl	8006400 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000344 	.word	0x20000344

08001e0c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <UART5_IRQHandler+0x10>)
 8001e12:	f004 faf5 	bl	8006400 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000244 	.word	0x20000244

08001e20 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <UART8_IRQHandler+0x10>)
 8001e26:	f004 faeb 	bl	8006400 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200002c4 	.word	0x200002c4

08001e34 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <SPI4_IRQHandler+0x10>)
 8001e3a:	f003 fe2f 	bl	8005a9c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200001e0 	.word	0x200001e0

08001e48 <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <SPI6_IRQHandler+0x10>)
 8001e4e:	f003 fe25 	bl	8005a9c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000118 	.word	0x20000118

08001e5c <SysTick_Handler>:

/* USER CODE BEGIN 1 */
void SysTick_Handler(void) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001e60:	f000 fa0c 	bl	800227c <HAL_IncTick>
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <SystemInit+0x28>)
 8001e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e72:	4a07      	ldr	r2, [pc, #28]	; (8001e90 <SystemInit+0x28>)
 8001e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <SystemInit+0x28>)
 8001e7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e82:	609a      	str	r2, [r3, #8]
#endif
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart8;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001e98:	4b14      	ldr	r3, [pc, #80]	; (8001eec <MX_UART4_Init+0x58>)
 8001e9a:	4a15      	ldr	r2, [pc, #84]	; (8001ef0 <MX_UART4_Init+0x5c>)
 8001e9c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001e9e:	4b13      	ldr	r3, [pc, #76]	; (8001eec <MX_UART4_Init+0x58>)
 8001ea0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ea4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <MX_UART4_Init+0x58>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001eac:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <MX_UART4_Init+0x58>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <MX_UART4_Init+0x58>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <MX_UART4_Init+0x58>)
 8001eba:	220c      	movs	r2, #12
 8001ebc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <MX_UART4_Init+0x58>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec4:	4b09      	ldr	r3, [pc, #36]	; (8001eec <MX_UART4_Init+0x58>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <MX_UART4_Init+0x58>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <MX_UART4_Init+0x58>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ed6:	4805      	ldr	r0, [pc, #20]	; (8001eec <MX_UART4_Init+0x58>)
 8001ed8:	f004 f874 	bl	8005fc4 <HAL_UART_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001ee2:	f7ff fc75 	bl	80017d0 <Error_Handler>
  }

}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000344 	.word	0x20000344
 8001ef0:	40004c00 	.word	0x40004c00

08001ef4 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8001ef8:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <MX_UART5_Init+0x58>)
 8001efa:	4a15      	ldr	r2, [pc, #84]	; (8001f50 <MX_UART5_Init+0x5c>)
 8001efc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001efe:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <MX_UART5_Init+0x58>)
 8001f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f04:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <MX_UART5_Init+0x58>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <MX_UART5_Init+0x58>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <MX_UART5_Init+0x58>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <MX_UART5_Init+0x58>)
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <MX_UART5_Init+0x58>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f24:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <MX_UART5_Init+0x58>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <MX_UART5_Init+0x58>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <MX_UART5_Init+0x58>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001f36:	4805      	ldr	r0, [pc, #20]	; (8001f4c <MX_UART5_Init+0x58>)
 8001f38:	f004 f844 	bl	8005fc4 <HAL_UART_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001f42:	f7ff fc45 	bl	80017d0 <Error_Handler>
  }

}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000244 	.word	0x20000244
 8001f50:	40005000 	.word	0x40005000

08001f54 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 8001f58:	4b14      	ldr	r3, [pc, #80]	; (8001fac <MX_UART8_Init+0x58>)
 8001f5a:	4a15      	ldr	r2, [pc, #84]	; (8001fb0 <MX_UART8_Init+0x5c>)
 8001f5c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 30000;
 8001f5e:	4b13      	ldr	r3, [pc, #76]	; (8001fac <MX_UART8_Init+0x58>)
 8001f60:	f247 5230 	movw	r2, #30000	; 0x7530
 8001f64:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001f66:	4b11      	ldr	r3, [pc, #68]	; (8001fac <MX_UART8_Init+0x58>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <MX_UART8_Init+0x58>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001f72:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <MX_UART8_Init+0x58>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <MX_UART8_Init+0x58>)
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <MX_UART8_Init+0x58>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <MX_UART8_Init+0x58>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <MX_UART8_Init+0x58>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <MX_UART8_Init+0x58>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001f96:	4805      	ldr	r0, [pc, #20]	; (8001fac <MX_UART8_Init+0x58>)
 8001f98:	f004 f814 	bl	8005fc4 <HAL_UART_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_UART8_Init+0x52>
  {
    Error_Handler();
 8001fa2:	f7ff fc15 	bl	80017d0 <Error_Handler>
  }

}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200002c4 	.word	0x200002c4
 8001fb0:	40007c00 	.word	0x40007c00

08001fb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b090      	sub	sp, #64	; 0x40
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a6e      	ldr	r2, [pc, #440]	; (800218c <HAL_UART_MspInit+0x1d8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d14d      	bne.n	8002072 <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001fd6:	4b6e      	ldr	r3, [pc, #440]	; (8002190 <HAL_UART_MspInit+0x1dc>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	4a6d      	ldr	r2, [pc, #436]	; (8002190 <HAL_UART_MspInit+0x1dc>)
 8001fdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe2:	4b6b      	ldr	r3, [pc, #428]	; (8002190 <HAL_UART_MspInit+0x1dc>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fec:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001fee:	4b68      	ldr	r3, [pc, #416]	; (8002190 <HAL_UART_MspInit+0x1dc>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a67      	ldr	r2, [pc, #412]	; (8002190 <HAL_UART_MspInit+0x1dc>)
 8001ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b65      	ldr	r3, [pc, #404]	; (8002190 <HAL_UART_MspInit+0x1dc>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	4b62      	ldr	r3, [pc, #392]	; (8002190 <HAL_UART_MspInit+0x1dc>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a61      	ldr	r2, [pc, #388]	; (8002190 <HAL_UART_MspInit+0x1dc>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b5f      	ldr	r3, [pc, #380]	; (8002190 <HAL_UART_MspInit+0x1dc>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	623b      	str	r3, [r7, #32]
 800201c:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PI9     ------> UART4_RX
    PA0/WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = DAPI_RX_Pin;
 800201e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002022:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202c:	2303      	movs	r3, #3
 800202e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002030:	2308      	movs	r3, #8
 8002032:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(DAPI_RX_GPIO_Port, &GPIO_InitStruct);
 8002034:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002038:	4619      	mov	r1, r3
 800203a:	4856      	ldr	r0, [pc, #344]	; (8002194 <HAL_UART_MspInit+0x1e0>)
 800203c:	f000 fc12 	bl	8002864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DAPI_TX_Pin;
 8002040:	2301      	movs	r3, #1
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204c:	2303      	movs	r3, #3
 800204e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002050:	2308      	movs	r3, #8
 8002052:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(DAPI_TX_GPIO_Port, &GPIO_InitStruct);
 8002054:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002058:	4619      	mov	r1, r3
 800205a:	484f      	ldr	r0, [pc, #316]	; (8002198 <HAL_UART_MspInit+0x1e4>)
 800205c:	f000 fc02 	bl	8002864 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 8002060:	2200      	movs	r2, #0
 8002062:	2106      	movs	r1, #6
 8002064:	2034      	movs	r0, #52	; 0x34
 8002066:	f000 fa3b 	bl	80024e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800206a:	2034      	movs	r0, #52	; 0x34
 800206c:	f000 fa64 	bl	8002538 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 8002070:	e087      	b.n	8002182 <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==UART5)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a49      	ldr	r2, [pc, #292]	; (800219c <HAL_UART_MspInit+0x1e8>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d14d      	bne.n	8002118 <HAL_UART_MspInit+0x164>
    __HAL_RCC_UART5_CLK_ENABLE();
 800207c:	4b44      	ldr	r3, [pc, #272]	; (8002190 <HAL_UART_MspInit+0x1dc>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	4a43      	ldr	r2, [pc, #268]	; (8002190 <HAL_UART_MspInit+0x1dc>)
 8002082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002086:	6413      	str	r3, [r2, #64]	; 0x40
 8002088:	4b41      	ldr	r3, [pc, #260]	; (8002190 <HAL_UART_MspInit+0x1dc>)
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002094:	4b3e      	ldr	r3, [pc, #248]	; (8002190 <HAL_UART_MspInit+0x1dc>)
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	4a3d      	ldr	r2, [pc, #244]	; (8002190 <HAL_UART_MspInit+0x1dc>)
 800209a:	f043 0304 	orr.w	r3, r3, #4
 800209e:	6313      	str	r3, [r2, #48]	; 0x30
 80020a0:	4b3b      	ldr	r3, [pc, #236]	; (8002190 <HAL_UART_MspInit+0x1dc>)
 80020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	61bb      	str	r3, [r7, #24]
 80020aa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ac:	4b38      	ldr	r3, [pc, #224]	; (8002190 <HAL_UART_MspInit+0x1dc>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	4a37      	ldr	r2, [pc, #220]	; (8002190 <HAL_UART_MspInit+0x1dc>)
 80020b2:	f043 0308 	orr.w	r3, r3, #8
 80020b6:	6313      	str	r3, [r2, #48]	; 0x30
 80020b8:	4b35      	ldr	r3, [pc, #212]	; (8002190 <HAL_UART_MspInit+0x1dc>)
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = INTERSPU_TX_Pin;
 80020c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ca:	2302      	movs	r3, #2
 80020cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d2:	2303      	movs	r3, #3
 80020d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80020d6:	2308      	movs	r3, #8
 80020d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(INTERSPU_TX_GPIO_Port, &GPIO_InitStruct);
 80020da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020de:	4619      	mov	r1, r3
 80020e0:	482f      	ldr	r0, [pc, #188]	; (80021a0 <HAL_UART_MspInit+0x1ec>)
 80020e2:	f000 fbbf 	bl	8002864 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = INTERSPU_RX_Pin;
 80020e6:	2304      	movs	r3, #4
 80020e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f2:	2303      	movs	r3, #3
 80020f4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80020f6:	2308      	movs	r3, #8
 80020f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(INTERSPU_RX_GPIO_Port, &GPIO_InitStruct);
 80020fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020fe:	4619      	mov	r1, r3
 8002100:	4828      	ldr	r0, [pc, #160]	; (80021a4 <HAL_UART_MspInit+0x1f0>)
 8002102:	f000 fbaf 	bl	8002864 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 6, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	2106      	movs	r1, #6
 800210a:	2035      	movs	r0, #53	; 0x35
 800210c:	f000 f9e8 	bl	80024e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002110:	2035      	movs	r0, #53	; 0x35
 8002112:	f000 fa11 	bl	8002538 <HAL_NVIC_EnableIRQ>
}
 8002116:	e034      	b.n	8002182 <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==UART8)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a22      	ldr	r2, [pc, #136]	; (80021a8 <HAL_UART_MspInit+0x1f4>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d12f      	bne.n	8002182 <HAL_UART_MspInit+0x1ce>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002122:	4b1b      	ldr	r3, [pc, #108]	; (8002190 <HAL_UART_MspInit+0x1dc>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	4a1a      	ldr	r2, [pc, #104]	; (8002190 <HAL_UART_MspInit+0x1dc>)
 8002128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800212c:	6413      	str	r3, [r2, #64]	; 0x40
 800212e:	4b18      	ldr	r3, [pc, #96]	; (8002190 <HAL_UART_MspInit+0x1dc>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <HAL_UART_MspInit+0x1dc>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a14      	ldr	r2, [pc, #80]	; (8002190 <HAL_UART_MspInit+0x1dc>)
 8002140:	f043 0310 	orr.w	r3, r3, #16
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_UART_MspInit+0x1dc>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EXP_IN_Pin|EXP_OUT_Pin;
 8002152:	2303      	movs	r3, #3
 8002154:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002156:	2302      	movs	r3, #2
 8002158:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215e:	2303      	movs	r3, #3
 8002160:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002162:	2308      	movs	r3, #8
 8002164:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002166:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800216a:	4619      	mov	r1, r3
 800216c:	480f      	ldr	r0, [pc, #60]	; (80021ac <HAL_UART_MspInit+0x1f8>)
 800216e:	f000 fb79 	bl	8002864 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 6, 0);
 8002172:	2200      	movs	r2, #0
 8002174:	2106      	movs	r1, #6
 8002176:	2053      	movs	r0, #83	; 0x53
 8002178:	f000 f9b2 	bl	80024e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800217c:	2053      	movs	r0, #83	; 0x53
 800217e:	f000 f9db 	bl	8002538 <HAL_NVIC_EnableIRQ>
}
 8002182:	bf00      	nop
 8002184:	3740      	adds	r7, #64	; 0x40
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40004c00 	.word	0x40004c00
 8002190:	40023800 	.word	0x40023800
 8002194:	40022000 	.word	0x40022000
 8002198:	40020000 	.word	0x40020000
 800219c:	40005000 	.word	0x40005000
 80021a0:	40020800 	.word	0x40020800
 80021a4:	40020c00 	.word	0x40020c00
 80021a8:	40007c00 	.word	0x40007c00
 80021ac:	40021000 	.word	0x40021000

080021b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80021b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80021b6:	e003      	b.n	80021c0 <LoopCopyDataInit>

080021b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80021ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80021bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80021be:	3104      	adds	r1, #4

080021c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80021c0:	480b      	ldr	r0, [pc, #44]	; (80021f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80021c2:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80021c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80021c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80021c8:	d3f6      	bcc.n	80021b8 <CopyDataInit>
  ldr  r2, =_sbss
 80021ca:	4a0b      	ldr	r2, [pc, #44]	; (80021f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80021cc:	e002      	b.n	80021d4 <LoopFillZerobss>

080021ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80021ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80021d0:	f842 3b04 	str.w	r3, [r2], #4

080021d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80021d4:	4b09      	ldr	r3, [pc, #36]	; (80021fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80021d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80021d8:	d3f9      	bcc.n	80021ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021da:	f7ff fe45 	bl	8001e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021de:	f005 f813 	bl	8007208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021e2:	f7fe fc41 	bl	8000a68 <main>
  bx  lr    
 80021e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021e8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80021ec:	08007474 	.word	0x08007474
  ldr  r0, =_sdata
 80021f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80021f4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80021f8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80021fc:	200003c8 	.word	0x200003c8

08002200 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002200:	e7fe      	b.n	8002200 <ADC_IRQHandler>

08002202 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002206:	2003      	movs	r0, #3
 8002208:	f000 f94a 	bl	80024a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800220c:	2000      	movs	r0, #0
 800220e:	f000 f805 	bl	800221c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002212:	f7ff fd67 	bl	8001ce4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002224:	4b12      	ldr	r3, [pc, #72]	; (8002270 <HAL_InitTick+0x54>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b12      	ldr	r3, [pc, #72]	; (8002274 <HAL_InitTick+0x58>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	4619      	mov	r1, r3
 800222e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002232:	fbb3 f3f1 	udiv	r3, r3, r1
 8002236:	fbb2 f3f3 	udiv	r3, r2, r3
 800223a:	4618      	mov	r0, r3
 800223c:	f000 f994 	bl	8002568 <HAL_SYSTICK_Config>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e00e      	b.n	8002268 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b0f      	cmp	r3, #15
 800224e:	d80a      	bhi.n	8002266 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002250:	2200      	movs	r2, #0
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	f04f 30ff 	mov.w	r0, #4294967295
 8002258:	f000 f942 	bl	80024e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800225c:	4a06      	ldr	r2, [pc, #24]	; (8002278 <HAL_InitTick+0x5c>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	e000      	b.n	8002268 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20000000 	.word	0x20000000
 8002274:	20000008 	.word	0x20000008
 8002278:	20000004 	.word	0x20000004

0800227c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_IncTick+0x20>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_IncTick+0x24>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4413      	add	r3, r2
 800228c:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <HAL_IncTick+0x24>)
 800228e:	6013      	str	r3, [r2, #0]
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20000008 	.word	0x20000008
 80022a0:	200003c4 	.word	0x200003c4

080022a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return uwTick;
 80022a8:	4b03      	ldr	r3, [pc, #12]	; (80022b8 <HAL_GetTick+0x14>)
 80022aa:	681b      	ldr	r3, [r3, #0]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	200003c4 	.word	0x200003c4

080022bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022c4:	f7ff ffee 	bl	80022a4 <HAL_GetTick>
 80022c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d4:	d005      	beq.n	80022e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <HAL_Delay+0x40>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4413      	add	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022e2:	bf00      	nop
 80022e4:	f7ff ffde 	bl	80022a4 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d8f7      	bhi.n	80022e4 <HAL_Delay+0x28>
  {
  }
}
 80022f4:	bf00      	nop
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000008 	.word	0x20000008

08002300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <__NVIC_SetPriorityGrouping+0x40>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800231c:	4013      	ands	r3, r2
 800231e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <__NVIC_SetPriorityGrouping+0x44>)
 800232a:	4313      	orrs	r3, r2
 800232c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232e:	4a04      	ldr	r2, [pc, #16]	; (8002340 <__NVIC_SetPriorityGrouping+0x40>)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	60d3      	str	r3, [r2, #12]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000ed00 	.word	0xe000ed00
 8002344:	05fa0000 	.word	0x05fa0000

08002348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <__NVIC_GetPriorityGrouping+0x18>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	f003 0307 	and.w	r3, r3, #7
}
 8002356:	4618      	mov	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002372:	2b00      	cmp	r3, #0
 8002374:	db0b      	blt.n	800238e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	f003 021f 	and.w	r2, r3, #31
 800237c:	4907      	ldr	r1, [pc, #28]	; (800239c <__NVIC_EnableIRQ+0x38>)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	2001      	movs	r0, #1
 8002386:	fa00 f202 	lsl.w	r2, r0, r2
 800238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000e100 	.word	0xe000e100

080023a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	6039      	str	r1, [r7, #0]
 80023aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	db0a      	blt.n	80023ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	490c      	ldr	r1, [pc, #48]	; (80023ec <__NVIC_SetPriority+0x4c>)
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	0112      	lsls	r2, r2, #4
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	440b      	add	r3, r1
 80023c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c8:	e00a      	b.n	80023e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	4908      	ldr	r1, [pc, #32]	; (80023f0 <__NVIC_SetPriority+0x50>)
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	3b04      	subs	r3, #4
 80023d8:	0112      	lsls	r2, r2, #4
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	440b      	add	r3, r1
 80023de:	761a      	strb	r2, [r3, #24]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000e100 	.word	0xe000e100
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b089      	sub	sp, #36	; 0x24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f1c3 0307 	rsb	r3, r3, #7
 800240e:	2b04      	cmp	r3, #4
 8002410:	bf28      	it	cs
 8002412:	2304      	movcs	r3, #4
 8002414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3304      	adds	r3, #4
 800241a:	2b06      	cmp	r3, #6
 800241c:	d902      	bls.n	8002424 <NVIC_EncodePriority+0x30>
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3b03      	subs	r3, #3
 8002422:	e000      	b.n	8002426 <NVIC_EncodePriority+0x32>
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002428:	f04f 32ff 	mov.w	r2, #4294967295
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43da      	mvns	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	401a      	ands	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800243c:	f04f 31ff 	mov.w	r1, #4294967295
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	fa01 f303 	lsl.w	r3, r1, r3
 8002446:	43d9      	mvns	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800244c:	4313      	orrs	r3, r2
         );
}
 800244e:	4618      	mov	r0, r3
 8002450:	3724      	adds	r7, #36	; 0x24
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3b01      	subs	r3, #1
 8002468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800246c:	d301      	bcc.n	8002472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800246e:	2301      	movs	r3, #1
 8002470:	e00f      	b.n	8002492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002472:	4a0a      	ldr	r2, [pc, #40]	; (800249c <SysTick_Config+0x40>)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3b01      	subs	r3, #1
 8002478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800247a:	210f      	movs	r1, #15
 800247c:	f04f 30ff 	mov.w	r0, #4294967295
 8002480:	f7ff ff8e 	bl	80023a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <SysTick_Config+0x40>)
 8002486:	2200      	movs	r2, #0
 8002488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800248a:	4b04      	ldr	r3, [pc, #16]	; (800249c <SysTick_Config+0x40>)
 800248c:	2207      	movs	r2, #7
 800248e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	e000e010 	.word	0xe000e010

080024a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b07      	cmp	r3, #7
 80024ac:	d00f      	beq.n	80024ce <HAL_NVIC_SetPriorityGrouping+0x2e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b06      	cmp	r3, #6
 80024b2:	d00c      	beq.n	80024ce <HAL_NVIC_SetPriorityGrouping+0x2e>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b05      	cmp	r3, #5
 80024b8:	d009      	beq.n	80024ce <HAL_NVIC_SetPriorityGrouping+0x2e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d006      	beq.n	80024ce <HAL_NVIC_SetPriorityGrouping+0x2e>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d003      	beq.n	80024ce <HAL_NVIC_SetPriorityGrouping+0x2e>
 80024c6:	2192      	movs	r1, #146	; 0x92
 80024c8:	4804      	ldr	r0, [pc, #16]	; (80024dc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80024ca:	f7ff f988 	bl	80017de <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff ff16 	bl	8002300 <__NVIC_SetPriorityGrouping>
}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	08007278 	.word	0x08007278

080024e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b0f      	cmp	r3, #15
 80024f6:	d903      	bls.n	8002500 <HAL_NVIC_SetPriority+0x20>
 80024f8:	21aa      	movs	r1, #170	; 0xaa
 80024fa:	480e      	ldr	r0, [pc, #56]	; (8002534 <HAL_NVIC_SetPriority+0x54>)
 80024fc:	f7ff f96f 	bl	80017de <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b0f      	cmp	r3, #15
 8002504:	d903      	bls.n	800250e <HAL_NVIC_SetPriority+0x2e>
 8002506:	21ab      	movs	r1, #171	; 0xab
 8002508:	480a      	ldr	r0, [pc, #40]	; (8002534 <HAL_NVIC_SetPriority+0x54>)
 800250a:	f7ff f968 	bl	80017de <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800250e:	f7ff ff1b 	bl	8002348 <__NVIC_GetPriorityGrouping>
 8002512:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	68b9      	ldr	r1, [r7, #8]
 8002518:	6978      	ldr	r0, [r7, #20]
 800251a:	f7ff ff6b 	bl	80023f4 <NVIC_EncodePriority>
 800251e:	4602      	mov	r2, r0
 8002520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002524:	4611      	mov	r1, r2
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff ff3a 	bl	80023a0 <__NVIC_SetPriority>
}
 800252c:	bf00      	nop
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	08007278 	.word	0x08007278

08002538 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	2b00      	cmp	r3, #0
 8002548:	da03      	bge.n	8002552 <HAL_NVIC_EnableIRQ+0x1a>
 800254a:	21be      	movs	r1, #190	; 0xbe
 800254c:	4805      	ldr	r0, [pc, #20]	; (8002564 <HAL_NVIC_EnableIRQ+0x2c>)
 800254e:	f7ff f946 	bl	80017de <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff ff04 	bl	8002364 <__NVIC_EnableIRQ>
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	08007278 	.word	0x08007278

08002568 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff ff73 	bl	800245c <SysTick_Config>
 8002576:	4603      	mov	r3, r0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e0a5      	b.n	80026de <HAL_CRC_Init+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a54      	ldr	r2, [pc, #336]	; (80026e8 <HAL_CRC_Init+0x168>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d003      	beq.n	80025a4 <HAL_CRC_Init+0x24>
 800259c:	2170      	movs	r1, #112	; 0x70
 800259e:	4853      	ldr	r0, [pc, #332]	; (80026ec <HAL_CRC_Init+0x16c>)
 80025a0:	f7ff f91d 	bl	80017de <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	7f5b      	ldrb	r3, [r3, #29]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d105      	bne.n	80025ba <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7fd ffe1 	bl	800057c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2202      	movs	r2, #2
 80025be:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	791b      	ldrb	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d007      	beq.n	80025d8 <HAL_CRC_Init+0x58>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	791b      	ldrb	r3, [r3, #4]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d003      	beq.n	80025d8 <HAL_CRC_Init+0x58>
 80025d0:	217e      	movs	r1, #126	; 0x7e
 80025d2:	4846      	ldr	r0, [pc, #280]	; (80026ec <HAL_CRC_Init+0x16c>)
 80025d4:	f7ff f903 	bl	80017de <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	791b      	ldrb	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10c      	bne.n	80025fa <HAL_CRC_Init+0x7a>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a42      	ldr	r2, [pc, #264]	; (80026f0 <HAL_CRC_Init+0x170>)
 80025e6:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0218 	bic.w	r2, r2, #24
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	e00c      	b.n	8002614 <HAL_CRC_Init+0x94>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6899      	ldr	r1, [r3, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	461a      	mov	r2, r3
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f875 	bl	80026f4 <HAL_CRCEx_Polynomial_Set>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_CRC_Init+0x94>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e064      	b.n	80026de <HAL_CRC_Init+0x15e>
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	795b      	ldrb	r3, [r3, #5]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d007      	beq.n	800262c <HAL_CRC_Init+0xac>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	795b      	ldrb	r3, [r3, #5]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d003      	beq.n	800262c <HAL_CRC_Init+0xac>
 8002624:	2190      	movs	r1, #144	; 0x90
 8002626:	4831      	ldr	r0, [pc, #196]	; (80026ec <HAL_CRC_Init+0x16c>)
 8002628:	f7ff f8d9 	bl	80017de <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	795b      	ldrb	r3, [r3, #5]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d105      	bne.n	8002640 <HAL_CRC_Init+0xc0>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f04f 32ff 	mov.w	r2, #4294967295
 800263c:	611a      	str	r2, [r3, #16]
 800263e:	e004      	b.n	800264a <HAL_CRC_Init+0xca>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6912      	ldr	r2, [r2, #16]
 8002648:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00f      	beq.n	8002672 <HAL_CRC_Init+0xf2>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	2b20      	cmp	r3, #32
 8002658:	d00b      	beq.n	8002672 <HAL_CRC_Init+0xf2>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	2b40      	cmp	r3, #64	; 0x40
 8002660:	d007      	beq.n	8002672 <HAL_CRC_Init+0xf2>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	2b60      	cmp	r3, #96	; 0x60
 8002668:	d003      	beq.n	8002672 <HAL_CRC_Init+0xf2>
 800266a:	219c      	movs	r1, #156	; 0x9c
 800266c:	481f      	ldr	r0, [pc, #124]	; (80026ec <HAL_CRC_Init+0x16c>)
 800266e:	f7ff f8b6 	bl	80017de <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	695a      	ldr	r2, [r3, #20]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d007      	beq.n	80026a0 <HAL_CRC_Init+0x120>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	2b80      	cmp	r3, #128	; 0x80
 8002696:	d003      	beq.n	80026a0 <HAL_CRC_Init+0x120>
 8002698:	21a0      	movs	r1, #160	; 0xa0
 800269a:	4814      	ldr	r0, [pc, #80]	; (80026ec <HAL_CRC_Init+0x16c>)
 800269c:	f7ff f89f 	bl	80017de <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699a      	ldr	r2, [r3, #24]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	609a      	str	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d00b      	beq.n	80026d6 <HAL_CRC_Init+0x156>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d007      	beq.n	80026d6 <HAL_CRC_Init+0x156>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	d003      	beq.n	80026d6 <HAL_CRC_Init+0x156>
 80026ce:	21a5      	movs	r1, #165	; 0xa5
 80026d0:	4806      	ldr	r0, [pc, #24]	; (80026ec <HAL_CRC_Init+0x16c>)
 80026d2:	f7ff f884 	bl	80017de <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40023000 	.word	0x40023000
 80026ec:	080072b4 	.word	0x080072b4
 80026f0:	04c11db7 	.word	0x04c11db7

080026f4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002704:	231f      	movs	r3, #31
 8002706:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00c      	beq.n	8002728 <HAL_CRCEx_Polynomial_Set+0x34>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b08      	cmp	r3, #8
 8002712:	d009      	beq.n	8002728 <HAL_CRCEx_Polynomial_Set+0x34>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b10      	cmp	r3, #16
 8002718:	d006      	beq.n	8002728 <HAL_CRCEx_Polynomial_Set+0x34>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b18      	cmp	r3, #24
 800271e:	d003      	beq.n	8002728 <HAL_CRCEx_Polynomial_Set+0x34>
 8002720:	215f      	movs	r1, #95	; 0x5f
 8002722:	483e      	ldr	r0, [pc, #248]	; (800281c <HAL_CRCEx_Polynomial_Set+0x128>)
 8002724:	f7ff f85b 	bl	80017de <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002728:	bf00      	nop
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1e5a      	subs	r2, r3, #1
 800272e:	613a      	str	r2, [r7, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d009      	beq.n	8002748 <HAL_CRCEx_Polynomial_Set+0x54>
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	f003 031f 	and.w	r3, r3, #31
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_CRCEx_Polynomial_Set+0x36>
  {
  }

  switch (PolyLength)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b18      	cmp	r3, #24
 800274c:	d846      	bhi.n	80027dc <HAL_CRCEx_Polynomial_Set+0xe8>
 800274e:	a201      	add	r2, pc, #4	; (adr r2, 8002754 <HAL_CRCEx_Polynomial_Set+0x60>)
 8002750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002754:	080027e3 	.word	0x080027e3
 8002758:	080027dd 	.word	0x080027dd
 800275c:	080027dd 	.word	0x080027dd
 8002760:	080027dd 	.word	0x080027dd
 8002764:	080027dd 	.word	0x080027dd
 8002768:	080027dd 	.word	0x080027dd
 800276c:	080027dd 	.word	0x080027dd
 8002770:	080027dd 	.word	0x080027dd
 8002774:	080027d1 	.word	0x080027d1
 8002778:	080027dd 	.word	0x080027dd
 800277c:	080027dd 	.word	0x080027dd
 8002780:	080027dd 	.word	0x080027dd
 8002784:	080027dd 	.word	0x080027dd
 8002788:	080027dd 	.word	0x080027dd
 800278c:	080027dd 	.word	0x080027dd
 8002790:	080027dd 	.word	0x080027dd
 8002794:	080027c5 	.word	0x080027c5
 8002798:	080027dd 	.word	0x080027dd
 800279c:	080027dd 	.word	0x080027dd
 80027a0:	080027dd 	.word	0x080027dd
 80027a4:	080027dd 	.word	0x080027dd
 80027a8:	080027dd 	.word	0x080027dd
 80027ac:	080027dd 	.word	0x080027dd
 80027b0:	080027dd 	.word	0x080027dd
 80027b4:	080027b9 	.word	0x080027b9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	2b06      	cmp	r3, #6
 80027bc:	d913      	bls.n	80027e6 <HAL_CRCEx_Polynomial_Set+0xf2>
      {
        status =   HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80027c2:	e010      	b.n	80027e6 <HAL_CRCEx_Polynomial_Set+0xf2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	2b07      	cmp	r3, #7
 80027c8:	d90f      	bls.n	80027ea <HAL_CRCEx_Polynomial_Set+0xf6>
      {
        status =   HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80027ce:	e00c      	b.n	80027ea <HAL_CRCEx_Polynomial_Set+0xf6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	2b0f      	cmp	r3, #15
 80027d4:	d90b      	bls.n	80027ee <HAL_CRCEx_Polynomial_Set+0xfa>
      {
        status =   HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80027da:	e008      	b.n	80027ee <HAL_CRCEx_Polynomial_Set+0xfa>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	75fb      	strb	r3, [r7, #23]
      break;
 80027e0:	e006      	b.n	80027f0 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 80027e2:	bf00      	nop
 80027e4:	e004      	b.n	80027f0 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 80027e6:	bf00      	nop
 80027e8:	e002      	b.n	80027f0 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 80027ea:	bf00      	nop
 80027ec:	e000      	b.n	80027f0 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 80027ee:	bf00      	nop
  }
  if (status == HAL_OK)
 80027f0:	7dfb      	ldrb	r3, [r7, #23]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10d      	bne.n	8002812 <HAL_CRCEx_Polynomial_Set+0x11e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f023 0118 	bic.w	r1, r3, #24
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	430a      	orrs	r2, r1
 8002810:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002812:	7dfb      	ldrb	r3, [r7, #23]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	080072ec 	.word	0x080072ec

08002820 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d004      	beq.n	800283e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2280      	movs	r2, #128	; 0x80
 8002838:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e00c      	b.n	8002858 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2205      	movs	r2, #5
 8002842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0201 	bic.w	r2, r2, #1
 8002854:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800287a:	2300      	movs	r3, #0
 800287c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a42      	ldr	r2, [pc, #264]	; (800298c <HAL_GPIO_Init+0x128>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d02b      	beq.n	80028de <HAL_GPIO_Init+0x7a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a41      	ldr	r2, [pc, #260]	; (8002990 <HAL_GPIO_Init+0x12c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d027      	beq.n	80028de <HAL_GPIO_Init+0x7a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a40      	ldr	r2, [pc, #256]	; (8002994 <HAL_GPIO_Init+0x130>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d023      	beq.n	80028de <HAL_GPIO_Init+0x7a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a3f      	ldr	r2, [pc, #252]	; (8002998 <HAL_GPIO_Init+0x134>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d01f      	beq.n	80028de <HAL_GPIO_Init+0x7a>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a3e      	ldr	r2, [pc, #248]	; (800299c <HAL_GPIO_Init+0x138>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d01b      	beq.n	80028de <HAL_GPIO_Init+0x7a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a3d      	ldr	r2, [pc, #244]	; (80029a0 <HAL_GPIO_Init+0x13c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d017      	beq.n	80028de <HAL_GPIO_Init+0x7a>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a3c      	ldr	r2, [pc, #240]	; (80029a4 <HAL_GPIO_Init+0x140>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d013      	beq.n	80028de <HAL_GPIO_Init+0x7a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a3b      	ldr	r2, [pc, #236]	; (80029a8 <HAL_GPIO_Init+0x144>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d00f      	beq.n	80028de <HAL_GPIO_Init+0x7a>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a3a      	ldr	r2, [pc, #232]	; (80029ac <HAL_GPIO_Init+0x148>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d00b      	beq.n	80028de <HAL_GPIO_Init+0x7a>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a39      	ldr	r2, [pc, #228]	; (80029b0 <HAL_GPIO_Init+0x14c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d007      	beq.n	80028de <HAL_GPIO_Init+0x7a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a38      	ldr	r2, [pc, #224]	; (80029b4 <HAL_GPIO_Init+0x150>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x7a>
 80028d6:	21b1      	movs	r1, #177	; 0xb1
 80028d8:	4837      	ldr	r0, [pc, #220]	; (80029b8 <HAL_GPIO_Init+0x154>)
 80028da:	f7fe ff80 	bl	80017de <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d103      	bne.n	80028f0 <HAL_GPIO_Init+0x8c>
 80028e8:	21b2      	movs	r1, #178	; 0xb2
 80028ea:	4833      	ldr	r0, [pc, #204]	; (80029b8 <HAL_GPIO_Init+0x154>)
 80028ec:	f7fe ff77 	bl	80017de <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d035      	beq.n	8002964 <HAL_GPIO_Init+0x100>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d031      	beq.n	8002964 <HAL_GPIO_Init+0x100>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b11      	cmp	r3, #17
 8002906:	d02d      	beq.n	8002964 <HAL_GPIO_Init+0x100>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b02      	cmp	r3, #2
 800290e:	d029      	beq.n	8002964 <HAL_GPIO_Init+0x100>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b12      	cmp	r3, #18
 8002916:	d025      	beq.n	8002964 <HAL_GPIO_Init+0x100>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4a27      	ldr	r2, [pc, #156]	; (80029bc <HAL_GPIO_Init+0x158>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d020      	beq.n	8002964 <HAL_GPIO_Init+0x100>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4a26      	ldr	r2, [pc, #152]	; (80029c0 <HAL_GPIO_Init+0x15c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d01b      	beq.n	8002964 <HAL_GPIO_Init+0x100>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	4a24      	ldr	r2, [pc, #144]	; (80029c4 <HAL_GPIO_Init+0x160>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d016      	beq.n	8002964 <HAL_GPIO_Init+0x100>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4a23      	ldr	r2, [pc, #140]	; (80029c8 <HAL_GPIO_Init+0x164>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d011      	beq.n	8002964 <HAL_GPIO_Init+0x100>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4a21      	ldr	r2, [pc, #132]	; (80029cc <HAL_GPIO_Init+0x168>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d00c      	beq.n	8002964 <HAL_GPIO_Init+0x100>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	4a20      	ldr	r2, [pc, #128]	; (80029d0 <HAL_GPIO_Init+0x16c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d007      	beq.n	8002964 <HAL_GPIO_Init+0x100>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b03      	cmp	r3, #3
 800295a:	d003      	beq.n	8002964 <HAL_GPIO_Init+0x100>
 800295c:	21b3      	movs	r1, #179	; 0xb3
 800295e:	4816      	ldr	r0, [pc, #88]	; (80029b8 <HAL_GPIO_Init+0x154>)
 8002960:	f7fe ff3d 	bl	80017de <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00b      	beq.n	8002984 <HAL_GPIO_Init+0x120>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d007      	beq.n	8002984 <HAL_GPIO_Init+0x120>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d003      	beq.n	8002984 <HAL_GPIO_Init+0x120>
 800297c:	21b4      	movs	r1, #180	; 0xb4
 800297e:	480e      	ldr	r0, [pc, #56]	; (80029b8 <HAL_GPIO_Init+0x154>)
 8002980:	f7fe ff2d 	bl	80017de <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002984:	2300      	movs	r3, #0
 8002986:	61fb      	str	r3, [r7, #28]
 8002988:	e2d6      	b.n	8002f38 <HAL_GPIO_Init+0x6d4>
 800298a:	bf00      	nop
 800298c:	40020000 	.word	0x40020000
 8002990:	40020400 	.word	0x40020400
 8002994:	40020800 	.word	0x40020800
 8002998:	40020c00 	.word	0x40020c00
 800299c:	40021000 	.word	0x40021000
 80029a0:	40021400 	.word	0x40021400
 80029a4:	40021800 	.word	0x40021800
 80029a8:	40021c00 	.word	0x40021c00
 80029ac:	40022000 	.word	0x40022000
 80029b0:	40022400 	.word	0x40022400
 80029b4:	40022800 	.word	0x40022800
 80029b8:	08007328 	.word	0x08007328
 80029bc:	10110000 	.word	0x10110000
 80029c0:	10210000 	.word	0x10210000
 80029c4:	10310000 	.word	0x10310000
 80029c8:	10120000 	.word	0x10120000
 80029cc:	10220000 	.word	0x10220000
 80029d0:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80029d4:	2201      	movs	r2, #1
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4013      	ands	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	f040 82a0 	bne.w	8002f32 <HAL_GPIO_Init+0x6ce>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d00b      	beq.n	8002a12 <HAL_GPIO_Init+0x1ae>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d007      	beq.n	8002a12 <HAL_GPIO_Init+0x1ae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a06:	2b11      	cmp	r3, #17
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x1ae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b12      	cmp	r3, #18
 8002a10:	d144      	bne.n	8002a9c <HAL_GPIO_Init+0x238>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00f      	beq.n	8002a3a <HAL_GPIO_Init+0x1d6>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d00b      	beq.n	8002a3a <HAL_GPIO_Init+0x1d6>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d007      	beq.n	8002a3a <HAL_GPIO_Init+0x1d6>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x1d6>
 8002a32:	21c6      	movs	r1, #198	; 0xc6
 8002a34:	482a      	ldr	r0, [pc, #168]	; (8002ae0 <HAL_GPIO_Init+0x27c>)
 8002a36:	f7fe fed2 	bl	80017de <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	2203      	movs	r2, #3
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a70:	2201      	movs	r2, #1
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	091b      	lsrs	r3, r3, #4
 8002a86:	f003 0201 	and.w	r2, r3, #1
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d007      	beq.n	8002ae4 <HAL_GPIO_Init+0x280>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b12      	cmp	r3, #18
 8002ada:	f040 814b 	bne.w	8002d74 <HAL_GPIO_Init+0x510>
 8002ade:	e001      	b.n	8002ae4 <HAL_GPIO_Init+0x280>
 8002ae0:	08007328 	.word	0x08007328
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 811f 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	f000 811a 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 8115 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 8110 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 810b 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	f000 8106 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	f000 8101 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	f000 80fc 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	f000 80f7 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	f000 80f2 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	f000 80ed 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	f000 80e8 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	f000 80e3 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	f000 80de 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	f000 80d9 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	f000 80d4 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	f000 80cf 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	f000 80ca 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	f000 80c5 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	f000 80c0 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	f000 80bb 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2b05      	cmp	r3, #5
 8002bbc:	f000 80b6 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	2b05      	cmp	r3, #5
 8002bc6:	f000 80b1 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	2b05      	cmp	r3, #5
 8002bd0:	f000 80ac 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	2b05      	cmp	r3, #5
 8002bda:	f000 80a7 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	2b05      	cmp	r3, #5
 8002be4:	f000 80a2 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	2b06      	cmp	r3, #6
 8002bee:	f000 809d 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	2b06      	cmp	r3, #6
 8002bf8:	f000 8098 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	2b07      	cmp	r3, #7
 8002c02:	f000 8093 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	2b07      	cmp	r3, #7
 8002c0c:	f000 808e 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	2b07      	cmp	r3, #7
 8002c16:	f000 8089 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	2b07      	cmp	r3, #7
 8002c20:	f000 8084 	beq.w	8002d2c <HAL_GPIO_Init+0x4c8>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	2b07      	cmp	r3, #7
 8002c2a:	d07f      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	2b07      	cmp	r3, #7
 8002c32:	d07b      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	2b07      	cmp	r3, #7
 8002c3a:	d077      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d073      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d06f      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d06b      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d067      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d063      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d05f      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d05b      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	2b09      	cmp	r3, #9
 8002c7a:	d057      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	2b09      	cmp	r3, #9
 8002c82:	d053      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	2b09      	cmp	r3, #9
 8002c8a:	d04f      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	2b09      	cmp	r3, #9
 8002c92:	d04b      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	2b09      	cmp	r3, #9
 8002c9a:	d047      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	2b09      	cmp	r3, #9
 8002ca2:	d043      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	2b09      	cmp	r3, #9
 8002caa:	d03f      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	2b0a      	cmp	r3, #10
 8002cb2:	d03b      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	2b0a      	cmp	r3, #10
 8002cba:	d037      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2b0a      	cmp	r3, #10
 8002cc2:	d033      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	2b0a      	cmp	r3, #10
 8002cca:	d02f      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	2b0b      	cmp	r3, #11
 8002cd2:	d02b      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	2b0a      	cmp	r3, #10
 8002cda:	d027      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	2b0b      	cmp	r3, #11
 8002ce2:	d023      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	2b0b      	cmp	r3, #11
 8002cea:	d01f      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	2b0c      	cmp	r3, #12
 8002cf2:	d01b      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	2b0c      	cmp	r3, #12
 8002cfa:	d017      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	2b0c      	cmp	r3, #12
 8002d02:	d013      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	2b0f      	cmp	r3, #15
 8002d0a:	d00f      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	2b0d      	cmp	r3, #13
 8002d12:	d00b      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	2b0e      	cmp	r3, #14
 8002d1a:	d007      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	2b0d      	cmp	r3, #13
 8002d22:	d003      	beq.n	8002d2c <HAL_GPIO_Init+0x4c8>
 8002d24:	21de      	movs	r1, #222	; 0xde
 8002d26:	4888      	ldr	r0, [pc, #544]	; (8002f48 <HAL_GPIO_Init+0x6e4>)
 8002d28:	f7fe fd59 	bl	80017de <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	08da      	lsrs	r2, r3, #3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3208      	adds	r2, #8
 8002d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	220f      	movs	r2, #15
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	08da      	lsrs	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3208      	adds	r2, #8
 8002d6e:	69b9      	ldr	r1, [r7, #24]
 8002d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	2203      	movs	r2, #3
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 0203 	and.w	r2, r3, #3
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 80be 	beq.w	8002f32 <HAL_GPIO_Init+0x6ce>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db6:	4b65      	ldr	r3, [pc, #404]	; (8002f4c <HAL_GPIO_Init+0x6e8>)
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	4a64      	ldr	r2, [pc, #400]	; (8002f4c <HAL_GPIO_Init+0x6e8>)
 8002dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002dc2:	4b62      	ldr	r3, [pc, #392]	; (8002f4c <HAL_GPIO_Init+0x6e8>)
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002dce:	4a60      	ldr	r2, [pc, #384]	; (8002f50 <HAL_GPIO_Init+0x6ec>)
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	089b      	lsrs	r3, r3, #2
 8002dd4:	3302      	adds	r3, #2
 8002dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	220f      	movs	r2, #15
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43db      	mvns	r3, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4013      	ands	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a57      	ldr	r2, [pc, #348]	; (8002f54 <HAL_GPIO_Init+0x6f0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d037      	beq.n	8002e6a <HAL_GPIO_Init+0x606>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a56      	ldr	r2, [pc, #344]	; (8002f58 <HAL_GPIO_Init+0x6f4>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d031      	beq.n	8002e66 <HAL_GPIO_Init+0x602>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a55      	ldr	r2, [pc, #340]	; (8002f5c <HAL_GPIO_Init+0x6f8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d02b      	beq.n	8002e62 <HAL_GPIO_Init+0x5fe>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a54      	ldr	r2, [pc, #336]	; (8002f60 <HAL_GPIO_Init+0x6fc>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d025      	beq.n	8002e5e <HAL_GPIO_Init+0x5fa>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a53      	ldr	r2, [pc, #332]	; (8002f64 <HAL_GPIO_Init+0x700>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d01f      	beq.n	8002e5a <HAL_GPIO_Init+0x5f6>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a52      	ldr	r2, [pc, #328]	; (8002f68 <HAL_GPIO_Init+0x704>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d019      	beq.n	8002e56 <HAL_GPIO_Init+0x5f2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a51      	ldr	r2, [pc, #324]	; (8002f6c <HAL_GPIO_Init+0x708>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d013      	beq.n	8002e52 <HAL_GPIO_Init+0x5ee>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a50      	ldr	r2, [pc, #320]	; (8002f70 <HAL_GPIO_Init+0x70c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00d      	beq.n	8002e4e <HAL_GPIO_Init+0x5ea>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4f      	ldr	r2, [pc, #316]	; (8002f74 <HAL_GPIO_Init+0x710>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d007      	beq.n	8002e4a <HAL_GPIO_Init+0x5e6>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4e      	ldr	r2, [pc, #312]	; (8002f78 <HAL_GPIO_Init+0x714>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d101      	bne.n	8002e46 <HAL_GPIO_Init+0x5e2>
 8002e42:	2309      	movs	r3, #9
 8002e44:	e012      	b.n	8002e6c <HAL_GPIO_Init+0x608>
 8002e46:	230a      	movs	r3, #10
 8002e48:	e010      	b.n	8002e6c <HAL_GPIO_Init+0x608>
 8002e4a:	2308      	movs	r3, #8
 8002e4c:	e00e      	b.n	8002e6c <HAL_GPIO_Init+0x608>
 8002e4e:	2307      	movs	r3, #7
 8002e50:	e00c      	b.n	8002e6c <HAL_GPIO_Init+0x608>
 8002e52:	2306      	movs	r3, #6
 8002e54:	e00a      	b.n	8002e6c <HAL_GPIO_Init+0x608>
 8002e56:	2305      	movs	r3, #5
 8002e58:	e008      	b.n	8002e6c <HAL_GPIO_Init+0x608>
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	e006      	b.n	8002e6c <HAL_GPIO_Init+0x608>
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e004      	b.n	8002e6c <HAL_GPIO_Init+0x608>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e002      	b.n	8002e6c <HAL_GPIO_Init+0x608>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <HAL_GPIO_Init+0x608>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	69fa      	ldr	r2, [r7, #28]
 8002e6e:	f002 0203 	and.w	r2, r2, #3
 8002e72:	0092      	lsls	r2, r2, #2
 8002e74:	4093      	lsls	r3, r2
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e7c:	4934      	ldr	r1, [pc, #208]	; (8002f50 <HAL_GPIO_Init+0x6ec>)
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	089b      	lsrs	r3, r3, #2
 8002e82:	3302      	adds	r3, #2
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e8a:	4b3c      	ldr	r3, [pc, #240]	; (8002f7c <HAL_GPIO_Init+0x718>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_Init+0x64a>
        {
          temp |= iocurrent;
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eae:	4a33      	ldr	r2, [pc, #204]	; (8002f7c <HAL_GPIO_Init+0x718>)
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002eb4:	4b31      	ldr	r3, [pc, #196]	; (8002f7c <HAL_GPIO_Init+0x718>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_GPIO_Init+0x674>
        {
          temp |= iocurrent;
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ed8:	4a28      	ldr	r2, [pc, #160]	; (8002f7c <HAL_GPIO_Init+0x718>)
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ede:	4b27      	ldr	r3, [pc, #156]	; (8002f7c <HAL_GPIO_Init+0x718>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4013      	ands	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_GPIO_Init+0x69e>
        {
          temp |= iocurrent;
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f02:	4a1e      	ldr	r2, [pc, #120]	; (8002f7c <HAL_GPIO_Init+0x718>)
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f08:	4b1c      	ldr	r3, [pc, #112]	; (8002f7c <HAL_GPIO_Init+0x718>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_GPIO_Init+0x6c8>
        {
          temp |= iocurrent;
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f2c:	4a13      	ldr	r2, [pc, #76]	; (8002f7c <HAL_GPIO_Init+0x718>)
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	3301      	adds	r3, #1
 8002f36:	61fb      	str	r3, [r7, #28]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	2b0f      	cmp	r3, #15
 8002f3c:	f67f ad4a 	bls.w	80029d4 <HAL_GPIO_Init+0x170>
      }
    }
  }
}
 8002f40:	bf00      	nop
 8002f42:	3720      	adds	r7, #32
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	08007328 	.word	0x08007328
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40013800 	.word	0x40013800
 8002f54:	40020000 	.word	0x40020000
 8002f58:	40020400 	.word	0x40020400
 8002f5c:	40020800 	.word	0x40020800
 8002f60:	40020c00 	.word	0x40020c00
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40021400 	.word	0x40021400
 8002f6c:	40021800 	.word	0x40021800
 8002f70:	40021c00 	.word	0x40021c00
 8002f74:	40022000 	.word	0x40022000
 8002f78:	40022400 	.word	0x40022400
 8002f7c:	40013c00 	.word	0x40013c00

08002f80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002f8c:	887b      	ldrh	r3, [r7, #2]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d104      	bne.n	8002f9c <HAL_GPIO_ReadPin+0x1c>
 8002f92:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8002f96:	4809      	ldr	r0, [pc, #36]	; (8002fbc <HAL_GPIO_ReadPin+0x3c>)
 8002f98:	f7fe fc21 	bl	80017de <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	887b      	ldrh	r3, [r7, #2]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	73fb      	strb	r3, [r7, #15]
 8002fac:	e001      	b.n	8002fb2 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	08007328 	.word	0x08007328

08002fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	807b      	strh	r3, [r7, #2]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002fd0:	887b      	ldrh	r3, [r7, #2]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d104      	bne.n	8002fe0 <HAL_GPIO_WritePin+0x20>
 8002fd6:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8002fda:	480e      	ldr	r0, [pc, #56]	; (8003014 <HAL_GPIO_WritePin+0x54>)
 8002fdc:	f7fe fbff 	bl	80017de <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002fe0:	787b      	ldrb	r3, [r7, #1]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d007      	beq.n	8002ff6 <HAL_GPIO_WritePin+0x36>
 8002fe6:	787b      	ldrb	r3, [r7, #1]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d004      	beq.n	8002ff6 <HAL_GPIO_WritePin+0x36>
 8002fec:	f240 119b 	movw	r1, #411	; 0x19b
 8002ff0:	4808      	ldr	r0, [pc, #32]	; (8003014 <HAL_GPIO_WritePin+0x54>)
 8002ff2:	f7fe fbf4 	bl	80017de <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002ff6:	787b      	ldrb	r3, [r7, #1]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ffc:	887a      	ldrh	r2, [r7, #2]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003002:	e003      	b.n	800300c <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003004:	887b      	ldrh	r3, [r7, #2]
 8003006:	041a      	lsls	r2, r3, #16
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	619a      	str	r2, [r3, #24]
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	08007328 	.word	0x08007328

08003018 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003022:	4b08      	ldr	r3, [pc, #32]	; (8003044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003024:	695a      	ldr	r2, [r3, #20]
 8003026:	88fb      	ldrh	r3, [r7, #6]
 8003028:	4013      	ands	r3, r2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d006      	beq.n	800303c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800302e:	4a05      	ldr	r2, [pc, #20]	; (8003044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003030:	88fb      	ldrh	r3, [r7, #6]
 8003032:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003034:	88fb      	ldrh	r3, [r7, #6]
 8003036:	4618      	mov	r0, r3
 8003038:	f000 f806 	bl	8003048 <HAL_GPIO_EXTI_Callback>
  }
}
 800303c:	bf00      	nop
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40013c00 	.word	0x40013c00

08003048 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
	...

08003060 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003066:	2300      	movs	r3, #0
 8003068:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800306a:	4b23      	ldr	r3, [pc, #140]	; (80030f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	4a22      	ldr	r2, [pc, #136]	; (80030f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003074:	6413      	str	r3, [r2, #64]	; 0x40
 8003076:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003082:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a1d      	ldr	r2, [pc, #116]	; (80030fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800308e:	f7ff f909 	bl	80022a4 <HAL_GetTick>
 8003092:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003094:	e009      	b.n	80030aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003096:	f7ff f905 	bl	80022a4 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030a4:	d901      	bls.n	80030aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e022      	b.n	80030f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030aa:	4b14      	ldr	r3, [pc, #80]	; (80030fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b6:	d1ee      	bne.n	8003096 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80030b8:	4b10      	ldr	r3, [pc, #64]	; (80030fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a0f      	ldr	r2, [pc, #60]	; (80030fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80030be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030c4:	f7ff f8ee 	bl	80022a4 <HAL_GetTick>
 80030c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030ca:	e009      	b.n	80030e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030cc:	f7ff f8ea 	bl	80022a4 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030da:	d901      	bls.n	80030e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e007      	b.n	80030f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030ec:	d1ee      	bne.n	80030cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40007000 	.word	0x40007000

08003100 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003108:	2300      	movs	r3, #0
 800310a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e35c      	b.n	80037d0 <HAL_RCC_OscConfig+0x6d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b0f      	cmp	r3, #15
 800311c:	d904      	bls.n	8003128 <HAL_RCC_OscConfig+0x28>
 800311e:	f240 1165 	movw	r1, #357	; 0x165
 8003122:	4892      	ldr	r0, [pc, #584]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003124:	f7fe fb5b 	bl	80017de <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 809a 	beq.w	800326a <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00e      	beq.n	800315c <HAL_RCC_OscConfig+0x5c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003146:	d009      	beq.n	800315c <HAL_RCC_OscConfig+0x5c>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003150:	d004      	beq.n	800315c <HAL_RCC_OscConfig+0x5c>
 8003152:	f240 116b 	movw	r1, #363	; 0x16b
 8003156:	4885      	ldr	r0, [pc, #532]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003158:	f7fe fb41 	bl	80017de <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800315c:	4b84      	ldr	r3, [pc, #528]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 030c 	and.w	r3, r3, #12
 8003164:	2b04      	cmp	r3, #4
 8003166:	d00c      	beq.n	8003182 <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003168:	4b81      	ldr	r3, [pc, #516]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 030c 	and.w	r3, r3, #12
 8003170:	2b08      	cmp	r3, #8
 8003172:	d112      	bne.n	800319a <HAL_RCC_OscConfig+0x9a>
 8003174:	4b7e      	ldr	r3, [pc, #504]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800317c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003180:	d10b      	bne.n	800319a <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003182:	4b7b      	ldr	r3, [pc, #492]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d06c      	beq.n	8003268 <HAL_RCC_OscConfig+0x168>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d168      	bne.n	8003268 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e31a      	b.n	80037d0 <HAL_RCC_OscConfig+0x6d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a2:	d106      	bne.n	80031b2 <HAL_RCC_OscConfig+0xb2>
 80031a4:	4b72      	ldr	r3, [pc, #456]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a71      	ldr	r2, [pc, #452]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 80031aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ae:	6013      	str	r3, [r2, #0]
 80031b0:	e02e      	b.n	8003210 <HAL_RCC_OscConfig+0x110>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCC_OscConfig+0xd4>
 80031ba:	4b6d      	ldr	r3, [pc, #436]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a6c      	ldr	r2, [pc, #432]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 80031c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	4b6a      	ldr	r3, [pc, #424]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a69      	ldr	r2, [pc, #420]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 80031cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	e01d      	b.n	8003210 <HAL_RCC_OscConfig+0x110>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCC_OscConfig+0xf8>
 80031de:	4b64      	ldr	r3, [pc, #400]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a63      	ldr	r2, [pc, #396]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 80031e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	4b61      	ldr	r3, [pc, #388]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a60      	ldr	r2, [pc, #384]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 80031f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	e00b      	b.n	8003210 <HAL_RCC_OscConfig+0x110>
 80031f8:	4b5d      	ldr	r3, [pc, #372]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a5c      	ldr	r2, [pc, #368]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 80031fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	4b5a      	ldr	r3, [pc, #360]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a59      	ldr	r2, [pc, #356]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 800320a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800320e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d013      	beq.n	8003240 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7ff f844 	bl	80022a4 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003220:	f7ff f840 	bl	80022a4 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	; 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e2ce      	b.n	80037d0 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	4b4f      	ldr	r3, [pc, #316]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0x120>
 800323e:	e014      	b.n	800326a <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7ff f830 	bl	80022a4 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003248:	f7ff f82c 	bl	80022a4 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	; 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e2ba      	b.n	80037d0 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325a:	4b45      	ldr	r3, [pc, #276]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x148>
 8003266:	e000      	b.n	800326a <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 8084 	beq.w	8003380 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <HAL_RCC_OscConfig+0x192>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d004      	beq.n	8003292 <HAL_RCC_OscConfig+0x192>
 8003288:	f240 119d 	movw	r1, #413	; 0x19d
 800328c:	4837      	ldr	r0, [pc, #220]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 800328e:	f7fe faa6 	bl	80017de <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b1f      	cmp	r3, #31
 8003298:	d904      	bls.n	80032a4 <HAL_RCC_OscConfig+0x1a4>
 800329a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800329e:	4833      	ldr	r0, [pc, #204]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80032a0:	f7fe fa9d 	bl	80017de <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032a4:	4b32      	ldr	r3, [pc, #200]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00b      	beq.n	80032c8 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032b0:	4b2f      	ldr	r3, [pc, #188]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d11c      	bne.n	80032f6 <HAL_RCC_OscConfig+0x1f6>
 80032bc:	4b2c      	ldr	r3, [pc, #176]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d116      	bne.n	80032f6 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c8:	4b29      	ldr	r3, [pc, #164]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_OscConfig+0x1e0>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d001      	beq.n	80032e0 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e277      	b.n	80037d0 <HAL_RCC_OscConfig+0x6d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e0:	4b23      	ldr	r3, [pc, #140]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4920      	ldr	r1, [pc, #128]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f4:	e044      	b.n	8003380 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d023      	beq.n	8003346 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032fe:	4b1c      	ldr	r3, [pc, #112]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1b      	ldr	r2, [pc, #108]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330a:	f7fe ffcb 	bl	80022a4 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003312:	f7fe ffc7 	bl	80022a4 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e255      	b.n	80037d0 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003324:	4b12      	ldr	r3, [pc, #72]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003330:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	490c      	ldr	r1, [pc, #48]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 8003340:	4313      	orrs	r3, r2
 8003342:	600b      	str	r3, [r1, #0]
 8003344:	e01c      	b.n	8003380 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003346:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a09      	ldr	r2, [pc, #36]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 800334c:	f023 0301 	bic.w	r3, r3, #1
 8003350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003352:	f7fe ffa7 	bl	80022a4 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003358:	e00c      	b.n	8003374 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800335a:	f7fe ffa3 	bl	80022a4 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d905      	bls.n	8003374 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e231      	b.n	80037d0 <HAL_RCC_OscConfig+0x6d0>
 800336c:	08007364 	.word	0x08007364
 8003370:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003374:	4b7e      	ldr	r3, [pc, #504]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1ec      	bne.n	800335a <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b00      	cmp	r3, #0
 800338a:	d043      	beq.n	8003414 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d008      	beq.n	80033a6 <HAL_RCC_OscConfig+0x2a6>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d004      	beq.n	80033a6 <HAL_RCC_OscConfig+0x2a6>
 800339c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80033a0:	4874      	ldr	r0, [pc, #464]	; (8003574 <HAL_RCC_OscConfig+0x474>)
 80033a2:	f7fe fa1c 	bl	80017de <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d019      	beq.n	80033e2 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ae:	4b70      	ldr	r3, [pc, #448]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 80033b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b2:	4a6f      	ldr	r2, [pc, #444]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ba:	f7fe ff73 	bl	80022a4 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c2:	f7fe ff6f 	bl	80022a4 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e1fd      	b.n	80037d0 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d4:	4b66      	ldr	r3, [pc, #408]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 80033d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x2c2>
 80033e0:	e018      	b.n	8003414 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e2:	4b63      	ldr	r3, [pc, #396]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 80033e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e6:	4a62      	ldr	r2, [pc, #392]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ee:	f7fe ff59 	bl	80022a4 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f6:	f7fe ff55 	bl	80022a4 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e1e3      	b.n	80037d0 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003408:	4b59      	ldr	r3, [pc, #356]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 800340a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1f0      	bne.n	80033f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80bc 	beq.w	800359a <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00c      	beq.n	8003444 <HAL_RCC_OscConfig+0x344>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d008      	beq.n	8003444 <HAL_RCC_OscConfig+0x344>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b05      	cmp	r3, #5
 8003438:	d004      	beq.n	8003444 <HAL_RCC_OscConfig+0x344>
 800343a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800343e:	484d      	ldr	r0, [pc, #308]	; (8003574 <HAL_RCC_OscConfig+0x474>)
 8003440:	f7fe f9cd 	bl	80017de <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003444:	4b4a      	ldr	r3, [pc, #296]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10d      	bne.n	800346c <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003450:	4b47      	ldr	r3, [pc, #284]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	4a46      	ldr	r2, [pc, #280]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 8003456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800345a:	6413      	str	r3, [r2, #64]	; 0x40
 800345c:	4b44      	ldr	r3, [pc, #272]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003468:	2301      	movs	r3, #1
 800346a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800346c:	4b42      	ldr	r3, [pc, #264]	; (8003578 <HAL_RCC_OscConfig+0x478>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d118      	bne.n	80034aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003478:	4b3f      	ldr	r3, [pc, #252]	; (8003578 <HAL_RCC_OscConfig+0x478>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a3e      	ldr	r2, [pc, #248]	; (8003578 <HAL_RCC_OscConfig+0x478>)
 800347e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003482:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003484:	f7fe ff0e 	bl	80022a4 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348c:	f7fe ff0a 	bl	80022a4 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b64      	cmp	r3, #100	; 0x64
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e198      	b.n	80037d0 <HAL_RCC_OscConfig+0x6d0>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349e:	4b36      	ldr	r3, [pc, #216]	; (8003578 <HAL_RCC_OscConfig+0x478>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d106      	bne.n	80034c0 <HAL_RCC_OscConfig+0x3c0>
 80034b2:	4b2f      	ldr	r3, [pc, #188]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	4a2e      	ldr	r2, [pc, #184]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	6713      	str	r3, [r2, #112]	; 0x70
 80034be:	e02d      	b.n	800351c <HAL_RCC_OscConfig+0x41c>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10c      	bne.n	80034e2 <HAL_RCC_OscConfig+0x3e2>
 80034c8:	4b29      	ldr	r3, [pc, #164]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 80034ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034cc:	4a28      	ldr	r2, [pc, #160]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 80034ce:	f023 0301 	bic.w	r3, r3, #1
 80034d2:	6713      	str	r3, [r2, #112]	; 0x70
 80034d4:	4b26      	ldr	r3, [pc, #152]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 80034d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d8:	4a25      	ldr	r2, [pc, #148]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 80034da:	f023 0304 	bic.w	r3, r3, #4
 80034de:	6713      	str	r3, [r2, #112]	; 0x70
 80034e0:	e01c      	b.n	800351c <HAL_RCC_OscConfig+0x41c>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b05      	cmp	r3, #5
 80034e8:	d10c      	bne.n	8003504 <HAL_RCC_OscConfig+0x404>
 80034ea:	4b21      	ldr	r3, [pc, #132]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 80034ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ee:	4a20      	ldr	r2, [pc, #128]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 80034f0:	f043 0304 	orr.w	r3, r3, #4
 80034f4:	6713      	str	r3, [r2, #112]	; 0x70
 80034f6:	4b1e      	ldr	r3, [pc, #120]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	4a1d      	ldr	r2, [pc, #116]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	6713      	str	r3, [r2, #112]	; 0x70
 8003502:	e00b      	b.n	800351c <HAL_RCC_OscConfig+0x41c>
 8003504:	4b1a      	ldr	r3, [pc, #104]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 8003506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003508:	4a19      	ldr	r2, [pc, #100]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 800350a:	f023 0301 	bic.w	r3, r3, #1
 800350e:	6713      	str	r3, [r2, #112]	; 0x70
 8003510:	4b17      	ldr	r3, [pc, #92]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003514:	4a16      	ldr	r2, [pc, #88]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 8003516:	f023 0304 	bic.w	r3, r3, #4
 800351a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d015      	beq.n	8003550 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003524:	f7fe febe 	bl	80022a4 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352a:	e00a      	b.n	8003542 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352c:	f7fe feba 	bl	80022a4 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	f241 3288 	movw	r2, #5000	; 0x1388
 800353a:	4293      	cmp	r3, r2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e146      	b.n	80037d0 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003542:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <HAL_RCC_OscConfig+0x470>)
 8003544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0ee      	beq.n	800352c <HAL_RCC_OscConfig+0x42c>
 800354e:	e01b      	b.n	8003588 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003550:	f7fe fea8 	bl	80022a4 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003556:	e011      	b.n	800357c <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003558:	f7fe fea4 	bl	80022a4 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	f241 3288 	movw	r2, #5000	; 0x1388
 8003566:	4293      	cmp	r3, r2
 8003568:	d908      	bls.n	800357c <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e130      	b.n	80037d0 <HAL_RCC_OscConfig+0x6d0>
 800356e:	bf00      	nop
 8003570:	40023800 	.word	0x40023800
 8003574:	08007364 	.word	0x08007364
 8003578:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800357c:	4b96      	ldr	r3, [pc, #600]	; (80037d8 <HAL_RCC_OscConfig+0x6d8>)
 800357e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1e7      	bne.n	8003558 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003588:	7dfb      	ldrb	r3, [r7, #23]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d105      	bne.n	800359a <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358e:	4b92      	ldr	r3, [pc, #584]	; (80037d8 <HAL_RCC_OscConfig+0x6d8>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	4a91      	ldr	r2, [pc, #580]	; (80037d8 <HAL_RCC_OscConfig+0x6d8>)
 8003594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003598:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00c      	beq.n	80035bc <HAL_RCC_OscConfig+0x4bc>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d008      	beq.n	80035bc <HAL_RCC_OscConfig+0x4bc>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d004      	beq.n	80035bc <HAL_RCC_OscConfig+0x4bc>
 80035b2:	f44f 7113 	mov.w	r1, #588	; 0x24c
 80035b6:	4889      	ldr	r0, [pc, #548]	; (80037dc <HAL_RCC_OscConfig+0x6dc>)
 80035b8:	f7fe f911 	bl	80017de <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 8104 	beq.w	80037ce <HAL_RCC_OscConfig+0x6ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035c6:	4b84      	ldr	r3, [pc, #528]	; (80037d8 <HAL_RCC_OscConfig+0x6d8>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	f000 80c3 	beq.w	800375a <HAL_RCC_OscConfig+0x65a>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	f040 80a4 	bne.w	8003726 <HAL_RCC_OscConfig+0x626>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <HAL_RCC_OscConfig+0x4fa>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ee:	d004      	beq.n	80035fa <HAL_RCC_OscConfig+0x4fa>
 80035f0:	f240 2155 	movw	r1, #597	; 0x255
 80035f4:	4879      	ldr	r0, [pc, #484]	; (80037dc <HAL_RCC_OscConfig+0x6dc>)
 80035f6:	f7fe f8f2 	bl	80017de <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d903      	bls.n	800360a <HAL_RCC_OscConfig+0x50a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	2b3f      	cmp	r3, #63	; 0x3f
 8003608:	d904      	bls.n	8003614 <HAL_RCC_OscConfig+0x514>
 800360a:	f240 2156 	movw	r1, #598	; 0x256
 800360e:	4873      	ldr	r0, [pc, #460]	; (80037dc <HAL_RCC_OscConfig+0x6dc>)
 8003610:	f7fe f8e5 	bl	80017de <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	2b31      	cmp	r3, #49	; 0x31
 800361a:	d904      	bls.n	8003626 <HAL_RCC_OscConfig+0x526>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003624:	d904      	bls.n	8003630 <HAL_RCC_OscConfig+0x530>
 8003626:	f240 2157 	movw	r1, #599	; 0x257
 800362a:	486c      	ldr	r0, [pc, #432]	; (80037dc <HAL_RCC_OscConfig+0x6dc>)
 800362c:	f7fe f8d7 	bl	80017de <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	2b02      	cmp	r3, #2
 8003636:	d010      	beq.n	800365a <HAL_RCC_OscConfig+0x55a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363c:	2b04      	cmp	r3, #4
 800363e:	d00c      	beq.n	800365a <HAL_RCC_OscConfig+0x55a>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003644:	2b06      	cmp	r3, #6
 8003646:	d008      	beq.n	800365a <HAL_RCC_OscConfig+0x55a>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	2b08      	cmp	r3, #8
 800364e:	d004      	beq.n	800365a <HAL_RCC_OscConfig+0x55a>
 8003650:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003654:	4861      	ldr	r0, [pc, #388]	; (80037dc <HAL_RCC_OscConfig+0x6dc>)
 8003656:	f7fe f8c2 	bl	80017de <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	2b01      	cmp	r3, #1
 8003660:	d903      	bls.n	800366a <HAL_RCC_OscConfig+0x56a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	2b0f      	cmp	r3, #15
 8003668:	d904      	bls.n	8003674 <HAL_RCC_OscConfig+0x574>
 800366a:	f240 2159 	movw	r1, #601	; 0x259
 800366e:	485b      	ldr	r0, [pc, #364]	; (80037dc <HAL_RCC_OscConfig+0x6dc>)
 8003670:	f7fe f8b5 	bl	80017de <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	2b01      	cmp	r3, #1
 800367a:	d903      	bls.n	8003684 <HAL_RCC_OscConfig+0x584>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	2b07      	cmp	r3, #7
 8003682:	d904      	bls.n	800368e <HAL_RCC_OscConfig+0x58e>
 8003684:	f240 215b 	movw	r1, #603	; 0x25b
 8003688:	4854      	ldr	r0, [pc, #336]	; (80037dc <HAL_RCC_OscConfig+0x6dc>)
 800368a:	f7fe f8a8 	bl	80017de <assert_failed>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368e:	4b52      	ldr	r3, [pc, #328]	; (80037d8 <HAL_RCC_OscConfig+0x6d8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a51      	ldr	r2, [pc, #324]	; (80037d8 <HAL_RCC_OscConfig+0x6d8>)
 8003694:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369a:	f7fe fe03 	bl	80022a4 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x5b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a2:	f7fe fdff 	bl	80022a4 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x5b4>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e08d      	b.n	80037d0 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b4:	4b48      	ldr	r3, [pc, #288]	; (80037d8 <HAL_RCC_OscConfig+0x6d8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1f0      	bne.n	80036a2 <HAL_RCC_OscConfig+0x5a2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69da      	ldr	r2, [r3, #28]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	019b      	lsls	r3, r3, #6
 80036d0:	431a      	orrs	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	085b      	lsrs	r3, r3, #1
 80036d8:	3b01      	subs	r3, #1
 80036da:	041b      	lsls	r3, r3, #16
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	061b      	lsls	r3, r3, #24
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	071b      	lsls	r3, r3, #28
 80036ec:	493a      	ldr	r1, [pc, #232]	; (80037d8 <HAL_RCC_OscConfig+0x6d8>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036f2:	4b39      	ldr	r3, [pc, #228]	; (80037d8 <HAL_RCC_OscConfig+0x6d8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a38      	ldr	r2, [pc, #224]	; (80037d8 <HAL_RCC_OscConfig+0x6d8>)
 80036f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fe:	f7fe fdd1 	bl	80022a4 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x618>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003706:	f7fe fdcd 	bl	80022a4 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e05b      	b.n	80037d0 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003718:	4b2f      	ldr	r3, [pc, #188]	; (80037d8 <HAL_RCC_OscConfig+0x6d8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0f0      	beq.n	8003706 <HAL_RCC_OscConfig+0x606>
 8003724:	e053      	b.n	80037ce <HAL_RCC_OscConfig+0x6ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003726:	4b2c      	ldr	r3, [pc, #176]	; (80037d8 <HAL_RCC_OscConfig+0x6d8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a2b      	ldr	r2, [pc, #172]	; (80037d8 <HAL_RCC_OscConfig+0x6d8>)
 800372c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003732:	f7fe fdb7 	bl	80022a4 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x64c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373a:	f7fe fdb3 	bl	80022a4 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e041      	b.n	80037d0 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374c:	4b22      	ldr	r3, [pc, #136]	; (80037d8 <HAL_RCC_OscConfig+0x6d8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f0      	bne.n	800373a <HAL_RCC_OscConfig+0x63a>
 8003758:	e039      	b.n	80037ce <HAL_RCC_OscConfig+0x6ce>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800375a:	4b1f      	ldr	r3, [pc, #124]	; (80037d8 <HAL_RCC_OscConfig+0x6d8>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d030      	beq.n	80037ca <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003772:	429a      	cmp	r2, r3
 8003774:	d129      	bne.n	80037ca <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003780:	429a      	cmp	r2, r3
 8003782:	d122      	bne.n	80037ca <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800378a:	4013      	ands	r3, r2
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003790:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003792:	4293      	cmp	r3, r2
 8003794:	d119      	bne.n	80037ca <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a0:	085b      	lsrs	r3, r3, #1
 80037a2:	3b01      	subs	r3, #1
 80037a4:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d10f      	bne.n	80037ca <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d001      	beq.n	80037ce <HAL_RCC_OscConfig+0x6ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <HAL_RCC_OscConfig+0x6d0>
      }
    }
  }
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40023800 	.word	0x40023800
 80037dc:	08007364 	.word	0x08007364

080037e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e18c      	b.n	8003b12 <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_RCC_ClockConfig+0x28>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b0f      	cmp	r3, #15
 8003806:	d904      	bls.n	8003812 <HAL_RCC_ClockConfig+0x32>
 8003808:	f240 21df 	movw	r1, #735	; 0x2df
 800380c:	4887      	ldr	r0, [pc, #540]	; (8003a2c <HAL_RCC_ClockConfig+0x24c>)
 800380e:	f7fd ffe6 	bl	80017de <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d031      	beq.n	800387c <HAL_RCC_ClockConfig+0x9c>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d02e      	beq.n	800387c <HAL_RCC_ClockConfig+0x9c>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b02      	cmp	r3, #2
 8003822:	d02b      	beq.n	800387c <HAL_RCC_ClockConfig+0x9c>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	2b03      	cmp	r3, #3
 8003828:	d028      	beq.n	800387c <HAL_RCC_ClockConfig+0x9c>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b04      	cmp	r3, #4
 800382e:	d025      	beq.n	800387c <HAL_RCC_ClockConfig+0x9c>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2b05      	cmp	r3, #5
 8003834:	d022      	beq.n	800387c <HAL_RCC_ClockConfig+0x9c>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b06      	cmp	r3, #6
 800383a:	d01f      	beq.n	800387c <HAL_RCC_ClockConfig+0x9c>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	2b07      	cmp	r3, #7
 8003840:	d01c      	beq.n	800387c <HAL_RCC_ClockConfig+0x9c>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b08      	cmp	r3, #8
 8003846:	d019      	beq.n	800387c <HAL_RCC_ClockConfig+0x9c>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2b09      	cmp	r3, #9
 800384c:	d016      	beq.n	800387c <HAL_RCC_ClockConfig+0x9c>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b0a      	cmp	r3, #10
 8003852:	d013      	beq.n	800387c <HAL_RCC_ClockConfig+0x9c>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2b0b      	cmp	r3, #11
 8003858:	d010      	beq.n	800387c <HAL_RCC_ClockConfig+0x9c>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b0c      	cmp	r3, #12
 800385e:	d00d      	beq.n	800387c <HAL_RCC_ClockConfig+0x9c>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2b0d      	cmp	r3, #13
 8003864:	d00a      	beq.n	800387c <HAL_RCC_ClockConfig+0x9c>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b0e      	cmp	r3, #14
 800386a:	d007      	beq.n	800387c <HAL_RCC_ClockConfig+0x9c>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	2b0f      	cmp	r3, #15
 8003870:	d004      	beq.n	800387c <HAL_RCC_ClockConfig+0x9c>
 8003872:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8003876:	486d      	ldr	r0, [pc, #436]	; (8003a2c <HAL_RCC_ClockConfig+0x24c>)
 8003878:	f7fd ffb1 	bl	80017de <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800387c:	4b6c      	ldr	r3, [pc, #432]	; (8003a30 <HAL_RCC_ClockConfig+0x250>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 030f 	and.w	r3, r3, #15
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d910      	bls.n	80038ac <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388a:	4b69      	ldr	r3, [pc, #420]	; (8003a30 <HAL_RCC_ClockConfig+0x250>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f023 020f 	bic.w	r2, r3, #15
 8003892:	4967      	ldr	r1, [pc, #412]	; (8003a30 <HAL_RCC_ClockConfig+0x250>)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	4313      	orrs	r3, r2
 8003898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800389a:	4b65      	ldr	r3, [pc, #404]	; (8003a30 <HAL_RCC_ClockConfig+0x250>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d001      	beq.n	80038ac <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e132      	b.n	8003b12 <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d049      	beq.n	800394c <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c4:	4b5b      	ldr	r3, [pc, #364]	; (8003a34 <HAL_RCC_ClockConfig+0x254>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4a5a      	ldr	r2, [pc, #360]	; (8003a34 <HAL_RCC_ClockConfig+0x254>)
 80038ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038dc:	4b55      	ldr	r3, [pc, #340]	; (8003a34 <HAL_RCC_ClockConfig+0x254>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4a54      	ldr	r2, [pc, #336]	; (8003a34 <HAL_RCC_ClockConfig+0x254>)
 80038e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d024      	beq.n	800393a <HAL_RCC_ClockConfig+0x15a>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	2b80      	cmp	r3, #128	; 0x80
 80038f6:	d020      	beq.n	800393a <HAL_RCC_ClockConfig+0x15a>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2b90      	cmp	r3, #144	; 0x90
 80038fe:	d01c      	beq.n	800393a <HAL_RCC_ClockConfig+0x15a>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2ba0      	cmp	r3, #160	; 0xa0
 8003906:	d018      	beq.n	800393a <HAL_RCC_ClockConfig+0x15a>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2bb0      	cmp	r3, #176	; 0xb0
 800390e:	d014      	beq.n	800393a <HAL_RCC_ClockConfig+0x15a>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2bc0      	cmp	r3, #192	; 0xc0
 8003916:	d010      	beq.n	800393a <HAL_RCC_ClockConfig+0x15a>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2bd0      	cmp	r3, #208	; 0xd0
 800391e:	d00c      	beq.n	800393a <HAL_RCC_ClockConfig+0x15a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2be0      	cmp	r3, #224	; 0xe0
 8003926:	d008      	beq.n	800393a <HAL_RCC_ClockConfig+0x15a>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2bf0      	cmp	r3, #240	; 0xf0
 800392e:	d004      	beq.n	800393a <HAL_RCC_ClockConfig+0x15a>
 8003930:	f44f 7141 	mov.w	r1, #772	; 0x304
 8003934:	483d      	ldr	r0, [pc, #244]	; (8003a2c <HAL_RCC_ClockConfig+0x24c>)
 8003936:	f7fd ff52 	bl	80017de <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800393a:	4b3e      	ldr	r3, [pc, #248]	; (8003a34 <HAL_RCC_ClockConfig+0x254>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	493b      	ldr	r1, [pc, #236]	; (8003a34 <HAL_RCC_ClockConfig+0x254>)
 8003948:	4313      	orrs	r3, r2
 800394a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d051      	beq.n	80039fc <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00c      	beq.n	800397a <HAL_RCC_ClockConfig+0x19a>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d008      	beq.n	800397a <HAL_RCC_ClockConfig+0x19a>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b02      	cmp	r3, #2
 800396e:	d004      	beq.n	800397a <HAL_RCC_ClockConfig+0x19a>
 8003970:	f240 310b 	movw	r1, #779	; 0x30b
 8003974:	482d      	ldr	r0, [pc, #180]	; (8003a2c <HAL_RCC_ClockConfig+0x24c>)
 8003976:	f7fd ff32 	bl	80017de <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d107      	bne.n	8003992 <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003982:	4b2c      	ldr	r3, [pc, #176]	; (8003a34 <HAL_RCC_ClockConfig+0x254>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d115      	bne.n	80039ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e0bf      	b.n	8003b12 <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d107      	bne.n	80039aa <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800399a:	4b26      	ldr	r3, [pc, #152]	; (8003a34 <HAL_RCC_ClockConfig+0x254>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e0b3      	b.n	8003b12 <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039aa:	4b22      	ldr	r3, [pc, #136]	; (8003a34 <HAL_RCC_ClockConfig+0x254>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e0ab      	b.n	8003b12 <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ba:	4b1e      	ldr	r3, [pc, #120]	; (8003a34 <HAL_RCC_ClockConfig+0x254>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f023 0203 	bic.w	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	491b      	ldr	r1, [pc, #108]	; (8003a34 <HAL_RCC_ClockConfig+0x254>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039cc:	f7fe fc6a 	bl	80022a4 <HAL_GetTick>
 80039d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d2:	e00a      	b.n	80039ea <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d4:	f7fe fc66 	bl	80022a4 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e093      	b.n	8003b12 <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ea:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <HAL_RCC_ClockConfig+0x254>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 020c 	and.w	r2, r3, #12
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d1eb      	bne.n	80039d4 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039fc:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <HAL_RCC_ClockConfig+0x250>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 030f 	and.w	r3, r3, #15
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d216      	bcs.n	8003a38 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0a:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <HAL_RCC_ClockConfig+0x250>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f023 020f 	bic.w	r2, r3, #15
 8003a12:	4907      	ldr	r1, [pc, #28]	; (8003a30 <HAL_RCC_ClockConfig+0x250>)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1a:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <HAL_RCC_ClockConfig+0x250>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d007      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e072      	b.n	8003b12 <HAL_RCC_ClockConfig+0x332>
 8003a2c:	08007364 	.word	0x08007364
 8003a30:	40023c00 	.word	0x40023c00
 8003a34:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d025      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d018      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x29e>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a54:	d013      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x29e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a5e:	d00e      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x29e>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003a68:	d009      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x29e>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003a72:	d004      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x29e>
 8003a74:	f44f 7152 	mov.w	r1, #840	; 0x348
 8003a78:	4828      	ldr	r0, [pc, #160]	; (8003b1c <HAL_RCC_ClockConfig+0x33c>)
 8003a7a:	f7fd feb0 	bl	80017de <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a7e:	4b28      	ldr	r3, [pc, #160]	; (8003b20 <HAL_RCC_ClockConfig+0x340>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	4925      	ldr	r1, [pc, #148]	; (8003b20 <HAL_RCC_ClockConfig+0x340>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d026      	beq.n	8003aea <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d018      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x2f6>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aac:	d013      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x2f6>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ab6:	d00e      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x2f6>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003ac0:	d009      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x2f6>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003aca:	d004      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x2f6>
 8003acc:	f240 314f 	movw	r1, #847	; 0x34f
 8003ad0:	4812      	ldr	r0, [pc, #72]	; (8003b1c <HAL_RCC_ClockConfig+0x33c>)
 8003ad2:	f7fd fe84 	bl	80017de <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ad6:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <HAL_RCC_ClockConfig+0x340>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	490e      	ldr	r1, [pc, #56]	; (8003b20 <HAL_RCC_ClockConfig+0x340>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aea:	f000 f821 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8003aee:	4601      	mov	r1, r0
 8003af0:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <HAL_RCC_ClockConfig+0x340>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	4a0a      	ldr	r2, [pc, #40]	; (8003b24 <HAL_RCC_ClockConfig+0x344>)
 8003afc:	5cd3      	ldrb	r3, [r2, r3]
 8003afe:	fa21 f303 	lsr.w	r3, r1, r3
 8003b02:	4a09      	ldr	r2, [pc, #36]	; (8003b28 <HAL_RCC_ClockConfig+0x348>)
 8003b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b06:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <HAL_RCC_ClockConfig+0x34c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fe fb86 	bl	800221c <HAL_InitTick>

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	08007364 	.word	0x08007364
 8003b20:	40023800 	.word	0x40023800
 8003b24:	0800744c 	.word	0x0800744c
 8003b28:	20000000 	.word	0x20000000
 8003b2c:	20000004 	.word	0x20000004

08003b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	607b      	str	r3, [r7, #4]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	2300      	movs	r3, #0
 8003b40:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b46:	4b50      	ldr	r3, [pc, #320]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d007      	beq.n	8003b62 <HAL_RCC_GetSysClockFreq+0x32>
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d008      	beq.n	8003b68 <HAL_RCC_GetSysClockFreq+0x38>
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f040 808d 	bne.w	8003c76 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b5c:	4b4b      	ldr	r3, [pc, #300]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003b5e:	60bb      	str	r3, [r7, #8]
      break;
 8003b60:	e08c      	b.n	8003c7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b62:	4b4b      	ldr	r3, [pc, #300]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b64:	60bb      	str	r3, [r7, #8]
      break;
 8003b66:	e089      	b.n	8003c7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b68:	4b47      	ldr	r3, [pc, #284]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b70:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b72:	4b45      	ldr	r3, [pc, #276]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d023      	beq.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b7e:	4b42      	ldr	r3, [pc, #264]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	099b      	lsrs	r3, r3, #6
 8003b84:	f04f 0400 	mov.w	r4, #0
 8003b88:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	ea03 0501 	and.w	r5, r3, r1
 8003b94:	ea04 0602 	and.w	r6, r4, r2
 8003b98:	4a3d      	ldr	r2, [pc, #244]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b9a:	fb02 f106 	mul.w	r1, r2, r6
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	fb02 f205 	mul.w	r2, r2, r5
 8003ba4:	440a      	add	r2, r1
 8003ba6:	493a      	ldr	r1, [pc, #232]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ba8:	fba5 0101 	umull	r0, r1, r5, r1
 8003bac:	1853      	adds	r3, r2, r1
 8003bae:	4619      	mov	r1, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f04f 0400 	mov.w	r4, #0
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	4623      	mov	r3, r4
 8003bba:	f7fc fb3d 	bl	8000238 <__aeabi_uldivmod>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	460c      	mov	r4, r1
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	e049      	b.n	8003c5a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc6:	4b30      	ldr	r3, [pc, #192]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x158>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	099b      	lsrs	r3, r3, #6
 8003bcc:	f04f 0400 	mov.w	r4, #0
 8003bd0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	ea03 0501 	and.w	r5, r3, r1
 8003bdc:	ea04 0602 	and.w	r6, r4, r2
 8003be0:	4629      	mov	r1, r5
 8003be2:	4632      	mov	r2, r6
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	f04f 0400 	mov.w	r4, #0
 8003bec:	0154      	lsls	r4, r2, #5
 8003bee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003bf2:	014b      	lsls	r3, r1, #5
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4622      	mov	r2, r4
 8003bf8:	1b49      	subs	r1, r1, r5
 8003bfa:	eb62 0206 	sbc.w	r2, r2, r6
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	f04f 0400 	mov.w	r4, #0
 8003c06:	0194      	lsls	r4, r2, #6
 8003c08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c0c:	018b      	lsls	r3, r1, #6
 8003c0e:	1a5b      	subs	r3, r3, r1
 8003c10:	eb64 0402 	sbc.w	r4, r4, r2
 8003c14:	f04f 0100 	mov.w	r1, #0
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	00e2      	lsls	r2, r4, #3
 8003c1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c22:	00d9      	lsls	r1, r3, #3
 8003c24:	460b      	mov	r3, r1
 8003c26:	4614      	mov	r4, r2
 8003c28:	195b      	adds	r3, r3, r5
 8003c2a:	eb44 0406 	adc.w	r4, r4, r6
 8003c2e:	f04f 0100 	mov.w	r1, #0
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	02a2      	lsls	r2, r4, #10
 8003c38:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003c3c:	0299      	lsls	r1, r3, #10
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4614      	mov	r4, r2
 8003c42:	4618      	mov	r0, r3
 8003c44:	4621      	mov	r1, r4
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f04f 0400 	mov.w	r4, #0
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	4623      	mov	r3, r4
 8003c50:	f7fc faf2 	bl	8000238 <__aeabi_uldivmod>
 8003c54:	4603      	mov	r3, r0
 8003c56:	460c      	mov	r4, r1
 8003c58:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	0c1b      	lsrs	r3, r3, #16
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	3301      	adds	r3, #1
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c72:	60bb      	str	r3, [r7, #8]
      break;
 8003c74:	e002      	b.n	8003c7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c76:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003c78:	60bb      	str	r3, [r7, #8]
      break;
 8003c7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	00f42400 	.word	0x00f42400
 8003c90:	017d7840 	.word	0x017d7840

08003c94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c98:	4b03      	ldr	r3, [pc, #12]	; (8003ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	20000000 	.word	0x20000000

08003cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cb0:	f7ff fff0 	bl	8003c94 <HAL_RCC_GetHCLKFreq>
 8003cb4:	4601      	mov	r1, r0
 8003cb6:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	0a9b      	lsrs	r3, r3, #10
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	4a03      	ldr	r2, [pc, #12]	; (8003cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cc2:	5cd3      	ldrb	r3, [r2, r3]
 8003cc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	0800745c 	.word	0x0800745c

08003cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cd8:	f7ff ffdc 	bl	8003c94 <HAL_RCC_GetHCLKFreq>
 8003cdc:	4601      	mov	r1, r0
 8003cde:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	0b5b      	lsrs	r3, r3, #13
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	4a03      	ldr	r2, [pc, #12]	; (8003cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cea:	5cd3      	ldrb	r3, [r2, r3]
 8003cec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	0800745c 	.word	0x0800745c

08003cfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d04:	2300      	movs	r3, #0
 8003d06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f040 809e 	bne.w	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f040 8097 	bne.w	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f040 8090 	bne.w	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f040 8089 	bne.w	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f040 8082 	bne.w	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d17b      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d175      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d16f      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d169      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d163      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d15d      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d157      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d151      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d14b      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d145      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d13f      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d139      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d133      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d12d      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d127      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d121      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d11b      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d115      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10f      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0320 	and.w	r3, r3, #32
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d103      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003e5a:	2174      	movs	r1, #116	; 0x74
 8003e5c:	48a2      	ldr	r0, [pc, #648]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003e5e:	f7fd fcbe 	bl	80017de <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d01f      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d008      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e7e:	d003      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003e80:	217a      	movs	r1, #122	; 0x7a
 8003e82:	4899      	ldr	r0, [pc, #612]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003e84:	f7fd fcab 	bl	80017de <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e88:	4b98      	ldr	r3, [pc, #608]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	4a97      	ldr	r2, [pc, #604]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003e8e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e92:	6093      	str	r3, [r2, #8]
 8003e94:	4b95      	ldr	r3, [pc, #596]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9c:	4993      	ldr	r1, [pc, #588]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      plli2sused = 1;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d02e      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d012      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eca:	d00d      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ed4:	d008      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ede:	d003      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003ee0:	218a      	movs	r1, #138	; 0x8a
 8003ee2:	4881      	ldr	r0, [pc, #516]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003ee4:	f7fd fc7b 	bl	80017de <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ee8:	4b80      	ldr	r3, [pc, #512]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003eea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef6:	497d      	ldr	r1, [pc, #500]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f06:	d101      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x210>
    {
      plli2sused = 1;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      pllsaiused = 1;
 8003f14:	2301      	movs	r3, #1
 8003f16:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d02e      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d012      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f34:	d00d      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f3e:	d008      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f48:	d003      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003f4a:	219e      	movs	r1, #158	; 0x9e
 8003f4c:	4866      	ldr	r0, [pc, #408]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003f4e:	f7fd fc46 	bl	80017de <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f52:	4b66      	ldr	r3, [pc, #408]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	4962      	ldr	r1, [pc, #392]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f70:	d101      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      plli2sused = 1;
 8003f72:	2301      	movs	r3, #1
 8003f74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      pllsaiused = 1;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
      plli2sused = 1;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0320 	and.w	r3, r3, #32
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 8187 	beq.w	80042ae <HAL_RCCEx_PeriphCLKConfig+0x5b2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa8:	f000 80eb 	beq.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fb4:	f000 80e5 	beq.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	4a4c      	ldr	r2, [pc, #304]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	f000 80df 	beq.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	4a4a      	ldr	r2, [pc, #296]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	f000 80d9 	beq.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	4a48      	ldr	r2, [pc, #288]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	f000 80d3 	beq.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe0:	4a46      	ldr	r2, [pc, #280]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	f000 80cd 	beq.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	4a44      	ldr	r2, [pc, #272]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	f000 80c7 	beq.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff8:	4a42      	ldr	r2, [pc, #264]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	f000 80c1 	beq.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	4a40      	ldr	r2, [pc, #256]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	f000 80bb 	beq.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	4a3e      	ldr	r2, [pc, #248]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x410>)
 8004012:	4293      	cmp	r3, r2
 8004014:	f000 80b5 	beq.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401c:	4a3c      	ldr	r2, [pc, #240]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x414>)
 800401e:	4293      	cmp	r3, r2
 8004020:	f000 80af 	beq.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004028:	4a3a      	ldr	r2, [pc, #232]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 800402a:	4293      	cmp	r3, r2
 800402c:	f000 80a9 	beq.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004034:	4a38      	ldr	r2, [pc, #224]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	f000 80a3 	beq.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	4a36      	ldr	r2, [pc, #216]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8004042:	4293      	cmp	r3, r2
 8004044:	f000 809d 	beq.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	4a34      	ldr	r2, [pc, #208]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800404e:	4293      	cmp	r3, r2
 8004050:	f000 8097 	beq.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004058:	4a32      	ldr	r2, [pc, #200]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800405a:	4293      	cmp	r3, r2
 800405c:	f000 8091 	beq.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004064:	4a30      	ldr	r2, [pc, #192]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	f000 808b 	beq.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004070:	4a2e      	ldr	r2, [pc, #184]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8004072:	4293      	cmp	r3, r2
 8004074:	f000 8085 	beq.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	4a2c      	ldr	r2, [pc, #176]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d07f      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	4a2b      	ldr	r2, [pc, #172]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d07a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004090:	4a29      	ldr	r2, [pc, #164]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d075      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	4a28      	ldr	r2, [pc, #160]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x440>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d070      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	4a26      	ldr	r2, [pc, #152]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d06b      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	4a25      	ldr	r2, [pc, #148]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d066      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	4a23      	ldr	r2, [pc, #140]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d061      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c2:	4a22      	ldr	r2, [pc, #136]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d05c      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	4a20      	ldr	r2, [pc, #128]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d057      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	4a1f      	ldr	r2, [pc, #124]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d052      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	4a1d      	ldr	r2, [pc, #116]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d04d      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80040e6:	e039      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x460>
 80040e8:	0800739c 	.word	0x0800739c
 80040ec:	40023800 	.word	0x40023800
 80040f0:	00020300 	.word	0x00020300
 80040f4:	00030300 	.word	0x00030300
 80040f8:	00040300 	.word	0x00040300
 80040fc:	00050300 	.word	0x00050300
 8004100:	00060300 	.word	0x00060300
 8004104:	00070300 	.word	0x00070300
 8004108:	00080300 	.word	0x00080300
 800410c:	00090300 	.word	0x00090300
 8004110:	000a0300 	.word	0x000a0300
 8004114:	000b0300 	.word	0x000b0300
 8004118:	000c0300 	.word	0x000c0300
 800411c:	000d0300 	.word	0x000d0300
 8004120:	000e0300 	.word	0x000e0300
 8004124:	000f0300 	.word	0x000f0300
 8004128:	00100300 	.word	0x00100300
 800412c:	00110300 	.word	0x00110300
 8004130:	00120300 	.word	0x00120300
 8004134:	00130300 	.word	0x00130300
 8004138:	00140300 	.word	0x00140300
 800413c:	00150300 	.word	0x00150300
 8004140:	00160300 	.word	0x00160300
 8004144:	00170300 	.word	0x00170300
 8004148:	00180300 	.word	0x00180300
 800414c:	00190300 	.word	0x00190300
 8004150:	001a0300 	.word	0x001a0300
 8004154:	001b0300 	.word	0x001b0300
 8004158:	001c0300 	.word	0x001c0300
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004160:	4a44      	ldr	r2, [pc, #272]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d00d      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416a:	4a43      	ldr	r2, [pc, #268]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d008      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004174:	4a41      	ldr	r2, [pc, #260]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d003      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800417a:	21b9      	movs	r1, #185	; 0xb9
 800417c:	4840      	ldr	r0, [pc, #256]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800417e:	f7fd fb2e 	bl	80017de <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004182:	4b40      	ldr	r3, [pc, #256]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	4a3f      	ldr	r2, [pc, #252]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800418c:	6413      	str	r3, [r2, #64]	; 0x40
 800418e:	4b3d      	ldr	r3, [pc, #244]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004196:	60bb      	str	r3, [r7, #8]
 8004198:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800419a:	4b3b      	ldr	r3, [pc, #236]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a3a      	ldr	r2, [pc, #232]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80041a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a6:	f7fe f87d 	bl	80022a4 <HAL_GetTick>
 80041aa:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041ac:	e009      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ae:	f7fe f879 	bl	80022a4 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b64      	cmp	r3, #100	; 0x64
 80041ba:	d902      	bls.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
      {
        return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	f000 be00 	b.w	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041c2:	4b31      	ldr	r3, [pc, #196]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0ef      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041ce:	4b2d      	ldr	r3, [pc, #180]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80041d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d036      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x550>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d02f      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041ec:	4b25      	ldr	r3, [pc, #148]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80041ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041f6:	4b23      	ldr	r3, [pc, #140]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	4a22      	ldr	r2, [pc, #136]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80041fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004200:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004202:	4b20      	ldr	r3, [pc, #128]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004206:	4a1f      	ldr	r2, [pc, #124]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800420c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800420e:	4a1d      	ldr	r2, [pc, #116]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004214:	4b1b      	ldr	r3, [pc, #108]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b01      	cmp	r3, #1
 800421e:	d115      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x550>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fe f840 	bl	80022a4 <HAL_GetTick>
 8004224:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004226:	e00b      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x544>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004228:	f7fe f83c 	bl	80022a4 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f241 3288 	movw	r2, #5000	; 0x1388
 8004236:	4293      	cmp	r3, r2
 8004238:	d902      	bls.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x544>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	f000 bdc1 	b.w	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004240:	4b10      	ldr	r3, [pc, #64]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0ed      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x52c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004254:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004258:	d11a      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800425a:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004266:	4b09      	ldr	r3, [pc, #36]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004268:	400b      	ands	r3, r1
 800426a:	4906      	ldr	r1, [pc, #24]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800426c:	4313      	orrs	r3, r2
 800426e:	608b      	str	r3, [r1, #8]
 8004270:	e014      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 8004272:	bf00      	nop
 8004274:	001d0300 	.word	0x001d0300
 8004278:	001e0300 	.word	0x001e0300
 800427c:	001f0300 	.word	0x001f0300
 8004280:	0800739c 	.word	0x0800739c
 8004284:	40023800 	.word	0x40023800
 8004288:	40007000 	.word	0x40007000
 800428c:	0ffffcff 	.word	0x0ffffcff
 8004290:	4ba7      	ldr	r3, [pc, #668]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	4aa6      	ldr	r2, [pc, #664]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004296:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800429a:	6093      	str	r3, [r2, #8]
 800429c:	4ba4      	ldr	r3, [pc, #656]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800429e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042a8:	49a1      	ldr	r1, [pc, #644]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d01d      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d008      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042ca:	d003      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 80042cc:	21f3      	movs	r1, #243	; 0xf3
 80042ce:	4899      	ldr	r0, [pc, #612]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80042d0:	f7fd fa85 	bl	80017de <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042d4:	4b96      	ldr	r3, [pc, #600]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042da:	4a95      	ldr	r2, [pc, #596]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042e0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042e4:	4b92      	ldr	r3, [pc, #584]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042e6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ee:	4990      	ldr	r1, [pc, #576]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d01c      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00d      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800430e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004312:	d008      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004318:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800431c:	d003      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 800431e:	21fd      	movs	r1, #253	; 0xfd
 8004320:	4884      	ldr	r0, [pc, #528]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004322:	f7fd fa5c 	bl	80017de <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004326:	4b82      	ldr	r3, [pc, #520]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004334:	497e      	ldr	r1, [pc, #504]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d01d      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00e      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004354:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004358:	d009      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800435e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004362:	d004      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004364:	f240 1107 	movw	r1, #263	; 0x107
 8004368:	4872      	ldr	r0, [pc, #456]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800436a:	f7fd fa38 	bl	80017de <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800436e:	4b70      	ldr	r3, [pc, #448]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004374:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800437c:	496c      	ldr	r1, [pc, #432]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01d      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00e      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800439c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043a0:	d009      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043aa:	d004      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 80043ac:	f240 1111 	movw	r1, #273	; 0x111
 80043b0:	4860      	ldr	r0, [pc, #384]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80043b2:	f7fd fa14 	bl	80017de <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043b6:	4b5e      	ldr	r3, [pc, #376]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043c4:	495a      	ldr	r1, [pc, #360]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d01d      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x718>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00e      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x702>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043e8:	d009      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x702>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043f2:	d004      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x702>
 80043f4:	f240 111b 	movw	r1, #283	; 0x11b
 80043f8:	484e      	ldr	r0, [pc, #312]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80043fa:	f7fd f9f0 	bl	80017de <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043fe:	4b4c      	ldr	r3, [pc, #304]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004404:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440c:	4948      	ldr	r1, [pc, #288]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441c:	2b00      	cmp	r3, #0
 800441e:	d01f      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x764>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004424:	2b00      	cmp	r3, #0
 8004426:	d010      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442c:	2b01      	cmp	r3, #1
 800442e:	d00c      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004434:	2b03      	cmp	r3, #3
 8004436:	d008      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443c:	2b02      	cmp	r3, #2
 800443e:	d004      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004440:	f240 1125 	movw	r1, #293	; 0x125
 8004444:	483b      	ldr	r0, [pc, #236]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004446:	f7fd f9ca 	bl	80017de <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800444a:	4b39      	ldr	r3, [pc, #228]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800444c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004450:	f023 0203 	bic.w	r2, r3, #3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004458:	4935      	ldr	r1, [pc, #212]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004468:	2b00      	cmp	r3, #0
 800446a:	d01f      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004470:	2b00      	cmp	r3, #0
 8004472:	d010      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004478:	2b04      	cmp	r3, #4
 800447a:	d00c      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004480:	2b0c      	cmp	r3, #12
 8004482:	d008      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004488:	2b08      	cmp	r3, #8
 800448a:	d004      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 800448c:	f240 112f 	movw	r1, #303	; 0x12f
 8004490:	4828      	ldr	r0, [pc, #160]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004492:	f7fd f9a4 	bl	80017de <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004496:	4b26      	ldr	r3, [pc, #152]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449c:	f023 020c 	bic.w	r2, r3, #12
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a4:	4922      	ldr	r1, [pc, #136]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d01f      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d010      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c4:	2b10      	cmp	r3, #16
 80044c6:	d00c      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044cc:	2b30      	cmp	r3, #48	; 0x30
 80044ce:	d008      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d4:	2b20      	cmp	r3, #32
 80044d6:	d004      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80044d8:	f240 1139 	movw	r1, #313	; 0x139
 80044dc:	4815      	ldr	r0, [pc, #84]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80044de:	f7fd f97e 	bl	80017de <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044e2:	4b13      	ldr	r3, [pc, #76]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f0:	490f      	ldr	r1, [pc, #60]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004500:	2b00      	cmp	r3, #0
 8004502:	d024      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004508:	2b00      	cmp	r3, #0
 800450a:	d015      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004510:	2b40      	cmp	r3, #64	; 0x40
 8004512:	d011      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004518:	2bc0      	cmp	r3, #192	; 0xc0
 800451a:	d00d      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004520:	2b80      	cmp	r3, #128	; 0x80
 8004522:	d009      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004524:	f240 1143 	movw	r1, #323	; 0x143
 8004528:	4802      	ldr	r0, [pc, #8]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800452a:	f7fd f958 	bl	80017de <assert_failed>
 800452e:	e003      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004530:	40023800 	.word	0x40023800
 8004534:	0800739c 	.word	0x0800739c

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004538:	4bae      	ldr	r3, [pc, #696]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800453a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004546:	49ab      	ldr	r1, [pc, #684]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004548:	4313      	orrs	r3, r2
 800454a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004556:	2b00      	cmp	r3, #0
 8004558:	d022      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455e:	2b00      	cmp	r3, #0
 8004560:	d013      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456a:	d00e      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x88e>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004570:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004574:	d009      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800457e:	d004      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004580:	f240 114d 	movw	r1, #333	; 0x14d
 8004584:	489c      	ldr	r0, [pc, #624]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004586:	f7fd f92a 	bl	80017de <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800458a:	4b9a      	ldr	r3, [pc, #616]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004598:	4996      	ldr	r1, [pc, #600]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800459a:	4313      	orrs	r3, r2
 800459c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d022      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d013      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045bc:	d00e      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045c6:	d009      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d0:	d004      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 80045d2:	f240 1157 	movw	r1, #343	; 0x157
 80045d6:	4888      	ldr	r0, [pc, #544]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80045d8:	f7fd f901 	bl	80017de <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80045dc:	4b85      	ldr	r3, [pc, #532]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ea:	4982      	ldr	r1, [pc, #520]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d022      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004602:	2b00      	cmp	r3, #0
 8004604:	d013      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x932>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800460e:	d00e      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x932>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004614:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004618:	d009      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x932>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004622:	d004      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x932>
 8004624:	f240 1161 	movw	r1, #353	; 0x161
 8004628:	4873      	ldr	r0, [pc, #460]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 800462a:	f7fd f8d8 	bl	80017de <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800462e:	4b71      	ldr	r3, [pc, #452]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004634:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463c:	496d      	ldr	r1, [pc, #436]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d022      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004654:	2b00      	cmp	r3, #0
 8004656:	d013      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800465c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004660:	d00e      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004666:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800466a:	d009      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004674:	d004      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004676:	f240 116b 	movw	r1, #363	; 0x16b
 800467a:	485f      	ldr	r0, [pc, #380]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 800467c:	f7fd f8af 	bl	80017de <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004680:	4b5c      	ldr	r3, [pc, #368]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004686:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800468e:	4959      	ldr	r1, [pc, #356]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d018      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046aa:	d008      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d004      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80046b4:	f240 1175 	movw	r1, #373	; 0x175
 80046b8:	484f      	ldr	r0, [pc, #316]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80046ba:	f7fd f890 	bl	80017de <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046be:	4b4d      	ldr	r3, [pc, #308]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80046c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046cc:	4949      	ldr	r1, [pc, #292]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d01f      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046e8:	d008      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d004      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80046f2:	f240 117f 	movw	r1, #383	; 0x17f
 80046f6:	4840      	ldr	r0, [pc, #256]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80046f8:	f7fd f871 	bl	80017de <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80046fc:	4b3d      	ldr	r3, [pc, #244]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80046fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004702:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800470a:	493a      	ldr	r1, [pc, #232]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004716:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800471a:	d101      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      pllsaiused = 1;
 800471c:	2301      	movs	r3, #1
 800471e:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    pllsaiused = 1;
 800472c:	2301      	movs	r3, #1
 800472e:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d022      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xa86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004740:	2b00      	cmp	r3, #0
 8004742:	d013      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800474c:	d00e      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004752:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004756:	d009      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004760:	d004      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004762:	f240 1197 	movw	r1, #407	; 0x197
 8004766:	4824      	ldr	r0, [pc, #144]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004768:	f7fd f839 	bl	80017de <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800476c:	4b21      	ldr	r3, [pc, #132]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004772:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800477a:	491e      	ldr	r1, [pc, #120]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d01b      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xaca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004794:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004798:	d009      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d004      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80047a4:	f240 11a1 	movw	r1, #417	; 0x1a1
 80047a8:	4813      	ldr	r0, [pc, #76]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80047aa:	f7fd f818 	bl	80017de <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047ae:	4b11      	ldr	r3, [pc, #68]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80047b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047be:	490d      	ldr	r1, [pc, #52]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d020      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047dc:	d00e      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xb00>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d009      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xb00>
 80047e8:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80047ec:	4802      	ldr	r0, [pc, #8]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80047ee:	f7fc fff6 	bl	80017de <assert_failed>
 80047f2:	e003      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xb00>
 80047f4:	40023800 	.word	0x40023800
 80047f8:	0800739c 	.word	0x0800739c

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80047fc:	4b35      	ldr	r3, [pc, #212]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80047fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004802:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800480c:	4931      	ldr	r1, [pc, #196]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800480e:	4313      	orrs	r3, r2
 8004810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d01b      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004830:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004834:	d004      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 8004836:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800483a:	4827      	ldr	r0, [pc, #156]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800483c:	f7fc ffcf 	bl	80017de <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004840:	4b24      	ldr	r3, [pc, #144]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004842:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004846:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004850:	4920      	ldr	r1, [pc, #128]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004852:	4313      	orrs	r3, r2
 8004854:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d01b      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004874:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004878:	d004      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800487a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800487e:	4816      	ldr	r0, [pc, #88]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004880:	f7fc ffad 	bl	80017de <assert_failed>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004884:	4b13      	ldr	r3, [pc, #76]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004886:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800488a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004894:	490f      	ldr	r1, [pc, #60]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d005      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048aa:	f040 8153 	bne.w	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xe58>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048ae:	4b09      	ldr	r3, [pc, #36]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a08      	ldr	r2, [pc, #32]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80048b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ba:	f7fd fcf3 	bl	80022a4 <HAL_GetTick>
 80048be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048c0:	e00c      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048c2:	f7fd fcef 	bl	80022a4 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b64      	cmp	r3, #100	; 0x64
 80048ce:	d905      	bls.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e276      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 80048d4:	40023800 	.word	0x40023800
 80048d8:	0800739c 	.word	0x0800739c
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048dc:	4ba9      	ldr	r3, [pc, #676]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1ec      	bne.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2b31      	cmp	r3, #49	; 0x31
 80048ee:	d904      	bls.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80048f8:	d904      	bls.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80048fa:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80048fe:	48a2      	ldr	r0, [pc, #648]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004900:	f7fc ff6d 	bl	80017de <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d02e      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004914:	2b00      	cmp	r3, #0
 8004916:	d12a      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d903      	bls.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	2b07      	cmp	r3, #7
 8004926:	d904      	bls.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8004928:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800492c:	4896      	ldr	r0, [pc, #600]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 800492e:	f7fc ff56 	bl	80017de <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004932:	4b94      	ldr	r3, [pc, #592]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004938:	0c1b      	lsrs	r3, r3, #16
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004940:	4b90      	ldr	r3, [pc, #576]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004946:	0e1b      	lsrs	r3, r3, #24
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	019a      	lsls	r2, r3, #6
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	041b      	lsls	r3, r3, #16
 8004958:	431a      	orrs	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	061b      	lsls	r3, r3, #24
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	071b      	lsls	r3, r3, #28
 8004966:	4987      	ldr	r1, [pc, #540]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004968:	4313      	orrs	r3, r2
 800496a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d004      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xc88>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004982:	d00a      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800498c:	2b00      	cmp	r3, #0
 800498e:	d048      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xd26>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004998:	d143      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d903      	bls.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xcae>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	2b0f      	cmp	r3, #15
 80049a8:	d904      	bls.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 80049aa:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 80049ae:	4876      	ldr	r0, [pc, #472]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80049b0:	f7fc ff15 	bl	80017de <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	2b20      	cmp	r3, #32
 80049c2:	d904      	bls.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 80049c4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80049c8:	486f      	ldr	r0, [pc, #444]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80049ca:	f7fc ff08 	bl	80017de <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049ce:	4b6d      	ldr	r3, [pc, #436]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d4:	0c1b      	lsrs	r3, r3, #16
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049dc:	4b69      	ldr	r3, [pc, #420]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e2:	0f1b      	lsrs	r3, r3, #28
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	019a      	lsls	r2, r3, #6
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	041b      	lsls	r3, r3, #16
 80049f4:	431a      	orrs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	061b      	lsls	r3, r3, #24
 80049fc:	431a      	orrs	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	071b      	lsls	r3, r3, #28
 8004a02:	4960      	ldr	r1, [pc, #384]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a0a:	4b5e      	ldr	r3, [pc, #376]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a10:	f023 021f 	bic.w	r2, r3, #31
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	495a      	ldr	r1, [pc, #360]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d032      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd98>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d010      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d00c      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d008      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	d004      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8004a4e:	f240 2107 	movw	r1, #519	; 0x207
 8004a52:	484d      	ldr	r0, [pc, #308]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004a54:	f7fc fec3 	bl	80017de <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a58:	4b4a      	ldr	r3, [pc, #296]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a5e:	0e1b      	lsrs	r3, r3, #24
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a66:	4b47      	ldr	r3, [pc, #284]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a6c:	0f1b      	lsrs	r3, r3, #28
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	019a      	lsls	r2, r3, #6
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	041b      	lsls	r3, r3, #16
 8004a80:	431a      	orrs	r2, r3
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	061b      	lsls	r3, r3, #24
 8004a86:	431a      	orrs	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	071b      	lsls	r3, r3, #28
 8004a8c:	493d      	ldr	r1, [pc, #244]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d040      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d010      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d00c      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d008      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d004      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004ac0:	f240 2116 	movw	r1, #534	; 0x216
 8004ac4:	4830      	ldr	r0, [pc, #192]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004ac6:	f7fc fe8a 	bl	80017de <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d903      	bls.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	2b07      	cmp	r3, #7
 8004ad8:	d904      	bls.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
 8004ada:	f240 2117 	movw	r1, #535	; 0x217
 8004ade:	482a      	ldr	r0, [pc, #168]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004ae0:	f7fc fe7d 	bl	80017de <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d903      	bls.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	2b0f      	cmp	r3, #15
 8004af2:	d904      	bls.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xe02>
 8004af4:	f44f 7106 	mov.w	r1, #536	; 0x218
 8004af8:	4823      	ldr	r0, [pc, #140]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004afa:	f7fc fe70 	bl	80017de <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	019a      	lsls	r2, r3, #6
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	041b      	lsls	r3, r3, #16
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	061b      	lsls	r3, r3, #24
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	071b      	lsls	r3, r3, #28
 8004b1a:	491a      	ldr	r1, [pc, #104]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b22:	4b18      	ldr	r3, [pc, #96]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a17      	ldr	r2, [pc, #92]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b2e:	f7fd fbb9 	bl	80022a4 <HAL_GetTick>
 8004b32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b34:	e008      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b36:	f7fd fbb5 	bl	80022a4 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b64      	cmp	r3, #100	; 0x64
 8004b42:	d901      	bls.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e13c      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b48:	4b0e      	ldr	r3, [pc, #56]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0f0      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	f040 8132 	bne.w	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b5c:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a08      	ldr	r2, [pc, #32]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b68:	f7fd fb9c 	bl	80022a4 <HAL_GetTick>
 8004b6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b6e:	e00d      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xe90>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b70:	f7fd fb98 	bl	80022a4 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b64      	cmp	r3, #100	; 0x64
 8004b7c:	d906      	bls.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xe90>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e11f      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 8004b82:	bf00      	nop
 8004b84:	40023800 	.word	0x40023800
 8004b88:	0800739c 	.word	0x0800739c
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b8c:	4b8f      	ldr	r3, [pc, #572]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b98:	d0ea      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xe74>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	2b31      	cmp	r3, #49	; 0x31
 8004ba0:	d904      	bls.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xeb0>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004baa:	d904      	bls.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xeba>
 8004bac:	f240 2146 	movw	r1, #582	; 0x246
 8004bb0:	4887      	ldr	r0, [pc, #540]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004bb2:	f7fc fe14 	bl	80017de <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xece>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d009      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xee2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d048      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d144      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d903      	bls.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xef2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	2b0f      	cmp	r3, #15
 8004bec:	d904      	bls.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xefc>
 8004bee:	f240 214d 	movw	r1, #589	; 0x24d
 8004bf2:	4877      	ldr	r0, [pc, #476]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004bf4:	f7fc fdf3 	bl	80017de <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	d904      	bls.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004c08:	f240 214f 	movw	r1, #591	; 0x24f
 8004c0c:	4870      	ldr	r0, [pc, #448]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004c0e:	f7fc fde6 	bl	80017de <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c12:	4b6e      	ldr	r3, [pc, #440]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c18:	0c1b      	lsrs	r3, r3, #16
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c20:	4b6a      	ldr	r3, [pc, #424]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c26:	0f1b      	lsrs	r3, r3, #28
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	019a      	lsls	r2, r3, #6
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	041b      	lsls	r3, r3, #16
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	061b      	lsls	r3, r3, #24
 8004c40:	431a      	orrs	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	071b      	lsls	r3, r3, #28
 8004c46:	4961      	ldr	r1, [pc, #388]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c4e:	4b5f      	ldr	r3, [pc, #380]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c54:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	021b      	lsls	r3, r3, #8
 8004c60:	495a      	ldr	r1, [pc, #360]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d037      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c7c:	d132      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d010      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d00c      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d008      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	2b03      	cmp	r3, #3
 8004c9c:	d004      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004c9e:	f240 2162 	movw	r1, #610	; 0x262
 8004ca2:	484b      	ldr	r0, [pc, #300]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004ca4:	f7fc fd9b 	bl	80017de <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ca8:	4b48      	ldr	r3, [pc, #288]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cae:	0e1b      	lsrs	r3, r3, #24
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004cb6:	4b45      	ldr	r3, [pc, #276]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbc:	0f1b      	lsrs	r3, r3, #28
 8004cbe:	f003 0307 	and.w	r3, r3, #7
 8004cc2:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	019a      	lsls	r2, r3, #6
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	041b      	lsls	r3, r3, #16
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	061b      	lsls	r3, r3, #24
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	071b      	lsls	r3, r3, #28
 8004cdc:	493b      	ldr	r1, [pc, #236]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0308 	and.w	r3, r3, #8
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d04d      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1090>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d903      	bls.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1004>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	69db      	ldr	r3, [r3, #28]
 8004cfc:	2b07      	cmp	r3, #7
 8004cfe:	d904      	bls.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x100e>
 8004d00:	f240 2171 	movw	r1, #625	; 0x271
 8004d04:	4832      	ldr	r0, [pc, #200]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004d06:	f7fc fd6a 	bl	80017de <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d013      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d1a:	d00e      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d24:	d009      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d2e:	d004      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8004d30:	f240 2172 	movw	r1, #626	; 0x272
 8004d34:	4826      	ldr	r0, [pc, #152]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004d36:	f7fc fd52 	bl	80017de <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d3a:	4b24      	ldr	r3, [pc, #144]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d40:	0e1b      	lsrs	r3, r3, #24
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d48:	4b20      	ldr	r3, [pc, #128]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4e:	0c1b      	lsrs	r3, r3, #16
 8004d50:	f003 0303 	and.w	r3, r3, #3
 8004d54:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	019a      	lsls	r2, r3, #6
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	041b      	lsls	r3, r3, #16
 8004d60:	431a      	orrs	r2, r3
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	061b      	lsls	r3, r3, #24
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	071b      	lsls	r3, r3, #28
 8004d6e:	4917      	ldr	r1, [pc, #92]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d76:	4b15      	ldr	r3, [pc, #84]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	4911      	ldr	r1, [pc, #68]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d8c:	4b0f      	ldr	r3, [pc, #60]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a0e      	ldr	r2, [pc, #56]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d98:	f7fd fa84 	bl	80022a4 <HAL_GetTick>
 8004d9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004da0:	f7fd fa80 	bl	80022a4 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b64      	cmp	r3, #100	; 0x64
 8004dac:	d901      	bls.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e007      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004db2:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dbe:	d1ef      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
      }
    }
  }
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3720      	adds	r7, #32
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	0800739c 	.word	0x0800739c

08004dd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e199      	b.n	800511a <HAL_SPI_Init+0x346>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a94      	ldr	r2, [pc, #592]	; (800503c <HAL_SPI_Init+0x268>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d01d      	beq.n	8004e2c <HAL_SPI_Init+0x58>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a92      	ldr	r2, [pc, #584]	; (8005040 <HAL_SPI_Init+0x26c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d018      	beq.n	8004e2c <HAL_SPI_Init+0x58>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a91      	ldr	r2, [pc, #580]	; (8005044 <HAL_SPI_Init+0x270>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d013      	beq.n	8004e2c <HAL_SPI_Init+0x58>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a8f      	ldr	r2, [pc, #572]	; (8005048 <HAL_SPI_Init+0x274>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d00e      	beq.n	8004e2c <HAL_SPI_Init+0x58>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a8e      	ldr	r2, [pc, #568]	; (800504c <HAL_SPI_Init+0x278>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d009      	beq.n	8004e2c <HAL_SPI_Init+0x58>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a8c      	ldr	r2, [pc, #560]	; (8005050 <HAL_SPI_Init+0x27c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d004      	beq.n	8004e2c <HAL_SPI_Init+0x58>
 8004e22:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004e26:	488b      	ldr	r0, [pc, #556]	; (8005054 <HAL_SPI_Init+0x280>)
 8004e28:	f7fc fcd9 	bl	80017de <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d009      	beq.n	8004e48 <HAL_SPI_Init+0x74>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e3c:	d004      	beq.n	8004e48 <HAL_SPI_Init+0x74>
 8004e3e:	f240 1145 	movw	r1, #325	; 0x145
 8004e42:	4884      	ldr	r0, [pc, #528]	; (8005054 <HAL_SPI_Init+0x280>)
 8004e44:	f7fc fccb 	bl	80017de <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00e      	beq.n	8004e6e <HAL_SPI_Init+0x9a>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e58:	d009      	beq.n	8004e6e <HAL_SPI_Init+0x9a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e62:	d004      	beq.n	8004e6e <HAL_SPI_Init+0x9a>
 8004e64:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004e68:	487a      	ldr	r0, [pc, #488]	; (8005054 <HAL_SPI_Init+0x280>)
 8004e6a:	f7fc fcb8 	bl	80017de <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e76:	d040      	beq.n	8004efa <HAL_SPI_Init+0x126>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8004e80:	d03b      	beq.n	8004efa <HAL_SPI_Init+0x126>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004e8a:	d036      	beq.n	8004efa <HAL_SPI_Init+0x126>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e94:	d031      	beq.n	8004efa <HAL_SPI_Init+0x126>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004e9e:	d02c      	beq.n	8004efa <HAL_SPI_Init+0x126>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004ea8:	d027      	beq.n	8004efa <HAL_SPI_Init+0x126>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004eb2:	d022      	beq.n	8004efa <HAL_SPI_Init+0x126>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ebc:	d01d      	beq.n	8004efa <HAL_SPI_Init+0x126>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ec6:	d018      	beq.n	8004efa <HAL_SPI_Init+0x126>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ed0:	d013      	beq.n	8004efa <HAL_SPI_Init+0x126>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004eda:	d00e      	beq.n	8004efa <HAL_SPI_Init+0x126>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee4:	d009      	beq.n	8004efa <HAL_SPI_Init+0x126>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eee:	d004      	beq.n	8004efa <HAL_SPI_Init+0x126>
 8004ef0:	f240 1147 	movw	r1, #327	; 0x147
 8004ef4:	4857      	ldr	r0, [pc, #348]	; (8005054 <HAL_SPI_Init+0x280>)
 8004ef6:	f7fc fc72 	bl	80017de <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f02:	d00d      	beq.n	8004f20 <HAL_SPI_Init+0x14c>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d009      	beq.n	8004f20 <HAL_SPI_Init+0x14c>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f14:	d004      	beq.n	8004f20 <HAL_SPI_Init+0x14c>
 8004f16:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004f1a:	484e      	ldr	r0, [pc, #312]	; (8005054 <HAL_SPI_Init+0x280>)
 8004f1c:	f7fc fc5f 	bl	80017de <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d008      	beq.n	8004f3a <HAL_SPI_Init+0x166>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d004      	beq.n	8004f3a <HAL_SPI_Init+0x166>
 8004f30:	f240 1149 	movw	r1, #329	; 0x149
 8004f34:	4847      	ldr	r0, [pc, #284]	; (8005054 <HAL_SPI_Init+0x280>)
 8004f36:	f7fc fc52 	bl	80017de <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d020      	beq.n	8004f84 <HAL_SPI_Init+0x1b0>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d01c      	beq.n	8004f84 <HAL_SPI_Init+0x1b0>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	2b10      	cmp	r3, #16
 8004f50:	d018      	beq.n	8004f84 <HAL_SPI_Init+0x1b0>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	2b18      	cmp	r3, #24
 8004f58:	d014      	beq.n	8004f84 <HAL_SPI_Init+0x1b0>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	2b20      	cmp	r3, #32
 8004f60:	d010      	beq.n	8004f84 <HAL_SPI_Init+0x1b0>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	2b28      	cmp	r3, #40	; 0x28
 8004f68:	d00c      	beq.n	8004f84 <HAL_SPI_Init+0x1b0>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	2b30      	cmp	r3, #48	; 0x30
 8004f70:	d008      	beq.n	8004f84 <HAL_SPI_Init+0x1b0>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	2b38      	cmp	r3, #56	; 0x38
 8004f78:	d004      	beq.n	8004f84 <HAL_SPI_Init+0x1b0>
 8004f7a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004f7e:	4835      	ldr	r0, [pc, #212]	; (8005054 <HAL_SPI_Init+0x280>)
 8004f80:	f7fc fc2d 	bl	80017de <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d008      	beq.n	8004f9e <HAL_SPI_Init+0x1ca>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	2b80      	cmp	r3, #128	; 0x80
 8004f92:	d004      	beq.n	8004f9e <HAL_SPI_Init+0x1ca>
 8004f94:	f240 114b 	movw	r1, #331	; 0x14b
 8004f98:	482e      	ldr	r0, [pc, #184]	; (8005054 <HAL_SPI_Init+0x280>)
 8004f9a:	f7fc fc20 	bl	80017de <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d008      	beq.n	8004fb8 <HAL_SPI_Init+0x1e4>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	2b10      	cmp	r3, #16
 8004fac:	d004      	beq.n	8004fb8 <HAL_SPI_Init+0x1e4>
 8004fae:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004fb2:	4828      	ldr	r0, [pc, #160]	; (8005054 <HAL_SPI_Init+0x280>)
 8004fb4:	f7fc fc13 	bl	80017de <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d119      	bne.n	8004ff4 <HAL_SPI_Init+0x220>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d008      	beq.n	8004fda <HAL_SPI_Init+0x206>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d004      	beq.n	8004fda <HAL_SPI_Init+0x206>
 8004fd0:	f240 114f 	movw	r1, #335	; 0x14f
 8004fd4:	481f      	ldr	r0, [pc, #124]	; (8005054 <HAL_SPI_Init+0x280>)
 8004fd6:	f7fc fc02 	bl	80017de <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d008      	beq.n	8004ff4 <HAL_SPI_Init+0x220>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d004      	beq.n	8004ff4 <HAL_SPI_Init+0x220>
 8004fea:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004fee:	4819      	ldr	r0, [pc, #100]	; (8005054 <HAL_SPI_Init+0x280>)
 8004ff0:	f7fc fbf5 	bl	80017de <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <HAL_SPI_Init+0x240>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7fc fd26 	bl	8001a60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800502a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005034:	d910      	bls.n	8005058 <HAL_SPI_Init+0x284>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005036:	2300      	movs	r3, #0
 8005038:	60fb      	str	r3, [r7, #12]
 800503a:	e010      	b.n	800505e <HAL_SPI_Init+0x28a>
 800503c:	40013000 	.word	0x40013000
 8005040:	40003800 	.word	0x40003800
 8005044:	40003c00 	.word	0x40003c00
 8005048:	40013400 	.word	0x40013400
 800504c:	40015000 	.word	0x40015000
 8005050:	40015400 	.word	0x40015400
 8005054:	080073d8 	.word	0x080073d8
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800505c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005066:	d007      	beq.n	8005078 <HAL_SPI_Init+0x2a4>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005070:	d002      	beq.n	8005078 <HAL_SPI_Init+0x2a4>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10b      	bne.n	8005098 <HAL_SPI_Init+0x2c4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005088:	d903      	bls.n	8005092 <HAL_SPI_Init+0x2be>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2202      	movs	r2, #2
 800508e:	631a      	str	r2, [r3, #48]	; 0x30
 8005090:	e002      	b.n	8005098 <HAL_SPI_Init+0x2c4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	431a      	orrs	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	431a      	orrs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	ea42 0103 	orr.w	r1, r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	0c1b      	lsrs	r3, r3, #16
 80050d8:	f003 0204 	and.w	r2, r3, #4
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	431a      	orrs	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	ea42 0103 	orr.w	r1, r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69da      	ldr	r2, [r3, #28]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005108:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop

08005124 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b088      	sub	sp, #32
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	603b      	str	r3, [r7, #0]
 8005130:	4613      	mov	r3, r2
 8005132:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d009      	beq.n	8005154 <HAL_SPI_Transmit+0x30>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005148:	d004      	beq.n	8005154 <HAL_SPI_Transmit+0x30>
 800514a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800514e:	4895      	ldr	r0, [pc, #596]	; (80053a4 <HAL_SPI_Transmit+0x280>)
 8005150:	f7fc fb45 	bl	80017de <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800515a:	2b01      	cmp	r3, #1
 800515c:	d101      	bne.n	8005162 <HAL_SPI_Transmit+0x3e>
 800515e:	2302      	movs	r3, #2
 8005160:	e152      	b.n	8005408 <HAL_SPI_Transmit+0x2e4>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800516a:	f7fd f89b 	bl	80022a4 <HAL_GetTick>
 800516e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005170:	88fb      	ldrh	r3, [r7, #6]
 8005172:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b01      	cmp	r3, #1
 800517e:	d002      	beq.n	8005186 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8005180:	2302      	movs	r3, #2
 8005182:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005184:	e137      	b.n	80053f6 <HAL_SPI_Transmit+0x2d2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <HAL_SPI_Transmit+0x6e>
 800518c:	88fb      	ldrh	r3, [r7, #6]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d102      	bne.n	8005198 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005196:	e12e      	b.n	80053f6 <HAL_SPI_Transmit+0x2d2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2203      	movs	r2, #3
 800519c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	88fa      	ldrh	r2, [r7, #6]
 80051b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	88fa      	ldrh	r2, [r7, #6]
 80051b6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051e2:	d107      	bne.n	80051f4 <HAL_SPI_Transmit+0xd0>
  {
    SPI_1LINE_TX(hspi);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fe:	2b40      	cmp	r3, #64	; 0x40
 8005200:	d007      	beq.n	8005212 <HAL_SPI_Transmit+0xee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005210:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800521a:	d94b      	bls.n	80052b4 <HAL_SPI_Transmit+0x190>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <HAL_SPI_Transmit+0x106>
 8005224:	8afb      	ldrh	r3, [r7, #22]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d13e      	bne.n	80052a8 <HAL_SPI_Transmit+0x184>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	881a      	ldrh	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523a:	1c9a      	adds	r2, r3, #2
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005244:	b29b      	uxth	r3, r3
 8005246:	3b01      	subs	r3, #1
 8005248:	b29a      	uxth	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800524e:	e02b      	b.n	80052a8 <HAL_SPI_Transmit+0x184>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b02      	cmp	r3, #2
 800525c:	d112      	bne.n	8005284 <HAL_SPI_Transmit+0x160>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005262:	881a      	ldrh	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526e:	1c9a      	adds	r2, r3, #2
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005278:	b29b      	uxth	r3, r3
 800527a:	3b01      	subs	r3, #1
 800527c:	b29a      	uxth	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005282:	e011      	b.n	80052a8 <HAL_SPI_Transmit+0x184>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005284:	f7fd f80e 	bl	80022a4 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	429a      	cmp	r2, r3
 8005292:	d803      	bhi.n	800529c <HAL_SPI_Transmit+0x178>
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529a:	d102      	bne.n	80052a2 <HAL_SPI_Transmit+0x17e>
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d102      	bne.n	80052a8 <HAL_SPI_Transmit+0x184>
        {
          errorcode = HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80052a6:	e0a6      	b.n	80053f6 <HAL_SPI_Transmit+0x2d2>
    while (hspi->TxXferCount > 0U)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1ce      	bne.n	8005250 <HAL_SPI_Transmit+0x12c>
 80052b2:	e07e      	b.n	80053b2 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <HAL_SPI_Transmit+0x19e>
 80052bc:	8afb      	ldrh	r3, [r7, #22]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d172      	bne.n	80053a8 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d912      	bls.n	80052f2 <HAL_SPI_Transmit+0x1ce>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	881a      	ldrh	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052dc:	1c9a      	adds	r2, r3, #2
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	3b02      	subs	r3, #2
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052f0:	e05a      	b.n	80053a8 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	330c      	adds	r3, #12
 80052fc:	7812      	ldrb	r2, [r2, #0]
 80052fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800530e:	b29b      	uxth	r3, r3
 8005310:	3b01      	subs	r3, #1
 8005312:	b29a      	uxth	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005318:	e046      	b.n	80053a8 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b02      	cmp	r3, #2
 8005326:	d12b      	bne.n	8005380 <HAL_SPI_Transmit+0x25c>
      {
        if (hspi->TxXferCount > 1U)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800532c:	b29b      	uxth	r3, r3
 800532e:	2b01      	cmp	r3, #1
 8005330:	d912      	bls.n	8005358 <HAL_SPI_Transmit+0x234>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005336:	881a      	ldrh	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005342:	1c9a      	adds	r2, r3, #2
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b02      	subs	r3, #2
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005356:	e027      	b.n	80053a8 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	330c      	adds	r3, #12
 8005362:	7812      	ldrb	r2, [r2, #0]
 8005364:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005374:	b29b      	uxth	r3, r3
 8005376:	3b01      	subs	r3, #1
 8005378:	b29a      	uxth	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800537e:	e013      	b.n	80053a8 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005380:	f7fc ff90 	bl	80022a4 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d803      	bhi.n	8005398 <HAL_SPI_Transmit+0x274>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005396:	d102      	bne.n	800539e <HAL_SPI_Transmit+0x27a>
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d104      	bne.n	80053a8 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053a2:	e028      	b.n	80053f6 <HAL_SPI_Transmit+0x2d2>
 80053a4:	080073d8 	.word	0x080073d8
    while (hspi->TxXferCount > 0U)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1b3      	bne.n	800531a <HAL_SPI_Transmit+0x1f6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	6839      	ldr	r1, [r7, #0]
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 fdbe 	bl	8005f38 <SPI_EndRxTxTransaction>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2220      	movs	r2, #32
 80053c6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10a      	bne.n	80053e6 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053d0:	2300      	movs	r3, #0
 80053d2:	613b      	str	r3, [r7, #16]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	613b      	str	r3, [r7, #16]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	613b      	str	r3, [r7, #16]
 80053e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	77fb      	strb	r3, [r7, #31]
 80053f2:	e000      	b.n	80053f6 <HAL_SPI_Transmit+0x2d2>
  }

error:
 80053f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005406:	7ffb      	ldrb	r3, [r7, #31]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3720      	adds	r7, #32
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b088      	sub	sp, #32
 8005414:	af02      	add	r7, sp, #8
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	603b      	str	r3, [r7, #0]
 800541c:	4613      	mov	r3, r2
 800541e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005420:	2300      	movs	r3, #0
 8005422:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800542c:	d112      	bne.n	8005454 <HAL_SPI_Receive+0x44>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10e      	bne.n	8005454 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2204      	movs	r2, #4
 800543a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800543e:	88fa      	ldrh	r2, [r7, #6]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	4613      	mov	r3, r2
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f000 f908 	bl	8005660 <HAL_SPI_TransmitReceive>
 8005450:	4603      	mov	r3, r0
 8005452:	e101      	b.n	8005658 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800545a:	2b01      	cmp	r3, #1
 800545c:	d101      	bne.n	8005462 <HAL_SPI_Receive+0x52>
 800545e:	2302      	movs	r3, #2
 8005460:	e0fa      	b.n	8005658 <HAL_SPI_Receive+0x248>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800546a:	f7fc ff1b 	bl	80022a4 <HAL_GetTick>
 800546e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b01      	cmp	r3, #1
 800547a:	d002      	beq.n	8005482 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800547c:	2302      	movs	r3, #2
 800547e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005480:	e0e1      	b.n	8005646 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <HAL_SPI_Receive+0x7e>
 8005488:	88fb      	ldrh	r3, [r7, #6]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d102      	bne.n	8005494 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005492:	e0d8      	b.n	8005646 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2204      	movs	r2, #4
 8005498:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	88fa      	ldrh	r2, [r7, #6]
 80054ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	88fa      	ldrh	r2, [r7, #6]
 80054b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054de:	d908      	bls.n	80054f2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054ee:	605a      	str	r2, [r3, #4]
 80054f0:	e007      	b.n	8005502 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005500:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800550a:	d107      	bne.n	800551c <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800551a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005526:	2b40      	cmp	r3, #64	; 0x40
 8005528:	d007      	beq.n	800553a <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005538:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005542:	d867      	bhi.n	8005614 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005544:	e030      	b.n	80055a8 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b01      	cmp	r3, #1
 8005552:	d117      	bne.n	8005584 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f103 020c 	add.w	r2, r3, #12
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005560:	7812      	ldrb	r2, [r2, #0]
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005576:	b29b      	uxth	r3, r3
 8005578:	3b01      	subs	r3, #1
 800557a:	b29a      	uxth	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005582:	e011      	b.n	80055a8 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005584:	f7fc fe8e 	bl	80022a4 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d803      	bhi.n	800559c <HAL_SPI_Receive+0x18c>
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559a:	d102      	bne.n	80055a2 <HAL_SPI_Receive+0x192>
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d102      	bne.n	80055a8 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80055a6:	e04e      	b.n	8005646 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1c8      	bne.n	8005546 <HAL_SPI_Receive+0x136>
 80055b4:	e034      	b.n	8005620 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d115      	bne.n	80055f0 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	b292      	uxth	r2, r2
 80055d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	1c9a      	adds	r2, r3, #2
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80055ee:	e011      	b.n	8005614 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055f0:	f7fc fe58 	bl	80022a4 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d803      	bhi.n	8005608 <HAL_SPI_Receive+0x1f8>
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005606:	d102      	bne.n	800560e <HAL_SPI_Receive+0x1fe>
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d102      	bne.n	8005614 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005612:	e018      	b.n	8005646 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800561a:	b29b      	uxth	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1ca      	bne.n	80055b6 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	6839      	ldr	r1, [r7, #0]
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 fc2f 	bl	8005e88 <SPI_EndRxTransaction>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2220      	movs	r2, #32
 8005634:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	75fb      	strb	r3, [r7, #23]
 8005642:	e000      	b.n	8005646 <HAL_SPI_Receive+0x236>
  }

error :
 8005644:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005656:	7dfb      	ldrb	r3, [r7, #23]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b08a      	sub	sp, #40	; 0x28
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800566e:	2301      	movs	r3, #1
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005672:	2300      	movs	r3, #0
 8005674:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d004      	beq.n	800568a <HAL_SPI_TransmitReceive+0x2a>
 8005680:	f240 41bf 	movw	r1, #1215	; 0x4bf
 8005684:	4895      	ldr	r0, [pc, #596]	; (80058dc <HAL_SPI_TransmitReceive+0x27c>)
 8005686:	f7fc f8aa 	bl	80017de <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005690:	2b01      	cmp	r3, #1
 8005692:	d101      	bne.n	8005698 <HAL_SPI_TransmitReceive+0x38>
 8005694:	2302      	movs	r3, #2
 8005696:	e1fd      	b.n	8005a94 <HAL_SPI_TransmitReceive+0x434>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056a0:	f7fc fe00 	bl	80022a4 <HAL_GetTick>
 80056a4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056ac:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80056b4:	887b      	ldrh	r3, [r7, #2]
 80056b6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80056b8:	887b      	ldrh	r3, [r7, #2]
 80056ba:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056bc:	7efb      	ldrb	r3, [r7, #27]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d00e      	beq.n	80056e0 <HAL_SPI_TransmitReceive+0x80>
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056c8:	d106      	bne.n	80056d8 <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d102      	bne.n	80056d8 <HAL_SPI_TransmitReceive+0x78>
 80056d2:	7efb      	ldrb	r3, [r7, #27]
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	d003      	beq.n	80056e0 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 80056d8:	2302      	movs	r3, #2
 80056da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80056de:	e1cf      	b.n	8005a80 <HAL_SPI_TransmitReceive+0x420>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d005      	beq.n	80056f2 <HAL_SPI_TransmitReceive+0x92>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <HAL_SPI_TransmitReceive+0x92>
 80056ec:	887b      	ldrh	r3, [r7, #2]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d103      	bne.n	80056fa <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80056f8:	e1c2      	b.n	8005a80 <HAL_SPI_TransmitReceive+0x420>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b04      	cmp	r3, #4
 8005704:	d003      	beq.n	800570e <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2205      	movs	r2, #5
 800570a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	887a      	ldrh	r2, [r7, #2]
 800571e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	887a      	ldrh	r2, [r7, #2]
 8005726:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	887a      	ldrh	r2, [r7, #2]
 8005734:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	887a      	ldrh	r2, [r7, #2]
 800573a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005750:	d802      	bhi.n	8005758 <HAL_SPI_TransmitReceive+0xf8>
 8005752:	8a3b      	ldrh	r3, [r7, #16]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d908      	bls.n	800576a <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005766:	605a      	str	r2, [r3, #4]
 8005768:	e007      	b.n	800577a <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005778:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005784:	2b40      	cmp	r3, #64	; 0x40
 8005786:	d007      	beq.n	8005798 <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005796:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057a0:	d97c      	bls.n	800589c <HAL_SPI_TransmitReceive+0x23c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <HAL_SPI_TransmitReceive+0x150>
 80057aa:	8a7b      	ldrh	r3, [r7, #18]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d169      	bne.n	8005884 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b4:	881a      	ldrh	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	1c9a      	adds	r2, r3, #2
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	3b01      	subs	r3, #1
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057d4:	e056      	b.n	8005884 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d11b      	bne.n	800581c <HAL_SPI_TransmitReceive+0x1bc>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d016      	beq.n	800581c <HAL_SPI_TransmitReceive+0x1bc>
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d113      	bne.n	800581c <HAL_SPI_TransmitReceive+0x1bc>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f8:	881a      	ldrh	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005804:	1c9a      	adds	r2, r3, #2
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800580e:	b29b      	uxth	r3, r3
 8005810:	3b01      	subs	r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b01      	cmp	r3, #1
 8005828:	d11c      	bne.n	8005864 <HAL_SPI_TransmitReceive+0x204>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d016      	beq.n	8005864 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	b292      	uxth	r2, r2
 8005842:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	1c9a      	adds	r2, r3, #2
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005854:	b29b      	uxth	r3, r3
 8005856:	3b01      	subs	r3, #1
 8005858:	b29a      	uxth	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005860:	2301      	movs	r3, #1
 8005862:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005864:	f7fc fd1e 	bl	80022a4 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005870:	429a      	cmp	r2, r3
 8005872:	d807      	bhi.n	8005884 <HAL_SPI_TransmitReceive+0x224>
 8005874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587a:	d003      	beq.n	8005884 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005882:	e0fd      	b.n	8005a80 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1a3      	bne.n	80057d6 <HAL_SPI_TransmitReceive+0x176>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d19d      	bne.n	80057d6 <HAL_SPI_TransmitReceive+0x176>
 800589a:	e0e1      	b.n	8005a60 <HAL_SPI_TransmitReceive+0x400>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <HAL_SPI_TransmitReceive+0x24c>
 80058a4:	8a7b      	ldrh	r3, [r7, #18]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	f040 80cd 	bne.w	8005a46 <HAL_SPI_TransmitReceive+0x3e6>
    {
      if (hspi->TxXferCount > 1U)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d914      	bls.n	80058e0 <HAL_SPI_TransmitReceive+0x280>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ba:	881a      	ldrh	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c6:	1c9a      	adds	r2, r3, #2
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	3b02      	subs	r3, #2
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058da:	e0b4      	b.n	8005a46 <HAL_SPI_TransmitReceive+0x3e6>
 80058dc:	080073d8 	.word	0x080073d8
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	330c      	adds	r3, #12
 80058ea:	7812      	ldrb	r2, [r2, #0]
 80058ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	3b01      	subs	r3, #1
 8005900:	b29a      	uxth	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005906:	e09e      	b.n	8005a46 <HAL_SPI_TransmitReceive+0x3e6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b02      	cmp	r3, #2
 8005914:	d134      	bne.n	8005980 <HAL_SPI_TransmitReceive+0x320>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800591a:	b29b      	uxth	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	d02f      	beq.n	8005980 <HAL_SPI_TransmitReceive+0x320>
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	2b01      	cmp	r3, #1
 8005924:	d12c      	bne.n	8005980 <HAL_SPI_TransmitReceive+0x320>
      {
        if (hspi->TxXferCount > 1U)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592a:	b29b      	uxth	r3, r3
 800592c:	2b01      	cmp	r3, #1
 800592e:	d912      	bls.n	8005956 <HAL_SPI_TransmitReceive+0x2f6>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005934:	881a      	ldrh	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005940:	1c9a      	adds	r2, r3, #2
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800594a:	b29b      	uxth	r3, r3
 800594c:	3b02      	subs	r3, #2
 800594e:	b29a      	uxth	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005954:	e012      	b.n	800597c <HAL_SPI_TransmitReceive+0x31c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	330c      	adds	r3, #12
 8005960:	7812      	ldrb	r2, [r2, #0]
 8005962:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b01      	cmp	r3, #1
 800598c:	d148      	bne.n	8005a20 <HAL_SPI_TransmitReceive+0x3c0>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d042      	beq.n	8005a20 <HAL_SPI_TransmitReceive+0x3c0>
      {
        if (hspi->RxXferCount > 1U)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d923      	bls.n	80059ee <HAL_SPI_TransmitReceive+0x38e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68da      	ldr	r2, [r3, #12]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b0:	b292      	uxth	r2, r2
 80059b2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	1c9a      	adds	r2, r3, #2
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	3b02      	subs	r3, #2
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d81f      	bhi.n	8005a1c <HAL_SPI_TransmitReceive+0x3bc>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059ea:	605a      	str	r2, [r3, #4]
 80059ec:	e016      	b.n	8005a1c <HAL_SPI_TransmitReceive+0x3bc>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f103 020c 	add.w	r2, r3, #12
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	7812      	ldrb	r2, [r2, #0]
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a20:	f7fc fc40 	bl	80022a4 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d803      	bhi.n	8005a38 <HAL_SPI_TransmitReceive+0x3d8>
 8005a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a36:	d102      	bne.n	8005a3e <HAL_SPI_TransmitReceive+0x3de>
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d103      	bne.n	8005a46 <HAL_SPI_TransmitReceive+0x3e6>
      {
        errorcode = HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005a44:	e01c      	b.n	8005a80 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f47f af5b 	bne.w	8005908 <HAL_SPI_TransmitReceive+0x2a8>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f47f af54 	bne.w	8005908 <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a60:	69fa      	ldr	r2, [r7, #28]
 8005a62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 fa67 	bl	8005f38 <SPI_EndRxTxTransaction>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d006      	beq.n	8005a7e <HAL_SPI_TransmitReceive+0x41e>
  {
    errorcode = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	661a      	str	r2, [r3, #96]	; 0x60
 8005a7c:	e000      	b.n	8005a80 <HAL_SPI_TransmitReceive+0x420>
  }

error :
 8005a7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3728      	adds	r7, #40	; 0x28
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	099b      	lsrs	r3, r3, #6
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10f      	bne.n	8005ae0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	099b      	lsrs	r3, r3, #6
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d004      	beq.n	8005ae0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	4798      	blx	r3
    return;
 8005ade:	e0d8      	b.n	8005c92 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	085b      	lsrs	r3, r3, #1
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00a      	beq.n	8005b02 <HAL_SPI_IRQHandler+0x66>
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	09db      	lsrs	r3, r3, #7
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d004      	beq.n	8005b02 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	4798      	blx	r3
    return;
 8005b00:	e0c7      	b.n	8005c92 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	095b      	lsrs	r3, r3, #5
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10c      	bne.n	8005b28 <HAL_SPI_IRQHandler+0x8c>
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	099b      	lsrs	r3, r3, #6
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d106      	bne.n	8005b28 <HAL_SPI_IRQHandler+0x8c>
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	0a1b      	lsrs	r3, r3, #8
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 80b5 	beq.w	8005c92 <HAL_SPI_IRQHandler+0x1f6>
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	095b      	lsrs	r3, r3, #5
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 80ae 	beq.w	8005c92 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	099b      	lsrs	r3, r3, #6
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d023      	beq.n	8005b8a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b03      	cmp	r3, #3
 8005b4c:	d011      	beq.n	8005b72 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b52:	f043 0204 	orr.w	r2, r3, #4
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	617b      	str	r3, [r7, #20]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	617b      	str	r3, [r7, #20]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	617b      	str	r3, [r7, #20]
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	e00b      	b.n	8005b8a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b72:	2300      	movs	r3, #0
 8005b74:	613b      	str	r3, [r7, #16]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	613b      	str	r3, [r7, #16]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	613b      	str	r3, [r7, #16]
 8005b86:	693b      	ldr	r3, [r7, #16]
        return;
 8005b88:	e083      	b.n	8005c92 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	095b      	lsrs	r3, r3, #5
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d014      	beq.n	8005bc0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b9a:	f043 0201 	orr.w	r2, r3, #1
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	0a1b      	lsrs	r3, r3, #8
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00c      	beq.n	8005be6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd0:	f043 0208 	orr.w	r2, r3, #8
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005bd8:	2300      	movs	r3, #0
 8005bda:	60bb      	str	r3, [r7, #8]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	60bb      	str	r3, [r7, #8]
 8005be4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d050      	beq.n	8005c90 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005bfc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d104      	bne.n	8005c1a <HAL_SPI_IRQHandler+0x17e>
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d034      	beq.n	8005c84 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 0203 	bic.w	r2, r2, #3
 8005c28:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d011      	beq.n	8005c56 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c36:	4a18      	ldr	r2, [pc, #96]	; (8005c98 <HAL_SPI_IRQHandler+0x1fc>)
 8005c38:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fc fdee 	bl	8002820 <HAL_DMA_Abort_IT>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d005      	beq.n	8005c56 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d016      	beq.n	8005c8c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c62:	4a0d      	ldr	r2, [pc, #52]	; (8005c98 <HAL_SPI_IRQHandler+0x1fc>)
 8005c64:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fc fdd8 	bl	8002820 <HAL_DMA_Abort_IT>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00a      	beq.n	8005c8c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005c82:	e003      	b.n	8005c8c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f809 	bl	8005c9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005c8a:	e000      	b.n	8005c8e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005c8c:	bf00      	nop
    return;
 8005c8e:	bf00      	nop
 8005c90:	bf00      	nop
  }
}
 8005c92:	3720      	adds	r7, #32
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	08005cb1 	.word	0x08005cb1

08005c9c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f7ff ffe5 	bl	8005c9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005cd2:	bf00      	nop
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	60f8      	str	r0, [r7, #12]
 8005ce2:	60b9      	str	r1, [r7, #8]
 8005ce4:	603b      	str	r3, [r7, #0]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cea:	e04c      	b.n	8005d86 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf2:	d048      	beq.n	8005d86 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005cf4:	f7fc fad6 	bl	80022a4 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d902      	bls.n	8005d0a <SPI_WaitFlagStateUntilTimeout+0x30>
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d13d      	bne.n	8005d86 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d22:	d111      	bne.n	8005d48 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d2c:	d004      	beq.n	8005d38 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d36:	d107      	bne.n	8005d48 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d50:	d10f      	bne.n	8005d72 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e00f      	b.n	8005da6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	bf0c      	ite	eq
 8005d96:	2301      	moveq	r3, #1
 8005d98:	2300      	movne	r3, #0
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	79fb      	ldrb	r3, [r7, #7]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d1a3      	bne.n	8005cec <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b084      	sub	sp, #16
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	607a      	str	r2, [r7, #4]
 8005dba:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005dbc:	e057      	b.n	8005e6e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005dc4:	d106      	bne.n	8005dd4 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d103      	bne.n	8005dd4 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	330c      	adds	r3, #12
 8005dd2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dda:	d048      	beq.n	8005e6e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005ddc:	f7fc fa62 	bl	80022a4 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d902      	bls.n	8005df2 <SPI_WaitFifoStateUntilTimeout+0x44>
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d13d      	bne.n	8005e6e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e0a:	d111      	bne.n	8005e30 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e14:	d004      	beq.n	8005e20 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e1e:	d107      	bne.n	8005e30 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e38:	d10f      	bne.n	8005e5a <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e008      	b.n	8005e80 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	4013      	ands	r3, r2
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d19f      	bne.n	8005dbe <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af02      	add	r7, sp, #8
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e9c:	d111      	bne.n	8005ec2 <SPI_EndRxTransaction+0x3a>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ea6:	d004      	beq.n	8005eb2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb0:	d107      	bne.n	8005ec2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ec0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	2180      	movs	r1, #128	; 0x80
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f7ff ff04 	bl	8005cda <SPI_WaitFlagStateUntilTimeout>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d007      	beq.n	8005ee8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005edc:	f043 0220 	orr.w	r2, r3, #32
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e023      	b.n	8005f30 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ef0:	d11d      	bne.n	8005f2e <SPI_EndRxTransaction+0xa6>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005efa:	d004      	beq.n	8005f06 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f04:	d113      	bne.n	8005f2e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f7ff ff4b 	bl	8005dae <SPI_WaitFifoStateUntilTimeout>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d007      	beq.n	8005f2e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f22:	f043 0220 	orr.w	r2, r3, #32
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e000      	b.n	8005f30 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af02      	add	r7, sp, #8
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f7ff ff2c 	bl	8005dae <SPI_WaitFifoStateUntilTimeout>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d007      	beq.n	8005f6c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f60:	f043 0220 	orr.w	r2, r3, #32
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e027      	b.n	8005fbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2200      	movs	r2, #0
 8005f74:	2180      	movs	r1, #128	; 0x80
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f7ff feaf 	bl	8005cda <SPI_WaitFlagStateUntilTimeout>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d007      	beq.n	8005f92 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f86:	f043 0220 	orr.w	r2, r3, #32
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e014      	b.n	8005fbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f7ff ff05 	bl	8005dae <SPI_WaitFifoStateUntilTimeout>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d007      	beq.n	8005fba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fae:	f043 0220 	orr.w	r2, r3, #32
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e000      	b.n	8005fbc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e09f      	b.n	8006116 <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d02d      	beq.n	800603a <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a4f      	ldr	r2, [pc, #316]	; (8006120 <HAL_UART_Init+0x15c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d055      	beq.n	8006094 <HAL_UART_Init+0xd0>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a4d      	ldr	r2, [pc, #308]	; (8006124 <HAL_UART_Init+0x160>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d050      	beq.n	8006094 <HAL_UART_Init+0xd0>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a4c      	ldr	r2, [pc, #304]	; (8006128 <HAL_UART_Init+0x164>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d04b      	beq.n	8006094 <HAL_UART_Init+0xd0>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a4a      	ldr	r2, [pc, #296]	; (800612c <HAL_UART_Init+0x168>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d046      	beq.n	8006094 <HAL_UART_Init+0xd0>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a49      	ldr	r2, [pc, #292]	; (8006130 <HAL_UART_Init+0x16c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d041      	beq.n	8006094 <HAL_UART_Init+0xd0>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a47      	ldr	r2, [pc, #284]	; (8006134 <HAL_UART_Init+0x170>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d03c      	beq.n	8006094 <HAL_UART_Init+0xd0>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a46      	ldr	r2, [pc, #280]	; (8006138 <HAL_UART_Init+0x174>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d037      	beq.n	8006094 <HAL_UART_Init+0xd0>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a44      	ldr	r2, [pc, #272]	; (800613c <HAL_UART_Init+0x178>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d032      	beq.n	8006094 <HAL_UART_Init+0xd0>
 800602e:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8006032:	4843      	ldr	r0, [pc, #268]	; (8006140 <HAL_UART_Init+0x17c>)
 8006034:	f7fb fbd3 	bl	80017de <assert_failed>
 8006038:	e02c      	b.n	8006094 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a38      	ldr	r2, [pc, #224]	; (8006120 <HAL_UART_Init+0x15c>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d027      	beq.n	8006094 <HAL_UART_Init+0xd0>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a36      	ldr	r2, [pc, #216]	; (8006124 <HAL_UART_Init+0x160>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d022      	beq.n	8006094 <HAL_UART_Init+0xd0>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a35      	ldr	r2, [pc, #212]	; (8006128 <HAL_UART_Init+0x164>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d01d      	beq.n	8006094 <HAL_UART_Init+0xd0>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a33      	ldr	r2, [pc, #204]	; (800612c <HAL_UART_Init+0x168>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d018      	beq.n	8006094 <HAL_UART_Init+0xd0>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a32      	ldr	r2, [pc, #200]	; (8006130 <HAL_UART_Init+0x16c>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d013      	beq.n	8006094 <HAL_UART_Init+0xd0>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a30      	ldr	r2, [pc, #192]	; (8006134 <HAL_UART_Init+0x170>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00e      	beq.n	8006094 <HAL_UART_Init+0xd0>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a2f      	ldr	r2, [pc, #188]	; (8006138 <HAL_UART_Init+0x174>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d009      	beq.n	8006094 <HAL_UART_Init+0xd0>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a2d      	ldr	r2, [pc, #180]	; (800613c <HAL_UART_Init+0x178>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d004      	beq.n	8006094 <HAL_UART_Init+0xd0>
 800608a:	f240 112f 	movw	r1, #303	; 0x12f
 800608e:	482c      	ldr	r0, [pc, #176]	; (8006140 <HAL_UART_Init+0x17c>)
 8006090:	f7fb fba5 	bl	80017de <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006098:	2b00      	cmp	r3, #0
 800609a:	d106      	bne.n	80060aa <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7fb ff85 	bl	8001fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2224      	movs	r2, #36	; 0x24
 80060ae:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0201 	bic.w	r2, r2, #1
 80060be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fb01 	bl	80066c8 <UART_SetConfig>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e022      	b.n	8006116 <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fe31 	bl	8006d40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689a      	ldr	r2, [r3, #8]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f042 0201 	orr.w	r2, r2, #1
 800610c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 ff6a 	bl	8006fe8 <UART_CheckIdleState>
 8006114:	4603      	mov	r3, r0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	40011000 	.word	0x40011000
 8006124:	40004400 	.word	0x40004400
 8006128:	40004800 	.word	0x40004800
 800612c:	40004c00 	.word	0x40004c00
 8006130:	40005000 	.word	0x40005000
 8006134:	40011400 	.word	0x40011400
 8006138:	40007800 	.word	0x40007800
 800613c:	40007c00 	.word	0x40007c00
 8006140:	08007410 	.word	0x08007410

08006144 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08a      	sub	sp, #40	; 0x28
 8006148:	af02      	add	r7, sp, #8
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	603b      	str	r3, [r7, #0]
 8006150:	4613      	mov	r3, r2
 8006152:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006158:	2b20      	cmp	r3, #32
 800615a:	d17f      	bne.n	800625c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <HAL_UART_Transmit+0x24>
 8006162:	88fb      	ldrh	r3, [r7, #6]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e078      	b.n	800625e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006172:	2b01      	cmp	r3, #1
 8006174:	d101      	bne.n	800617a <HAL_UART_Transmit+0x36>
 8006176:	2302      	movs	r3, #2
 8006178:	e071      	b.n	800625e <HAL_UART_Transmit+0x11a>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2221      	movs	r2, #33	; 0x21
 800618c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800618e:	f7fc f889 	bl	80022a4 <HAL_GetTick>
 8006192:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	88fa      	ldrh	r2, [r7, #6]
 8006198:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	88fa      	ldrh	r2, [r7, #6]
 80061a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ac:	d108      	bne.n	80061c0 <HAL_UART_Transmit+0x7c>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d104      	bne.n	80061c0 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	61bb      	str	r3, [r7, #24]
 80061be:	e003      	b.n	80061c8 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061c4:	2300      	movs	r3, #0
 80061c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80061d0:	e02c      	b.n	800622c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2200      	movs	r2, #0
 80061da:	2180      	movs	r1, #128	; 0x80
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 ff48 	bl	8007072 <UART_WaitOnFlagUntilTimeout>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e038      	b.n	800625e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10b      	bne.n	800620a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006200:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	3302      	adds	r3, #2
 8006206:	61bb      	str	r3, [r7, #24]
 8006208:	e007      	b.n	800621a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	781a      	ldrb	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	3301      	adds	r3, #1
 8006218:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006220:	b29b      	uxth	r3, r3
 8006222:	3b01      	subs	r3, #1
 8006224:	b29a      	uxth	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006232:	b29b      	uxth	r3, r3
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1cc      	bne.n	80061d2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	2200      	movs	r2, #0
 8006240:	2140      	movs	r1, #64	; 0x40
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f000 ff15 	bl	8007072 <UART_WaitOnFlagUntilTimeout>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e005      	b.n	800625e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2220      	movs	r2, #32
 8006256:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	e000      	b.n	800625e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800625c:	2302      	movs	r3, #2
  }
}
 800625e:	4618      	mov	r0, r3
 8006260:	3720      	adds	r7, #32
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b08a      	sub	sp, #40	; 0x28
 800626a:	af02      	add	r7, sp, #8
 800626c:	60f8      	str	r0, [r7, #12]
 800626e:	60b9      	str	r1, [r7, #8]
 8006270:	603b      	str	r3, [r7, #0]
 8006272:	4613      	mov	r3, r2
 8006274:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800627a:	2b20      	cmp	r3, #32
 800627c:	f040 80ba 	bne.w	80063f4 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <HAL_UART_Receive+0x26>
 8006286:	88fb      	ldrh	r3, [r7, #6]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e0b2      	b.n	80063f6 <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006296:	2b01      	cmp	r3, #1
 8006298:	d101      	bne.n	800629e <HAL_UART_Receive+0x38>
 800629a:	2302      	movs	r3, #2
 800629c:	e0ab      	b.n	80063f6 <HAL_UART_Receive+0x190>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2222      	movs	r2, #34	; 0x22
 80062b0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80062b2:	f7fb fff7 	bl	80022a4 <HAL_GetTick>
 80062b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	88fa      	ldrh	r2, [r7, #6]
 80062bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	88fa      	ldrh	r2, [r7, #6]
 80062c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d0:	d10e      	bne.n	80062f0 <HAL_UART_Receive+0x8a>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d105      	bne.n	80062e6 <HAL_UART_Receive+0x80>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f240 12ff 	movw	r2, #511	; 0x1ff
 80062e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062e4:	e02d      	b.n	8006342 <HAL_UART_Receive+0xdc>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	22ff      	movs	r2, #255	; 0xff
 80062ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062ee:	e028      	b.n	8006342 <HAL_UART_Receive+0xdc>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10d      	bne.n	8006314 <HAL_UART_Receive+0xae>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d104      	bne.n	800630a <HAL_UART_Receive+0xa4>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	22ff      	movs	r2, #255	; 0xff
 8006304:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006308:	e01b      	b.n	8006342 <HAL_UART_Receive+0xdc>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	227f      	movs	r2, #127	; 0x7f
 800630e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006312:	e016      	b.n	8006342 <HAL_UART_Receive+0xdc>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800631c:	d10d      	bne.n	800633a <HAL_UART_Receive+0xd4>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d104      	bne.n	8006330 <HAL_UART_Receive+0xca>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	227f      	movs	r2, #127	; 0x7f
 800632a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800632e:	e008      	b.n	8006342 <HAL_UART_Receive+0xdc>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	223f      	movs	r2, #63	; 0x3f
 8006334:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006338:	e003      	b.n	8006342 <HAL_UART_Receive+0xdc>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006348:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006352:	d108      	bne.n	8006366 <HAL_UART_Receive+0x100>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d104      	bne.n	8006366 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800635c:	2300      	movs	r3, #0
 800635e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	61bb      	str	r3, [r7, #24]
 8006364:	e003      	b.n	800636e <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800636a:	2300      	movs	r3, #0
 800636c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006376:	e032      	b.n	80063de <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	2200      	movs	r2, #0
 8006380:	2120      	movs	r1, #32
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 fe75 	bl	8007072 <UART_WaitOnFlagUntilTimeout>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e031      	b.n	80063f6 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10c      	bne.n	80063b2 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	b29a      	uxth	r2, r3
 80063a0:	8a7b      	ldrh	r3, [r7, #18]
 80063a2:	4013      	ands	r3, r2
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	3302      	adds	r3, #2
 80063ae:	61bb      	str	r3, [r7, #24]
 80063b0:	e00c      	b.n	80063cc <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	8a7b      	ldrh	r3, [r7, #18]
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	4013      	ands	r3, r2
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	3301      	adds	r3, #1
 80063ca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	3b01      	subs	r3, #1
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1c6      	bne.n	8006378 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2220      	movs	r2, #32
 80063ee:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80063f0:	2300      	movs	r3, #0
 80063f2:	e000      	b.n	80063f6 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 80063f4:	2302      	movs	r3, #2
  }
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3720      	adds	r7, #32
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b088      	sub	sp, #32
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006420:	69fa      	ldr	r2, [r7, #28]
 8006422:	f640 030f 	movw	r3, #2063	; 0x80f
 8006426:	4013      	ands	r3, r2
 8006428:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d113      	bne.n	8006458 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	f003 0320 	and.w	r3, r3, #32
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00e      	beq.n	8006458 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	f003 0320 	and.w	r3, r3, #32
 8006440:	2b00      	cmp	r3, #0
 8006442:	d009      	beq.n	8006458 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006448:	2b00      	cmp	r3, #0
 800644a:	f000 8114 	beq.w	8006676 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	4798      	blx	r3
      }
      return;
 8006456:	e10e      	b.n	8006676 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 80d6 	beq.w	800660c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d105      	bne.n	8006476 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006470:	2b00      	cmp	r3, #0
 8006472:	f000 80cb 	beq.w	800660c <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00e      	beq.n	800649e <HAL_UART_IRQHandler+0x9e>
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006486:	2b00      	cmp	r3, #0
 8006488:	d009      	beq.n	800649e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2201      	movs	r2, #1
 8006490:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006496:	f043 0201 	orr.w	r2, r3, #1
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00e      	beq.n	80064c6 <HAL_UART_IRQHandler+0xc6>
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d009      	beq.n	80064c6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2202      	movs	r2, #2
 80064b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064be:	f043 0204 	orr.w	r2, r3, #4
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00e      	beq.n	80064ee <HAL_UART_IRQHandler+0xee>
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d009      	beq.n	80064ee <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2204      	movs	r2, #4
 80064e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064e6:	f043 0202 	orr.w	r2, r3, #2
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	f003 0308 	and.w	r3, r3, #8
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d013      	beq.n	8006520 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	f003 0320 	and.w	r3, r3, #32
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d104      	bne.n	800650c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006508:	2b00      	cmp	r3, #0
 800650a:	d009      	beq.n	8006520 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2208      	movs	r2, #8
 8006512:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006518:	f043 0208 	orr.w	r2, r3, #8
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00f      	beq.n	800654a <HAL_UART_IRQHandler+0x14a>
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00a      	beq.n	800654a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800653c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006542:	f043 0220 	orr.w	r2, r3, #32
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 8093 	beq.w	800667a <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	f003 0320 	and.w	r3, r3, #32
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00c      	beq.n	8006578 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	f003 0320 	and.w	r3, r3, #32
 8006564:	2b00      	cmp	r3, #0
 8006566:	d007      	beq.n	8006578 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800657c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006588:	2b40      	cmp	r3, #64	; 0x40
 800658a:	d004      	beq.n	8006596 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006592:	2b00      	cmp	r3, #0
 8006594:	d031      	beq.n	80065fa <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fde6 	bl	8007168 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a6:	2b40      	cmp	r3, #64	; 0x40
 80065a8:	d123      	bne.n	80065f2 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065b8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d013      	beq.n	80065ea <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065c6:	4a30      	ldr	r2, [pc, #192]	; (8006688 <HAL_UART_IRQHandler+0x288>)
 80065c8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fc f926 	bl	8002820 <HAL_DMA_Abort_IT>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d016      	beq.n	8006608 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80065e4:	4610      	mov	r0, r2
 80065e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e8:	e00e      	b.n	8006608 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f858 	bl	80066a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065f0:	e00a      	b.n	8006608 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f854 	bl	80066a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065f8:	e006      	b.n	8006608 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f850 	bl	80066a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006606:	e038      	b.n	800667a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006608:	bf00      	nop
    return;
 800660a:	e036      	b.n	800667a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00d      	beq.n	8006632 <HAL_UART_IRQHandler+0x232>
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d008      	beq.n	8006632 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006628:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f842 	bl	80066b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006630:	e026      	b.n	8006680 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00d      	beq.n	8006658 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006642:	2b00      	cmp	r3, #0
 8006644:	d008      	beq.n	8006658 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800664a:	2b00      	cmp	r3, #0
 800664c:	d017      	beq.n	800667e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	4798      	blx	r3
    }
    return;
 8006656:	e012      	b.n	800667e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00e      	beq.n	8006680 <HAL_UART_IRQHandler+0x280>
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006668:	2b00      	cmp	r3, #0
 800666a:	d009      	beq.n	8006680 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fdb1 	bl	80071d4 <UART_EndTransmit_IT>
    return;
 8006672:	bf00      	nop
 8006674:	e004      	b.n	8006680 <HAL_UART_IRQHandler+0x280>
      return;
 8006676:	bf00      	nop
 8006678:	e002      	b.n	8006680 <HAL_UART_IRQHandler+0x280>
    return;
 800667a:	bf00      	nop
 800667c:	e000      	b.n	8006680 <HAL_UART_IRQHandler+0x280>
    return;
 800667e:	bf00      	nop
  }

}
 8006680:	3720      	adds	r7, #32
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	080071a9 	.word	0x080071a9

0800668c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b088      	sub	sp, #32
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80066d0:	2300      	movs	r3, #0
 80066d2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	75fb      	strb	r3, [r7, #23]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	4aaa      	ldr	r2, [pc, #680]	; (8006988 <UART_SetConfig+0x2c0>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d904      	bls.n	80066ec <UART_SetConfig+0x24>
 80066e2:	f640 21be 	movw	r1, #2750	; 0xabe
 80066e6:	48a9      	ldr	r0, [pc, #676]	; (800698c <UART_SetConfig+0x2c4>)
 80066e8:	f7fb f879 	bl	80017de <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066f4:	d00d      	beq.n	8006712 <UART_SetConfig+0x4a>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d009      	beq.n	8006712 <UART_SetConfig+0x4a>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006706:	d004      	beq.n	8006712 <UART_SetConfig+0x4a>
 8006708:	f640 21bf 	movw	r1, #2751	; 0xabf
 800670c:	489f      	ldr	r0, [pc, #636]	; (800698c <UART_SetConfig+0x2c4>)
 800670e:	f7fb f866 	bl	80017de <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800671a:	d012      	beq.n	8006742 <UART_SetConfig+0x7a>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00e      	beq.n	8006742 <UART_SetConfig+0x7a>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800672c:	d009      	beq.n	8006742 <UART_SetConfig+0x7a>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006736:	d004      	beq.n	8006742 <UART_SetConfig+0x7a>
 8006738:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 800673c:	4893      	ldr	r0, [pc, #588]	; (800698c <UART_SetConfig+0x2c4>)
 800673e:	f7fb f84e 	bl	80017de <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d009      	beq.n	800675e <UART_SetConfig+0x96>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006752:	d004      	beq.n	800675e <UART_SetConfig+0x96>
 8006754:	f640 21c1 	movw	r1, #2753	; 0xac1
 8006758:	488c      	ldr	r0, [pc, #560]	; (800698c <UART_SetConfig+0x2c4>)
 800675a:	f7fb f840 	bl	80017de <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00e      	beq.n	8006784 <UART_SetConfig+0xbc>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800676e:	d009      	beq.n	8006784 <UART_SetConfig+0xbc>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006778:	d004      	beq.n	8006784 <UART_SetConfig+0xbc>
 800677a:	f640 21c3 	movw	r1, #2755	; 0xac3
 800677e:	4883      	ldr	r0, [pc, #524]	; (800698c <UART_SetConfig+0x2c4>)
 8006780:	f7fb f82d 	bl	80017de <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	f023 030c 	bic.w	r3, r3, #12
 800678c:	2b00      	cmp	r3, #0
 800678e:	d103      	bne.n	8006798 <UART_SetConfig+0xd0>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d104      	bne.n	80067a2 <UART_SetConfig+0xda>
 8006798:	f640 21c4 	movw	r1, #2756	; 0xac4
 800679c:	487b      	ldr	r0, [pc, #492]	; (800698c <UART_SetConfig+0x2c4>)
 800679e:	f7fb f81e 	bl	80017de <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d013      	beq.n	80067d2 <UART_SetConfig+0x10a>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067b2:	d00e      	beq.n	80067d2 <UART_SetConfig+0x10a>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067bc:	d009      	beq.n	80067d2 <UART_SetConfig+0x10a>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067c6:	d004      	beq.n	80067d2 <UART_SetConfig+0x10a>
 80067c8:	f640 21c5 	movw	r1, #2757	; 0xac5
 80067cc:	486f      	ldr	r0, [pc, #444]	; (800698c <UART_SetConfig+0x2c4>)
 80067ce:	f7fb f806 	bl	80017de <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d009      	beq.n	80067ee <UART_SetConfig+0x126>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067e2:	d004      	beq.n	80067ee <UART_SetConfig+0x126>
 80067e4:	f640 21c6 	movw	r1, #2758	; 0xac6
 80067e8:	4868      	ldr	r0, [pc, #416]	; (800698c <UART_SetConfig+0x2c4>)
 80067ea:	f7fa fff8 	bl	80017de <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689a      	ldr	r2, [r3, #8]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	431a      	orrs	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	431a      	orrs	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	69db      	ldr	r3, [r3, #28]
 8006802:	4313      	orrs	r3, r2
 8006804:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	4b60      	ldr	r3, [pc, #384]	; (8006990 <UART_SetConfig+0x2c8>)
 800680e:	4013      	ands	r3, r2
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	6812      	ldr	r2, [r2, #0]
 8006814:	6939      	ldr	r1, [r7, #16]
 8006816:	430b      	orrs	r3, r1
 8006818:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68da      	ldr	r2, [r3, #12]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	430a      	orrs	r2, r1
 800682e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	4313      	orrs	r3, r2
 800683e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	430a      	orrs	r2, r1
 8006852:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a4e      	ldr	r2, [pc, #312]	; (8006994 <UART_SetConfig+0x2cc>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d122      	bne.n	80068a4 <UART_SetConfig+0x1dc>
 800685e:	4b4e      	ldr	r3, [pc, #312]	; (8006998 <UART_SetConfig+0x2d0>)
 8006860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006864:	f003 0303 	and.w	r3, r3, #3
 8006868:	2b03      	cmp	r3, #3
 800686a:	d817      	bhi.n	800689c <UART_SetConfig+0x1d4>
 800686c:	a201      	add	r2, pc, #4	; (adr r2, 8006874 <UART_SetConfig+0x1ac>)
 800686e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006872:	bf00      	nop
 8006874:	08006885 	.word	0x08006885
 8006878:	08006891 	.word	0x08006891
 800687c:	0800688b 	.word	0x0800688b
 8006880:	08006897 	.word	0x08006897
 8006884:	2301      	movs	r3, #1
 8006886:	77fb      	strb	r3, [r7, #31]
 8006888:	e14d      	b.n	8006b26 <UART_SetConfig+0x45e>
 800688a:	2302      	movs	r3, #2
 800688c:	77fb      	strb	r3, [r7, #31]
 800688e:	e14a      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006890:	2304      	movs	r3, #4
 8006892:	77fb      	strb	r3, [r7, #31]
 8006894:	e147      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006896:	2308      	movs	r3, #8
 8006898:	77fb      	strb	r3, [r7, #31]
 800689a:	e144      	b.n	8006b26 <UART_SetConfig+0x45e>
 800689c:	2310      	movs	r3, #16
 800689e:	77fb      	strb	r3, [r7, #31]
 80068a0:	bf00      	nop
 80068a2:	e140      	b.n	8006b26 <UART_SetConfig+0x45e>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a3c      	ldr	r2, [pc, #240]	; (800699c <UART_SetConfig+0x2d4>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d134      	bne.n	8006918 <UART_SetConfig+0x250>
 80068ae:	4b3a      	ldr	r3, [pc, #232]	; (8006998 <UART_SetConfig+0x2d0>)
 80068b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b4:	f003 030c 	and.w	r3, r3, #12
 80068b8:	2b0c      	cmp	r3, #12
 80068ba:	d829      	bhi.n	8006910 <UART_SetConfig+0x248>
 80068bc:	a201      	add	r2, pc, #4	; (adr r2, 80068c4 <UART_SetConfig+0x1fc>)
 80068be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c2:	bf00      	nop
 80068c4:	080068f9 	.word	0x080068f9
 80068c8:	08006911 	.word	0x08006911
 80068cc:	08006911 	.word	0x08006911
 80068d0:	08006911 	.word	0x08006911
 80068d4:	08006905 	.word	0x08006905
 80068d8:	08006911 	.word	0x08006911
 80068dc:	08006911 	.word	0x08006911
 80068e0:	08006911 	.word	0x08006911
 80068e4:	080068ff 	.word	0x080068ff
 80068e8:	08006911 	.word	0x08006911
 80068ec:	08006911 	.word	0x08006911
 80068f0:	08006911 	.word	0x08006911
 80068f4:	0800690b 	.word	0x0800690b
 80068f8:	2300      	movs	r3, #0
 80068fa:	77fb      	strb	r3, [r7, #31]
 80068fc:	e113      	b.n	8006b26 <UART_SetConfig+0x45e>
 80068fe:	2302      	movs	r3, #2
 8006900:	77fb      	strb	r3, [r7, #31]
 8006902:	e110      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006904:	2304      	movs	r3, #4
 8006906:	77fb      	strb	r3, [r7, #31]
 8006908:	e10d      	b.n	8006b26 <UART_SetConfig+0x45e>
 800690a:	2308      	movs	r3, #8
 800690c:	77fb      	strb	r3, [r7, #31]
 800690e:	e10a      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006910:	2310      	movs	r3, #16
 8006912:	77fb      	strb	r3, [r7, #31]
 8006914:	bf00      	nop
 8006916:	e106      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a20      	ldr	r2, [pc, #128]	; (80069a0 <UART_SetConfig+0x2d8>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d120      	bne.n	8006964 <UART_SetConfig+0x29c>
 8006922:	4b1d      	ldr	r3, [pc, #116]	; (8006998 <UART_SetConfig+0x2d0>)
 8006924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006928:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800692c:	2b10      	cmp	r3, #16
 800692e:	d00f      	beq.n	8006950 <UART_SetConfig+0x288>
 8006930:	2b10      	cmp	r3, #16
 8006932:	d802      	bhi.n	800693a <UART_SetConfig+0x272>
 8006934:	2b00      	cmp	r3, #0
 8006936:	d005      	beq.n	8006944 <UART_SetConfig+0x27c>
 8006938:	e010      	b.n	800695c <UART_SetConfig+0x294>
 800693a:	2b20      	cmp	r3, #32
 800693c:	d005      	beq.n	800694a <UART_SetConfig+0x282>
 800693e:	2b30      	cmp	r3, #48	; 0x30
 8006940:	d009      	beq.n	8006956 <UART_SetConfig+0x28e>
 8006942:	e00b      	b.n	800695c <UART_SetConfig+0x294>
 8006944:	2300      	movs	r3, #0
 8006946:	77fb      	strb	r3, [r7, #31]
 8006948:	e0ed      	b.n	8006b26 <UART_SetConfig+0x45e>
 800694a:	2302      	movs	r3, #2
 800694c:	77fb      	strb	r3, [r7, #31]
 800694e:	e0ea      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006950:	2304      	movs	r3, #4
 8006952:	77fb      	strb	r3, [r7, #31]
 8006954:	e0e7      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006956:	2308      	movs	r3, #8
 8006958:	77fb      	strb	r3, [r7, #31]
 800695a:	e0e4      	b.n	8006b26 <UART_SetConfig+0x45e>
 800695c:	2310      	movs	r3, #16
 800695e:	77fb      	strb	r3, [r7, #31]
 8006960:	bf00      	nop
 8006962:	e0e0      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a0e      	ldr	r2, [pc, #56]	; (80069a4 <UART_SetConfig+0x2dc>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d131      	bne.n	80069d2 <UART_SetConfig+0x30a>
 800696e:	4b0a      	ldr	r3, [pc, #40]	; (8006998 <UART_SetConfig+0x2d0>)
 8006970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006974:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006978:	2b40      	cmp	r3, #64	; 0x40
 800697a:	d020      	beq.n	80069be <UART_SetConfig+0x2f6>
 800697c:	2b40      	cmp	r3, #64	; 0x40
 800697e:	d813      	bhi.n	80069a8 <UART_SetConfig+0x2e0>
 8006980:	2b00      	cmp	r3, #0
 8006982:	d016      	beq.n	80069b2 <UART_SetConfig+0x2ea>
 8006984:	e021      	b.n	80069ca <UART_SetConfig+0x302>
 8006986:	bf00      	nop
 8006988:	019bfcc0 	.word	0x019bfcc0
 800698c:	08007410 	.word	0x08007410
 8006990:	efff69f3 	.word	0xefff69f3
 8006994:	40011000 	.word	0x40011000
 8006998:	40023800 	.word	0x40023800
 800699c:	40004400 	.word	0x40004400
 80069a0:	40004800 	.word	0x40004800
 80069a4:	40004c00 	.word	0x40004c00
 80069a8:	2b80      	cmp	r3, #128	; 0x80
 80069aa:	d005      	beq.n	80069b8 <UART_SetConfig+0x2f0>
 80069ac:	2bc0      	cmp	r3, #192	; 0xc0
 80069ae:	d009      	beq.n	80069c4 <UART_SetConfig+0x2fc>
 80069b0:	e00b      	b.n	80069ca <UART_SetConfig+0x302>
 80069b2:	2300      	movs	r3, #0
 80069b4:	77fb      	strb	r3, [r7, #31]
 80069b6:	e0b6      	b.n	8006b26 <UART_SetConfig+0x45e>
 80069b8:	2302      	movs	r3, #2
 80069ba:	77fb      	strb	r3, [r7, #31]
 80069bc:	e0b3      	b.n	8006b26 <UART_SetConfig+0x45e>
 80069be:	2304      	movs	r3, #4
 80069c0:	77fb      	strb	r3, [r7, #31]
 80069c2:	e0b0      	b.n	8006b26 <UART_SetConfig+0x45e>
 80069c4:	2308      	movs	r3, #8
 80069c6:	77fb      	strb	r3, [r7, #31]
 80069c8:	e0ad      	b.n	8006b26 <UART_SetConfig+0x45e>
 80069ca:	2310      	movs	r3, #16
 80069cc:	77fb      	strb	r3, [r7, #31]
 80069ce:	bf00      	nop
 80069d0:	e0a9      	b.n	8006b26 <UART_SetConfig+0x45e>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4aaa      	ldr	r2, [pc, #680]	; (8006c80 <UART_SetConfig+0x5b8>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d124      	bne.n	8006a26 <UART_SetConfig+0x35e>
 80069dc:	4ba9      	ldr	r3, [pc, #676]	; (8006c84 <UART_SetConfig+0x5bc>)
 80069de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ea:	d012      	beq.n	8006a12 <UART_SetConfig+0x34a>
 80069ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069f0:	d802      	bhi.n	80069f8 <UART_SetConfig+0x330>
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d007      	beq.n	8006a06 <UART_SetConfig+0x33e>
 80069f6:	e012      	b.n	8006a1e <UART_SetConfig+0x356>
 80069f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069fc:	d006      	beq.n	8006a0c <UART_SetConfig+0x344>
 80069fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a02:	d009      	beq.n	8006a18 <UART_SetConfig+0x350>
 8006a04:	e00b      	b.n	8006a1e <UART_SetConfig+0x356>
 8006a06:	2300      	movs	r3, #0
 8006a08:	77fb      	strb	r3, [r7, #31]
 8006a0a:	e08c      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	77fb      	strb	r3, [r7, #31]
 8006a10:	e089      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006a12:	2304      	movs	r3, #4
 8006a14:	77fb      	strb	r3, [r7, #31]
 8006a16:	e086      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006a18:	2308      	movs	r3, #8
 8006a1a:	77fb      	strb	r3, [r7, #31]
 8006a1c:	e083      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006a1e:	2310      	movs	r3, #16
 8006a20:	77fb      	strb	r3, [r7, #31]
 8006a22:	bf00      	nop
 8006a24:	e07f      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a97      	ldr	r2, [pc, #604]	; (8006c88 <UART_SetConfig+0x5c0>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d124      	bne.n	8006a7a <UART_SetConfig+0x3b2>
 8006a30:	4b94      	ldr	r3, [pc, #592]	; (8006c84 <UART_SetConfig+0x5bc>)
 8006a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a3e:	d012      	beq.n	8006a66 <UART_SetConfig+0x39e>
 8006a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a44:	d802      	bhi.n	8006a4c <UART_SetConfig+0x384>
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d007      	beq.n	8006a5a <UART_SetConfig+0x392>
 8006a4a:	e012      	b.n	8006a72 <UART_SetConfig+0x3aa>
 8006a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a50:	d006      	beq.n	8006a60 <UART_SetConfig+0x398>
 8006a52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a56:	d009      	beq.n	8006a6c <UART_SetConfig+0x3a4>
 8006a58:	e00b      	b.n	8006a72 <UART_SetConfig+0x3aa>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	77fb      	strb	r3, [r7, #31]
 8006a5e:	e062      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006a60:	2302      	movs	r3, #2
 8006a62:	77fb      	strb	r3, [r7, #31]
 8006a64:	e05f      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006a66:	2304      	movs	r3, #4
 8006a68:	77fb      	strb	r3, [r7, #31]
 8006a6a:	e05c      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006a6c:	2308      	movs	r3, #8
 8006a6e:	77fb      	strb	r3, [r7, #31]
 8006a70:	e059      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006a72:	2310      	movs	r3, #16
 8006a74:	77fb      	strb	r3, [r7, #31]
 8006a76:	bf00      	nop
 8006a78:	e055      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a83      	ldr	r2, [pc, #524]	; (8006c8c <UART_SetConfig+0x5c4>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d124      	bne.n	8006ace <UART_SetConfig+0x406>
 8006a84:	4b7f      	ldr	r3, [pc, #508]	; (8006c84 <UART_SetConfig+0x5bc>)
 8006a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a8a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a92:	d012      	beq.n	8006aba <UART_SetConfig+0x3f2>
 8006a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a98:	d802      	bhi.n	8006aa0 <UART_SetConfig+0x3d8>
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d007      	beq.n	8006aae <UART_SetConfig+0x3e6>
 8006a9e:	e012      	b.n	8006ac6 <UART_SetConfig+0x3fe>
 8006aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aa4:	d006      	beq.n	8006ab4 <UART_SetConfig+0x3ec>
 8006aa6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006aaa:	d009      	beq.n	8006ac0 <UART_SetConfig+0x3f8>
 8006aac:	e00b      	b.n	8006ac6 <UART_SetConfig+0x3fe>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	77fb      	strb	r3, [r7, #31]
 8006ab2:	e038      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	77fb      	strb	r3, [r7, #31]
 8006ab8:	e035      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006aba:	2304      	movs	r3, #4
 8006abc:	77fb      	strb	r3, [r7, #31]
 8006abe:	e032      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006ac0:	2308      	movs	r3, #8
 8006ac2:	77fb      	strb	r3, [r7, #31]
 8006ac4:	e02f      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006ac6:	2310      	movs	r3, #16
 8006ac8:	77fb      	strb	r3, [r7, #31]
 8006aca:	bf00      	nop
 8006acc:	e02b      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a6f      	ldr	r2, [pc, #444]	; (8006c90 <UART_SetConfig+0x5c8>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d124      	bne.n	8006b22 <UART_SetConfig+0x45a>
 8006ad8:	4b6a      	ldr	r3, [pc, #424]	; (8006c84 <UART_SetConfig+0x5bc>)
 8006ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ade:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ae6:	d012      	beq.n	8006b0e <UART_SetConfig+0x446>
 8006ae8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006aec:	d802      	bhi.n	8006af4 <UART_SetConfig+0x42c>
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d007      	beq.n	8006b02 <UART_SetConfig+0x43a>
 8006af2:	e012      	b.n	8006b1a <UART_SetConfig+0x452>
 8006af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006af8:	d006      	beq.n	8006b08 <UART_SetConfig+0x440>
 8006afa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006afe:	d009      	beq.n	8006b14 <UART_SetConfig+0x44c>
 8006b00:	e00b      	b.n	8006b1a <UART_SetConfig+0x452>
 8006b02:	2300      	movs	r3, #0
 8006b04:	77fb      	strb	r3, [r7, #31]
 8006b06:	e00e      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006b08:	2302      	movs	r3, #2
 8006b0a:	77fb      	strb	r3, [r7, #31]
 8006b0c:	e00b      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006b0e:	2304      	movs	r3, #4
 8006b10:	77fb      	strb	r3, [r7, #31]
 8006b12:	e008      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006b14:	2308      	movs	r3, #8
 8006b16:	77fb      	strb	r3, [r7, #31]
 8006b18:	e005      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006b1a:	2310      	movs	r3, #16
 8006b1c:	77fb      	strb	r3, [r7, #31]
 8006b1e:	bf00      	nop
 8006b20:	e001      	b.n	8006b26 <UART_SetConfig+0x45e>
 8006b22:	2310      	movs	r3, #16
 8006b24:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b2e:	d17f      	bne.n	8006c30 <UART_SetConfig+0x568>
  {
    switch (clocksource)
 8006b30:	7ffb      	ldrb	r3, [r7, #31]
 8006b32:	2b08      	cmp	r3, #8
 8006b34:	d85c      	bhi.n	8006bf0 <UART_SetConfig+0x528>
 8006b36:	a201      	add	r2, pc, #4	; (adr r2, 8006b3c <UART_SetConfig+0x474>)
 8006b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3c:	08006b61 	.word	0x08006b61
 8006b40:	08006b81 	.word	0x08006b81
 8006b44:	08006ba1 	.word	0x08006ba1
 8006b48:	08006bf1 	.word	0x08006bf1
 8006b4c:	08006bb9 	.word	0x08006bb9
 8006b50:	08006bf1 	.word	0x08006bf1
 8006b54:	08006bf1 	.word	0x08006bf1
 8006b58:	08006bf1 	.word	0x08006bf1
 8006b5c:	08006bd9 	.word	0x08006bd9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b60:	f7fd f8a4 	bl	8003cac <HAL_RCC_GetPCLK1Freq>
 8006b64:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	005a      	lsls	r2, r3, #1
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	085b      	lsrs	r3, r3, #1
 8006b70:	441a      	add	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	61bb      	str	r3, [r7, #24]
        break;
 8006b7e:	e03a      	b.n	8006bf6 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b80:	f7fd f8a8 	bl	8003cd4 <HAL_RCC_GetPCLK2Freq>
 8006b84:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	005a      	lsls	r2, r3, #1
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	085b      	lsrs	r3, r3, #1
 8006b90:	441a      	add	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	61bb      	str	r3, [r7, #24]
        break;
 8006b9e:	e02a      	b.n	8006bf6 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	085a      	lsrs	r2, r3, #1
 8006ba6:	4b3b      	ldr	r3, [pc, #236]	; (8006c94 <UART_SetConfig+0x5cc>)
 8006ba8:	4413      	add	r3, r2
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	6852      	ldr	r2, [r2, #4]
 8006bae:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	61bb      	str	r3, [r7, #24]
        break;
 8006bb6:	e01e      	b.n	8006bf6 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bb8:	f7fc ffba 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8006bbc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	005a      	lsls	r2, r3, #1
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	085b      	lsrs	r3, r3, #1
 8006bc8:	441a      	add	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	61bb      	str	r3, [r7, #24]
        break;
 8006bd6:	e00e      	b.n	8006bf6 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	085b      	lsrs	r3, r3, #1
 8006bde:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	61bb      	str	r3, [r7, #24]
        break;
 8006bee:	e002      	b.n	8006bf6 <UART_SetConfig+0x52e>
      default:
        ret = HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	75fb      	strb	r3, [r7, #23]
        break;
 8006bf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	2b0f      	cmp	r3, #15
 8006bfa:	d916      	bls.n	8006c2a <UART_SetConfig+0x562>
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c02:	d212      	bcs.n	8006c2a <UART_SetConfig+0x562>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	f023 030f 	bic.w	r3, r3, #15
 8006c0c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	085b      	lsrs	r3, r3, #1
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	f003 0307 	and.w	r3, r3, #7
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	897b      	ldrh	r3, [r7, #10]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	897a      	ldrh	r2, [r7, #10]
 8006c26:	60da      	str	r2, [r3, #12]
 8006c28:	e07d      	b.n	8006d26 <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	75fb      	strb	r3, [r7, #23]
 8006c2e:	e07a      	b.n	8006d26 <UART_SetConfig+0x65e>
    }
  }
  else
  {
    switch (clocksource)
 8006c30:	7ffb      	ldrb	r3, [r7, #31]
 8006c32:	2b08      	cmp	r3, #8
 8006c34:	d866      	bhi.n	8006d04 <UART_SetConfig+0x63c>
 8006c36:	a201      	add	r2, pc, #4	; (adr r2, 8006c3c <UART_SetConfig+0x574>)
 8006c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3c:	08006c61 	.word	0x08006c61
 8006c40:	08006c99 	.word	0x08006c99
 8006c44:	08006cb7 	.word	0x08006cb7
 8006c48:	08006d05 	.word	0x08006d05
 8006c4c:	08006ccf 	.word	0x08006ccf
 8006c50:	08006d05 	.word	0x08006d05
 8006c54:	08006d05 	.word	0x08006d05
 8006c58:	08006d05 	.word	0x08006d05
 8006c5c:	08006ced 	.word	0x08006ced
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c60:	f7fd f824 	bl	8003cac <HAL_RCC_GetPCLK1Freq>
 8006c64:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	085a      	lsrs	r2, r3, #1
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	441a      	add	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	61bb      	str	r3, [r7, #24]
        break;
 8006c7c:	e045      	b.n	8006d0a <UART_SetConfig+0x642>
 8006c7e:	bf00      	nop
 8006c80:	40005000 	.word	0x40005000
 8006c84:	40023800 	.word	0x40023800
 8006c88:	40011400 	.word	0x40011400
 8006c8c:	40007800 	.word	0x40007800
 8006c90:	40007c00 	.word	0x40007c00
 8006c94:	01e84800 	.word	0x01e84800
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c98:	f7fd f81c 	bl	8003cd4 <HAL_RCC_GetPCLK2Freq>
 8006c9c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	085a      	lsrs	r2, r3, #1
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	441a      	add	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	61bb      	str	r3, [r7, #24]
        break;
 8006cb4:	e029      	b.n	8006d0a <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	085a      	lsrs	r2, r3, #1
 8006cbc:	4b1f      	ldr	r3, [pc, #124]	; (8006d3c <UART_SetConfig+0x674>)
 8006cbe:	4413      	add	r3, r2
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	6852      	ldr	r2, [r2, #4]
 8006cc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	61bb      	str	r3, [r7, #24]
        break;
 8006ccc:	e01d      	b.n	8006d0a <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cce:	f7fc ff2f 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8006cd2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	085a      	lsrs	r2, r3, #1
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	441a      	add	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	61bb      	str	r3, [r7, #24]
        break;
 8006cea:	e00e      	b.n	8006d0a <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	085b      	lsrs	r3, r3, #1
 8006cf2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	61bb      	str	r3, [r7, #24]
        break;
 8006d02:	e002      	b.n	8006d0a <UART_SetConfig+0x642>
      default:
        ret = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	75fb      	strb	r3, [r7, #23]
        break;
 8006d08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	2b0f      	cmp	r3, #15
 8006d0e:	d908      	bls.n	8006d22 <UART_SetConfig+0x65a>
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d16:	d204      	bcs.n	8006d22 <UART_SetConfig+0x65a>
    {
      huart->Instance->BRR = usartdiv;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	69ba      	ldr	r2, [r7, #24]
 8006d1e:	60da      	str	r2, [r3, #12]
 8006d20:	e001      	b.n	8006d26 <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3720      	adds	r7, #32
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	00f42400 	.word	0x00f42400

08006d40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	2bff      	cmp	r3, #255	; 0xff
 8006d4e:	d904      	bls.n	8006d5a <UART_AdvFeatureConfig+0x1a>
 8006d50:	f640 3143 	movw	r1, #2883	; 0xb43
 8006d54:	489f      	ldr	r0, [pc, #636]	; (8006fd4 <UART_AdvFeatureConfig+0x294>)
 8006d56:	f7fa fd42 	bl	80017de <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d018      	beq.n	8006d98 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d009      	beq.n	8006d82 <UART_AdvFeatureConfig+0x42>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d76:	d004      	beq.n	8006d82 <UART_AdvFeatureConfig+0x42>
 8006d78:	f640 3148 	movw	r1, #2888	; 0xb48
 8006d7c:	4895      	ldr	r0, [pc, #596]	; (8006fd4 <UART_AdvFeatureConfig+0x294>)
 8006d7e:	f7fa fd2e 	bl	80017de <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	430a      	orrs	r2, r1
 8006d96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9c:	f003 0302 	and.w	r3, r3, #2
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d018      	beq.n	8006dd6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d009      	beq.n	8006dc0 <UART_AdvFeatureConfig+0x80>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006db4:	d004      	beq.n	8006dc0 <UART_AdvFeatureConfig+0x80>
 8006db6:	f640 314f 	movw	r1, #2895	; 0xb4f
 8006dba:	4886      	ldr	r0, [pc, #536]	; (8006fd4 <UART_AdvFeatureConfig+0x294>)
 8006dbc:	f7fa fd0f 	bl	80017de <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dda:	f003 0304 	and.w	r3, r3, #4
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d018      	beq.n	8006e14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d009      	beq.n	8006dfe <UART_AdvFeatureConfig+0xbe>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006df2:	d004      	beq.n	8006dfe <UART_AdvFeatureConfig+0xbe>
 8006df4:	f640 3156 	movw	r1, #2902	; 0xb56
 8006df8:	4876      	ldr	r0, [pc, #472]	; (8006fd4 <UART_AdvFeatureConfig+0x294>)
 8006dfa:	f7fa fcf0 	bl	80017de <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	430a      	orrs	r2, r1
 8006e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e18:	f003 0308 	and.w	r3, r3, #8
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d018      	beq.n	8006e52 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d009      	beq.n	8006e3c <UART_AdvFeatureConfig+0xfc>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e30:	d004      	beq.n	8006e3c <UART_AdvFeatureConfig+0xfc>
 8006e32:	f640 315d 	movw	r1, #2909	; 0xb5d
 8006e36:	4867      	ldr	r0, [pc, #412]	; (8006fd4 <UART_AdvFeatureConfig+0x294>)
 8006e38:	f7fa fcd1 	bl	80017de <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e56:	f003 0310 	and.w	r3, r3, #16
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d018      	beq.n	8006e90 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d009      	beq.n	8006e7a <UART_AdvFeatureConfig+0x13a>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e6e:	d004      	beq.n	8006e7a <UART_AdvFeatureConfig+0x13a>
 8006e70:	f640 3164 	movw	r1, #2916	; 0xb64
 8006e74:	4857      	ldr	r0, [pc, #348]	; (8006fd4 <UART_AdvFeatureConfig+0x294>)
 8006e76:	f7fa fcb2 	bl	80017de <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e94:	f003 0320 	and.w	r3, r3, #32
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d018      	beq.n	8006ece <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d009      	beq.n	8006eb8 <UART_AdvFeatureConfig+0x178>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eac:	d004      	beq.n	8006eb8 <UART_AdvFeatureConfig+0x178>
 8006eae:	f640 316b 	movw	r1, #2923	; 0xb6b
 8006eb2:	4848      	ldr	r0, [pc, #288]	; (8006fd4 <UART_AdvFeatureConfig+0x294>)
 8006eb4:	f7fa fc93 	bl	80017de <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d059      	beq.n	8006f8e <UART_AdvFeatureConfig+0x24e>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a3e      	ldr	r2, [pc, #248]	; (8006fd8 <UART_AdvFeatureConfig+0x298>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d013      	beq.n	8006f0c <UART_AdvFeatureConfig+0x1cc>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a3c      	ldr	r2, [pc, #240]	; (8006fdc <UART_AdvFeatureConfig+0x29c>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d00e      	beq.n	8006f0c <UART_AdvFeatureConfig+0x1cc>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a3b      	ldr	r2, [pc, #236]	; (8006fe0 <UART_AdvFeatureConfig+0x2a0>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d009      	beq.n	8006f0c <UART_AdvFeatureConfig+0x1cc>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a39      	ldr	r2, [pc, #228]	; (8006fe4 <UART_AdvFeatureConfig+0x2a4>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d004      	beq.n	8006f0c <UART_AdvFeatureConfig+0x1cc>
 8006f02:	f640 3172 	movw	r1, #2930	; 0xb72
 8006f06:	4833      	ldr	r0, [pc, #204]	; (8006fd4 <UART_AdvFeatureConfig+0x294>)
 8006f08:	f7fa fc69 	bl	80017de <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d009      	beq.n	8006f28 <UART_AdvFeatureConfig+0x1e8>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f1c:	d004      	beq.n	8006f28 <UART_AdvFeatureConfig+0x1e8>
 8006f1e:	f640 3173 	movw	r1, #2931	; 0xb73
 8006f22:	482c      	ldr	r0, [pc, #176]	; (8006fd4 <UART_AdvFeatureConfig+0x294>)
 8006f24:	f7fa fc5b 	bl	80017de <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f46:	d122      	bne.n	8006f8e <UART_AdvFeatureConfig+0x24e>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d013      	beq.n	8006f78 <UART_AdvFeatureConfig+0x238>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f58:	d00e      	beq.n	8006f78 <UART_AdvFeatureConfig+0x238>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f62:	d009      	beq.n	8006f78 <UART_AdvFeatureConfig+0x238>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f68:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f6c:	d004      	beq.n	8006f78 <UART_AdvFeatureConfig+0x238>
 8006f6e:	f640 3178 	movw	r1, #2936	; 0xb78
 8006f72:	4818      	ldr	r0, [pc, #96]	; (8006fd4 <UART_AdvFeatureConfig+0x294>)
 8006f74:	f7fa fc33 	bl	80017de <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d018      	beq.n	8006fcc <UART_AdvFeatureConfig+0x28c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d009      	beq.n	8006fb6 <UART_AdvFeatureConfig+0x276>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fa6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006faa:	d004      	beq.n	8006fb6 <UART_AdvFeatureConfig+0x276>
 8006fac:	f44f 6138 	mov.w	r1, #2944	; 0xb80
 8006fb0:	4808      	ldr	r0, [pc, #32]	; (8006fd4 <UART_AdvFeatureConfig+0x294>)
 8006fb2:	f7fa fc14 	bl	80017de <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	605a      	str	r2, [r3, #4]
  }
}
 8006fcc:	bf00      	nop
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	08007410 	.word	0x08007410
 8006fd8:	40011000 	.word	0x40011000
 8006fdc:	40004400 	.word	0x40004400
 8006fe0:	40004800 	.word	0x40004800
 8006fe4:	40011400 	.word	0x40011400

08006fe8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af02      	add	r7, sp, #8
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006ff6:	f7fb f955 	bl	80022a4 <HAL_GetTick>
 8006ffa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0308 	and.w	r3, r3, #8
 8007006:	2b08      	cmp	r3, #8
 8007008:	d10e      	bne.n	8007028 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800700a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f82a 	bl	8007072 <UART_WaitOnFlagUntilTimeout>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d001      	beq.n	8007028 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e020      	b.n	800706a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0304 	and.w	r3, r3, #4
 8007032:	2b04      	cmp	r3, #4
 8007034:	d10e      	bne.n	8007054 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007036:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800703a:	9300      	str	r3, [sp, #0]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f814 	bl	8007072 <UART_WaitOnFlagUntilTimeout>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d001      	beq.n	8007054 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e00a      	b.n	800706a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2220      	movs	r2, #32
 8007058:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2220      	movs	r2, #32
 800705e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b084      	sub	sp, #16
 8007076:	af00      	add	r7, sp, #0
 8007078:	60f8      	str	r0, [r7, #12]
 800707a:	60b9      	str	r1, [r7, #8]
 800707c:	603b      	str	r3, [r7, #0]
 800707e:	4613      	mov	r3, r2
 8007080:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007082:	e05d      	b.n	8007140 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708a:	d059      	beq.n	8007140 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800708c:	f7fb f90a 	bl	80022a4 <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	429a      	cmp	r2, r3
 800709a:	d302      	bcc.n	80070a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d11b      	bne.n	80070da <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80070b0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689a      	ldr	r2, [r3, #8]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 0201 	bic.w	r2, r2, #1
 80070c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2220      	movs	r2, #32
 80070c6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2220      	movs	r2, #32
 80070cc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e042      	b.n	8007160 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0304 	and.w	r3, r3, #4
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d02b      	beq.n	8007140 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070f6:	d123      	bne.n	8007140 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007100:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007110:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 0201 	bic.w	r2, r2, #1
 8007120:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2220      	movs	r2, #32
 8007126:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2220      	movs	r2, #32
 800712c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2220      	movs	r2, #32
 8007132:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e00f      	b.n	8007160 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	69da      	ldr	r2, [r3, #28]
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	4013      	ands	r3, r2
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	429a      	cmp	r2, r3
 800714e:	bf0c      	ite	eq
 8007150:	2301      	moveq	r3, #1
 8007152:	2300      	movne	r3, #0
 8007154:	b2db      	uxtb	r3, r3
 8007156:	461a      	mov	r2, r3
 8007158:	79fb      	ldrb	r3, [r7, #7]
 800715a:	429a      	cmp	r2, r3
 800715c:	d092      	beq.n	8007084 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800717e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689a      	ldr	r2, [r3, #8]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 0201 	bic.w	r2, r2, #1
 800718e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2220      	movs	r2, #32
 8007194:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f7ff fa6a 	bl	80066a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071cc:	bf00      	nop
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ea:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2220      	movs	r2, #32
 80071f0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7ff fa47 	bl	800668c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071fe:	bf00      	nop
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
	...

08007208 <__libc_init_array>:
 8007208:	b570      	push	{r4, r5, r6, lr}
 800720a:	4e0d      	ldr	r6, [pc, #52]	; (8007240 <__libc_init_array+0x38>)
 800720c:	4c0d      	ldr	r4, [pc, #52]	; (8007244 <__libc_init_array+0x3c>)
 800720e:	1ba4      	subs	r4, r4, r6
 8007210:	10a4      	asrs	r4, r4, #2
 8007212:	2500      	movs	r5, #0
 8007214:	42a5      	cmp	r5, r4
 8007216:	d109      	bne.n	800722c <__libc_init_array+0x24>
 8007218:	4e0b      	ldr	r6, [pc, #44]	; (8007248 <__libc_init_array+0x40>)
 800721a:	4c0c      	ldr	r4, [pc, #48]	; (800724c <__libc_init_array+0x44>)
 800721c:	f000 f820 	bl	8007260 <_init>
 8007220:	1ba4      	subs	r4, r4, r6
 8007222:	10a4      	asrs	r4, r4, #2
 8007224:	2500      	movs	r5, #0
 8007226:	42a5      	cmp	r5, r4
 8007228:	d105      	bne.n	8007236 <__libc_init_array+0x2e>
 800722a:	bd70      	pop	{r4, r5, r6, pc}
 800722c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007230:	4798      	blx	r3
 8007232:	3501      	adds	r5, #1
 8007234:	e7ee      	b.n	8007214 <__libc_init_array+0xc>
 8007236:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800723a:	4798      	blx	r3
 800723c:	3501      	adds	r5, #1
 800723e:	e7f2      	b.n	8007226 <__libc_init_array+0x1e>
 8007240:	0800746c 	.word	0x0800746c
 8007244:	0800746c 	.word	0x0800746c
 8007248:	0800746c 	.word	0x0800746c
 800724c:	08007470 	.word	0x08007470

08007250 <memset>:
 8007250:	4402      	add	r2, r0
 8007252:	4603      	mov	r3, r0
 8007254:	4293      	cmp	r3, r2
 8007256:	d100      	bne.n	800725a <memset+0xa>
 8007258:	4770      	bx	lr
 800725a:	f803 1b01 	strb.w	r1, [r3], #1
 800725e:	e7f9      	b.n	8007254 <memset+0x4>

08007260 <_init>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	bf00      	nop
 8007264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007266:	bc08      	pop	{r3}
 8007268:	469e      	mov	lr, r3
 800726a:	4770      	bx	lr

0800726c <_fini>:
 800726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726e:	bf00      	nop
 8007270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007272:	bc08      	pop	{r3}
 8007274:	469e      	mov	lr, r3
 8007276:	4770      	bx	lr
