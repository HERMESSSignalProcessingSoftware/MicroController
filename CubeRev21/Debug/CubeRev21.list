
CubeRev21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b50  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08006d48  08006d48  00016d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f34  08006f34  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f34  08006f34  00016f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f3c  08006f3c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f3c  08006f3c  00016f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f40  08006f40  00016f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006f44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  2000000c  08006f50  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08006f50  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5fb  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002217  00000000  00000000  0002d635  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb8  00000000  00000000  0002f850  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a80  00000000  00000000  00030408  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d996  00000000  00000000  00030e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c76c  00000000  00000000  0005e81e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010fbb4  00000000  00000000  0006af8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017ab3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dd4  00000000  00000000  0017abbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006d30 	.word	0x08006d30

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08006d30 	.word	0x08006d30

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800053c:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <MX_CRC_Init+0x3c>)
 800053e:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <MX_CRC_Init+0x40>)
 8000540:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_CRC_Init+0x3c>)
 8000544:	2200      	movs	r2, #0
 8000546:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000548:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <MX_CRC_Init+0x3c>)
 800054a:	2200      	movs	r2, #0
 800054c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_CRC_Init+0x3c>)
 8000550:	2200      	movs	r2, #0
 8000552:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <MX_CRC_Init+0x3c>)
 8000556:	2200      	movs	r2, #0
 8000558:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <MX_CRC_Init+0x3c>)
 800055c:	2203      	movs	r2, #3
 800055e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <MX_CRC_Init+0x3c>)
 8000562:	f001 fed3 	bl	800230c <HAL_CRC_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800056c:	f000 fff6 	bl	800155c <Error_Handler>
  }

}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	2000002c 	.word	0x2000002c
 8000578:	40023000 	.word	0x40023000

0800057c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <HAL_CRC_MspInit+0x38>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d10b      	bne.n	80005a6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <HAL_CRC_MspInit+0x3c>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a09      	ldr	r2, [pc, #36]	; (80005b8 <HAL_CRC_MspInit+0x3c>)
 8000594:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <HAL_CRC_MspInit+0x3c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	40023000 	.word	0x40023000
 80005b8:	40023800 	.word	0x40023800

080005bc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b090      	sub	sp, #64	; 0x40
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005d2:	4bb2      	ldr	r3, [pc, #712]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4ab1      	ldr	r2, [pc, #708]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005d8:	f043 0310 	orr.w	r3, r3, #16
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4baf      	ldr	r3, [pc, #700]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0310 	and.w	r3, r3, #16
 80005e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80005e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80005ea:	4bac      	ldr	r3, [pc, #688]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4aab      	ldr	r2, [pc, #684]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4ba9      	ldr	r3, [pc, #676]	; (800089c <MX_GPIO_Init+0x2e0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4ba6      	ldr	r3, [pc, #664]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4aa5      	ldr	r2, [pc, #660]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4ba3      	ldr	r3, [pc, #652]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	623b      	str	r3, [r7, #32]
 8000618:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800061a:	4ba0      	ldr	r3, [pc, #640]	; (800089c <MX_GPIO_Init+0x2e0>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a9f      	ldr	r2, [pc, #636]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000620:	f043 0320 	orr.w	r3, r3, #32
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b9d      	ldr	r3, [pc, #628]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0320 	and.w	r3, r3, #32
 800062e:	61fb      	str	r3, [r7, #28]
 8000630:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000632:	4b9a      	ldr	r3, [pc, #616]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a99      	ldr	r2, [pc, #612]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b97      	ldr	r3, [pc, #604]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000646:	61bb      	str	r3, [r7, #24]
 8000648:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b94      	ldr	r3, [pc, #592]	; (800089c <MX_GPIO_Init+0x2e0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a93      	ldr	r2, [pc, #588]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b91      	ldr	r3, [pc, #580]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b8e      	ldr	r3, [pc, #568]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a8d      	ldr	r2, [pc, #564]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b8b      	ldr	r3, [pc, #556]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800067a:	4b88      	ldr	r3, [pc, #544]	; (800089c <MX_GPIO_Init+0x2e0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a87      	ldr	r2, [pc, #540]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000680:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b85      	ldr	r3, [pc, #532]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000692:	4b82      	ldr	r3, [pc, #520]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a81      	ldr	r2, [pc, #516]	; (800089c <MX_GPIO_Init+0x2e0>)
 8000698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b7f      	ldr	r3, [pc, #508]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006aa:	4b7c      	ldr	r3, [pc, #496]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a7b      	ldr	r2, [pc, #492]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006b0:	f043 0308 	orr.w	r3, r3, #8
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b79      	ldr	r3, [pc, #484]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0308 	and.w	r3, r3, #8
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80006c2:	4b76      	ldr	r3, [pc, #472]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a75      	ldr	r2, [pc, #468]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b73      	ldr	r3, [pc, #460]	; (800089c <MX_GPIO_Init+0x2e0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED_4_Pin|LWL_OUT_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	f244 0108 	movw	r1, #16392	; 0x4008
 80006e0:	486f      	ldr	r0, [pc, #444]	; (80008a0 <MX_GPIO_Init+0x2e4>)
 80006e2:	f002 fb33 	bl	8002d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_3_Pin|LED_2_Pin|LED_1_Pin|SD_CS_Pin
 80006e6:	2200      	movs	r2, #0
 80006e8:	f24e 4138 	movw	r1, #58424	; 0xe438
 80006ec:	486d      	ldr	r0, [pc, #436]	; (80008a4 <MX_GPIO_Init+0x2e8>)
 80006ee:	f002 fb2d 	bl	8002d4c <HAL_GPIO_WritePin>
                          |nCS_DMS1_Pin|nCS_DMS2_Pin|nCS_DMS3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, nCS_DMS4_Pin|nCS_DMS5_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2103      	movs	r1, #3
 80006f6:	486c      	ldr	r0, [pc, #432]	; (80008a8 <MX_GPIO_Init+0x2ec>)
 80006f8:	f002 fb28 	bl	8002d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCS_DMS6_GPIO_Port, nCS_DMS6_Pin, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2180      	movs	r1, #128	; 0x80
 8000700:	486a      	ldr	r0, [pc, #424]	; (80008ac <MX_GPIO_Init+0x2f0>)
 8000702:	f002 fb23 	bl	8002d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, FL1_HLD_Pin|FL1_WP_Pin|FL1_RES_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800070c:	4868      	ldr	r0, [pc, #416]	; (80008b0 <MX_GPIO_Init+0x2f4>)
 800070e:	f002 fb1d 	bl	8002d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL1_CS2_GPIO_Port, FL1_CS2_Pin, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000718:	4865      	ldr	r0, [pc, #404]	; (80008b0 <MX_GPIO_Init+0x2f4>)
 800071a:	f002 fb17 	bl	8002d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL1_CS1_GPIO_Port, FL1_CS1_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000724:	4863      	ldr	r0, [pc, #396]	; (80008b4 <MX_GPIO_Init+0x2f8>)
 8000726:	f002 fb11 	bl	8002d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, nCS_PT3_Pin|FL2_HLD_Pin|FL2_RES_Pin|FL2_WP_Pin
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 4167 	mov.w	r1, #59136	; 0xe700
 8000730:	4861      	ldr	r0, [pc, #388]	; (80008b8 <MX_GPIO_Init+0x2fc>)
 8000732:	f002 fb0b 	bl	8002d4c <HAL_GPIO_WritePin>
                          |nCS_PT2_Pin|nCS_PT1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FL2_CS2_Pin|FL2_CS1_Pin, GPIO_PIN_SET);
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800073c:	485e      	ldr	r0, [pc, #376]	; (80008b8 <MX_GPIO_Init+0x2fc>)
 800073e:	f002 fb05 	bl	8002d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
 8000742:	f64f 7318 	movw	r3, #65304	; 0xff18
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000748:	2303      	movs	r3, #3
 800074a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000754:	4619      	mov	r1, r3
 8000756:	4855      	ldr	r0, [pc, #340]	; (80008ac <MX_GPIO_Init+0x2f0>)
 8000758:	f001 ff4a 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LWL_IN_Pin;
 800075c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000760:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000762:	2300      	movs	r3, #0
 8000764:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LWL_IN_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800076e:	4619      	mov	r1, r3
 8000770:	484b      	ldr	r0, [pc, #300]	; (80008a0 <MX_GPIO_Init+0x2e4>)
 8000772:	f001 ff3d 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000776:	f24e 33ff 	movw	r3, #58367	; 0xe3ff
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800077c:	2303      	movs	r3, #3
 800077e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000784:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000788:	4619      	mov	r1, r3
 800078a:	484c      	ldr	r0, [pc, #304]	; (80008bc <MX_GPIO_Init+0x300>)
 800078c:	f001 ff30 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI10 PI11 PI12 PI13
                           PI15 PI0 PI1 PI2
                           PI4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000790:	f64b 4317 	movw	r3, #48151	; 0xbc17
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000796:	2303      	movs	r3, #3
 8000798:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800079e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007a2:	4619      	mov	r1, r3
 80007a4:	483e      	ldr	r0, [pc, #248]	; (80008a0 <MX_GPIO_Init+0x2e4>)
 80007a6:	f001 ff23 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF6
                           PF11 PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 80007aa:	f641 0347 	movw	r3, #6215	; 0x1847
 80007ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b0:	2303      	movs	r3, #3
 80007b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007bc:	4619      	mov	r1, r3
 80007be:	4839      	ldr	r0, [pc, #228]	; (80008a4 <MX_GPIO_Init+0x2e8>)
 80007c0:	f001 ff16 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LED_4_Pin|LWL_OUT_Pin;
 80007c4:	f244 0308 	movw	r3, #16392	; 0x4008
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80007d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007da:	4619      	mov	r1, r3
 80007dc:	4830      	ldr	r0, [pc, #192]	; (80008a0 <MX_GPIO_Init+0x2e4>)
 80007de:	f001 ff07 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LED_1_Pin|SD_CS_Pin
 80007e2:	f24e 4338 	movw	r3, #58424	; 0xe438
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |nCS_DMS1_Pin|nCS_DMS2_Pin|nCS_DMS3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f8:	4619      	mov	r1, r3
 80007fa:	482a      	ldr	r0, [pc, #168]	; (80008a4 <MX_GPIO_Init+0x2e8>)
 80007fc:	f001 fef8 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH2 PH3
                           PH4 PH5 PH6 PH7
                           PH8 PH13 PH14 PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000800:	f24e 13ff 	movw	r3, #57855	; 0xe1ff
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000806:	2303      	movs	r3, #3
 8000808:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800080e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000812:	4619      	mov	r1, r3
 8000814:	4826      	ldr	r0, [pc, #152]	; (80008b0 <MX_GPIO_Init+0x2f4>)
 8000816:	f001 feeb 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800081a:	231e      	movs	r3, #30
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800081e:	2303      	movs	r3, #3
 8000820:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800082a:	4619      	mov	r1, r3
 800082c:	4824      	ldr	r0, [pc, #144]	; (80008c0 <MX_GPIO_Init+0x304>)
 800082e:	f001 fedf 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000832:	f640 73e3 	movw	r3, #4067	; 0xfe3
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000838:	2303      	movs	r3, #3
 800083a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000840:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000844:	4619      	mov	r1, r3
 8000846:	481b      	ldr	r0, [pc, #108]	; (80008b4 <MX_GPIO_Init+0x2f8>)
 8000848:	f001 fed2 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ0 PJ1 PJ2 PJ3
                           PJ4 PJ5 PJ12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800084c:	f241 033f 	movw	r3, #4159	; 0x103f
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000852:	2303      	movs	r3, #3
 8000854:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800085a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800085e:	4619      	mov	r1, r3
 8000860:	4818      	ldr	r0, [pc, #96]	; (80008c4 <MX_GPIO_Init+0x308>)
 8000862:	f001 fec5 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = nCS_DMS4_Pin|nCS_DMS5_Pin;
 8000866:	2303      	movs	r3, #3
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800087a:	4619      	mov	r1, r3
 800087c:	480a      	ldr	r0, [pc, #40]	; (80008a8 <MX_GPIO_Init+0x2ec>)
 800087e:	f001 feb7 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nCS_DMS6_Pin;
 8000882:	2380      	movs	r3, #128	; 0x80
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(nCS_DMS6_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000896:	4619      	mov	r1, r3
 8000898:	e016      	b.n	80008c8 <MX_GPIO_Init+0x30c>
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	40022000 	.word	0x40022000
 80008a4:	40021400 	.word	0x40021400
 80008a8:	40021800 	.word	0x40021800
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40021c00 	.word	0x40021c00
 80008b4:	40020400 	.word	0x40020400
 80008b8:	40020c00 	.word	0x40020c00
 80008bc:	40020800 	.word	0x40020800
 80008c0:	40020000 	.word	0x40020000
 80008c4:	40022400 	.word	0x40022400
 80008c8:	485d      	ldr	r0, [pc, #372]	; (8000a40 <MX_GPIO_Init+0x484>)
 80008ca:	f001 fe91 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = FL1_HLD_Pin|FL1_WP_Pin|FL1_RES_Pin|FL1_CS2_Pin;
 80008ce:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e4:	4619      	mov	r1, r3
 80008e6:	4857      	ldr	r0, [pc, #348]	; (8000a44 <MX_GPIO_Init+0x488>)
 80008e8:	f001 fe82 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FL1_CS1_Pin;
 80008ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FL1_CS1_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000902:	4619      	mov	r1, r3
 8000904:	4850      	ldr	r0, [pc, #320]	; (8000a48 <MX_GPIO_Init+0x48c>)
 8000906:	f001 fe73 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = nCS_PT3_Pin|FL2_HLD_Pin|FL2_RES_Pin|FL2_CS2_Pin
 800090a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FL2_CS1_Pin|FL2_WP_Pin|nCS_PT2_Pin|nCS_PT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800091c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000920:	4619      	mov	r1, r3
 8000922:	484a      	ldr	r0, [pc, #296]	; (8000a4c <MX_GPIO_Init+0x490>)
 8000924:	f001 fe64 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MS_SEL_Pin;
 8000928:	2304      	movs	r3, #4
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MS_SEL_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000938:	4619      	mov	r1, r3
 800093a:	4845      	ldr	r0, [pc, #276]	; (8000a50 <MX_GPIO_Init+0x494>)
 800093c:	f001 fe58 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG5 PG6 PG7
                           PG8 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000940:	f64f 73e8 	movw	r3, #65512	; 0xffe8
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000946:	2303      	movs	r3, #3
 8000948:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800094e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000952:	4619      	mov	r1, r3
 8000954:	483e      	ldr	r0, [pc, #248]	; (8000a50 <MX_GPIO_Init+0x494>)
 8000956:	f001 fe4b 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDRDY_DMS1_Pin;
 800095a:	2310      	movs	r3, #16
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095e:	4b3d      	ldr	r3, [pc, #244]	; (8000a54 <MX_GPIO_Init+0x498>)
 8000960:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(nDRDY_DMS1_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800096a:	4619      	mov	r1, r3
 800096c:	4838      	ldr	r0, [pc, #224]	; (8000a50 <MX_GPIO_Init+0x494>)
 800096e:	f001 fe3f 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = nDRDY_DMS2_Pin|nDRDY_DMS3_Pin|nDRDY_DMS5_Pin|nDRDY_DMS6_Pin;
 8000972:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000978:	4b36      	ldr	r3, [pc, #216]	; (8000a54 <MX_GPIO_Init+0x498>)
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000984:	4619      	mov	r1, r3
 8000986:	4834      	ldr	r0, [pc, #208]	; (8000a58 <MX_GPIO_Init+0x49c>)
 8000988:	f001 fe32 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDRDY_DMS4_Pin;
 800098c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000992:	2300      	movs	r3, #0
 8000994:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(nDRDY_DMS4_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800099e:	4619      	mov	r1, r3
 80009a0:	482d      	ldr	r0, [pc, #180]	; (8000a58 <MX_GPIO_Init+0x49c>)
 80009a2:	f001 fe25 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80009a6:	23fb      	movs	r3, #251	; 0xfb
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009aa:	2303      	movs	r3, #3
 80009ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009b6:	4619      	mov	r1, r3
 80009b8:	4824      	ldr	r0, [pc, #144]	; (8000a4c <MX_GPIO_Init+0x490>)
 80009ba:	f001 fe19 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = nDRDY_PT3_Pin|nDRDY_PT2_Pin|nDRDY_PT1_Pin;
 80009be:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c4:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <MX_GPIO_Init+0x498>)
 80009c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80009cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d0:	4619      	mov	r1, r3
 80009d2:	4822      	ldr	r0, [pc, #136]	; (8000a5c <MX_GPIO_Init+0x4a0>)
 80009d4:	f001 fe0c 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK3 PK4 PK5 PK6
                           PK7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80009d8:	23f8      	movs	r3, #248	; 0xf8
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009dc:	2303      	movs	r3, #3
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80009e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e8:	4619      	mov	r1, r3
 80009ea:	481d      	ldr	r0, [pc, #116]	; (8000a60 <MX_GPIO_Init+0x4a4>)
 80009ec:	f001 fe00 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SODS_OPT_Pin|SOE_OPT_Pin|LO_OPT_Pin;
 80009f0:	23e0      	movs	r3, #224	; 0xe0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_GPIO_Init+0x498>)
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a00:	4619      	mov	r1, r3
 8000a02:	4818      	ldr	r0, [pc, #96]	; (8000a64 <MX_GPIO_Init+0x4a8>)
 8000a04:	f001 fdf4 	bl	80025f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2105      	movs	r1, #5
 8000a0c:	200a      	movs	r0, #10
 8000a0e:	f001 fc2d 	bl	800226c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000a12:	200a      	movs	r0, #10
 8000a14:	f001 fc56 	bl	80022c4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2105      	movs	r1, #5
 8000a1c:	2017      	movs	r0, #23
 8000a1e:	f001 fc25 	bl	800226c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a22:	2017      	movs	r0, #23
 8000a24:	f001 fc4e 	bl	80022c4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2105      	movs	r1, #5
 8000a2c:	2028      	movs	r0, #40	; 0x28
 8000a2e:	f001 fc1d 	bl	800226c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a32:	2028      	movs	r0, #40	; 0x28
 8000a34:	f001 fc46 	bl	80022c4 <HAL_NVIC_EnableIRQ>

}
 8000a38:	bf00      	nop
 8000a3a:	3740      	adds	r7, #64	; 0x40
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40021c00 	.word	0x40021c00
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	40021800 	.word	0x40021800
 8000a54:	10110000 	.word	0x10110000
 8000a58:	40020000 	.word	0x40020000
 8000a5c:	40022400 	.word	0x40022400
 8000a60:	40022800 	.word	0x40022800
 8000a64:	40022000 	.word	0x40022000

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6c:	f001 fa8f 	bl	8001f8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a70:	f000 f83c 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a74:	f7ff fda2 	bl	80005bc <MX_GPIO_Init>
  MX_SPI2_Init();
 8000a78:	f000 fd82 	bl	8001580 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000a7c:	f000 fdbe 	bl	80015fc <MX_SPI3_Init>
  MX_SPI6_Init();
 8000a80:	f000 fe76 	bl	8001770 <MX_SPI6_Init>
  MX_UART4_Init();
 8000a84:	f001 f8cc 	bl	8001c20 <MX_UART4_Init>
  MX_UART8_Init();
 8000a88:	f001 f92a 	bl	8001ce0 <MX_UART8_Init>
  MX_UART5_Init();
 8000a8c:	f001 f8f8 	bl	8001c80 <MX_UART5_Init>
  MX_CRC_Init();
 8000a90:	f7ff fd52 	bl	8000538 <MX_CRC_Init>
  MX_SPI4_Init();
 8000a94:	f000 fdf0 	bl	8001678 <MX_SPI4_Init>
  MX_SPI5_Init();
 8000a98:	f000 fe2c 	bl	80016f4 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);  //clear all LEDs
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2120      	movs	r1, #32
 8000aa0:	480f      	ldr	r0, [pc, #60]	; (8000ae0 <main+0x78>)
 8000aa2:	f002 f953 	bl	8002d4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2110      	movs	r1, #16
 8000aaa:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <main+0x78>)
 8000aac:	f002 f94e 	bl	8002d4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2108      	movs	r1, #8
 8000ab4:	480a      	ldr	r0, [pc, #40]	; (8000ae0 <main+0x78>)
 8000ab6:	f002 f949 	bl	8002d4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac0:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <main+0x7c>)
 8000ac2:	f002 f943 	bl	8002d4c <HAL_GPIO_WritePin>

  if (!HAL_GPIO_ReadPin(MS_SEL_GPIO_Port, MS_SEL_Pin)) {
 8000ac6:	2104      	movs	r1, #4
 8000ac8:	4807      	ldr	r0, [pc, #28]	; (8000ae8 <main+0x80>)
 8000aca:	f002 f91f 	bl	8002d0c <HAL_GPIO_ReadPin>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d102      	bne.n	8000ada <main+0x72>
    main_master();
 8000ad4:	f000 f89e 	bl	8000c14 <main_master>
 8000ad8:	e001      	b.n	8000ade <main+0x76>
  } else { //Slave loop
    main_slave();
 8000ada:	f000 f917 	bl	8000d0c <main_slave>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <main+0x76>
 8000ae0:	40021400 	.word	0x40021400
 8000ae4:	40022000 	.word	0x40022000
 8000ae8:	40021800 	.word	0x40021800

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b0b8      	sub	sp, #224	; 0xe0
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000af6:	2234      	movs	r2, #52	; 0x34
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f006 f910 	bl	8006d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b10:	f107 0308 	add.w	r3, r7, #8
 8000b14:	2290      	movs	r2, #144	; 0x90
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f006 f901 	bl	8006d20 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	4b3b      	ldr	r3, [pc, #236]	; (8000c0c <SystemClock_Config+0x120>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a3a      	ldr	r2, [pc, #232]	; (8000c0c <SystemClock_Config+0x120>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b38      	ldr	r3, [pc, #224]	; (8000c0c <SystemClock_Config+0x120>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b36:	4b36      	ldr	r3, [pc, #216]	; (8000c10 <SystemClock_Config+0x124>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a35      	ldr	r2, [pc, #212]	; (8000c10 <SystemClock_Config+0x124>)
 8000b3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b40:	6013      	str	r3, [r2, #0]
 8000b42:	4b33      	ldr	r3, [pc, #204]	; (8000c10 <SystemClock_Config+0x124>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b54:	2301      	movs	r3, #1
 8000b56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b5a:	2310      	movs	r3, #16
 8000b5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b60:	2302      	movs	r3, #2
 8000b62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b72:	23c0      	movs	r3, #192	; 0xc0
 8000b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b84:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f002 f9a1 	bl	8002ed0 <HAL_RCC_OscConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000b94:	f000 fce2 	bl	800155c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b98:	f002 f94a 	bl	8002e30 <HAL_PWREx_EnableOverDrive>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000ba2:	f000 fcdb 	bl	800155c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba6:	230f      	movs	r3, #15
 8000ba8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bac:	2302      	movs	r3, #2
 8000bae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bb8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000bc0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000bc8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000bcc:	2106      	movs	r1, #6
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f002 fcee 	bl	80035b0 <HAL_RCC_ClockConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000bda:	f000 fcbf 	bl	800155c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART5
 8000bde:	f44f 5318 	mov.w	r3, #9728	; 0x2600
 8000be2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART8;
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f002 ff69 	bl	8003acc <HAL_RCCEx_PeriphCLKConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000c00:	f000 fcac 	bl	800155c <Error_Handler>
  }
}
 8000c04:	bf00      	nop
 8000c06:	37e0      	adds	r7, #224	; 0xe0
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40007000 	.word	0x40007000

08000c14 <main_master>:

/* USER CODE BEGIN 4 */
void main_master(void) {
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);  //ON = MS set to Master
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	4838      	ldr	r0, [pc, #224]	; (8000d00 <main_master+0xec>)
 8000c20:	f002 f894 	bl	8002d4c <HAL_GPIO_WritePin>
  //uint8_t bufferOff[3] = {0x01, 0x03, 0x05};
  //uint8_t bufferOn[3] = {0x02, 0x04, 0x06};

  uint32_t lastInit = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
  uint32_t lastBlinky = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60bb      	str	r3, [r7, #8]

  uint8_t readSensor = 8; //DMS: 0-5, PT100: 6-8
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	70fb      	strb	r3, [r7, #3]

  for(int sensors = 0; sensors <=8 ; sensors++){
 8000c30:	2300      	movs	r3, #0
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	e016      	b.n	8000c64 <main_master+0x50>
	  if(sensors <= 5)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b05      	cmp	r3, #5
 8000c3a:	dc08      	bgt.n	8000c4e <main_master+0x3a>
		  adc_scan_start(sensors, 2000, 128, 0);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	b258      	sxtb	r0, r3
 8000c40:	2300      	movs	r3, #0
 8000c42:	2280      	movs	r2, #128	; 0x80
 8000c44:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000c48:	f000 f912 	bl	8000e70 <adc_scan_start>
 8000c4c:	e007      	b.n	8000c5e <main_master+0x4a>
	  else
		  adc_scan_start(sensors, 2000, 1, 0);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	b258      	sxtb	r0, r3
 8000c52:	2300      	movs	r3, #0
 8000c54:	2201      	movs	r2, #1
 8000c56:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000c5a:	f000 f909 	bl	8000e70 <adc_scan_start>
  for(int sensors = 0; sensors <=8 ; sensors++){
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3301      	adds	r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b08      	cmp	r3, #8
 8000c68:	dde5      	ble.n	8000c36 <main_master+0x22>
  }

  HAL_Delay(1000);
 8000c6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c6e:	f001 f9eb 	bl	8002048 <HAL_Delay>

  uint8_t softgain = 1;
 8000c72:	2301      	movs	r3, #1
 8000c74:	70bb      	strb	r3, [r7, #2]
  uint8_t offset = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	707b      	strb	r3, [r7, #1]
  uint8_t dout = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	703b      	strb	r3, [r7, #0]
  HAL_UART_Transmit(&huart4, (uint8_t *)&dout, sizeof(dout), HAL_MAX_DELAY);
 8000c7e:	4639      	mov	r1, r7
 8000c80:	f04f 33ff 	mov.w	r3, #4294967295
 8000c84:	2201      	movs	r2, #1
 8000c86:	481f      	ldr	r0, [pc, #124]	; (8000d04 <main_master+0xf0>)
 8000c88:	f004 ffc4 	bl	8005c14 <HAL_UART_Transmit>

  while (1) { //Master loop


	  data = adc_scan(readSensor, 0x01);
 8000c8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c90:	2101      	movs	r1, #1
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 f8da 	bl	8000e4c <adc_scan>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <main_master+0xf4>)
 8000c9e:	801a      	strh	r2, [r3, #0]
	  dout = data * softgain + offset;
 8000ca0:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <main_master+0xf4>)
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	78ba      	ldrb	r2, [r7, #2]
 8000ca8:	fb12 f303 	smulbb	r3, r2, r3
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	787b      	ldrb	r3, [r7, #1]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	703b      	strb	r3, [r7, #0]
	  write_DAPI(&dout);
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 fc3d 	bl	8001538 <write_DAPI>
	  write_EXP(&dout);
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 fc27 	bl	8001514 <write_EXP>




	  if(lastInit + 5000 < HAL_GetTick()){
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f241 3488 	movw	r4, #5000	; 0x1388
 8000ccc:	441c      	add	r4, r3
 8000cce:	f001 f9af 	bl	8002030 <HAL_GetTick>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	d202      	bcs.n	8000cde <main_master+0xca>
		  lastInit = HAL_GetTick();
 8000cd8:	f001 f9aa 	bl	8002030 <HAL_GetTick>
 8000cdc:	60f8      	str	r0, [r7, #12]
		    }
		   */

	   }

	  if(lastBlinky + 1000 < HAL_GetTick()){
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	f503 747a 	add.w	r4, r3, #1000	; 0x3e8
 8000ce4:	f001 f9a4 	bl	8002030 <HAL_GetTick>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	429c      	cmp	r4, r3
 8000cec:	d2ce      	bcs.n	8000c8c <main_master+0x78>
	  		  lastBlinky = HAL_GetTick();
 8000cee:	f001 f99f 	bl	8002030 <HAL_GetTick>
 8000cf2:	60b8      	str	r0, [r7, #8]
	  		  HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8000cf4:	2110      	movs	r1, #16
 8000cf6:	4802      	ldr	r0, [pc, #8]	; (8000d00 <main_master+0xec>)
 8000cf8:	f002 f854 	bl	8002da4 <HAL_GPIO_TogglePin>
	  data = adc_scan(readSensor, 0x01);
 8000cfc:	e7c6      	b.n	8000c8c <main_master+0x78>
 8000cfe:	bf00      	nop
 8000d00:	40021400 	.word	0x40021400
 8000d04:	20000344 	.word	0x20000344
 8000d08:	20000028 	.word	0x20000028

08000d0c <main_slave>:
    HAL_Delay(100);
    */
  }
}

void main_slave(void) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
  uint8_t buffer[1] = {0x00};
 8000d12:	2300      	movs	r3, #0
 8000d14:	713b      	strb	r3, [r7, #4]
  while (1) {
    HAL_UART_Receive(&huart5, buffer, sizeof(buffer), 5);
 8000d16:	1d39      	adds	r1, r7, #4
 8000d18:	2305      	movs	r3, #5
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	481e      	ldr	r0, [pc, #120]	; (8000d98 <main_slave+0x8c>)
 8000d1e:	f005 f80a 	bl	8005d36 <HAL_UART_Receive>
    if (buffer[0] == 0x01) {
 8000d22:	793b      	ldrb	r3, [r7, #4]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d105      	bne.n	8000d34 <main_slave+0x28>
      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2110      	movs	r1, #16
 8000d2c:	481b      	ldr	r0, [pc, #108]	; (8000d9c <main_slave+0x90>)
 8000d2e:	f002 f80d 	bl	8002d4c <HAL_GPIO_WritePin>
 8000d32:	e02d      	b.n	8000d90 <main_slave+0x84>
    } else if (buffer[0] == 0x02) {
 8000d34:	793b      	ldrb	r3, [r7, #4]
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d105      	bne.n	8000d46 <main_slave+0x3a>
      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2110      	movs	r1, #16
 8000d3e:	4817      	ldr	r0, [pc, #92]	; (8000d9c <main_slave+0x90>)
 8000d40:	f002 f804 	bl	8002d4c <HAL_GPIO_WritePin>
 8000d44:	e024      	b.n	8000d90 <main_slave+0x84>
    } else if (buffer[0] == 0x03) {
 8000d46:	793b      	ldrb	r3, [r7, #4]
 8000d48:	2b03      	cmp	r3, #3
 8000d4a:	d105      	bne.n	8000d58 <main_slave+0x4c>
      HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2108      	movs	r1, #8
 8000d50:	4812      	ldr	r0, [pc, #72]	; (8000d9c <main_slave+0x90>)
 8000d52:	f001 fffb 	bl	8002d4c <HAL_GPIO_WritePin>
 8000d56:	e01b      	b.n	8000d90 <main_slave+0x84>
    } else if (buffer[0] == 0x04) {
 8000d58:	793b      	ldrb	r3, [r7, #4]
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	d105      	bne.n	8000d6a <main_slave+0x5e>
      HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2108      	movs	r1, #8
 8000d62:	480e      	ldr	r0, [pc, #56]	; (8000d9c <main_slave+0x90>)
 8000d64:	f001 fff2 	bl	8002d4c <HAL_GPIO_WritePin>
 8000d68:	e012      	b.n	8000d90 <main_slave+0x84>
    }  else if (buffer[0] == 0x05) {
 8000d6a:	793b      	ldrb	r3, [r7, #4]
 8000d6c:	2b05      	cmp	r3, #5
 8000d6e:	d106      	bne.n	8000d7e <main_slave+0x72>
      HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d76:	480a      	ldr	r0, [pc, #40]	; (8000da0 <main_slave+0x94>)
 8000d78:	f001 ffe8 	bl	8002d4c <HAL_GPIO_WritePin>
 8000d7c:	e008      	b.n	8000d90 <main_slave+0x84>
    } else if (buffer[0] == 0x06) {
 8000d7e:	793b      	ldrb	r3, [r7, #4]
 8000d80:	2b06      	cmp	r3, #6
 8000d82:	d105      	bne.n	8000d90 <main_slave+0x84>
      HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <main_slave+0x94>)
 8000d8c:	f001 ffde 	bl	8002d4c <HAL_GPIO_WritePin>
    }
    buffer[1] = 0x00;
 8000d90:	2300      	movs	r3, #0
 8000d92:	717b      	strb	r3, [r7, #5]
    HAL_UART_Receive(&huart5, buffer, sizeof(buffer), 5);
 8000d94:	e7bf      	b.n	8000d16 <main_slave+0xa>
 8000d96:	bf00      	nop
 8000d98:	20000244 	.word	0x20000244
 8000d9c:	40021400 	.word	0x40021400
 8000da0:	40022000 	.word	0x40022000

08000da4 <cs_enable>:
  }
}

int cs_enable(int8_t id){
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(port_from_id(id), pin_from_id(id), GPIO_PIN_RESET);
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 fa3a 	bl	800122c <port_from_id>
 8000db8:	4604      	mov	r4, r0
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 f9f6 	bl	80011b0 <pin_from_id>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4620      	mov	r0, r4
 8000dcc:	f001 ffbe 	bl	8002d4c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f001 f939 	bl	8002048 <HAL_Delay>
	return 0;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd90      	pop	{r4, r7, pc}

08000de0 <cs_disable>:

int cs_disable(int8_t id){
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(port_from_id(id), pin_from_id(id), GPIO_PIN_SET);
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 fa1c 	bl	800122c <port_from_id>
 8000df4:	4604      	mov	r4, r0
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 f9d8 	bl	80011b0 <pin_from_id>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2201      	movs	r2, #1
 8000e04:	4619      	mov	r1, r3
 8000e06:	4620      	mov	r0, r4
 8000e08:	f001 ffa0 	bl	8002d4c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	f001 f91b 	bl	8002048 <HAL_Delay>
	return 0;
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd90      	pop	{r4, r7, pc}

08000e1c <wr_spi>:

int wr_spi(int8_t id, uint8_t cmd){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	460a      	mov	r2, r1
 8000e26:	71fb      	strb	r3, [r7, #7]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Transmit(get_hspi_from_id(id), &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 fab9 	bl	80013a8 <get_hspi_from_id>
 8000e36:	1db9      	adds	r1, r7, #6
 8000e38:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f004 f859 	bl	8004ef4 <HAL_SPI_Transmit>
	return 0;
 8000e42:	2300      	movs	r3, #0
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <adc_scan>:

uint16_t adc_scan(int8_t id, uint8_t chn){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	460a      	mov	r2, r1
 8000e56:	71fb      	strb	r3, [r7, #7]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	71bb      	strb	r3, [r7, #6]
	return rd_data(id);
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 f947 	bl	80010f4 <rd_data>
 8000e66:	4603      	mov	r3, r0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <adc_scan_start>:

int16_t adc_scan_start(int8_t id, uint_least16_t drate, uint_least8_t gain, uint_least16_t current){
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4604      	mov	r4, r0
 8000e78:	4608      	mov	r0, r1
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4623      	mov	r3, r4
 8000e80:	71fb      	strb	r3, [r7, #7]
 8000e82:	4603      	mov	r3, r0
 8000e84:	80bb      	strh	r3, [r7, #4]
 8000e86:	460b      	mov	r3, r1
 8000e88:	71bb      	strb	r3, [r7, #6]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	807b      	strh	r3, [r7, #2]
	int16_t r = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	81fb      	strh	r3, [r7, #14]
	switch(drate)
 8000e92:	88bb      	ldrh	r3, [r7, #4]
 8000e94:	2ba0      	cmp	r3, #160	; 0xa0
 8000e96:	d02d      	beq.n	8000ef4 <adc_scan_start+0x84>
 8000e98:	2ba0      	cmp	r3, #160	; 0xa0
 8000e9a:	dc0b      	bgt.n	8000eb4 <adc_scan_start+0x44>
 8000e9c:	2b0a      	cmp	r3, #10
 8000e9e:	d01d      	beq.n	8000edc <adc_scan_start+0x6c>
 8000ea0:	2b0a      	cmp	r3, #10
 8000ea2:	dc02      	bgt.n	8000eaa <adc_scan_start+0x3a>
 8000ea4:	2b05      	cmp	r3, #5
 8000ea6:	d016      	beq.n	8000ed6 <adc_scan_start+0x66>
 8000ea8:	e01e      	b.n	8000ee8 <adc_scan_start+0x78>
 8000eaa:	2b14      	cmp	r3, #20
 8000eac:	d019      	beq.n	8000ee2 <adc_scan_start+0x72>
 8000eae:	2b50      	cmp	r3, #80	; 0x50
 8000eb0:	d01d      	beq.n	8000eee <adc_scan_start+0x7e>
 8000eb2:	e019      	b.n	8000ee8 <adc_scan_start+0x78>
 8000eb4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000eb8:	d022      	beq.n	8000f00 <adc_scan_start+0x90>
 8000eba:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000ebe:	dc03      	bgt.n	8000ec8 <adc_scan_start+0x58>
 8000ec0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000ec4:	d019      	beq.n	8000efa <adc_scan_start+0x8a>
 8000ec6:	e00f      	b.n	8000ee8 <adc_scan_start+0x78>
 8000ec8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ecc:	d01b      	beq.n	8000f06 <adc_scan_start+0x96>
 8000ece:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ed2:	d01b      	beq.n	8000f0c <adc_scan_start+0x9c>
 8000ed4:	e008      	b.n	8000ee8 <adc_scan_start+0x78>
	  {
	    case    5: drate = SYS0_DOR5;    break;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	80bb      	strh	r3, [r7, #4]
 8000eda:	e01a      	b.n	8000f12 <adc_scan_start+0xa2>
	    case   10: drate = SYS0_DOR10;   break;
 8000edc:	2301      	movs	r3, #1
 8000ede:	80bb      	strh	r3, [r7, #4]
 8000ee0:	e017      	b.n	8000f12 <adc_scan_start+0xa2>
	    case   20: drate = SYS0_DOR20;   break;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	80bb      	strh	r3, [r7, #4]
 8000ee6:	e014      	b.n	8000f12 <adc_scan_start+0xa2>
	    default:
	    case   40: drate = SYS0_DOR40;   break;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	80bb      	strh	r3, [r7, #4]
 8000eec:	e011      	b.n	8000f12 <adc_scan_start+0xa2>
	    case   80: drate = SYS0_DOR80;   break;
 8000eee:	2304      	movs	r3, #4
 8000ef0:	80bb      	strh	r3, [r7, #4]
 8000ef2:	e00e      	b.n	8000f12 <adc_scan_start+0xa2>
	    case  160: drate = SYS0_DOR160;  break;
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	80bb      	strh	r3, [r7, #4]
 8000ef8:	e00b      	b.n	8000f12 <adc_scan_start+0xa2>
	    case  320: drate = SYS0_DOR320;  break;
 8000efa:	2306      	movs	r3, #6
 8000efc:	80bb      	strh	r3, [r7, #4]
 8000efe:	e008      	b.n	8000f12 <adc_scan_start+0xa2>
	    case  640: drate = SYS0_DOR640;  break;
 8000f00:	2307      	movs	r3, #7
 8000f02:	80bb      	strh	r3, [r7, #4]
 8000f04:	e005      	b.n	8000f12 <adc_scan_start+0xa2>
	    case 1000: drate = SYS0_DOR1000; break;
 8000f06:	2308      	movs	r3, #8
 8000f08:	80bb      	strh	r3, [r7, #4]
 8000f0a:	e002      	b.n	8000f12 <adc_scan_start+0xa2>
	    case 2000: drate = SYS0_DOR2000; break;
 8000f0c:	2309      	movs	r3, #9
 8000f0e:	80bb      	strh	r3, [r7, #4]
 8000f10:	bf00      	nop
	  }

	  switch(gain)
 8000f12:	79bb      	ldrb	r3, [r7, #6]
 8000f14:	2b10      	cmp	r3, #16
 8000f16:	d01a      	beq.n	8000f4e <adc_scan_start+0xde>
 8000f18:	2b10      	cmp	r3, #16
 8000f1a:	dc06      	bgt.n	8000f2a <adc_scan_start+0xba>
 8000f1c:	2b04      	cmp	r3, #4
 8000f1e:	d010      	beq.n	8000f42 <adc_scan_start+0xd2>
 8000f20:	2b08      	cmp	r3, #8
 8000f22:	d011      	beq.n	8000f48 <adc_scan_start+0xd8>
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d009      	beq.n	8000f3c <adc_scan_start+0xcc>
 8000f28:	e005      	b.n	8000f36 <adc_scan_start+0xc6>
 8000f2a:	2b40      	cmp	r3, #64	; 0x40
 8000f2c:	d015      	beq.n	8000f5a <adc_scan_start+0xea>
 8000f2e:	2b80      	cmp	r3, #128	; 0x80
 8000f30:	d016      	beq.n	8000f60 <adc_scan_start+0xf0>
 8000f32:	2b20      	cmp	r3, #32
 8000f34:	d00e      	beq.n	8000f54 <adc_scan_start+0xe4>
	  {
	    default:
	    case   1: gain = SYS0_PGA1;   break;
 8000f36:	2300      	movs	r3, #0
 8000f38:	71bb      	strb	r3, [r7, #6]
 8000f3a:	e014      	b.n	8000f66 <adc_scan_start+0xf6>
	    case   2: gain = SYS0_PGA2;   break;
 8000f3c:	2310      	movs	r3, #16
 8000f3e:	71bb      	strb	r3, [r7, #6]
 8000f40:	e011      	b.n	8000f66 <adc_scan_start+0xf6>
	    case   4: gain = SYS0_PGA4;   break;
 8000f42:	2320      	movs	r3, #32
 8000f44:	71bb      	strb	r3, [r7, #6]
 8000f46:	e00e      	b.n	8000f66 <adc_scan_start+0xf6>
	    case   8: gain = SYS0_PGA8;   break;
 8000f48:	2330      	movs	r3, #48	; 0x30
 8000f4a:	71bb      	strb	r3, [r7, #6]
 8000f4c:	e00b      	b.n	8000f66 <adc_scan_start+0xf6>
	    case  16: gain = SYS0_PGA16;  break;
 8000f4e:	2340      	movs	r3, #64	; 0x40
 8000f50:	71bb      	strb	r3, [r7, #6]
 8000f52:	e008      	b.n	8000f66 <adc_scan_start+0xf6>
	    case  32: gain = SYS0_PGA32;  break;
 8000f54:	2350      	movs	r3, #80	; 0x50
 8000f56:	71bb      	strb	r3, [r7, #6]
 8000f58:	e005      	b.n	8000f66 <adc_scan_start+0xf6>
	    case  64: gain = SYS0_PGA64;  break;
 8000f5a:	2360      	movs	r3, #96	; 0x60
 8000f5c:	71bb      	strb	r3, [r7, #6]
 8000f5e:	e002      	b.n	8000f66 <adc_scan_start+0xf6>
	    case 128: gain = SYS0_PGA128; break;
 8000f60:	2370      	movs	r3, #112	; 0x70
 8000f62:	71bb      	strb	r3, [r7, #6]
 8000f64:	bf00      	nop
	  }

	  switch(current)
 8000f66:	887b      	ldrh	r3, [r7, #2]
 8000f68:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f6c:	d020      	beq.n	8000fb0 <adc_scan_start+0x140>
 8000f6e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f72:	dc06      	bgt.n	8000f82 <adc_scan_start+0x112>
 8000f74:	2b64      	cmp	r3, #100	; 0x64
 8000f76:	d015      	beq.n	8000fa4 <adc_scan_start+0x134>
 8000f78:	2bfa      	cmp	r3, #250	; 0xfa
 8000f7a:	d016      	beq.n	8000faa <adc_scan_start+0x13a>
 8000f7c:	2b32      	cmp	r3, #50	; 0x32
 8000f7e:	d00e      	beq.n	8000f9e <adc_scan_start+0x12e>
 8000f80:	e00a      	b.n	8000f98 <adc_scan_start+0x128>
 8000f82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f86:	d019      	beq.n	8000fbc <adc_scan_start+0x14c>
 8000f88:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d018      	beq.n	8000fc2 <adc_scan_start+0x152>
 8000f90:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d00e      	beq.n	8000fb6 <adc_scan_start+0x146>
	  {
	    default:
	    case    0: current = IDAC0_MAGOFF;    break;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	807b      	strh	r3, [r7, #2]
 8000f9c:	e014      	b.n	8000fc8 <adc_scan_start+0x158>
	    case   50: current = IDAC0_MAG50UA;   break;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	807b      	strh	r3, [r7, #2]
 8000fa2:	e011      	b.n	8000fc8 <adc_scan_start+0x158>
	    case  100: current = IDAC0_MAG100UA;  break;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	807b      	strh	r3, [r7, #2]
 8000fa8:	e00e      	b.n	8000fc8 <adc_scan_start+0x158>
	    case  250: current = IDAC0_MAG250UA;  break;
 8000faa:	2303      	movs	r3, #3
 8000fac:	807b      	strh	r3, [r7, #2]
 8000fae:	e00b      	b.n	8000fc8 <adc_scan_start+0x158>
	    case  500: current = IDAC0_MAG500UA;  break;
 8000fb0:	2304      	movs	r3, #4
 8000fb2:	807b      	strh	r3, [r7, #2]
 8000fb4:	e008      	b.n	8000fc8 <adc_scan_start+0x158>
	    case  750: current = IDAC0_MAG750UA;  break;
 8000fb6:	2305      	movs	r3, #5
 8000fb8:	807b      	strh	r3, [r7, #2]
 8000fba:	e005      	b.n	8000fc8 <adc_scan_start+0x158>
	    case 1000: current = IDAC0_MAG1000UA; break;
 8000fbc:	2306      	movs	r3, #6
 8000fbe:	807b      	strh	r3, [r7, #2]
 8000fc0:	e002      	b.n	8000fc8 <adc_scan_start+0x158>
	    case 1500: current = IDAC0_MAG1500UA; break;
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	807b      	strh	r3, [r7, #2]
 8000fc6:	bf00      	nop
	  }


	  cs_enable(id);
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fee9 	bl	8000da4 <cs_enable>

	  if(id <= 5){	//DMS
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	2b05      	cmp	r3, #5
 8000fd8:	dc40      	bgt.n	800105c <adc_scan_start+0x1ec>

		  wr_cmd(id, CMD_RESET);
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	2106      	movs	r1, #6
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 fa1d 	bl	8001420 <wr_cmd>
		  wr_cmd(id, CMD_SDATAC);
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	2116      	movs	r1, #22
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 fa17 	bl	8001420 <wr_cmd>
		  wr_reg(id, REG_MUX0, 0b00000001);
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fa50 	bl	80014a0 <wr_reg>
		  wr_reg(id, REG_VBIAS, 0x00);
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	2200      	movs	r2, #0
 8001006:	2101      	movs	r1, #1
 8001008:	4618      	mov	r0, r3
 800100a:	f000 fa49 	bl	80014a0 <wr_reg>
		  wr_reg(id, REG_MUX1, 0b00110000);
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2230      	movs	r2, #48	; 0x30
 8001014:	2102      	movs	r1, #2
 8001016:	4618      	mov	r0, r3
 8001018:	f000 fa42 	bl	80014a0 <wr_reg>
		  wr_reg(id, REG_SYS0, gain | drate);
 800101c:	88bb      	ldrh	r3, [r7, #4]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	79bb      	ldrb	r3, [r7, #6]
 8001022:	4313      	orrs	r3, r2
 8001024:	b2da      	uxtb	r2, r3
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	2103      	movs	r1, #3
 800102c:	4618      	mov	r0, r3
 800102e:	f000 fa37 	bl	80014a0 <wr_reg>
		  wr_reg(id, REG_IDAC0, 0x00);
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	2200      	movs	r2, #0
 8001038:	210a      	movs	r1, #10
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fa30 	bl	80014a0 <wr_reg>
		  wr_reg(id, REG_IDAC1, 0b11001100);
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	22cc      	movs	r2, #204	; 0xcc
 8001046:	210b      	movs	r1, #11
 8001048:	4618      	mov	r0, r3
 800104a:	f000 fa29 	bl	80014a0 <wr_reg>
		  wr_cmd(id, CMD_SYNC);
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	2104      	movs	r1, #4
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f9e3 	bl	8001420 <wr_cmd>
 800105a:	e040      	b.n	80010de <adc_scan_start+0x26e>
		  //uint8_t rdata = CMD_RDATAC;
		  //HAL_SPI_Transmit(get_hspi_from_id(id), &rdata, 2, HAL_MAX_DELAY);

	  } else {	//PT100

		  wr_cmd(id, CMD_RESET);
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2106      	movs	r1, #6
 8001062:	4618      	mov	r0, r3
 8001064:	f000 f9dc 	bl	8001420 <wr_cmd>
		  wr_cmd(id, CMD_SDATAC);
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	2116      	movs	r1, #22
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f9d6 	bl	8001420 <wr_cmd>
		  wr_reg(id, REG_VBIAS, 0x00);
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	2200      	movs	r2, #0
 800107a:	2101      	movs	r1, #1
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fa0f 	bl	80014a0 <wr_reg>
		  wr_reg(id, REG_MUX0, 0x01); //?
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	2201      	movs	r2, #1
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fa08 	bl	80014a0 <wr_reg>
		  wr_reg(id, REG_MUX1, 0b00100000); //int ref on, REFP0/REFN0 ref inp selected
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	2220      	movs	r2, #32
 8001096:	2102      	movs	r1, #2
 8001098:	4618      	mov	r0, r3
 800109a:	f000 fa01 	bl	80014a0 <wr_reg>
		  //wr_reg(id, REG_VBIAS, 0x00);
		  //wr_reg(id, REG_MUX1, 0b00110000);
		  wr_reg(id, REG_SYS0, gain | drate); //Gain 4, SPS 20
 800109e:	88bb      	ldrh	r3, [r7, #4]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	2103      	movs	r1, #3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f9f6 	bl	80014a0 <wr_reg>
		  wr_reg(id, REG_IDAC0, current); //1mA;
 80010b4:	887b      	ldrh	r3, [r7, #2]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	210a      	movs	r1, #10
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f9ee 	bl	80014a0 <wr_reg>
		  wr_reg(id, REG_IDAC1, 0b00000010); //IDAC1 = AIN0, IDAC2 = AIN3
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	2202      	movs	r2, #2
 80010ca:	210b      	movs	r1, #11
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f9e7 	bl	80014a0 <wr_reg>
		  wr_cmd(id, CMD_SYNC);
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	2104      	movs	r1, #4
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f9a1 	bl	8001420 <wr_cmd>
		  //uint8_t rdata = CMD_RDATAC;
		  //HAL_SPI_Transmit(get_hspi_from_id(id), &rdata, 2, HAL_MAX_DELAY);
	  }


	  cs_disable(id);
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fe7c 	bl	8000de0 <cs_disable>

	  return r;
 80010e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd90      	pop	{r4, r7, pc}

080010f4 <rd_data>:

uint16_t rd_data(int8_t id){
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b087      	sub	sp, #28
 80010f8:	af02      	add	r7, sp, #8
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
	uint8_t d1, d3;
	uint16_t dR;

	while(HAL_GPIO_ReadPin(port_drdy_from_id(id), pin_drdy_from_id(id)) == GPIO_PIN_SET);
 80010fe:	bf00      	nop
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f000 f911 	bl	800132c <port_drdy_from_id>
 800110a:	4604      	mov	r4, r0
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	4618      	mov	r0, r3
 8001112:	f000 f8cb 	bl	80012ac <pin_drdy_from_id>
 8001116:	4603      	mov	r3, r0
 8001118:	4619      	mov	r1, r3
 800111a:	4620      	mov	r0, r4
 800111c:	f001 fdf6 	bl	8002d0c <HAL_GPIO_ReadPin>
 8001120:	4603      	mov	r3, r0
 8001122:	2b01      	cmp	r3, #1
 8001124:	d0ec      	beq.n	8001100 <rd_data+0xc>
	cs_enable(id);
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fe3a 	bl	8000da4 <cs_enable>

	uint8_t rdata = CMD_RDATA;
 8001130:	2312      	movs	r3, #18
 8001132:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_Transmit(get_hspi_from_id(id), &rdata, 2, HAL_MAX_DELAY);
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	4618      	mov	r0, r3
 800113a:	f000 f935 	bl	80013a8 <get_hspi_from_id>
 800113e:	f107 010b 	add.w	r1, r7, #11
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	2202      	movs	r2, #2
 8001148:	f003 fed4 	bl	8004ef4 <HAL_SPI_Transmit>
	//HAL_Delay(1);

	uint8_t nope = CMD_NOP;
 800114c:	23ff      	movs	r3, #255	; 0xff
 800114e:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_TransmitReceive(get_hspi_from_id(id), &nope, &d1, 2, HAL_MAX_DELAY);
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	4618      	mov	r0, r3
 8001156:	f000 f927 	bl	80013a8 <get_hspi_from_id>
 800115a:	f107 020d 	add.w	r2, r7, #13
 800115e:	f107 010a 	add.w	r1, r7, #10
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2302      	movs	r3, #2
 800116a:	f004 f839 	bl	80051e0 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(get_hspi_from_id(id), &nope, &d3, 2, HAL_MAX_DELAY);
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f918 	bl	80013a8 <get_hspi_from_id>
 8001178:	f107 020c 	add.w	r2, r7, #12
 800117c:	f107 010a 	add.w	r1, r7, #10
 8001180:	f04f 33ff 	mov.w	r3, #4294967295
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2302      	movs	r3, #2
 8001188:	f004 f82a 	bl	80051e0 <HAL_SPI_TransmitReceive>
	dR = (d1 << 8) | d3;
 800118c:	7b7b      	ldrb	r3, [r7, #13]
 800118e:	021b      	lsls	r3, r3, #8
 8001190:	b21a      	sxth	r2, r3
 8001192:	7b3b      	ldrb	r3, [r7, #12]
 8001194:	b21b      	sxth	r3, r3
 8001196:	4313      	orrs	r3, r2
 8001198:	b21b      	sxth	r3, r3
 800119a:	81fb      	strh	r3, [r7, #14]
	cs_disable(id);
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fe1d 	bl	8000de0 <cs_disable>

	return dR;
 80011a6:	89fb      	ldrh	r3, [r7, #14]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd90      	pop	{r4, r7, pc}

080011b0 <pin_from_id>:
	//cs_disable(id);
	return d1;
}

//
uint16_t pin_from_id(int8_t id){
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
	switch(id){
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	2b08      	cmp	r3, #8
 80011c0:	d82c      	bhi.n	800121c <pin_from_id+0x6c>
 80011c2:	a201      	add	r2, pc, #4	; (adr r2, 80011c8 <pin_from_id+0x18>)
 80011c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c8:	080011ed 	.word	0x080011ed
 80011cc:	080011f3 	.word	0x080011f3
 80011d0:	080011f9 	.word	0x080011f9
 80011d4:	080011ff 	.word	0x080011ff
 80011d8:	08001203 	.word	0x08001203
 80011dc:	08001207 	.word	0x08001207
 80011e0:	0800120b 	.word	0x0800120b
 80011e4:	08001211 	.word	0x08001211
 80011e8:	08001217 	.word	0x08001217
			case 0: //DMS 1
				return nCS_DMS1_Pin;
 80011ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f0:	e016      	b.n	8001220 <pin_from_id+0x70>
			case 1: //DMS 2
				return nCS_DMS2_Pin;
 80011f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011f6:	e013      	b.n	8001220 <pin_from_id+0x70>
			case 2: //DMS 3
				return nCS_DMS3_Pin;
 80011f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011fc:	e010      	b.n	8001220 <pin_from_id+0x70>
			case 3: //DMS 4
				return nCS_DMS4_Pin;
 80011fe:	2301      	movs	r3, #1
 8001200:	e00e      	b.n	8001220 <pin_from_id+0x70>
			case 4: //DMS 5
				return nCS_DMS5_Pin;
 8001202:	2302      	movs	r3, #2
 8001204:	e00c      	b.n	8001220 <pin_from_id+0x70>
			case 5: //DMS 6
				return nCS_DMS6_Pin;
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	e00a      	b.n	8001220 <pin_from_id+0x70>
			case 6: //PT 1
				return nCS_PT1_Pin;
 800120a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800120e:	e007      	b.n	8001220 <pin_from_id+0x70>
			case 7: //PT 2
				return nCS_PT2_Pin;
 8001210:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001214:	e004      	b.n	8001220 <pin_from_id+0x70>
			case 8: //PT 3
				return nCS_PT3_Pin;
 8001216:	f44f 7380 	mov.w	r3, #256	; 0x100
 800121a:	e001      	b.n	8001220 <pin_from_id+0x70>
			default: //DMS 1
				return nCS_DMS1_Pin;
 800121c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		}
}
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <port_from_id>:

//
GPIO_TypeDef* port_from_id(int8_t id){
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
	switch(id){
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	2b08      	cmp	r3, #8
 800123c:	d826      	bhi.n	800128c <port_from_id+0x60>
 800123e:	a201      	add	r2, pc, #4	; (adr r2, 8001244 <port_from_id+0x18>)
 8001240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001244:	08001269 	.word	0x08001269
 8001248:	0800126d 	.word	0x0800126d
 800124c:	08001271 	.word	0x08001271
 8001250:	08001275 	.word	0x08001275
 8001254:	08001279 	.word	0x08001279
 8001258:	0800127d 	.word	0x0800127d
 800125c:	08001281 	.word	0x08001281
 8001260:	08001285 	.word	0x08001285
 8001264:	08001289 	.word	0x08001289
		case 0: //DMS 1
			return nCS_DMS1_GPIO_Port;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <port_from_id+0x70>)
 800126a:	e010      	b.n	800128e <port_from_id+0x62>
		case 1: //DMS 2
			return nCS_DMS2_GPIO_Port;
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <port_from_id+0x70>)
 800126e:	e00e      	b.n	800128e <port_from_id+0x62>
		case 2: //DMS 3
			return nCS_DMS3_GPIO_Port;
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <port_from_id+0x70>)
 8001272:	e00c      	b.n	800128e <port_from_id+0x62>
		case 3: //DMS 4
			return nCS_DMS4_GPIO_Port;
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <port_from_id+0x74>)
 8001276:	e00a      	b.n	800128e <port_from_id+0x62>
		case 4: //DMS 5
			return nCS_DMS5_GPIO_Port;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <port_from_id+0x74>)
 800127a:	e008      	b.n	800128e <port_from_id+0x62>
		case 5: //DMS 6
			return nCS_DMS6_GPIO_Port;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <port_from_id+0x78>)
 800127e:	e006      	b.n	800128e <port_from_id+0x62>
		case 6: //PT 1
			return nCS_PT1_GPIO_Port;
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <port_from_id+0x7c>)
 8001282:	e004      	b.n	800128e <port_from_id+0x62>
		case 7: //PT 2
			return nCS_PT2_GPIO_Port;
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <port_from_id+0x7c>)
 8001286:	e002      	b.n	800128e <port_from_id+0x62>
		case 8: //PT 3
			return nCS_PT3_GPIO_Port;
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <port_from_id+0x7c>)
 800128a:	e000      	b.n	800128e <port_from_id+0x62>
		default: //DMS 1
			return nCS_DMS1_GPIO_Port;
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <port_from_id+0x70>)
	}
}
 800128e:	4618      	mov	r0, r3
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40021400 	.word	0x40021400
 80012a0:	40021800 	.word	0x40021800
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40020c00 	.word	0x40020c00

080012ac <pin_drdy_from_id>:

//
uint16_t pin_drdy_from_id(int8_t id){
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
	switch(id){
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d82e      	bhi.n	800131c <pin_drdy_from_id+0x70>
 80012be:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <pin_drdy_from_id+0x18>)
 80012c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c4:	080012e9 	.word	0x080012e9
 80012c8:	080012ed 	.word	0x080012ed
 80012cc:	080012f3 	.word	0x080012f3
 80012d0:	080012f9 	.word	0x080012f9
 80012d4:	080012ff 	.word	0x080012ff
 80012d8:	08001305 	.word	0x08001305
 80012dc:	0800130b 	.word	0x0800130b
 80012e0:	08001311 	.word	0x08001311
 80012e4:	08001317 	.word	0x08001317
			case 0: //DMS 1
				return nDRDY_DMS1_Pin;
 80012e8:	2310      	movs	r3, #16
 80012ea:	e018      	b.n	800131e <pin_drdy_from_id+0x72>
			case 1: //DMS 2
				return nDRDY_DMS2_Pin;
 80012ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f0:	e015      	b.n	800131e <pin_drdy_from_id+0x72>
			case 2: //DMS 3
				return nDRDY_DMS3_Pin;
 80012f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f6:	e012      	b.n	800131e <pin_drdy_from_id+0x72>
			case 3: //DMS 4
				return nDRDY_DMS4_Pin;
 80012f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012fc:	e00f      	b.n	800131e <pin_drdy_from_id+0x72>
			case 4: //DMS 5
				return nDRDY_DMS5_Pin;
 80012fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001302:	e00c      	b.n	800131e <pin_drdy_from_id+0x72>
			case 5: //DMS 6
				return nDRDY_DMS6_Pin;
 8001304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001308:	e009      	b.n	800131e <pin_drdy_from_id+0x72>
			case 6: //PT 1
				return nDRDY_PT1_Pin;
 800130a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800130e:	e006      	b.n	800131e <pin_drdy_from_id+0x72>
			case 7: //PT 2
				return nDRDY_PT2_Pin;
 8001310:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001314:	e003      	b.n	800131e <pin_drdy_from_id+0x72>
			case 8: //PT 3
				return nDRDY_PT3_Pin;
 8001316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800131a:	e000      	b.n	800131e <pin_drdy_from_id+0x72>
			default: //DMS 1
				return nDRDY_DMS1_Pin;
 800131c:	2310      	movs	r3, #16
		}
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop

0800132c <port_drdy_from_id>:

//
GPIO_TypeDef* port_drdy_from_id(int8_t id){
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
	switch(id){
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	2b08      	cmp	r3, #8
 800133c:	d826      	bhi.n	800138c <port_drdy_from_id+0x60>
 800133e:	a201      	add	r2, pc, #4	; (adr r2, 8001344 <port_drdy_from_id+0x18>)
 8001340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001344:	08001369 	.word	0x08001369
 8001348:	0800136d 	.word	0x0800136d
 800134c:	08001371 	.word	0x08001371
 8001350:	08001375 	.word	0x08001375
 8001354:	08001379 	.word	0x08001379
 8001358:	0800137d 	.word	0x0800137d
 800135c:	08001381 	.word	0x08001381
 8001360:	08001385 	.word	0x08001385
 8001364:	08001389 	.word	0x08001389
		case 0: //DMS 1
			return nDRDY_DMS1_GPIO_Port;
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <port_drdy_from_id+0x70>)
 800136a:	e010      	b.n	800138e <port_drdy_from_id+0x62>
		case 1: //DMS 2
			return nDRDY_DMS2_GPIO_Port;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <port_drdy_from_id+0x74>)
 800136e:	e00e      	b.n	800138e <port_drdy_from_id+0x62>
		case 2: //DMS 3
			return nDRDY_DMS3_GPIO_Port;
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <port_drdy_from_id+0x74>)
 8001372:	e00c      	b.n	800138e <port_drdy_from_id+0x62>
		case 3: //DMS 4
			return nDRDY_DMS4_GPIO_Port;
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <port_drdy_from_id+0x74>)
 8001376:	e00a      	b.n	800138e <port_drdy_from_id+0x62>
		case 4: //DMS 5
			return nDRDY_DMS5_GPIO_Port;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <port_drdy_from_id+0x74>)
 800137a:	e008      	b.n	800138e <port_drdy_from_id+0x62>
		case 5: //DMS 6
			return nDRDY_DMS6_GPIO_Port;
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <port_drdy_from_id+0x74>)
 800137e:	e006      	b.n	800138e <port_drdy_from_id+0x62>
		case 6: //PT 1
			return nDRDY_PT1_GPIO_Port;
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <port_drdy_from_id+0x78>)
 8001382:	e004      	b.n	800138e <port_drdy_from_id+0x62>
		case 7: //PT 2
			return nDRDY_PT2_GPIO_Port;
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <port_drdy_from_id+0x78>)
 8001386:	e002      	b.n	800138e <port_drdy_from_id+0x62>
		case 8: //PT 3
			return nDRDY_PT3_GPIO_Port;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <port_drdy_from_id+0x78>)
 800138a:	e000      	b.n	800138e <port_drdy_from_id+0x62>
		default: //DMS 1
			return nDRDY_DMS1_GPIO_Port;
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <port_drdy_from_id+0x70>)
	}
}
 800138e:	4618      	mov	r0, r3
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40021800 	.word	0x40021800
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40022400 	.word	0x40022400

080013a8 <get_hspi_from_id>:

//
SPI_HandleTypeDef *get_hspi_from_id(int8_t id){
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
	switch(id){
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d826      	bhi.n	8001408 <get_hspi_from_id+0x60>
 80013ba:	a201      	add	r2, pc, #4	; (adr r2, 80013c0 <get_hspi_from_id+0x18>)
 80013bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c0:	080013e5 	.word	0x080013e5
 80013c4:	080013e9 	.word	0x080013e9
 80013c8:	080013ed 	.word	0x080013ed
 80013cc:	080013f1 	.word	0x080013f1
 80013d0:	080013f5 	.word	0x080013f5
 80013d4:	080013f9 	.word	0x080013f9
 80013d8:	080013fd 	.word	0x080013fd
 80013dc:	08001401 	.word	0x08001401
 80013e0:	08001405 	.word	0x08001405
		case 0: //DMS 1
			return &hspi4;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <get_hspi_from_id+0x70>)
 80013e6:	e010      	b.n	800140a <get_hspi_from_id+0x62>
		case 1: //DMS 2
			return &hspi4;
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <get_hspi_from_id+0x70>)
 80013ea:	e00e      	b.n	800140a <get_hspi_from_id+0x62>
		case 2: //DMS 3
			return &hspi4;
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <get_hspi_from_id+0x70>)
 80013ee:	e00c      	b.n	800140a <get_hspi_from_id+0x62>
		case 3: //DMS 4
			return &hspi4;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <get_hspi_from_id+0x70>)
 80013f2:	e00a      	b.n	800140a <get_hspi_from_id+0x62>
		case 4: //DMS 5
			return &hspi4;
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <get_hspi_from_id+0x70>)
 80013f6:	e008      	b.n	800140a <get_hspi_from_id+0x62>
		case 5: //DMS 6
			return &hspi4;
 80013f8:	4b07      	ldr	r3, [pc, #28]	; (8001418 <get_hspi_from_id+0x70>)
 80013fa:	e006      	b.n	800140a <get_hspi_from_id+0x62>
		case 6: //PT 1
			return &hspi3;
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <get_hspi_from_id+0x74>)
 80013fe:	e004      	b.n	800140a <get_hspi_from_id+0x62>
		case 7: //PT 2
			return &hspi3;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <get_hspi_from_id+0x74>)
 8001402:	e002      	b.n	800140a <get_hspi_from_id+0x62>
		case 8: //PT 3
			return &hspi3;
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <get_hspi_from_id+0x74>)
 8001406:	e000      	b.n	800140a <get_hspi_from_id+0x62>
		default: //DMS 1
			return &hspi4;
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <get_hspi_from_id+0x70>)
	}
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	200001e0 	.word	0x200001e0
 800141c:	2000017c 	.word	0x2000017c

08001420 <wr_cmd>:



//
int wr_cmd(int8_t id, uint8_t cmd){
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	460a      	mov	r2, r1
 800142a:	71fb      	strb	r3, [r7, #7]
 800142c:	4613      	mov	r3, r2
 800142e:	71bb      	strb	r3, [r7, #6]
	int8_t status = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	73fb      	strb	r3, [r7, #15]
	//status+= cs_enable(id);
	status+= wr_spi(id, cmd);
 8001434:	79ba      	ldrb	r2, [r7, #6]
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fced 	bl	8000e1c <wr_spi>
 8001442:	4603      	mov	r3, r0
 8001444:	b2da      	uxtb	r2, r3
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	4413      	add	r3, r2
 800144a:	b2db      	uxtb	r3, r3
 800144c:	73fb      	strb	r3, [r7, #15]
	if(cmd == CMD_SYNC)
 800144e:	79bb      	ldrb	r3, [r7, #6]
 8001450:	2b04      	cmp	r3, #4
 8001452:	d10c      	bne.n	800146e <wr_cmd+0x4e>
	{
		status+= wr_spi(id, cmd);
 8001454:	79ba      	ldrb	r2, [r7, #6]
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fcdd 	bl	8000e1c <wr_spi>
 8001462:	4603      	mov	r3, r0
 8001464:	b2da      	uxtb	r2, r3
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	4413      	add	r3, r2
 800146a:	b2db      	uxtb	r3, r3
 800146c:	73fb      	strb	r3, [r7, #15]
    }
	//status+= cs_disable(id);
	if(cmd == CMD_RESET)
 800146e:	79bb      	ldrb	r3, [r7, #6]
 8001470:	2b06      	cmp	r3, #6
 8001472:	d103      	bne.n	800147c <wr_cmd+0x5c>
	{
		HAL_Delay(1); //1ms
 8001474:	2001      	movs	r0, #1
 8001476:	f000 fde7 	bl	8002048 <HAL_Delay>
 800147a:	e00c      	b.n	8001496 <wr_cmd+0x76>
	}
	else if(cmd == CMD_SELFOCAL)
 800147c:	79bb      	ldrb	r3, [r7, #6]
 800147e:	2b62      	cmp	r3, #98	; 0x62
 8001480:	d103      	bne.n	800148a <wr_cmd+0x6a>
	{
		HAL_Delay(10); //10ms
 8001482:	200a      	movs	r0, #10
 8001484:	f000 fde0 	bl	8002048 <HAL_Delay>
 8001488:	e005      	b.n	8001496 <wr_cmd+0x76>
	}
	else if(cmd == CMD_SDATAC)
 800148a:	79bb      	ldrb	r3, [r7, #6]
 800148c:	2b16      	cmp	r3, #22
 800148e:	d102      	bne.n	8001496 <wr_cmd+0x76>
	{
		HAL_Delay(1); //1ms
 8001490:	2001      	movs	r0, #1
 8001492:	f000 fdd9 	bl	8002048 <HAL_Delay>
	}
	return 0;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <wr_reg>:

int wr_reg(int8_t id, uint8_t reg, uint8_t data){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
 80014aa:	460b      	mov	r3, r1
 80014ac:	71bb      	strb	r3, [r7, #6]
 80014ae:	4613      	mov	r3, r2
 80014b0:	717b      	strb	r3, [r7, #5]
	int8_t status = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, CMD_WREG | reg);
 80014b6:	79bb      	ldrb	r3, [r7, #6]
 80014b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fca9 	bl	8000e1c <wr_spi>
 80014ca:	4603      	mov	r3, r0
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	4413      	add	r3, r2
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, 0);
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fc9d 	bl	8000e1c <wr_spi>
 80014e2:	4603      	mov	r3, r0
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	4413      	add	r3, r2
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	73fb      	strb	r3, [r7, #15]
	status += wr_spi(id, data);
 80014ee:	797a      	ldrb	r2, [r7, #5]
 80014f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fc90 	bl	8000e1c <wr_spi>
 80014fc:	4603      	mov	r3, r0
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	4413      	add	r3, r2
 8001504:	b2db      	uxtb	r3, r3
 8001506:	73fb      	strb	r3, [r7, #15]
	return 0;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <write_EXP>:
	data = rd_spi(id);
	//status += cs_disable(id);
	return data;
}

int write_EXP(uint8_t *dout){
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart8, &dout, sizeof(dout), HAL_MAX_DELAY);
 800151c:	1d39      	adds	r1, r7, #4
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
 8001522:	2204      	movs	r2, #4
 8001524:	4803      	ldr	r0, [pc, #12]	; (8001534 <write_EXP+0x20>)
 8001526:	f004 fb75 	bl	8005c14 <HAL_UART_Transmit>
	return 0;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200002c4 	.word	0x200002c4

08001538 <write_DAPI>:

int write_DAPI(uint8_t *dout){
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, &dout, sizeof(dout), HAL_MAX_DELAY);
 8001540:	1d39      	adds	r1, r7, #4
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	2204      	movs	r2, #4
 8001548:	4803      	ldr	r0, [pc, #12]	; (8001558 <write_DAPI+0x20>)
 800154a:	f004 fb63 	bl	8005c14 <HAL_UART_Transmit>
	return 0;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000344 	.word	0x20000344

0800155c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi5;
SPI_HandleTypeDef hspi6;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001584:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <MX_SPI2_Init+0x74>)
 8001586:	4a1c      	ldr	r2, [pc, #112]	; (80015f8 <MX_SPI2_Init+0x78>)
 8001588:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800158a:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <MX_SPI2_Init+0x74>)
 800158c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001590:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <MX_SPI2_Init+0x74>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001598:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <MX_SPI2_Init+0x74>)
 800159a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800159e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015a0:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <MX_SPI2_Init+0x74>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a6:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <MX_SPI2_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_SPI2_Init+0x74>)
 80015ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <MX_SPI2_Init+0x74>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MX_SPI2_Init+0x74>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <MX_SPI2_Init+0x74>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <MX_SPI2_Init+0x74>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MX_SPI2_Init+0x74>)
 80015ce:	2207      	movs	r2, #7
 80015d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <MX_SPI2_Init+0x74>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <MX_SPI2_Init+0x74>)
 80015da:	2208      	movs	r2, #8
 80015dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_SPI2_Init+0x74>)
 80015e0:	f003 fae0 	bl	8004ba4 <HAL_SPI_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80015ea:	f7ff ffb7 	bl	800155c <Error_Handler>
  }

}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000050 	.word	0x20000050
 80015f8:	40003800 	.word	0x40003800

080015fc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001600:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <MX_SPI3_Init+0x74>)
 8001602:	4a1c      	ldr	r2, [pc, #112]	; (8001674 <MX_SPI3_Init+0x78>)
 8001604:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001606:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <MX_SPI3_Init+0x74>)
 8001608:	f44f 7282 	mov.w	r2, #260	; 0x104
 800160c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <MX_SPI3_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001614:	4b16      	ldr	r3, [pc, #88]	; (8001670 <MX_SPI3_Init+0x74>)
 8001616:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800161a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <MX_SPI3_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001622:	4b13      	ldr	r3, [pc, #76]	; (8001670 <MX_SPI3_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_SPI3_Init+0x74>)
 800162a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800162e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <MX_SPI3_Init+0x74>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <MX_SPI3_Init+0x74>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MX_SPI3_Init+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <MX_SPI3_Init+0x74>)
 8001644:	2200      	movs	r2, #0
 8001646:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_SPI3_Init+0x74>)
 800164a:	2207      	movs	r2, #7
 800164c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <MX_SPI3_Init+0x74>)
 8001650:	2200      	movs	r2, #0
 8001652:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_SPI3_Init+0x74>)
 8001656:	2208      	movs	r2, #8
 8001658:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_SPI3_Init+0x74>)
 800165c:	f003 faa2 	bl	8004ba4 <HAL_SPI_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001666:	f7ff ff79 	bl	800155c <Error_Handler>
  }

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2000017c 	.word	0x2000017c
 8001674:	40003c00 	.word	0x40003c00

08001678 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <MX_SPI4_Init+0x74>)
 800167e:	4a1c      	ldr	r2, [pc, #112]	; (80016f0 <MX_SPI4_Init+0x78>)
 8001680:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <MX_SPI4_Init+0x74>)
 8001684:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001688:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800168a:	4b18      	ldr	r3, [pc, #96]	; (80016ec <MX_SPI4_Init+0x74>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001690:	4b16      	ldr	r3, [pc, #88]	; (80016ec <MX_SPI4_Init+0x74>)
 8001692:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001696:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <MX_SPI4_Init+0x74>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <MX_SPI4_Init+0x74>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_SPI4_Init+0x74>)
 80016a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016aa:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <MX_SPI4_Init+0x74>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <MX_SPI4_Init+0x74>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_SPI4_Init+0x74>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <MX_SPI4_Init+0x74>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_SPI4_Init+0x74>)
 80016c6:	2207      	movs	r2, #7
 80016c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <MX_SPI4_Init+0x74>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <MX_SPI4_Init+0x74>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_SPI4_Init+0x74>)
 80016d8:	f003 fa64 	bl	8004ba4 <HAL_SPI_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80016e2:	f7ff ff3b 	bl	800155c <Error_Handler>
  }

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200001e0 	.word	0x200001e0
 80016f0:	40013400 	.word	0x40013400

080016f4 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 80016f8:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <MX_SPI5_Init+0x74>)
 80016fa:	4a1c      	ldr	r2, [pc, #112]	; (800176c <MX_SPI5_Init+0x78>)
 80016fc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80016fe:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <MX_SPI5_Init+0x74>)
 8001700:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001704:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <MX_SPI5_Init+0x74>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 800170c:	4b16      	ldr	r3, [pc, #88]	; (8001768 <MX_SPI5_Init+0x74>)
 800170e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001712:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <MX_SPI5_Init+0x74>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <MX_SPI5_Init+0x74>)
 800171c:	2200      	movs	r2, #0
 800171e:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <MX_SPI5_Init+0x74>)
 8001722:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001726:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <MX_SPI5_Init+0x74>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MX_SPI5_Init+0x74>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <MX_SPI5_Init+0x74>)
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <MX_SPI5_Init+0x74>)
 800173c:	2200      	movs	r2, #0
 800173e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <MX_SPI5_Init+0x74>)
 8001742:	2207      	movs	r2, #7
 8001744:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <MX_SPI5_Init+0x74>)
 8001748:	2200      	movs	r2, #0
 800174a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <MX_SPI5_Init+0x74>)
 800174e:	2208      	movs	r2, #8
 8001750:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <MX_SPI5_Init+0x74>)
 8001754:	f003 fa26 	bl	8004ba4 <HAL_SPI_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800175e:	f7ff fefd 	bl	800155c <Error_Handler>
  }

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200000b4 	.word	0x200000b4
 800176c:	40015000 	.word	0x40015000

08001770 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <MX_SPI6_Init+0x74>)
 8001776:	4a1c      	ldr	r2, [pc, #112]	; (80017e8 <MX_SPI6_Init+0x78>)
 8001778:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 800177a:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <MX_SPI6_Init+0x74>)
 800177c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001780:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <MX_SPI6_Init+0x74>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8001788:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <MX_SPI6_Init+0x74>)
 800178a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800178e:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <MX_SPI6_Init+0x74>)
 8001792:	2200      	movs	r2, #0
 8001794:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <MX_SPI6_Init+0x74>)
 8001798:	2200      	movs	r2, #0
 800179a:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <MX_SPI6_Init+0x74>)
 800179e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a2:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <MX_SPI6_Init+0x74>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <MX_SPI6_Init+0x74>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <MX_SPI6_Init+0x74>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <MX_SPI6_Init+0x74>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <MX_SPI6_Init+0x74>)
 80017be:	2207      	movs	r2, #7
 80017c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <MX_SPI6_Init+0x74>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <MX_SPI6_Init+0x74>)
 80017ca:	2208      	movs	r2, #8
 80017cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 80017ce:	4805      	ldr	r0, [pc, #20]	; (80017e4 <MX_SPI6_Init+0x74>)
 80017d0:	f003 f9e8 	bl	8004ba4 <HAL_SPI_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_SPI6_Init+0x6e>
  {
    Error_Handler();
 80017da:	f7ff febf 	bl	800155c <Error_Handler>
  }

}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000118 	.word	0x20000118
 80017e8:	40015400 	.word	0x40015400

080017ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b092      	sub	sp, #72	; 0x48
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a8e      	ldr	r2, [pc, #568]	; (8001a44 <HAL_SPI_MspInit+0x258>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d131      	bne.n	8001872 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800180e:	4b8e      	ldr	r3, [pc, #568]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	4a8d      	ldr	r2, [pc, #564]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 8001814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001818:	6413      	str	r3, [r2, #64]	; 0x40
 800181a:	4b8b      	ldr	r3, [pc, #556]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001822:	633b      	str	r3, [r7, #48]	; 0x30
 8001824:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	4b88      	ldr	r3, [pc, #544]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a87      	ldr	r2, [pc, #540]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b85      	ldr	r3, [pc, #532]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800183c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800183e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	2303      	movs	r3, #3
 800184e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001850:	2305      	movs	r3, #5
 8001852:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001858:	4619      	mov	r1, r3
 800185a:	487c      	ldr	r0, [pc, #496]	; (8001a4c <HAL_SPI_MspInit+0x260>)
 800185c:	f000 fec8 	bl	80025f0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 6, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	2106      	movs	r1, #6
 8001864:	2024      	movs	r0, #36	; 0x24
 8001866:	f000 fd01 	bl	800226c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800186a:	2024      	movs	r0, #36	; 0x24
 800186c:	f000 fd2a 	bl	80022c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8001870:	e0e4      	b.n	8001a3c <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI3)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a76      	ldr	r2, [pc, #472]	; (8001a50 <HAL_SPI_MspInit+0x264>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d145      	bne.n	8001908 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800187c:	4b72      	ldr	r3, [pc, #456]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	4a71      	ldr	r2, [pc, #452]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 8001882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001886:	6413      	str	r3, [r2, #64]	; 0x40
 8001888:	4b6f      	ldr	r3, [pc, #444]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
 8001892:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001894:	4b6c      	ldr	r3, [pc, #432]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001898:	4a6b      	ldr	r2, [pc, #428]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 800189a:	f043 0302 	orr.w	r3, r3, #2
 800189e:	6313      	str	r3, [r2, #48]	; 0x30
 80018a0:	4b69      	ldr	r3, [pc, #420]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 80018a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ac:	4b66      	ldr	r3, [pc, #408]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	4a65      	ldr	r2, [pc, #404]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 80018b2:	f043 0304 	orr.w	r3, r3, #4
 80018b6:	6313      	str	r3, [r2, #48]	; 0x30
 80018b8:	4b63      	ldr	r3, [pc, #396]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	623b      	str	r3, [r7, #32]
 80018c2:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018c4:	2304      	movs	r3, #4
 80018c6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d0:	2303      	movs	r3, #3
 80018d2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80018d4:	2307      	movs	r3, #7
 80018d6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018dc:	4619      	mov	r1, r3
 80018de:	485b      	ldr	r0, [pc, #364]	; (8001a4c <HAL_SPI_MspInit+0x260>)
 80018e0:	f000 fe86 	bl	80025f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ea:	2302      	movs	r3, #2
 80018ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f2:	2303      	movs	r3, #3
 80018f4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018f6:	2306      	movs	r3, #6
 80018f8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018fe:	4619      	mov	r1, r3
 8001900:	4854      	ldr	r0, [pc, #336]	; (8001a54 <HAL_SPI_MspInit+0x268>)
 8001902:	f000 fe75 	bl	80025f0 <HAL_GPIO_Init>
}
 8001906:	e099      	b.n	8001a3c <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI4)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a52      	ldr	r2, [pc, #328]	; (8001a58 <HAL_SPI_MspInit+0x26c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d130      	bne.n	8001974 <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001912:	4b4d      	ldr	r3, [pc, #308]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	4a4c      	ldr	r2, [pc, #304]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 8001918:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800191c:	6453      	str	r3, [r2, #68]	; 0x44
 800191e:	4b4a      	ldr	r3, [pc, #296]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001926:	61fb      	str	r3, [r7, #28]
 8001928:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800192a:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a46      	ldr	r2, [pc, #280]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 8001930:	f043 0310 	orr.w	r3, r3, #16
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b44      	ldr	r3, [pc, #272]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0310 	and.w	r3, r3, #16
 800193e:	61bb      	str	r3, [r7, #24]
 8001940:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001942:	2364      	movs	r3, #100	; 0x64
 8001944:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001946:	2302      	movs	r3, #2
 8001948:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194e:	2303      	movs	r3, #3
 8001950:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001952:	2305      	movs	r3, #5
 8001954:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001956:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800195a:	4619      	mov	r1, r3
 800195c:	483f      	ldr	r0, [pc, #252]	; (8001a5c <HAL_SPI_MspInit+0x270>)
 800195e:	f000 fe47 	bl	80025f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 6, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	2106      	movs	r1, #6
 8001966:	2054      	movs	r0, #84	; 0x54
 8001968:	f000 fc80 	bl	800226c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800196c:	2054      	movs	r0, #84	; 0x54
 800196e:	f000 fca9 	bl	80022c4 <HAL_NVIC_EnableIRQ>
}
 8001972:	e063      	b.n	8001a3c <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI5)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a39      	ldr	r2, [pc, #228]	; (8001a60 <HAL_SPI_MspInit+0x274>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d129      	bne.n	80019d2 <HAL_SPI_MspInit+0x1e6>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800197e:	4b32      	ldr	r3, [pc, #200]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	4a31      	ldr	r2, [pc, #196]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 8001984:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001988:	6453      	str	r3, [r2, #68]	; 0x44
 800198a:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001996:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a2b      	ldr	r2, [pc, #172]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 800199c:	f043 0320 	orr.w	r3, r3, #32
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0320 	and.w	r3, r3, #32
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80019ae:	f44f 7360 	mov.w	r3, #896	; 0x380
 80019b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80019c0:	2305      	movs	r3, #5
 80019c2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019c8:	4619      	mov	r1, r3
 80019ca:	4826      	ldr	r0, [pc, #152]	; (8001a64 <HAL_SPI_MspInit+0x278>)
 80019cc:	f000 fe10 	bl	80025f0 <HAL_GPIO_Init>
}
 80019d0:	e034      	b.n	8001a3c <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI6)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a24      	ldr	r2, [pc, #144]	; (8001a68 <HAL_SPI_MspInit+0x27c>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d12f      	bne.n	8001a3c <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI6_CLK_ENABLE();
 80019dc:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 80019de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e0:	4a19      	ldr	r2, [pc, #100]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 80019e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019e6:	6453      	str	r3, [r2, #68]	; 0x44
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 80019ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	4a13      	ldr	r2, [pc, #76]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_SPI_MspInit+0x25c>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a0c:	23e0      	movs	r3, #224	; 0xe0
 8001a0e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a24:	4619      	mov	r1, r3
 8001a26:	4811      	ldr	r0, [pc, #68]	; (8001a6c <HAL_SPI_MspInit+0x280>)
 8001a28:	f000 fde2 	bl	80025f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 6, 0);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2106      	movs	r1, #6
 8001a30:	2056      	movs	r0, #86	; 0x56
 8001a32:	f000 fc1b 	bl	800226c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 8001a36:	2056      	movs	r0, #86	; 0x56
 8001a38:	f000 fc44 	bl	80022c4 <HAL_NVIC_EnableIRQ>
}
 8001a3c:	bf00      	nop
 8001a3e:	3748      	adds	r7, #72	; 0x48
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40003800 	.word	0x40003800
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40020400 	.word	0x40020400
 8001a50:	40003c00 	.word	0x40003c00
 8001a54:	40020800 	.word	0x40020800
 8001a58:	40013400 	.word	0x40013400
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40015000 	.word	0x40015000
 8001a64:	40021400 	.word	0x40021400
 8001a68:	40015400 	.word	0x40015400
 8001a6c:	40020000 	.word	0x40020000

08001a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <HAL_MspInit+0x44>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	4a0e      	ldr	r2, [pc, #56]	; (8001ab4 <HAL_MspInit+0x44>)
 8001a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a80:	6413      	str	r3, [r2, #64]	; 0x40
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <HAL_MspInit+0x44>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <HAL_MspInit+0x44>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	4a08      	ldr	r2, [pc, #32]	; (8001ab4 <HAL_MspInit+0x44>)
 8001a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a98:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_MspInit+0x44>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800

08001ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aca:	e7fe      	b.n	8001aca <HardFault_Handler+0x4>

08001acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <MemManage_Handler+0x4>

08001ad2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad6:	e7fe      	b.n	8001ad6 <BusFault_Handler+0x4>

08001ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <UsageFault_Handler+0x4>

08001ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001b0c:	2010      	movs	r0, #16
 8001b0e:	f001 f96b 	bl	8002de8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001b1a:	2020      	movs	r0, #32
 8001b1c:	f001 f964 	bl	8002de8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001b20:	2040      	movs	r0, #64	; 0x40
 8001b22:	f001 f961 	bl	8002de8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001b26:	2080      	movs	r0, #128	; 0x80
 8001b28:	f001 f95e 	bl	8002de8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001b2c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b30:	f001 f95a 	bl	8002de8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001b34:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b38:	f001 f956 	bl	8002de8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <SPI2_IRQHandler+0x10>)
 8001b46:	f003 fd69 	bl	800561c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000050 	.word	0x20000050

08001b54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001b58:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b5c:	f001 f944 	bl	8002de8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001b60:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b64:	f001 f940 	bl	8002de8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b6c:	f001 f93c 	bl	8002de8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001b70:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b74:	f001 f938 	bl	8002de8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001b78:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b7c:	f001 f934 	bl	8002de8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <UART4_IRQHandler+0x10>)
 8001b8a:	f004 f9a1 	bl	8005ed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000344 	.word	0x20000344

08001b98 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001b9c:	4802      	ldr	r0, [pc, #8]	; (8001ba8 <UART5_IRQHandler+0x10>)
 8001b9e:	f004 f997 	bl	8005ed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000244 	.word	0x20000244

08001bac <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <UART8_IRQHandler+0x10>)
 8001bb2:	f004 f98d 	bl	8005ed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200002c4 	.word	0x200002c4

08001bc0 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <SPI4_IRQHandler+0x10>)
 8001bc6:	f003 fd29 	bl	800561c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200001e0 	.word	0x200001e0

08001bd4 <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <SPI6_IRQHandler+0x10>)
 8001bda:	f003 fd1f 	bl	800561c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000118 	.word	0x20000118

08001be8 <SysTick_Handler>:

/* USER CODE BEGIN 1 */
void SysTick_Handler(void) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001bec:	f000 fa0c 	bl	8002008 <HAL_IncTick>
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <SystemInit+0x28>)
 8001bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bfe:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <SystemInit+0x28>)
 8001c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <SystemInit+0x28>)
 8001c0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c0e:	609a      	str	r2, [r3, #8]
#endif
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart8;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <MX_UART4_Init+0x58>)
 8001c26:	4a15      	ldr	r2, [pc, #84]	; (8001c7c <MX_UART4_Init+0x5c>)
 8001c28:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <MX_UART4_Init+0x58>)
 8001c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c30:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <MX_UART4_Init+0x58>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <MX_UART4_Init+0x58>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <MX_UART4_Init+0x58>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <MX_UART4_Init+0x58>)
 8001c46:	220c      	movs	r2, #12
 8001c48:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <MX_UART4_Init+0x58>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <MX_UART4_Init+0x58>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <MX_UART4_Init+0x58>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <MX_UART4_Init+0x58>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c62:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_UART4_Init+0x58>)
 8001c64:	f003 ff16 	bl	8005a94 <HAL_UART_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001c6e:	f7ff fc75 	bl	800155c <Error_Handler>
  }

}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000344 	.word	0x20000344
 8001c7c:	40004c00 	.word	0x40004c00

08001c80 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8001c84:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <MX_UART5_Init+0x58>)
 8001c86:	4a15      	ldr	r2, [pc, #84]	; (8001cdc <MX_UART5_Init+0x5c>)
 8001c88:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <MX_UART5_Init+0x58>)
 8001c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c90:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <MX_UART5_Init+0x58>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <MX_UART5_Init+0x58>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <MX_UART5_Init+0x58>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <MX_UART5_Init+0x58>)
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <MX_UART5_Init+0x58>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb0:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <MX_UART5_Init+0x58>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <MX_UART5_Init+0x58>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <MX_UART5_Init+0x58>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001cc2:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <MX_UART5_Init+0x58>)
 8001cc4:	f003 fee6 	bl	8005a94 <HAL_UART_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001cce:	f7ff fc45 	bl	800155c <Error_Handler>
  }

}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000244 	.word	0x20000244
 8001cdc:	40005000 	.word	0x40005000

08001ce0 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 8001ce4:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <MX_UART8_Init+0x58>)
 8001ce6:	4a15      	ldr	r2, [pc, #84]	; (8001d3c <MX_UART8_Init+0x5c>)
 8001ce8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 30000;
 8001cea:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <MX_UART8_Init+0x58>)
 8001cec:	f247 5230 	movw	r2, #30000	; 0x7530
 8001cf0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001cf2:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <MX_UART8_Init+0x58>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <MX_UART8_Init+0x58>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <MX_UART8_Init+0x58>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <MX_UART8_Init+0x58>)
 8001d06:	220c      	movs	r2, #12
 8001d08:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <MX_UART8_Init+0x58>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MX_UART8_Init+0x58>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <MX_UART8_Init+0x58>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <MX_UART8_Init+0x58>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <MX_UART8_Init+0x58>)
 8001d24:	f003 feb6 	bl	8005a94 <HAL_UART_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_UART8_Init+0x52>
  {
    Error_Handler();
 8001d2e:	f7ff fc15 	bl	800155c <Error_Handler>
  }

}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	200002c4 	.word	0x200002c4
 8001d3c:	40007c00 	.word	0x40007c00

08001d40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b090      	sub	sp, #64	; 0x40
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a6e      	ldr	r2, [pc, #440]	; (8001f18 <HAL_UART_MspInit+0x1d8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d14d      	bne.n	8001dfe <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d62:	4b6e      	ldr	r3, [pc, #440]	; (8001f1c <HAL_UART_MspInit+0x1dc>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	4a6d      	ldr	r2, [pc, #436]	; (8001f1c <HAL_UART_MspInit+0x1dc>)
 8001d68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6e:	4b6b      	ldr	r3, [pc, #428]	; (8001f1c <HAL_UART_MspInit+0x1dc>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d78:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d7a:	4b68      	ldr	r3, [pc, #416]	; (8001f1c <HAL_UART_MspInit+0x1dc>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a67      	ldr	r2, [pc, #412]	; (8001f1c <HAL_UART_MspInit+0x1dc>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b65      	ldr	r3, [pc, #404]	; (8001f1c <HAL_UART_MspInit+0x1dc>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	4b62      	ldr	r3, [pc, #392]	; (8001f1c <HAL_UART_MspInit+0x1dc>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a61      	ldr	r2, [pc, #388]	; (8001f1c <HAL_UART_MspInit+0x1dc>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b5f      	ldr	r3, [pc, #380]	; (8001f1c <HAL_UART_MspInit+0x1dc>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	623b      	str	r3, [r7, #32]
 8001da8:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PI9     ------> UART4_RX
    PA0/WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = DAPI_RX_Pin;
 8001daa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db8:	2303      	movs	r3, #3
 8001dba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(DAPI_RX_GPIO_Port, &GPIO_InitStruct);
 8001dc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4856      	ldr	r0, [pc, #344]	; (8001f20 <HAL_UART_MspInit+0x1e0>)
 8001dc8:	f000 fc12 	bl	80025f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DAPI_TX_Pin;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ddc:	2308      	movs	r3, #8
 8001dde:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(DAPI_TX_GPIO_Port, &GPIO_InitStruct);
 8001de0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de4:	4619      	mov	r1, r3
 8001de6:	484f      	ldr	r0, [pc, #316]	; (8001f24 <HAL_UART_MspInit+0x1e4>)
 8001de8:	f000 fc02 	bl	80025f0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 8001dec:	2200      	movs	r2, #0
 8001dee:	2106      	movs	r1, #6
 8001df0:	2034      	movs	r0, #52	; 0x34
 8001df2:	f000 fa3b 	bl	800226c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001df6:	2034      	movs	r0, #52	; 0x34
 8001df8:	f000 fa64 	bl	80022c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 8001dfc:	e087      	b.n	8001f0e <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==UART5)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a49      	ldr	r2, [pc, #292]	; (8001f28 <HAL_UART_MspInit+0x1e8>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d14d      	bne.n	8001ea4 <HAL_UART_MspInit+0x164>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001e08:	4b44      	ldr	r3, [pc, #272]	; (8001f1c <HAL_UART_MspInit+0x1dc>)
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	4a43      	ldr	r2, [pc, #268]	; (8001f1c <HAL_UART_MspInit+0x1dc>)
 8001e0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e12:	6413      	str	r3, [r2, #64]	; 0x40
 8001e14:	4b41      	ldr	r3, [pc, #260]	; (8001f1c <HAL_UART_MspInit+0x1dc>)
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e20:	4b3e      	ldr	r3, [pc, #248]	; (8001f1c <HAL_UART_MspInit+0x1dc>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	4a3d      	ldr	r2, [pc, #244]	; (8001f1c <HAL_UART_MspInit+0x1dc>)
 8001e26:	f043 0304 	orr.w	r3, r3, #4
 8001e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2c:	4b3b      	ldr	r3, [pc, #236]	; (8001f1c <HAL_UART_MspInit+0x1dc>)
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	61bb      	str	r3, [r7, #24]
 8001e36:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e38:	4b38      	ldr	r3, [pc, #224]	; (8001f1c <HAL_UART_MspInit+0x1dc>)
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	4a37      	ldr	r2, [pc, #220]	; (8001f1c <HAL_UART_MspInit+0x1dc>)
 8001e3e:	f043 0308 	orr.w	r3, r3, #8
 8001e42:	6313      	str	r3, [r2, #48]	; 0x30
 8001e44:	4b35      	ldr	r3, [pc, #212]	; (8001f1c <HAL_UART_MspInit+0x1dc>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	f003 0308 	and.w	r3, r3, #8
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = INTERSPU_TX_Pin;
 8001e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001e62:	2308      	movs	r3, #8
 8001e64:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(INTERSPU_TX_GPIO_Port, &GPIO_InitStruct);
 8001e66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	482f      	ldr	r0, [pc, #188]	; (8001f2c <HAL_UART_MspInit+0x1ec>)
 8001e6e:	f000 fbbf 	bl	80025f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = INTERSPU_RX_Pin;
 8001e72:	2304      	movs	r3, #4
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001e82:	2308      	movs	r3, #8
 8001e84:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(INTERSPU_RX_GPIO_Port, &GPIO_InitStruct);
 8001e86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4828      	ldr	r0, [pc, #160]	; (8001f30 <HAL_UART_MspInit+0x1f0>)
 8001e8e:	f000 fbaf 	bl	80025f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 6, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2106      	movs	r1, #6
 8001e96:	2035      	movs	r0, #53	; 0x35
 8001e98:	f000 f9e8 	bl	800226c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001e9c:	2035      	movs	r0, #53	; 0x35
 8001e9e:	f000 fa11 	bl	80022c4 <HAL_NVIC_EnableIRQ>
}
 8001ea2:	e034      	b.n	8001f0e <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==UART8)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a22      	ldr	r2, [pc, #136]	; (8001f34 <HAL_UART_MspInit+0x1f4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d12f      	bne.n	8001f0e <HAL_UART_MspInit+0x1ce>
    __HAL_RCC_UART8_CLK_ENABLE();
 8001eae:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <HAL_UART_MspInit+0x1dc>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a1a      	ldr	r2, [pc, #104]	; (8001f1c <HAL_UART_MspInit+0x1dc>)
 8001eb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eba:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <HAL_UART_MspInit+0x1dc>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <HAL_UART_MspInit+0x1dc>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a14      	ldr	r2, [pc, #80]	; (8001f1c <HAL_UART_MspInit+0x1dc>)
 8001ecc:	f043 0310 	orr.w	r3, r3, #16
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_UART_MspInit+0x1dc>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EXP_IN_Pin|EXP_OUT_Pin;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eea:	2303      	movs	r3, #3
 8001eec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001eee:	2308      	movs	r3, #8
 8001ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ef2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	480f      	ldr	r0, [pc, #60]	; (8001f38 <HAL_UART_MspInit+0x1f8>)
 8001efa:	f000 fb79 	bl	80025f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 6, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2106      	movs	r1, #6
 8001f02:	2053      	movs	r0, #83	; 0x53
 8001f04:	f000 f9b2 	bl	800226c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001f08:	2053      	movs	r0, #83	; 0x53
 8001f0a:	f000 f9db 	bl	80022c4 <HAL_NVIC_EnableIRQ>
}
 8001f0e:	bf00      	nop
 8001f10:	3740      	adds	r7, #64	; 0x40
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40004c00 	.word	0x40004c00
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40022000 	.word	0x40022000
 8001f24:	40020000 	.word	0x40020000
 8001f28:	40005000 	.word	0x40005000
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40020c00 	.word	0x40020c00
 8001f34:	40007c00 	.word	0x40007c00
 8001f38:	40021000 	.word	0x40021000

08001f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f42:	e003      	b.n	8001f4c <LoopCopyDataInit>

08001f44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f4a:	3104      	adds	r1, #4

08001f4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f4c:	480b      	ldr	r0, [pc, #44]	; (8001f7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f54:	d3f6      	bcc.n	8001f44 <CopyDataInit>
  ldr  r2, =_sbss
 8001f56:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f58:	e002      	b.n	8001f60 <LoopFillZerobss>

08001f5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f5c:	f842 3b04 	str.w	r3, [r2], #4

08001f60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f60:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f64:	d3f9      	bcc.n	8001f5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f66:	f7ff fe45 	bl	8001bf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f6a:	f004 feb5 	bl	8006cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f6e:	f7fe fd7b 	bl	8000a68 <main>
  bx  lr    
 8001f72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f74:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001f78:	08006f44 	.word	0x08006f44
  ldr  r0, =_sdata
 8001f7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f80:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001f84:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001f88:	200003c8 	.word	0x200003c8

08001f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f8c:	e7fe      	b.n	8001f8c <ADC_IRQHandler>

08001f8e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f92:	2003      	movs	r0, #3
 8001f94:	f000 f94a 	bl	800222c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f000 f805 	bl	8001fa8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001f9e:	f7ff fd67 	bl	8001a70 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb0:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <HAL_InitTick+0x54>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b12      	ldr	r3, [pc, #72]	; (8002000 <HAL_InitTick+0x58>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 f994 	bl	80022f4 <HAL_SYSTICK_Config>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00e      	b.n	8001ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b0f      	cmp	r3, #15
 8001fda:	d80a      	bhi.n	8001ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe4:	f000 f942 	bl	800226c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe8:	4a06      	ldr	r2, [pc, #24]	; (8002004 <HAL_InitTick+0x5c>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e000      	b.n	8001ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000000 	.word	0x20000000
 8002000:	20000008 	.word	0x20000008
 8002004:	20000004 	.word	0x20000004

08002008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_IncTick+0x20>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_IncTick+0x24>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4413      	add	r3, r2
 8002018:	4a04      	ldr	r2, [pc, #16]	; (800202c <HAL_IncTick+0x24>)
 800201a:	6013      	str	r3, [r2, #0]
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20000008 	.word	0x20000008
 800202c:	200003c4 	.word	0x200003c4

08002030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return uwTick;
 8002034:	4b03      	ldr	r3, [pc, #12]	; (8002044 <HAL_GetTick+0x14>)
 8002036:	681b      	ldr	r3, [r3, #0]
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	200003c4 	.word	0x200003c4

08002048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002050:	f7ff ffee 	bl	8002030 <HAL_GetTick>
 8002054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d005      	beq.n	800206e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HAL_Delay+0x40>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4413      	add	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800206e:	bf00      	nop
 8002070:	f7ff ffde 	bl	8002030 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	429a      	cmp	r2, r3
 800207e:	d8f7      	bhi.n	8002070 <HAL_Delay+0x28>
  {
  }
}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000008 	.word	0x20000008

0800208c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800209c:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <__NVIC_SetPriorityGrouping+0x40>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020a8:	4013      	ands	r3, r2
 80020aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <__NVIC_SetPriorityGrouping+0x44>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ba:	4a04      	ldr	r2, [pc, #16]	; (80020cc <__NVIC_SetPriorityGrouping+0x40>)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	60d3      	str	r3, [r2, #12]
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00
 80020d0:	05fa0000 	.word	0x05fa0000

080020d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d8:	4b04      	ldr	r3, [pc, #16]	; (80020ec <__NVIC_GetPriorityGrouping+0x18>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	f003 0307 	and.w	r3, r3, #7
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	db0b      	blt.n	800211a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	f003 021f 	and.w	r2, r3, #31
 8002108:	4907      	ldr	r1, [pc, #28]	; (8002128 <__NVIC_EnableIRQ+0x38>)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	095b      	lsrs	r3, r3, #5
 8002110:	2001      	movs	r0, #1
 8002112:	fa00 f202 	lsl.w	r2, r0, r2
 8002116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000e100 	.word	0xe000e100

0800212c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	6039      	str	r1, [r7, #0]
 8002136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213c:	2b00      	cmp	r3, #0
 800213e:	db0a      	blt.n	8002156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	b2da      	uxtb	r2, r3
 8002144:	490c      	ldr	r1, [pc, #48]	; (8002178 <__NVIC_SetPriority+0x4c>)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	0112      	lsls	r2, r2, #4
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	440b      	add	r3, r1
 8002150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002154:	e00a      	b.n	800216c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4908      	ldr	r1, [pc, #32]	; (800217c <__NVIC_SetPriority+0x50>)
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	3b04      	subs	r3, #4
 8002164:	0112      	lsls	r2, r2, #4
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	440b      	add	r3, r1
 800216a:	761a      	strb	r2, [r3, #24]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000e100 	.word	0xe000e100
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002180:	b480      	push	{r7}
 8002182:	b089      	sub	sp, #36	; 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f1c3 0307 	rsb	r3, r3, #7
 800219a:	2b04      	cmp	r3, #4
 800219c:	bf28      	it	cs
 800219e:	2304      	movcs	r3, #4
 80021a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3304      	adds	r3, #4
 80021a6:	2b06      	cmp	r3, #6
 80021a8:	d902      	bls.n	80021b0 <NVIC_EncodePriority+0x30>
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3b03      	subs	r3, #3
 80021ae:	e000      	b.n	80021b2 <NVIC_EncodePriority+0x32>
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	f04f 32ff 	mov.w	r2, #4294967295
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43da      	mvns	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	401a      	ands	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c8:	f04f 31ff 	mov.w	r1, #4294967295
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	fa01 f303 	lsl.w	r3, r1, r3
 80021d2:	43d9      	mvns	r1, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	4313      	orrs	r3, r2
         );
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3724      	adds	r7, #36	; 0x24
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f8:	d301      	bcc.n	80021fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fa:	2301      	movs	r3, #1
 80021fc:	e00f      	b.n	800221e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fe:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <SysTick_Config+0x40>)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3b01      	subs	r3, #1
 8002204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002206:	210f      	movs	r1, #15
 8002208:	f04f 30ff 	mov.w	r0, #4294967295
 800220c:	f7ff ff8e 	bl	800212c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <SysTick_Config+0x40>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002216:	4b04      	ldr	r3, [pc, #16]	; (8002228 <SysTick_Config+0x40>)
 8002218:	2207      	movs	r2, #7
 800221a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	e000e010 	.word	0xe000e010

0800222c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b07      	cmp	r3, #7
 8002238:	d00f      	beq.n	800225a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b06      	cmp	r3, #6
 800223e:	d00c      	beq.n	800225a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b05      	cmp	r3, #5
 8002244:	d009      	beq.n	800225a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b04      	cmp	r3, #4
 800224a:	d006      	beq.n	800225a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b03      	cmp	r3, #3
 8002250:	d003      	beq.n	800225a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002252:	2192      	movs	r1, #146	; 0x92
 8002254:	4804      	ldr	r0, [pc, #16]	; (8002268 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002256:	f7ff f988 	bl	800156a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ff16 	bl	800208c <__NVIC_SetPriorityGrouping>
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	08006d48 	.word	0x08006d48

0800226c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b0f      	cmp	r3, #15
 8002282:	d903      	bls.n	800228c <HAL_NVIC_SetPriority+0x20>
 8002284:	21aa      	movs	r1, #170	; 0xaa
 8002286:	480e      	ldr	r0, [pc, #56]	; (80022c0 <HAL_NVIC_SetPriority+0x54>)
 8002288:	f7ff f96f 	bl	800156a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b0f      	cmp	r3, #15
 8002290:	d903      	bls.n	800229a <HAL_NVIC_SetPriority+0x2e>
 8002292:	21ab      	movs	r1, #171	; 0xab
 8002294:	480a      	ldr	r0, [pc, #40]	; (80022c0 <HAL_NVIC_SetPriority+0x54>)
 8002296:	f7ff f968 	bl	800156a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800229a:	f7ff ff1b 	bl	80020d4 <__NVIC_GetPriorityGrouping>
 800229e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68b9      	ldr	r1, [r7, #8]
 80022a4:	6978      	ldr	r0, [r7, #20]
 80022a6:	f7ff ff6b 	bl	8002180 <NVIC_EncodePriority>
 80022aa:	4602      	mov	r2, r0
 80022ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b0:	4611      	mov	r1, r2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff ff3a 	bl	800212c <__NVIC_SetPriority>
}
 80022b8:	bf00      	nop
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	08006d48 	.word	0x08006d48

080022c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	da03      	bge.n	80022de <HAL_NVIC_EnableIRQ+0x1a>
 80022d6:	21be      	movs	r1, #190	; 0xbe
 80022d8:	4805      	ldr	r0, [pc, #20]	; (80022f0 <HAL_NVIC_EnableIRQ+0x2c>)
 80022da:	f7ff f946 	bl	800156a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff ff04 	bl	80020f0 <__NVIC_EnableIRQ>
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	08006d48 	.word	0x08006d48

080022f4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff ff73 	bl	80021e8 <SysTick_Config>
 8002302:	4603      	mov	r3, r0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e0a5      	b.n	800246a <HAL_CRC_Init+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a54      	ldr	r2, [pc, #336]	; (8002474 <HAL_CRC_Init+0x168>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d003      	beq.n	8002330 <HAL_CRC_Init+0x24>
 8002328:	2170      	movs	r1, #112	; 0x70
 800232a:	4853      	ldr	r0, [pc, #332]	; (8002478 <HAL_CRC_Init+0x16c>)
 800232c:	f7ff f91d 	bl	800156a <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	7f5b      	ldrb	r3, [r3, #29]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d105      	bne.n	8002346 <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7fe f91b 	bl	800057c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2202      	movs	r2, #2
 800234a:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	791b      	ldrb	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <HAL_CRC_Init+0x58>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	791b      	ldrb	r3, [r3, #4]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d003      	beq.n	8002364 <HAL_CRC_Init+0x58>
 800235c:	217e      	movs	r1, #126	; 0x7e
 800235e:	4846      	ldr	r0, [pc, #280]	; (8002478 <HAL_CRC_Init+0x16c>)
 8002360:	f7ff f903 	bl	800156a <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	791b      	ldrb	r3, [r3, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10c      	bne.n	8002386 <HAL_CRC_Init+0x7a>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a42      	ldr	r2, [pc, #264]	; (800247c <HAL_CRC_Init+0x170>)
 8002372:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0218 	bic.w	r2, r2, #24
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	e00c      	b.n	80023a0 <HAL_CRC_Init+0x94>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6899      	ldr	r1, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	461a      	mov	r2, r3
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f875 	bl	8002480 <HAL_CRCEx_Polynomial_Set>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_CRC_Init+0x94>
    {
      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e064      	b.n	800246a <HAL_CRC_Init+0x15e>
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	795b      	ldrb	r3, [r3, #5]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d007      	beq.n	80023b8 <HAL_CRC_Init+0xac>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	795b      	ldrb	r3, [r3, #5]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d003      	beq.n	80023b8 <HAL_CRC_Init+0xac>
 80023b0:	2190      	movs	r1, #144	; 0x90
 80023b2:	4831      	ldr	r0, [pc, #196]	; (8002478 <HAL_CRC_Init+0x16c>)
 80023b4:	f7ff f8d9 	bl	800156a <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	795b      	ldrb	r3, [r3, #5]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d105      	bne.n	80023cc <HAL_CRC_Init+0xc0>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f04f 32ff 	mov.w	r2, #4294967295
 80023c8:	611a      	str	r2, [r3, #16]
 80023ca:	e004      	b.n	80023d6 <HAL_CRC_Init+0xca>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6912      	ldr	r2, [r2, #16]
 80023d4:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00f      	beq.n	80023fe <HAL_CRC_Init+0xf2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	2b20      	cmp	r3, #32
 80023e4:	d00b      	beq.n	80023fe <HAL_CRC_Init+0xf2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	2b40      	cmp	r3, #64	; 0x40
 80023ec:	d007      	beq.n	80023fe <HAL_CRC_Init+0xf2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	2b60      	cmp	r3, #96	; 0x60
 80023f4:	d003      	beq.n	80023fe <HAL_CRC_Init+0xf2>
 80023f6:	219c      	movs	r1, #156	; 0x9c
 80023f8:	481f      	ldr	r0, [pc, #124]	; (8002478 <HAL_CRC_Init+0x16c>)
 80023fa:	f7ff f8b6 	bl	800156a <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	695a      	ldr	r2, [r3, #20]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d007      	beq.n	800242c <HAL_CRC_Init+0x120>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	2b80      	cmp	r3, #128	; 0x80
 8002422:	d003      	beq.n	800242c <HAL_CRC_Init+0x120>
 8002424:	21a0      	movs	r1, #160	; 0xa0
 8002426:	4814      	ldr	r0, [pc, #80]	; (8002478 <HAL_CRC_Init+0x16c>)
 8002428:	f7ff f89f 	bl	800156a <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699a      	ldr	r2, [r3, #24]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	609a      	str	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d00b      	beq.n	8002462 <HAL_CRC_Init+0x156>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d007      	beq.n	8002462 <HAL_CRC_Init+0x156>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	2b03      	cmp	r3, #3
 8002458:	d003      	beq.n	8002462 <HAL_CRC_Init+0x156>
 800245a:	21a5      	movs	r1, #165	; 0xa5
 800245c:	4806      	ldr	r0, [pc, #24]	; (8002478 <HAL_CRC_Init+0x16c>)
 800245e:	f7ff f884 	bl	800156a <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40023000 	.word	0x40023000
 8002478:	08006d84 	.word	0x08006d84
 800247c:	04c11db7 	.word	0x04c11db7

08002480 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002490:	231f      	movs	r3, #31
 8002492:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00c      	beq.n	80024b4 <HAL_CRCEx_Polynomial_Set+0x34>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b08      	cmp	r3, #8
 800249e:	d009      	beq.n	80024b4 <HAL_CRCEx_Polynomial_Set+0x34>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b10      	cmp	r3, #16
 80024a4:	d006      	beq.n	80024b4 <HAL_CRCEx_Polynomial_Set+0x34>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b18      	cmp	r3, #24
 80024aa:	d003      	beq.n	80024b4 <HAL_CRCEx_Polynomial_Set+0x34>
 80024ac:	215f      	movs	r1, #95	; 0x5f
 80024ae:	483e      	ldr	r0, [pc, #248]	; (80025a8 <HAL_CRCEx_Polynomial_Set+0x128>)
 80024b0:	f7ff f85b 	bl	800156a <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80024b4:	bf00      	nop
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1e5a      	subs	r2, r3, #1
 80024ba:	613a      	str	r2, [r7, #16]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d009      	beq.n	80024d4 <HAL_CRCEx_Polynomial_Set+0x54>
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	f003 031f 	and.w	r3, r3, #31
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	fa22 f303 	lsr.w	r3, r2, r3
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_CRCEx_Polynomial_Set+0x36>
  {
  }

  switch (PolyLength)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b18      	cmp	r3, #24
 80024d8:	d846      	bhi.n	8002568 <HAL_CRCEx_Polynomial_Set+0xe8>
 80024da:	a201      	add	r2, pc, #4	; (adr r2, 80024e0 <HAL_CRCEx_Polynomial_Set+0x60>)
 80024dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e0:	0800256f 	.word	0x0800256f
 80024e4:	08002569 	.word	0x08002569
 80024e8:	08002569 	.word	0x08002569
 80024ec:	08002569 	.word	0x08002569
 80024f0:	08002569 	.word	0x08002569
 80024f4:	08002569 	.word	0x08002569
 80024f8:	08002569 	.word	0x08002569
 80024fc:	08002569 	.word	0x08002569
 8002500:	0800255d 	.word	0x0800255d
 8002504:	08002569 	.word	0x08002569
 8002508:	08002569 	.word	0x08002569
 800250c:	08002569 	.word	0x08002569
 8002510:	08002569 	.word	0x08002569
 8002514:	08002569 	.word	0x08002569
 8002518:	08002569 	.word	0x08002569
 800251c:	08002569 	.word	0x08002569
 8002520:	08002551 	.word	0x08002551
 8002524:	08002569 	.word	0x08002569
 8002528:	08002569 	.word	0x08002569
 800252c:	08002569 	.word	0x08002569
 8002530:	08002569 	.word	0x08002569
 8002534:	08002569 	.word	0x08002569
 8002538:	08002569 	.word	0x08002569
 800253c:	08002569 	.word	0x08002569
 8002540:	08002545 	.word	0x08002545
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	2b06      	cmp	r3, #6
 8002548:	d913      	bls.n	8002572 <HAL_CRCEx_Polynomial_Set+0xf2>
      {
        status =   HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800254e:	e010      	b.n	8002572 <HAL_CRCEx_Polynomial_Set+0xf2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	2b07      	cmp	r3, #7
 8002554:	d90f      	bls.n	8002576 <HAL_CRCEx_Polynomial_Set+0xf6>
      {
        status =   HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800255a:	e00c      	b.n	8002576 <HAL_CRCEx_Polynomial_Set+0xf6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	2b0f      	cmp	r3, #15
 8002560:	d90b      	bls.n	800257a <HAL_CRCEx_Polynomial_Set+0xfa>
      {
        status =   HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002566:	e008      	b.n	800257a <HAL_CRCEx_Polynomial_Set+0xfa>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	75fb      	strb	r3, [r7, #23]
      break;
 800256c:	e006      	b.n	800257c <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 800256e:	bf00      	nop
 8002570:	e004      	b.n	800257c <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8002572:	bf00      	nop
 8002574:	e002      	b.n	800257c <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8002576:	bf00      	nop
 8002578:	e000      	b.n	800257c <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 800257a:	bf00      	nop
  }
  if (status == HAL_OK)
 800257c:	7dfb      	ldrb	r3, [r7, #23]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10d      	bne.n	800259e <HAL_CRCEx_Polynomial_Set+0x11e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f023 0118 	bic.w	r1, r3, #24
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	430a      	orrs	r2, r1
 800259c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800259e:	7dfb      	ldrb	r3, [r7, #23]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	08006dbc 	.word	0x08006dbc

080025ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d004      	beq.n	80025ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2280      	movs	r2, #128	; 0x80
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e00c      	b.n	80025e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2205      	movs	r2, #5
 80025ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0201 	bic.w	r2, r2, #1
 80025e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002606:	2300      	movs	r3, #0
 8002608:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a42      	ldr	r2, [pc, #264]	; (8002718 <HAL_GPIO_Init+0x128>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d02b      	beq.n	800266a <HAL_GPIO_Init+0x7a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a41      	ldr	r2, [pc, #260]	; (800271c <HAL_GPIO_Init+0x12c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d027      	beq.n	800266a <HAL_GPIO_Init+0x7a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a40      	ldr	r2, [pc, #256]	; (8002720 <HAL_GPIO_Init+0x130>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d023      	beq.n	800266a <HAL_GPIO_Init+0x7a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a3f      	ldr	r2, [pc, #252]	; (8002724 <HAL_GPIO_Init+0x134>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d01f      	beq.n	800266a <HAL_GPIO_Init+0x7a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a3e      	ldr	r2, [pc, #248]	; (8002728 <HAL_GPIO_Init+0x138>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d01b      	beq.n	800266a <HAL_GPIO_Init+0x7a>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a3d      	ldr	r2, [pc, #244]	; (800272c <HAL_GPIO_Init+0x13c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d017      	beq.n	800266a <HAL_GPIO_Init+0x7a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a3c      	ldr	r2, [pc, #240]	; (8002730 <HAL_GPIO_Init+0x140>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d013      	beq.n	800266a <HAL_GPIO_Init+0x7a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a3b      	ldr	r2, [pc, #236]	; (8002734 <HAL_GPIO_Init+0x144>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d00f      	beq.n	800266a <HAL_GPIO_Init+0x7a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a3a      	ldr	r2, [pc, #232]	; (8002738 <HAL_GPIO_Init+0x148>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00b      	beq.n	800266a <HAL_GPIO_Init+0x7a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a39      	ldr	r2, [pc, #228]	; (800273c <HAL_GPIO_Init+0x14c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d007      	beq.n	800266a <HAL_GPIO_Init+0x7a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a38      	ldr	r2, [pc, #224]	; (8002740 <HAL_GPIO_Init+0x150>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x7a>
 8002662:	21b1      	movs	r1, #177	; 0xb1
 8002664:	4837      	ldr	r0, [pc, #220]	; (8002744 <HAL_GPIO_Init+0x154>)
 8002666:	f7fe ff80 	bl	800156a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d103      	bne.n	800267c <HAL_GPIO_Init+0x8c>
 8002674:	21b2      	movs	r1, #178	; 0xb2
 8002676:	4833      	ldr	r0, [pc, #204]	; (8002744 <HAL_GPIO_Init+0x154>)
 8002678:	f7fe ff77 	bl	800156a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d035      	beq.n	80026f0 <HAL_GPIO_Init+0x100>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d031      	beq.n	80026f0 <HAL_GPIO_Init+0x100>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b11      	cmp	r3, #17
 8002692:	d02d      	beq.n	80026f0 <HAL_GPIO_Init+0x100>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d029      	beq.n	80026f0 <HAL_GPIO_Init+0x100>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b12      	cmp	r3, #18
 80026a2:	d025      	beq.n	80026f0 <HAL_GPIO_Init+0x100>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4a27      	ldr	r2, [pc, #156]	; (8002748 <HAL_GPIO_Init+0x158>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d020      	beq.n	80026f0 <HAL_GPIO_Init+0x100>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	4a26      	ldr	r2, [pc, #152]	; (800274c <HAL_GPIO_Init+0x15c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d01b      	beq.n	80026f0 <HAL_GPIO_Init+0x100>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4a24      	ldr	r2, [pc, #144]	; (8002750 <HAL_GPIO_Init+0x160>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d016      	beq.n	80026f0 <HAL_GPIO_Init+0x100>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	4a23      	ldr	r2, [pc, #140]	; (8002754 <HAL_GPIO_Init+0x164>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d011      	beq.n	80026f0 <HAL_GPIO_Init+0x100>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	4a21      	ldr	r2, [pc, #132]	; (8002758 <HAL_GPIO_Init+0x168>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d00c      	beq.n	80026f0 <HAL_GPIO_Init+0x100>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4a20      	ldr	r2, [pc, #128]	; (800275c <HAL_GPIO_Init+0x16c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d007      	beq.n	80026f0 <HAL_GPIO_Init+0x100>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x100>
 80026e8:	21b3      	movs	r1, #179	; 0xb3
 80026ea:	4816      	ldr	r0, [pc, #88]	; (8002744 <HAL_GPIO_Init+0x154>)
 80026ec:	f7fe ff3d 	bl	800156a <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00b      	beq.n	8002710 <HAL_GPIO_Init+0x120>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d007      	beq.n	8002710 <HAL_GPIO_Init+0x120>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b02      	cmp	r3, #2
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x120>
 8002708:	21b4      	movs	r1, #180	; 0xb4
 800270a:	480e      	ldr	r0, [pc, #56]	; (8002744 <HAL_GPIO_Init+0x154>)
 800270c:	f7fe ff2d 	bl	800156a <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002710:	2300      	movs	r3, #0
 8002712:	61fb      	str	r3, [r7, #28]
 8002714:	e2d6      	b.n	8002cc4 <HAL_GPIO_Init+0x6d4>
 8002716:	bf00      	nop
 8002718:	40020000 	.word	0x40020000
 800271c:	40020400 	.word	0x40020400
 8002720:	40020800 	.word	0x40020800
 8002724:	40020c00 	.word	0x40020c00
 8002728:	40021000 	.word	0x40021000
 800272c:	40021400 	.word	0x40021400
 8002730:	40021800 	.word	0x40021800
 8002734:	40021c00 	.word	0x40021c00
 8002738:	40022000 	.word	0x40022000
 800273c:	40022400 	.word	0x40022400
 8002740:	40022800 	.word	0x40022800
 8002744:	08006df8 	.word	0x08006df8
 8002748:	10110000 	.word	0x10110000
 800274c:	10210000 	.word	0x10210000
 8002750:	10310000 	.word	0x10310000
 8002754:	10120000 	.word	0x10120000
 8002758:	10220000 	.word	0x10220000
 800275c:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002760:	2201      	movs	r2, #1
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	429a      	cmp	r2, r3
 800277a:	f040 82a0 	bne.w	8002cbe <HAL_GPIO_Init+0x6ce>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d00b      	beq.n	800279e <HAL_GPIO_Init+0x1ae>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d007      	beq.n	800279e <HAL_GPIO_Init+0x1ae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002792:	2b11      	cmp	r3, #17
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x1ae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b12      	cmp	r3, #18
 800279c:	d144      	bne.n	8002828 <HAL_GPIO_Init+0x238>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00f      	beq.n	80027c6 <HAL_GPIO_Init+0x1d6>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d00b      	beq.n	80027c6 <HAL_GPIO_Init+0x1d6>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d007      	beq.n	80027c6 <HAL_GPIO_Init+0x1d6>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_Init+0x1d6>
 80027be:	21c6      	movs	r1, #198	; 0xc6
 80027c0:	482a      	ldr	r0, [pc, #168]	; (800286c <HAL_GPIO_Init+0x27c>)
 80027c2:	f7fe fed2 	bl	800156a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	2203      	movs	r2, #3
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027fc:	2201      	movs	r2, #1
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	f003 0201 	and.w	r2, r3, #1
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	2203      	movs	r2, #3
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d007      	beq.n	8002870 <HAL_GPIO_Init+0x280>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b12      	cmp	r3, #18
 8002866:	f040 814b 	bne.w	8002b00 <HAL_GPIO_Init+0x510>
 800286a:	e001      	b.n	8002870 <HAL_GPIO_Init+0x280>
 800286c:	08006df8 	.word	0x08006df8
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 811f 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b01      	cmp	r3, #1
 8002880:	f000 811a 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 8115 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 8110 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 810b 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	f000 8106 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	f000 8101 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	f000 80fc 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	f000 80f7 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	f000 80f2 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	2b03      	cmp	r3, #3
 80028da:	f000 80ed 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	f000 80e8 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	f000 80e3 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	f000 80de 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	2b03      	cmp	r3, #3
 8002902:	f000 80d9 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	2b04      	cmp	r3, #4
 800290c:	f000 80d4 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	2b04      	cmp	r3, #4
 8002916:	f000 80cf 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2b04      	cmp	r3, #4
 8002920:	f000 80ca 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	2b04      	cmp	r3, #4
 800292a:	f000 80c5 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	2b04      	cmp	r3, #4
 8002934:	f000 80c0 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	2b05      	cmp	r3, #5
 800293e:	f000 80bb 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	2b05      	cmp	r3, #5
 8002948:	f000 80b6 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	2b05      	cmp	r3, #5
 8002952:	f000 80b1 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	2b05      	cmp	r3, #5
 800295c:	f000 80ac 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b05      	cmp	r3, #5
 8002966:	f000 80a7 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	2b05      	cmp	r3, #5
 8002970:	f000 80a2 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	2b06      	cmp	r3, #6
 800297a:	f000 809d 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	2b06      	cmp	r3, #6
 8002984:	f000 8098 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	2b07      	cmp	r3, #7
 800298e:	f000 8093 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	2b07      	cmp	r3, #7
 8002998:	f000 808e 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	2b07      	cmp	r3, #7
 80029a2:	f000 8089 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b07      	cmp	r3, #7
 80029ac:	f000 8084 	beq.w	8002ab8 <HAL_GPIO_Init+0x4c8>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	2b07      	cmp	r3, #7
 80029b6:	d07f      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	2b07      	cmp	r3, #7
 80029be:	d07b      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	2b07      	cmp	r3, #7
 80029c6:	d077      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d073      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d06f      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d06b      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d067      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d063      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d05f      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d05b      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	2b09      	cmp	r3, #9
 8002a06:	d057      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	2b09      	cmp	r3, #9
 8002a0e:	d053      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	2b09      	cmp	r3, #9
 8002a16:	d04f      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	2b09      	cmp	r3, #9
 8002a1e:	d04b      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	2b09      	cmp	r3, #9
 8002a26:	d047      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	2b09      	cmp	r3, #9
 8002a2e:	d043      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	2b09      	cmp	r3, #9
 8002a36:	d03f      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	2b0a      	cmp	r3, #10
 8002a3e:	d03b      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	2b0a      	cmp	r3, #10
 8002a46:	d037      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	2b0a      	cmp	r3, #10
 8002a4e:	d033      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	2b0a      	cmp	r3, #10
 8002a56:	d02f      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	2b0b      	cmp	r3, #11
 8002a5e:	d02b      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	2b0a      	cmp	r3, #10
 8002a66:	d027      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	2b0b      	cmp	r3, #11
 8002a6e:	d023      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	2b0b      	cmp	r3, #11
 8002a76:	d01f      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	2b0c      	cmp	r3, #12
 8002a7e:	d01b      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	2b0c      	cmp	r3, #12
 8002a86:	d017      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	2b0c      	cmp	r3, #12
 8002a8e:	d013      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	2b0f      	cmp	r3, #15
 8002a96:	d00f      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	2b0d      	cmp	r3, #13
 8002a9e:	d00b      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	2b0e      	cmp	r3, #14
 8002aa6:	d007      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	2b0d      	cmp	r3, #13
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x4c8>
 8002ab0:	21de      	movs	r1, #222	; 0xde
 8002ab2:	4888      	ldr	r0, [pc, #544]	; (8002cd4 <HAL_GPIO_Init+0x6e4>)
 8002ab4:	f7fe fd59 	bl	800156a <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	08da      	lsrs	r2, r3, #3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3208      	adds	r2, #8
 8002ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	220f      	movs	r2, #15
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	08da      	lsrs	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3208      	adds	r2, #8
 8002afa:	69b9      	ldr	r1, [r7, #24]
 8002afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 0203 	and.w	r2, r3, #3
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80be 	beq.w	8002cbe <HAL_GPIO_Init+0x6ce>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b42:	4b65      	ldr	r3, [pc, #404]	; (8002cd8 <HAL_GPIO_Init+0x6e8>)
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	4a64      	ldr	r2, [pc, #400]	; (8002cd8 <HAL_GPIO_Init+0x6e8>)
 8002b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b4e:	4b62      	ldr	r3, [pc, #392]	; (8002cd8 <HAL_GPIO_Init+0x6e8>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b5a:	4a60      	ldr	r2, [pc, #384]	; (8002cdc <HAL_GPIO_Init+0x6ec>)
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	089b      	lsrs	r3, r3, #2
 8002b60:	3302      	adds	r3, #2
 8002b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	220f      	movs	r2, #15
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a57      	ldr	r2, [pc, #348]	; (8002ce0 <HAL_GPIO_Init+0x6f0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d037      	beq.n	8002bf6 <HAL_GPIO_Init+0x606>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a56      	ldr	r2, [pc, #344]	; (8002ce4 <HAL_GPIO_Init+0x6f4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d031      	beq.n	8002bf2 <HAL_GPIO_Init+0x602>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a55      	ldr	r2, [pc, #340]	; (8002ce8 <HAL_GPIO_Init+0x6f8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d02b      	beq.n	8002bee <HAL_GPIO_Init+0x5fe>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a54      	ldr	r2, [pc, #336]	; (8002cec <HAL_GPIO_Init+0x6fc>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d025      	beq.n	8002bea <HAL_GPIO_Init+0x5fa>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a53      	ldr	r2, [pc, #332]	; (8002cf0 <HAL_GPIO_Init+0x700>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d01f      	beq.n	8002be6 <HAL_GPIO_Init+0x5f6>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a52      	ldr	r2, [pc, #328]	; (8002cf4 <HAL_GPIO_Init+0x704>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d019      	beq.n	8002be2 <HAL_GPIO_Init+0x5f2>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a51      	ldr	r2, [pc, #324]	; (8002cf8 <HAL_GPIO_Init+0x708>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d013      	beq.n	8002bde <HAL_GPIO_Init+0x5ee>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a50      	ldr	r2, [pc, #320]	; (8002cfc <HAL_GPIO_Init+0x70c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00d      	beq.n	8002bda <HAL_GPIO_Init+0x5ea>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a4f      	ldr	r2, [pc, #316]	; (8002d00 <HAL_GPIO_Init+0x710>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d007      	beq.n	8002bd6 <HAL_GPIO_Init+0x5e6>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a4e      	ldr	r2, [pc, #312]	; (8002d04 <HAL_GPIO_Init+0x714>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d101      	bne.n	8002bd2 <HAL_GPIO_Init+0x5e2>
 8002bce:	2309      	movs	r3, #9
 8002bd0:	e012      	b.n	8002bf8 <HAL_GPIO_Init+0x608>
 8002bd2:	230a      	movs	r3, #10
 8002bd4:	e010      	b.n	8002bf8 <HAL_GPIO_Init+0x608>
 8002bd6:	2308      	movs	r3, #8
 8002bd8:	e00e      	b.n	8002bf8 <HAL_GPIO_Init+0x608>
 8002bda:	2307      	movs	r3, #7
 8002bdc:	e00c      	b.n	8002bf8 <HAL_GPIO_Init+0x608>
 8002bde:	2306      	movs	r3, #6
 8002be0:	e00a      	b.n	8002bf8 <HAL_GPIO_Init+0x608>
 8002be2:	2305      	movs	r3, #5
 8002be4:	e008      	b.n	8002bf8 <HAL_GPIO_Init+0x608>
 8002be6:	2304      	movs	r3, #4
 8002be8:	e006      	b.n	8002bf8 <HAL_GPIO_Init+0x608>
 8002bea:	2303      	movs	r3, #3
 8002bec:	e004      	b.n	8002bf8 <HAL_GPIO_Init+0x608>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e002      	b.n	8002bf8 <HAL_GPIO_Init+0x608>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <HAL_GPIO_Init+0x608>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	f002 0203 	and.w	r2, r2, #3
 8002bfe:	0092      	lsls	r2, r2, #2
 8002c00:	4093      	lsls	r3, r2
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c08:	4934      	ldr	r1, [pc, #208]	; (8002cdc <HAL_GPIO_Init+0x6ec>)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	089b      	lsrs	r3, r3, #2
 8002c0e:	3302      	adds	r3, #2
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c16:	4b3c      	ldr	r3, [pc, #240]	; (8002d08 <HAL_GPIO_Init+0x718>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_GPIO_Init+0x64a>
        {
          temp |= iocurrent;
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c3a:	4a33      	ldr	r2, [pc, #204]	; (8002d08 <HAL_GPIO_Init+0x718>)
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c40:	4b31      	ldr	r3, [pc, #196]	; (8002d08 <HAL_GPIO_Init+0x718>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_GPIO_Init+0x674>
        {
          temp |= iocurrent;
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c64:	4a28      	ldr	r2, [pc, #160]	; (8002d08 <HAL_GPIO_Init+0x718>)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c6a:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <HAL_GPIO_Init+0x718>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	43db      	mvns	r3, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4013      	ands	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_Init+0x69e>
        {
          temp |= iocurrent;
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c8e:	4a1e      	ldr	r2, [pc, #120]	; (8002d08 <HAL_GPIO_Init+0x718>)
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c94:	4b1c      	ldr	r3, [pc, #112]	; (8002d08 <HAL_GPIO_Init+0x718>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <HAL_GPIO_Init+0x6c8>
        {
          temp |= iocurrent;
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cb8:	4a13      	ldr	r2, [pc, #76]	; (8002d08 <HAL_GPIO_Init+0x718>)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	61fb      	str	r3, [r7, #28]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	2b0f      	cmp	r3, #15
 8002cc8:	f67f ad4a 	bls.w	8002760 <HAL_GPIO_Init+0x170>
      }
    }
  }
}
 8002ccc:	bf00      	nop
 8002cce:	3720      	adds	r7, #32
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	08006df8 	.word	0x08006df8
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40013800 	.word	0x40013800
 8002ce0:	40020000 	.word	0x40020000
 8002ce4:	40020400 	.word	0x40020400
 8002ce8:	40020800 	.word	0x40020800
 8002cec:	40020c00 	.word	0x40020c00
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40021400 	.word	0x40021400
 8002cf8:	40021800 	.word	0x40021800
 8002cfc:	40021c00 	.word	0x40021c00
 8002d00:	40022000 	.word	0x40022000
 8002d04:	40022400 	.word	0x40022400
 8002d08:	40013c00 	.word	0x40013c00

08002d0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002d18:	887b      	ldrh	r3, [r7, #2]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d104      	bne.n	8002d28 <HAL_GPIO_ReadPin+0x1c>
 8002d1e:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8002d22:	4809      	ldr	r0, [pc, #36]	; (8002d48 <HAL_GPIO_ReadPin+0x3c>)
 8002d24:	f7fe fc21 	bl	800156a <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	887b      	ldrh	r3, [r7, #2]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
 8002d38:	e001      	b.n	8002d3e <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	08006df8 	.word	0x08006df8

08002d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	807b      	strh	r3, [r7, #2]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002d5c:	887b      	ldrh	r3, [r7, #2]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d104      	bne.n	8002d6c <HAL_GPIO_WritePin+0x20>
 8002d62:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8002d66:	480e      	ldr	r0, [pc, #56]	; (8002da0 <HAL_GPIO_WritePin+0x54>)
 8002d68:	f7fe fbff 	bl	800156a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002d6c:	787b      	ldrb	r3, [r7, #1]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d007      	beq.n	8002d82 <HAL_GPIO_WritePin+0x36>
 8002d72:	787b      	ldrb	r3, [r7, #1]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d004      	beq.n	8002d82 <HAL_GPIO_WritePin+0x36>
 8002d78:	f240 119b 	movw	r1, #411	; 0x19b
 8002d7c:	4808      	ldr	r0, [pc, #32]	; (8002da0 <HAL_GPIO_WritePin+0x54>)
 8002d7e:	f7fe fbf4 	bl	800156a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002d82:	787b      	ldrb	r3, [r7, #1]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d88:	887a      	ldrh	r2, [r7, #2]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d8e:	e003      	b.n	8002d98 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d90:	887b      	ldrh	r3, [r7, #2]
 8002d92:	041a      	lsls	r2, r3, #16
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	619a      	str	r2, [r3, #24]
}
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	08006df8 	.word	0x08006df8

08002da4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002db0:	887b      	ldrh	r3, [r7, #2]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d104      	bne.n	8002dc0 <HAL_GPIO_TogglePin+0x1c>
 8002db6:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8002dba:	480a      	ldr	r0, [pc, #40]	; (8002de4 <HAL_GPIO_TogglePin+0x40>)
 8002dbc:	f7fe fbd5 	bl	800156a <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	887b      	ldrh	r3, [r7, #2]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d004      	beq.n	8002dd6 <HAL_GPIO_TogglePin+0x32>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002dcc:	887b      	ldrh	r3, [r7, #2]
 8002dce:	041a      	lsls	r2, r3, #16
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002dd4:	e002      	b.n	8002ddc <HAL_GPIO_TogglePin+0x38>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dd6:	887a      	ldrh	r2, [r7, #2]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	619a      	str	r2, [r3, #24]
}
 8002ddc:	bf00      	nop
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	08006df8 	.word	0x08006df8

08002de8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002df2:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002df4:	695a      	ldr	r2, [r3, #20]
 8002df6:	88fb      	ldrh	r3, [r7, #6]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d006      	beq.n	8002e0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dfe:	4a05      	ldr	r2, [pc, #20]	; (8002e14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e00:	88fb      	ldrh	r3, [r7, #6]
 8002e02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e04:	88fb      	ldrh	r3, [r7, #6]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 f806 	bl	8002e18 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40013c00 	.word	0x40013c00

08002e18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
	...

08002e30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e3a:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	4a22      	ldr	r2, [pc, #136]	; (8002ec8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e44:	6413      	str	r3, [r2, #64]	; 0x40
 8002e46:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e52:	4b1e      	ldr	r3, [pc, #120]	; (8002ecc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a1d      	ldr	r2, [pc, #116]	; (8002ecc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e5e:	f7ff f8e7 	bl	8002030 <HAL_GetTick>
 8002e62:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e64:	e009      	b.n	8002e7a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e66:	f7ff f8e3 	bl	8002030 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e74:	d901      	bls.n	8002e7a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e022      	b.n	8002ec0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e7a:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e86:	d1ee      	bne.n	8002e66 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e88:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a0f      	ldr	r2, [pc, #60]	; (8002ecc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e92:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e94:	f7ff f8cc 	bl	8002030 <HAL_GetTick>
 8002e98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e9a:	e009      	b.n	8002eb0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e9c:	f7ff f8c8 	bl	8002030 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eaa:	d901      	bls.n	8002eb0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e007      	b.n	8002ec0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ebc:	d1ee      	bne.n	8002e9c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40007000 	.word	0x40007000

08002ed0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e35c      	b.n	80035a0 <HAL_RCC_OscConfig+0x6d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2b0f      	cmp	r3, #15
 8002eec:	d904      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x28>
 8002eee:	f240 1165 	movw	r1, #357	; 0x165
 8002ef2:	4892      	ldr	r0, [pc, #584]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	f7fe fb39 	bl	800156a <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 809a 	beq.w	800303a <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00e      	beq.n	8002f2c <HAL_RCC_OscConfig+0x5c>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f16:	d009      	beq.n	8002f2c <HAL_RCC_OscConfig+0x5c>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f20:	d004      	beq.n	8002f2c <HAL_RCC_OscConfig+0x5c>
 8002f22:	f240 116b 	movw	r1, #363	; 0x16b
 8002f26:	4885      	ldr	r0, [pc, #532]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f28:	f7fe fb1f 	bl	800156a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f2c:	4b84      	ldr	r3, [pc, #528]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 030c 	and.w	r3, r3, #12
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d00c      	beq.n	8002f52 <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f38:	4b81      	ldr	r3, [pc, #516]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 030c 	and.w	r3, r3, #12
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d112      	bne.n	8002f6a <HAL_RCC_OscConfig+0x9a>
 8002f44:	4b7e      	ldr	r3, [pc, #504]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f50:	d10b      	bne.n	8002f6a <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f52:	4b7b      	ldr	r3, [pc, #492]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d06c      	beq.n	8003038 <HAL_RCC_OscConfig+0x168>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d168      	bne.n	8003038 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e31a      	b.n	80035a0 <HAL_RCC_OscConfig+0x6d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f72:	d106      	bne.n	8002f82 <HAL_RCC_OscConfig+0xb2>
 8002f74:	4b72      	ldr	r3, [pc, #456]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a71      	ldr	r2, [pc, #452]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8002f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	e02e      	b.n	8002fe0 <HAL_RCC_OscConfig+0x110>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10c      	bne.n	8002fa4 <HAL_RCC_OscConfig+0xd4>
 8002f8a:	4b6d      	ldr	r3, [pc, #436]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a6c      	ldr	r2, [pc, #432]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8002f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	4b6a      	ldr	r3, [pc, #424]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a69      	ldr	r2, [pc, #420]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8002f9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	e01d      	b.n	8002fe0 <HAL_RCC_OscConfig+0x110>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0xf8>
 8002fae:	4b64      	ldr	r3, [pc, #400]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a63      	ldr	r2, [pc, #396]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8002fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	4b61      	ldr	r3, [pc, #388]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a60      	ldr	r2, [pc, #384]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8002fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	e00b      	b.n	8002fe0 <HAL_RCC_OscConfig+0x110>
 8002fc8:	4b5d      	ldr	r3, [pc, #372]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a5c      	ldr	r2, [pc, #368]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8002fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	4b5a      	ldr	r3, [pc, #360]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a59      	ldr	r2, [pc, #356]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8002fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d013      	beq.n	8003010 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7ff f822 	bl	8002030 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff0:	f7ff f81e 	bl	8002030 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b64      	cmp	r3, #100	; 0x64
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e2ce      	b.n	80035a0 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003002:	4b4f      	ldr	r3, [pc, #316]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x120>
 800300e:	e014      	b.n	800303a <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7ff f80e 	bl	8002030 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003018:	f7ff f80a 	bl	8002030 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b64      	cmp	r3, #100	; 0x64
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e2ba      	b.n	80035a0 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800302a:	4b45      	ldr	r3, [pc, #276]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0x148>
 8003036:	e000      	b.n	800303a <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 8084 	beq.w	8003150 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d008      	beq.n	8003062 <HAL_RCC_OscConfig+0x192>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d004      	beq.n	8003062 <HAL_RCC_OscConfig+0x192>
 8003058:	f240 119d 	movw	r1, #413	; 0x19d
 800305c:	4837      	ldr	r0, [pc, #220]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 800305e:	f7fe fa84 	bl	800156a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	2b1f      	cmp	r3, #31
 8003068:	d904      	bls.n	8003074 <HAL_RCC_OscConfig+0x1a4>
 800306a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800306e:	4833      	ldr	r0, [pc, #204]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8003070:	f7fe fa7b 	bl	800156a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003074:	4b32      	ldr	r3, [pc, #200]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 030c 	and.w	r3, r3, #12
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00b      	beq.n	8003098 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003080:	4b2f      	ldr	r3, [pc, #188]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 030c 	and.w	r3, r3, #12
 8003088:	2b08      	cmp	r3, #8
 800308a:	d11c      	bne.n	80030c6 <HAL_RCC_OscConfig+0x1f6>
 800308c:	4b2c      	ldr	r3, [pc, #176]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d116      	bne.n	80030c6 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003098:	4b29      	ldr	r3, [pc, #164]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d005      	beq.n	80030b0 <HAL_RCC_OscConfig+0x1e0>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e277      	b.n	80035a0 <HAL_RCC_OscConfig+0x6d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b0:	4b23      	ldr	r3, [pc, #140]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4920      	ldr	r1, [pc, #128]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c4:	e044      	b.n	8003150 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d023      	beq.n	8003116 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ce:	4b1c      	ldr	r3, [pc, #112]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1b      	ldr	r2, [pc, #108]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030da:	f7fe ffa9 	bl	8002030 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e2:	f7fe ffa5 	bl	8002030 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e255      	b.n	80035a0 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f4:	4b12      	ldr	r3, [pc, #72]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0f0      	beq.n	80030e2 <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003100:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	490c      	ldr	r1, [pc, #48]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8003110:	4313      	orrs	r3, r2
 8003112:	600b      	str	r3, [r1, #0]
 8003114:	e01c      	b.n	8003150 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a09      	ldr	r2, [pc, #36]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 800311c:	f023 0301 	bic.w	r3, r3, #1
 8003120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003122:	f7fe ff85 	bl	8002030 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003128:	e00c      	b.n	8003144 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800312a:	f7fe ff81 	bl	8002030 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d905      	bls.n	8003144 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e231      	b.n	80035a0 <HAL_RCC_OscConfig+0x6d0>
 800313c:	08006e34 	.word	0x08006e34
 8003140:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003144:	4b7e      	ldr	r3, [pc, #504]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1ec      	bne.n	800312a <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d043      	beq.n	80031e4 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_RCC_OscConfig+0x2a6>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d004      	beq.n	8003176 <HAL_RCC_OscConfig+0x2a6>
 800316c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8003170:	4874      	ldr	r0, [pc, #464]	; (8003344 <HAL_RCC_OscConfig+0x474>)
 8003172:	f7fe f9fa 	bl	800156a <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d019      	beq.n	80031b2 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800317e:	4b70      	ldr	r3, [pc, #448]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003182:	4a6f      	ldr	r2, [pc, #444]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318a:	f7fe ff51 	bl	8002030 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003192:	f7fe ff4d 	bl	8002030 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e1fd      	b.n	80035a0 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a4:	4b66      	ldr	r3, [pc, #408]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0f0      	beq.n	8003192 <HAL_RCC_OscConfig+0x2c2>
 80031b0:	e018      	b.n	80031e4 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b2:	4b63      	ldr	r3, [pc, #396]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b6:	4a62      	ldr	r2, [pc, #392]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031b8:	f023 0301 	bic.w	r3, r3, #1
 80031bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031be:	f7fe ff37 	bl	8002030 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c6:	f7fe ff33 	bl	8002030 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e1e3      	b.n	80035a0 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d8:	4b59      	ldr	r3, [pc, #356]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f0      	bne.n	80031c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80bc 	beq.w	800336a <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00c      	beq.n	8003214 <HAL_RCC_OscConfig+0x344>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d008      	beq.n	8003214 <HAL_RCC_OscConfig+0x344>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	2b05      	cmp	r3, #5
 8003208:	d004      	beq.n	8003214 <HAL_RCC_OscConfig+0x344>
 800320a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800320e:	484d      	ldr	r0, [pc, #308]	; (8003344 <HAL_RCC_OscConfig+0x474>)
 8003210:	f7fe f9ab 	bl	800156a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003214:	4b4a      	ldr	r3, [pc, #296]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10d      	bne.n	800323c <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003220:	4b47      	ldr	r3, [pc, #284]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	4a46      	ldr	r2, [pc, #280]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800322a:	6413      	str	r3, [r2, #64]	; 0x40
 800322c:	4b44      	ldr	r3, [pc, #272]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003238:	2301      	movs	r3, #1
 800323a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800323c:	4b42      	ldr	r3, [pc, #264]	; (8003348 <HAL_RCC_OscConfig+0x478>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003244:	2b00      	cmp	r3, #0
 8003246:	d118      	bne.n	800327a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003248:	4b3f      	ldr	r3, [pc, #252]	; (8003348 <HAL_RCC_OscConfig+0x478>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a3e      	ldr	r2, [pc, #248]	; (8003348 <HAL_RCC_OscConfig+0x478>)
 800324e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003252:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003254:	f7fe feec 	bl	8002030 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800325c:	f7fe fee8 	bl	8002030 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b64      	cmp	r3, #100	; 0x64
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e198      	b.n	80035a0 <HAL_RCC_OscConfig+0x6d0>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800326e:	4b36      	ldr	r3, [pc, #216]	; (8003348 <HAL_RCC_OscConfig+0x478>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d106      	bne.n	8003290 <HAL_RCC_OscConfig+0x3c0>
 8003282:	4b2f      	ldr	r3, [pc, #188]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	4a2e      	ldr	r2, [pc, #184]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	6713      	str	r3, [r2, #112]	; 0x70
 800328e:	e02d      	b.n	80032ec <HAL_RCC_OscConfig+0x41c>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10c      	bne.n	80032b2 <HAL_RCC_OscConfig+0x3e2>
 8003298:	4b29      	ldr	r3, [pc, #164]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800329a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329c:	4a28      	ldr	r2, [pc, #160]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800329e:	f023 0301 	bic.w	r3, r3, #1
 80032a2:	6713      	str	r3, [r2, #112]	; 0x70
 80032a4:	4b26      	ldr	r3, [pc, #152]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a8:	4a25      	ldr	r2, [pc, #148]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80032aa:	f023 0304 	bic.w	r3, r3, #4
 80032ae:	6713      	str	r3, [r2, #112]	; 0x70
 80032b0:	e01c      	b.n	80032ec <HAL_RCC_OscConfig+0x41c>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b05      	cmp	r3, #5
 80032b8:	d10c      	bne.n	80032d4 <HAL_RCC_OscConfig+0x404>
 80032ba:	4b21      	ldr	r3, [pc, #132]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	4a20      	ldr	r2, [pc, #128]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80032c0:	f043 0304 	orr.w	r3, r3, #4
 80032c4:	6713      	str	r3, [r2, #112]	; 0x70
 80032c6:	4b1e      	ldr	r3, [pc, #120]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ca:	4a1d      	ldr	r2, [pc, #116]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	6713      	str	r3, [r2, #112]	; 0x70
 80032d2:	e00b      	b.n	80032ec <HAL_RCC_OscConfig+0x41c>
 80032d4:	4b1a      	ldr	r3, [pc, #104]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	4a19      	ldr	r2, [pc, #100]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80032da:	f023 0301 	bic.w	r3, r3, #1
 80032de:	6713      	str	r3, [r2, #112]	; 0x70
 80032e0:	4b17      	ldr	r3, [pc, #92]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80032e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e4:	4a16      	ldr	r2, [pc, #88]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80032e6:	f023 0304 	bic.w	r3, r3, #4
 80032ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d015      	beq.n	8003320 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f4:	f7fe fe9c 	bl	8002030 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fa:	e00a      	b.n	8003312 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fc:	f7fe fe98 	bl	8002030 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	f241 3288 	movw	r2, #5000	; 0x1388
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e146      	b.n	80035a0 <HAL_RCC_OscConfig+0x6d0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003312:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0ee      	beq.n	80032fc <HAL_RCC_OscConfig+0x42c>
 800331e:	e01b      	b.n	8003358 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003320:	f7fe fe86 	bl	8002030 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003326:	e011      	b.n	800334c <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003328:	f7fe fe82 	bl	8002030 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f241 3288 	movw	r2, #5000	; 0x1388
 8003336:	4293      	cmp	r3, r2
 8003338:	d908      	bls.n	800334c <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e130      	b.n	80035a0 <HAL_RCC_OscConfig+0x6d0>
 800333e:	bf00      	nop
 8003340:	40023800 	.word	0x40023800
 8003344:	08006e34 	.word	0x08006e34
 8003348:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800334c:	4b96      	ldr	r3, [pc, #600]	; (80035a8 <HAL_RCC_OscConfig+0x6d8>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1e7      	bne.n	8003328 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003358:	7dfb      	ldrb	r3, [r7, #23]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d105      	bne.n	800336a <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800335e:	4b92      	ldr	r3, [pc, #584]	; (80035a8 <HAL_RCC_OscConfig+0x6d8>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	4a91      	ldr	r2, [pc, #580]	; (80035a8 <HAL_RCC_OscConfig+0x6d8>)
 8003364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003368:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00c      	beq.n	800338c <HAL_RCC_OscConfig+0x4bc>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d008      	beq.n	800338c <HAL_RCC_OscConfig+0x4bc>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d004      	beq.n	800338c <HAL_RCC_OscConfig+0x4bc>
 8003382:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8003386:	4889      	ldr	r0, [pc, #548]	; (80035ac <HAL_RCC_OscConfig+0x6dc>)
 8003388:	f7fe f8ef 	bl	800156a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 8104 	beq.w	800359e <HAL_RCC_OscConfig+0x6ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003396:	4b84      	ldr	r3, [pc, #528]	; (80035a8 <HAL_RCC_OscConfig+0x6d8>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b08      	cmp	r3, #8
 80033a0:	f000 80c3 	beq.w	800352a <HAL_RCC_OscConfig+0x65a>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	f040 80a4 	bne.w	80034f6 <HAL_RCC_OscConfig+0x626>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d009      	beq.n	80033ca <HAL_RCC_OscConfig+0x4fa>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033be:	d004      	beq.n	80033ca <HAL_RCC_OscConfig+0x4fa>
 80033c0:	f240 2155 	movw	r1, #597	; 0x255
 80033c4:	4879      	ldr	r0, [pc, #484]	; (80035ac <HAL_RCC_OscConfig+0x6dc>)
 80033c6:	f7fe f8d0 	bl	800156a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d903      	bls.n	80033da <HAL_RCC_OscConfig+0x50a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	2b3f      	cmp	r3, #63	; 0x3f
 80033d8:	d904      	bls.n	80033e4 <HAL_RCC_OscConfig+0x514>
 80033da:	f240 2156 	movw	r1, #598	; 0x256
 80033de:	4873      	ldr	r0, [pc, #460]	; (80035ac <HAL_RCC_OscConfig+0x6dc>)
 80033e0:	f7fe f8c3 	bl	800156a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	2b31      	cmp	r3, #49	; 0x31
 80033ea:	d904      	bls.n	80033f6 <HAL_RCC_OscConfig+0x526>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80033f4:	d904      	bls.n	8003400 <HAL_RCC_OscConfig+0x530>
 80033f6:	f240 2157 	movw	r1, #599	; 0x257
 80033fa:	486c      	ldr	r0, [pc, #432]	; (80035ac <HAL_RCC_OscConfig+0x6dc>)
 80033fc:	f7fe f8b5 	bl	800156a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	2b02      	cmp	r3, #2
 8003406:	d010      	beq.n	800342a <HAL_RCC_OscConfig+0x55a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	2b04      	cmp	r3, #4
 800340e:	d00c      	beq.n	800342a <HAL_RCC_OscConfig+0x55a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003414:	2b06      	cmp	r3, #6
 8003416:	d008      	beq.n	800342a <HAL_RCC_OscConfig+0x55a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341c:	2b08      	cmp	r3, #8
 800341e:	d004      	beq.n	800342a <HAL_RCC_OscConfig+0x55a>
 8003420:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003424:	4861      	ldr	r0, [pc, #388]	; (80035ac <HAL_RCC_OscConfig+0x6dc>)
 8003426:	f7fe f8a0 	bl	800156a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	2b01      	cmp	r3, #1
 8003430:	d903      	bls.n	800343a <HAL_RCC_OscConfig+0x56a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	2b0f      	cmp	r3, #15
 8003438:	d904      	bls.n	8003444 <HAL_RCC_OscConfig+0x574>
 800343a:	f240 2159 	movw	r1, #601	; 0x259
 800343e:	485b      	ldr	r0, [pc, #364]	; (80035ac <HAL_RCC_OscConfig+0x6dc>)
 8003440:	f7fe f893 	bl	800156a <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003448:	2b01      	cmp	r3, #1
 800344a:	d903      	bls.n	8003454 <HAL_RCC_OscConfig+0x584>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	2b07      	cmp	r3, #7
 8003452:	d904      	bls.n	800345e <HAL_RCC_OscConfig+0x58e>
 8003454:	f240 215b 	movw	r1, #603	; 0x25b
 8003458:	4854      	ldr	r0, [pc, #336]	; (80035ac <HAL_RCC_OscConfig+0x6dc>)
 800345a:	f7fe f886 	bl	800156a <assert_failed>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800345e:	4b52      	ldr	r3, [pc, #328]	; (80035a8 <HAL_RCC_OscConfig+0x6d8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a51      	ldr	r2, [pc, #324]	; (80035a8 <HAL_RCC_OscConfig+0x6d8>)
 8003464:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346a:	f7fe fde1 	bl	8002030 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x5b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003472:	f7fe fddd 	bl	8002030 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x5b4>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e08d      	b.n	80035a0 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003484:	4b48      	ldr	r3, [pc, #288]	; (80035a8 <HAL_RCC_OscConfig+0x6d8>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1f0      	bne.n	8003472 <HAL_RCC_OscConfig+0x5a2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69da      	ldr	r2, [r3, #28]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	019b      	lsls	r3, r3, #6
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a6:	085b      	lsrs	r3, r3, #1
 80034a8:	3b01      	subs	r3, #1
 80034aa:	041b      	lsls	r3, r3, #16
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b2:	061b      	lsls	r3, r3, #24
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	071b      	lsls	r3, r3, #28
 80034bc:	493a      	ldr	r1, [pc, #232]	; (80035a8 <HAL_RCC_OscConfig+0x6d8>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034c2:	4b39      	ldr	r3, [pc, #228]	; (80035a8 <HAL_RCC_OscConfig+0x6d8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a38      	ldr	r2, [pc, #224]	; (80035a8 <HAL_RCC_OscConfig+0x6d8>)
 80034c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ce:	f7fe fdaf 	bl	8002030 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x618>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d6:	f7fe fdab 	bl	8002030 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e05b      	b.n	80035a0 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e8:	4b2f      	ldr	r3, [pc, #188]	; (80035a8 <HAL_RCC_OscConfig+0x6d8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0f0      	beq.n	80034d6 <HAL_RCC_OscConfig+0x606>
 80034f4:	e053      	b.n	800359e <HAL_RCC_OscConfig+0x6ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f6:	4b2c      	ldr	r3, [pc, #176]	; (80035a8 <HAL_RCC_OscConfig+0x6d8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a2b      	ldr	r2, [pc, #172]	; (80035a8 <HAL_RCC_OscConfig+0x6d8>)
 80034fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003502:	f7fe fd95 	bl	8002030 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x64c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350a:	f7fe fd91 	bl	8002030 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e041      	b.n	80035a0 <HAL_RCC_OscConfig+0x6d0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351c:	4b22      	ldr	r3, [pc, #136]	; (80035a8 <HAL_RCC_OscConfig+0x6d8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1f0      	bne.n	800350a <HAL_RCC_OscConfig+0x63a>
 8003528:	e039      	b.n	800359e <HAL_RCC_OscConfig+0x6ce>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800352a:	4b1f      	ldr	r3, [pc, #124]	; (80035a8 <HAL_RCC_OscConfig+0x6d8>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d030      	beq.n	800359a <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003542:	429a      	cmp	r2, r3
 8003544:	d129      	bne.n	800359a <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003550:	429a      	cmp	r2, r3
 8003552:	d122      	bne.n	800359a <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800355a:	4013      	ands	r3, r2
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003560:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003562:	4293      	cmp	r3, r2
 8003564:	d119      	bne.n	800359a <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	3b01      	subs	r3, #1
 8003574:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003576:	429a      	cmp	r2, r3
 8003578:	d10f      	bne.n	800359a <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003586:	429a      	cmp	r2, r3
 8003588:	d107      	bne.n	800359a <HAL_RCC_OscConfig+0x6ca>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003596:	429a      	cmp	r2, r3
 8003598:	d001      	beq.n	800359e <HAL_RCC_OscConfig+0x6ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <HAL_RCC_OscConfig+0x6d0>
      }
    }
  }
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40023800 	.word	0x40023800
 80035ac:	08006e34 	.word	0x08006e34

080035b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e18c      	b.n	80038e2 <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x28>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b0f      	cmp	r3, #15
 80035d6:	d904      	bls.n	80035e2 <HAL_RCC_ClockConfig+0x32>
 80035d8:	f240 21df 	movw	r1, #735	; 0x2df
 80035dc:	4887      	ldr	r0, [pc, #540]	; (80037fc <HAL_RCC_ClockConfig+0x24c>)
 80035de:	f7fd ffc4 	bl	800156a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d031      	beq.n	800364c <HAL_RCC_ClockConfig+0x9c>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d02e      	beq.n	800364c <HAL_RCC_ClockConfig+0x9c>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d02b      	beq.n	800364c <HAL_RCC_ClockConfig+0x9c>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d028      	beq.n	800364c <HAL_RCC_ClockConfig+0x9c>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d025      	beq.n	800364c <HAL_RCC_ClockConfig+0x9c>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	2b05      	cmp	r3, #5
 8003604:	d022      	beq.n	800364c <HAL_RCC_ClockConfig+0x9c>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b06      	cmp	r3, #6
 800360a:	d01f      	beq.n	800364c <HAL_RCC_ClockConfig+0x9c>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2b07      	cmp	r3, #7
 8003610:	d01c      	beq.n	800364c <HAL_RCC_ClockConfig+0x9c>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b08      	cmp	r3, #8
 8003616:	d019      	beq.n	800364c <HAL_RCC_ClockConfig+0x9c>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	2b09      	cmp	r3, #9
 800361c:	d016      	beq.n	800364c <HAL_RCC_ClockConfig+0x9c>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b0a      	cmp	r3, #10
 8003622:	d013      	beq.n	800364c <HAL_RCC_ClockConfig+0x9c>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	2b0b      	cmp	r3, #11
 8003628:	d010      	beq.n	800364c <HAL_RCC_ClockConfig+0x9c>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b0c      	cmp	r3, #12
 800362e:	d00d      	beq.n	800364c <HAL_RCC_ClockConfig+0x9c>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	2b0d      	cmp	r3, #13
 8003634:	d00a      	beq.n	800364c <HAL_RCC_ClockConfig+0x9c>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b0e      	cmp	r3, #14
 800363a:	d007      	beq.n	800364c <HAL_RCC_ClockConfig+0x9c>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	2b0f      	cmp	r3, #15
 8003640:	d004      	beq.n	800364c <HAL_RCC_ClockConfig+0x9c>
 8003642:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8003646:	486d      	ldr	r0, [pc, #436]	; (80037fc <HAL_RCC_ClockConfig+0x24c>)
 8003648:	f7fd ff8f 	bl	800156a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800364c:	4b6c      	ldr	r3, [pc, #432]	; (8003800 <HAL_RCC_ClockConfig+0x250>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 030f 	and.w	r3, r3, #15
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d910      	bls.n	800367c <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365a:	4b69      	ldr	r3, [pc, #420]	; (8003800 <HAL_RCC_ClockConfig+0x250>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f023 020f 	bic.w	r2, r3, #15
 8003662:	4967      	ldr	r1, [pc, #412]	; (8003800 <HAL_RCC_ClockConfig+0x250>)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	4313      	orrs	r3, r2
 8003668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800366a:	4b65      	ldr	r3, [pc, #404]	; (8003800 <HAL_RCC_ClockConfig+0x250>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	429a      	cmp	r2, r3
 8003676:	d001      	beq.n	800367c <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e132      	b.n	80038e2 <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d049      	beq.n	800371c <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003694:	4b5b      	ldr	r3, [pc, #364]	; (8003804 <HAL_RCC_ClockConfig+0x254>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4a5a      	ldr	r2, [pc, #360]	; (8003804 <HAL_RCC_ClockConfig+0x254>)
 800369a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800369e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036ac:	4b55      	ldr	r3, [pc, #340]	; (8003804 <HAL_RCC_ClockConfig+0x254>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	4a54      	ldr	r2, [pc, #336]	; (8003804 <HAL_RCC_ClockConfig+0x254>)
 80036b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d024      	beq.n	800370a <HAL_RCC_ClockConfig+0x15a>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b80      	cmp	r3, #128	; 0x80
 80036c6:	d020      	beq.n	800370a <HAL_RCC_ClockConfig+0x15a>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b90      	cmp	r3, #144	; 0x90
 80036ce:	d01c      	beq.n	800370a <HAL_RCC_ClockConfig+0x15a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2ba0      	cmp	r3, #160	; 0xa0
 80036d6:	d018      	beq.n	800370a <HAL_RCC_ClockConfig+0x15a>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2bb0      	cmp	r3, #176	; 0xb0
 80036de:	d014      	beq.n	800370a <HAL_RCC_ClockConfig+0x15a>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2bc0      	cmp	r3, #192	; 0xc0
 80036e6:	d010      	beq.n	800370a <HAL_RCC_ClockConfig+0x15a>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2bd0      	cmp	r3, #208	; 0xd0
 80036ee:	d00c      	beq.n	800370a <HAL_RCC_ClockConfig+0x15a>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2be0      	cmp	r3, #224	; 0xe0
 80036f6:	d008      	beq.n	800370a <HAL_RCC_ClockConfig+0x15a>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2bf0      	cmp	r3, #240	; 0xf0
 80036fe:	d004      	beq.n	800370a <HAL_RCC_ClockConfig+0x15a>
 8003700:	f44f 7141 	mov.w	r1, #772	; 0x304
 8003704:	483d      	ldr	r0, [pc, #244]	; (80037fc <HAL_RCC_ClockConfig+0x24c>)
 8003706:	f7fd ff30 	bl	800156a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800370a:	4b3e      	ldr	r3, [pc, #248]	; (8003804 <HAL_RCC_ClockConfig+0x254>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	493b      	ldr	r1, [pc, #236]	; (8003804 <HAL_RCC_ClockConfig+0x254>)
 8003718:	4313      	orrs	r3, r2
 800371a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b00      	cmp	r3, #0
 8003726:	d051      	beq.n	80037cc <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00c      	beq.n	800374a <HAL_RCC_ClockConfig+0x19a>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d008      	beq.n	800374a <HAL_RCC_ClockConfig+0x19a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b02      	cmp	r3, #2
 800373e:	d004      	beq.n	800374a <HAL_RCC_ClockConfig+0x19a>
 8003740:	f240 310b 	movw	r1, #779	; 0x30b
 8003744:	482d      	ldr	r0, [pc, #180]	; (80037fc <HAL_RCC_ClockConfig+0x24c>)
 8003746:	f7fd ff10 	bl	800156a <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d107      	bne.n	8003762 <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003752:	4b2c      	ldr	r3, [pc, #176]	; (8003804 <HAL_RCC_ClockConfig+0x254>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d115      	bne.n	800378a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e0bf      	b.n	80038e2 <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d107      	bne.n	800377a <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376a:	4b26      	ldr	r3, [pc, #152]	; (8003804 <HAL_RCC_ClockConfig+0x254>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e0b3      	b.n	80038e2 <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377a:	4b22      	ldr	r3, [pc, #136]	; (8003804 <HAL_RCC_ClockConfig+0x254>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e0ab      	b.n	80038e2 <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800378a:	4b1e      	ldr	r3, [pc, #120]	; (8003804 <HAL_RCC_ClockConfig+0x254>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f023 0203 	bic.w	r2, r3, #3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	491b      	ldr	r1, [pc, #108]	; (8003804 <HAL_RCC_ClockConfig+0x254>)
 8003798:	4313      	orrs	r3, r2
 800379a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800379c:	f7fe fc48 	bl	8002030 <HAL_GetTick>
 80037a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a2:	e00a      	b.n	80037ba <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a4:	f7fe fc44 	bl	8002030 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e093      	b.n	80038e2 <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ba:	4b12      	ldr	r3, [pc, #72]	; (8003804 <HAL_RCC_ClockConfig+0x254>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 020c 	and.w	r2, r3, #12
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d1eb      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <HAL_RCC_ClockConfig+0x250>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d216      	bcs.n	8003808 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037da:	4b09      	ldr	r3, [pc, #36]	; (8003800 <HAL_RCC_ClockConfig+0x250>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f023 020f 	bic.w	r2, r3, #15
 80037e2:	4907      	ldr	r1, [pc, #28]	; (8003800 <HAL_RCC_ClockConfig+0x250>)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ea:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HAL_RCC_ClockConfig+0x250>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d007      	beq.n	8003808 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e072      	b.n	80038e2 <HAL_RCC_ClockConfig+0x332>
 80037fc:	08006e34 	.word	0x08006e34
 8003800:	40023c00 	.word	0x40023c00
 8003804:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b00      	cmp	r3, #0
 8003812:	d025      	beq.n	8003860 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d018      	beq.n	800384e <HAL_RCC_ClockConfig+0x29e>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003824:	d013      	beq.n	800384e <HAL_RCC_ClockConfig+0x29e>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800382e:	d00e      	beq.n	800384e <HAL_RCC_ClockConfig+0x29e>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003838:	d009      	beq.n	800384e <HAL_RCC_ClockConfig+0x29e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003842:	d004      	beq.n	800384e <HAL_RCC_ClockConfig+0x29e>
 8003844:	f44f 7152 	mov.w	r1, #840	; 0x348
 8003848:	4828      	ldr	r0, [pc, #160]	; (80038ec <HAL_RCC_ClockConfig+0x33c>)
 800384a:	f7fd fe8e 	bl	800156a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800384e:	4b28      	ldr	r3, [pc, #160]	; (80038f0 <HAL_RCC_ClockConfig+0x340>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	4925      	ldr	r1, [pc, #148]	; (80038f0 <HAL_RCC_ClockConfig+0x340>)
 800385c:	4313      	orrs	r3, r2
 800385e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b00      	cmp	r3, #0
 800386a:	d026      	beq.n	80038ba <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d018      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x2f6>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800387c:	d013      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x2f6>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003886:	d00e      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x2f6>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003890:	d009      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x2f6>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800389a:	d004      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x2f6>
 800389c:	f240 314f 	movw	r1, #847	; 0x34f
 80038a0:	4812      	ldr	r0, [pc, #72]	; (80038ec <HAL_RCC_ClockConfig+0x33c>)
 80038a2:	f7fd fe62 	bl	800156a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038a6:	4b12      	ldr	r3, [pc, #72]	; (80038f0 <HAL_RCC_ClockConfig+0x340>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	490e      	ldr	r1, [pc, #56]	; (80038f0 <HAL_RCC_ClockConfig+0x340>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038ba:	f000 f821 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 80038be:	4601      	mov	r1, r0
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <HAL_RCC_ClockConfig+0x340>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	091b      	lsrs	r3, r3, #4
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	4a0a      	ldr	r2, [pc, #40]	; (80038f4 <HAL_RCC_ClockConfig+0x344>)
 80038cc:	5cd3      	ldrb	r3, [r2, r3]
 80038ce:	fa21 f303 	lsr.w	r3, r1, r3
 80038d2:	4a09      	ldr	r2, [pc, #36]	; (80038f8 <HAL_RCC_ClockConfig+0x348>)
 80038d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038d6:	4b09      	ldr	r3, [pc, #36]	; (80038fc <HAL_RCC_ClockConfig+0x34c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fe fb64 	bl	8001fa8 <HAL_InitTick>

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	08006e34 	.word	0x08006e34
 80038f0:	40023800 	.word	0x40023800
 80038f4:	08006f1c 	.word	0x08006f1c
 80038f8:	20000000 	.word	0x20000000
 80038fc:	20000004 	.word	0x20000004

08003900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003906:	2300      	movs	r3, #0
 8003908:	607b      	str	r3, [r7, #4]
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	2300      	movs	r3, #0
 8003910:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003916:	4b50      	ldr	r3, [pc, #320]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x158>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
 800391e:	2b04      	cmp	r3, #4
 8003920:	d007      	beq.n	8003932 <HAL_RCC_GetSysClockFreq+0x32>
 8003922:	2b08      	cmp	r3, #8
 8003924:	d008      	beq.n	8003938 <HAL_RCC_GetSysClockFreq+0x38>
 8003926:	2b00      	cmp	r3, #0
 8003928:	f040 808d 	bne.w	8003a46 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800392c:	4b4b      	ldr	r3, [pc, #300]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x15c>)
 800392e:	60bb      	str	r3, [r7, #8]
      break;
 8003930:	e08c      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003932:	4b4b      	ldr	r3, [pc, #300]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x160>)
 8003934:	60bb      	str	r3, [r7, #8]
      break;
 8003936:	e089      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003938:	4b47      	ldr	r3, [pc, #284]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x158>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003940:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003942:	4b45      	ldr	r3, [pc, #276]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x158>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d023      	beq.n	8003996 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800394e:	4b42      	ldr	r3, [pc, #264]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x158>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	099b      	lsrs	r3, r3, #6
 8003954:	f04f 0400 	mov.w	r4, #0
 8003958:	f240 11ff 	movw	r1, #511	; 0x1ff
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	ea03 0501 	and.w	r5, r3, r1
 8003964:	ea04 0602 	and.w	r6, r4, r2
 8003968:	4a3d      	ldr	r2, [pc, #244]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x160>)
 800396a:	fb02 f106 	mul.w	r1, r2, r6
 800396e:	2200      	movs	r2, #0
 8003970:	fb02 f205 	mul.w	r2, r2, r5
 8003974:	440a      	add	r2, r1
 8003976:	493a      	ldr	r1, [pc, #232]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x160>)
 8003978:	fba5 0101 	umull	r0, r1, r5, r1
 800397c:	1853      	adds	r3, r2, r1
 800397e:	4619      	mov	r1, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f04f 0400 	mov.w	r4, #0
 8003986:	461a      	mov	r2, r3
 8003988:	4623      	mov	r3, r4
 800398a:	f7fc fc55 	bl	8000238 <__aeabi_uldivmod>
 800398e:	4603      	mov	r3, r0
 8003990:	460c      	mov	r4, r1
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	e049      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003996:	4b30      	ldr	r3, [pc, #192]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x158>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	099b      	lsrs	r3, r3, #6
 800399c:	f04f 0400 	mov.w	r4, #0
 80039a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	ea03 0501 	and.w	r5, r3, r1
 80039ac:	ea04 0602 	and.w	r6, r4, r2
 80039b0:	4629      	mov	r1, r5
 80039b2:	4632      	mov	r2, r6
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	f04f 0400 	mov.w	r4, #0
 80039bc:	0154      	lsls	r4, r2, #5
 80039be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80039c2:	014b      	lsls	r3, r1, #5
 80039c4:	4619      	mov	r1, r3
 80039c6:	4622      	mov	r2, r4
 80039c8:	1b49      	subs	r1, r1, r5
 80039ca:	eb62 0206 	sbc.w	r2, r2, r6
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	f04f 0400 	mov.w	r4, #0
 80039d6:	0194      	lsls	r4, r2, #6
 80039d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80039dc:	018b      	lsls	r3, r1, #6
 80039de:	1a5b      	subs	r3, r3, r1
 80039e0:	eb64 0402 	sbc.w	r4, r4, r2
 80039e4:	f04f 0100 	mov.w	r1, #0
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	00e2      	lsls	r2, r4, #3
 80039ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80039f2:	00d9      	lsls	r1, r3, #3
 80039f4:	460b      	mov	r3, r1
 80039f6:	4614      	mov	r4, r2
 80039f8:	195b      	adds	r3, r3, r5
 80039fa:	eb44 0406 	adc.w	r4, r4, r6
 80039fe:	f04f 0100 	mov.w	r1, #0
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	02a2      	lsls	r2, r4, #10
 8003a08:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003a0c:	0299      	lsls	r1, r3, #10
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4614      	mov	r4, r2
 8003a12:	4618      	mov	r0, r3
 8003a14:	4621      	mov	r1, r4
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f04f 0400 	mov.w	r4, #0
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4623      	mov	r3, r4
 8003a20:	f7fc fc0a 	bl	8000238 <__aeabi_uldivmod>
 8003a24:	4603      	mov	r3, r0
 8003a26:	460c      	mov	r4, r1
 8003a28:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	0c1b      	lsrs	r3, r3, #16
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	3301      	adds	r3, #1
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a42:	60bb      	str	r3, [r7, #8]
      break;
 8003a44:	e002      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a46:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003a48:	60bb      	str	r3, [r7, #8]
      break;
 8003a4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a4c:	68bb      	ldr	r3, [r7, #8]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	00f42400 	.word	0x00f42400
 8003a60:	017d7840 	.word	0x017d7840

08003a64 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a68:	4b03      	ldr	r3, [pc, #12]	; (8003a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	20000000 	.word	0x20000000

08003a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a80:	f7ff fff0 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003a84:	4601      	mov	r1, r0
 8003a86:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	0a9b      	lsrs	r3, r3, #10
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	4a03      	ldr	r2, [pc, #12]	; (8003aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a92:	5cd3      	ldrb	r3, [r2, r3]
 8003a94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	08006f2c 	.word	0x08006f2c

08003aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003aa8:	f7ff ffdc 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003aac:	4601      	mov	r1, r0
 8003aae:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	0b5b      	lsrs	r3, r3, #13
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	4a03      	ldr	r2, [pc, #12]	; (8003ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aba:	5cd3      	ldrb	r3, [r2, r3]
 8003abc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	08006f2c 	.word	0x08006f2c

08003acc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f040 809e 	bne.w	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f040 8097 	bne.w	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f040 8090 	bne.w	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f040 8089 	bne.w	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f040 8082 	bne.w	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d17b      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d175      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d16f      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d169      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d163      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d15d      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d157      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d151      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d14b      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d145      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d13f      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d139      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d133      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d12d      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d127      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d121      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d11b      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d115      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10f      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d109      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d103      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003c2a:	2174      	movs	r1, #116	; 0x74
 8003c2c:	48a2      	ldr	r0, [pc, #648]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003c2e:	f7fd fc9c 	bl	800156a <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d01f      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d008      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c4e:	d003      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003c50:	217a      	movs	r1, #122	; 0x7a
 8003c52:	4899      	ldr	r0, [pc, #612]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003c54:	f7fd fc89 	bl	800156a <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c58:	4b98      	ldr	r3, [pc, #608]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	4a97      	ldr	r2, [pc, #604]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003c5e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c62:	6093      	str	r3, [r2, #8]
 8003c64:	4b95      	ldr	r3, [pc, #596]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6c:	4993      	ldr	r1, [pc, #588]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      plli2sused = 1;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d02e      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d012      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c9a:	d00d      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ca4:	d008      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003caa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cae:	d003      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8003cb0:	218a      	movs	r1, #138	; 0x8a
 8003cb2:	4881      	ldr	r0, [pc, #516]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003cb4:	f7fd fc59 	bl	800156a <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cb8:	4b80      	ldr	r3, [pc, #512]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc6:	497d      	ldr	r1, [pc, #500]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x210>
    {
      plli2sused = 1;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      pllsaiused = 1;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d02e      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d012      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d04:	d00d      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d0e:	d008      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d18:	d003      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003d1a:	219e      	movs	r1, #158	; 0x9e
 8003d1c:	4866      	ldr	r0, [pc, #408]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003d1e:	f7fd fc24 	bl	800156a <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d22:	4b66      	ldr	r3, [pc, #408]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	4962      	ldr	r1, [pc, #392]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d40:	d101      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      plli2sused = 1;
 8003d42:	2301      	movs	r3, #1
 8003d44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      pllsaiused = 1;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
      plli2sused = 1;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 8187 	beq.w	800407e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d78:	f000 80eb 	beq.w	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d84:	f000 80e5 	beq.w	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	4a4c      	ldr	r2, [pc, #304]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	f000 80df 	beq.w	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	4a4a      	ldr	r2, [pc, #296]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	f000 80d9 	beq.w	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da4:	4a48      	ldr	r2, [pc, #288]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	f000 80d3 	beq.w	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db0:	4a46      	ldr	r2, [pc, #280]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	f000 80cd 	beq.w	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	4a44      	ldr	r2, [pc, #272]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	f000 80c7 	beq.w	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc8:	4a42      	ldr	r2, [pc, #264]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	f000 80c1 	beq.w	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	4a40      	ldr	r2, [pc, #256]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	f000 80bb 	beq.w	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	4a3e      	ldr	r2, [pc, #248]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x410>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	f000 80b5 	beq.w	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dec:	4a3c      	ldr	r2, [pc, #240]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x414>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	f000 80af 	beq.w	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df8:	4a3a      	ldr	r2, [pc, #232]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	f000 80a9 	beq.w	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e04:	4a38      	ldr	r2, [pc, #224]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	f000 80a3 	beq.w	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	4a36      	ldr	r2, [pc, #216]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	f000 809d 	beq.w	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	4a34      	ldr	r2, [pc, #208]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	f000 8097 	beq.w	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	4a32      	ldr	r2, [pc, #200]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	f000 8091 	beq.w	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	4a30      	ldr	r2, [pc, #192]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	f000 808b 	beq.w	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e40:	4a2e      	ldr	r2, [pc, #184]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	f000 8085 	beq.w	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4c:	4a2c      	ldr	r2, [pc, #176]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d07f      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	4a2b      	ldr	r2, [pc, #172]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d07a      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	4a29      	ldr	r2, [pc, #164]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d075      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	4a28      	ldr	r2, [pc, #160]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d070      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	4a26      	ldr	r2, [pc, #152]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d06b      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	4a25      	ldr	r2, [pc, #148]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d066      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	4a23      	ldr	r2, [pc, #140]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d061      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	4a22      	ldr	r2, [pc, #136]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d05c      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9c:	4a20      	ldr	r2, [pc, #128]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d057      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	4a1f      	ldr	r2, [pc, #124]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d052      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	4a1d      	ldr	r2, [pc, #116]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d04d      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003eb6:	e039      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003eb8:	08006e6c 	.word	0x08006e6c
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	00020300 	.word	0x00020300
 8003ec4:	00030300 	.word	0x00030300
 8003ec8:	00040300 	.word	0x00040300
 8003ecc:	00050300 	.word	0x00050300
 8003ed0:	00060300 	.word	0x00060300
 8003ed4:	00070300 	.word	0x00070300
 8003ed8:	00080300 	.word	0x00080300
 8003edc:	00090300 	.word	0x00090300
 8003ee0:	000a0300 	.word	0x000a0300
 8003ee4:	000b0300 	.word	0x000b0300
 8003ee8:	000c0300 	.word	0x000c0300
 8003eec:	000d0300 	.word	0x000d0300
 8003ef0:	000e0300 	.word	0x000e0300
 8003ef4:	000f0300 	.word	0x000f0300
 8003ef8:	00100300 	.word	0x00100300
 8003efc:	00110300 	.word	0x00110300
 8003f00:	00120300 	.word	0x00120300
 8003f04:	00130300 	.word	0x00130300
 8003f08:	00140300 	.word	0x00140300
 8003f0c:	00150300 	.word	0x00150300
 8003f10:	00160300 	.word	0x00160300
 8003f14:	00170300 	.word	0x00170300
 8003f18:	00180300 	.word	0x00180300
 8003f1c:	00190300 	.word	0x00190300
 8003f20:	001a0300 	.word	0x001a0300
 8003f24:	001b0300 	.word	0x001b0300
 8003f28:	001c0300 	.word	0x001c0300
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	4a44      	ldr	r2, [pc, #272]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00d      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	4a43      	ldr	r2, [pc, #268]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d008      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f44:	4a41      	ldr	r2, [pc, #260]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d003      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f4a:	21b9      	movs	r1, #185	; 0xb9
 8003f4c:	4840      	ldr	r0, [pc, #256]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8003f4e:	f7fd fb0c 	bl	800156a <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f52:	4b40      	ldr	r3, [pc, #256]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	4a3f      	ldr	r2, [pc, #252]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f5e:	4b3d      	ldr	r3, [pc, #244]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f66:	60bb      	str	r3, [r7, #8]
 8003f68:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f6a:	4b3b      	ldr	r3, [pc, #236]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a3a      	ldr	r2, [pc, #232]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f76:	f7fe f85b 	bl	8002030 <HAL_GetTick>
 8003f7a:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f7c:	e009      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f7e:	f7fe f857 	bl	8002030 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b64      	cmp	r3, #100	; 0x64
 8003f8a:	d902      	bls.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
      {
        return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	f000 be00 	b.w	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f92:	4b31      	ldr	r3, [pc, #196]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0ef      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f9e:	4b2d      	ldr	r3, [pc, #180]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d036      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d02f      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fbc:	4b25      	ldr	r3, [pc, #148]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fc6:	4b23      	ldr	r3, [pc, #140]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	4a22      	ldr	r2, [pc, #136]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fd2:	4b20      	ldr	r3, [pc, #128]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd6:	4a1f      	ldr	r2, [pc, #124]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fdc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003fde:	4a1d      	ldr	r2, [pc, #116]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fe4:	4b1b      	ldr	r3, [pc, #108]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d115      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x550>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff0:	f7fe f81e 	bl	8002030 <HAL_GetTick>
 8003ff4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff6:	e00b      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x544>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff8:	f7fe f81a 	bl	8002030 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f241 3288 	movw	r2, #5000	; 0x1388
 8004006:	4293      	cmp	r3, r2
 8004008:	d902      	bls.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x544>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	f000 bdc1 	b.w	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004010:	4b10      	ldr	r3, [pc, #64]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0ed      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004024:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004028:	d11a      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800402a:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004036:	4b09      	ldr	r3, [pc, #36]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8004038:	400b      	ands	r3, r1
 800403a:	4906      	ldr	r1, [pc, #24]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800403c:	4313      	orrs	r3, r2
 800403e:	608b      	str	r3, [r1, #8]
 8004040:	e014      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 8004042:	bf00      	nop
 8004044:	001d0300 	.word	0x001d0300
 8004048:	001e0300 	.word	0x001e0300
 800404c:	001f0300 	.word	0x001f0300
 8004050:	08006e6c 	.word	0x08006e6c
 8004054:	40023800 	.word	0x40023800
 8004058:	40007000 	.word	0x40007000
 800405c:	0ffffcff 	.word	0x0ffffcff
 8004060:	4ba7      	ldr	r3, [pc, #668]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	4aa6      	ldr	r2, [pc, #664]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004066:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800406a:	6093      	str	r3, [r2, #8]
 800406c:	4ba4      	ldr	r3, [pc, #656]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800406e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004078:	49a1      	ldr	r1, [pc, #644]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800407a:	4313      	orrs	r3, r2
 800407c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0310 	and.w	r3, r3, #16
 8004086:	2b00      	cmp	r3, #0
 8004088:	d01d      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408e:	2b00      	cmp	r3, #0
 8004090:	d008      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004096:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800409a:	d003      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 800409c:	21f3      	movs	r1, #243	; 0xf3
 800409e:	4899      	ldr	r0, [pc, #612]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80040a0:	f7fd fa63 	bl	800156a <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040a4:	4b96      	ldr	r3, [pc, #600]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040aa:	4a95      	ldr	r2, [pc, #596]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040b0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80040b4:	4b92      	ldr	r3, [pc, #584]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040b6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	4990      	ldr	r1, [pc, #576]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d01c      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00d      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e2:	d008      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040ec:	d003      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 80040ee:	21fd      	movs	r1, #253	; 0xfd
 80040f0:	4884      	ldr	r0, [pc, #528]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80040f2:	f7fd fa3a 	bl	800156a <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040f6:	4b82      	ldr	r3, [pc, #520]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004104:	497e      	ldr	r1, [pc, #504]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d01d      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00e      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004124:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004128:	d009      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800412e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004132:	d004      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004134:	f240 1107 	movw	r1, #263	; 0x107
 8004138:	4872      	ldr	r0, [pc, #456]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800413a:	f7fd fa16 	bl	800156a <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800413e:	4b70      	ldr	r3, [pc, #448]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004144:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800414c:	496c      	ldr	r1, [pc, #432]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d01d      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00e      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800416c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004170:	d009      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004176:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800417a:	d004      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 800417c:	f240 1111 	movw	r1, #273	; 0x111
 8004180:	4860      	ldr	r0, [pc, #384]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004182:	f7fd f9f2 	bl	800156a <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004186:	4b5e      	ldr	r3, [pc, #376]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004194:	495a      	ldr	r1, [pc, #360]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d01d      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x718>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00e      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x702>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041b8:	d009      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x702>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041c2:	d004      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x702>
 80041c4:	f240 111b 	movw	r1, #283	; 0x11b
 80041c8:	484e      	ldr	r0, [pc, #312]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80041ca:	f7fd f9ce 	bl	800156a <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041ce:	4b4c      	ldr	r3, [pc, #304]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041dc:	4948      	ldr	r1, [pc, #288]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d01f      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x764>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d010      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x74e>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d00c      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004204:	2b03      	cmp	r3, #3
 8004206:	d008      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420c:	2b02      	cmp	r3, #2
 800420e:	d004      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8004210:	f240 1125 	movw	r1, #293	; 0x125
 8004214:	483b      	ldr	r0, [pc, #236]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004216:	f7fd f9a8 	bl	800156a <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800421a:	4b39      	ldr	r3, [pc, #228]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800421c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004220:	f023 0203 	bic.w	r2, r3, #3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004228:	4935      	ldr	r1, [pc, #212]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01f      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004240:	2b00      	cmp	r3, #0
 8004242:	d010      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004248:	2b04      	cmp	r3, #4
 800424a:	d00c      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004250:	2b0c      	cmp	r3, #12
 8004252:	d008      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004258:	2b08      	cmp	r3, #8
 800425a:	d004      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 800425c:	f240 112f 	movw	r1, #303	; 0x12f
 8004260:	4828      	ldr	r0, [pc, #160]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004262:	f7fd f982 	bl	800156a <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004266:	4b26      	ldr	r3, [pc, #152]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426c:	f023 020c 	bic.w	r2, r3, #12
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004274:	4922      	ldr	r1, [pc, #136]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004284:	2b00      	cmp	r3, #0
 8004286:	d01f      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428c:	2b00      	cmp	r3, #0
 800428e:	d010      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004294:	2b10      	cmp	r3, #16
 8004296:	d00c      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429c:	2b30      	cmp	r3, #48	; 0x30
 800429e:	d008      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	d004      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80042a8:	f240 1139 	movw	r1, #313	; 0x139
 80042ac:	4815      	ldr	r0, [pc, #84]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80042ae:	f7fd f95c 	bl	800156a <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042b2:	4b13      	ldr	r3, [pc, #76]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c0:	490f      	ldr	r1, [pc, #60]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d024      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d015      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e0:	2b40      	cmp	r3, #64	; 0x40
 80042e2:	d011      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e8:	2bc0      	cmp	r3, #192	; 0xc0
 80042ea:	d00d      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f0:	2b80      	cmp	r3, #128	; 0x80
 80042f2:	d009      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80042f4:	f240 1143 	movw	r1, #323	; 0x143
 80042f8:	4802      	ldr	r0, [pc, #8]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80042fa:	f7fd f936 	bl	800156a <assert_failed>
 80042fe:	e003      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004300:	40023800 	.word	0x40023800
 8004304:	08006e6c 	.word	0x08006e6c

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004308:	4bae      	ldr	r3, [pc, #696]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800430a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004316:	49ab      	ldr	r1, [pc, #684]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004326:	2b00      	cmp	r3, #0
 8004328:	d022      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432e:	2b00      	cmp	r3, #0
 8004330:	d013      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800433a:	d00e      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x88e>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004340:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004344:	d009      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800434e:	d004      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004350:	f240 114d 	movw	r1, #333	; 0x14d
 8004354:	489c      	ldr	r0, [pc, #624]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004356:	f7fd f908 	bl	800156a <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800435a:	4b9a      	ldr	r3, [pc, #616]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800435c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004360:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004368:	4996      	ldr	r1, [pc, #600]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800436a:	4313      	orrs	r3, r2
 800436c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004378:	2b00      	cmp	r3, #0
 800437a:	d022      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004380:	2b00      	cmp	r3, #0
 8004382:	d013      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438c:	d00e      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004392:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004396:	d009      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043a0:	d004      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 80043a2:	f240 1157 	movw	r1, #343	; 0x157
 80043a6:	4888      	ldr	r0, [pc, #544]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80043a8:	f7fd f8df 	bl	800156a <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80043ac:	4b85      	ldr	r3, [pc, #532]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80043ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ba:	4982      	ldr	r1, [pc, #520]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d022      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d013      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x932>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043de:	d00e      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x932>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043e8:	d009      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x932>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043f2:	d004      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x932>
 80043f4:	f240 1161 	movw	r1, #353	; 0x161
 80043f8:	4873      	ldr	r0, [pc, #460]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80043fa:	f7fd f8b6 	bl	800156a <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80043fe:	4b71      	ldr	r3, [pc, #452]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004404:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440c:	496d      	ldr	r1, [pc, #436]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d022      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004424:	2b00      	cmp	r3, #0
 8004426:	d013      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800442c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004430:	d00e      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004436:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800443a:	d009      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004444:	d004      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004446:	f240 116b 	movw	r1, #363	; 0x16b
 800444a:	485f      	ldr	r0, [pc, #380]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 800444c:	f7fd f88d 	bl	800156a <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004450:	4b5c      	ldr	r3, [pc, #368]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004456:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800445e:	4959      	ldr	r1, [pc, #356]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d018      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004476:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800447a:	d008      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004480:	2b00      	cmp	r3, #0
 8004482:	d004      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8004484:	f240 1175 	movw	r1, #373	; 0x175
 8004488:	484f      	ldr	r0, [pc, #316]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 800448a:	f7fd f86e 	bl	800156a <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800448e:	4b4d      	ldr	r3, [pc, #308]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004494:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800449c:	4949      	ldr	r1, [pc, #292]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01f      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044b8:	d008      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d004      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80044c2:	f240 117f 	movw	r1, #383	; 0x17f
 80044c6:	4840      	ldr	r0, [pc, #256]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80044c8:	f7fd f84f 	bl	800156a <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044cc:	4b3d      	ldr	r3, [pc, #244]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044da:	493a      	ldr	r1, [pc, #232]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044ea:	d101      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      pllsaiused = 1;
 80044ec:	2301      	movs	r3, #1
 80044ee:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0308 	and.w	r3, r3, #8
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    pllsaiused = 1;
 80044fc:	2301      	movs	r3, #1
 80044fe:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d022      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xa86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004510:	2b00      	cmp	r3, #0
 8004512:	d013      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800451c:	d00e      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004522:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004526:	d009      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800452c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004530:	d004      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004532:	f240 1197 	movw	r1, #407	; 0x197
 8004536:	4824      	ldr	r0, [pc, #144]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8004538:	f7fd f817 	bl	800156a <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800453c:	4b21      	ldr	r3, [pc, #132]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800453e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004542:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800454a:	491e      	ldr	r1, [pc, #120]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d01b      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xaca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004564:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004568:	d009      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004570:	2b00      	cmp	r3, #0
 8004572:	d004      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004574:	f240 11a1 	movw	r1, #417	; 0x1a1
 8004578:	4813      	ldr	r0, [pc, #76]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 800457a:	f7fc fff6 	bl	800156a <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800457e:	4b11      	ldr	r3, [pc, #68]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004584:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800458e:	490d      	ldr	r1, [pc, #52]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d020      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045ac:	d00e      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xb00>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d009      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xb00>
 80045b8:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80045bc:	4802      	ldr	r0, [pc, #8]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80045be:	f7fc ffd4 	bl	800156a <assert_failed>
 80045c2:	e003      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xb00>
 80045c4:	40023800 	.word	0x40023800
 80045c8:	08006e6c 	.word	0x08006e6c

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80045cc:	4b35      	ldr	r3, [pc, #212]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80045ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045dc:	4931      	ldr	r1, [pc, #196]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d01b      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004600:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004604:	d004      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 8004606:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800460a:	4827      	ldr	r0, [pc, #156]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800460c:	f7fc ffad 	bl	800156a <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004610:	4b24      	ldr	r3, [pc, #144]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004616:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004620:	4920      	ldr	r1, [pc, #128]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d01b      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004644:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004648:	d004      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800464a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800464e:	4816      	ldr	r0, [pc, #88]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004650:	f7fc ff8b 	bl	800156a <assert_failed>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004654:	4b13      	ldr	r3, [pc, #76]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800465a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004664:	490f      	ldr	r1, [pc, #60]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d005      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800467a:	f040 8153 	bne.w	8004924 <HAL_RCCEx_PeriphCLKConfig+0xe58>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800467e:	4b09      	ldr	r3, [pc, #36]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a08      	ldr	r2, [pc, #32]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004684:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004688:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800468a:	f7fd fcd1 	bl	8002030 <HAL_GetTick>
 800468e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004690:	e00c      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004692:	f7fd fccd 	bl	8002030 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b64      	cmp	r3, #100	; 0x64
 800469e:	d905      	bls.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e276      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 80046a4:	40023800 	.word	0x40023800
 80046a8:	08006e6c 	.word	0x08006e6c
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046ac:	4ba9      	ldr	r3, [pc, #676]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1ec      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2b31      	cmp	r3, #49	; 0x31
 80046be:	d904      	bls.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80046c8:	d904      	bls.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80046ca:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80046ce:	48a2      	ldr	r0, [pc, #648]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80046d0:	f7fc ff4b 	bl	800156a <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d02e      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d12a      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d903      	bls.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2b07      	cmp	r3, #7
 80046f6:	d904      	bls.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xc36>
 80046f8:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80046fc:	4896      	ldr	r0, [pc, #600]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80046fe:	f7fc ff34 	bl	800156a <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004702:	4b94      	ldr	r3, [pc, #592]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004708:	0c1b      	lsrs	r3, r3, #16
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004710:	4b90      	ldr	r3, [pc, #576]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004716:	0e1b      	lsrs	r3, r3, #24
 8004718:	f003 030f 	and.w	r3, r3, #15
 800471c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	019a      	lsls	r2, r3, #6
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	041b      	lsls	r3, r3, #16
 8004728:	431a      	orrs	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	061b      	lsls	r3, r3, #24
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	071b      	lsls	r3, r3, #28
 8004736:	4987      	ldr	r1, [pc, #540]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d004      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xc88>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004752:	d00a      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800475c:	2b00      	cmp	r3, #0
 800475e:	d048      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004768:	d143      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d903      	bls.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xcae>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	2b0f      	cmp	r3, #15
 8004778:	d904      	bls.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 800477a:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800477e:	4876      	ldr	r0, [pc, #472]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004780:	f7fc fef3 	bl	800156a <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	2b20      	cmp	r3, #32
 8004792:	d904      	bls.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 8004794:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004798:	486f      	ldr	r0, [pc, #444]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 800479a:	f7fc fee6 	bl	800156a <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800479e:	4b6d      	ldr	r3, [pc, #436]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80047a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a4:	0c1b      	lsrs	r3, r3, #16
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047ac:	4b69      	ldr	r3, [pc, #420]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80047ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047b2:	0f1b      	lsrs	r3, r3, #28
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	019a      	lsls	r2, r3, #6
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	041b      	lsls	r3, r3, #16
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	061b      	lsls	r3, r3, #24
 80047cc:	431a      	orrs	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	071b      	lsls	r3, r3, #28
 80047d2:	4960      	ldr	r1, [pc, #384]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80047da:	4b5e      	ldr	r3, [pc, #376]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80047dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047e0:	f023 021f 	bic.w	r2, r3, #31
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	3b01      	subs	r3, #1
 80047ea:	495a      	ldr	r1, [pc, #360]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d032      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xd98>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d010      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d00c      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d008      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	2b03      	cmp	r3, #3
 800481c:	d004      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 800481e:	f240 2107 	movw	r1, #519	; 0x207
 8004822:	484d      	ldr	r0, [pc, #308]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004824:	f7fc fea1 	bl	800156a <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004828:	4b4a      	ldr	r3, [pc, #296]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800482a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800482e:	0e1b      	lsrs	r3, r3, #24
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004836:	4b47      	ldr	r3, [pc, #284]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800483c:	0f1b      	lsrs	r3, r3, #28
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	019a      	lsls	r2, r3, #6
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	041b      	lsls	r3, r3, #16
 8004850:	431a      	orrs	r2, r3
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	061b      	lsls	r3, r3, #24
 8004856:	431a      	orrs	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	071b      	lsls	r3, r3, #28
 800485c:	493d      	ldr	r1, [pc, #244]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800485e:	4313      	orrs	r3, r2
 8004860:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d040      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d010      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d00c      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d008      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	2b03      	cmp	r3, #3
 800488e:	d004      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8004890:	f240 2116 	movw	r1, #534	; 0x216
 8004894:	4830      	ldr	r0, [pc, #192]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8004896:	f7fc fe68 	bl	800156a <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d903      	bls.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	2b07      	cmp	r3, #7
 80048a8:	d904      	bls.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
 80048aa:	f240 2117 	movw	r1, #535	; 0x217
 80048ae:	482a      	ldr	r0, [pc, #168]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80048b0:	f7fc fe5b 	bl	800156a <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d903      	bls.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	2b0f      	cmp	r3, #15
 80048c2:	d904      	bls.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xe02>
 80048c4:	f44f 7106 	mov.w	r1, #536	; 0x218
 80048c8:	4823      	ldr	r0, [pc, #140]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80048ca:	f7fc fe4e 	bl	800156a <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	019a      	lsls	r2, r3, #6
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	041b      	lsls	r3, r3, #16
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	061b      	lsls	r3, r3, #24
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	071b      	lsls	r3, r3, #28
 80048ea:	491a      	ldr	r1, [pc, #104]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048f2:	4b18      	ldr	r3, [pc, #96]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a17      	ldr	r2, [pc, #92]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80048f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048fe:	f7fd fb97 	bl	8002030 <HAL_GetTick>
 8004902:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004904:	e008      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004906:	f7fd fb93 	bl	8002030 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b64      	cmp	r3, #100	; 0x64
 8004912:	d901      	bls.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e13c      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004918:	4b0e      	ldr	r3, [pc, #56]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0f0      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	2b01      	cmp	r3, #1
 8004928:	f040 8132 	bne.w	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800492c:	4b09      	ldr	r3, [pc, #36]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a08      	ldr	r2, [pc, #32]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004936:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004938:	f7fd fb7a 	bl	8002030 <HAL_GetTick>
 800493c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800493e:	e00d      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xe90>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004940:	f7fd fb76 	bl	8002030 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b64      	cmp	r3, #100	; 0x64
 800494c:	d906      	bls.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xe90>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e11f      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 8004952:	bf00      	nop
 8004954:	40023800 	.word	0x40023800
 8004958:	08006e6c 	.word	0x08006e6c
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800495c:	4b8f      	ldr	r3, [pc, #572]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004968:	d0ea      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xe74>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	2b31      	cmp	r3, #49	; 0x31
 8004970:	d904      	bls.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xeb0>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800497a:	d904      	bls.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xeba>
 800497c:	f240 2146 	movw	r1, #582	; 0x246
 8004980:	4887      	ldr	r0, [pc, #540]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004982:	f7fc fdf2 	bl	800156a <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xece>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004996:	2b00      	cmp	r3, #0
 8004998:	d009      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xee2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d048      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d144      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d903      	bls.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xef2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	2b0f      	cmp	r3, #15
 80049bc:	d904      	bls.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xefc>
 80049be:	f240 214d 	movw	r1, #589	; 0x24d
 80049c2:	4877      	ldr	r0, [pc, #476]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 80049c4:	f7fc fdd1 	bl	800156a <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	2b20      	cmp	r3, #32
 80049d6:	d904      	bls.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80049d8:	f240 214f 	movw	r1, #591	; 0x24f
 80049dc:	4870      	ldr	r0, [pc, #448]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 80049de:	f7fc fdc4 	bl	800156a <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049e2:	4b6e      	ldr	r3, [pc, #440]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80049e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e8:	0c1b      	lsrs	r3, r3, #16
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049f0:	4b6a      	ldr	r3, [pc, #424]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f6:	0f1b      	lsrs	r3, r3, #28
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	019a      	lsls	r2, r3, #6
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	041b      	lsls	r3, r3, #16
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	061b      	lsls	r3, r3, #24
 8004a10:	431a      	orrs	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	071b      	lsls	r3, r3, #28
 8004a16:	4961      	ldr	r1, [pc, #388]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a1e:	4b5f      	ldr	r3, [pc, #380]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a24:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	021b      	lsls	r3, r3, #8
 8004a30:	495a      	ldr	r1, [pc, #360]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d037      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a4c:	d132      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d010      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d00c      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d008      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	2b03      	cmp	r3, #3
 8004a6c:	d004      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8004a6e:	f240 2162 	movw	r1, #610	; 0x262
 8004a72:	484b      	ldr	r0, [pc, #300]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004a74:	f7fc fd79 	bl	800156a <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a78:	4b48      	ldr	r3, [pc, #288]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7e:	0e1b      	lsrs	r3, r3, #24
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a86:	4b45      	ldr	r3, [pc, #276]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8c:	0f1b      	lsrs	r3, r3, #28
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	019a      	lsls	r2, r3, #6
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	041b      	lsls	r3, r3, #16
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	061b      	lsls	r3, r3, #24
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	071b      	lsls	r3, r3, #28
 8004aac:	493b      	ldr	r1, [pc, #236]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d04d      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1090>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d903      	bls.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1004>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	2b07      	cmp	r3, #7
 8004ace:	d904      	bls.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x100e>
 8004ad0:	f240 2171 	movw	r1, #625	; 0x271
 8004ad4:	4832      	ldr	r0, [pc, #200]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004ad6:	f7fc fd48 	bl	800156a <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d013      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aea:	d00e      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004af4:	d009      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004afe:	d004      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8004b00:	f240 2172 	movw	r1, #626	; 0x272
 8004b04:	4826      	ldr	r0, [pc, #152]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8004b06:	f7fc fd30 	bl	800156a <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b0a:	4b24      	ldr	r3, [pc, #144]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b10:	0e1b      	lsrs	r3, r3, #24
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b18:	4b20      	ldr	r3, [pc, #128]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1e:	0c1b      	lsrs	r3, r3, #16
 8004b20:	f003 0303 	and.w	r3, r3, #3
 8004b24:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	019a      	lsls	r2, r3, #6
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	041b      	lsls	r3, r3, #16
 8004b30:	431a      	orrs	r2, r3
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	061b      	lsls	r3, r3, #24
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	071b      	lsls	r3, r3, #28
 8004b3e:	4917      	ldr	r1, [pc, #92]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b46:	4b15      	ldr	r3, [pc, #84]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	4911      	ldr	r1, [pc, #68]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b5c:	4b0f      	ldr	r3, [pc, #60]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a0e      	ldr	r2, [pc, #56]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b68:	f7fd fa62 	bl	8002030 <HAL_GetTick>
 8004b6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b70:	f7fd fa5e 	bl	8002030 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b64      	cmp	r3, #100	; 0x64
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e007      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b82:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b8e:	d1ef      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
      }
    }
  }
  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3720      	adds	r7, #32
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	08006e6c 	.word	0x08006e6c

08004ba4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e199      	b.n	8004eea <HAL_SPI_Init+0x346>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a94      	ldr	r2, [pc, #592]	; (8004e0c <HAL_SPI_Init+0x268>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d01d      	beq.n	8004bfc <HAL_SPI_Init+0x58>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a92      	ldr	r2, [pc, #584]	; (8004e10 <HAL_SPI_Init+0x26c>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d018      	beq.n	8004bfc <HAL_SPI_Init+0x58>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a91      	ldr	r2, [pc, #580]	; (8004e14 <HAL_SPI_Init+0x270>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d013      	beq.n	8004bfc <HAL_SPI_Init+0x58>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a8f      	ldr	r2, [pc, #572]	; (8004e18 <HAL_SPI_Init+0x274>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00e      	beq.n	8004bfc <HAL_SPI_Init+0x58>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a8e      	ldr	r2, [pc, #568]	; (8004e1c <HAL_SPI_Init+0x278>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d009      	beq.n	8004bfc <HAL_SPI_Init+0x58>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a8c      	ldr	r2, [pc, #560]	; (8004e20 <HAL_SPI_Init+0x27c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d004      	beq.n	8004bfc <HAL_SPI_Init+0x58>
 8004bf2:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004bf6:	488b      	ldr	r0, [pc, #556]	; (8004e24 <HAL_SPI_Init+0x280>)
 8004bf8:	f7fc fcb7 	bl	800156a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d009      	beq.n	8004c18 <HAL_SPI_Init+0x74>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c0c:	d004      	beq.n	8004c18 <HAL_SPI_Init+0x74>
 8004c0e:	f240 1145 	movw	r1, #325	; 0x145
 8004c12:	4884      	ldr	r0, [pc, #528]	; (8004e24 <HAL_SPI_Init+0x280>)
 8004c14:	f7fc fca9 	bl	800156a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00e      	beq.n	8004c3e <HAL_SPI_Init+0x9a>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c28:	d009      	beq.n	8004c3e <HAL_SPI_Init+0x9a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c32:	d004      	beq.n	8004c3e <HAL_SPI_Init+0x9a>
 8004c34:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004c38:	487a      	ldr	r0, [pc, #488]	; (8004e24 <HAL_SPI_Init+0x280>)
 8004c3a:	f7fc fc96 	bl	800156a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c46:	d040      	beq.n	8004cca <HAL_SPI_Init+0x126>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8004c50:	d03b      	beq.n	8004cca <HAL_SPI_Init+0x126>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004c5a:	d036      	beq.n	8004cca <HAL_SPI_Init+0x126>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c64:	d031      	beq.n	8004cca <HAL_SPI_Init+0x126>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004c6e:	d02c      	beq.n	8004cca <HAL_SPI_Init+0x126>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004c78:	d027      	beq.n	8004cca <HAL_SPI_Init+0x126>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004c82:	d022      	beq.n	8004cca <HAL_SPI_Init+0x126>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c8c:	d01d      	beq.n	8004cca <HAL_SPI_Init+0x126>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c96:	d018      	beq.n	8004cca <HAL_SPI_Init+0x126>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ca0:	d013      	beq.n	8004cca <HAL_SPI_Init+0x126>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004caa:	d00e      	beq.n	8004cca <HAL_SPI_Init+0x126>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb4:	d009      	beq.n	8004cca <HAL_SPI_Init+0x126>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cbe:	d004      	beq.n	8004cca <HAL_SPI_Init+0x126>
 8004cc0:	f240 1147 	movw	r1, #327	; 0x147
 8004cc4:	4857      	ldr	r0, [pc, #348]	; (8004e24 <HAL_SPI_Init+0x280>)
 8004cc6:	f7fc fc50 	bl	800156a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cd2:	d00d      	beq.n	8004cf0 <HAL_SPI_Init+0x14c>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d009      	beq.n	8004cf0 <HAL_SPI_Init+0x14c>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ce4:	d004      	beq.n	8004cf0 <HAL_SPI_Init+0x14c>
 8004ce6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004cea:	484e      	ldr	r0, [pc, #312]	; (8004e24 <HAL_SPI_Init+0x280>)
 8004cec:	f7fc fc3d 	bl	800156a <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d008      	beq.n	8004d0a <HAL_SPI_Init+0x166>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d004      	beq.n	8004d0a <HAL_SPI_Init+0x166>
 8004d00:	f240 1149 	movw	r1, #329	; 0x149
 8004d04:	4847      	ldr	r0, [pc, #284]	; (8004e24 <HAL_SPI_Init+0x280>)
 8004d06:	f7fc fc30 	bl	800156a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d020      	beq.n	8004d54 <HAL_SPI_Init+0x1b0>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	2b08      	cmp	r3, #8
 8004d18:	d01c      	beq.n	8004d54 <HAL_SPI_Init+0x1b0>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	2b10      	cmp	r3, #16
 8004d20:	d018      	beq.n	8004d54 <HAL_SPI_Init+0x1b0>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	2b18      	cmp	r3, #24
 8004d28:	d014      	beq.n	8004d54 <HAL_SPI_Init+0x1b0>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	2b20      	cmp	r3, #32
 8004d30:	d010      	beq.n	8004d54 <HAL_SPI_Init+0x1b0>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	2b28      	cmp	r3, #40	; 0x28
 8004d38:	d00c      	beq.n	8004d54 <HAL_SPI_Init+0x1b0>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	2b30      	cmp	r3, #48	; 0x30
 8004d40:	d008      	beq.n	8004d54 <HAL_SPI_Init+0x1b0>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	2b38      	cmp	r3, #56	; 0x38
 8004d48:	d004      	beq.n	8004d54 <HAL_SPI_Init+0x1b0>
 8004d4a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004d4e:	4835      	ldr	r0, [pc, #212]	; (8004e24 <HAL_SPI_Init+0x280>)
 8004d50:	f7fc fc0b 	bl	800156a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d008      	beq.n	8004d6e <HAL_SPI_Init+0x1ca>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	2b80      	cmp	r3, #128	; 0x80
 8004d62:	d004      	beq.n	8004d6e <HAL_SPI_Init+0x1ca>
 8004d64:	f240 114b 	movw	r1, #331	; 0x14b
 8004d68:	482e      	ldr	r0, [pc, #184]	; (8004e24 <HAL_SPI_Init+0x280>)
 8004d6a:	f7fc fbfe 	bl	800156a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d008      	beq.n	8004d88 <HAL_SPI_Init+0x1e4>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	2b10      	cmp	r3, #16
 8004d7c:	d004      	beq.n	8004d88 <HAL_SPI_Init+0x1e4>
 8004d7e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004d82:	4828      	ldr	r0, [pc, #160]	; (8004e24 <HAL_SPI_Init+0x280>)
 8004d84:	f7fc fbf1 	bl	800156a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d119      	bne.n	8004dc4 <HAL_SPI_Init+0x220>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d008      	beq.n	8004daa <HAL_SPI_Init+0x206>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d004      	beq.n	8004daa <HAL_SPI_Init+0x206>
 8004da0:	f240 114f 	movw	r1, #335	; 0x14f
 8004da4:	481f      	ldr	r0, [pc, #124]	; (8004e24 <HAL_SPI_Init+0x280>)
 8004da6:	f7fc fbe0 	bl	800156a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d008      	beq.n	8004dc4 <HAL_SPI_Init+0x220>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d004      	beq.n	8004dc4 <HAL_SPI_Init+0x220>
 8004dba:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004dbe:	4819      	ldr	r0, [pc, #100]	; (8004e24 <HAL_SPI_Init+0x280>)
 8004dc0:	f7fc fbd3 	bl	800156a <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <HAL_SPI_Init+0x240>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fc fd04 	bl	80017ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dfa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e04:	d910      	bls.n	8004e28 <HAL_SPI_Init+0x284>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	e010      	b.n	8004e2e <HAL_SPI_Init+0x28a>
 8004e0c:	40013000 	.word	0x40013000
 8004e10:	40003800 	.word	0x40003800
 8004e14:	40003c00 	.word	0x40003c00
 8004e18:	40013400 	.word	0x40013400
 8004e1c:	40015000 	.word	0x40015000
 8004e20:	40015400 	.word	0x40015400
 8004e24:	08006ea8 	.word	0x08006ea8
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e36:	d007      	beq.n	8004e48 <HAL_SPI_Init+0x2a4>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e40:	d002      	beq.n	8004e48 <HAL_SPI_Init+0x2a4>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10b      	bne.n	8004e68 <HAL_SPI_Init+0x2c4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e58:	d903      	bls.n	8004e62 <HAL_SPI_Init+0x2be>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	631a      	str	r2, [r3, #48]	; 0x30
 8004e60:	e002      	b.n	8004e68 <HAL_SPI_Init+0x2c4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	431a      	orrs	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e86:	431a      	orrs	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	ea42 0103 	orr.w	r1, r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	0c1b      	lsrs	r3, r3, #16
 8004ea8:	f003 0204 	and.w	r2, r3, #4
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	ea42 0103 	orr.w	r1, r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69da      	ldr	r2, [r3, #28]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ed8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop

08004ef4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	4613      	mov	r3, r2
 8004f02:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d009      	beq.n	8004f24 <HAL_SPI_Transmit+0x30>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f18:	d004      	beq.n	8004f24 <HAL_SPI_Transmit+0x30>
 8004f1a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8004f1e:	4895      	ldr	r0, [pc, #596]	; (8005174 <HAL_SPI_Transmit+0x280>)
 8004f20:	f7fc fb23 	bl	800156a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d101      	bne.n	8004f32 <HAL_SPI_Transmit+0x3e>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e152      	b.n	80051d8 <HAL_SPI_Transmit+0x2e4>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f3a:	f7fd f879 	bl	8002030 <HAL_GetTick>
 8004f3e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f40:	88fb      	ldrh	r3, [r7, #6]
 8004f42:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d002      	beq.n	8004f56 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8004f50:	2302      	movs	r3, #2
 8004f52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f54:	e137      	b.n	80051c6 <HAL_SPI_Transmit+0x2d2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <HAL_SPI_Transmit+0x6e>
 8004f5c:	88fb      	ldrh	r3, [r7, #6]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d102      	bne.n	8004f68 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f66:	e12e      	b.n	80051c6 <HAL_SPI_Transmit+0x2d2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2203      	movs	r2, #3
 8004f6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	88fa      	ldrh	r2, [r7, #6]
 8004f80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	88fa      	ldrh	r2, [r7, #6]
 8004f86:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fb2:	d107      	bne.n	8004fc4 <HAL_SPI_Transmit+0xd0>
  {
    SPI_1LINE_TX(hspi);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fce:	2b40      	cmp	r3, #64	; 0x40
 8004fd0:	d007      	beq.n	8004fe2 <HAL_SPI_Transmit+0xee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fe0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fea:	d94b      	bls.n	8005084 <HAL_SPI_Transmit+0x190>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <HAL_SPI_Transmit+0x106>
 8004ff4:	8afb      	ldrh	r3, [r7, #22]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d13e      	bne.n	8005078 <HAL_SPI_Transmit+0x184>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffe:	881a      	ldrh	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500a:	1c9a      	adds	r2, r3, #2
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005014:	b29b      	uxth	r3, r3
 8005016:	3b01      	subs	r3, #1
 8005018:	b29a      	uxth	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800501e:	e02b      	b.n	8005078 <HAL_SPI_Transmit+0x184>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b02      	cmp	r3, #2
 800502c:	d112      	bne.n	8005054 <HAL_SPI_Transmit+0x160>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005032:	881a      	ldrh	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503e:	1c9a      	adds	r2, r3, #2
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005048:	b29b      	uxth	r3, r3
 800504a:	3b01      	subs	r3, #1
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005052:	e011      	b.n	8005078 <HAL_SPI_Transmit+0x184>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005054:	f7fc ffec 	bl	8002030 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d803      	bhi.n	800506c <HAL_SPI_Transmit+0x178>
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506a:	d102      	bne.n	8005072 <HAL_SPI_Transmit+0x17e>
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d102      	bne.n	8005078 <HAL_SPI_Transmit+0x184>
        {
          errorcode = HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005076:	e0a6      	b.n	80051c6 <HAL_SPI_Transmit+0x2d2>
    while (hspi->TxXferCount > 0U)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800507c:	b29b      	uxth	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1ce      	bne.n	8005020 <HAL_SPI_Transmit+0x12c>
 8005082:	e07e      	b.n	8005182 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <HAL_SPI_Transmit+0x19e>
 800508c:	8afb      	ldrh	r3, [r7, #22]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d172      	bne.n	8005178 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b01      	cmp	r3, #1
 800509a:	d912      	bls.n	80050c2 <HAL_SPI_Transmit+0x1ce>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a0:	881a      	ldrh	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ac:	1c9a      	adds	r2, r3, #2
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3b02      	subs	r3, #2
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050c0:	e05a      	b.n	8005178 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	330c      	adds	r3, #12
 80050cc:	7812      	ldrb	r2, [r2, #0]
 80050ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b01      	subs	r3, #1
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80050e8:	e046      	b.n	8005178 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d12b      	bne.n	8005150 <HAL_SPI_Transmit+0x25c>
      {
        if (hspi->TxXferCount > 1U)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d912      	bls.n	8005128 <HAL_SPI_Transmit+0x234>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005106:	881a      	ldrh	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005112:	1c9a      	adds	r2, r3, #2
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b02      	subs	r3, #2
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005126:	e027      	b.n	8005178 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	330c      	adds	r3, #12
 8005132:	7812      	ldrb	r2, [r2, #0]
 8005134:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800514e:	e013      	b.n	8005178 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005150:	f7fc ff6e 	bl	8002030 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	429a      	cmp	r2, r3
 800515e:	d803      	bhi.n	8005168 <HAL_SPI_Transmit+0x274>
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005166:	d102      	bne.n	800516e <HAL_SPI_Transmit+0x27a>
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d104      	bne.n	8005178 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005172:	e028      	b.n	80051c6 <HAL_SPI_Transmit+0x2d2>
 8005174:	08006ea8 	.word	0x08006ea8
    while (hspi->TxXferCount > 0U)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800517c:	b29b      	uxth	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1b3      	bne.n	80050ea <HAL_SPI_Transmit+0x1f6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	6839      	ldr	r1, [r7, #0]
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 fc3e 	bl	8005a08 <SPI_EndRxTxTransaction>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2220      	movs	r2, #32
 8005196:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10a      	bne.n	80051b6 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051a0:	2300      	movs	r3, #0
 80051a2:	613b      	str	r3, [r7, #16]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	613b      	str	r3, [r7, #16]
 80051b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	77fb      	strb	r3, [r7, #31]
 80051c2:	e000      	b.n	80051c6 <HAL_SPI_Transmit+0x2d2>
  }

error:
 80051c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80051d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3720      	adds	r7, #32
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08a      	sub	sp, #40	; 0x28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80051ee:	2301      	movs	r3, #1
 80051f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d004      	beq.n	800520a <HAL_SPI_TransmitReceive+0x2a>
 8005200:	f240 41bf 	movw	r1, #1215	; 0x4bf
 8005204:	4895      	ldr	r0, [pc, #596]	; (800545c <HAL_SPI_TransmitReceive+0x27c>)
 8005206:	f7fc f9b0 	bl	800156a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005210:	2b01      	cmp	r3, #1
 8005212:	d101      	bne.n	8005218 <HAL_SPI_TransmitReceive+0x38>
 8005214:	2302      	movs	r3, #2
 8005216:	e1fd      	b.n	8005614 <HAL_SPI_TransmitReceive+0x434>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005220:	f7fc ff06 	bl	8002030 <HAL_GetTick>
 8005224:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800522c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005234:	887b      	ldrh	r3, [r7, #2]
 8005236:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005238:	887b      	ldrh	r3, [r7, #2]
 800523a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800523c:	7efb      	ldrb	r3, [r7, #27]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d00e      	beq.n	8005260 <HAL_SPI_TransmitReceive+0x80>
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005248:	d106      	bne.n	8005258 <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d102      	bne.n	8005258 <HAL_SPI_TransmitReceive+0x78>
 8005252:	7efb      	ldrb	r3, [r7, #27]
 8005254:	2b04      	cmp	r3, #4
 8005256:	d003      	beq.n	8005260 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 8005258:	2302      	movs	r3, #2
 800525a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800525e:	e1cf      	b.n	8005600 <HAL_SPI_TransmitReceive+0x420>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d005      	beq.n	8005272 <HAL_SPI_TransmitReceive+0x92>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <HAL_SPI_TransmitReceive+0x92>
 800526c:	887b      	ldrh	r3, [r7, #2]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d103      	bne.n	800527a <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005278:	e1c2      	b.n	8005600 <HAL_SPI_TransmitReceive+0x420>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b04      	cmp	r3, #4
 8005284:	d003      	beq.n	800528e <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2205      	movs	r2, #5
 800528a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	887a      	ldrh	r2, [r7, #2]
 800529e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	887a      	ldrh	r2, [r7, #2]
 80052a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	887a      	ldrh	r2, [r7, #2]
 80052b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	887a      	ldrh	r2, [r7, #2]
 80052ba:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052d0:	d802      	bhi.n	80052d8 <HAL_SPI_TransmitReceive+0xf8>
 80052d2:	8a3b      	ldrh	r3, [r7, #16]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d908      	bls.n	80052ea <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052e6:	605a      	str	r2, [r3, #4]
 80052e8:	e007      	b.n	80052fa <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052f8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005304:	2b40      	cmp	r3, #64	; 0x40
 8005306:	d007      	beq.n	8005318 <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005316:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005320:	d97c      	bls.n	800541c <HAL_SPI_TransmitReceive+0x23c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <HAL_SPI_TransmitReceive+0x150>
 800532a:	8a7b      	ldrh	r3, [r7, #18]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d169      	bne.n	8005404 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005334:	881a      	ldrh	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005340:	1c9a      	adds	r2, r3, #2
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800534a:	b29b      	uxth	r3, r3
 800534c:	3b01      	subs	r3, #1
 800534e:	b29a      	uxth	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005354:	e056      	b.n	8005404 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b02      	cmp	r3, #2
 8005362:	d11b      	bne.n	800539c <HAL_SPI_TransmitReceive+0x1bc>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005368:	b29b      	uxth	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d016      	beq.n	800539c <HAL_SPI_TransmitReceive+0x1bc>
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	2b01      	cmp	r3, #1
 8005372:	d113      	bne.n	800539c <HAL_SPI_TransmitReceive+0x1bc>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005378:	881a      	ldrh	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	1c9a      	adds	r2, r3, #2
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800538e:	b29b      	uxth	r3, r3
 8005390:	3b01      	subs	r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d11c      	bne.n	80053e4 <HAL_SPI_TransmitReceive+0x204>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d016      	beq.n	80053e4 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	b292      	uxth	r2, r2
 80053c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c8:	1c9a      	adds	r2, r3, #2
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053e0:	2301      	movs	r3, #1
 80053e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053e4:	f7fc fe24 	bl	8002030 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d807      	bhi.n	8005404 <HAL_SPI_TransmitReceive+0x224>
 80053f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fa:	d003      	beq.n	8005404 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005402:	e0fd      	b.n	8005600 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005408:	b29b      	uxth	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1a3      	bne.n	8005356 <HAL_SPI_TransmitReceive+0x176>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005414:	b29b      	uxth	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d19d      	bne.n	8005356 <HAL_SPI_TransmitReceive+0x176>
 800541a:	e0e1      	b.n	80055e0 <HAL_SPI_TransmitReceive+0x400>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d003      	beq.n	800542c <HAL_SPI_TransmitReceive+0x24c>
 8005424:	8a7b      	ldrh	r3, [r7, #18]
 8005426:	2b01      	cmp	r3, #1
 8005428:	f040 80cd 	bne.w	80055c6 <HAL_SPI_TransmitReceive+0x3e6>
    {
      if (hspi->TxXferCount > 1U)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005430:	b29b      	uxth	r3, r3
 8005432:	2b01      	cmp	r3, #1
 8005434:	d914      	bls.n	8005460 <HAL_SPI_TransmitReceive+0x280>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543a:	881a      	ldrh	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005446:	1c9a      	adds	r2, r3, #2
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005450:	b29b      	uxth	r3, r3
 8005452:	3b02      	subs	r3, #2
 8005454:	b29a      	uxth	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	87da      	strh	r2, [r3, #62]	; 0x3e
 800545a:	e0b4      	b.n	80055c6 <HAL_SPI_TransmitReceive+0x3e6>
 800545c:	08006ea8 	.word	0x08006ea8
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	330c      	adds	r3, #12
 800546a:	7812      	ldrb	r2, [r2, #0]
 800546c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005472:	1c5a      	adds	r2, r3, #1
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800547c:	b29b      	uxth	r3, r3
 800547e:	3b01      	subs	r3, #1
 8005480:	b29a      	uxth	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005486:	e09e      	b.n	80055c6 <HAL_SPI_TransmitReceive+0x3e6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b02      	cmp	r3, #2
 8005494:	d134      	bne.n	8005500 <HAL_SPI_TransmitReceive+0x320>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800549a:	b29b      	uxth	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d02f      	beq.n	8005500 <HAL_SPI_TransmitReceive+0x320>
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d12c      	bne.n	8005500 <HAL_SPI_TransmitReceive+0x320>
      {
        if (hspi->TxXferCount > 1U)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d912      	bls.n	80054d6 <HAL_SPI_TransmitReceive+0x2f6>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b4:	881a      	ldrh	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c0:	1c9a      	adds	r2, r3, #2
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	3b02      	subs	r3, #2
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054d4:	e012      	b.n	80054fc <HAL_SPI_TransmitReceive+0x31c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	330c      	adds	r3, #12
 80054e0:	7812      	ldrb	r2, [r2, #0]
 80054e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	3b01      	subs	r3, #1
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054fc:	2300      	movs	r3, #0
 80054fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b01      	cmp	r3, #1
 800550c:	d148      	bne.n	80055a0 <HAL_SPI_TransmitReceive+0x3c0>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005514:	b29b      	uxth	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d042      	beq.n	80055a0 <HAL_SPI_TransmitReceive+0x3c0>
      {
        if (hspi->RxXferCount > 1U)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005520:	b29b      	uxth	r3, r3
 8005522:	2b01      	cmp	r3, #1
 8005524:	d923      	bls.n	800556e <HAL_SPI_TransmitReceive+0x38e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005530:	b292      	uxth	r2, r2
 8005532:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005538:	1c9a      	adds	r2, r3, #2
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005544:	b29b      	uxth	r3, r3
 8005546:	3b02      	subs	r3, #2
 8005548:	b29a      	uxth	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005556:	b29b      	uxth	r3, r3
 8005558:	2b01      	cmp	r3, #1
 800555a:	d81f      	bhi.n	800559c <HAL_SPI_TransmitReceive+0x3bc>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800556a:	605a      	str	r2, [r3, #4]
 800556c:	e016      	b.n	800559c <HAL_SPI_TransmitReceive+0x3bc>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f103 020c 	add.w	r2, r3, #12
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557a:	7812      	ldrb	r2, [r2, #0]
 800557c:	b2d2      	uxtb	r2, r2
 800557e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005584:	1c5a      	adds	r2, r3, #1
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005590:	b29b      	uxth	r3, r3
 8005592:	3b01      	subs	r3, #1
 8005594:	b29a      	uxth	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800559c:	2301      	movs	r3, #1
 800559e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055a0:	f7fc fd46 	bl	8002030 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d803      	bhi.n	80055b8 <HAL_SPI_TransmitReceive+0x3d8>
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b6:	d102      	bne.n	80055be <HAL_SPI_TransmitReceive+0x3de>
 80055b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d103      	bne.n	80055c6 <HAL_SPI_TransmitReceive+0x3e6>
      {
        errorcode = HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80055c4:	e01c      	b.n	8005600 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f47f af5b 	bne.w	8005488 <HAL_SPI_TransmitReceive+0x2a8>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055d8:	b29b      	uxth	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f47f af54 	bne.w	8005488 <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055e0:	69fa      	ldr	r2, [r7, #28]
 80055e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 fa0f 	bl	8005a08 <SPI_EndRxTxTransaction>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d006      	beq.n	80055fe <HAL_SPI_TransmitReceive+0x41e>
  {
    errorcode = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2220      	movs	r2, #32
 80055fa:	661a      	str	r2, [r3, #96]	; 0x60
 80055fc:	e000      	b.n	8005600 <HAL_SPI_TransmitReceive+0x420>
  }

error :
 80055fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005610:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005614:	4618      	mov	r0, r3
 8005616:	3728      	adds	r7, #40	; 0x28
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	099b      	lsrs	r3, r3, #6
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10f      	bne.n	8005660 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	099b      	lsrs	r3, r3, #6
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d004      	beq.n	8005660 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	4798      	blx	r3
    return;
 800565e:	e0d8      	b.n	8005812 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	085b      	lsrs	r3, r3, #1
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <HAL_SPI_IRQHandler+0x66>
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	09db      	lsrs	r3, r3, #7
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d004      	beq.n	8005682 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	4798      	blx	r3
    return;
 8005680:	e0c7      	b.n	8005812 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	095b      	lsrs	r3, r3, #5
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10c      	bne.n	80056a8 <HAL_SPI_IRQHandler+0x8c>
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	099b      	lsrs	r3, r3, #6
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d106      	bne.n	80056a8 <HAL_SPI_IRQHandler+0x8c>
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	0a1b      	lsrs	r3, r3, #8
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f000 80b5 	beq.w	8005812 <HAL_SPI_IRQHandler+0x1f6>
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	095b      	lsrs	r3, r3, #5
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 80ae 	beq.w	8005812 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	099b      	lsrs	r3, r3, #6
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d023      	beq.n	800570a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d011      	beq.n	80056f2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d2:	f043 0204 	orr.w	r2, r3, #4
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056da:	2300      	movs	r3, #0
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	617b      	str	r3, [r7, #20]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	e00b      	b.n	800570a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056f2:	2300      	movs	r3, #0
 80056f4:	613b      	str	r3, [r7, #16]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	613b      	str	r3, [r7, #16]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	613b      	str	r3, [r7, #16]
 8005706:	693b      	ldr	r3, [r7, #16]
        return;
 8005708:	e083      	b.n	8005812 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	095b      	lsrs	r3, r3, #5
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d014      	beq.n	8005740 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800571a:	f043 0201 	orr.w	r2, r3, #1
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	0a1b      	lsrs	r3, r3, #8
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00c      	beq.n	8005766 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005750:	f043 0208 	orr.w	r2, r3, #8
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005758:	2300      	movs	r3, #0
 800575a:	60bb      	str	r3, [r7, #8]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	60bb      	str	r3, [r7, #8]
 8005764:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800576a:	2b00      	cmp	r3, #0
 800576c:	d050      	beq.n	8005810 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800577c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d104      	bne.n	800579a <HAL_SPI_IRQHandler+0x17e>
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b00      	cmp	r3, #0
 8005798:	d034      	beq.n	8005804 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0203 	bic.w	r2, r2, #3
 80057a8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d011      	beq.n	80057d6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b6:	4a18      	ldr	r2, [pc, #96]	; (8005818 <HAL_SPI_IRQHandler+0x1fc>)
 80057b8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fc fef4 	bl	80025ac <HAL_DMA_Abort_IT>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d005      	beq.n	80057d6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d016      	beq.n	800580c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e2:	4a0d      	ldr	r2, [pc, #52]	; (8005818 <HAL_SPI_IRQHandler+0x1fc>)
 80057e4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fc fede 	bl	80025ac <HAL_DMA_Abort_IT>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005802:	e003      	b.n	800580c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f809 	bl	800581c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800580a:	e000      	b.n	800580e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800580c:	bf00      	nop
    return;
 800580e:	bf00      	nop
 8005810:	bf00      	nop
  }
}
 8005812:	3720      	adds	r7, #32
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	08005831 	.word	0x08005831

0800581c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f7ff ffe5 	bl	800581c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005852:	bf00      	nop
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b084      	sub	sp, #16
 800585e:	af00      	add	r7, sp, #0
 8005860:	60f8      	str	r0, [r7, #12]
 8005862:	60b9      	str	r1, [r7, #8]
 8005864:	603b      	str	r3, [r7, #0]
 8005866:	4613      	mov	r3, r2
 8005868:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800586a:	e04c      	b.n	8005906 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005872:	d048      	beq.n	8005906 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005874:	f7fc fbdc 	bl	8002030 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	429a      	cmp	r2, r3
 8005882:	d902      	bls.n	800588a <SPI_WaitFlagStateUntilTimeout+0x30>
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d13d      	bne.n	8005906 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005898:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058a2:	d111      	bne.n	80058c8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ac:	d004      	beq.n	80058b8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b6:	d107      	bne.n	80058c8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058d0:	d10f      	bne.n	80058f2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e00f      	b.n	8005926 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4013      	ands	r3, r2
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	429a      	cmp	r2, r3
 8005914:	bf0c      	ite	eq
 8005916:	2301      	moveq	r3, #1
 8005918:	2300      	movne	r3, #0
 800591a:	b2db      	uxtb	r3, r3
 800591c:	461a      	mov	r2, r3
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	429a      	cmp	r2, r3
 8005922:	d1a3      	bne.n	800586c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b084      	sub	sp, #16
 8005932:	af00      	add	r7, sp, #0
 8005934:	60f8      	str	r0, [r7, #12]
 8005936:	60b9      	str	r1, [r7, #8]
 8005938:	607a      	str	r2, [r7, #4]
 800593a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800593c:	e057      	b.n	80059ee <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005944:	d106      	bne.n	8005954 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d103      	bne.n	8005954 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	330c      	adds	r3, #12
 8005952:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595a:	d048      	beq.n	80059ee <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800595c:	f7fc fb68 	bl	8002030 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	429a      	cmp	r2, r3
 800596a:	d902      	bls.n	8005972 <SPI_WaitFifoStateUntilTimeout+0x44>
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d13d      	bne.n	80059ee <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005980:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800598a:	d111      	bne.n	80059b0 <SPI_WaitFifoStateUntilTimeout+0x82>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005994:	d004      	beq.n	80059a0 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800599e:	d107      	bne.n	80059b0 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059b8:	d10f      	bne.n	80059da <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e008      	b.n	8005a00 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	4013      	ands	r3, r2
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d19f      	bne.n	800593e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af02      	add	r7, sp, #8
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f7ff ff84 	bl	800592e <SPI_WaitFifoStateUntilTimeout>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d007      	beq.n	8005a3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a30:	f043 0220 	orr.w	r2, r3, #32
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e027      	b.n	8005a8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2200      	movs	r2, #0
 8005a44:	2180      	movs	r1, #128	; 0x80
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f7ff ff07 	bl	800585a <SPI_WaitFlagStateUntilTimeout>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d007      	beq.n	8005a62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a56:	f043 0220 	orr.w	r2, r3, #32
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e014      	b.n	8005a8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f7ff ff5d 	bl	800592e <SPI_WaitFifoStateUntilTimeout>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d007      	beq.n	8005a8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a7e:	f043 0220 	orr.w	r2, r3, #32
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e000      	b.n	8005a8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e09f      	b.n	8005be6 <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d02d      	beq.n	8005b0a <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a4f      	ldr	r2, [pc, #316]	; (8005bf0 <HAL_UART_Init+0x15c>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d055      	beq.n	8005b64 <HAL_UART_Init+0xd0>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a4d      	ldr	r2, [pc, #308]	; (8005bf4 <HAL_UART_Init+0x160>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d050      	beq.n	8005b64 <HAL_UART_Init+0xd0>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a4c      	ldr	r2, [pc, #304]	; (8005bf8 <HAL_UART_Init+0x164>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d04b      	beq.n	8005b64 <HAL_UART_Init+0xd0>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a4a      	ldr	r2, [pc, #296]	; (8005bfc <HAL_UART_Init+0x168>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d046      	beq.n	8005b64 <HAL_UART_Init+0xd0>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a49      	ldr	r2, [pc, #292]	; (8005c00 <HAL_UART_Init+0x16c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d041      	beq.n	8005b64 <HAL_UART_Init+0xd0>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a47      	ldr	r2, [pc, #284]	; (8005c04 <HAL_UART_Init+0x170>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d03c      	beq.n	8005b64 <HAL_UART_Init+0xd0>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a46      	ldr	r2, [pc, #280]	; (8005c08 <HAL_UART_Init+0x174>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d037      	beq.n	8005b64 <HAL_UART_Init+0xd0>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a44      	ldr	r2, [pc, #272]	; (8005c0c <HAL_UART_Init+0x178>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d032      	beq.n	8005b64 <HAL_UART_Init+0xd0>
 8005afe:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8005b02:	4843      	ldr	r0, [pc, #268]	; (8005c10 <HAL_UART_Init+0x17c>)
 8005b04:	f7fb fd31 	bl	800156a <assert_failed>
 8005b08:	e02c      	b.n	8005b64 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a38      	ldr	r2, [pc, #224]	; (8005bf0 <HAL_UART_Init+0x15c>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d027      	beq.n	8005b64 <HAL_UART_Init+0xd0>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a36      	ldr	r2, [pc, #216]	; (8005bf4 <HAL_UART_Init+0x160>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d022      	beq.n	8005b64 <HAL_UART_Init+0xd0>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a35      	ldr	r2, [pc, #212]	; (8005bf8 <HAL_UART_Init+0x164>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d01d      	beq.n	8005b64 <HAL_UART_Init+0xd0>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a33      	ldr	r2, [pc, #204]	; (8005bfc <HAL_UART_Init+0x168>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d018      	beq.n	8005b64 <HAL_UART_Init+0xd0>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a32      	ldr	r2, [pc, #200]	; (8005c00 <HAL_UART_Init+0x16c>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d013      	beq.n	8005b64 <HAL_UART_Init+0xd0>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a30      	ldr	r2, [pc, #192]	; (8005c04 <HAL_UART_Init+0x170>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d00e      	beq.n	8005b64 <HAL_UART_Init+0xd0>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a2f      	ldr	r2, [pc, #188]	; (8005c08 <HAL_UART_Init+0x174>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d009      	beq.n	8005b64 <HAL_UART_Init+0xd0>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a2d      	ldr	r2, [pc, #180]	; (8005c0c <HAL_UART_Init+0x178>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d004      	beq.n	8005b64 <HAL_UART_Init+0xd0>
 8005b5a:	f240 112f 	movw	r1, #303	; 0x12f
 8005b5e:	482c      	ldr	r0, [pc, #176]	; (8005c10 <HAL_UART_Init+0x17c>)
 8005b60:	f7fb fd03 	bl	800156a <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d106      	bne.n	8005b7a <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7fc f8e3 	bl	8001d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2224      	movs	r2, #36	; 0x24
 8005b7e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0201 	bic.w	r2, r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 fb01 	bl	8006198 <UART_SetConfig>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e022      	b.n	8005be6 <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fe31 	bl	8006810 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bbc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bcc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f042 0201 	orr.w	r2, r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 ff6a 	bl	8006ab8 <UART_CheckIdleState>
 8005be4:	4603      	mov	r3, r0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	40011000 	.word	0x40011000
 8005bf4:	40004400 	.word	0x40004400
 8005bf8:	40004800 	.word	0x40004800
 8005bfc:	40004c00 	.word	0x40004c00
 8005c00:	40005000 	.word	0x40005000
 8005c04:	40011400 	.word	0x40011400
 8005c08:	40007800 	.word	0x40007800
 8005c0c:	40007c00 	.word	0x40007c00
 8005c10:	08006ee0 	.word	0x08006ee0

08005c14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08a      	sub	sp, #40	; 0x28
 8005c18:	af02      	add	r7, sp, #8
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	603b      	str	r3, [r7, #0]
 8005c20:	4613      	mov	r3, r2
 8005c22:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	d17f      	bne.n	8005d2c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <HAL_UART_Transmit+0x24>
 8005c32:	88fb      	ldrh	r3, [r7, #6]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e078      	b.n	8005d2e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d101      	bne.n	8005c4a <HAL_UART_Transmit+0x36>
 8005c46:	2302      	movs	r3, #2
 8005c48:	e071      	b.n	8005d2e <HAL_UART_Transmit+0x11a>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2221      	movs	r2, #33	; 0x21
 8005c5c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005c5e:	f7fc f9e7 	bl	8002030 <HAL_GetTick>
 8005c62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	88fa      	ldrh	r2, [r7, #6]
 8005c68:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	88fa      	ldrh	r2, [r7, #6]
 8005c70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c7c:	d108      	bne.n	8005c90 <HAL_UART_Transmit+0x7c>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d104      	bne.n	8005c90 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	61bb      	str	r3, [r7, #24]
 8005c8e:	e003      	b.n	8005c98 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c94:	2300      	movs	r3, #0
 8005c96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005ca0:	e02c      	b.n	8005cfc <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2180      	movs	r1, #128	; 0x80
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 ff48 	bl	8006b42 <UART_WaitOnFlagUntilTimeout>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e038      	b.n	8005d2e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10b      	bne.n	8005cda <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cd0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	3302      	adds	r3, #2
 8005cd6:	61bb      	str	r3, [r7, #24]
 8005cd8:	e007      	b.n	8005cea <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	781a      	ldrb	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1cc      	bne.n	8005ca2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	2140      	movs	r1, #64	; 0x40
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 ff15 	bl	8006b42 <UART_WaitOnFlagUntilTimeout>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e005      	b.n	8005d2e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2220      	movs	r2, #32
 8005d26:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	e000      	b.n	8005d2e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8005d2c:	2302      	movs	r3, #2
  }
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3720      	adds	r7, #32
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b08a      	sub	sp, #40	; 0x28
 8005d3a:	af02      	add	r7, sp, #8
 8005d3c:	60f8      	str	r0, [r7, #12]
 8005d3e:	60b9      	str	r1, [r7, #8]
 8005d40:	603b      	str	r3, [r7, #0]
 8005d42:	4613      	mov	r3, r2
 8005d44:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d4a:	2b20      	cmp	r3, #32
 8005d4c:	f040 80ba 	bne.w	8005ec4 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d002      	beq.n	8005d5c <HAL_UART_Receive+0x26>
 8005d56:	88fb      	ldrh	r3, [r7, #6]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d101      	bne.n	8005d60 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e0b2      	b.n	8005ec6 <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d101      	bne.n	8005d6e <HAL_UART_Receive+0x38>
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	e0ab      	b.n	8005ec6 <HAL_UART_Receive+0x190>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2222      	movs	r2, #34	; 0x22
 8005d80:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005d82:	f7fc f955 	bl	8002030 <HAL_GetTick>
 8005d86:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	88fa      	ldrh	r2, [r7, #6]
 8005d8c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	88fa      	ldrh	r2, [r7, #6]
 8005d94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da0:	d10e      	bne.n	8005dc0 <HAL_UART_Receive+0x8a>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d105      	bne.n	8005db6 <HAL_UART_Receive+0x80>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005db0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005db4:	e02d      	b.n	8005e12 <HAL_UART_Receive+0xdc>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	22ff      	movs	r2, #255	; 0xff
 8005dba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dbe:	e028      	b.n	8005e12 <HAL_UART_Receive+0xdc>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10d      	bne.n	8005de4 <HAL_UART_Receive+0xae>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d104      	bne.n	8005dda <HAL_UART_Receive+0xa4>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	22ff      	movs	r2, #255	; 0xff
 8005dd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dd8:	e01b      	b.n	8005e12 <HAL_UART_Receive+0xdc>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	227f      	movs	r2, #127	; 0x7f
 8005dde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005de2:	e016      	b.n	8005e12 <HAL_UART_Receive+0xdc>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dec:	d10d      	bne.n	8005e0a <HAL_UART_Receive+0xd4>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d104      	bne.n	8005e00 <HAL_UART_Receive+0xca>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	227f      	movs	r2, #127	; 0x7f
 8005dfa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dfe:	e008      	b.n	8005e12 <HAL_UART_Receive+0xdc>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	223f      	movs	r2, #63	; 0x3f
 8005e04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e08:	e003      	b.n	8005e12 <HAL_UART_Receive+0xdc>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e18:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e22:	d108      	bne.n	8005e36 <HAL_UART_Receive+0x100>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d104      	bne.n	8005e36 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	61bb      	str	r3, [r7, #24]
 8005e34:	e003      	b.n	8005e3e <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005e46:	e032      	b.n	8005eae <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	2120      	movs	r1, #32
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 fe75 	bl	8006b42 <UART_WaitOnFlagUntilTimeout>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e031      	b.n	8005ec6 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10c      	bne.n	8005e82 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	8a7b      	ldrh	r3, [r7, #18]
 8005e72:	4013      	ands	r3, r2
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	3302      	adds	r3, #2
 8005e7e:	61bb      	str	r3, [r7, #24]
 8005e80:	e00c      	b.n	8005e9c <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	8a7b      	ldrh	r3, [r7, #18]
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	4013      	ands	r3, r2
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1c6      	bne.n	8005e48 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	e000      	b.n	8005ec6 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 8005ec4:	2302      	movs	r3, #2
  }
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3720      	adds	r7, #32
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ef0:	69fa      	ldr	r2, [r7, #28]
 8005ef2:	f640 030f 	movw	r3, #2063	; 0x80f
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d113      	bne.n	8005f28 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	f003 0320 	and.w	r3, r3, #32
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00e      	beq.n	8005f28 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	f003 0320 	and.w	r3, r3, #32
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d009      	beq.n	8005f28 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 8114 	beq.w	8006146 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	4798      	blx	r3
      }
      return;
 8005f26:	e10e      	b.n	8006146 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 80d6 	beq.w	80060dc <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d105      	bne.n	8005f46 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 80cb 	beq.w	80060dc <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00e      	beq.n	8005f6e <HAL_UART_IRQHandler+0x9e>
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d009      	beq.n	8005f6e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f66:	f043 0201 	orr.w	r2, r3, #1
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00e      	beq.n	8005f96 <HAL_UART_IRQHandler+0xc6>
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d009      	beq.n	8005f96 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2202      	movs	r2, #2
 8005f88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f8e:	f043 0204 	orr.w	r2, r3, #4
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00e      	beq.n	8005fbe <HAL_UART_IRQHandler+0xee>
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d009      	beq.n	8005fbe <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2204      	movs	r2, #4
 8005fb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fb6:	f043 0202 	orr.w	r2, r3, #2
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	f003 0308 	and.w	r3, r3, #8
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d013      	beq.n	8005ff0 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d104      	bne.n	8005fdc <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d009      	beq.n	8005ff0 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2208      	movs	r2, #8
 8005fe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fe8:	f043 0208 	orr.w	r2, r3, #8
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00f      	beq.n	800601a <HAL_UART_IRQHandler+0x14a>
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00a      	beq.n	800601a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800600c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006012:	f043 0220 	orr.w	r2, r3, #32
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 8093 	beq.w	800614a <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00c      	beq.n	8006048 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	f003 0320 	and.w	r3, r3, #32
 8006034:	2b00      	cmp	r3, #0
 8006036:	d007      	beq.n	8006048 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800604c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006058:	2b40      	cmp	r3, #64	; 0x40
 800605a:	d004      	beq.n	8006066 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006062:	2b00      	cmp	r3, #0
 8006064:	d031      	beq.n	80060ca <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fde6 	bl	8006c38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006076:	2b40      	cmp	r3, #64	; 0x40
 8006078:	d123      	bne.n	80060c2 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006088:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800608e:	2b00      	cmp	r3, #0
 8006090:	d013      	beq.n	80060ba <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006096:	4a30      	ldr	r2, [pc, #192]	; (8006158 <HAL_UART_IRQHandler+0x288>)
 8006098:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fc fa84 	bl	80025ac <HAL_DMA_Abort_IT>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d016      	beq.n	80060d8 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80060b4:	4610      	mov	r0, r2
 80060b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b8:	e00e      	b.n	80060d8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f858 	bl	8006170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c0:	e00a      	b.n	80060d8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f854 	bl	8006170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c8:	e006      	b.n	80060d8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f850 	bl	8006170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80060d6:	e038      	b.n	800614a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d8:	bf00      	nop
    return;
 80060da:	e036      	b.n	800614a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00d      	beq.n	8006102 <HAL_UART_IRQHandler+0x232>
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d008      	beq.n	8006102 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80060f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f842 	bl	8006184 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006100:	e026      	b.n	8006150 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00d      	beq.n	8006128 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006112:	2b00      	cmp	r3, #0
 8006114:	d008      	beq.n	8006128 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800611a:	2b00      	cmp	r3, #0
 800611c:	d017      	beq.n	800614e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	4798      	blx	r3
    }
    return;
 8006126:	e012      	b.n	800614e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00e      	beq.n	8006150 <HAL_UART_IRQHandler+0x280>
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006138:	2b00      	cmp	r3, #0
 800613a:	d009      	beq.n	8006150 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fdb1 	bl	8006ca4 <UART_EndTransmit_IT>
    return;
 8006142:	bf00      	nop
 8006144:	e004      	b.n	8006150 <HAL_UART_IRQHandler+0x280>
      return;
 8006146:	bf00      	nop
 8006148:	e002      	b.n	8006150 <HAL_UART_IRQHandler+0x280>
    return;
 800614a:	bf00      	nop
 800614c:	e000      	b.n	8006150 <HAL_UART_IRQHandler+0x280>
    return;
 800614e:	bf00      	nop
  }

}
 8006150:	3720      	adds	r7, #32
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	08006c79 	.word	0x08006c79

0800615c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	75fb      	strb	r3, [r7, #23]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	4aaa      	ldr	r2, [pc, #680]	; (8006458 <UART_SetConfig+0x2c0>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d904      	bls.n	80061bc <UART_SetConfig+0x24>
 80061b2:	f640 21be 	movw	r1, #2750	; 0xabe
 80061b6:	48a9      	ldr	r0, [pc, #676]	; (800645c <UART_SetConfig+0x2c4>)
 80061b8:	f7fb f9d7 	bl	800156a <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061c4:	d00d      	beq.n	80061e2 <UART_SetConfig+0x4a>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d009      	beq.n	80061e2 <UART_SetConfig+0x4a>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061d6:	d004      	beq.n	80061e2 <UART_SetConfig+0x4a>
 80061d8:	f640 21bf 	movw	r1, #2751	; 0xabf
 80061dc:	489f      	ldr	r0, [pc, #636]	; (800645c <UART_SetConfig+0x2c4>)
 80061de:	f7fb f9c4 	bl	800156a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ea:	d012      	beq.n	8006212 <UART_SetConfig+0x7a>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00e      	beq.n	8006212 <UART_SetConfig+0x7a>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061fc:	d009      	beq.n	8006212 <UART_SetConfig+0x7a>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006206:	d004      	beq.n	8006212 <UART_SetConfig+0x7a>
 8006208:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 800620c:	4893      	ldr	r0, [pc, #588]	; (800645c <UART_SetConfig+0x2c4>)
 800620e:	f7fb f9ac 	bl	800156a <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d009      	beq.n	800622e <UART_SetConfig+0x96>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006222:	d004      	beq.n	800622e <UART_SetConfig+0x96>
 8006224:	f640 21c1 	movw	r1, #2753	; 0xac1
 8006228:	488c      	ldr	r0, [pc, #560]	; (800645c <UART_SetConfig+0x2c4>)
 800622a:	f7fb f99e 	bl	800156a <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00e      	beq.n	8006254 <UART_SetConfig+0xbc>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800623e:	d009      	beq.n	8006254 <UART_SetConfig+0xbc>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006248:	d004      	beq.n	8006254 <UART_SetConfig+0xbc>
 800624a:	f640 21c3 	movw	r1, #2755	; 0xac3
 800624e:	4883      	ldr	r0, [pc, #524]	; (800645c <UART_SetConfig+0x2c4>)
 8006250:	f7fb f98b 	bl	800156a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	f023 030c 	bic.w	r3, r3, #12
 800625c:	2b00      	cmp	r3, #0
 800625e:	d103      	bne.n	8006268 <UART_SetConfig+0xd0>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d104      	bne.n	8006272 <UART_SetConfig+0xda>
 8006268:	f640 21c4 	movw	r1, #2756	; 0xac4
 800626c:	487b      	ldr	r0, [pc, #492]	; (800645c <UART_SetConfig+0x2c4>)
 800626e:	f7fb f97c 	bl	800156a <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d013      	beq.n	80062a2 <UART_SetConfig+0x10a>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006282:	d00e      	beq.n	80062a2 <UART_SetConfig+0x10a>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800628c:	d009      	beq.n	80062a2 <UART_SetConfig+0x10a>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006296:	d004      	beq.n	80062a2 <UART_SetConfig+0x10a>
 8006298:	f640 21c5 	movw	r1, #2757	; 0xac5
 800629c:	486f      	ldr	r0, [pc, #444]	; (800645c <UART_SetConfig+0x2c4>)
 800629e:	f7fb f964 	bl	800156a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d009      	beq.n	80062be <UART_SetConfig+0x126>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b2:	d004      	beq.n	80062be <UART_SetConfig+0x126>
 80062b4:	f640 21c6 	movw	r1, #2758	; 0xac6
 80062b8:	4868      	ldr	r0, [pc, #416]	; (800645c <UART_SetConfig+0x2c4>)
 80062ba:	f7fb f956 	bl	800156a <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	689a      	ldr	r2, [r3, #8]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	431a      	orrs	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	431a      	orrs	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	4b60      	ldr	r3, [pc, #384]	; (8006460 <UART_SetConfig+0x2c8>)
 80062de:	4013      	ands	r3, r2
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	6812      	ldr	r2, [r2, #0]
 80062e4:	6939      	ldr	r1, [r7, #16]
 80062e6:	430b      	orrs	r3, r1
 80062e8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	4313      	orrs	r3, r2
 800630e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	430a      	orrs	r2, r1
 8006322:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a4e      	ldr	r2, [pc, #312]	; (8006464 <UART_SetConfig+0x2cc>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d122      	bne.n	8006374 <UART_SetConfig+0x1dc>
 800632e:	4b4e      	ldr	r3, [pc, #312]	; (8006468 <UART_SetConfig+0x2d0>)
 8006330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006334:	f003 0303 	and.w	r3, r3, #3
 8006338:	2b03      	cmp	r3, #3
 800633a:	d817      	bhi.n	800636c <UART_SetConfig+0x1d4>
 800633c:	a201      	add	r2, pc, #4	; (adr r2, 8006344 <UART_SetConfig+0x1ac>)
 800633e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006342:	bf00      	nop
 8006344:	08006355 	.word	0x08006355
 8006348:	08006361 	.word	0x08006361
 800634c:	0800635b 	.word	0x0800635b
 8006350:	08006367 	.word	0x08006367
 8006354:	2301      	movs	r3, #1
 8006356:	77fb      	strb	r3, [r7, #31]
 8006358:	e14d      	b.n	80065f6 <UART_SetConfig+0x45e>
 800635a:	2302      	movs	r3, #2
 800635c:	77fb      	strb	r3, [r7, #31]
 800635e:	e14a      	b.n	80065f6 <UART_SetConfig+0x45e>
 8006360:	2304      	movs	r3, #4
 8006362:	77fb      	strb	r3, [r7, #31]
 8006364:	e147      	b.n	80065f6 <UART_SetConfig+0x45e>
 8006366:	2308      	movs	r3, #8
 8006368:	77fb      	strb	r3, [r7, #31]
 800636a:	e144      	b.n	80065f6 <UART_SetConfig+0x45e>
 800636c:	2310      	movs	r3, #16
 800636e:	77fb      	strb	r3, [r7, #31]
 8006370:	bf00      	nop
 8006372:	e140      	b.n	80065f6 <UART_SetConfig+0x45e>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a3c      	ldr	r2, [pc, #240]	; (800646c <UART_SetConfig+0x2d4>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d134      	bne.n	80063e8 <UART_SetConfig+0x250>
 800637e:	4b3a      	ldr	r3, [pc, #232]	; (8006468 <UART_SetConfig+0x2d0>)
 8006380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006384:	f003 030c 	and.w	r3, r3, #12
 8006388:	2b0c      	cmp	r3, #12
 800638a:	d829      	bhi.n	80063e0 <UART_SetConfig+0x248>
 800638c:	a201      	add	r2, pc, #4	; (adr r2, 8006394 <UART_SetConfig+0x1fc>)
 800638e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006392:	bf00      	nop
 8006394:	080063c9 	.word	0x080063c9
 8006398:	080063e1 	.word	0x080063e1
 800639c:	080063e1 	.word	0x080063e1
 80063a0:	080063e1 	.word	0x080063e1
 80063a4:	080063d5 	.word	0x080063d5
 80063a8:	080063e1 	.word	0x080063e1
 80063ac:	080063e1 	.word	0x080063e1
 80063b0:	080063e1 	.word	0x080063e1
 80063b4:	080063cf 	.word	0x080063cf
 80063b8:	080063e1 	.word	0x080063e1
 80063bc:	080063e1 	.word	0x080063e1
 80063c0:	080063e1 	.word	0x080063e1
 80063c4:	080063db 	.word	0x080063db
 80063c8:	2300      	movs	r3, #0
 80063ca:	77fb      	strb	r3, [r7, #31]
 80063cc:	e113      	b.n	80065f6 <UART_SetConfig+0x45e>
 80063ce:	2302      	movs	r3, #2
 80063d0:	77fb      	strb	r3, [r7, #31]
 80063d2:	e110      	b.n	80065f6 <UART_SetConfig+0x45e>
 80063d4:	2304      	movs	r3, #4
 80063d6:	77fb      	strb	r3, [r7, #31]
 80063d8:	e10d      	b.n	80065f6 <UART_SetConfig+0x45e>
 80063da:	2308      	movs	r3, #8
 80063dc:	77fb      	strb	r3, [r7, #31]
 80063de:	e10a      	b.n	80065f6 <UART_SetConfig+0x45e>
 80063e0:	2310      	movs	r3, #16
 80063e2:	77fb      	strb	r3, [r7, #31]
 80063e4:	bf00      	nop
 80063e6:	e106      	b.n	80065f6 <UART_SetConfig+0x45e>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a20      	ldr	r2, [pc, #128]	; (8006470 <UART_SetConfig+0x2d8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d120      	bne.n	8006434 <UART_SetConfig+0x29c>
 80063f2:	4b1d      	ldr	r3, [pc, #116]	; (8006468 <UART_SetConfig+0x2d0>)
 80063f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063fc:	2b10      	cmp	r3, #16
 80063fe:	d00f      	beq.n	8006420 <UART_SetConfig+0x288>
 8006400:	2b10      	cmp	r3, #16
 8006402:	d802      	bhi.n	800640a <UART_SetConfig+0x272>
 8006404:	2b00      	cmp	r3, #0
 8006406:	d005      	beq.n	8006414 <UART_SetConfig+0x27c>
 8006408:	e010      	b.n	800642c <UART_SetConfig+0x294>
 800640a:	2b20      	cmp	r3, #32
 800640c:	d005      	beq.n	800641a <UART_SetConfig+0x282>
 800640e:	2b30      	cmp	r3, #48	; 0x30
 8006410:	d009      	beq.n	8006426 <UART_SetConfig+0x28e>
 8006412:	e00b      	b.n	800642c <UART_SetConfig+0x294>
 8006414:	2300      	movs	r3, #0
 8006416:	77fb      	strb	r3, [r7, #31]
 8006418:	e0ed      	b.n	80065f6 <UART_SetConfig+0x45e>
 800641a:	2302      	movs	r3, #2
 800641c:	77fb      	strb	r3, [r7, #31]
 800641e:	e0ea      	b.n	80065f6 <UART_SetConfig+0x45e>
 8006420:	2304      	movs	r3, #4
 8006422:	77fb      	strb	r3, [r7, #31]
 8006424:	e0e7      	b.n	80065f6 <UART_SetConfig+0x45e>
 8006426:	2308      	movs	r3, #8
 8006428:	77fb      	strb	r3, [r7, #31]
 800642a:	e0e4      	b.n	80065f6 <UART_SetConfig+0x45e>
 800642c:	2310      	movs	r3, #16
 800642e:	77fb      	strb	r3, [r7, #31]
 8006430:	bf00      	nop
 8006432:	e0e0      	b.n	80065f6 <UART_SetConfig+0x45e>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a0e      	ldr	r2, [pc, #56]	; (8006474 <UART_SetConfig+0x2dc>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d131      	bne.n	80064a2 <UART_SetConfig+0x30a>
 800643e:	4b0a      	ldr	r3, [pc, #40]	; (8006468 <UART_SetConfig+0x2d0>)
 8006440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006444:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006448:	2b40      	cmp	r3, #64	; 0x40
 800644a:	d020      	beq.n	800648e <UART_SetConfig+0x2f6>
 800644c:	2b40      	cmp	r3, #64	; 0x40
 800644e:	d813      	bhi.n	8006478 <UART_SetConfig+0x2e0>
 8006450:	2b00      	cmp	r3, #0
 8006452:	d016      	beq.n	8006482 <UART_SetConfig+0x2ea>
 8006454:	e021      	b.n	800649a <UART_SetConfig+0x302>
 8006456:	bf00      	nop
 8006458:	019bfcc0 	.word	0x019bfcc0
 800645c:	08006ee0 	.word	0x08006ee0
 8006460:	efff69f3 	.word	0xefff69f3
 8006464:	40011000 	.word	0x40011000
 8006468:	40023800 	.word	0x40023800
 800646c:	40004400 	.word	0x40004400
 8006470:	40004800 	.word	0x40004800
 8006474:	40004c00 	.word	0x40004c00
 8006478:	2b80      	cmp	r3, #128	; 0x80
 800647a:	d005      	beq.n	8006488 <UART_SetConfig+0x2f0>
 800647c:	2bc0      	cmp	r3, #192	; 0xc0
 800647e:	d009      	beq.n	8006494 <UART_SetConfig+0x2fc>
 8006480:	e00b      	b.n	800649a <UART_SetConfig+0x302>
 8006482:	2300      	movs	r3, #0
 8006484:	77fb      	strb	r3, [r7, #31]
 8006486:	e0b6      	b.n	80065f6 <UART_SetConfig+0x45e>
 8006488:	2302      	movs	r3, #2
 800648a:	77fb      	strb	r3, [r7, #31]
 800648c:	e0b3      	b.n	80065f6 <UART_SetConfig+0x45e>
 800648e:	2304      	movs	r3, #4
 8006490:	77fb      	strb	r3, [r7, #31]
 8006492:	e0b0      	b.n	80065f6 <UART_SetConfig+0x45e>
 8006494:	2308      	movs	r3, #8
 8006496:	77fb      	strb	r3, [r7, #31]
 8006498:	e0ad      	b.n	80065f6 <UART_SetConfig+0x45e>
 800649a:	2310      	movs	r3, #16
 800649c:	77fb      	strb	r3, [r7, #31]
 800649e:	bf00      	nop
 80064a0:	e0a9      	b.n	80065f6 <UART_SetConfig+0x45e>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4aaa      	ldr	r2, [pc, #680]	; (8006750 <UART_SetConfig+0x5b8>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d124      	bne.n	80064f6 <UART_SetConfig+0x35e>
 80064ac:	4ba9      	ldr	r3, [pc, #676]	; (8006754 <UART_SetConfig+0x5bc>)
 80064ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ba:	d012      	beq.n	80064e2 <UART_SetConfig+0x34a>
 80064bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064c0:	d802      	bhi.n	80064c8 <UART_SetConfig+0x330>
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d007      	beq.n	80064d6 <UART_SetConfig+0x33e>
 80064c6:	e012      	b.n	80064ee <UART_SetConfig+0x356>
 80064c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064cc:	d006      	beq.n	80064dc <UART_SetConfig+0x344>
 80064ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064d2:	d009      	beq.n	80064e8 <UART_SetConfig+0x350>
 80064d4:	e00b      	b.n	80064ee <UART_SetConfig+0x356>
 80064d6:	2300      	movs	r3, #0
 80064d8:	77fb      	strb	r3, [r7, #31]
 80064da:	e08c      	b.n	80065f6 <UART_SetConfig+0x45e>
 80064dc:	2302      	movs	r3, #2
 80064de:	77fb      	strb	r3, [r7, #31]
 80064e0:	e089      	b.n	80065f6 <UART_SetConfig+0x45e>
 80064e2:	2304      	movs	r3, #4
 80064e4:	77fb      	strb	r3, [r7, #31]
 80064e6:	e086      	b.n	80065f6 <UART_SetConfig+0x45e>
 80064e8:	2308      	movs	r3, #8
 80064ea:	77fb      	strb	r3, [r7, #31]
 80064ec:	e083      	b.n	80065f6 <UART_SetConfig+0x45e>
 80064ee:	2310      	movs	r3, #16
 80064f0:	77fb      	strb	r3, [r7, #31]
 80064f2:	bf00      	nop
 80064f4:	e07f      	b.n	80065f6 <UART_SetConfig+0x45e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a97      	ldr	r2, [pc, #604]	; (8006758 <UART_SetConfig+0x5c0>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d124      	bne.n	800654a <UART_SetConfig+0x3b2>
 8006500:	4b94      	ldr	r3, [pc, #592]	; (8006754 <UART_SetConfig+0x5bc>)
 8006502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006506:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800650a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800650e:	d012      	beq.n	8006536 <UART_SetConfig+0x39e>
 8006510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006514:	d802      	bhi.n	800651c <UART_SetConfig+0x384>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d007      	beq.n	800652a <UART_SetConfig+0x392>
 800651a:	e012      	b.n	8006542 <UART_SetConfig+0x3aa>
 800651c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006520:	d006      	beq.n	8006530 <UART_SetConfig+0x398>
 8006522:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006526:	d009      	beq.n	800653c <UART_SetConfig+0x3a4>
 8006528:	e00b      	b.n	8006542 <UART_SetConfig+0x3aa>
 800652a:	2301      	movs	r3, #1
 800652c:	77fb      	strb	r3, [r7, #31]
 800652e:	e062      	b.n	80065f6 <UART_SetConfig+0x45e>
 8006530:	2302      	movs	r3, #2
 8006532:	77fb      	strb	r3, [r7, #31]
 8006534:	e05f      	b.n	80065f6 <UART_SetConfig+0x45e>
 8006536:	2304      	movs	r3, #4
 8006538:	77fb      	strb	r3, [r7, #31]
 800653a:	e05c      	b.n	80065f6 <UART_SetConfig+0x45e>
 800653c:	2308      	movs	r3, #8
 800653e:	77fb      	strb	r3, [r7, #31]
 8006540:	e059      	b.n	80065f6 <UART_SetConfig+0x45e>
 8006542:	2310      	movs	r3, #16
 8006544:	77fb      	strb	r3, [r7, #31]
 8006546:	bf00      	nop
 8006548:	e055      	b.n	80065f6 <UART_SetConfig+0x45e>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a83      	ldr	r2, [pc, #524]	; (800675c <UART_SetConfig+0x5c4>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d124      	bne.n	800659e <UART_SetConfig+0x406>
 8006554:	4b7f      	ldr	r3, [pc, #508]	; (8006754 <UART_SetConfig+0x5bc>)
 8006556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800655a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800655e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006562:	d012      	beq.n	800658a <UART_SetConfig+0x3f2>
 8006564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006568:	d802      	bhi.n	8006570 <UART_SetConfig+0x3d8>
 800656a:	2b00      	cmp	r3, #0
 800656c:	d007      	beq.n	800657e <UART_SetConfig+0x3e6>
 800656e:	e012      	b.n	8006596 <UART_SetConfig+0x3fe>
 8006570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006574:	d006      	beq.n	8006584 <UART_SetConfig+0x3ec>
 8006576:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800657a:	d009      	beq.n	8006590 <UART_SetConfig+0x3f8>
 800657c:	e00b      	b.n	8006596 <UART_SetConfig+0x3fe>
 800657e:	2300      	movs	r3, #0
 8006580:	77fb      	strb	r3, [r7, #31]
 8006582:	e038      	b.n	80065f6 <UART_SetConfig+0x45e>
 8006584:	2302      	movs	r3, #2
 8006586:	77fb      	strb	r3, [r7, #31]
 8006588:	e035      	b.n	80065f6 <UART_SetConfig+0x45e>
 800658a:	2304      	movs	r3, #4
 800658c:	77fb      	strb	r3, [r7, #31]
 800658e:	e032      	b.n	80065f6 <UART_SetConfig+0x45e>
 8006590:	2308      	movs	r3, #8
 8006592:	77fb      	strb	r3, [r7, #31]
 8006594:	e02f      	b.n	80065f6 <UART_SetConfig+0x45e>
 8006596:	2310      	movs	r3, #16
 8006598:	77fb      	strb	r3, [r7, #31]
 800659a:	bf00      	nop
 800659c:	e02b      	b.n	80065f6 <UART_SetConfig+0x45e>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a6f      	ldr	r2, [pc, #444]	; (8006760 <UART_SetConfig+0x5c8>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d124      	bne.n	80065f2 <UART_SetConfig+0x45a>
 80065a8:	4b6a      	ldr	r3, [pc, #424]	; (8006754 <UART_SetConfig+0x5bc>)
 80065aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80065b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065b6:	d012      	beq.n	80065de <UART_SetConfig+0x446>
 80065b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065bc:	d802      	bhi.n	80065c4 <UART_SetConfig+0x42c>
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d007      	beq.n	80065d2 <UART_SetConfig+0x43a>
 80065c2:	e012      	b.n	80065ea <UART_SetConfig+0x452>
 80065c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065c8:	d006      	beq.n	80065d8 <UART_SetConfig+0x440>
 80065ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80065ce:	d009      	beq.n	80065e4 <UART_SetConfig+0x44c>
 80065d0:	e00b      	b.n	80065ea <UART_SetConfig+0x452>
 80065d2:	2300      	movs	r3, #0
 80065d4:	77fb      	strb	r3, [r7, #31]
 80065d6:	e00e      	b.n	80065f6 <UART_SetConfig+0x45e>
 80065d8:	2302      	movs	r3, #2
 80065da:	77fb      	strb	r3, [r7, #31]
 80065dc:	e00b      	b.n	80065f6 <UART_SetConfig+0x45e>
 80065de:	2304      	movs	r3, #4
 80065e0:	77fb      	strb	r3, [r7, #31]
 80065e2:	e008      	b.n	80065f6 <UART_SetConfig+0x45e>
 80065e4:	2308      	movs	r3, #8
 80065e6:	77fb      	strb	r3, [r7, #31]
 80065e8:	e005      	b.n	80065f6 <UART_SetConfig+0x45e>
 80065ea:	2310      	movs	r3, #16
 80065ec:	77fb      	strb	r3, [r7, #31]
 80065ee:	bf00      	nop
 80065f0:	e001      	b.n	80065f6 <UART_SetConfig+0x45e>
 80065f2:	2310      	movs	r3, #16
 80065f4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065fe:	d17f      	bne.n	8006700 <UART_SetConfig+0x568>
  {
    switch (clocksource)
 8006600:	7ffb      	ldrb	r3, [r7, #31]
 8006602:	2b08      	cmp	r3, #8
 8006604:	d85c      	bhi.n	80066c0 <UART_SetConfig+0x528>
 8006606:	a201      	add	r2, pc, #4	; (adr r2, 800660c <UART_SetConfig+0x474>)
 8006608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660c:	08006631 	.word	0x08006631
 8006610:	08006651 	.word	0x08006651
 8006614:	08006671 	.word	0x08006671
 8006618:	080066c1 	.word	0x080066c1
 800661c:	08006689 	.word	0x08006689
 8006620:	080066c1 	.word	0x080066c1
 8006624:	080066c1 	.word	0x080066c1
 8006628:	080066c1 	.word	0x080066c1
 800662c:	080066a9 	.word	0x080066a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006630:	f7fd fa24 	bl	8003a7c <HAL_RCC_GetPCLK1Freq>
 8006634:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	005a      	lsls	r2, r3, #1
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	085b      	lsrs	r3, r3, #1
 8006640:	441a      	add	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	fbb2 f3f3 	udiv	r3, r2, r3
 800664a:	b29b      	uxth	r3, r3
 800664c:	61bb      	str	r3, [r7, #24]
        break;
 800664e:	e03a      	b.n	80066c6 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006650:	f7fd fa28 	bl	8003aa4 <HAL_RCC_GetPCLK2Freq>
 8006654:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	005a      	lsls	r2, r3, #1
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	085b      	lsrs	r3, r3, #1
 8006660:	441a      	add	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	fbb2 f3f3 	udiv	r3, r2, r3
 800666a:	b29b      	uxth	r3, r3
 800666c:	61bb      	str	r3, [r7, #24]
        break;
 800666e:	e02a      	b.n	80066c6 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	085a      	lsrs	r2, r3, #1
 8006676:	4b3b      	ldr	r3, [pc, #236]	; (8006764 <UART_SetConfig+0x5cc>)
 8006678:	4413      	add	r3, r2
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	6852      	ldr	r2, [r2, #4]
 800667e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006682:	b29b      	uxth	r3, r3
 8006684:	61bb      	str	r3, [r7, #24]
        break;
 8006686:	e01e      	b.n	80066c6 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006688:	f7fd f93a 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 800668c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	005a      	lsls	r2, r3, #1
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	085b      	lsrs	r3, r3, #1
 8006698:	441a      	add	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	61bb      	str	r3, [r7, #24]
        break;
 80066a6:	e00e      	b.n	80066c6 <UART_SetConfig+0x52e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	085b      	lsrs	r3, r3, #1
 80066ae:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	61bb      	str	r3, [r7, #24]
        break;
 80066be:	e002      	b.n	80066c6 <UART_SetConfig+0x52e>
      default:
        ret = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	75fb      	strb	r3, [r7, #23]
        break;
 80066c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	2b0f      	cmp	r3, #15
 80066ca:	d916      	bls.n	80066fa <UART_SetConfig+0x562>
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066d2:	d212      	bcs.n	80066fa <UART_SetConfig+0x562>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	f023 030f 	bic.w	r3, r3, #15
 80066dc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	085b      	lsrs	r3, r3, #1
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	f003 0307 	and.w	r3, r3, #7
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	897b      	ldrh	r3, [r7, #10]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	897a      	ldrh	r2, [r7, #10]
 80066f6:	60da      	str	r2, [r3, #12]
 80066f8:	e07d      	b.n	80067f6 <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	75fb      	strb	r3, [r7, #23]
 80066fe:	e07a      	b.n	80067f6 <UART_SetConfig+0x65e>
    }
  }
  else
  {
    switch (clocksource)
 8006700:	7ffb      	ldrb	r3, [r7, #31]
 8006702:	2b08      	cmp	r3, #8
 8006704:	d866      	bhi.n	80067d4 <UART_SetConfig+0x63c>
 8006706:	a201      	add	r2, pc, #4	; (adr r2, 800670c <UART_SetConfig+0x574>)
 8006708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670c:	08006731 	.word	0x08006731
 8006710:	08006769 	.word	0x08006769
 8006714:	08006787 	.word	0x08006787
 8006718:	080067d5 	.word	0x080067d5
 800671c:	0800679f 	.word	0x0800679f
 8006720:	080067d5 	.word	0x080067d5
 8006724:	080067d5 	.word	0x080067d5
 8006728:	080067d5 	.word	0x080067d5
 800672c:	080067bd 	.word	0x080067bd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006730:	f7fd f9a4 	bl	8003a7c <HAL_RCC_GetPCLK1Freq>
 8006734:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	085a      	lsrs	r2, r3, #1
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	441a      	add	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	fbb2 f3f3 	udiv	r3, r2, r3
 8006748:	b29b      	uxth	r3, r3
 800674a:	61bb      	str	r3, [r7, #24]
        break;
 800674c:	e045      	b.n	80067da <UART_SetConfig+0x642>
 800674e:	bf00      	nop
 8006750:	40005000 	.word	0x40005000
 8006754:	40023800 	.word	0x40023800
 8006758:	40011400 	.word	0x40011400
 800675c:	40007800 	.word	0x40007800
 8006760:	40007c00 	.word	0x40007c00
 8006764:	01e84800 	.word	0x01e84800
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006768:	f7fd f99c 	bl	8003aa4 <HAL_RCC_GetPCLK2Freq>
 800676c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	085a      	lsrs	r2, r3, #1
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	441a      	add	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006780:	b29b      	uxth	r3, r3
 8006782:	61bb      	str	r3, [r7, #24]
        break;
 8006784:	e029      	b.n	80067da <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	085a      	lsrs	r2, r3, #1
 800678c:	4b1f      	ldr	r3, [pc, #124]	; (800680c <UART_SetConfig+0x674>)
 800678e:	4413      	add	r3, r2
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	6852      	ldr	r2, [r2, #4]
 8006794:	fbb3 f3f2 	udiv	r3, r3, r2
 8006798:	b29b      	uxth	r3, r3
 800679a:	61bb      	str	r3, [r7, #24]
        break;
 800679c:	e01d      	b.n	80067da <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800679e:	f7fd f8af 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 80067a2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	085a      	lsrs	r2, r3, #1
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	441a      	add	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	61bb      	str	r3, [r7, #24]
        break;
 80067ba:	e00e      	b.n	80067da <UART_SetConfig+0x642>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	085b      	lsrs	r3, r3, #1
 80067c2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	61bb      	str	r3, [r7, #24]
        break;
 80067d2:	e002      	b.n	80067da <UART_SetConfig+0x642>
      default:
        ret = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	75fb      	strb	r3, [r7, #23]
        break;
 80067d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	2b0f      	cmp	r3, #15
 80067de:	d908      	bls.n	80067f2 <UART_SetConfig+0x65a>
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067e6:	d204      	bcs.n	80067f2 <UART_SetConfig+0x65a>
    {
      huart->Instance->BRR = usartdiv;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	60da      	str	r2, [r3, #12]
 80067f0:	e001      	b.n	80067f6 <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006802:	7dfb      	ldrb	r3, [r7, #23]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3720      	adds	r7, #32
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	00f42400 	.word	0x00f42400

08006810 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	2bff      	cmp	r3, #255	; 0xff
 800681e:	d904      	bls.n	800682a <UART_AdvFeatureConfig+0x1a>
 8006820:	f640 3143 	movw	r1, #2883	; 0xb43
 8006824:	489f      	ldr	r0, [pc, #636]	; (8006aa4 <UART_AdvFeatureConfig+0x294>)
 8006826:	f7fa fea0 	bl	800156a <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d018      	beq.n	8006868 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683a:	2b00      	cmp	r3, #0
 800683c:	d009      	beq.n	8006852 <UART_AdvFeatureConfig+0x42>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006842:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006846:	d004      	beq.n	8006852 <UART_AdvFeatureConfig+0x42>
 8006848:	f640 3148 	movw	r1, #2888	; 0xb48
 800684c:	4895      	ldr	r0, [pc, #596]	; (8006aa4 <UART_AdvFeatureConfig+0x294>)
 800684e:	f7fa fe8c 	bl	800156a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686c:	f003 0302 	and.w	r3, r3, #2
 8006870:	2b00      	cmp	r3, #0
 8006872:	d018      	beq.n	80068a6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006878:	2b00      	cmp	r3, #0
 800687a:	d009      	beq.n	8006890 <UART_AdvFeatureConfig+0x80>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006884:	d004      	beq.n	8006890 <UART_AdvFeatureConfig+0x80>
 8006886:	f640 314f 	movw	r1, #2895	; 0xb4f
 800688a:	4886      	ldr	r0, [pc, #536]	; (8006aa4 <UART_AdvFeatureConfig+0x294>)
 800688c:	f7fa fe6d 	bl	800156a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068aa:	f003 0304 	and.w	r3, r3, #4
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d018      	beq.n	80068e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d009      	beq.n	80068ce <UART_AdvFeatureConfig+0xbe>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068c2:	d004      	beq.n	80068ce <UART_AdvFeatureConfig+0xbe>
 80068c4:	f640 3156 	movw	r1, #2902	; 0xb56
 80068c8:	4876      	ldr	r0, [pc, #472]	; (8006aa4 <UART_AdvFeatureConfig+0x294>)
 80068ca:	f7fa fe4e 	bl	800156a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e8:	f003 0308 	and.w	r3, r3, #8
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d018      	beq.n	8006922 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d009      	beq.n	800690c <UART_AdvFeatureConfig+0xfc>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006900:	d004      	beq.n	800690c <UART_AdvFeatureConfig+0xfc>
 8006902:	f640 315d 	movw	r1, #2909	; 0xb5d
 8006906:	4867      	ldr	r0, [pc, #412]	; (8006aa4 <UART_AdvFeatureConfig+0x294>)
 8006908:	f7fa fe2f 	bl	800156a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006926:	f003 0310 	and.w	r3, r3, #16
 800692a:	2b00      	cmp	r3, #0
 800692c:	d018      	beq.n	8006960 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006932:	2b00      	cmp	r3, #0
 8006934:	d009      	beq.n	800694a <UART_AdvFeatureConfig+0x13a>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800693e:	d004      	beq.n	800694a <UART_AdvFeatureConfig+0x13a>
 8006940:	f640 3164 	movw	r1, #2916	; 0xb64
 8006944:	4857      	ldr	r0, [pc, #348]	; (8006aa4 <UART_AdvFeatureConfig+0x294>)
 8006946:	f7fa fe10 	bl	800156a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	f003 0320 	and.w	r3, r3, #32
 8006968:	2b00      	cmp	r3, #0
 800696a:	d018      	beq.n	800699e <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006970:	2b00      	cmp	r3, #0
 8006972:	d009      	beq.n	8006988 <UART_AdvFeatureConfig+0x178>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800697c:	d004      	beq.n	8006988 <UART_AdvFeatureConfig+0x178>
 800697e:	f640 316b 	movw	r1, #2923	; 0xb6b
 8006982:	4848      	ldr	r0, [pc, #288]	; (8006aa4 <UART_AdvFeatureConfig+0x294>)
 8006984:	f7fa fdf1 	bl	800156a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d059      	beq.n	8006a5e <UART_AdvFeatureConfig+0x24e>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a3e      	ldr	r2, [pc, #248]	; (8006aa8 <UART_AdvFeatureConfig+0x298>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d013      	beq.n	80069dc <UART_AdvFeatureConfig+0x1cc>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a3c      	ldr	r2, [pc, #240]	; (8006aac <UART_AdvFeatureConfig+0x29c>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d00e      	beq.n	80069dc <UART_AdvFeatureConfig+0x1cc>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a3b      	ldr	r2, [pc, #236]	; (8006ab0 <UART_AdvFeatureConfig+0x2a0>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d009      	beq.n	80069dc <UART_AdvFeatureConfig+0x1cc>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a39      	ldr	r2, [pc, #228]	; (8006ab4 <UART_AdvFeatureConfig+0x2a4>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d004      	beq.n	80069dc <UART_AdvFeatureConfig+0x1cc>
 80069d2:	f640 3172 	movw	r1, #2930	; 0xb72
 80069d6:	4833      	ldr	r0, [pc, #204]	; (8006aa4 <UART_AdvFeatureConfig+0x294>)
 80069d8:	f7fa fdc7 	bl	800156a <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d009      	beq.n	80069f8 <UART_AdvFeatureConfig+0x1e8>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ec:	d004      	beq.n	80069f8 <UART_AdvFeatureConfig+0x1e8>
 80069ee:	f640 3173 	movw	r1, #2931	; 0xb73
 80069f2:	482c      	ldr	r0, [pc, #176]	; (8006aa4 <UART_AdvFeatureConfig+0x294>)
 80069f4:	f7fa fdb9 	bl	800156a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a16:	d122      	bne.n	8006a5e <UART_AdvFeatureConfig+0x24e>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d013      	beq.n	8006a48 <UART_AdvFeatureConfig+0x238>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a28:	d00e      	beq.n	8006a48 <UART_AdvFeatureConfig+0x238>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a32:	d009      	beq.n	8006a48 <UART_AdvFeatureConfig+0x238>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a38:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006a3c:	d004      	beq.n	8006a48 <UART_AdvFeatureConfig+0x238>
 8006a3e:	f640 3178 	movw	r1, #2936	; 0xb78
 8006a42:	4818      	ldr	r0, [pc, #96]	; (8006aa4 <UART_AdvFeatureConfig+0x294>)
 8006a44:	f7fa fd91 	bl	800156a <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d018      	beq.n	8006a9c <UART_AdvFeatureConfig+0x28c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d009      	beq.n	8006a86 <UART_AdvFeatureConfig+0x276>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a76:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006a7a:	d004      	beq.n	8006a86 <UART_AdvFeatureConfig+0x276>
 8006a7c:	f44f 6138 	mov.w	r1, #2944	; 0xb80
 8006a80:	4808      	ldr	r0, [pc, #32]	; (8006aa4 <UART_AdvFeatureConfig+0x294>)
 8006a82:	f7fa fd72 	bl	800156a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	605a      	str	r2, [r3, #4]
  }
}
 8006a9c:	bf00      	nop
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	08006ee0 	.word	0x08006ee0
 8006aa8:	40011000 	.word	0x40011000
 8006aac:	40004400 	.word	0x40004400
 8006ab0:	40004800 	.word	0x40004800
 8006ab4:	40011400 	.word	0x40011400

08006ab8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af02      	add	r7, sp, #8
 8006abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006ac6:	f7fb fab3 	bl	8002030 <HAL_GetTick>
 8006aca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0308 	and.w	r3, r3, #8
 8006ad6:	2b08      	cmp	r3, #8
 8006ad8:	d10e      	bne.n	8006af8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ada:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 f82a 	bl	8006b42 <UART_WaitOnFlagUntilTimeout>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d001      	beq.n	8006af8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e020      	b.n	8006b3a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0304 	and.w	r3, r3, #4
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d10e      	bne.n	8006b24 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f814 	bl	8006b42 <UART_WaitOnFlagUntilTimeout>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e00a      	b.n	8006b3a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2220      	movs	r2, #32
 8006b28:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b084      	sub	sp, #16
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	60f8      	str	r0, [r7, #12]
 8006b4a:	60b9      	str	r1, [r7, #8]
 8006b4c:	603b      	str	r3, [r7, #0]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b52:	e05d      	b.n	8006c10 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5a:	d059      	beq.n	8006c10 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b5c:	f7fb fa68 	bl	8002030 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d302      	bcc.n	8006b72 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d11b      	bne.n	8006baa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b80:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f022 0201 	bic.w	r2, r2, #1
 8006b90:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2220      	movs	r2, #32
 8006b96:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2220      	movs	r2, #32
 8006b9c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e042      	b.n	8006c30 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d02b      	beq.n	8006c10 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bc6:	d123      	bne.n	8006c10 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bd0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006be0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f022 0201 	bic.w	r2, r2, #1
 8006bf0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2220      	movs	r2, #32
 8006bf6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2220      	movs	r2, #32
 8006c02:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e00f      	b.n	8006c30 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	69da      	ldr	r2, [r3, #28]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	4013      	ands	r3, r2
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	bf0c      	ite	eq
 8006c20:	2301      	moveq	r3, #1
 8006c22:	2300      	movne	r3, #0
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	461a      	mov	r2, r3
 8006c28:	79fb      	ldrb	r3, [r7, #7]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d092      	beq.n	8006b54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c4e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689a      	ldr	r2, [r3, #8]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f022 0201 	bic.w	r2, r2, #1
 8006c5e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2220      	movs	r2, #32
 8006c64:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f7ff fa6a 	bl	8006170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c9c:	bf00      	nop
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cba:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7ff fa47 	bl	800615c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cce:	bf00      	nop
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
	...

08006cd8 <__libc_init_array>:
 8006cd8:	b570      	push	{r4, r5, r6, lr}
 8006cda:	4e0d      	ldr	r6, [pc, #52]	; (8006d10 <__libc_init_array+0x38>)
 8006cdc:	4c0d      	ldr	r4, [pc, #52]	; (8006d14 <__libc_init_array+0x3c>)
 8006cde:	1ba4      	subs	r4, r4, r6
 8006ce0:	10a4      	asrs	r4, r4, #2
 8006ce2:	2500      	movs	r5, #0
 8006ce4:	42a5      	cmp	r5, r4
 8006ce6:	d109      	bne.n	8006cfc <__libc_init_array+0x24>
 8006ce8:	4e0b      	ldr	r6, [pc, #44]	; (8006d18 <__libc_init_array+0x40>)
 8006cea:	4c0c      	ldr	r4, [pc, #48]	; (8006d1c <__libc_init_array+0x44>)
 8006cec:	f000 f820 	bl	8006d30 <_init>
 8006cf0:	1ba4      	subs	r4, r4, r6
 8006cf2:	10a4      	asrs	r4, r4, #2
 8006cf4:	2500      	movs	r5, #0
 8006cf6:	42a5      	cmp	r5, r4
 8006cf8:	d105      	bne.n	8006d06 <__libc_init_array+0x2e>
 8006cfa:	bd70      	pop	{r4, r5, r6, pc}
 8006cfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d00:	4798      	blx	r3
 8006d02:	3501      	adds	r5, #1
 8006d04:	e7ee      	b.n	8006ce4 <__libc_init_array+0xc>
 8006d06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d0a:	4798      	blx	r3
 8006d0c:	3501      	adds	r5, #1
 8006d0e:	e7f2      	b.n	8006cf6 <__libc_init_array+0x1e>
 8006d10:	08006f3c 	.word	0x08006f3c
 8006d14:	08006f3c 	.word	0x08006f3c
 8006d18:	08006f3c 	.word	0x08006f3c
 8006d1c:	08006f40 	.word	0x08006f40

08006d20 <memset>:
 8006d20:	4402      	add	r2, r0
 8006d22:	4603      	mov	r3, r0
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d100      	bne.n	8006d2a <memset+0xa>
 8006d28:	4770      	bx	lr
 8006d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d2e:	e7f9      	b.n	8006d24 <memset+0x4>

08006d30 <_init>:
 8006d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d32:	bf00      	nop
 8006d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d36:	bc08      	pop	{r3}
 8006d38:	469e      	mov	lr, r3
 8006d3a:	4770      	bx	lr

08006d3c <_fini>:
 8006d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3e:	bf00      	nop
 8006d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d42:	bc08      	pop	{r3}
 8006d44:	469e      	mov	lr, r3
 8006d46:	4770      	bx	lr
